
Rat sensor board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003028  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000120  20000000  00003028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004f0  20000120  00003148  00020120  2**3
                  ALLOC
  3 .stack        00000800  20000610  00003638  00020120  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
  6 .debug_info   00044bbf  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005875  00000000  00000000  00064d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009f42  00000000  00000000  0006a5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007d8  00000000  00000000  00074517  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d68  00000000  00000000  00074cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c17a  00000000  00000000  00075a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013131  00000000  00000000  00091bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00086201  00000000  00000000  000a4d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001344  00000000  00000000  0012af04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 0e 00 20 99 24 00 00 95 24 00 00 95 24 00 00     ... .$...$...$..
	...
      2c:	95 24 00 00 00 00 00 00 00 00 00 00 95 24 00 00     .$...........$..
      3c:	95 24 00 00 95 24 00 00 95 24 00 00 95 24 00 00     .$...$...$...$..
      4c:	71 07 00 00 f1 02 00 00 95 24 00 00 95 24 00 00     q........$...$..
      5c:	95 24 00 00 ad 01 00 00 f5 1b 00 00 05 1c 00 00     .$..............
      6c:	15 1c 00 00 25 1c 00 00 00 00 00 00 00 00 00 00     ....%...........
      7c:	95 24 00 00 95 24 00 00 95 24 00 00 69 0b 00 00     .$...$...$..i...
      8c:	79 0b 00 00 89 0b 00 00 00 00 00 00 00 00 00 00     y...............
      9c:	95 24 00 00 95 24 00 00 95 24 00 00 95 24 00 00     .$...$...$...$..
      ac:	95 24 00 00 00 00 00 00                             .$......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000120 	.word	0x20000120
      d4:	00000000 	.word	0x00000000
      d8:	00003028 	.word	0x00003028

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000124 	.word	0x20000124
     108:	00003028 	.word	0x00003028
     10c:	00003028 	.word	0x00003028
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00002225 	.word	0x00002225
     140:	00002bf5 	.word	0x00002bf5
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     1ac:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     1ae:	4b0b      	ldr	r3, [pc, #44]	; (1dc <EVSYS_Handler+0x30>)
     1b0:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     1b2:	490b      	ldr	r1, [pc, #44]	; (1e0 <EVSYS_Handler+0x34>)
     1b4:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     1b6:	6898      	ldr	r0, [r3, #8]
     1b8:	4302      	orrs	r2, r0
     1ba:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     1bc:	4b09      	ldr	r3, [pc, #36]	; (1e4 <EVSYS_Handler+0x38>)
     1be:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     1c0:	2c00      	cmp	r4, #0
     1c2:	d005      	beq.n	1d0 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     1c4:	6820      	ldr	r0, [r4, #0]
     1c6:	6863      	ldr	r3, [r4, #4]
     1c8:	4798      	blx	r3
		current_hook = current_hook->next;
     1ca:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     1cc:	2c00      	cmp	r4, #0
     1ce:	d1f9      	bne.n	1c4 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     1d0:	4b02      	ldr	r3, [pc, #8]	; (1dc <EVSYS_Handler+0x30>)
     1d2:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     1d4:	689a      	ldr	r2, [r3, #8]
     1d6:	438a      	bics	r2, r1
     1d8:	609a      	str	r2, [r3, #8]
}
     1da:	bd10      	pop	{r4, pc}
     1dc:	20000008 	.word	0x20000008
     1e0:	42000400 	.word	0x42000400
     1e4:	0f0fffff 	.word	0x0f0fffff

000001e8 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1e8:	4a06      	ldr	r2, [pc, #24]	; (204 <_system_events_init+0x1c>)
     1ea:	6a13      	ldr	r3, [r2, #32]
     1ec:	2102      	movs	r1, #2
     1ee:	430b      	orrs	r3, r1
     1f0:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     1f2:	2201      	movs	r2, #1
     1f4:	4b04      	ldr	r3, [pc, #16]	; (208 <_system_events_init+0x20>)
     1f6:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     1f8:	0019      	movs	r1, r3
     1fa:	780b      	ldrb	r3, [r1, #0]
     1fc:	4213      	tst	r3, r2
     1fe:	d1fc      	bne.n	1fa <_system_events_init+0x12>
	}
}
     200:	4770      	bx	lr
     202:	46c0      	nop			; (mov r8, r8)
     204:	40000400 	.word	0x40000400
     208:	42000400 	.word	0x42000400

0000020c <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     20c:	2301      	movs	r3, #1
     20e:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     210:	2300      	movs	r3, #0
     212:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     214:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     216:	70c3      	strb	r3, [r0, #3]
}
     218:	4770      	bx	lr
	...

0000021c <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	b083      	sub	sp, #12
     220:	0005      	movs	r5, r0
     222:	000e      	movs	r6, r1
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     224:	4b24      	ldr	r3, [pc, #144]	; (2b8 <events_allocate+0x9c>)
     226:	4798      	blx	r3
	tmp = _events_inst.allocated_channels;
     228:	4b24      	ldr	r3, [pc, #144]	; (2bc <events_allocate+0xa0>)
     22a:	681b      	ldr	r3, [r3, #0]
		if(!(tmp & 0x00000001)) {
     22c:	07da      	lsls	r2, r3, #31
     22e:	d50e      	bpl.n	24e <events_allocate+0x32>
		tmp = tmp >> 1;
     230:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     232:	2401      	movs	r4, #1
		if(!(tmp & 0x00000001)) {
     234:	2201      	movs	r2, #1
     236:	421a      	tst	r2, r3
     238:	d00a      	beq.n	250 <events_allocate+0x34>
		tmp = tmp >> 1;
     23a:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     23c:	3401      	adds	r4, #1
     23e:	b2e4      	uxtb	r4, r4
     240:	2c0c      	cmp	r4, #12
     242:	d1f8      	bne.n	236 <events_allocate+0x1a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     244:	4b1e      	ldr	r3, [pc, #120]	; (2c0 <events_allocate+0xa4>)
     246:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     248:	2014      	movs	r0, #20
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);


	return STATUS_OK;
}
     24a:	b003      	add	sp, #12
     24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     24e:	2400      	movs	r4, #0
			_events_inst.allocated_channels |= 1 << count;
     250:	4a1a      	ldr	r2, [pc, #104]	; (2bc <events_allocate+0xa0>)
     252:	6811      	ldr	r1, [r2, #0]
     254:	2301      	movs	r3, #1
     256:	40a3      	lsls	r3, r4
     258:	430b      	orrs	r3, r1
     25a:	6013      	str	r3, [r2, #0]
			_events_inst.free_channels--;
     25c:	7913      	ldrb	r3, [r2, #4]
     25e:	3b01      	subs	r3, #1
     260:	7113      	strb	r3, [r2, #4]
     262:	4b17      	ldr	r3, [pc, #92]	; (2c0 <events_allocate+0xa4>)
     264:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
     266:	2014      	movs	r0, #20
	if(new_channel == EVENTS_INVALID_CHANNEL) {
     268:	2cff      	cmp	r4, #255	; 0xff
     26a:	d0ee      	beq.n	24a <events_allocate+0x2e>
	resource->channel = new_channel;
     26c:	702c      	strb	r4, [r5, #0]
	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     26e:	7873      	ldrb	r3, [r6, #1]
     270:	2b02      	cmp	r3, #2
     272:	d00a      	beq.n	28a <events_allocate+0x6e>
		gclk_chan_conf.source_generator =
     274:	a901      	add	r1, sp, #4
     276:	78f3      	ldrb	r3, [r6, #3]
     278:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     27a:	1de7      	adds	r7, r4, #7
     27c:	b2ff      	uxtb	r7, r7
     27e:	0038      	movs	r0, r7
     280:	4b10      	ldr	r3, [pc, #64]	; (2c4 <events_allocate+0xa8>)
     282:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     284:	0038      	movs	r0, r7
     286:	4b10      	ldr	r3, [pc, #64]	; (2c8 <events_allocate+0xac>)
     288:	4798      	blx	r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
     28a:	78b3      	ldrb	r3, [r6, #2]
     28c:	041b      	lsls	r3, r3, #16
     28e:	22fe      	movs	r2, #254	; 0xfe
     290:	03d2      	lsls	r2, r2, #15
     292:	4013      	ands	r3, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     294:	7872      	ldrb	r2, [r6, #1]
     296:	0612      	lsls	r2, r2, #24
     298:	21c0      	movs	r1, #192	; 0xc0
     29a:	0489      	lsls	r1, r1, #18
     29c:	400a      	ands	r2, r1
     29e:	4313      	orrs	r3, r2
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
     2a0:	7832      	ldrb	r2, [r6, #0]
     2a2:	0692      	lsls	r2, r2, #26
     2a4:	21c0      	movs	r1, #192	; 0xc0
     2a6:	0509      	lsls	r1, r1, #20
     2a8:	400a      	ands	r2, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
     2aa:	4313      	orrs	r3, r2
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     2ac:	220f      	movs	r2, #15
     2ae:	4014      	ands	r4, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     2b0:	431c      	orrs	r4, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     2b2:	606c      	str	r4, [r5, #4]
	return STATUS_OK;
     2b4:	2000      	movs	r0, #0
     2b6:	e7c8      	b.n	24a <events_allocate+0x2e>
     2b8:	00001c39 	.word	0x00001c39
     2bc:	20000008 	.word	0x20000008
     2c0:	00001c79 	.word	0x00001c79
     2c4:	0000233d 	.word	0x0000233d
     2c8:	000022b1 	.word	0x000022b1

000002cc <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     2cc:	7803      	ldrb	r3, [r0, #0]
     2ce:	3301      	adds	r3, #1
     2d0:	021b      	lsls	r3, r3, #8
     2d2:	22f8      	movs	r2, #248	; 0xf8
     2d4:	0152      	lsls	r2, r2, #5
     2d6:	4013      	ands	r3, r2
			  EVSYS_USER_USER(user_id);
     2d8:	221f      	movs	r2, #31
     2da:	4011      	ands	r1, r2
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     2dc:	430b      	orrs	r3, r1
     2de:	4a03      	ldr	r2, [pc, #12]	; (2ec <events_attach_user+0x20>)
     2e0:	8113      	strh	r3, [r2, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
     2e2:	6843      	ldr	r3, [r0, #4]
     2e4:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
}
     2e6:	2000      	movs	r0, #0
     2e8:	4770      	bx	lr
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	42000400 	.word	0x42000400

000002f0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2f0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2f2:	2200      	movs	r2, #0
     2f4:	4b10      	ldr	r3, [pc, #64]	; (338 <EIC_Handler+0x48>)
     2f6:	701a      	strb	r2, [r3, #0]
     2f8:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2fa:	4910      	ldr	r1, [pc, #64]	; (33c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2fc:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2fe:	4e10      	ldr	r6, [pc, #64]	; (340 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     300:	4c0d      	ldr	r4, [pc, #52]	; (338 <EIC_Handler+0x48>)
     302:	e00a      	b.n	31a <EIC_Handler+0x2a>
		return eics[eic_index];
     304:	490d      	ldr	r1, [pc, #52]	; (33c <EIC_Handler+0x4c>)
     306:	e008      	b.n	31a <EIC_Handler+0x2a>
     308:	7823      	ldrb	r3, [r4, #0]
     30a:	3301      	adds	r3, #1
     30c:	b2db      	uxtb	r3, r3
     30e:	7023      	strb	r3, [r4, #0]
     310:	2b0f      	cmp	r3, #15
     312:	d810      	bhi.n	336 <EIC_Handler+0x46>
		return NULL;
     314:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     316:	2b1f      	cmp	r3, #31
     318:	d9f4      	bls.n	304 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     31a:	0028      	movs	r0, r5
     31c:	4018      	ands	r0, r3
     31e:	2201      	movs	r2, #1
     320:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     322:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     324:	4210      	tst	r0, r2
     326:	d0ef      	beq.n	308 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     328:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     32a:	009b      	lsls	r3, r3, #2
     32c:	599b      	ldr	r3, [r3, r6]
     32e:	2b00      	cmp	r3, #0
     330:	d0ea      	beq.n	308 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     332:	4798      	blx	r3
     334:	e7e8      	b.n	308 <EIC_Handler+0x18>
			}
		}
	}
}
     336:	bd70      	pop	{r4, r5, r6, pc}
     338:	200002cd 	.word	0x200002cd
     33c:	40001800 	.word	0x40001800
     340:	200002d0 	.word	0x200002d0

00000344 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     344:	4a04      	ldr	r2, [pc, #16]	; (358 <_extint_enable+0x14>)
     346:	7813      	ldrb	r3, [r2, #0]
     348:	2102      	movs	r1, #2
     34a:	430b      	orrs	r3, r1
     34c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     34e:	7853      	ldrb	r3, [r2, #1]
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     356:	4770      	bx	lr
     358:	40001800 	.word	0x40001800

0000035c <_system_extint_init>:
{
     35c:	b500      	push	{lr}
     35e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     360:	4a12      	ldr	r2, [pc, #72]	; (3ac <_system_extint_init+0x50>)
     362:	6993      	ldr	r3, [r2, #24]
     364:	2140      	movs	r1, #64	; 0x40
     366:	430b      	orrs	r3, r1
     368:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     36a:	a901      	add	r1, sp, #4
     36c:	2300      	movs	r3, #0
     36e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     370:	2005      	movs	r0, #5
     372:	4b0f      	ldr	r3, [pc, #60]	; (3b0 <_system_extint_init+0x54>)
     374:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     376:	2005      	movs	r0, #5
     378:	4b0e      	ldr	r3, [pc, #56]	; (3b4 <_system_extint_init+0x58>)
     37a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     37c:	4a0e      	ldr	r2, [pc, #56]	; (3b8 <_system_extint_init+0x5c>)
     37e:	7813      	ldrb	r3, [r2, #0]
     380:	2101      	movs	r1, #1
     382:	430b      	orrs	r3, r1
     384:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     386:	7853      	ldrb	r3, [r2, #1]
     388:	b25b      	sxtb	r3, r3
     38a:	2b00      	cmp	r3, #0
     38c:	dbfb      	blt.n	386 <_system_extint_init+0x2a>
     38e:	4b0b      	ldr	r3, [pc, #44]	; (3bc <_system_extint_init+0x60>)
     390:	0019      	movs	r1, r3
     392:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     394:	2200      	movs	r2, #0
     396:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     398:	4299      	cmp	r1, r3
     39a:	d1fc      	bne.n	396 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     39c:	2210      	movs	r2, #16
     39e:	4b08      	ldr	r3, [pc, #32]	; (3c0 <_system_extint_init+0x64>)
     3a0:	601a      	str	r2, [r3, #0]
	_extint_enable();
     3a2:	4b08      	ldr	r3, [pc, #32]	; (3c4 <_system_extint_init+0x68>)
     3a4:	4798      	blx	r3
}
     3a6:	b003      	add	sp, #12
     3a8:	bd00      	pop	{pc}
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	40000400 	.word	0x40000400
     3b0:	0000233d 	.word	0x0000233d
     3b4:	000022b1 	.word	0x000022b1
     3b8:	40001800 	.word	0x40001800
     3bc:	200002d0 	.word	0x200002d0
     3c0:	e000e100 	.word	0xe000e100
     3c4:	00000345 	.word	0x00000345

000003c8 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     3c8:	2300      	movs	r3, #0
     3ca:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     3cc:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3ce:	2201      	movs	r2, #1
     3d0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     3d2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     3d4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3d6:	3302      	adds	r3, #2
     3d8:	72c3      	strb	r3, [r0, #11]
}
     3da:	4770      	bx	lr

000003dc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3de:	b083      	sub	sp, #12
     3e0:	0005      	movs	r5, r0
     3e2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3e4:	a901      	add	r1, sp, #4
     3e6:	2300      	movs	r3, #0
     3e8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3ea:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3ec:	7923      	ldrb	r3, [r4, #4]
     3ee:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3f0:	7a23      	ldrb	r3, [r4, #8]
     3f2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3f4:	7820      	ldrb	r0, [r4, #0]
     3f6:	4b15      	ldr	r3, [pc, #84]	; (44c <extint_chan_set_config+0x70>)
     3f8:	4798      	blx	r3
		return NULL;
     3fa:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     3fc:	2d1f      	cmp	r5, #31
     3fe:	d800      	bhi.n	402 <extint_chan_set_config+0x26>
		return eics[eic_index];
     400:	4813      	ldr	r0, [pc, #76]	; (450 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     402:	2207      	movs	r2, #7
     404:	402a      	ands	r2, r5
     406:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     408:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     40a:	7aa3      	ldrb	r3, [r4, #10]
     40c:	2b00      	cmp	r3, #0
     40e:	d001      	beq.n	414 <extint_chan_set_config+0x38>
     410:	2308      	movs	r3, #8
     412:	431f      	orrs	r7, r3
     414:	08eb      	lsrs	r3, r5, #3
     416:	009b      	lsls	r3, r3, #2
     418:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     41a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     41c:	260f      	movs	r6, #15
     41e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     420:	43b1      	bics	r1, r6
			(new_config << config_pos);
     422:	4097      	lsls	r7, r2
     424:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     426:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     428:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     42a:	7a63      	ldrb	r3, [r4, #9]
     42c:	2b00      	cmp	r3, #0
     42e:	d106      	bne.n	43e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     430:	6943      	ldr	r3, [r0, #20]
     432:	2201      	movs	r2, #1
     434:	40aa      	lsls	r2, r5
     436:	4393      	bics	r3, r2
     438:	6143      	str	r3, [r0, #20]
	}
}
     43a:	b003      	add	sp, #12
     43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     43e:	6942      	ldr	r2, [r0, #20]
     440:	2301      	movs	r3, #1
     442:	40ab      	lsls	r3, r5
     444:	4313      	orrs	r3, r2
     446:	6143      	str	r3, [r0, #20]
     448:	e7f7      	b.n	43a <extint_chan_set_config+0x5e>
     44a:	46c0      	nop			; (mov r8, r8)
     44c:	00002435 	.word	0x00002435
     450:	40001800 	.word	0x40001800

00000454 <extint_enable_events>:
 *
 *  \param[in] events    Struct containing flags of events to enable
 */
void extint_enable_events(
		struct extint_events *const events)
{
     454:	b510      	push	{r4, lr}
     456:	2300      	movs	r3, #0
     458:	2100      	movs	r1, #0
		uint32_t event_mask = 0;

		/* Create an enable mask for the current EIC module */
		for (uint32_t j = 0; j < 32; j++) {
			if (events->generate_event_on_detect[(32 * i) + j]) {
				event_mask |= (1UL << j);
     45a:	2401      	movs	r4, #1
     45c:	e002      	b.n	464 <extint_enable_events+0x10>
		for (uint32_t j = 0; j < 32; j++) {
     45e:	3301      	adds	r3, #1
     460:	2b20      	cmp	r3, #32
     462:	d006      	beq.n	472 <extint_enable_events+0x1e>
			if (events->generate_event_on_detect[(32 * i) + j]) {
     464:	5cc2      	ldrb	r2, [r0, r3]
     466:	2a00      	cmp	r2, #0
     468:	d0f9      	beq.n	45e <extint_enable_events+0xa>
				event_mask |= (1UL << j);
     46a:	0022      	movs	r2, r4
     46c:	409a      	lsls	r2, r3
     46e:	4311      	orrs	r1, r2
     470:	e7f5      	b.n	45e <extint_enable_events+0xa>
			}
		}

		/* Enable the masked events */
		eics[i]->EVCTRL.reg |= event_mask;
     472:	4b02      	ldr	r3, [pc, #8]	; (47c <extint_enable_events+0x28>)
     474:	685a      	ldr	r2, [r3, #4]
     476:	4311      	orrs	r1, r2
     478:	6059      	str	r1, [r3, #4]
	}
}
     47a:	bd10      	pop	{r4, pc}
     47c:	40001800 	.word	0x40001800

00000480 <extint_disable_events>:
 *
 *  \param[in] events    Struct containing flags of events to disable
 */
void extint_disable_events(
		struct extint_events *const events)
{
     480:	b510      	push	{r4, lr}
     482:	2300      	movs	r3, #0
     484:	2100      	movs	r1, #0
		uint32_t event_mask = 0;

		/* Create a disable mask for the current EIC module */
		for (uint32_t j = 0; j < 32; j++) {
			if (events->generate_event_on_detect[(32 * i) + j]) {
				event_mask |= (1UL << j);
     486:	2401      	movs	r4, #1
     488:	e002      	b.n	490 <extint_disable_events+0x10>
		for (uint32_t j = 0; j < 32; j++) {
     48a:	3301      	adds	r3, #1
     48c:	2b20      	cmp	r3, #32
     48e:	d006      	beq.n	49e <extint_disable_events+0x1e>
			if (events->generate_event_on_detect[(32 * i) + j]) {
     490:	5cc2      	ldrb	r2, [r0, r3]
     492:	2a00      	cmp	r2, #0
     494:	d0f9      	beq.n	48a <extint_disable_events+0xa>
				event_mask |= (1UL << j);
     496:	0022      	movs	r2, r4
     498:	409a      	lsls	r2, r3
     49a:	4311      	orrs	r1, r2
     49c:	e7f5      	b.n	48a <extint_disable_events+0xa>
			}
		}

		/* Disable the masked events */
		eics[i]->EVCTRL.reg &= ~event_mask;
     49e:	4a02      	ldr	r2, [pc, #8]	; (4a8 <extint_disable_events+0x28>)
     4a0:	6853      	ldr	r3, [r2, #4]
     4a2:	438b      	bics	r3, r1
     4a4:	6053      	str	r3, [r2, #4]
	}
}
     4a6:	bd10      	pop	{r4, pc}
     4a8:	40001800 	.word	0x40001800

000004ac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4ac:	b500      	push	{lr}
     4ae:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4b0:	ab01      	add	r3, sp, #4
     4b2:	2280      	movs	r2, #128	; 0x80
     4b4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4b6:	780a      	ldrb	r2, [r1, #0]
     4b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4ba:	784a      	ldrb	r2, [r1, #1]
     4bc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4be:	788a      	ldrb	r2, [r1, #2]
     4c0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4c2:	0019      	movs	r1, r3
     4c4:	4b01      	ldr	r3, [pc, #4]	; (4cc <port_pin_set_config+0x20>)
     4c6:	4798      	blx	r3
}
     4c8:	b003      	add	sp, #12
     4ca:	bd00      	pop	{pc}
     4cc:	00002435 	.word	0x00002435

000004d0 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4d0:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     4d2:	7a98      	ldrb	r0, [r3, #10]
     4d4:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     4d6:	4770      	bx	lr

000004d8 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     4d8:	b570      	push	{r4, r5, r6, lr}
     4da:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4dc:	6806      	ldr	r6, [r0, #0]
     4de:	2208      	movs	r2, #8
     4e0:	4b05      	ldr	r3, [pc, #20]	; (4f8 <rtc_count_enable+0x20>)
     4e2:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     4e4:	4d05      	ldr	r5, [pc, #20]	; (4fc <rtc_count_enable+0x24>)
     4e6:	0020      	movs	r0, r4
     4e8:	47a8      	blx	r5
     4ea:	2800      	cmp	r0, #0
     4ec:	d1fb      	bne.n	4e6 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     4ee:	8833      	ldrh	r3, [r6, #0]
     4f0:	2202      	movs	r2, #2
     4f2:	4313      	orrs	r3, r2
     4f4:	8033      	strh	r3, [r6, #0]
}
     4f6:	bd70      	pop	{r4, r5, r6, pc}
     4f8:	e000e100 	.word	0xe000e100
     4fc:	000004d1 	.word	0x000004d1

00000500 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     500:	b570      	push	{r4, r5, r6, lr}
     502:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     504:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     506:	2108      	movs	r1, #8
     508:	2380      	movs	r3, #128	; 0x80
     50a:	4a07      	ldr	r2, [pc, #28]	; (528 <rtc_count_disable+0x28>)
     50c:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     50e:	4d07      	ldr	r5, [pc, #28]	; (52c <rtc_count_disable+0x2c>)
     510:	0020      	movs	r0, r4
     512:	47a8      	blx	r5
     514:	2800      	cmp	r0, #0
     516:	d1fb      	bne.n	510 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     518:	23c1      	movs	r3, #193	; 0xc1
     51a:	71b3      	strb	r3, [r6, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     51c:	7233      	strb	r3, [r6, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     51e:	8833      	ldrh	r3, [r6, #0]
     520:	2202      	movs	r2, #2
     522:	4393      	bics	r3, r2
     524:	8033      	strh	r3, [r6, #0]
}
     526:	bd70      	pop	{r4, r5, r6, pc}
     528:	e000e100 	.word	0xe000e100
     52c:	000004d1 	.word	0x000004d1

00000530 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     530:	b570      	push	{r4, r5, r6, lr}
     532:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     534:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     536:	4b07      	ldr	r3, [pc, #28]	; (554 <rtc_count_reset+0x24>)
     538:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     53a:	2300      	movs	r3, #0
     53c:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
     53e:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     540:	4d05      	ldr	r5, [pc, #20]	; (558 <rtc_count_reset+0x28>)
     542:	0020      	movs	r0, r4
     544:	47a8      	blx	r5
     546:	2800      	cmp	r0, #0
     548:	d1fb      	bne.n	542 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     54a:	8833      	ldrh	r3, [r6, #0]
     54c:	2201      	movs	r2, #1
     54e:	4313      	orrs	r3, r2
     550:	8033      	strh	r3, [r6, #0]
}
     552:	bd70      	pop	{r4, r5, r6, pc}
     554:	00000501 	.word	0x00000501
     558:	000004d1 	.word	0x000004d1

0000055c <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     55c:	b570      	push	{r4, r5, r6, lr}
     55e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     560:	6806      	ldr	r6, [r0, #0]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     562:	7943      	ldrb	r3, [r0, #5]
     564:	2b00      	cmp	r3, #0
     566:	d10e      	bne.n	586 <rtc_count_get_count+0x2a>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     568:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <rtc_count_get_count+0x4c>)
     56a:	8073      	strh	r3, [r6, #2]

		while (rtc_count_is_syncing(module)) {
     56c:	4d0f      	ldr	r5, [pc, #60]	; (5ac <rtc_count_get_count+0x50>)
     56e:	0020      	movs	r0, r4
     570:	47a8      	blx	r5
     572:	2800      	cmp	r0, #0
     574:	d1fb      	bne.n	56e <rtc_count_get_count+0x12>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     576:	7923      	ldrb	r3, [r4, #4]
     578:	2b00      	cmp	r3, #0
     57a:	d012      	beq.n	5a2 <rtc_count_get_count+0x46>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     57c:	2000      	movs	r0, #0
	switch (module->mode) {
     57e:	2b01      	cmp	r3, #1
     580:	d100      	bne.n	584 <rtc_count_get_count+0x28>
			ret_val = rtc_module->MODE0.COUNT.reg;
     582:	6930      	ldr	r0, [r6, #16]
			break;
	}

	return ret_val;
}
     584:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!(rtc_module->MODE0.READREQ.reg & RTC_READREQ_RCONT)){
     586:	8873      	ldrh	r3, [r6, #2]
     588:	045b      	lsls	r3, r3, #17
     58a:	d4f4      	bmi.n	576 <rtc_count_get_count+0x1a>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
     58c:	8873      	ldrh	r3, [r6, #2]
     58e:	22c0      	movs	r2, #192	; 0xc0
     590:	0212      	lsls	r2, r2, #8
     592:	4313      	orrs	r3, r2
     594:	8073      	strh	r3, [r6, #2]
		while (rtc_count_is_syncing(module)) {
     596:	4d05      	ldr	r5, [pc, #20]	; (5ac <rtc_count_get_count+0x50>)
     598:	0020      	movs	r0, r4
     59a:	47a8      	blx	r5
     59c:	2800      	cmp	r0, #0
     59e:	d1fb      	bne.n	598 <rtc_count_get_count+0x3c>
     5a0:	e7e9      	b.n	576 <rtc_count_get_count+0x1a>
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     5a2:	8a30      	ldrh	r0, [r6, #16]
     5a4:	b280      	uxth	r0, r0
			break;
     5a6:	e7ed      	b.n	584 <rtc_count_get_count+0x28>
     5a8:	ffff8000 	.word	0xffff8000
     5ac:	000004d1 	.word	0x000004d1

000005b0 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5b2:	b083      	sub	sp, #12
     5b4:	0004      	movs	r4, r0
     5b6:	9101      	str	r1, [sp, #4]
     5b8:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5ba:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     5bc:	4f11      	ldr	r7, [pc, #68]	; (604 <rtc_count_set_compare+0x54>)
     5be:	0020      	movs	r0, r4
     5c0:	47b8      	blx	r7
     5c2:	2800      	cmp	r0, #0
     5c4:	d1fb      	bne.n	5be <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     5c6:	7923      	ldrb	r3, [r4, #4]
     5c8:	2b00      	cmp	r3, #0
     5ca:	d00a      	beq.n	5e2 <rtc_count_set_compare+0x32>
     5cc:	2b01      	cmp	r3, #1
     5ce:	d116      	bne.n	5fe <rtc_count_set_compare+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     5d0:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     5d2:	2d01      	cmp	r5, #1
     5d4:	d814      	bhi.n	600 <rtc_count_set_compare+0x50>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     5d6:	3506      	adds	r5, #6
     5d8:	00ad      	lsls	r5, r5, #2
     5da:	9b01      	ldr	r3, [sp, #4]
     5dc:	51ab      	str	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     5de:	2000      	movs	r0, #0
			break;
     5e0:	e00e      	b.n	600 <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
     5e2:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     5e4:	2d02      	cmp	r5, #2
     5e6:	d80b      	bhi.n	600 <rtc_count_set_compare+0x50>
			if (comp_value > 0xffff) {
     5e8:	4b07      	ldr	r3, [pc, #28]	; (608 <rtc_count_set_compare+0x58>)
     5ea:	9a01      	ldr	r2, [sp, #4]
     5ec:	429a      	cmp	r2, r3
     5ee:	d807      	bhi.n	600 <rtc_count_set_compare+0x50>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     5f0:	466b      	mov	r3, sp
     5f2:	889b      	ldrh	r3, [r3, #4]
     5f4:	350c      	adds	r5, #12
     5f6:	006d      	lsls	r5, r5, #1
     5f8:	53ab      	strh	r3, [r5, r6]
	return STATUS_OK;
     5fa:	2000      	movs	r0, #0
			break;
     5fc:	e000      	b.n	600 <rtc_count_set_compare+0x50>
			return STATUS_ERR_BAD_FORMAT;
     5fe:	201a      	movs	r0, #26
}
     600:	b003      	add	sp, #12
     602:	bdf0      	pop	{r4, r5, r6, r7, pc}
     604:	000004d1 	.word	0x000004d1
     608:	0000ffff 	.word	0x0000ffff

0000060c <rtc_count_init>:
{
     60c:	b5f0      	push	{r4, r5, r6, r7, lr}
     60e:	b083      	sub	sp, #12
     610:	0004      	movs	r4, r0
     612:	0016      	movs	r6, r2
	module->hw = hw;
     614:	6001      	str	r1, [r0, #0]
     616:	4a2e      	ldr	r2, [pc, #184]	; (6d0 <rtc_count_init+0xc4>)
     618:	6993      	ldr	r3, [r2, #24]
     61a:	2120      	movs	r1, #32
     61c:	430b      	orrs	r3, r1
     61e:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     620:	a901      	add	r1, sp, #4
     622:	2302      	movs	r3, #2
     624:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     626:	2004      	movs	r0, #4
     628:	4b2a      	ldr	r3, [pc, #168]	; (6d4 <rtc_count_init+0xc8>)
     62a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     62c:	2004      	movs	r0, #4
     62e:	4b2a      	ldr	r3, [pc, #168]	; (6d8 <rtc_count_init+0xcc>)
     630:	4798      	blx	r3
	rtc_count_reset(module);
     632:	0020      	movs	r0, r4
     634:	4b29      	ldr	r3, [pc, #164]	; (6dc <rtc_count_init+0xd0>)
     636:	4798      	blx	r3
	module->mode                = config->mode;
     638:	78b3      	ldrb	r3, [r6, #2]
     63a:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     63c:	7933      	ldrb	r3, [r6, #4]
     63e:	7163      	strb	r3, [r4, #5]
	_rtc_instance[0] = module;
     640:	4b27      	ldr	r3, [pc, #156]	; (6e0 <rtc_count_init+0xd4>)
     642:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     644:	6827      	ldr	r7, [r4, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     646:	8833      	ldrh	r3, [r6, #0]
     648:	803b      	strh	r3, [r7, #0]
	switch (config->mode) {
     64a:	78b3      	ldrb	r3, [r6, #2]
     64c:	2b00      	cmp	r3, #0
     64e:	d021      	beq.n	694 <rtc_count_init+0x88>
			return STATUS_ERR_INVALID_ARG;
     650:	2017      	movs	r0, #23
	switch (config->mode) {
     652:	2b01      	cmp	r3, #1
     654:	d11c      	bne.n	690 <rtc_count_init+0x84>
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     656:	883b      	ldrh	r3, [r7, #0]
     658:	b29b      	uxth	r3, r3
     65a:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     65c:	78f3      	ldrb	r3, [r6, #3]
     65e:	2b00      	cmp	r3, #0
     660:	d003      	beq.n	66a <rtc_count_init+0x5e>
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     662:	883b      	ldrh	r3, [r7, #0]
     664:	2280      	movs	r2, #128	; 0x80
     666:	4313      	orrs	r3, r2
     668:	803b      	strh	r3, [r7, #0]
				while (rtc_count_is_syncing(module)) {
     66a:	4d1e      	ldr	r5, [pc, #120]	; (6e4 <rtc_count_init+0xd8>)
     66c:	0020      	movs	r0, r4
     66e:	47a8      	blx	r5
     670:	2800      	cmp	r0, #0
     672:	d1fb      	bne.n	66c <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     674:	2200      	movs	r2, #0
     676:	68b1      	ldr	r1, [r6, #8]
     678:	0020      	movs	r0, r4
     67a:	4b1b      	ldr	r3, [pc, #108]	; (6e8 <rtc_count_init+0xdc>)
     67c:	4798      	blx	r3
	if (config->continuously_update) {
     67e:	7933      	ldrb	r3, [r6, #4]
	return STATUS_OK;
     680:	2000      	movs	r0, #0
	if (config->continuously_update) {
     682:	2b00      	cmp	r3, #0
     684:	d004      	beq.n	690 <rtc_count_init+0x84>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     686:	887b      	ldrh	r3, [r7, #2]
     688:	2280      	movs	r2, #128	; 0x80
     68a:	01d2      	lsls	r2, r2, #7
     68c:	4313      	orrs	r3, r2
     68e:	807b      	strh	r3, [r7, #2]
}
     690:	b003      	add	sp, #12
     692:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     694:	883b      	ldrh	r3, [r7, #0]
     696:	2204      	movs	r2, #4
     698:	4313      	orrs	r3, r2
     69a:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     69c:	78f3      	ldrb	r3, [r6, #3]
				return STATUS_ERR_INVALID_ARG;
     69e:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     6a0:	2b00      	cmp	r3, #0
     6a2:	d1f5      	bne.n	690 <rtc_count_init+0x84>
				while (rtc_count_is_syncing(module)) {
     6a4:	4d0f      	ldr	r5, [pc, #60]	; (6e4 <rtc_count_init+0xd8>)
     6a6:	0020      	movs	r0, r4
     6a8:	47a8      	blx	r5
     6aa:	2800      	cmp	r0, #0
     6ac:	d1fb      	bne.n	6a6 <rtc_count_init+0x9a>
				rtc_count_set_compare(module, config->compare_values[i],
     6ae:	2200      	movs	r2, #0
     6b0:	68b1      	ldr	r1, [r6, #8]
     6b2:	0020      	movs	r0, r4
     6b4:	4b0c      	ldr	r3, [pc, #48]	; (6e8 <rtc_count_init+0xdc>)
     6b6:	4798      	blx	r3
				while (rtc_count_is_syncing(module)) {
     6b8:	4d0a      	ldr	r5, [pc, #40]	; (6e4 <rtc_count_init+0xd8>)
     6ba:	0020      	movs	r0, r4
     6bc:	47a8      	blx	r5
     6be:	2800      	cmp	r0, #0
     6c0:	d1fb      	bne.n	6ba <rtc_count_init+0xae>
				rtc_count_set_compare(module, config->compare_values[i],
     6c2:	2201      	movs	r2, #1
     6c4:	68f1      	ldr	r1, [r6, #12]
     6c6:	0020      	movs	r0, r4
     6c8:	4b07      	ldr	r3, [pc, #28]	; (6e8 <rtc_count_init+0xdc>)
     6ca:	4798      	blx	r3
     6cc:	e7d7      	b.n	67e <rtc_count_init+0x72>
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	40000400 	.word	0x40000400
     6d4:	0000233d 	.word	0x0000233d
     6d8:	000022b1 	.word	0x000022b1
     6dc:	00000531 	.word	0x00000531
     6e0:	20000310 	.word	0x20000310
     6e4:	000004d1 	.word	0x000004d1
     6e8:	000005b1 	.word	0x000005b1

000006ec <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6ee:	0004      	movs	r4, r0
     6f0:	000e      	movs	r6, r1
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     6f2:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     6f4:	2015      	movs	r0, #21
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     6f6:	2b00      	cmp	r3, #0
     6f8:	d000      	beq.n	6fc <rtc_count_set_period+0x10>

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;

	return STATUS_OK;
}
     6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
     6fc:	6827      	ldr	r7, [r4, #0]
	while (rtc_count_is_syncing(module)) {
     6fe:	4d03      	ldr	r5, [pc, #12]	; (70c <rtc_count_set_period+0x20>)
     700:	0020      	movs	r0, r4
     702:	47a8      	blx	r5
     704:	2800      	cmp	r0, #0
     706:	d1fb      	bne.n	700 <rtc_count_set_period+0x14>
	rtc_module->MODE1.PER.reg = period_value;
     708:	82be      	strh	r6, [r7, #20]
	return STATUS_OK;
     70a:	e7f6      	b.n	6fa <rtc_count_set_period+0xe>
     70c:	000004d1 	.word	0x000004d1

00000710 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     710:	2a02      	cmp	r2, #2
     712:	d00b      	beq.n	72c <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     714:	7903      	ldrb	r3, [r0, #4]
     716:	2b00      	cmp	r3, #0
     718:	d005      	beq.n	726 <rtc_count_register_callback+0x16>
     71a:	2b01      	cmp	r3, #1
     71c:	d112      	bne.n	744 <rtc_count_register_callback+0x34>
     71e:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     720:	2a01      	cmp	r2, #1
     722:	d80d      	bhi.n	740 <rtc_count_register_callback+0x30>
     724:	e002      	b.n	72c <rtc_count_register_callback+0x1c>
     726:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     728:	2a02      	cmp	r2, #2
     72a:	d809      	bhi.n	740 <rtc_count_register_callback+0x30>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     72c:	1c93      	adds	r3, r2, #2
     72e:	009b      	lsls	r3, r3, #2
     730:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     732:	8a83      	ldrh	r3, [r0, #20]
     734:	2101      	movs	r1, #1
     736:	4091      	lsls	r1, r2
     738:	430b      	orrs	r3, r1
     73a:	b29b      	uxth	r3, r3
     73c:	8283      	strh	r3, [r0, #20]
     73e:	2300      	movs	r3, #0
	}

	return status;
}
     740:	0018      	movs	r0, r3
     742:	4770      	bx	lr
			status = STATUS_ERR_INVALID_ARG;
     744:	2317      	movs	r3, #23
     746:	e7fb      	b.n	740 <rtc_count_register_callback+0x30>

00000748 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     748:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     74a:	6804      	ldr	r4, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     74c:	2902      	cmp	r1, #2
     74e:	d00b      	beq.n	768 <rtc_count_enable_callback+0x20>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     750:	2201      	movs	r2, #1
     752:	408a      	lsls	r2, r1
     754:	2303      	movs	r3, #3
     756:	4013      	ands	r3, r2
     758:	71e3      	strb	r3, [r4, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     75a:	8ac3      	ldrh	r3, [r0, #22]
     75c:	2201      	movs	r2, #1
     75e:	408a      	lsls	r2, r1
     760:	4313      	orrs	r3, r2
     762:	b29b      	uxth	r3, r3
     764:	82c3      	strh	r3, [r0, #22]
}
     766:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     768:	2380      	movs	r3, #128	; 0x80
     76a:	71e3      	strb	r3, [r4, #7]
     76c:	e7f5      	b.n	75a <rtc_count_enable_callback+0x12>
	...

00000770 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     770:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     772:	4b14      	ldr	r3, [pc, #80]	; (7c4 <RTC_Handler+0x54>)
     774:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     776:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     778:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
     77a:	8a93      	ldrh	r3, [r2, #20]
     77c:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     77e:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     780:	79e3      	ldrb	r3, [r4, #7]
     782:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     784:	b258      	sxtb	r0, r3
     786:	2800      	cmp	r0, #0
     788:	db06      	blt.n	798 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     78a:	07d8      	lsls	r0, r3, #31
     78c:	d50f      	bpl.n	7ae <RTC_Handler+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     78e:	07cb      	lsls	r3, r1, #31
     790:	d40a      	bmi.n	7a8 <RTC_Handler+0x38>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     792:	2301      	movs	r3, #1
     794:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     796:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     798:	074b      	lsls	r3, r1, #29
     79a:	d402      	bmi.n	7a2 <RTC_Handler+0x32>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     79c:	2380      	movs	r3, #128	; 0x80
     79e:	7223      	strb	r3, [r4, #8]
     7a0:	e7f9      	b.n	796 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     7a2:	6913      	ldr	r3, [r2, #16]
     7a4:	4798      	blx	r3
     7a6:	e7f9      	b.n	79c <RTC_Handler+0x2c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     7a8:	6893      	ldr	r3, [r2, #8]
     7aa:	4798      	blx	r3
     7ac:	e7f1      	b.n	792 <RTC_Handler+0x22>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     7ae:	079b      	lsls	r3, r3, #30
     7b0:	d5f1      	bpl.n	796 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     7b2:	078b      	lsls	r3, r1, #30
     7b4:	d402      	bmi.n	7bc <RTC_Handler+0x4c>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     7b6:	2302      	movs	r3, #2
     7b8:	7223      	strb	r3, [r4, #8]
}
     7ba:	e7ec      	b.n	796 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     7bc:	68d3      	ldr	r3, [r2, #12]
     7be:	4798      	blx	r3
     7c0:	e7f9      	b.n	7b6 <RTC_Handler+0x46>
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	20000310 	.word	0x20000310

000007c8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ca:	46de      	mov	lr, fp
     7cc:	4657      	mov	r7, sl
     7ce:	464e      	mov	r6, r9
     7d0:	4645      	mov	r5, r8
     7d2:	b5e0      	push	{r5, r6, r7, lr}
     7d4:	b087      	sub	sp, #28
     7d6:	4680      	mov	r8, r0
     7d8:	9104      	str	r1, [sp, #16]
     7da:	0016      	movs	r6, r2
     7dc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     7de:	2200      	movs	r2, #0
     7e0:	2300      	movs	r3, #0
     7e2:	2100      	movs	r1, #0
     7e4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     7e6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     7e8:	2001      	movs	r0, #1
     7ea:	0021      	movs	r1, r4
     7ec:	9600      	str	r6, [sp, #0]
     7ee:	9701      	str	r7, [sp, #4]
     7f0:	465c      	mov	r4, fp
     7f2:	9403      	str	r4, [sp, #12]
     7f4:	4644      	mov	r4, r8
     7f6:	9405      	str	r4, [sp, #20]
     7f8:	e013      	b.n	822 <STACK_SIZE+0x22>
     7fa:	2420      	movs	r4, #32
     7fc:	1a64      	subs	r4, r4, r1
     7fe:	0005      	movs	r5, r0
     800:	40e5      	lsrs	r5, r4
     802:	46a8      	mov	r8, r5
     804:	e014      	b.n	830 <STACK_SIZE+0x30>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     806:	9c00      	ldr	r4, [sp, #0]
     808:	9d01      	ldr	r5, [sp, #4]
     80a:	1b12      	subs	r2, r2, r4
     80c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     80e:	465c      	mov	r4, fp
     810:	464d      	mov	r5, r9
     812:	432c      	orrs	r4, r5
     814:	46a3      	mov	fp, r4
     816:	9c03      	ldr	r4, [sp, #12]
     818:	4645      	mov	r5, r8
     81a:	432c      	orrs	r4, r5
     81c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     81e:	3901      	subs	r1, #1
     820:	d325      	bcc.n	86e <STACK_SIZE+0x6e>
		bit_shift = (uint64_t)1 << i;
     822:	2420      	movs	r4, #32
     824:	4264      	negs	r4, r4
     826:	190c      	adds	r4, r1, r4
     828:	d4e7      	bmi.n	7fa <long_division+0x32>
     82a:	0005      	movs	r5, r0
     82c:	40a5      	lsls	r5, r4
     82e:	46a8      	mov	r8, r5
     830:	0004      	movs	r4, r0
     832:	408c      	lsls	r4, r1
     834:	46a1      	mov	r9, r4
		r = r << 1;
     836:	1892      	adds	r2, r2, r2
     838:	415b      	adcs	r3, r3
     83a:	0014      	movs	r4, r2
     83c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     83e:	9e05      	ldr	r6, [sp, #20]
     840:	464f      	mov	r7, r9
     842:	403e      	ands	r6, r7
     844:	46b4      	mov	ip, r6
     846:	9e04      	ldr	r6, [sp, #16]
     848:	4647      	mov	r7, r8
     84a:	403e      	ands	r6, r7
     84c:	46b2      	mov	sl, r6
     84e:	4666      	mov	r6, ip
     850:	4657      	mov	r7, sl
     852:	433e      	orrs	r6, r7
     854:	d003      	beq.n	85e <STACK_SIZE+0x5e>
			r |= 0x01;
     856:	0006      	movs	r6, r0
     858:	4326      	orrs	r6, r4
     85a:	0032      	movs	r2, r6
     85c:	002b      	movs	r3, r5
		if (r >= d) {
     85e:	9c00      	ldr	r4, [sp, #0]
     860:	9d01      	ldr	r5, [sp, #4]
     862:	429d      	cmp	r5, r3
     864:	d8db      	bhi.n	81e <STACK_SIZE+0x1e>
     866:	d1ce      	bne.n	806 <STACK_SIZE+0x6>
     868:	4294      	cmp	r4, r2
     86a:	d8d8      	bhi.n	81e <STACK_SIZE+0x1e>
     86c:	e7cb      	b.n	806 <STACK_SIZE+0x6>
     86e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     870:	4658      	mov	r0, fp
     872:	0019      	movs	r1, r3
     874:	b007      	add	sp, #28
     876:	bc3c      	pop	{r2, r3, r4, r5}
     878:	4690      	mov	r8, r2
     87a:	4699      	mov	r9, r3
     87c:	46a2      	mov	sl, r4
     87e:	46ab      	mov	fp, r5
     880:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000882 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     882:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     884:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     886:	2340      	movs	r3, #64	; 0x40
     888:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     88a:	4281      	cmp	r1, r0
     88c:	d202      	bcs.n	894 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     88e:	0018      	movs	r0, r3
     890:	bd10      	pop	{r4, pc}
		baud_calculated++;
     892:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     894:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     896:	1c63      	adds	r3, r4, #1
     898:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     89a:	4288      	cmp	r0, r1
     89c:	d9f9      	bls.n	892 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     89e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     8a0:	2cff      	cmp	r4, #255	; 0xff
     8a2:	d8f4      	bhi.n	88e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     8a4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     8a6:	2300      	movs	r3, #0
     8a8:	e7f1      	b.n	88e <_sercom_get_sync_baud_val+0xc>
	...

000008ac <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ae:	b083      	sub	sp, #12
     8b0:	000f      	movs	r7, r1
     8b2:	0016      	movs	r6, r2
     8b4:	aa08      	add	r2, sp, #32
     8b6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     8b8:	0004      	movs	r4, r0
     8ba:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8bc:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     8be:	42bc      	cmp	r4, r7
     8c0:	d902      	bls.n	8c8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     8c2:	0010      	movs	r0, r2
     8c4:	b003      	add	sp, #12
     8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     8c8:	2b00      	cmp	r3, #0
     8ca:	d114      	bne.n	8f6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     8cc:	0002      	movs	r2, r0
     8ce:	0008      	movs	r0, r1
     8d0:	2100      	movs	r1, #0
     8d2:	4c19      	ldr	r4, [pc, #100]	; (938 <_sercom_get_async_baud_val+0x8c>)
     8d4:	47a0      	blx	r4
     8d6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     8d8:	003a      	movs	r2, r7
     8da:	2300      	movs	r3, #0
     8dc:	2000      	movs	r0, #0
     8de:	4c17      	ldr	r4, [pc, #92]	; (93c <_sercom_get_async_baud_val+0x90>)
     8e0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     8e2:	2200      	movs	r2, #0
     8e4:	2301      	movs	r3, #1
     8e6:	1a12      	subs	r2, r2, r0
     8e8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     8ea:	0c12      	lsrs	r2, r2, #16
     8ec:	041b      	lsls	r3, r3, #16
     8ee:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     8f0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     8f2:	2200      	movs	r2, #0
     8f4:	e7e5      	b.n	8c2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     8f6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     8f8:	2b01      	cmp	r3, #1
     8fa:	d1f9      	bne.n	8f0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     8fc:	000a      	movs	r2, r1
     8fe:	2300      	movs	r3, #0
     900:	2100      	movs	r1, #0
     902:	4c0d      	ldr	r4, [pc, #52]	; (938 <_sercom_get_async_baud_val+0x8c>)
     904:	47a0      	blx	r4
     906:	0002      	movs	r2, r0
     908:	000b      	movs	r3, r1
     90a:	9200      	str	r2, [sp, #0]
     90c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     90e:	0038      	movs	r0, r7
     910:	2100      	movs	r1, #0
     912:	4c0a      	ldr	r4, [pc, #40]	; (93c <_sercom_get_async_baud_val+0x90>)
     914:	47a0      	blx	r4
     916:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     918:	2380      	movs	r3, #128	; 0x80
     91a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     91c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     91e:	4298      	cmp	r0, r3
     920:	d8cf      	bhi.n	8c2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     922:	0f79      	lsrs	r1, r7, #29
     924:	00f8      	lsls	r0, r7, #3
     926:	9a00      	ldr	r2, [sp, #0]
     928:	9b01      	ldr	r3, [sp, #4]
     92a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     92c:	00ea      	lsls	r2, r5, #3
     92e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     930:	b2d2      	uxtb	r2, r2
     932:	0352      	lsls	r2, r2, #13
     934:	432a      	orrs	r2, r5
     936:	e7db      	b.n	8f0 <_sercom_get_async_baud_val+0x44>
     938:	00002ee1 	.word	0x00002ee1
     93c:	000007c9 	.word	0x000007c9

00000940 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     940:	b510      	push	{r4, lr}
     942:	b082      	sub	sp, #8
     944:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     946:	4b0e      	ldr	r3, [pc, #56]	; (980 <sercom_set_gclk_generator+0x40>)
     948:	781b      	ldrb	r3, [r3, #0]
     94a:	2b00      	cmp	r3, #0
     94c:	d007      	beq.n	95e <sercom_set_gclk_generator+0x1e>
     94e:	2900      	cmp	r1, #0
     950:	d105      	bne.n	95e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     952:	4b0b      	ldr	r3, [pc, #44]	; (980 <sercom_set_gclk_generator+0x40>)
     954:	785b      	ldrb	r3, [r3, #1]
     956:	4283      	cmp	r3, r0
     958:	d010      	beq.n	97c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     95a:	201d      	movs	r0, #29
     95c:	e00c      	b.n	978 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     95e:	a901      	add	r1, sp, #4
     960:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     962:	2013      	movs	r0, #19
     964:	4b07      	ldr	r3, [pc, #28]	; (984 <sercom_set_gclk_generator+0x44>)
     966:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     968:	2013      	movs	r0, #19
     96a:	4b07      	ldr	r3, [pc, #28]	; (988 <sercom_set_gclk_generator+0x48>)
     96c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     96e:	4b04      	ldr	r3, [pc, #16]	; (980 <sercom_set_gclk_generator+0x40>)
     970:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     972:	2201      	movs	r2, #1
     974:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     976:	2000      	movs	r0, #0
}
     978:	b002      	add	sp, #8
     97a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     97c:	2000      	movs	r0, #0
     97e:	e7fb      	b.n	978 <sercom_set_gclk_generator+0x38>
     980:	2000013c 	.word	0x2000013c
     984:	0000233d 	.word	0x0000233d
     988:	000022b1 	.word	0x000022b1

0000098c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     98c:	4b2b      	ldr	r3, [pc, #172]	; (a3c <_sercom_get_default_pad+0xb0>)
     98e:	4298      	cmp	r0, r3
     990:	d023      	beq.n	9da <_sercom_get_default_pad+0x4e>
     992:	d90f      	bls.n	9b4 <_sercom_get_default_pad+0x28>
     994:	4b2a      	ldr	r3, [pc, #168]	; (a40 <_sercom_get_default_pad+0xb4>)
     996:	4298      	cmp	r0, r3
     998:	d02f      	beq.n	9fa <_sercom_get_default_pad+0x6e>
     99a:	4b2a      	ldr	r3, [pc, #168]	; (a44 <_sercom_get_default_pad+0xb8>)
     99c:	4298      	cmp	r0, r3
     99e:	d142      	bne.n	a26 <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9a0:	2901      	cmp	r1, #1
     9a2:	d03a      	beq.n	a1a <_sercom_get_default_pad+0x8e>
     9a4:	2900      	cmp	r1, #0
     9a6:	d046      	beq.n	a36 <_sercom_get_default_pad+0xaa>
     9a8:	2902      	cmp	r1, #2
     9aa:	d038      	beq.n	a1e <_sercom_get_default_pad+0x92>
     9ac:	2903      	cmp	r1, #3
     9ae:	d038      	beq.n	a22 <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
     9b0:	2000      	movs	r0, #0
     9b2:	e039      	b.n	a28 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
     9b4:	4b24      	ldr	r3, [pc, #144]	; (a48 <_sercom_get_default_pad+0xbc>)
     9b6:	4298      	cmp	r0, r3
     9b8:	d135      	bne.n	a26 <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ba:	2901      	cmp	r1, #1
     9bc:	d007      	beq.n	9ce <_sercom_get_default_pad+0x42>
     9be:	2900      	cmp	r1, #0
     9c0:	d033      	beq.n	a2a <_sercom_get_default_pad+0x9e>
     9c2:	2902      	cmp	r1, #2
     9c4:	d005      	beq.n	9d2 <_sercom_get_default_pad+0x46>
     9c6:	2903      	cmp	r1, #3
     9c8:	d005      	beq.n	9d6 <_sercom_get_default_pad+0x4a>
	return 0;
     9ca:	2000      	movs	r0, #0
     9cc:	e02c      	b.n	a28 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ce:	481f      	ldr	r0, [pc, #124]	; (a4c <_sercom_get_default_pad+0xc0>)
     9d0:	e02a      	b.n	a28 <_sercom_get_default_pad+0x9c>
     9d2:	481f      	ldr	r0, [pc, #124]	; (a50 <_sercom_get_default_pad+0xc4>)
     9d4:	e028      	b.n	a28 <_sercom_get_default_pad+0x9c>
     9d6:	481f      	ldr	r0, [pc, #124]	; (a54 <_sercom_get_default_pad+0xc8>)
     9d8:	e026      	b.n	a28 <_sercom_get_default_pad+0x9c>
     9da:	2901      	cmp	r1, #1
     9dc:	d007      	beq.n	9ee <_sercom_get_default_pad+0x62>
     9de:	2900      	cmp	r1, #0
     9e0:	d025      	beq.n	a2e <_sercom_get_default_pad+0xa2>
     9e2:	2902      	cmp	r1, #2
     9e4:	d005      	beq.n	9f2 <_sercom_get_default_pad+0x66>
     9e6:	2903      	cmp	r1, #3
     9e8:	d005      	beq.n	9f6 <_sercom_get_default_pad+0x6a>
	return 0;
     9ea:	2000      	movs	r0, #0
     9ec:	e01c      	b.n	a28 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ee:	481a      	ldr	r0, [pc, #104]	; (a58 <_sercom_get_default_pad+0xcc>)
     9f0:	e01a      	b.n	a28 <_sercom_get_default_pad+0x9c>
     9f2:	481a      	ldr	r0, [pc, #104]	; (a5c <_sercom_get_default_pad+0xd0>)
     9f4:	e018      	b.n	a28 <_sercom_get_default_pad+0x9c>
     9f6:	481a      	ldr	r0, [pc, #104]	; (a60 <_sercom_get_default_pad+0xd4>)
     9f8:	e016      	b.n	a28 <_sercom_get_default_pad+0x9c>
     9fa:	2901      	cmp	r1, #1
     9fc:	d007      	beq.n	a0e <_sercom_get_default_pad+0x82>
     9fe:	2900      	cmp	r1, #0
     a00:	d017      	beq.n	a32 <_sercom_get_default_pad+0xa6>
     a02:	2902      	cmp	r1, #2
     a04:	d005      	beq.n	a12 <_sercom_get_default_pad+0x86>
     a06:	2903      	cmp	r1, #3
     a08:	d005      	beq.n	a16 <_sercom_get_default_pad+0x8a>
	return 0;
     a0a:	2000      	movs	r0, #0
     a0c:	e00c      	b.n	a28 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a0e:	4815      	ldr	r0, [pc, #84]	; (a64 <_sercom_get_default_pad+0xd8>)
     a10:	e00a      	b.n	a28 <_sercom_get_default_pad+0x9c>
     a12:	4815      	ldr	r0, [pc, #84]	; (a68 <_sercom_get_default_pad+0xdc>)
     a14:	e008      	b.n	a28 <_sercom_get_default_pad+0x9c>
     a16:	4815      	ldr	r0, [pc, #84]	; (a6c <_sercom_get_default_pad+0xe0>)
     a18:	e006      	b.n	a28 <_sercom_get_default_pad+0x9c>
     a1a:	4815      	ldr	r0, [pc, #84]	; (a70 <_sercom_get_default_pad+0xe4>)
     a1c:	e004      	b.n	a28 <_sercom_get_default_pad+0x9c>
     a1e:	4815      	ldr	r0, [pc, #84]	; (a74 <_sercom_get_default_pad+0xe8>)
     a20:	e002      	b.n	a28 <_sercom_get_default_pad+0x9c>
     a22:	4815      	ldr	r0, [pc, #84]	; (a78 <_sercom_get_default_pad+0xec>)
     a24:	e000      	b.n	a28 <_sercom_get_default_pad+0x9c>
	return 0;
     a26:	2000      	movs	r0, #0
}
     a28:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a2a:	4814      	ldr	r0, [pc, #80]	; (a7c <_sercom_get_default_pad+0xf0>)
     a2c:	e7fc      	b.n	a28 <_sercom_get_default_pad+0x9c>
     a2e:	2003      	movs	r0, #3
     a30:	e7fa      	b.n	a28 <_sercom_get_default_pad+0x9c>
     a32:	4813      	ldr	r0, [pc, #76]	; (a80 <_sercom_get_default_pad+0xf4>)
     a34:	e7f8      	b.n	a28 <_sercom_get_default_pad+0x9c>
     a36:	4813      	ldr	r0, [pc, #76]	; (a84 <_sercom_get_default_pad+0xf8>)
     a38:	e7f6      	b.n	a28 <_sercom_get_default_pad+0x9c>
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	42000c00 	.word	0x42000c00
     a40:	42001000 	.word	0x42001000
     a44:	42001400 	.word	0x42001400
     a48:	42000800 	.word	0x42000800
     a4c:	00050003 	.word	0x00050003
     a50:	00060003 	.word	0x00060003
     a54:	00070003 	.word	0x00070003
     a58:	00010003 	.word	0x00010003
     a5c:	001e0003 	.word	0x001e0003
     a60:	001f0003 	.word	0x001f0003
     a64:	00090003 	.word	0x00090003
     a68:	000a0003 	.word	0x000a0003
     a6c:	000b0003 	.word	0x000b0003
     a70:	00110003 	.word	0x00110003
     a74:	00120003 	.word	0x00120003
     a78:	00130003 	.word	0x00130003
     a7c:	00040003 	.word	0x00040003
     a80:	00080003 	.word	0x00080003
     a84:	00100003 	.word	0x00100003

00000a88 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a88:	b530      	push	{r4, r5, lr}
     a8a:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a8c:	466a      	mov	r2, sp
     a8e:	4b0f      	ldr	r3, [pc, #60]	; (acc <_sercom_get_sercom_inst_index+0x44>)
     a90:	cb32      	ldmia	r3!, {r1, r4, r5}
     a92:	c232      	stmia	r2!, {r1, r4, r5}
     a94:	681b      	ldr	r3, [r3, #0]
     a96:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a98:	0003      	movs	r3, r0
     a9a:	9a00      	ldr	r2, [sp, #0]
     a9c:	4282      	cmp	r2, r0
     a9e:	d011      	beq.n	ac4 <_sercom_get_sercom_inst_index+0x3c>
     aa0:	9a01      	ldr	r2, [sp, #4]
     aa2:	4282      	cmp	r2, r0
     aa4:	d00a      	beq.n	abc <_sercom_get_sercom_inst_index+0x34>
     aa6:	9a02      	ldr	r2, [sp, #8]
     aa8:	4282      	cmp	r2, r0
     aaa:	d009      	beq.n	ac0 <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     aac:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     aae:	9a03      	ldr	r2, [sp, #12]
     ab0:	429a      	cmp	r2, r3
     ab2:	d001      	beq.n	ab8 <_sercom_get_sercom_inst_index+0x30>
}
     ab4:	b005      	add	sp, #20
     ab6:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ab8:	3003      	adds	r0, #3
     aba:	e004      	b.n	ac6 <_sercom_get_sercom_inst_index+0x3e>
     abc:	2001      	movs	r0, #1
     abe:	e002      	b.n	ac6 <_sercom_get_sercom_inst_index+0x3e>
     ac0:	2002      	movs	r0, #2
     ac2:	e000      	b.n	ac6 <_sercom_get_sercom_inst_index+0x3e>
     ac4:	2000      	movs	r0, #0
			return i;
     ac6:	b2c0      	uxtb	r0, r0
     ac8:	e7f4      	b.n	ab4 <_sercom_get_sercom_inst_index+0x2c>
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	00002fa0 	.word	0x00002fa0

00000ad0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     ad0:	1c93      	adds	r3, r2, #2
     ad2:	009b      	lsls	r3, r3, #2
     ad4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     ad6:	2a02      	cmp	r2, #2
     ad8:	d009      	beq.n	aee <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     ada:	2a03      	cmp	r2, #3
     adc:	d00c      	beq.n	af8 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     ade:	2301      	movs	r3, #1
     ae0:	4093      	lsls	r3, r2
     ae2:	001a      	movs	r2, r3
     ae4:	7e03      	ldrb	r3, [r0, #24]
     ae6:	4313      	orrs	r3, r2
     ae8:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     aea:	2000      	movs	r0, #0
     aec:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     aee:	7e03      	ldrb	r3, [r0, #24]
     af0:	2210      	movs	r2, #16
     af2:	4313      	orrs	r3, r2
     af4:	7603      	strb	r3, [r0, #24]
     af6:	e7f8      	b.n	aea <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     af8:	7e03      	ldrb	r3, [r0, #24]
     afa:	2220      	movs	r2, #32
     afc:	4313      	orrs	r3, r2
     afe:	7603      	strb	r3, [r0, #24]
     b00:	e7f3      	b.n	aea <tc_register_callback+0x1a>
	...

00000b04 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     b04:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     b06:	0080      	lsls	r0, r0, #2
     b08:	4b16      	ldr	r3, [pc, #88]	; (b64 <_tc_interrupt_handler+0x60>)
     b0a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     b0c:	6823      	ldr	r3, [r4, #0]
     b0e:	7b9d      	ldrb	r5, [r3, #14]
     b10:	7e22      	ldrb	r2, [r4, #24]
     b12:	7e63      	ldrb	r3, [r4, #25]
     b14:	4013      	ands	r3, r2
     b16:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     b18:	07eb      	lsls	r3, r5, #31
     b1a:	d406      	bmi.n	b2a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     b1c:	07ab      	lsls	r3, r5, #30
     b1e:	d40b      	bmi.n	b38 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     b20:	06eb      	lsls	r3, r5, #27
     b22:	d410      	bmi.n	b46 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     b24:	06ab      	lsls	r3, r5, #26
     b26:	d415      	bmi.n	b54 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     b28:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     b2a:	0020      	movs	r0, r4
     b2c:	68a3      	ldr	r3, [r4, #8]
     b2e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     b30:	2301      	movs	r3, #1
     b32:	6822      	ldr	r2, [r4, #0]
     b34:	7393      	strb	r3, [r2, #14]
     b36:	e7f1      	b.n	b1c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     b38:	0020      	movs	r0, r4
     b3a:	68e3      	ldr	r3, [r4, #12]
     b3c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     b3e:	2302      	movs	r3, #2
     b40:	6822      	ldr	r2, [r4, #0]
     b42:	7393      	strb	r3, [r2, #14]
     b44:	e7ec      	b.n	b20 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     b46:	0020      	movs	r0, r4
     b48:	6923      	ldr	r3, [r4, #16]
     b4a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     b4c:	2310      	movs	r3, #16
     b4e:	6822      	ldr	r2, [r4, #0]
     b50:	7393      	strb	r3, [r2, #14]
     b52:	e7e7      	b.n	b24 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     b54:	0020      	movs	r0, r4
     b56:	6963      	ldr	r3, [r4, #20]
     b58:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     b5a:	6823      	ldr	r3, [r4, #0]
     b5c:	2220      	movs	r2, #32
     b5e:	739a      	strb	r2, [r3, #14]
}
     b60:	e7e2      	b.n	b28 <_tc_interrupt_handler+0x24>
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	20000314 	.word	0x20000314

00000b68 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     b68:	b510      	push	{r4, lr}
     b6a:	2000      	movs	r0, #0
     b6c:	4b01      	ldr	r3, [pc, #4]	; (b74 <TC3_Handler+0xc>)
     b6e:	4798      	blx	r3
     b70:	bd10      	pop	{r4, pc}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	00000b05 	.word	0x00000b05

00000b78 <TC4_Handler>:
     b78:	b510      	push	{r4, lr}
     b7a:	2001      	movs	r0, #1
     b7c:	4b01      	ldr	r3, [pc, #4]	; (b84 <TC4_Handler+0xc>)
     b7e:	4798      	blx	r3
     b80:	bd10      	pop	{r4, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	00000b05 	.word	0x00000b05

00000b88 <TC5_Handler>:
     b88:	b510      	push	{r4, lr}
     b8a:	2002      	movs	r0, #2
     b8c:	4b01      	ldr	r3, [pc, #4]	; (b94 <TC5_Handler+0xc>)
     b8e:	4798      	blx	r3
     b90:	bd10      	pop	{r4, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	00000b05 	.word	0x00000b05

00000b98 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     b98:	b530      	push	{r4, r5, lr}
     b9a:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     b9c:	aa01      	add	r2, sp, #4
     b9e:	4b0b      	ldr	r3, [pc, #44]	; (bcc <_tc_get_inst_index+0x34>)
     ba0:	cb32      	ldmia	r3!, {r1, r4, r5}
     ba2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     ba4:	9b01      	ldr	r3, [sp, #4]
     ba6:	4298      	cmp	r0, r3
     ba8:	d00d      	beq.n	bc6 <_tc_get_inst_index+0x2e>
     baa:	9b02      	ldr	r3, [sp, #8]
     bac:	4298      	cmp	r0, r3
     bae:	d008      	beq.n	bc2 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     bb0:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
     bb2:	9a03      	ldr	r2, [sp, #12]
     bb4:	4282      	cmp	r2, r0
     bb6:	d002      	beq.n	bbe <_tc_get_inst_index+0x26>
}
     bb8:	0018      	movs	r0, r3
     bba:	b005      	add	sp, #20
     bbc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     bbe:	3302      	adds	r3, #2
     bc0:	e002      	b.n	bc8 <_tc_get_inst_index+0x30>
     bc2:	2301      	movs	r3, #1
     bc4:	e000      	b.n	bc8 <_tc_get_inst_index+0x30>
     bc6:	2300      	movs	r3, #0
			return i;
     bc8:	b2db      	uxtb	r3, r3
     bca:	e7f5      	b.n	bb8 <_tc_get_inst_index+0x20>
     bcc:	00002fb0 	.word	0x00002fb0

00000bd0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd2:	b087      	sub	sp, #28
     bd4:	0004      	movs	r4, r0
     bd6:	000d      	movs	r5, r1
     bd8:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     bda:	0008      	movs	r0, r1
     bdc:	4b85      	ldr	r3, [pc, #532]	; (df4 <tc_init+0x224>)
     bde:	4798      	blx	r3
     be0:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     be2:	ab05      	add	r3, sp, #20
     be4:	221b      	movs	r2, #27
     be6:	701a      	strb	r2, [r3, #0]
     be8:	3201      	adds	r2, #1
     bea:	705a      	strb	r2, [r3, #1]
     bec:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     bee:	ab03      	add	r3, sp, #12
     bf0:	2280      	movs	r2, #128	; 0x80
     bf2:	0112      	lsls	r2, r2, #4
     bf4:	801a      	strh	r2, [r3, #0]
     bf6:	2280      	movs	r2, #128	; 0x80
     bf8:	0152      	lsls	r2, r2, #5
     bfa:	805a      	strh	r2, [r3, #2]
     bfc:	2280      	movs	r2, #128	; 0x80
     bfe:	0192      	lsls	r2, r2, #6
     c00:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     c02:	2300      	movs	r3, #0
     c04:	60a3      	str	r3, [r4, #8]
     c06:	60e3      	str	r3, [r4, #12]
     c08:	6123      	str	r3, [r4, #16]
     c0a:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     c0c:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     c0e:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     c10:	0082      	lsls	r2, r0, #2
     c12:	4b79      	ldr	r3, [pc, #484]	; (df8 <tc_init+0x228>)
     c14:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     c16:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     c18:	78b3      	ldrb	r3, [r6, #2]
     c1a:	2b08      	cmp	r3, #8
     c1c:	d006      	beq.n	c2c <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     c1e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     c20:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     c22:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     c24:	07db      	lsls	r3, r3, #31
     c26:	d505      	bpl.n	c34 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     c28:	b007      	add	sp, #28
     c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     c2c:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     c2e:	07fa      	lsls	r2, r7, #31
     c30:	d5fa      	bpl.n	c28 <tc_init+0x58>
     c32:	e7f4      	b.n	c1e <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     c34:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     c36:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     c38:	06db      	lsls	r3, r3, #27
     c3a:	d4f5      	bmi.n	c28 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     c3c:	882b      	ldrh	r3, [r5, #0]
     c3e:	079b      	lsls	r3, r3, #30
     c40:	d4f2      	bmi.n	c28 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
     c42:	7c33      	ldrb	r3, [r6, #16]
     c44:	2b00      	cmp	r3, #0
     c46:	d179      	bne.n	d3c <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
     c48:	7f33      	ldrb	r3, [r6, #28]
     c4a:	2b00      	cmp	r3, #0
     c4c:	d000      	beq.n	c50 <tc_init+0x80>
     c4e:	e081      	b.n	d54 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
     c50:	496a      	ldr	r1, [pc, #424]	; (dfc <tc_init+0x22c>)
     c52:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     c54:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     c56:	ab03      	add	r3, sp, #12
     c58:	5ad3      	ldrh	r3, [r2, r3]
     c5a:	4303      	orrs	r3, r0
     c5c:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     c5e:	78b3      	ldrb	r3, [r6, #2]
     c60:	2b08      	cmp	r3, #8
     c62:	d100      	bne.n	c66 <tc_init+0x96>
     c64:	e086      	b.n	d74 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
     c66:	a901      	add	r1, sp, #4
     c68:	7833      	ldrb	r3, [r6, #0]
     c6a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     c6c:	ab05      	add	r3, sp, #20
     c6e:	5ddf      	ldrb	r7, [r3, r7]
     c70:	0038      	movs	r0, r7
     c72:	4b63      	ldr	r3, [pc, #396]	; (e00 <tc_init+0x230>)
     c74:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     c76:	0038      	movs	r0, r7
     c78:	4b62      	ldr	r3, [pc, #392]	; (e04 <tc_init+0x234>)
     c7a:	4798      	blx	r3
	ctrla_tmp =
     c7c:	8931      	ldrh	r1, [r6, #8]
     c7e:	88b3      	ldrh	r3, [r6, #4]
     c80:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     c82:	78b1      	ldrb	r1, [r6, #2]
     c84:	79b2      	ldrb	r2, [r6, #6]
     c86:	4311      	orrs	r1, r2
	ctrla_tmp =
     c88:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     c8a:	7873      	ldrb	r3, [r6, #1]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d002      	beq.n	c96 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     c90:	2380      	movs	r3, #128	; 0x80
     c92:	011b      	lsls	r3, r3, #4
     c94:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c96:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c98:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c9a:	b25b      	sxtb	r3, r3
     c9c:	2b00      	cmp	r3, #0
     c9e:	dbfb      	blt.n	c98 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     ca0:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     ca2:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     ca4:	1e4b      	subs	r3, r1, #1
     ca6:	4199      	sbcs	r1, r3
     ca8:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     caa:	7bb3      	ldrb	r3, [r6, #14]
     cac:	2b00      	cmp	r3, #0
     cae:	d001      	beq.n	cb4 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     cb0:	2301      	movs	r3, #1
     cb2:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     cb4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     cb6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     cb8:	b25b      	sxtb	r3, r3
     cba:	2b00      	cmp	r3, #0
     cbc:	dbfb      	blt.n	cb6 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     cbe:	23ff      	movs	r3, #255	; 0xff
     cc0:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     cc2:	2900      	cmp	r1, #0
     cc4:	d005      	beq.n	cd2 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     cc6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     cc8:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     cca:	b25b      	sxtb	r3, r3
     ccc:	2b00      	cmp	r3, #0
     cce:	dbfb      	blt.n	cc8 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     cd0:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     cd2:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     cd4:	7af3      	ldrb	r3, [r6, #11]
     cd6:	2b00      	cmp	r3, #0
     cd8:	d001      	beq.n	cde <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     cda:	2310      	movs	r3, #16
     cdc:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     cde:	7b33      	ldrb	r3, [r6, #12]
     ce0:	2b00      	cmp	r3, #0
     ce2:	d001      	beq.n	ce8 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     ce4:	2320      	movs	r3, #32
     ce6:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     ce8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     cea:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     cec:	b25b      	sxtb	r3, r3
     cee:	2b00      	cmp	r3, #0
     cf0:	dbfb      	blt.n	cea <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     cf2:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     cf4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     cf6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     cf8:	b25b      	sxtb	r3, r3
     cfa:	2b00      	cmp	r3, #0
     cfc:	dbfb      	blt.n	cf6 <tc_init+0x126>
	switch (module_inst->counter_size) {
     cfe:	7923      	ldrb	r3, [r4, #4]
     d00:	2b04      	cmp	r3, #4
     d02:	d03f      	beq.n	d84 <tc_init+0x1b4>
     d04:	2b08      	cmp	r3, #8
     d06:	d05e      	beq.n	dc6 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
     d08:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     d0a:	2b00      	cmp	r3, #0
     d0c:	d000      	beq.n	d10 <tc_init+0x140>
     d0e:	e78b      	b.n	c28 <tc_init+0x58>
     d10:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d12:	b25b      	sxtb	r3, r3
     d14:	2b00      	cmp	r3, #0
     d16:	dbfb      	blt.n	d10 <tc_init+0x140>
				= config->counter_16_bit.value;
     d18:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     d1a:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d1c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d1e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d20:	b25b      	sxtb	r3, r3
     d22:	2b00      	cmp	r3, #0
     d24:	dbfb      	blt.n	d1e <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
     d26:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     d28:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d2a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d2c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d2e:	b25b      	sxtb	r3, r3
     d30:	2b00      	cmp	r3, #0
     d32:	dbfb      	blt.n	d2c <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
     d34:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     d36:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     d38:	2000      	movs	r0, #0
     d3a:	e775      	b.n	c28 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d3c:	a902      	add	r1, sp, #8
     d3e:	2301      	movs	r3, #1
     d40:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     d42:	2200      	movs	r2, #0
     d44:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     d46:	7e32      	ldrb	r2, [r6, #24]
     d48:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     d4a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     d4c:	7d30      	ldrb	r0, [r6, #20]
     d4e:	4b2e      	ldr	r3, [pc, #184]	; (e08 <tc_init+0x238>)
     d50:	4798      	blx	r3
     d52:	e779      	b.n	c48 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d54:	a902      	add	r1, sp, #8
     d56:	2301      	movs	r3, #1
     d58:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     d5a:	2200      	movs	r2, #0
     d5c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     d5e:	3224      	adds	r2, #36	; 0x24
     d60:	18b2      	adds	r2, r6, r2
     d62:	7812      	ldrb	r2, [r2, #0]
     d64:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     d66:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     d68:	331f      	adds	r3, #31
     d6a:	18f3      	adds	r3, r6, r3
     d6c:	7818      	ldrb	r0, [r3, #0]
     d6e:	4b26      	ldr	r3, [pc, #152]	; (e08 <tc_init+0x238>)
     d70:	4798      	blx	r3
     d72:	e76d      	b.n	c50 <tc_init+0x80>
     d74:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     d76:	1c7a      	adds	r2, r7, #1
     d78:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     d7a:	ab03      	add	r3, sp, #12
     d7c:	5ad3      	ldrh	r3, [r2, r3]
     d7e:	4303      	orrs	r3, r0
     d80:	620b      	str	r3, [r1, #32]
     d82:	e770      	b.n	c66 <tc_init+0x96>
     d84:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d86:	b25b      	sxtb	r3, r3
     d88:	2b00      	cmp	r3, #0
     d8a:	dbfb      	blt.n	d84 <tc_init+0x1b4>
					config->counter_8_bit.value;
     d8c:	2328      	movs	r3, #40	; 0x28
     d8e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     d90:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d92:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d94:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d96:	b25b      	sxtb	r3, r3
     d98:	2b00      	cmp	r3, #0
     d9a:	dbfb      	blt.n	d94 <tc_init+0x1c4>
					config->counter_8_bit.period;
     d9c:	2329      	movs	r3, #41	; 0x29
     d9e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     da0:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     da2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     da4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     da6:	b25b      	sxtb	r3, r3
     da8:	2b00      	cmp	r3, #0
     daa:	dbfb      	blt.n	da4 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
     dac:	232a      	movs	r3, #42	; 0x2a
     dae:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     db0:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     db2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     db4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     db6:	b25b      	sxtb	r3, r3
     db8:	2b00      	cmp	r3, #0
     dba:	dbfb      	blt.n	db4 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
     dbc:	232b      	movs	r3, #43	; 0x2b
     dbe:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     dc0:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     dc2:	2000      	movs	r0, #0
     dc4:	e730      	b.n	c28 <tc_init+0x58>
     dc6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     dc8:	b25b      	sxtb	r3, r3
     dca:	2b00      	cmp	r3, #0
     dcc:	dbfb      	blt.n	dc6 <tc_init+0x1f6>
				= config->counter_32_bit.value;
     dce:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     dd0:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     dd2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     dd4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     dd6:	b25b      	sxtb	r3, r3
     dd8:	2b00      	cmp	r3, #0
     dda:	dbfb      	blt.n	dd4 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
     ddc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     dde:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     de0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     de2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     de4:	b25b      	sxtb	r3, r3
     de6:	2b00      	cmp	r3, #0
     de8:	dbfb      	blt.n	de2 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
     dea:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     dec:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     dee:	2000      	movs	r0, #0
     df0:	e71a      	b.n	c28 <tc_init+0x58>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	00000b99 	.word	0x00000b99
     df8:	20000314 	.word	0x20000314
     dfc:	40000400 	.word	0x40000400
     e00:	0000233d 	.word	0x0000233d
     e04:	000022b1 	.word	0x000022b1
     e08:	00002435 	.word	0x00002435

00000e0c <spi_enable_write>:
	spi_write_buffer_wait(&datain.master, command_buffer,1);
	spi_select_slave(&datain.master, &datain.slave, false);
	delay_s(6);
	return status_out;
};
enum status_code spi_enable_write(struct packet datain){
     e0c:	b084      	sub	sp, #16
     e0e:	b570      	push	{r4, r5, r6, lr}
     e10:	9004      	str	r0, [sp, #16]
     e12:	9105      	str	r1, [sp, #20]
     e14:	9206      	str	r2, [sp, #24]
     e16:	9307      	str	r3, [sp, #28]
	command_buffer[0] = FLASH_ENABLE_WRITE;
     e18:	2206      	movs	r2, #6
     e1a:	4b0f      	ldr	r3, [pc, #60]	; (e58 <spi_enable_write+0x4c>)
     e1c:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&datain.master, &datain.slave, true);
     e1e:	3a05      	subs	r2, #5
     e20:	a913      	add	r1, sp, #76	; 0x4c
     e22:	a804      	add	r0, sp, #16
     e24:	4b0d      	ldr	r3, [pc, #52]	; (e5c <spi_enable_write+0x50>)
     e26:	4798      	blx	r3
	while(spi_write_buffer_wait(&datain.master,command_buffer,1) != STATUS_OK){
     e28:	4d0b      	ldr	r5, [pc, #44]	; (e58 <spi_enable_write+0x4c>)
     e2a:	4c0d      	ldr	r4, [pc, #52]	; (e60 <spi_enable_write+0x54>)
     e2c:	2201      	movs	r2, #1
     e2e:	0029      	movs	r1, r5
     e30:	a804      	add	r0, sp, #16
     e32:	47a0      	blx	r4
     e34:	2800      	cmp	r0, #0
     e36:	d1f9      	bne.n	e2c <spi_enable_write+0x20>
		
	}
	status_out = STATUS_OK;
     e38:	4c0a      	ldr	r4, [pc, #40]	; (e64 <spi_enable_write+0x58>)
     e3a:	2300      	movs	r3, #0
     e3c:	7023      	strb	r3, [r4, #0]
	spi_select_slave(&datain.master, &datain.slave, false);
     e3e:	2200      	movs	r2, #0
     e40:	a913      	add	r1, sp, #76	; 0x4c
     e42:	a804      	add	r0, sp, #16
     e44:	4b05      	ldr	r3, [pc, #20]	; (e5c <spi_enable_write+0x50>)
     e46:	4798      	blx	r3
	delay_ms(15);
     e48:	200f      	movs	r0, #15
     e4a:	4b07      	ldr	r3, [pc, #28]	; (e68 <spi_enable_write+0x5c>)
     e4c:	4798      	blx	r3
	return status_out;
     e4e:	7820      	ldrb	r0, [r4, #0]
}; 
     e50:	bc70      	pop	{r4, r5, r6}
     e52:	bc08      	pop	{r3}
     e54:	b004      	add	sp, #16
     e56:	4718      	bx	r3
     e58:	20000324 	.word	0x20000324
     e5c:	00001665 	.word	0x00001665
     e60:	00001759 	.word	0x00001759
     e64:	20000321 	.word	0x20000321
     e68:	00000181 	.word	0x00000181

00000e6c <spi_erase_chip>:
enum status_code spi_erase_chip(struct packet datain){
     e6c:	b084      	sub	sp, #16
     e6e:	b530      	push	{r4, r5, lr}
     e70:	b08f      	sub	sp, #60	; 0x3c
     e72:	9012      	str	r0, [sp, #72]	; 0x48
     e74:	9113      	str	r1, [sp, #76]	; 0x4c
     e76:	9214      	str	r2, [sp, #80]	; 0x50
     e78:	9315      	str	r3, [sp, #84]	; 0x54
	spi_enable_write(datain);
     e7a:	2238      	movs	r2, #56	; 0x38
     e7c:	a916      	add	r1, sp, #88	; 0x58
     e7e:	4668      	mov	r0, sp
     e80:	4b11      	ldr	r3, [pc, #68]	; (ec8 <spi_erase_chip+0x5c>)
     e82:	4798      	blx	r3
     e84:	9812      	ldr	r0, [sp, #72]	; 0x48
     e86:	9913      	ldr	r1, [sp, #76]	; 0x4c
     e88:	9a14      	ldr	r2, [sp, #80]	; 0x50
     e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
     e8c:	4c0f      	ldr	r4, [pc, #60]	; (ecc <spi_erase_chip+0x60>)
     e8e:	47a0      	blx	r4
	command_buffer[0] = FLASH_ERASE_CHIP;
     e90:	4d0f      	ldr	r5, [pc, #60]	; (ed0 <spi_erase_chip+0x64>)
     e92:	23c7      	movs	r3, #199	; 0xc7
     e94:	702b      	strb	r3, [r5, #0]
	spi_select_slave(&datain.master, &datain.slave, true);
     e96:	2201      	movs	r2, #1
     e98:	a921      	add	r1, sp, #132	; 0x84
     e9a:	a812      	add	r0, sp, #72	; 0x48
     e9c:	4c0d      	ldr	r4, [pc, #52]	; (ed4 <spi_erase_chip+0x68>)
     e9e:	47a0      	blx	r4
	spi_write_buffer_wait(&datain.master, command_buffer,1);
     ea0:	2201      	movs	r2, #1
     ea2:	0029      	movs	r1, r5
     ea4:	a812      	add	r0, sp, #72	; 0x48
     ea6:	4b0c      	ldr	r3, [pc, #48]	; (ed8 <spi_erase_chip+0x6c>)
     ea8:	4798      	blx	r3
	spi_select_slave(&datain.master, &datain.slave, false);
     eaa:	2200      	movs	r2, #0
     eac:	a921      	add	r1, sp, #132	; 0x84
     eae:	a812      	add	r0, sp, #72	; 0x48
     eb0:	47a0      	blx	r4
	delay_s(6);
     eb2:	480a      	ldr	r0, [pc, #40]	; (edc <spi_erase_chip+0x70>)
     eb4:	4b0a      	ldr	r3, [pc, #40]	; (ee0 <spi_erase_chip+0x74>)
     eb6:	4798      	blx	r3
	return status_out;
     eb8:	4b0a      	ldr	r3, [pc, #40]	; (ee4 <spi_erase_chip+0x78>)
     eba:	7818      	ldrb	r0, [r3, #0]
};
     ebc:	b00f      	add	sp, #60	; 0x3c
     ebe:	bc30      	pop	{r4, r5}
     ec0:	bc08      	pop	{r3}
     ec2:	b004      	add	sp, #16
     ec4:	4718      	bx	r3
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	00002f7d 	.word	0x00002f7d
     ecc:	00000e0d 	.word	0x00000e0d
     ed0:	20000324 	.word	0x20000324
     ed4:	00001665 	.word	0x00001665
     ed8:	00001759 	.word	0x00001759
     edc:	00001770 	.word	0x00001770
     ee0:	00000181 	.word	0x00000181
     ee4:	20000321 	.word	0x20000321

00000ee8 <spi_write_page>:
	spi_transceive_buffer_wait(&datain.master, command_buffer ,datain.data,261);
	spi_select_slave(&datain.master, &datain.slave, false);
	delay_us(1);
	return status_out;
};
enum status_code spi_write_page(struct packet datain){
     ee8:	b084      	sub	sp, #16
     eea:	b530      	push	{r4, r5, lr}
     eec:	b08f      	sub	sp, #60	; 0x3c
     eee:	9012      	str	r0, [sp, #72]	; 0x48
     ef0:	9113      	str	r1, [sp, #76]	; 0x4c
     ef2:	9214      	str	r2, [sp, #80]	; 0x50
     ef4:	9315      	str	r3, [sp, #84]	; 0x54
	spi_enable_write(datain);
     ef6:	2238      	movs	r2, #56	; 0x38
     ef8:	a916      	add	r1, sp, #88	; 0x58
     efa:	4668      	mov	r0, sp
     efc:	4d17      	ldr	r5, [pc, #92]	; (f5c <spi_write_page+0x74>)
     efe:	47a8      	blx	r5
     f00:	9812      	ldr	r0, [sp, #72]	; 0x48
     f02:	9913      	ldr	r1, [sp, #76]	; 0x4c
     f04:	9a14      	ldr	r2, [sp, #80]	; 0x50
     f06:	9b15      	ldr	r3, [sp, #84]	; 0x54
     f08:	4c15      	ldr	r4, [pc, #84]	; (f60 <spi_write_page+0x78>)
     f0a:	47a0      	blx	r4
	command_buffer[0] = FLASH_PAGE_PROGRAM;
     f0c:	4c15      	ldr	r4, [pc, #84]	; (f64 <spi_write_page+0x7c>)
     f0e:	2302      	movs	r3, #2
     f10:	7023      	strb	r3, [r4, #0]
	command_buffer[1] = (datain.address & 0x00ff0000) >> 16;
     f12:	9b22      	ldr	r3, [sp, #136]	; 0x88
     f14:	0c1b      	lsrs	r3, r3, #16
     f16:	7063      	strb	r3, [r4, #1]
	command_buffer[2] = (datain.address & 0x00ff0000) >> 8;
     f18:	2300      	movs	r3, #0
     f1a:	70a3      	strb	r3, [r4, #2]
	command_buffer[3] = (datain.address & 0x00ff0000);
     f1c:	70e3      	strb	r3, [r4, #3]
	memcpy(command_buffer + 4, datain.data,256);
     f1e:	1d20      	adds	r0, r4, #4
     f20:	2280      	movs	r2, #128	; 0x80
     f22:	0052      	lsls	r2, r2, #1
     f24:	9923      	ldr	r1, [sp, #140]	; 0x8c
     f26:	47a8      	blx	r5
	spi_select_slave(&datain.master, &datain.slave, true);
     f28:	2201      	movs	r2, #1
     f2a:	a921      	add	r1, sp, #132	; 0x84
     f2c:	a812      	add	r0, sp, #72	; 0x48
     f2e:	4d0e      	ldr	r5, [pc, #56]	; (f68 <spi_write_page+0x80>)
     f30:	47a8      	blx	r5
	spi_write_buffer_wait(&datain.master,command_buffer,260);
     f32:	2282      	movs	r2, #130	; 0x82
     f34:	0052      	lsls	r2, r2, #1
     f36:	0021      	movs	r1, r4
     f38:	a812      	add	r0, sp, #72	; 0x48
     f3a:	4b0c      	ldr	r3, [pc, #48]	; (f6c <spi_write_page+0x84>)
     f3c:	4798      	blx	r3
	spi_select_slave(&datain.master, &datain.slave, false);
     f3e:	2200      	movs	r2, #0
     f40:	a921      	add	r1, sp, #132	; 0x84
     f42:	a812      	add	r0, sp, #72	; 0x48
     f44:	47a8      	blx	r5
	delay_ms(3);
     f46:	2003      	movs	r0, #3
     f48:	4b09      	ldr	r3, [pc, #36]	; (f70 <spi_write_page+0x88>)
     f4a:	4798      	blx	r3
	return status_out;
     f4c:	4b09      	ldr	r3, [pc, #36]	; (f74 <spi_write_page+0x8c>)
     f4e:	7818      	ldrb	r0, [r3, #0]
};
     f50:	b00f      	add	sp, #60	; 0x3c
     f52:	bc30      	pop	{r4, r5}
     f54:	bc08      	pop	{r3}
     f56:	b004      	add	sp, #16
     f58:	4718      	bx	r3
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	00002f7d 	.word	0x00002f7d
     f60:	00000e0d 	.word	0x00000e0d
     f64:	20000324 	.word	0x20000324
     f68:	00001665 	.word	0x00001665
     f6c:	00001759 	.word	0x00001759
     f70:	00000181 	.word	0x00000181
     f74:	20000321 	.word	0x20000321

00000f78 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     f78:	b5f0      	push	{r4, r5, r6, r7, lr}
     f7a:	46de      	mov	lr, fp
     f7c:	4657      	mov	r7, sl
     f7e:	464e      	mov	r6, r9
     f80:	4645      	mov	r5, r8
     f82:	b5e0      	push	{r5, r6, r7, lr}
     f84:	b091      	sub	sp, #68	; 0x44
     f86:	0005      	movs	r5, r0
     f88:	000c      	movs	r4, r1
     f8a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     f8c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f8e:	0008      	movs	r0, r1
     f90:	4bbc      	ldr	r3, [pc, #752]	; (1284 <usart_init+0x30c>)
     f92:	4798      	blx	r3
     f94:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     f96:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     f98:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     f9a:	07db      	lsls	r3, r3, #31
     f9c:	d506      	bpl.n	fac <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     f9e:	b011      	add	sp, #68	; 0x44
     fa0:	bc3c      	pop	{r2, r3, r4, r5}
     fa2:	4690      	mov	r8, r2
     fa4:	4699      	mov	r9, r3
     fa6:	46a2      	mov	sl, r4
     fa8:	46ab      	mov	fp, r5
     faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     fac:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     fae:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     fb0:	079b      	lsls	r3, r3, #30
     fb2:	d4f4      	bmi.n	f9e <usart_init+0x26>
     fb4:	49b4      	ldr	r1, [pc, #720]	; (1288 <usart_init+0x310>)
     fb6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     fb8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     fba:	2301      	movs	r3, #1
     fbc:	40bb      	lsls	r3, r7
     fbe:	4303      	orrs	r3, r0
     fc0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     fc2:	a90f      	add	r1, sp, #60	; 0x3c
     fc4:	272d      	movs	r7, #45	; 0x2d
     fc6:	5df3      	ldrb	r3, [r6, r7]
     fc8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fca:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     fcc:	b2d3      	uxtb	r3, r2
     fce:	9302      	str	r3, [sp, #8]
     fd0:	0018      	movs	r0, r3
     fd2:	4bae      	ldr	r3, [pc, #696]	; (128c <usart_init+0x314>)
     fd4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     fd6:	9802      	ldr	r0, [sp, #8]
     fd8:	4bad      	ldr	r3, [pc, #692]	; (1290 <usart_init+0x318>)
     fda:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     fdc:	5df0      	ldrb	r0, [r6, r7]
     fde:	2100      	movs	r1, #0
     fe0:	4bac      	ldr	r3, [pc, #688]	; (1294 <usart_init+0x31c>)
     fe2:	4798      	blx	r3
	module->character_size = config->character_size;
     fe4:	7af3      	ldrb	r3, [r6, #11]
     fe6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     fe8:	2324      	movs	r3, #36	; 0x24
     fea:	5cf3      	ldrb	r3, [r6, r3]
     fec:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     fee:	2325      	movs	r3, #37	; 0x25
     ff0:	5cf3      	ldrb	r3, [r6, r3]
     ff2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     ff4:	7ef3      	ldrb	r3, [r6, #27]
     ff6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     ff8:	7f33      	ldrb	r3, [r6, #28]
     ffa:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     ffc:	682b      	ldr	r3, [r5, #0]
     ffe:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1000:	0018      	movs	r0, r3
    1002:	4ba0      	ldr	r3, [pc, #640]	; (1284 <usart_init+0x30c>)
    1004:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1006:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1008:	2200      	movs	r2, #0
    100a:	230e      	movs	r3, #14
    100c:	a906      	add	r1, sp, #24
    100e:	468c      	mov	ip, r1
    1010:	4463      	add	r3, ip
    1012:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1014:	8a32      	ldrh	r2, [r6, #16]
    1016:	9202      	str	r2, [sp, #8]
    1018:	2380      	movs	r3, #128	; 0x80
    101a:	01db      	lsls	r3, r3, #7
    101c:	429a      	cmp	r2, r3
    101e:	d100      	bne.n	1022 <usart_init+0xaa>
    1020:	e09e      	b.n	1160 <usart_init+0x1e8>
    1022:	d90f      	bls.n	1044 <usart_init+0xcc>
    1024:	23c0      	movs	r3, #192	; 0xc0
    1026:	01db      	lsls	r3, r3, #7
    1028:	9a02      	ldr	r2, [sp, #8]
    102a:	429a      	cmp	r2, r3
    102c:	d100      	bne.n	1030 <usart_init+0xb8>
    102e:	e092      	b.n	1156 <usart_init+0x1de>
    1030:	2380      	movs	r3, #128	; 0x80
    1032:	021b      	lsls	r3, r3, #8
    1034:	429a      	cmp	r2, r3
    1036:	d000      	beq.n	103a <usart_init+0xc2>
    1038:	e11f      	b.n	127a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    103a:	2303      	movs	r3, #3
    103c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    103e:	2300      	movs	r3, #0
    1040:	9307      	str	r3, [sp, #28]
    1042:	e008      	b.n	1056 <usart_init+0xde>
	switch (config->sample_rate) {
    1044:	2380      	movs	r3, #128	; 0x80
    1046:	019b      	lsls	r3, r3, #6
    1048:	429a      	cmp	r2, r3
    104a:	d000      	beq.n	104e <usart_init+0xd6>
    104c:	e115      	b.n	127a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    104e:	2310      	movs	r3, #16
    1050:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1052:	3b0f      	subs	r3, #15
    1054:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1056:	6833      	ldr	r3, [r6, #0]
    1058:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    105a:	68f3      	ldr	r3, [r6, #12]
    105c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    105e:	6973      	ldr	r3, [r6, #20]
    1060:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1062:	7e33      	ldrb	r3, [r6, #24]
    1064:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1066:	2326      	movs	r3, #38	; 0x26
    1068:	5cf3      	ldrb	r3, [r6, r3]
    106a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    106c:	6873      	ldr	r3, [r6, #4]
    106e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1070:	2b00      	cmp	r3, #0
    1072:	d100      	bne.n	1076 <usart_init+0xfe>
    1074:	e0a0      	b.n	11b8 <usart_init+0x240>
    1076:	2380      	movs	r3, #128	; 0x80
    1078:	055b      	lsls	r3, r3, #21
    107a:	4599      	cmp	r9, r3
    107c:	d100      	bne.n	1080 <usart_init+0x108>
    107e:	e084      	b.n	118a <usart_init+0x212>
	if(config->encoding_format_enable) {
    1080:	7e73      	ldrb	r3, [r6, #25]
    1082:	2b00      	cmp	r3, #0
    1084:	d002      	beq.n	108c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1086:	7eb3      	ldrb	r3, [r6, #26]
    1088:	4642      	mov	r2, r8
    108a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    108c:	682a      	ldr	r2, [r5, #0]
    108e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1090:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1092:	2b00      	cmp	r3, #0
    1094:	d1fc      	bne.n	1090 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1096:	330e      	adds	r3, #14
    1098:	aa06      	add	r2, sp, #24
    109a:	4694      	mov	ip, r2
    109c:	4463      	add	r3, ip
    109e:	881b      	ldrh	r3, [r3, #0]
    10a0:	4642      	mov	r2, r8
    10a2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    10a4:	9b05      	ldr	r3, [sp, #20]
    10a6:	9a03      	ldr	r2, [sp, #12]
    10a8:	4313      	orrs	r3, r2
    10aa:	9a04      	ldr	r2, [sp, #16]
    10ac:	4313      	orrs	r3, r2
    10ae:	464a      	mov	r2, r9
    10b0:	4313      	orrs	r3, r2
    10b2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    10b4:	465b      	mov	r3, fp
    10b6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    10b8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    10ba:	4653      	mov	r3, sl
    10bc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    10be:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    10c0:	2327      	movs	r3, #39	; 0x27
    10c2:	5cf3      	ldrb	r3, [r6, r3]
    10c4:	2b00      	cmp	r3, #0
    10c6:	d101      	bne.n	10cc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    10c8:	3304      	adds	r3, #4
    10ca:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    10cc:	7e73      	ldrb	r3, [r6, #25]
    10ce:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    10d0:	7f32      	ldrb	r2, [r6, #28]
    10d2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    10d4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    10d6:	7f72      	ldrb	r2, [r6, #29]
    10d8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    10da:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    10dc:	2224      	movs	r2, #36	; 0x24
    10de:	5cb2      	ldrb	r2, [r6, r2]
    10e0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    10e2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    10e4:	2225      	movs	r2, #37	; 0x25
    10e6:	5cb2      	ldrb	r2, [r6, r2]
    10e8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    10ea:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    10ec:	7ab1      	ldrb	r1, [r6, #10]
    10ee:	7af2      	ldrb	r2, [r6, #11]
    10f0:	4311      	orrs	r1, r2
    10f2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    10f4:	8933      	ldrh	r3, [r6, #8]
    10f6:	2bff      	cmp	r3, #255	; 0xff
    10f8:	d100      	bne.n	10fc <usart_init+0x184>
    10fa:	e081      	b.n	1200 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    10fc:	2280      	movs	r2, #128	; 0x80
    10fe:	0452      	lsls	r2, r2, #17
    1100:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1102:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1104:	232c      	movs	r3, #44	; 0x2c
    1106:	5cf3      	ldrb	r3, [r6, r3]
    1108:	2b00      	cmp	r3, #0
    110a:	d103      	bne.n	1114 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    110c:	4b62      	ldr	r3, [pc, #392]	; (1298 <usart_init+0x320>)
    110e:	789b      	ldrb	r3, [r3, #2]
    1110:	079b      	lsls	r3, r3, #30
    1112:	d501      	bpl.n	1118 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1114:	2380      	movs	r3, #128	; 0x80
    1116:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1118:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    111a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    111c:	2b00      	cmp	r3, #0
    111e:	d1fc      	bne.n	111a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1120:	4643      	mov	r3, r8
    1122:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1124:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1126:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1128:	2b00      	cmp	r3, #0
    112a:	d1fc      	bne.n	1126 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    112c:	4643      	mov	r3, r8
    112e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1130:	ab0e      	add	r3, sp, #56	; 0x38
    1132:	2280      	movs	r2, #128	; 0x80
    1134:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1136:	2200      	movs	r2, #0
    1138:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    113a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    113c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    113e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1140:	930a      	str	r3, [sp, #40]	; 0x28
    1142:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1144:	930b      	str	r3, [sp, #44]	; 0x2c
    1146:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1148:	930c      	str	r3, [sp, #48]	; 0x30
    114a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    114c:	9302      	str	r3, [sp, #8]
    114e:	930d      	str	r3, [sp, #52]	; 0x34
    1150:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1152:	ae0a      	add	r6, sp, #40	; 0x28
    1154:	e063      	b.n	121e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1156:	2308      	movs	r3, #8
    1158:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    115a:	3b07      	subs	r3, #7
    115c:	9307      	str	r3, [sp, #28]
    115e:	e77a      	b.n	1056 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1160:	6833      	ldr	r3, [r6, #0]
    1162:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1164:	68f3      	ldr	r3, [r6, #12]
    1166:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1168:	6973      	ldr	r3, [r6, #20]
    116a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    116c:	7e33      	ldrb	r3, [r6, #24]
    116e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1170:	2326      	movs	r3, #38	; 0x26
    1172:	5cf3      	ldrb	r3, [r6, r3]
    1174:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1176:	6873      	ldr	r3, [r6, #4]
    1178:	4699      	mov	r9, r3
	switch (transfer_mode)
    117a:	2b00      	cmp	r3, #0
    117c:	d018      	beq.n	11b0 <usart_init+0x238>
    117e:	2380      	movs	r3, #128	; 0x80
    1180:	055b      	lsls	r3, r3, #21
    1182:	4599      	cmp	r9, r3
    1184:	d001      	beq.n	118a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1186:	2000      	movs	r0, #0
    1188:	e025      	b.n	11d6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    118a:	2327      	movs	r3, #39	; 0x27
    118c:	5cf3      	ldrb	r3, [r6, r3]
    118e:	2b00      	cmp	r3, #0
    1190:	d000      	beq.n	1194 <usart_init+0x21c>
    1192:	e775      	b.n	1080 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1194:	6a33      	ldr	r3, [r6, #32]
    1196:	001f      	movs	r7, r3
    1198:	b2c0      	uxtb	r0, r0
    119a:	4b40      	ldr	r3, [pc, #256]	; (129c <usart_init+0x324>)
    119c:	4798      	blx	r3
    119e:	0001      	movs	r1, r0
    11a0:	220e      	movs	r2, #14
    11a2:	ab06      	add	r3, sp, #24
    11a4:	469c      	mov	ip, r3
    11a6:	4462      	add	r2, ip
    11a8:	0038      	movs	r0, r7
    11aa:	4b3d      	ldr	r3, [pc, #244]	; (12a0 <usart_init+0x328>)
    11ac:	4798      	blx	r3
    11ae:	e012      	b.n	11d6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    11b0:	2308      	movs	r3, #8
    11b2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    11b4:	2300      	movs	r3, #0
    11b6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    11b8:	2327      	movs	r3, #39	; 0x27
    11ba:	5cf3      	ldrb	r3, [r6, r3]
    11bc:	2b00      	cmp	r3, #0
    11be:	d00e      	beq.n	11de <usart_init+0x266>
				status_code =
    11c0:	9b06      	ldr	r3, [sp, #24]
    11c2:	9300      	str	r3, [sp, #0]
    11c4:	9b07      	ldr	r3, [sp, #28]
    11c6:	220e      	movs	r2, #14
    11c8:	a906      	add	r1, sp, #24
    11ca:	468c      	mov	ip, r1
    11cc:	4462      	add	r2, ip
    11ce:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    11d0:	6a30      	ldr	r0, [r6, #32]
    11d2:	4f34      	ldr	r7, [pc, #208]	; (12a4 <usart_init+0x32c>)
    11d4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    11d6:	2800      	cmp	r0, #0
    11d8:	d000      	beq.n	11dc <usart_init+0x264>
    11da:	e6e0      	b.n	f9e <usart_init+0x26>
    11dc:	e750      	b.n	1080 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    11de:	6a33      	ldr	r3, [r6, #32]
    11e0:	001f      	movs	r7, r3
    11e2:	b2c0      	uxtb	r0, r0
    11e4:	4b2d      	ldr	r3, [pc, #180]	; (129c <usart_init+0x324>)
    11e6:	4798      	blx	r3
    11e8:	0001      	movs	r1, r0
				status_code =
    11ea:	9b06      	ldr	r3, [sp, #24]
    11ec:	9300      	str	r3, [sp, #0]
    11ee:	9b07      	ldr	r3, [sp, #28]
    11f0:	220e      	movs	r2, #14
    11f2:	a806      	add	r0, sp, #24
    11f4:	4684      	mov	ip, r0
    11f6:	4462      	add	r2, ip
    11f8:	0038      	movs	r0, r7
    11fa:	4f2a      	ldr	r7, [pc, #168]	; (12a4 <usart_init+0x32c>)
    11fc:	47b8      	blx	r7
    11fe:	e7ea      	b.n	11d6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1200:	7ef3      	ldrb	r3, [r6, #27]
    1202:	2b00      	cmp	r3, #0
    1204:	d100      	bne.n	1208 <usart_init+0x290>
    1206:	e77d      	b.n	1104 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1208:	2380      	movs	r3, #128	; 0x80
    120a:	04db      	lsls	r3, r3, #19
    120c:	431f      	orrs	r7, r3
    120e:	e779      	b.n	1104 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1210:	0020      	movs	r0, r4
    1212:	4b25      	ldr	r3, [pc, #148]	; (12a8 <usart_init+0x330>)
    1214:	4798      	blx	r3
    1216:	e007      	b.n	1228 <usart_init+0x2b0>
    1218:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    121a:	2f04      	cmp	r7, #4
    121c:	d00d      	beq.n	123a <usart_init+0x2c2>
    121e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1220:	00bb      	lsls	r3, r7, #2
    1222:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1224:	2800      	cmp	r0, #0
    1226:	d0f3      	beq.n	1210 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1228:	1c43      	adds	r3, r0, #1
    122a:	d0f5      	beq.n	1218 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    122c:	a90e      	add	r1, sp, #56	; 0x38
    122e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1230:	0c00      	lsrs	r0, r0, #16
    1232:	b2c0      	uxtb	r0, r0
    1234:	4b1d      	ldr	r3, [pc, #116]	; (12ac <usart_init+0x334>)
    1236:	4798      	blx	r3
    1238:	e7ee      	b.n	1218 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    123a:	2300      	movs	r3, #0
    123c:	60eb      	str	r3, [r5, #12]
    123e:	612b      	str	r3, [r5, #16]
    1240:	616b      	str	r3, [r5, #20]
    1242:	61ab      	str	r3, [r5, #24]
    1244:	61eb      	str	r3, [r5, #28]
    1246:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1248:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    124a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    124c:	2200      	movs	r2, #0
    124e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1250:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1252:	3330      	adds	r3, #48	; 0x30
    1254:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1256:	3301      	adds	r3, #1
    1258:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    125a:	3301      	adds	r3, #1
    125c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    125e:	3301      	adds	r3, #1
    1260:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1262:	6828      	ldr	r0, [r5, #0]
    1264:	4b07      	ldr	r3, [pc, #28]	; (1284 <usart_init+0x30c>)
    1266:	4798      	blx	r3
    1268:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    126a:	4911      	ldr	r1, [pc, #68]	; (12b0 <usart_init+0x338>)
    126c:	4b11      	ldr	r3, [pc, #68]	; (12b4 <usart_init+0x33c>)
    126e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1270:	00a4      	lsls	r4, r4, #2
    1272:	4b11      	ldr	r3, [pc, #68]	; (12b8 <usart_init+0x340>)
    1274:	50e5      	str	r5, [r4, r3]
	return status_code;
    1276:	2000      	movs	r0, #0
    1278:	e691      	b.n	f9e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    127a:	2310      	movs	r3, #16
    127c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    127e:	2300      	movs	r3, #0
    1280:	9307      	str	r3, [sp, #28]
    1282:	e6e8      	b.n	1056 <usart_init+0xde>
    1284:	00000a89 	.word	0x00000a89
    1288:	40000400 	.word	0x40000400
    128c:	0000233d 	.word	0x0000233d
    1290:	000022b1 	.word	0x000022b1
    1294:	00000941 	.word	0x00000941
    1298:	41002000 	.word	0x41002000
    129c:	00002359 	.word	0x00002359
    12a0:	00000883 	.word	0x00000883
    12a4:	000008ad 	.word	0x000008ad
    12a8:	0000098d 	.word	0x0000098d
    12ac:	00002435 	.word	0x00002435
    12b0:	000012bd 	.word	0x000012bd
    12b4:	00001b91 	.word	0x00001b91
    12b8:	2000042c 	.word	0x2000042c

000012bc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    12bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    12be:	0080      	lsls	r0, r0, #2
    12c0:	4b62      	ldr	r3, [pc, #392]	; (144c <_usart_interrupt_handler+0x190>)
    12c2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    12c4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    12c6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    12c8:	2b00      	cmp	r3, #0
    12ca:	d1fc      	bne.n	12c6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    12cc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    12ce:	7da6      	ldrb	r6, [r4, #22]
    12d0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    12d2:	2330      	movs	r3, #48	; 0x30
    12d4:	5ceb      	ldrb	r3, [r5, r3]
    12d6:	2231      	movs	r2, #49	; 0x31
    12d8:	5caf      	ldrb	r7, [r5, r2]
    12da:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    12dc:	07f3      	lsls	r3, r6, #31
    12de:	d522      	bpl.n	1326 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    12e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    12e2:	b29b      	uxth	r3, r3
    12e4:	2b00      	cmp	r3, #0
    12e6:	d01c      	beq.n	1322 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    12e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    12ea:	7813      	ldrb	r3, [r2, #0]
    12ec:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    12ee:	1c51      	adds	r1, r2, #1
    12f0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12f2:	7969      	ldrb	r1, [r5, #5]
    12f4:	2901      	cmp	r1, #1
    12f6:	d00e      	beq.n	1316 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    12f8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    12fa:	05db      	lsls	r3, r3, #23
    12fc:	0ddb      	lsrs	r3, r3, #23
    12fe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1300:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1302:	3b01      	subs	r3, #1
    1304:	b29b      	uxth	r3, r3
    1306:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1308:	2b00      	cmp	r3, #0
    130a:	d10c      	bne.n	1326 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    130c:	3301      	adds	r3, #1
    130e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1310:	3301      	adds	r3, #1
    1312:	75a3      	strb	r3, [r4, #22]
    1314:	e007      	b.n	1326 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1316:	7851      	ldrb	r1, [r2, #1]
    1318:	0209      	lsls	r1, r1, #8
    131a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    131c:	3202      	adds	r2, #2
    131e:	62aa      	str	r2, [r5, #40]	; 0x28
    1320:	e7eb      	b.n	12fa <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1322:	2301      	movs	r3, #1
    1324:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1326:	07b3      	lsls	r3, r6, #30
    1328:	d506      	bpl.n	1338 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    132a:	2302      	movs	r3, #2
    132c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    132e:	2200      	movs	r2, #0
    1330:	3331      	adds	r3, #49	; 0x31
    1332:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1334:	07fb      	lsls	r3, r7, #31
    1336:	d41a      	bmi.n	136e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1338:	0773      	lsls	r3, r6, #29
    133a:	d565      	bpl.n	1408 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    133c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    133e:	b29b      	uxth	r3, r3
    1340:	2b00      	cmp	r3, #0
    1342:	d05f      	beq.n	1404 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1344:	8b63      	ldrh	r3, [r4, #26]
    1346:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1348:	071a      	lsls	r2, r3, #28
    134a:	d414      	bmi.n	1376 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    134c:	223f      	movs	r2, #63	; 0x3f
    134e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1350:	2b00      	cmp	r3, #0
    1352:	d034      	beq.n	13be <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1354:	079a      	lsls	r2, r3, #30
    1356:	d511      	bpl.n	137c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1358:	221a      	movs	r2, #26
    135a:	2332      	movs	r3, #50	; 0x32
    135c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    135e:	3b30      	subs	r3, #48	; 0x30
    1360:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1362:	077b      	lsls	r3, r7, #29
    1364:	d550      	bpl.n	1408 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1366:	0028      	movs	r0, r5
    1368:	696b      	ldr	r3, [r5, #20]
    136a:	4798      	blx	r3
    136c:	e04c      	b.n	1408 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    136e:	0028      	movs	r0, r5
    1370:	68eb      	ldr	r3, [r5, #12]
    1372:	4798      	blx	r3
    1374:	e7e0      	b.n	1338 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1376:	2237      	movs	r2, #55	; 0x37
    1378:	4013      	ands	r3, r2
    137a:	e7e9      	b.n	1350 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    137c:	075a      	lsls	r2, r3, #29
    137e:	d505      	bpl.n	138c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1380:	221e      	movs	r2, #30
    1382:	2332      	movs	r3, #50	; 0x32
    1384:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1386:	3b2e      	subs	r3, #46	; 0x2e
    1388:	8363      	strh	r3, [r4, #26]
    138a:	e7ea      	b.n	1362 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    138c:	07da      	lsls	r2, r3, #31
    138e:	d505      	bpl.n	139c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1390:	2213      	movs	r2, #19
    1392:	2332      	movs	r3, #50	; 0x32
    1394:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1396:	3b31      	subs	r3, #49	; 0x31
    1398:	8363      	strh	r3, [r4, #26]
    139a:	e7e2      	b.n	1362 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    139c:	06da      	lsls	r2, r3, #27
    139e:	d505      	bpl.n	13ac <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    13a0:	2242      	movs	r2, #66	; 0x42
    13a2:	2332      	movs	r3, #50	; 0x32
    13a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    13a6:	3b22      	subs	r3, #34	; 0x22
    13a8:	8363      	strh	r3, [r4, #26]
    13aa:	e7da      	b.n	1362 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    13ac:	2220      	movs	r2, #32
    13ae:	421a      	tst	r2, r3
    13b0:	d0d7      	beq.n	1362 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    13b2:	3221      	adds	r2, #33	; 0x21
    13b4:	2332      	movs	r3, #50	; 0x32
    13b6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    13b8:	3b12      	subs	r3, #18
    13ba:	8363      	strh	r3, [r4, #26]
    13bc:	e7d1      	b.n	1362 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    13be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    13c0:	05db      	lsls	r3, r3, #23
    13c2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    13c4:	b2da      	uxtb	r2, r3
    13c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    13c8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    13ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    13cc:	1c51      	adds	r1, r2, #1
    13ce:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13d0:	7969      	ldrb	r1, [r5, #5]
    13d2:	2901      	cmp	r1, #1
    13d4:	d010      	beq.n	13f8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    13d6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    13d8:	3b01      	subs	r3, #1
    13da:	b29b      	uxth	r3, r3
    13dc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    13de:	2b00      	cmp	r3, #0
    13e0:	d112      	bne.n	1408 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    13e2:	3304      	adds	r3, #4
    13e4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    13e6:	2200      	movs	r2, #0
    13e8:	332e      	adds	r3, #46	; 0x2e
    13ea:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    13ec:	07bb      	lsls	r3, r7, #30
    13ee:	d50b      	bpl.n	1408 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    13f0:	0028      	movs	r0, r5
    13f2:	692b      	ldr	r3, [r5, #16]
    13f4:	4798      	blx	r3
    13f6:	e007      	b.n	1408 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    13f8:	0a1b      	lsrs	r3, r3, #8
    13fa:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    13fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    13fe:	3301      	adds	r3, #1
    1400:	626b      	str	r3, [r5, #36]	; 0x24
    1402:	e7e8      	b.n	13d6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1404:	2304      	movs	r3, #4
    1406:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1408:	06f3      	lsls	r3, r6, #27
    140a:	d504      	bpl.n	1416 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    140c:	2310      	movs	r3, #16
    140e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1410:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1412:	06fb      	lsls	r3, r7, #27
    1414:	d40e      	bmi.n	1434 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1416:	06b3      	lsls	r3, r6, #26
    1418:	d504      	bpl.n	1424 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    141a:	2320      	movs	r3, #32
    141c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    141e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1420:	073b      	lsls	r3, r7, #28
    1422:	d40b      	bmi.n	143c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1424:	0733      	lsls	r3, r6, #28
    1426:	d504      	bpl.n	1432 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1428:	2308      	movs	r3, #8
    142a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    142c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    142e:	06bb      	lsls	r3, r7, #26
    1430:	d408      	bmi.n	1444 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1434:	0028      	movs	r0, r5
    1436:	69eb      	ldr	r3, [r5, #28]
    1438:	4798      	blx	r3
    143a:	e7ec      	b.n	1416 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    143c:	0028      	movs	r0, r5
    143e:	69ab      	ldr	r3, [r5, #24]
    1440:	4798      	blx	r3
    1442:	e7ef      	b.n	1424 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1444:	6a2b      	ldr	r3, [r5, #32]
    1446:	0028      	movs	r0, r5
    1448:	4798      	blx	r3
}
    144a:	e7f2      	b.n	1432 <_usart_interrupt_handler+0x176>
    144c:	2000042c 	.word	0x2000042c

00001450 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1450:	b5f0      	push	{r4, r5, r6, r7, lr}
    1452:	b08b      	sub	sp, #44	; 0x2c
    1454:	0005      	movs	r5, r0
    1456:	000c      	movs	r4, r1
    1458:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    145a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    145c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    145e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1460:	079b      	lsls	r3, r3, #30
    1462:	d501      	bpl.n	1468 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1464:	b00b      	add	sp, #44	; 0x2c
    1466:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1468:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    146a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    146c:	07db      	lsls	r3, r3, #31
    146e:	d4f9      	bmi.n	1464 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1470:	0008      	movs	r0, r1
    1472:	4b6f      	ldr	r3, [pc, #444]	; (1630 <spi_init+0x1e0>)
    1474:	4798      	blx	r3
    1476:	4a6f      	ldr	r2, [pc, #444]	; (1634 <spi_init+0x1e4>)
    1478:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    147a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    147c:	2301      	movs	r3, #1
    147e:	40bb      	lsls	r3, r7
    1480:	430b      	orrs	r3, r1
    1482:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1484:	a909      	add	r1, sp, #36	; 0x24
    1486:	2724      	movs	r7, #36	; 0x24
    1488:	5df3      	ldrb	r3, [r6, r7]
    148a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    148c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    148e:	b2c3      	uxtb	r3, r0
    1490:	9301      	str	r3, [sp, #4]
    1492:	0018      	movs	r0, r3
    1494:	4b68      	ldr	r3, [pc, #416]	; (1638 <spi_init+0x1e8>)
    1496:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1498:	9801      	ldr	r0, [sp, #4]
    149a:	4b68      	ldr	r3, [pc, #416]	; (163c <spi_init+0x1ec>)
    149c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    149e:	5df0      	ldrb	r0, [r6, r7]
    14a0:	2100      	movs	r1, #0
    14a2:	4b67      	ldr	r3, [pc, #412]	; (1640 <spi_init+0x1f0>)
    14a4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    14a6:	7833      	ldrb	r3, [r6, #0]
    14a8:	2b01      	cmp	r3, #1
    14aa:	d03f      	beq.n	152c <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    14ac:	7833      	ldrb	r3, [r6, #0]
    14ae:	2b00      	cmp	r3, #0
    14b0:	d103      	bne.n	14ba <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    14b2:	6823      	ldr	r3, [r4, #0]
    14b4:	2208      	movs	r2, #8
    14b6:	4313      	orrs	r3, r2
    14b8:	6023      	str	r3, [r4, #0]
    14ba:	002b      	movs	r3, r5
    14bc:	330c      	adds	r3, #12
    14be:	0029      	movs	r1, r5
    14c0:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    14c2:	2200      	movs	r2, #0
    14c4:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    14c6:	428b      	cmp	r3, r1
    14c8:	d1fc      	bne.n	14c4 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    14ca:	2300      	movs	r3, #0
    14cc:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    14ce:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    14d0:	2400      	movs	r4, #0
    14d2:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    14d4:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    14d6:	3336      	adds	r3, #54	; 0x36
    14d8:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    14da:	3301      	adds	r3, #1
    14dc:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    14de:	3301      	adds	r3, #1
    14e0:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    14e2:	3b35      	subs	r3, #53	; 0x35
    14e4:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    14e6:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    14e8:	6828      	ldr	r0, [r5, #0]
    14ea:	4b51      	ldr	r3, [pc, #324]	; (1630 <spi_init+0x1e0>)
    14ec:	4798      	blx	r3
    14ee:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    14f0:	4954      	ldr	r1, [pc, #336]	; (1644 <spi_init+0x1f4>)
    14f2:	4b55      	ldr	r3, [pc, #340]	; (1648 <spi_init+0x1f8>)
    14f4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    14f6:	00bf      	lsls	r7, r7, #2
    14f8:	4b54      	ldr	r3, [pc, #336]	; (164c <spi_init+0x1fc>)
    14fa:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14fc:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    14fe:	ab04      	add	r3, sp, #16
    1500:	2280      	movs	r2, #128	; 0x80
    1502:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1504:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1506:	3a7f      	subs	r2, #127	; 0x7f
    1508:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    150a:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    150c:	7833      	ldrb	r3, [r6, #0]
    150e:	2b00      	cmp	r3, #0
    1510:	d102      	bne.n	1518 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1512:	2200      	movs	r2, #0
    1514:	ab04      	add	r3, sp, #16
    1516:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1518:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    151a:	9305      	str	r3, [sp, #20]
    151c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    151e:	9306      	str	r3, [sp, #24]
    1520:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1522:	9307      	str	r3, [sp, #28]
    1524:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1526:	9308      	str	r3, [sp, #32]
    1528:	2400      	movs	r4, #0
    152a:	e00b      	b.n	1544 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    152c:	6823      	ldr	r3, [r4, #0]
    152e:	220c      	movs	r2, #12
    1530:	4313      	orrs	r3, r2
    1532:	6023      	str	r3, [r4, #0]
    1534:	e7ba      	b.n	14ac <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1536:	0038      	movs	r0, r7
    1538:	4b45      	ldr	r3, [pc, #276]	; (1650 <spi_init+0x200>)
    153a:	4798      	blx	r3
    153c:	e00a      	b.n	1554 <spi_init+0x104>
    153e:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1540:	2c04      	cmp	r4, #4
    1542:	d010      	beq.n	1566 <spi_init+0x116>
    1544:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1546:	00a3      	lsls	r3, r4, #2
    1548:	aa02      	add	r2, sp, #8
    154a:	200c      	movs	r0, #12
    154c:	1812      	adds	r2, r2, r0
    154e:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1550:	2800      	cmp	r0, #0
    1552:	d0f0      	beq.n	1536 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    1554:	1c43      	adds	r3, r0, #1
    1556:	d0f2      	beq.n	153e <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1558:	a904      	add	r1, sp, #16
    155a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    155c:	0c00      	lsrs	r0, r0, #16
    155e:	b2c0      	uxtb	r0, r0
    1560:	4b3c      	ldr	r3, [pc, #240]	; (1654 <spi_init+0x204>)
    1562:	4798      	blx	r3
    1564:	e7eb      	b.n	153e <spi_init+0xee>
	module->mode             = config->mode;
    1566:	7833      	ldrb	r3, [r6, #0]
    1568:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    156a:	7c33      	ldrb	r3, [r6, #16]
    156c:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    156e:	7cb3      	ldrb	r3, [r6, #18]
    1570:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1572:	7d33      	ldrb	r3, [r6, #20]
    1574:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1576:	2200      	movs	r2, #0
    1578:	ab02      	add	r3, sp, #8
    157a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    157c:	7833      	ldrb	r3, [r6, #0]
    157e:	2b01      	cmp	r3, #1
    1580:	d012      	beq.n	15a8 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    1582:	7833      	ldrb	r3, [r6, #0]
    1584:	2b00      	cmp	r3, #0
    1586:	d126      	bne.n	15d6 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    1588:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    158a:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    158e:	7ff1      	ldrb	r1, [r6, #31]
    1590:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1592:	7fb4      	ldrb	r4, [r6, #30]
    1594:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    1596:	4319      	orrs	r1, r3
    1598:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    159a:	2320      	movs	r3, #32
    159c:	5cf3      	ldrb	r3, [r6, r3]
    159e:	2b00      	cmp	r3, #0
    15a0:	d01b      	beq.n	15da <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    15a2:	2340      	movs	r3, #64	; 0x40
    15a4:	431a      	orrs	r2, r3
    15a6:	e018      	b.n	15da <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    15a8:	6828      	ldr	r0, [r5, #0]
    15aa:	4b21      	ldr	r3, [pc, #132]	; (1630 <spi_init+0x1e0>)
    15ac:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    15ae:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    15b0:	b2c0      	uxtb	r0, r0
    15b2:	4b29      	ldr	r3, [pc, #164]	; (1658 <spi_init+0x208>)
    15b4:	4798      	blx	r3
    15b6:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    15b8:	ab02      	add	r3, sp, #8
    15ba:	1d9a      	adds	r2, r3, #6
    15bc:	69b0      	ldr	r0, [r6, #24]
    15be:	4b27      	ldr	r3, [pc, #156]	; (165c <spi_init+0x20c>)
    15c0:	4798      	blx	r3
    15c2:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    15c4:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    15c6:	2b00      	cmp	r3, #0
    15c8:	d000      	beq.n	15cc <spi_init+0x17c>
    15ca:	e74b      	b.n	1464 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    15cc:	ab02      	add	r3, sp, #8
    15ce:	3306      	adds	r3, #6
    15d0:	781b      	ldrb	r3, [r3, #0]
    15d2:	733b      	strb	r3, [r7, #12]
    15d4:	e7d5      	b.n	1582 <spi_init+0x132>
	uint32_t ctrlb = 0;
    15d6:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    15d8:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    15da:	6873      	ldr	r3, [r6, #4]
    15dc:	68b1      	ldr	r1, [r6, #8]
    15de:	430b      	orrs	r3, r1
    15e0:	68f1      	ldr	r1, [r6, #12]
    15e2:	430b      	orrs	r3, r1
    15e4:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    15e6:	7c31      	ldrb	r1, [r6, #16]
    15e8:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    15ea:	7c71      	ldrb	r1, [r6, #17]
    15ec:	2900      	cmp	r1, #0
    15ee:	d103      	bne.n	15f8 <spi_init+0x1a8>
    15f0:	491b      	ldr	r1, [pc, #108]	; (1660 <spi_init+0x210>)
    15f2:	7889      	ldrb	r1, [r1, #2]
    15f4:	0789      	lsls	r1, r1, #30
    15f6:	d501      	bpl.n	15fc <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    15f8:	2180      	movs	r1, #128	; 0x80
    15fa:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    15fc:	7cb1      	ldrb	r1, [r6, #18]
    15fe:	2900      	cmp	r1, #0
    1600:	d002      	beq.n	1608 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1602:	2180      	movs	r1, #128	; 0x80
    1604:	0289      	lsls	r1, r1, #10
    1606:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1608:	7cf1      	ldrb	r1, [r6, #19]
    160a:	2900      	cmp	r1, #0
    160c:	d002      	beq.n	1614 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    160e:	2180      	movs	r1, #128	; 0x80
    1610:	0089      	lsls	r1, r1, #2
    1612:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1614:	7d31      	ldrb	r1, [r6, #20]
    1616:	2900      	cmp	r1, #0
    1618:	d002      	beq.n	1620 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    161a:	2180      	movs	r1, #128	; 0x80
    161c:	0189      	lsls	r1, r1, #6
    161e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1620:	6839      	ldr	r1, [r7, #0]
    1622:	430b      	orrs	r3, r1
    1624:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1626:	687b      	ldr	r3, [r7, #4]
    1628:	431a      	orrs	r2, r3
    162a:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    162c:	2000      	movs	r0, #0
    162e:	e719      	b.n	1464 <spi_init+0x14>
    1630:	00000a89 	.word	0x00000a89
    1634:	40000400 	.word	0x40000400
    1638:	0000233d 	.word	0x0000233d
    163c:	000022b1 	.word	0x000022b1
    1640:	00000941 	.word	0x00000941
    1644:	00001969 	.word	0x00001969
    1648:	00001b91 	.word	0x00001b91
    164c:	2000042c 	.word	0x2000042c
    1650:	0000098d 	.word	0x0000098d
    1654:	00002435 	.word	0x00002435
    1658:	00002359 	.word	0x00002359
    165c:	00000883 	.word	0x00000883
    1660:	41002000 	.word	0x41002000

00001664 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1664:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1666:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1668:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    166a:	2c01      	cmp	r4, #1
    166c:	d001      	beq.n	1672 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    166e:	0018      	movs	r0, r3
    1670:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1672:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1674:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1676:	2c00      	cmp	r4, #0
    1678:	d1f9      	bne.n	166e <spi_select_slave+0xa>
		if (select) {
    167a:	2a00      	cmp	r2, #0
    167c:	d058      	beq.n	1730 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    167e:	784b      	ldrb	r3, [r1, #1]
    1680:	2b00      	cmp	r3, #0
    1682:	d044      	beq.n	170e <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1684:	6803      	ldr	r3, [r0, #0]
    1686:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1688:	07db      	lsls	r3, r3, #31
    168a:	d410      	bmi.n	16ae <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    168c:	780a      	ldrb	r2, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    168e:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1690:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1692:	2900      	cmp	r1, #0
    1694:	d104      	bne.n	16a0 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1696:	0953      	lsrs	r3, r2, #5
    1698:	01db      	lsls	r3, r3, #7
    169a:	492e      	ldr	r1, [pc, #184]	; (1754 <spi_select_slave+0xf0>)
    169c:	468c      	mov	ip, r1
    169e:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    16a0:	211f      	movs	r1, #31
    16a2:	4011      	ands	r1, r2
    16a4:	2201      	movs	r2, #1
    16a6:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    16a8:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    16aa:	2305      	movs	r3, #5
    16ac:	e7df      	b.n	166e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    16ae:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    16b0:	09d4      	lsrs	r4, r2, #7
		return NULL;
    16b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    16b4:	2c00      	cmp	r4, #0
    16b6:	d104      	bne.n	16c2 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    16b8:	0953      	lsrs	r3, r2, #5
    16ba:	01db      	lsls	r3, r3, #7
    16bc:	4c25      	ldr	r4, [pc, #148]	; (1754 <spi_select_slave+0xf0>)
    16be:	46a4      	mov	ip, r4
    16c0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    16c2:	241f      	movs	r4, #31
    16c4:	4014      	ands	r4, r2
    16c6:	2201      	movs	r2, #1
    16c8:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    16ca:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    16cc:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    16ce:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    16d0:	07d2      	lsls	r2, r2, #31
    16d2:	d501      	bpl.n	16d8 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    16d4:	788a      	ldrb	r2, [r1, #2]
    16d6:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    16d8:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    16da:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    16dc:	2a00      	cmp	r2, #0
    16de:	d1c6      	bne.n	166e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    16e0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    16e2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    16e4:	7e13      	ldrb	r3, [r2, #24]
    16e6:	420b      	tst	r3, r1
    16e8:	d0fc      	beq.n	16e4 <spi_select_slave+0x80>
    16ea:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    16ec:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    16ee:	0749      	lsls	r1, r1, #29
    16f0:	d5bd      	bpl.n	166e <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    16f2:	8b53      	ldrh	r3, [r2, #26]
    16f4:	075b      	lsls	r3, r3, #29
    16f6:	d501      	bpl.n	16fc <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    16f8:	2304      	movs	r3, #4
    16fa:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16fc:	7983      	ldrb	r3, [r0, #6]
    16fe:	2b01      	cmp	r3, #1
    1700:	d002      	beq.n	1708 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1702:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1704:	2300      	movs	r3, #0
    1706:	e7b2      	b.n	166e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1708:	6a93      	ldr	r3, [r2, #40]	; 0x28
    170a:	2300      	movs	r3, #0
    170c:	e7af      	b.n	166e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    170e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1710:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1712:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1714:	2900      	cmp	r1, #0
    1716:	d104      	bne.n	1722 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1718:	0953      	lsrs	r3, r2, #5
    171a:	01db      	lsls	r3, r3, #7
    171c:	490d      	ldr	r1, [pc, #52]	; (1754 <spi_select_slave+0xf0>)
    171e:	468c      	mov	ip, r1
    1720:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1722:	211f      	movs	r1, #31
    1724:	4011      	ands	r1, r2
    1726:	2201      	movs	r2, #1
    1728:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    172a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    172c:	2300      	movs	r3, #0
    172e:	e79e      	b.n	166e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1730:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1732:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1734:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1736:	2900      	cmp	r1, #0
    1738:	d104      	bne.n	1744 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    173a:	0953      	lsrs	r3, r2, #5
    173c:	01db      	lsls	r3, r3, #7
    173e:	4905      	ldr	r1, [pc, #20]	; (1754 <spi_select_slave+0xf0>)
    1740:	468c      	mov	ip, r1
    1742:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1744:	211f      	movs	r1, #31
    1746:	4011      	ands	r1, r2
    1748:	2201      	movs	r2, #1
    174a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    174c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    174e:	2300      	movs	r3, #0
    1750:	e78d      	b.n	166e <spi_select_slave+0xa>
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	41004400 	.word	0x41004400

00001758 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1758:	b5f0      	push	{r4, r5, r6, r7, lr}
    175a:	46de      	mov	lr, fp
    175c:	4657      	mov	r7, sl
    175e:	464e      	mov	r6, r9
    1760:	4645      	mov	r5, r8
    1762:	b5e0      	push	{r5, r6, r7, lr}
    1764:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1766:	2338      	movs	r3, #56	; 0x38
    1768:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    176a:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    176c:	2c05      	cmp	r4, #5
    176e:	d002      	beq.n	1776 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1770:	3312      	adds	r3, #18
	if (length == 0) {
    1772:	2a00      	cmp	r2, #0
    1774:	d107      	bne.n	1786 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    1776:	0018      	movs	r0, r3
    1778:	b003      	add	sp, #12
    177a:	bc3c      	pop	{r2, r3, r4, r5}
    177c:	4690      	mov	r8, r2
    177e:	4699      	mov	r9, r3
    1780:	46a2      	mov	sl, r4
    1782:	46ab      	mov	fp, r5
    1784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1786:	7943      	ldrb	r3, [r0, #5]
    1788:	2b00      	cmp	r3, #0
    178a:	d103      	bne.n	1794 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    178c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    178e:	7e1c      	ldrb	r4, [r3, #24]
    1790:	07a4      	lsls	r4, r4, #30
    1792:	d40a      	bmi.n	17aa <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    1794:	4693      	mov	fp, r2
    1796:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    1798:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    179a:	2502      	movs	r5, #2
    179c:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    179e:	3502      	adds	r5, #2
    17a0:	46a8      	mov	r8, r5
    17a2:	3a01      	subs	r2, #1
    17a4:	b292      	uxth	r2, r2
    17a6:	468a      	mov	sl, r1
    17a8:	e023      	b.n	17f2 <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    17aa:	2402      	movs	r4, #2
    17ac:	761c      	strb	r4, [r3, #24]
    17ae:	e7f1      	b.n	1794 <spi_write_buffer_wait+0x3c>
    17b0:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    17b2:	4661      	mov	r1, ip
    17b4:	420d      	tst	r5, r1
    17b6:	d12e      	bne.n	1816 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    17b8:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    17ba:	421d      	tst	r5, r3
    17bc:	d100      	bne.n	17c0 <spi_write_buffer_wait+0x68>
    17be:	e0c2      	b.n	1946 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    17c0:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    17c2:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    17c4:	421d      	tst	r5, r3
    17c6:	d0fc      	beq.n	17c2 <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    17c8:	1c67      	adds	r7, r4, #1
    17ca:	b2bf      	uxth	r7, r7
    17cc:	4651      	mov	r1, sl
    17ce:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    17d0:	7981      	ldrb	r1, [r0, #6]
    17d2:	2901      	cmp	r1, #1
    17d4:	d023      	beq.n	181e <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    17d6:	b2ad      	uxth	r5, r5
    17d8:	003c      	movs	r4, r7
    17da:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    17dc:	421f      	tst	r7, r3
    17de:	d002      	beq.n	17e6 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    17e0:	05ed      	lsls	r5, r5, #23
    17e2:	0ded      	lsrs	r5, r5, #23
    17e4:	62b5      	str	r5, [r6, #40]	; 0x28
    17e6:	1e55      	subs	r5, r2, #1
    17e8:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    17ea:	79c6      	ldrb	r6, [r0, #7]
    17ec:	2e00      	cmp	r6, #0
    17ee:	d11d      	bne.n	182c <spi_write_buffer_wait+0xd4>
    17f0:	002a      	movs	r2, r5
	while (length--) {
    17f2:	4d5a      	ldr	r5, [pc, #360]	; (195c <spi_write_buffer_wait+0x204>)
    17f4:	42aa      	cmp	r2, r5
    17f6:	d070      	beq.n	18da <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    17f8:	7945      	ldrb	r5, [r0, #5]
    17fa:	2d00      	cmp	r5, #0
    17fc:	d1e0      	bne.n	17c0 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    17fe:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1800:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    1802:	421d      	tst	r5, r3
    1804:	d1d4      	bne.n	17b0 <spi_write_buffer_wait+0x58>
    1806:	4d56      	ldr	r5, [pc, #344]	; (1960 <spi_write_buffer_wait+0x208>)
    1808:	7e37      	ldrb	r7, [r6, #24]
    180a:	421f      	tst	r7, r3
    180c:	d1d0      	bne.n	17b0 <spi_write_buffer_wait+0x58>
    180e:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1810:	2d00      	cmp	r5, #0
    1812:	d1f9      	bne.n	1808 <spi_write_buffer_wait+0xb0>
    1814:	e7cc      	b.n	17b0 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1816:	2302      	movs	r3, #2
    1818:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    181a:	3302      	adds	r3, #2
    181c:	e7ab      	b.n	1776 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    181e:	3402      	adds	r4, #2
    1820:	b2a4      	uxth	r4, r4
    1822:	4651      	mov	r1, sl
    1824:	5dcf      	ldrb	r7, [r1, r7]
    1826:	023f      	lsls	r7, r7, #8
    1828:	433d      	orrs	r5, r7
    182a:	e7d6      	b.n	17da <spi_write_buffer_wait+0x82>
    182c:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    182e:	7945      	ldrb	r5, [r0, #5]
    1830:	2d00      	cmp	r5, #0
    1832:	d137      	bne.n	18a4 <spi_write_buffer_wait+0x14c>
    1834:	4d4b      	ldr	r5, [pc, #300]	; (1964 <spi_write_buffer_wait+0x20c>)
    1836:	9101      	str	r1, [sp, #4]
    1838:	e012      	b.n	1860 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    183a:	3402      	adds	r4, #2
    183c:	b2a4      	uxth	r4, r4
    183e:	4649      	mov	r1, r9
    1840:	9f01      	ldr	r7, [sp, #4]
    1842:	5c79      	ldrb	r1, [r7, r1]
    1844:	0209      	lsls	r1, r1, #8
    1846:	9f00      	ldr	r7, [sp, #0]
    1848:	430f      	orrs	r7, r1
    184a:	e01b      	b.n	1884 <spi_write_buffer_wait+0x12c>
						length--;
    184c:	3a01      	subs	r2, #1
    184e:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    1850:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1852:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    1854:	4641      	mov	r1, r8
    1856:	420f      	tst	r7, r1
    1858:	d11b      	bne.n	1892 <spi_write_buffer_wait+0x13a>
    185a:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    185c:	2d00      	cmp	r5, #0
    185e:	d018      	beq.n	1892 <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    1860:	2a00      	cmp	r2, #0
    1862:	d0f5      	beq.n	1850 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1864:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1866:	7e37      	ldrb	r7, [r6, #24]
    1868:	421f      	tst	r7, r3
    186a:	d0f1      	beq.n	1850 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    186c:	1c67      	adds	r7, r4, #1
    186e:	b2b9      	uxth	r1, r7
    1870:	4689      	mov	r9, r1
    1872:	9901      	ldr	r1, [sp, #4]
    1874:	5d09      	ldrb	r1, [r1, r4]
    1876:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1878:	7981      	ldrb	r1, [r0, #6]
    187a:	2901      	cmp	r1, #1
    187c:	d0dd      	beq.n	183a <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    187e:	4669      	mov	r1, sp
    1880:	880f      	ldrh	r7, [r1, #0]
    1882:	464c      	mov	r4, r9
    1884:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    1886:	4219      	tst	r1, r3
    1888:	d0e0      	beq.n	184c <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    188a:	05ff      	lsls	r7, r7, #23
    188c:	0dff      	lsrs	r7, r7, #23
    188e:	62b7      	str	r7, [r6, #40]	; 0x28
    1890:	e7dc      	b.n	184c <spi_write_buffer_wait+0xf4>
    1892:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1894:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    1896:	4667      	mov	r7, ip
    1898:	423d      	tst	r5, r7
    189a:	d118      	bne.n	18ce <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    189c:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    189e:	4646      	mov	r6, r8
    18a0:	4235      	tst	r5, r6
    18a2:	d052      	beq.n	194a <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    18a4:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    18a6:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    18a8:	4647      	mov	r7, r8
    18aa:	423d      	tst	r5, r7
    18ac:	d0fb      	beq.n	18a6 <spi_write_buffer_wait+0x14e>
    18ae:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    18b0:	423d      	tst	r5, r7
    18b2:	d007      	beq.n	18c4 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    18b4:	8b75      	ldrh	r5, [r6, #26]
    18b6:	423d      	tst	r5, r7
    18b8:	d000      	beq.n	18bc <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    18ba:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18bc:	7985      	ldrb	r5, [r0, #6]
    18be:	2d01      	cmp	r5, #1
    18c0:	d009      	beq.n	18d6 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    18c2:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    18c4:	465d      	mov	r5, fp
    18c6:	3d01      	subs	r5, #1
    18c8:	b2ad      	uxth	r5, r5
    18ca:	46ab      	mov	fp, r5
    18cc:	e769      	b.n	17a2 <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    18ce:	2302      	movs	r3, #2
    18d0:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    18d2:	3302      	adds	r3, #2
    18d4:	e74f      	b.n	1776 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    18d6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    18d8:	e7f4      	b.n	18c4 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    18da:	7943      	ldrb	r3, [r0, #5]
    18dc:	2b01      	cmp	r3, #1
    18de:	d00b      	beq.n	18f8 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    18e0:	2b00      	cmp	r3, #0
    18e2:	d134      	bne.n	194e <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    18e4:	79c2      	ldrb	r2, [r0, #7]
    18e6:	2a00      	cmp	r2, #0
    18e8:	d100      	bne.n	18ec <spi_write_buffer_wait+0x194>
    18ea:	e744      	b.n	1776 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    18ec:	2404      	movs	r4, #4
			while (flush_length) {
    18ee:	465b      	mov	r3, fp
    18f0:	465d      	mov	r5, fp
    18f2:	2b00      	cmp	r3, #0
    18f4:	d119      	bne.n	192a <spi_write_buffer_wait+0x1d2>
    18f6:	e73e      	b.n	1776 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    18f8:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    18fa:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    18fc:	7e0b      	ldrb	r3, [r1, #24]
    18fe:	4213      	tst	r3, r2
    1900:	d0fc      	beq.n	18fc <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    1902:	2300      	movs	r3, #0
    1904:	e737      	b.n	1776 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1906:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    1908:	4223      	tst	r3, r4
    190a:	d022      	beq.n	1952 <spi_write_buffer_wait+0x1fa>
    190c:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    190e:	4223      	tst	r3, r4
    1910:	d007      	beq.n	1922 <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1912:	8b4b      	ldrh	r3, [r1, #26]
    1914:	4223      	tst	r3, r4
    1916:	d000      	beq.n	191a <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1918:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    191a:	7983      	ldrb	r3, [r0, #6]
    191c:	2b01      	cmp	r3, #1
    191e:	d010      	beq.n	1942 <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1920:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    1922:	3d01      	subs	r5, #1
    1924:	b2ad      	uxth	r5, r5
			while (flush_length) {
    1926:	2d00      	cmp	r5, #0
    1928:	d015      	beq.n	1956 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    192a:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    192c:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    192e:	4223      	tst	r3, r4
    1930:	d1e9      	bne.n	1906 <spi_write_buffer_wait+0x1ae>
    1932:	4b0b      	ldr	r3, [pc, #44]	; (1960 <spi_write_buffer_wait+0x208>)
    1934:	7e0a      	ldrb	r2, [r1, #24]
    1936:	4222      	tst	r2, r4
    1938:	d1e5      	bne.n	1906 <spi_write_buffer_wait+0x1ae>
    193a:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    193c:	2b00      	cmp	r3, #0
    193e:	d1f9      	bne.n	1934 <spi_write_buffer_wait+0x1dc>
    1940:	e7e1      	b.n	1906 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1942:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1944:	e7ed      	b.n	1922 <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    1946:	2312      	movs	r3, #18
    1948:	e715      	b.n	1776 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    194a:	2312      	movs	r3, #18
    194c:	e713      	b.n	1776 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    194e:	2300      	movs	r3, #0
    1950:	e711      	b.n	1776 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    1952:	2312      	movs	r3, #18
    1954:	e70f      	b.n	1776 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    1956:	2300      	movs	r3, #0
    1958:	e70d      	b.n	1776 <spi_write_buffer_wait+0x1e>
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	0000ffff 	.word	0x0000ffff
    1960:	00002710 	.word	0x00002710
    1964:	00002711 	.word	0x00002711

00001968 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    196a:	0080      	lsls	r0, r0, #2
    196c:	4b85      	ldr	r3, [pc, #532]	; (1b84 <_spi_interrupt_handler+0x21c>)
    196e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1970:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1972:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1974:	5ce3      	ldrb	r3, [r4, r3]
    1976:	2236      	movs	r2, #54	; 0x36
    1978:	5ca7      	ldrb	r7, [r4, r2]
    197a:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    197c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    197e:	7db5      	ldrb	r5, [r6, #22]
    1980:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1982:	07eb      	lsls	r3, r5, #31
    1984:	d52e      	bpl.n	19e4 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1986:	7963      	ldrb	r3, [r4, #5]
    1988:	2b01      	cmp	r3, #1
    198a:	d025      	beq.n	19d8 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    198c:	2b00      	cmp	r3, #0
    198e:	d129      	bne.n	19e4 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    1990:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1992:	2b00      	cmp	r3, #0
    1994:	d026      	beq.n	19e4 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1996:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1998:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    199a:	7813      	ldrb	r3, [r2, #0]
    199c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    199e:	1c50      	adds	r0, r2, #1
    19a0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    19a2:	79a0      	ldrb	r0, [r4, #6]
    19a4:	2801      	cmp	r0, #1
    19a6:	d100      	bne.n	19aa <_spi_interrupt_handler+0x42>
    19a8:	e069      	b.n	1a7e <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    19aa:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    19ac:	05db      	lsls	r3, r3, #23
    19ae:	0ddb      	lsrs	r3, r3, #23
    19b0:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    19b2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    19b4:	3b01      	subs	r3, #1
    19b6:	b29b      	uxth	r3, r3
    19b8:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    19ba:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    19bc:	b29b      	uxth	r3, r3
    19be:	2b00      	cmp	r3, #0
    19c0:	d110      	bne.n	19e4 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    19c2:	3301      	adds	r3, #1
    19c4:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    19c6:	7a63      	ldrb	r3, [r4, #9]
    19c8:	2b01      	cmp	r3, #1
    19ca:	d10b      	bne.n	19e4 <_spi_interrupt_handler+0x7c>
    19cc:	79e3      	ldrb	r3, [r4, #7]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d108      	bne.n	19e4 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    19d2:	3302      	adds	r3, #2
    19d4:	75b3      	strb	r3, [r6, #22]
    19d6:	e005      	b.n	19e4 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    19d8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    19da:	2b00      	cmp	r3, #0
    19dc:	d03e      	beq.n	1a5c <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    19de:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    19e0:	2b00      	cmp	r3, #0
    19e2:	d1d8      	bne.n	1996 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    19e4:	076b      	lsls	r3, r5, #29
    19e6:	d511      	bpl.n	1a0c <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    19e8:	8b73      	ldrh	r3, [r6, #26]
    19ea:	075b      	lsls	r3, r3, #29
    19ec:	d551      	bpl.n	1a92 <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    19ee:	7a63      	ldrb	r3, [r4, #9]
    19f0:	2b01      	cmp	r3, #1
    19f2:	d008      	beq.n	1a06 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    19f4:	221e      	movs	r2, #30
    19f6:	2338      	movs	r3, #56	; 0x38
    19f8:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    19fa:	3b35      	subs	r3, #53	; 0x35
    19fc:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    19fe:	3302      	adds	r3, #2
    1a00:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1a02:	073b      	lsls	r3, r7, #28
    1a04:	d441      	bmi.n	1a8a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1a06:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1a08:	2304      	movs	r3, #4
    1a0a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1a0c:	07ab      	lsls	r3, r5, #30
    1a0e:	d515      	bpl.n	1a3c <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1a10:	7963      	ldrb	r3, [r4, #5]
    1a12:	2b00      	cmp	r3, #0
    1a14:	d10e      	bne.n	1a34 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1a16:	3307      	adds	r3, #7
    1a18:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1a1a:	3b05      	subs	r3, #5
    1a1c:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1a1e:	3301      	adds	r3, #1
    1a20:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    1a22:	2300      	movs	r3, #0
    1a24:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1a26:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1a28:	3338      	adds	r3, #56	; 0x38
    1a2a:	2200      	movs	r2, #0
    1a2c:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1a2e:	06fb      	lsls	r3, r7, #27
    1a30:	d500      	bpl.n	1a34 <_spi_interrupt_handler+0xcc>
    1a32:	e07f      	b.n	1b34 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1a34:	7963      	ldrb	r3, [r4, #5]
    1a36:	2b01      	cmp	r3, #1
    1a38:	d100      	bne.n	1a3c <_spi_interrupt_handler+0xd4>
    1a3a:	e07f      	b.n	1b3c <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1a3c:	072b      	lsls	r3, r5, #28
    1a3e:	d508      	bpl.n	1a52 <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    1a40:	7963      	ldrb	r3, [r4, #5]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d105      	bne.n	1a52 <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1a46:	3308      	adds	r3, #8
    1a48:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1a4a:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1a4c:	06bb      	lsls	r3, r7, #26
    1a4e:	d500      	bpl.n	1a52 <_spi_interrupt_handler+0xea>
    1a50:	e08a      	b.n	1b68 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1a52:	b26d      	sxtb	r5, r5
    1a54:	2d00      	cmp	r5, #0
    1a56:	da00      	bge.n	1a5a <_spi_interrupt_handler+0xf2>
    1a58:	e08a      	b.n	1b70 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    1a5c:	4b4a      	ldr	r3, [pc, #296]	; (1b88 <_spi_interrupt_handler+0x220>)
    1a5e:	881b      	ldrh	r3, [r3, #0]
    1a60:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1a62:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1a64:	3b01      	subs	r3, #1
    1a66:	b29b      	uxth	r3, r3
    1a68:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1a6a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1a6c:	b29b      	uxth	r3, r3
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d101      	bne.n	1a76 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1a72:	3301      	adds	r3, #1
    1a74:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1a76:	7963      	ldrb	r3, [r4, #5]
		if (0
    1a78:	2b01      	cmp	r3, #1
    1a7a:	d0b0      	beq.n	19de <_spi_interrupt_handler+0x76>
    1a7c:	e786      	b.n	198c <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1a7e:	7850      	ldrb	r0, [r2, #1]
    1a80:	0200      	lsls	r0, r0, #8
    1a82:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1a84:	3202      	adds	r2, #2
    1a86:	62e2      	str	r2, [r4, #44]	; 0x2c
    1a88:	e790      	b.n	19ac <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1a8a:	0020      	movs	r0, r4
    1a8c:	69a3      	ldr	r3, [r4, #24]
    1a8e:	4798      	blx	r3
    1a90:	e7b9      	b.n	1a06 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1a92:	7a63      	ldrb	r3, [r4, #9]
    1a94:	2b01      	cmp	r3, #1
    1a96:	d027      	beq.n	1ae8 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1a98:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a9c:	05db      	lsls	r3, r3, #23
    1a9e:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1aa0:	b2da      	uxtb	r2, r3
    1aa2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1aa4:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1aa6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1aa8:	1c51      	adds	r1, r2, #1
    1aaa:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1aac:	79a1      	ldrb	r1, [r4, #6]
    1aae:	2901      	cmp	r1, #1
    1ab0:	d033      	beq.n	1b1a <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    1ab2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1ab4:	3b01      	subs	r3, #1
    1ab6:	b29b      	uxth	r3, r3
    1ab8:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1aba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1abc:	b29b      	uxth	r3, r3
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d1a4      	bne.n	1a0c <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    1ac2:	2200      	movs	r2, #0
    1ac4:	3338      	adds	r3, #56	; 0x38
    1ac6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1ac8:	3b34      	subs	r3, #52	; 0x34
    1aca:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1acc:	7a63      	ldrb	r3, [r4, #9]
    1ace:	2b02      	cmp	r3, #2
    1ad0:	d029      	beq.n	1b26 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1ad2:	7a63      	ldrb	r3, [r4, #9]
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d000      	beq.n	1ada <_spi_interrupt_handler+0x172>
    1ad8:	e798      	b.n	1a0c <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1ada:	07bb      	lsls	r3, r7, #30
    1adc:	d400      	bmi.n	1ae0 <_spi_interrupt_handler+0x178>
    1ade:	e795      	b.n	1a0c <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1ae0:	0020      	movs	r0, r4
    1ae2:	6923      	ldr	r3, [r4, #16]
    1ae4:	4798      	blx	r3
    1ae6:	e791      	b.n	1a0c <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1ae8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1aec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1aee:	3b01      	subs	r3, #1
    1af0:	b29b      	uxth	r3, r3
    1af2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1af4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1af6:	b29b      	uxth	r3, r3
    1af8:	2b00      	cmp	r3, #0
    1afa:	d000      	beq.n	1afe <_spi_interrupt_handler+0x196>
    1afc:	e786      	b.n	1a0c <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1afe:	3304      	adds	r3, #4
    1b00:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1b02:	2200      	movs	r2, #0
    1b04:	3334      	adds	r3, #52	; 0x34
    1b06:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1b08:	3b35      	subs	r3, #53	; 0x35
    1b0a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1b0c:	07fb      	lsls	r3, r7, #31
    1b0e:	d400      	bmi.n	1b12 <_spi_interrupt_handler+0x1aa>
    1b10:	e77c      	b.n	1a0c <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1b12:	0020      	movs	r0, r4
    1b14:	68e3      	ldr	r3, [r4, #12]
    1b16:	4798      	blx	r3
    1b18:	e778      	b.n	1a0c <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1b1a:	0a1b      	lsrs	r3, r3, #8
    1b1c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1b1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1b20:	3301      	adds	r3, #1
    1b22:	62a3      	str	r3, [r4, #40]	; 0x28
    1b24:	e7c5      	b.n	1ab2 <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1b26:	077b      	lsls	r3, r7, #29
    1b28:	d400      	bmi.n	1b2c <_spi_interrupt_handler+0x1c4>
    1b2a:	e76f      	b.n	1a0c <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1b2c:	0020      	movs	r0, r4
    1b2e:	6963      	ldr	r3, [r4, #20]
    1b30:	4798      	blx	r3
    1b32:	e76b      	b.n	1a0c <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1b34:	0020      	movs	r0, r4
    1b36:	69e3      	ldr	r3, [r4, #28]
    1b38:	4798      	blx	r3
    1b3a:	e77b      	b.n	1a34 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1b3c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1b3e:	2b01      	cmp	r3, #1
    1b40:	d000      	beq.n	1b44 <_spi_interrupt_handler+0x1dc>
    1b42:	e786      	b.n	1a52 <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1b44:	79e3      	ldrb	r3, [r4, #7]
    1b46:	2b00      	cmp	r3, #0
    1b48:	d000      	beq.n	1b4c <_spi_interrupt_handler+0x1e4>
    1b4a:	e782      	b.n	1a52 <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1b4c:	3302      	adds	r3, #2
    1b4e:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1b50:	3301      	adds	r3, #1
    1b52:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1b54:	2200      	movs	r2, #0
    1b56:	3335      	adds	r3, #53	; 0x35
    1b58:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1b5a:	07fb      	lsls	r3, r7, #31
    1b5c:	d400      	bmi.n	1b60 <_spi_interrupt_handler+0x1f8>
    1b5e:	e76d      	b.n	1a3c <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1b60:	0020      	movs	r0, r4
    1b62:	68e3      	ldr	r3, [r4, #12]
    1b64:	4798      	blx	r3
    1b66:	e769      	b.n	1a3c <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1b68:	0020      	movs	r0, r4
    1b6a:	6a23      	ldr	r3, [r4, #32]
    1b6c:	4798      	blx	r3
    1b6e:	e770      	b.n	1a52 <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1b70:	2380      	movs	r3, #128	; 0x80
    1b72:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1b74:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1b76:	067b      	lsls	r3, r7, #25
    1b78:	d400      	bmi.n	1b7c <_spi_interrupt_handler+0x214>
    1b7a:	e76e      	b.n	1a5a <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1b7e:	0020      	movs	r0, r4
    1b80:	4798      	blx	r3
}
    1b82:	e76a      	b.n	1a5a <_spi_interrupt_handler+0xf2>
    1b84:	2000042c 	.word	0x2000042c
    1b88:	20000428 	.word	0x20000428

00001b8c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1b8c:	4770      	bx	lr
	...

00001b90 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1b90:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1b92:	4b0b      	ldr	r3, [pc, #44]	; (1bc0 <_sercom_set_handler+0x30>)
    1b94:	781b      	ldrb	r3, [r3, #0]
    1b96:	2b00      	cmp	r3, #0
    1b98:	d10e      	bne.n	1bb8 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1b9a:	4c0a      	ldr	r4, [pc, #40]	; (1bc4 <_sercom_set_handler+0x34>)
    1b9c:	4d0a      	ldr	r5, [pc, #40]	; (1bc8 <_sercom_set_handler+0x38>)
    1b9e:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    1ba0:	4b0a      	ldr	r3, [pc, #40]	; (1bcc <_sercom_set_handler+0x3c>)
    1ba2:	2200      	movs	r2, #0
    1ba4:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ba6:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    1ba8:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1baa:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    1bac:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1bae:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
    1bb0:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
    1bb2:	3201      	adds	r2, #1
    1bb4:	4b02      	ldr	r3, [pc, #8]	; (1bc0 <_sercom_set_handler+0x30>)
    1bb6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1bb8:	0080      	lsls	r0, r0, #2
    1bba:	4b02      	ldr	r3, [pc, #8]	; (1bc4 <_sercom_set_handler+0x34>)
    1bbc:	50c1      	str	r1, [r0, r3]
}
    1bbe:	bd30      	pop	{r4, r5, pc}
    1bc0:	2000013e 	.word	0x2000013e
    1bc4:	20000140 	.word	0x20000140
    1bc8:	00001b8d 	.word	0x00001b8d
    1bcc:	2000042c 	.word	0x2000042c

00001bd0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1bd0:	b510      	push	{r4, lr}
    1bd2:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1bd4:	ac01      	add	r4, sp, #4
    1bd6:	2309      	movs	r3, #9
    1bd8:	7023      	strb	r3, [r4, #0]
    1bda:	3301      	adds	r3, #1
    1bdc:	7063      	strb	r3, [r4, #1]
    1bde:	3301      	adds	r3, #1
    1be0:	70a3      	strb	r3, [r4, #2]
    1be2:	3301      	adds	r3, #1
    1be4:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1be6:	4b02      	ldr	r3, [pc, #8]	; (1bf0 <_sercom_get_interrupt_vector+0x20>)
    1be8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1bea:	5620      	ldrsb	r0, [r4, r0]
}
    1bec:	b002      	add	sp, #8
    1bee:	bd10      	pop	{r4, pc}
    1bf0:	00000a89 	.word	0x00000a89

00001bf4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1bf4:	b510      	push	{r4, lr}
    1bf6:	4b02      	ldr	r3, [pc, #8]	; (1c00 <SERCOM0_Handler+0xc>)
    1bf8:	681b      	ldr	r3, [r3, #0]
    1bfa:	2000      	movs	r0, #0
    1bfc:	4798      	blx	r3
    1bfe:	bd10      	pop	{r4, pc}
    1c00:	20000140 	.word	0x20000140

00001c04 <SERCOM1_Handler>:
    1c04:	b510      	push	{r4, lr}
    1c06:	4b02      	ldr	r3, [pc, #8]	; (1c10 <SERCOM1_Handler+0xc>)
    1c08:	685b      	ldr	r3, [r3, #4]
    1c0a:	2001      	movs	r0, #1
    1c0c:	4798      	blx	r3
    1c0e:	bd10      	pop	{r4, pc}
    1c10:	20000140 	.word	0x20000140

00001c14 <SERCOM2_Handler>:
    1c14:	b510      	push	{r4, lr}
    1c16:	4b02      	ldr	r3, [pc, #8]	; (1c20 <SERCOM2_Handler+0xc>)
    1c18:	689b      	ldr	r3, [r3, #8]
    1c1a:	2002      	movs	r0, #2
    1c1c:	4798      	blx	r3
    1c1e:	bd10      	pop	{r4, pc}
    1c20:	20000140 	.word	0x20000140

00001c24 <SERCOM3_Handler>:
    1c24:	b510      	push	{r4, lr}
    1c26:	4b02      	ldr	r3, [pc, #8]	; (1c30 <SERCOM3_Handler+0xc>)
    1c28:	68db      	ldr	r3, [r3, #12]
    1c2a:	2003      	movs	r0, #3
    1c2c:	4798      	blx	r3
    1c2e:	bd10      	pop	{r4, pc}
    1c30:	20000140 	.word	0x20000140

00001c34 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1c34:	4770      	bx	lr
	...

00001c38 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1c38:	4b0c      	ldr	r3, [pc, #48]	; (1c6c <cpu_irq_enter_critical+0x34>)
    1c3a:	681b      	ldr	r3, [r3, #0]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d106      	bne.n	1c4e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c40:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1c44:	2b00      	cmp	r3, #0
    1c46:	d007      	beq.n	1c58 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1c48:	2200      	movs	r2, #0
    1c4a:	4b09      	ldr	r3, [pc, #36]	; (1c70 <cpu_irq_enter_critical+0x38>)
    1c4c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1c4e:	4a07      	ldr	r2, [pc, #28]	; (1c6c <cpu_irq_enter_critical+0x34>)
    1c50:	6813      	ldr	r3, [r2, #0]
    1c52:	3301      	adds	r3, #1
    1c54:	6013      	str	r3, [r2, #0]
}
    1c56:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1c58:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1c5a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1c5e:	2200      	movs	r2, #0
    1c60:	4b04      	ldr	r3, [pc, #16]	; (1c74 <cpu_irq_enter_critical+0x3c>)
    1c62:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1c64:	3201      	adds	r2, #1
    1c66:	4b02      	ldr	r3, [pc, #8]	; (1c70 <cpu_irq_enter_critical+0x38>)
    1c68:	701a      	strb	r2, [r3, #0]
    1c6a:	e7f0      	b.n	1c4e <cpu_irq_enter_critical+0x16>
    1c6c:	20000150 	.word	0x20000150
    1c70:	20000154 	.word	0x20000154
    1c74:	2000001c 	.word	0x2000001c

00001c78 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1c78:	4b08      	ldr	r3, [pc, #32]	; (1c9c <cpu_irq_leave_critical+0x24>)
    1c7a:	681a      	ldr	r2, [r3, #0]
    1c7c:	3a01      	subs	r2, #1
    1c7e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1c80:	681b      	ldr	r3, [r3, #0]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d109      	bne.n	1c9a <cpu_irq_leave_critical+0x22>
    1c86:	4b06      	ldr	r3, [pc, #24]	; (1ca0 <cpu_irq_leave_critical+0x28>)
    1c88:	781b      	ldrb	r3, [r3, #0]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d005      	beq.n	1c9a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1c8e:	2201      	movs	r2, #1
    1c90:	4b04      	ldr	r3, [pc, #16]	; (1ca4 <cpu_irq_leave_critical+0x2c>)
    1c92:	701a      	strb	r2, [r3, #0]
    1c94:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c98:	b662      	cpsie	i
	}
}
    1c9a:	4770      	bx	lr
    1c9c:	20000150 	.word	0x20000150
    1ca0:	20000154 	.word	0x20000154
    1ca4:	2000001c 	.word	0x2000001c

00001ca8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1ca8:	b510      	push	{r4, lr}
	switch (clock_source) {
    1caa:	2808      	cmp	r0, #8
    1cac:	d803      	bhi.n	1cb6 <system_clock_source_get_hz+0xe>
    1cae:	0080      	lsls	r0, r0, #2
    1cb0:	4b1b      	ldr	r3, [pc, #108]	; (1d20 <system_clock_source_get_hz+0x78>)
    1cb2:	581b      	ldr	r3, [r3, r0]
    1cb4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1cb6:	2000      	movs	r0, #0
    1cb8:	e030      	b.n	1d1c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1cba:	4b1a      	ldr	r3, [pc, #104]	; (1d24 <system_clock_source_get_hz+0x7c>)
    1cbc:	6918      	ldr	r0, [r3, #16]
    1cbe:	e02d      	b.n	1d1c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1cc0:	4b19      	ldr	r3, [pc, #100]	; (1d28 <system_clock_source_get_hz+0x80>)
    1cc2:	6a1b      	ldr	r3, [r3, #32]
    1cc4:	059b      	lsls	r3, r3, #22
    1cc6:	0f9b      	lsrs	r3, r3, #30
    1cc8:	4818      	ldr	r0, [pc, #96]	; (1d2c <system_clock_source_get_hz+0x84>)
    1cca:	40d8      	lsrs	r0, r3
    1ccc:	e026      	b.n	1d1c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1cce:	4b15      	ldr	r3, [pc, #84]	; (1d24 <system_clock_source_get_hz+0x7c>)
    1cd0:	6958      	ldr	r0, [r3, #20]
    1cd2:	e023      	b.n	1d1c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1cd4:	4b13      	ldr	r3, [pc, #76]	; (1d24 <system_clock_source_get_hz+0x7c>)
    1cd6:	681b      	ldr	r3, [r3, #0]
			return 0;
    1cd8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1cda:	079b      	lsls	r3, r3, #30
    1cdc:	d51e      	bpl.n	1d1c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1cde:	4912      	ldr	r1, [pc, #72]	; (1d28 <system_clock_source_get_hz+0x80>)
    1ce0:	2210      	movs	r2, #16
    1ce2:	68cb      	ldr	r3, [r1, #12]
    1ce4:	421a      	tst	r2, r3
    1ce6:	d0fc      	beq.n	1ce2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1ce8:	4b0e      	ldr	r3, [pc, #56]	; (1d24 <system_clock_source_get_hz+0x7c>)
    1cea:	681b      	ldr	r3, [r3, #0]
    1cec:	075b      	lsls	r3, r3, #29
    1cee:	d401      	bmi.n	1cf4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1cf0:	480f      	ldr	r0, [pc, #60]	; (1d30 <system_clock_source_get_hz+0x88>)
    1cf2:	e013      	b.n	1d1c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1cf4:	2000      	movs	r0, #0
    1cf6:	4b0f      	ldr	r3, [pc, #60]	; (1d34 <system_clock_source_get_hz+0x8c>)
    1cf8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1cfa:	4b0a      	ldr	r3, [pc, #40]	; (1d24 <system_clock_source_get_hz+0x7c>)
    1cfc:	689b      	ldr	r3, [r3, #8]
    1cfe:	041b      	lsls	r3, r3, #16
    1d00:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d02:	4358      	muls	r0, r3
    1d04:	e00a      	b.n	1d1c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d06:	2350      	movs	r3, #80	; 0x50
    1d08:	4a07      	ldr	r2, [pc, #28]	; (1d28 <system_clock_source_get_hz+0x80>)
    1d0a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1d0c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d0e:	075b      	lsls	r3, r3, #29
    1d10:	d504      	bpl.n	1d1c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1d12:	4b04      	ldr	r3, [pc, #16]	; (1d24 <system_clock_source_get_hz+0x7c>)
    1d14:	68d8      	ldr	r0, [r3, #12]
    1d16:	e001      	b.n	1d1c <system_clock_source_get_hz+0x74>
		return 32768UL;
    1d18:	2080      	movs	r0, #128	; 0x80
    1d1a:	0200      	lsls	r0, r0, #8
	}
}
    1d1c:	bd10      	pop	{r4, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	00002fbc 	.word	0x00002fbc
    1d24:	20000158 	.word	0x20000158
    1d28:	40000800 	.word	0x40000800
    1d2c:	007a1200 	.word	0x007a1200
    1d30:	02dc6c00 	.word	0x02dc6c00
    1d34:	00002359 	.word	0x00002359

00001d38 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1d38:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1d3a:	490c      	ldr	r1, [pc, #48]	; (1d6c <system_clock_source_osc8m_set_config+0x34>)
    1d3c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1d3e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1d40:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1d42:	7840      	ldrb	r0, [r0, #1]
    1d44:	2201      	movs	r2, #1
    1d46:	4010      	ands	r0, r2
    1d48:	0180      	lsls	r0, r0, #6
    1d4a:	2640      	movs	r6, #64	; 0x40
    1d4c:	43b3      	bics	r3, r6
    1d4e:	4303      	orrs	r3, r0
    1d50:	402a      	ands	r2, r5
    1d52:	01d2      	lsls	r2, r2, #7
    1d54:	2080      	movs	r0, #128	; 0x80
    1d56:	4383      	bics	r3, r0
    1d58:	4313      	orrs	r3, r2
    1d5a:	2203      	movs	r2, #3
    1d5c:	4022      	ands	r2, r4
    1d5e:	0212      	lsls	r2, r2, #8
    1d60:	4803      	ldr	r0, [pc, #12]	; (1d70 <system_clock_source_osc8m_set_config+0x38>)
    1d62:	4003      	ands	r3, r0
    1d64:	4313      	orrs	r3, r2
    1d66:	620b      	str	r3, [r1, #32]
}
    1d68:	bd70      	pop	{r4, r5, r6, pc}
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	40000800 	.word	0x40000800
    1d70:	fffffcff 	.word	0xfffffcff

00001d74 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d76:	46de      	mov	lr, fp
    1d78:	4657      	mov	r7, sl
    1d7a:	464e      	mov	r6, r9
    1d7c:	4645      	mov	r5, r8
    1d7e:	b5e0      	push	{r5, r6, r7, lr}
    1d80:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1d82:	4b26      	ldr	r3, [pc, #152]	; (1e1c <system_clock_source_xosc32k_set_config+0xa8>)
    1d84:	469b      	mov	fp, r3
    1d86:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1d88:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1d8a:	7800      	ldrb	r0, [r0, #0]
    1d8c:	4242      	negs	r2, r0
    1d8e:	4142      	adcs	r2, r0
    1d90:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1d92:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1d94:	78ca      	ldrb	r2, [r1, #3]
    1d96:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1d98:	790a      	ldrb	r2, [r1, #4]
    1d9a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1d9c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1d9e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1da0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1da2:	688a      	ldr	r2, [r1, #8]
    1da4:	491e      	ldr	r1, [pc, #120]	; (1e20 <system_clock_source_xosc32k_set_config+0xac>)
    1da6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1da8:	2101      	movs	r1, #1
    1daa:	464a      	mov	r2, r9
    1dac:	0092      	lsls	r2, r2, #2
    1dae:	4691      	mov	r9, r2
    1db0:	2204      	movs	r2, #4
    1db2:	4393      	bics	r3, r2
    1db4:	464a      	mov	r2, r9
    1db6:	4313      	orrs	r3, r2
    1db8:	4642      	mov	r2, r8
    1dba:	400a      	ands	r2, r1
    1dbc:	00d2      	lsls	r2, r2, #3
    1dbe:	4690      	mov	r8, r2
    1dc0:	2208      	movs	r2, #8
    1dc2:	4393      	bics	r3, r2
    1dc4:	4642      	mov	r2, r8
    1dc6:	4313      	orrs	r3, r2
    1dc8:	4662      	mov	r2, ip
    1dca:	400a      	ands	r2, r1
    1dcc:	0112      	lsls	r2, r2, #4
    1dce:	4694      	mov	ip, r2
    1dd0:	2210      	movs	r2, #16
    1dd2:	4393      	bics	r3, r2
    1dd4:	4662      	mov	r2, ip
    1dd6:	4313      	orrs	r3, r2
    1dd8:	4008      	ands	r0, r1
    1dda:	0140      	lsls	r0, r0, #5
    1ddc:	2220      	movs	r2, #32
    1dde:	4393      	bics	r3, r2
    1de0:	4303      	orrs	r3, r0
    1de2:	400f      	ands	r7, r1
    1de4:	01bf      	lsls	r7, r7, #6
    1de6:	2040      	movs	r0, #64	; 0x40
    1de8:	4383      	bics	r3, r0
    1dea:	433b      	orrs	r3, r7
    1dec:	400e      	ands	r6, r1
    1dee:	01f6      	lsls	r6, r6, #7
    1df0:	3040      	adds	r0, #64	; 0x40
    1df2:	4383      	bics	r3, r0
    1df4:	4333      	orrs	r3, r6
    1df6:	3879      	subs	r0, #121	; 0x79
    1df8:	4005      	ands	r5, r0
    1dfa:	022d      	lsls	r5, r5, #8
    1dfc:	4809      	ldr	r0, [pc, #36]	; (1e24 <system_clock_source_xosc32k_set_config+0xb0>)
    1dfe:	4003      	ands	r3, r0
    1e00:	432b      	orrs	r3, r5
    1e02:	4021      	ands	r1, r4
    1e04:	0309      	lsls	r1, r1, #12
    1e06:	4808      	ldr	r0, [pc, #32]	; (1e28 <system_clock_source_xosc32k_set_config+0xb4>)
    1e08:	4003      	ands	r3, r0
    1e0a:	430b      	orrs	r3, r1
    1e0c:	465a      	mov	r2, fp
    1e0e:	8293      	strh	r3, [r2, #20]
}
    1e10:	bc3c      	pop	{r2, r3, r4, r5}
    1e12:	4690      	mov	r8, r2
    1e14:	4699      	mov	r9, r3
    1e16:	46a2      	mov	sl, r4
    1e18:	46ab      	mov	fp, r5
    1e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e1c:	40000800 	.word	0x40000800
    1e20:	20000158 	.word	0x20000158
    1e24:	fffff8ff 	.word	0xfffff8ff
    1e28:	ffffefff 	.word	0xffffefff

00001e2c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    1e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e2e:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    1e30:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    1e32:	7d03      	ldrb	r3, [r0, #20]
    1e34:	2b01      	cmp	r3, #1
    1e36:	d03b      	beq.n	1eb0 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    1e38:	68ab      	ldr	r3, [r5, #8]
    1e3a:	0118      	lsls	r0, r3, #4
    1e3c:	0021      	movs	r1, r4
    1e3e:	4b20      	ldr	r3, [pc, #128]	; (1ec0 <system_clock_source_dpll_set_config+0x94>)
    1e40:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    1e42:	220f      	movs	r2, #15
    1e44:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    1e46:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    1e48:	782e      	ldrb	r6, [r5, #0]
    1e4a:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    1e4c:	7869      	ldrb	r1, [r5, #1]
    1e4e:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    1e50:	430e      	orrs	r6, r1
    1e52:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
    1e54:	491b      	ldr	r1, [pc, #108]	; (1ec4 <system_clock_source_dpll_set_config+0x98>)
    1e56:	2744      	movs	r7, #68	; 0x44
    1e58:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1e5a:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    1e5c:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    1e5e:	051b      	lsls	r3, r3, #20
    1e60:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1e62:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
    1e64:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    1e66:	78ab      	ldrb	r3, [r5, #2]
    1e68:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    1e6a:	78ee      	ldrb	r6, [r5, #3]
    1e6c:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1e6e:	4333      	orrs	r3, r6
    1e70:	792e      	ldrb	r6, [r5, #4]
    1e72:	00b6      	lsls	r6, r6, #2
    1e74:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    1e76:	7caf      	ldrb	r7, [r5, #18]
    1e78:	2603      	movs	r6, #3
    1e7a:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1e7c:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    1e7e:	8a2e      	ldrh	r6, [r5, #16]
    1e80:	0436      	lsls	r6, r6, #16
    1e82:	4f11      	ldr	r7, [pc, #68]	; (1ec8 <system_clock_source_dpll_set_config+0x9c>)
    1e84:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1e86:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1e88:	7cee      	ldrb	r6, [r5, #19]
    1e8a:	0236      	lsls	r6, r6, #8
    1e8c:	27e0      	movs	r7, #224	; 0xe0
    1e8e:	00ff      	lsls	r7, r7, #3
    1e90:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1e92:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1e94:	7d2e      	ldrb	r6, [r5, #20]
    1e96:	0136      	lsls	r6, r6, #4
    1e98:	2530      	movs	r5, #48	; 0x30
    1e9a:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1e9c:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
    1e9e:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    1ea0:	230f      	movs	r3, #15
    1ea2:	4398      	bics	r0, r3
    1ea4:	1880      	adds	r0, r0, r2
    1ea6:	4344      	muls	r4, r0
    1ea8:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
    1eaa:	4b08      	ldr	r3, [pc, #32]	; (1ecc <system_clock_source_dpll_set_config+0xa0>)
    1eac:	60dc      	str	r4, [r3, #12]
}
    1eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    1eb0:	8a01      	ldrh	r1, [r0, #16]
    1eb2:	3101      	adds	r1, #1
    1eb4:	0049      	lsls	r1, r1, #1
    1eb6:	0020      	movs	r0, r4
    1eb8:	4b01      	ldr	r3, [pc, #4]	; (1ec0 <system_clock_source_dpll_set_config+0x94>)
    1eba:	4798      	blx	r3
    1ebc:	0004      	movs	r4, r0
    1ebe:	e7bb      	b.n	1e38 <system_clock_source_dpll_set_config+0xc>
    1ec0:	00002bf5 	.word	0x00002bf5
    1ec4:	40000800 	.word	0x40000800
    1ec8:	07ff0000 	.word	0x07ff0000
    1ecc:	20000158 	.word	0x20000158

00001ed0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1ed0:	2808      	cmp	r0, #8
    1ed2:	d803      	bhi.n	1edc <system_clock_source_enable+0xc>
    1ed4:	0080      	lsls	r0, r0, #2
    1ed6:	4b25      	ldr	r3, [pc, #148]	; (1f6c <system_clock_source_enable+0x9c>)
    1ed8:	581b      	ldr	r3, [r3, r0]
    1eda:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1edc:	2017      	movs	r0, #23
    1ede:	e044      	b.n	1f6a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1ee0:	4a23      	ldr	r2, [pc, #140]	; (1f70 <system_clock_source_enable+0xa0>)
    1ee2:	6a13      	ldr	r3, [r2, #32]
    1ee4:	2102      	movs	r1, #2
    1ee6:	430b      	orrs	r3, r1
    1ee8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1eea:	2000      	movs	r0, #0
    1eec:	e03d      	b.n	1f6a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1eee:	4a20      	ldr	r2, [pc, #128]	; (1f70 <system_clock_source_enable+0xa0>)
    1ef0:	6993      	ldr	r3, [r2, #24]
    1ef2:	2102      	movs	r1, #2
    1ef4:	430b      	orrs	r3, r1
    1ef6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1ef8:	2000      	movs	r0, #0
		break;
    1efa:	e036      	b.n	1f6a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1efc:	4a1c      	ldr	r2, [pc, #112]	; (1f70 <system_clock_source_enable+0xa0>)
    1efe:	8a13      	ldrh	r3, [r2, #16]
    1f00:	2102      	movs	r1, #2
    1f02:	430b      	orrs	r3, r1
    1f04:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1f06:	2000      	movs	r0, #0
		break;
    1f08:	e02f      	b.n	1f6a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1f0a:	4a19      	ldr	r2, [pc, #100]	; (1f70 <system_clock_source_enable+0xa0>)
    1f0c:	8a93      	ldrh	r3, [r2, #20]
    1f0e:	2102      	movs	r1, #2
    1f10:	430b      	orrs	r3, r1
    1f12:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1f14:	2000      	movs	r0, #0
		break;
    1f16:	e028      	b.n	1f6a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1f18:	4916      	ldr	r1, [pc, #88]	; (1f74 <system_clock_source_enable+0xa4>)
    1f1a:	680b      	ldr	r3, [r1, #0]
    1f1c:	2202      	movs	r2, #2
    1f1e:	4313      	orrs	r3, r2
    1f20:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1f22:	4b13      	ldr	r3, [pc, #76]	; (1f70 <system_clock_source_enable+0xa0>)
    1f24:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f26:	0019      	movs	r1, r3
    1f28:	320e      	adds	r2, #14
    1f2a:	68cb      	ldr	r3, [r1, #12]
    1f2c:	421a      	tst	r2, r3
    1f2e:	d0fc      	beq.n	1f2a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1f30:	4a10      	ldr	r2, [pc, #64]	; (1f74 <system_clock_source_enable+0xa4>)
    1f32:	6891      	ldr	r1, [r2, #8]
    1f34:	4b0e      	ldr	r3, [pc, #56]	; (1f70 <system_clock_source_enable+0xa0>)
    1f36:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1f38:	6852      	ldr	r2, [r2, #4]
    1f3a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1f3c:	2200      	movs	r2, #0
    1f3e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f40:	0019      	movs	r1, r3
    1f42:	3210      	adds	r2, #16
    1f44:	68cb      	ldr	r3, [r1, #12]
    1f46:	421a      	tst	r2, r3
    1f48:	d0fc      	beq.n	1f44 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1f4a:	4b0a      	ldr	r3, [pc, #40]	; (1f74 <system_clock_source_enable+0xa4>)
    1f4c:	681b      	ldr	r3, [r3, #0]
    1f4e:	b29b      	uxth	r3, r3
    1f50:	4a07      	ldr	r2, [pc, #28]	; (1f70 <system_clock_source_enable+0xa0>)
    1f52:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1f54:	2000      	movs	r0, #0
    1f56:	e008      	b.n	1f6a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1f58:	4905      	ldr	r1, [pc, #20]	; (1f70 <system_clock_source_enable+0xa0>)
    1f5a:	2244      	movs	r2, #68	; 0x44
    1f5c:	5c8b      	ldrb	r3, [r1, r2]
    1f5e:	2002      	movs	r0, #2
    1f60:	4303      	orrs	r3, r0
    1f62:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1f64:	2000      	movs	r0, #0
		break;
    1f66:	e000      	b.n	1f6a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1f68:	2000      	movs	r0, #0
}
    1f6a:	4770      	bx	lr
    1f6c:	00002fe0 	.word	0x00002fe0
    1f70:	40000800 	.word	0x40000800
    1f74:	20000158 	.word	0x20000158

00001f78 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7a:	46ce      	mov	lr, r9
    1f7c:	4647      	mov	r7, r8
    1f7e:	b580      	push	{r7, lr}
    1f80:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1f82:	22c2      	movs	r2, #194	; 0xc2
    1f84:	00d2      	lsls	r2, r2, #3
    1f86:	4b53      	ldr	r3, [pc, #332]	; (20d4 <system_clock_init+0x15c>)
    1f88:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1f8a:	4a53      	ldr	r2, [pc, #332]	; (20d8 <system_clock_init+0x160>)
    1f8c:	6853      	ldr	r3, [r2, #4]
    1f8e:	211e      	movs	r1, #30
    1f90:	438b      	bics	r3, r1
    1f92:	391c      	subs	r1, #28
    1f94:	430b      	orrs	r3, r1
    1f96:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_4;
    1f98:	2304      	movs	r3, #4
    1f9a:	466a      	mov	r2, sp
    1f9c:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f9e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1fa0:	4d4e      	ldr	r5, [pc, #312]	; (20dc <system_clock_init+0x164>)
    1fa2:	b2e0      	uxtb	r0, r4
    1fa4:	4669      	mov	r1, sp
    1fa6:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1fa8:	3401      	adds	r4, #1
    1faa:	2c25      	cmp	r4, #37	; 0x25
    1fac:	d1f9      	bne.n	1fa2 <system_clock_init+0x2a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1fae:	a80a      	add	r0, sp, #40	; 0x28
    1fb0:	2300      	movs	r3, #0
    1fb2:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1fb4:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1fb6:	2280      	movs	r2, #128	; 0x80
    1fb8:	0212      	lsls	r2, r2, #8
    1fba:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1fbc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1fbe:	2201      	movs	r2, #1
    1fc0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1fc2:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1fc4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1fc6:	3205      	adds	r2, #5
    1fc8:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1fca:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1fcc:	4b44      	ldr	r3, [pc, #272]	; (20e0 <system_clock_init+0x168>)
    1fce:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1fd0:	2005      	movs	r0, #5
    1fd2:	4b44      	ldr	r3, [pc, #272]	; (20e4 <system_clock_init+0x16c>)
    1fd4:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1fd6:	493f      	ldr	r1, [pc, #252]	; (20d4 <system_clock_init+0x15c>)
    1fd8:	2202      	movs	r2, #2
    1fda:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1fdc:	421a      	tst	r2, r3
    1fde:	d0fc      	beq.n	1fda <system_clock_init+0x62>
	config->run_in_standby  = false;
    1fe0:	a809      	add	r0, sp, #36	; 0x24
    1fe2:	2400      	movs	r4, #0
    1fe4:	7044      	strb	r4, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1fe6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1fe8:	7084      	strb	r4, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1fea:	4b3f      	ldr	r3, [pc, #252]	; (20e8 <system_clock_init+0x170>)
    1fec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1fee:	2006      	movs	r0, #6
    1ff0:	4b3c      	ldr	r3, [pc, #240]	; (20e4 <system_clock_init+0x16c>)
    1ff2:	4699      	mov	r9, r3
    1ff4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1ff6:	4b3d      	ldr	r3, [pc, #244]	; (20ec <system_clock_init+0x174>)
    1ff8:	4798      	blx	r3
	config->high_when_disabled = false;
    1ffa:	466b      	mov	r3, sp
    1ffc:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1ffe:	2306      	movs	r3, #6
    2000:	466a      	mov	r2, sp
    2002:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    2004:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2006:	7254      	strb	r4, [r2, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2008:	2308      	movs	r3, #8
    200a:	4698      	mov	r8, r3
    200c:	9301      	str	r3, [sp, #4]
    200e:	4669      	mov	r1, sp
    2010:	2001      	movs	r0, #1
    2012:	4f37      	ldr	r7, [pc, #220]	; (20f0 <system_clock_init+0x178>)
    2014:	47b8      	blx	r7
    2016:	2001      	movs	r0, #1
    2018:	4e36      	ldr	r6, [pc, #216]	; (20f4 <system_clock_init+0x17c>)
    201a:	47b0      	blx	r6
	config->high_when_disabled = false;
    201c:	466b      	mov	r3, sp
    201e:	705c      	strb	r4, [r3, #1]
	config->output_enable      = false;
    2020:	725c      	strb	r4, [r3, #9]
    2022:	2305      	movs	r3, #5
    2024:	466a      	mov	r2, sp
    2026:	7013      	strb	r3, [r2, #0]
    2028:	331b      	adds	r3, #27
    202a:	9301      	str	r3, [sp, #4]
    202c:	2501      	movs	r5, #1
    202e:	7215      	strb	r5, [r2, #8]
    2030:	4669      	mov	r1, sp
    2032:	2002      	movs	r0, #2
    2034:	47b8      	blx	r7
    2036:	2002      	movs	r0, #2
    2038:	47b0      	blx	r6
	config->division_factor    = 1;
    203a:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    203c:	466b      	mov	r3, sp
    203e:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    2040:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    2042:	725c      	strb	r4, [r3, #9]
    2044:	4642      	mov	r2, r8
    2046:	701a      	strb	r2, [r3, #0]
    2048:	4669      	mov	r1, sp
    204a:	2003      	movs	r0, #3
    204c:	47b8      	blx	r7
    204e:	2003      	movs	r0, #3
    2050:	47b0      	blx	r6
	config->division_factor    = 1;
    2052:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    2054:	466b      	mov	r3, sp
    2056:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    2058:	721c      	strb	r4, [r3, #8]
    205a:	4642      	mov	r2, r8
    205c:	701a      	strb	r2, [r3, #0]
    205e:	725d      	strb	r5, [r3, #9]
    2060:	4669      	mov	r1, sp
    2062:	2006      	movs	r0, #6
    2064:	47b8      	blx	r7
    2066:	2006      	movs	r0, #6
    2068:	47b0      	blx	r6
	config->run_in_standby      = false;
    206a:	a803      	add	r0, sp, #12
    206c:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    206e:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    2070:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    2072:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    2074:	4b20      	ldr	r3, [pc, #128]	; (20f8 <system_clock_init+0x180>)
    2076:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
    2078:	2380      	movs	r3, #128	; 0x80
    207a:	021b      	lsls	r3, r3, #8
    207c:	60c3      	str	r3, [r0, #12]
	config->reference_divider   = 1;
    207e:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    2080:	7504      	strb	r4, [r0, #20]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    2082:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    2084:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    2086:	7004      	strb	r4, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    2088:	4b1c      	ldr	r3, [pc, #112]	; (20fc <system_clock_init+0x184>)
    208a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    208c:	2008      	movs	r0, #8
    208e:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
    2090:	4810      	ldr	r0, [pc, #64]	; (20d4 <system_clock_init+0x15c>)
    2092:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    2094:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
    2096:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    2098:	4013      	ands	r3, r2
    209a:	2b03      	cmp	r3, #3
    209c:	d1fb      	bne.n	2096 <system_clock_init+0x11e>
	PM->CPUSEL.reg = (uint32_t)divider;
    209e:	4a18      	ldr	r2, [pc, #96]	; (2100 <system_clock_init+0x188>)
    20a0:	2300      	movs	r3, #0
    20a2:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    20a4:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    20a6:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    20a8:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    20aa:	2201      	movs	r2, #1
    20ac:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    20ae:	466a      	mov	r2, sp
    20b0:	7053      	strb	r3, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    20b2:	2206      	movs	r2, #6
    20b4:	4669      	mov	r1, sp
    20b6:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    20b8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    20ba:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    20bc:	2000      	movs	r0, #0
    20be:	4b0c      	ldr	r3, [pc, #48]	; (20f0 <system_clock_init+0x178>)
    20c0:	4798      	blx	r3
    20c2:	2000      	movs	r0, #0
    20c4:	4b0b      	ldr	r3, [pc, #44]	; (20f4 <system_clock_init+0x17c>)
    20c6:	4798      	blx	r3
#endif
}
    20c8:	b00f      	add	sp, #60	; 0x3c
    20ca:	bc0c      	pop	{r2, r3}
    20cc:	4690      	mov	r8, r2
    20ce:	4699      	mov	r9, r3
    20d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	40000800 	.word	0x40000800
    20d8:	41004000 	.word	0x41004000
    20dc:	0000233d 	.word	0x0000233d
    20e0:	00001d75 	.word	0x00001d75
    20e4:	00001ed1 	.word	0x00001ed1
    20e8:	00001d39 	.word	0x00001d39
    20ec:	00002105 	.word	0x00002105
    20f0:	00002129 	.word	0x00002129
    20f4:	000021e1 	.word	0x000021e1
    20f8:	02dc6c00 	.word	0x02dc6c00
    20fc:	00001e2d 	.word	0x00001e2d
    2100:	40000400 	.word	0x40000400

00002104 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2104:	4a06      	ldr	r2, [pc, #24]	; (2120 <system_gclk_init+0x1c>)
    2106:	6993      	ldr	r3, [r2, #24]
    2108:	2108      	movs	r1, #8
    210a:	430b      	orrs	r3, r1
    210c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    210e:	2201      	movs	r2, #1
    2110:	4b04      	ldr	r3, [pc, #16]	; (2124 <system_gclk_init+0x20>)
    2112:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2114:	0019      	movs	r1, r3
    2116:	780b      	ldrb	r3, [r1, #0]
    2118:	4213      	tst	r3, r2
    211a:	d1fc      	bne.n	2116 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    211c:	4770      	bx	lr
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	40000400 	.word	0x40000400
    2124:	40000c00 	.word	0x40000c00

00002128 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2128:	b570      	push	{r4, r5, r6, lr}
    212a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    212c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    212e:	780d      	ldrb	r5, [r1, #0]
    2130:	022d      	lsls	r5, r5, #8
    2132:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2134:	784b      	ldrb	r3, [r1, #1]
    2136:	2b00      	cmp	r3, #0
    2138:	d002      	beq.n	2140 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    213a:	2380      	movs	r3, #128	; 0x80
    213c:	02db      	lsls	r3, r3, #11
    213e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2140:	7a4b      	ldrb	r3, [r1, #9]
    2142:	2b00      	cmp	r3, #0
    2144:	d002      	beq.n	214c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2146:	2380      	movs	r3, #128	; 0x80
    2148:	031b      	lsls	r3, r3, #12
    214a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    214c:	6848      	ldr	r0, [r1, #4]
    214e:	2801      	cmp	r0, #1
    2150:	d910      	bls.n	2174 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2152:	1e43      	subs	r3, r0, #1
    2154:	4218      	tst	r0, r3
    2156:	d134      	bne.n	21c2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2158:	2802      	cmp	r0, #2
    215a:	d930      	bls.n	21be <system_gclk_gen_set_config+0x96>
    215c:	2302      	movs	r3, #2
    215e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2160:	3201      	adds	r2, #1
						mask <<= 1) {
    2162:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2164:	4298      	cmp	r0, r3
    2166:	d8fb      	bhi.n	2160 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2168:	0212      	lsls	r2, r2, #8
    216a:	4332      	orrs	r2, r6
    216c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    216e:	2380      	movs	r3, #128	; 0x80
    2170:	035b      	lsls	r3, r3, #13
    2172:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2174:	7a0b      	ldrb	r3, [r1, #8]
    2176:	2b00      	cmp	r3, #0
    2178:	d002      	beq.n	2180 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    217a:	2380      	movs	r3, #128	; 0x80
    217c:	039b      	lsls	r3, r3, #14
    217e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2180:	4a13      	ldr	r2, [pc, #76]	; (21d0 <system_gclk_gen_set_config+0xa8>)
    2182:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2184:	b25b      	sxtb	r3, r3
    2186:	2b00      	cmp	r3, #0
    2188:	dbfb      	blt.n	2182 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    218a:	4b12      	ldr	r3, [pc, #72]	; (21d4 <system_gclk_gen_set_config+0xac>)
    218c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    218e:	4b12      	ldr	r3, [pc, #72]	; (21d8 <system_gclk_gen_set_config+0xb0>)
    2190:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2192:	4a0f      	ldr	r2, [pc, #60]	; (21d0 <system_gclk_gen_set_config+0xa8>)
    2194:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2196:	b25b      	sxtb	r3, r3
    2198:	2b00      	cmp	r3, #0
    219a:	dbfb      	blt.n	2194 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    219c:	4b0c      	ldr	r3, [pc, #48]	; (21d0 <system_gclk_gen_set_config+0xa8>)
    219e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21a0:	001a      	movs	r2, r3
    21a2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    21a4:	b25b      	sxtb	r3, r3
    21a6:	2b00      	cmp	r3, #0
    21a8:	dbfb      	blt.n	21a2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    21aa:	4a09      	ldr	r2, [pc, #36]	; (21d0 <system_gclk_gen_set_config+0xa8>)
    21ac:	6853      	ldr	r3, [r2, #4]
    21ae:	2180      	movs	r1, #128	; 0x80
    21b0:	0249      	lsls	r1, r1, #9
    21b2:	400b      	ands	r3, r1
    21b4:	431d      	orrs	r5, r3
    21b6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    21b8:	4b08      	ldr	r3, [pc, #32]	; (21dc <system_gclk_gen_set_config+0xb4>)
    21ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21bc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    21be:	2200      	movs	r2, #0
    21c0:	e7d2      	b.n	2168 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    21c2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    21c4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    21c6:	2380      	movs	r3, #128	; 0x80
    21c8:	029b      	lsls	r3, r3, #10
    21ca:	431d      	orrs	r5, r3
    21cc:	e7d2      	b.n	2174 <system_gclk_gen_set_config+0x4c>
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	40000c00 	.word	0x40000c00
    21d4:	00001c39 	.word	0x00001c39
    21d8:	40000c08 	.word	0x40000c08
    21dc:	00001c79 	.word	0x00001c79

000021e0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    21e0:	b510      	push	{r4, lr}
    21e2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21e4:	4a0b      	ldr	r2, [pc, #44]	; (2214 <system_gclk_gen_enable+0x34>)
    21e6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    21e8:	b25b      	sxtb	r3, r3
    21ea:	2b00      	cmp	r3, #0
    21ec:	dbfb      	blt.n	21e6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    21ee:	4b0a      	ldr	r3, [pc, #40]	; (2218 <system_gclk_gen_enable+0x38>)
    21f0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    21f2:	4b0a      	ldr	r3, [pc, #40]	; (221c <system_gclk_gen_enable+0x3c>)
    21f4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21f6:	4a07      	ldr	r2, [pc, #28]	; (2214 <system_gclk_gen_enable+0x34>)
    21f8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    21fa:	b25b      	sxtb	r3, r3
    21fc:	2b00      	cmp	r3, #0
    21fe:	dbfb      	blt.n	21f8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2200:	4a04      	ldr	r2, [pc, #16]	; (2214 <system_gclk_gen_enable+0x34>)
    2202:	6851      	ldr	r1, [r2, #4]
    2204:	2380      	movs	r3, #128	; 0x80
    2206:	025b      	lsls	r3, r3, #9
    2208:	430b      	orrs	r3, r1
    220a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    220c:	4b04      	ldr	r3, [pc, #16]	; (2220 <system_gclk_gen_enable+0x40>)
    220e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2210:	bd10      	pop	{r4, pc}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	40000c00 	.word	0x40000c00
    2218:	00001c39 	.word	0x00001c39
    221c:	40000c04 	.word	0x40000c04
    2220:	00001c79 	.word	0x00001c79

00002224 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2224:	b570      	push	{r4, r5, r6, lr}
    2226:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2228:	4a1a      	ldr	r2, [pc, #104]	; (2294 <system_gclk_gen_get_hz+0x70>)
    222a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    222c:	b25b      	sxtb	r3, r3
    222e:	2b00      	cmp	r3, #0
    2230:	dbfb      	blt.n	222a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2232:	4b19      	ldr	r3, [pc, #100]	; (2298 <system_gclk_gen_get_hz+0x74>)
    2234:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2236:	4b19      	ldr	r3, [pc, #100]	; (229c <system_gclk_gen_get_hz+0x78>)
    2238:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    223a:	4a16      	ldr	r2, [pc, #88]	; (2294 <system_gclk_gen_get_hz+0x70>)
    223c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    223e:	b25b      	sxtb	r3, r3
    2240:	2b00      	cmp	r3, #0
    2242:	dbfb      	blt.n	223c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2244:	4e13      	ldr	r6, [pc, #76]	; (2294 <system_gclk_gen_get_hz+0x70>)
    2246:	6870      	ldr	r0, [r6, #4]
    2248:	04c0      	lsls	r0, r0, #19
    224a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    224c:	4b14      	ldr	r3, [pc, #80]	; (22a0 <system_gclk_gen_get_hz+0x7c>)
    224e:	4798      	blx	r3
    2250:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2252:	4b12      	ldr	r3, [pc, #72]	; (229c <system_gclk_gen_get_hz+0x78>)
    2254:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2256:	6876      	ldr	r6, [r6, #4]
    2258:	02f6      	lsls	r6, r6, #11
    225a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    225c:	4b11      	ldr	r3, [pc, #68]	; (22a4 <system_gclk_gen_get_hz+0x80>)
    225e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2260:	4a0c      	ldr	r2, [pc, #48]	; (2294 <system_gclk_gen_get_hz+0x70>)
    2262:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2264:	b25b      	sxtb	r3, r3
    2266:	2b00      	cmp	r3, #0
    2268:	dbfb      	blt.n	2262 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    226a:	4b0a      	ldr	r3, [pc, #40]	; (2294 <system_gclk_gen_get_hz+0x70>)
    226c:	689c      	ldr	r4, [r3, #8]
    226e:	0224      	lsls	r4, r4, #8
    2270:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2272:	4b0d      	ldr	r3, [pc, #52]	; (22a8 <system_gclk_gen_get_hz+0x84>)
    2274:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2276:	2e00      	cmp	r6, #0
    2278:	d107      	bne.n	228a <system_gclk_gen_get_hz+0x66>
    227a:	2c01      	cmp	r4, #1
    227c:	d907      	bls.n	228e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    227e:	0021      	movs	r1, r4
    2280:	0028      	movs	r0, r5
    2282:	4b0a      	ldr	r3, [pc, #40]	; (22ac <system_gclk_gen_get_hz+0x88>)
    2284:	4798      	blx	r3
    2286:	0005      	movs	r5, r0
    2288:	e001      	b.n	228e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    228a:	3401      	adds	r4, #1
    228c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    228e:	0028      	movs	r0, r5
    2290:	bd70      	pop	{r4, r5, r6, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	40000c00 	.word	0x40000c00
    2298:	00001c39 	.word	0x00001c39
    229c:	40000c04 	.word	0x40000c04
    22a0:	00001ca9 	.word	0x00001ca9
    22a4:	40000c08 	.word	0x40000c08
    22a8:	00001c79 	.word	0x00001c79
    22ac:	00002bf5 	.word	0x00002bf5

000022b0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    22b0:	b510      	push	{r4, lr}
    22b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    22b4:	4b06      	ldr	r3, [pc, #24]	; (22d0 <system_gclk_chan_enable+0x20>)
    22b6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    22b8:	4b06      	ldr	r3, [pc, #24]	; (22d4 <system_gclk_chan_enable+0x24>)
    22ba:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    22bc:	4a06      	ldr	r2, [pc, #24]	; (22d8 <system_gclk_chan_enable+0x28>)
    22be:	8853      	ldrh	r3, [r2, #2]
    22c0:	2180      	movs	r1, #128	; 0x80
    22c2:	01c9      	lsls	r1, r1, #7
    22c4:	430b      	orrs	r3, r1
    22c6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    22c8:	4b04      	ldr	r3, [pc, #16]	; (22dc <system_gclk_chan_enable+0x2c>)
    22ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    22cc:	bd10      	pop	{r4, pc}
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	00001c39 	.word	0x00001c39
    22d4:	40000c02 	.word	0x40000c02
    22d8:	40000c00 	.word	0x40000c00
    22dc:	00001c79 	.word	0x00001c79

000022e0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    22e0:	b510      	push	{r4, lr}
    22e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    22e4:	4b0f      	ldr	r3, [pc, #60]	; (2324 <system_gclk_chan_disable+0x44>)
    22e6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    22e8:	4b0f      	ldr	r3, [pc, #60]	; (2328 <system_gclk_chan_disable+0x48>)
    22ea:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    22ec:	4a0f      	ldr	r2, [pc, #60]	; (232c <system_gclk_chan_disable+0x4c>)
    22ee:	8853      	ldrh	r3, [r2, #2]
    22f0:	051b      	lsls	r3, r3, #20
    22f2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    22f4:	8853      	ldrh	r3, [r2, #2]
    22f6:	490e      	ldr	r1, [pc, #56]	; (2330 <system_gclk_chan_disable+0x50>)
    22f8:	400b      	ands	r3, r1
    22fa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    22fc:	8853      	ldrh	r3, [r2, #2]
    22fe:	490d      	ldr	r1, [pc, #52]	; (2334 <system_gclk_chan_disable+0x54>)
    2300:	400b      	ands	r3, r1
    2302:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2304:	0011      	movs	r1, r2
    2306:	2280      	movs	r2, #128	; 0x80
    2308:	01d2      	lsls	r2, r2, #7
    230a:	884b      	ldrh	r3, [r1, #2]
    230c:	4213      	tst	r3, r2
    230e:	d1fc      	bne.n	230a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2310:	4906      	ldr	r1, [pc, #24]	; (232c <system_gclk_chan_disable+0x4c>)
    2312:	884a      	ldrh	r2, [r1, #2]
    2314:	0203      	lsls	r3, r0, #8
    2316:	4806      	ldr	r0, [pc, #24]	; (2330 <system_gclk_chan_disable+0x50>)
    2318:	4002      	ands	r2, r0
    231a:	4313      	orrs	r3, r2
    231c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    231e:	4b06      	ldr	r3, [pc, #24]	; (2338 <system_gclk_chan_disable+0x58>)
    2320:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2322:	bd10      	pop	{r4, pc}
    2324:	00001c39 	.word	0x00001c39
    2328:	40000c02 	.word	0x40000c02
    232c:	40000c00 	.word	0x40000c00
    2330:	fffff0ff 	.word	0xfffff0ff
    2334:	ffffbfff 	.word	0xffffbfff
    2338:	00001c79 	.word	0x00001c79

0000233c <system_gclk_chan_set_config>:
{
    233c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    233e:	780c      	ldrb	r4, [r1, #0]
    2340:	0224      	lsls	r4, r4, #8
    2342:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2344:	4b02      	ldr	r3, [pc, #8]	; (2350 <system_gclk_chan_set_config+0x14>)
    2346:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2348:	b2a4      	uxth	r4, r4
    234a:	4b02      	ldr	r3, [pc, #8]	; (2354 <system_gclk_chan_set_config+0x18>)
    234c:	805c      	strh	r4, [r3, #2]
}
    234e:	bd10      	pop	{r4, pc}
    2350:	000022e1 	.word	0x000022e1
    2354:	40000c00 	.word	0x40000c00

00002358 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2358:	b510      	push	{r4, lr}
    235a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    235c:	4b06      	ldr	r3, [pc, #24]	; (2378 <system_gclk_chan_get_hz+0x20>)
    235e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2360:	4b06      	ldr	r3, [pc, #24]	; (237c <system_gclk_chan_get_hz+0x24>)
    2362:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2364:	4b06      	ldr	r3, [pc, #24]	; (2380 <system_gclk_chan_get_hz+0x28>)
    2366:	885c      	ldrh	r4, [r3, #2]
    2368:	0524      	lsls	r4, r4, #20
    236a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    236c:	4b05      	ldr	r3, [pc, #20]	; (2384 <system_gclk_chan_get_hz+0x2c>)
    236e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2370:	0020      	movs	r0, r4
    2372:	4b05      	ldr	r3, [pc, #20]	; (2388 <system_gclk_chan_get_hz+0x30>)
    2374:	4798      	blx	r3
}
    2376:	bd10      	pop	{r4, pc}
    2378:	00001c39 	.word	0x00001c39
    237c:	40000c02 	.word	0x40000c02
    2380:	40000c00 	.word	0x40000c00
    2384:	00001c79 	.word	0x00001c79
    2388:	00002225 	.word	0x00002225

0000238c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    238c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    238e:	78d3      	ldrb	r3, [r2, #3]
    2390:	2b00      	cmp	r3, #0
    2392:	d135      	bne.n	2400 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2394:	7813      	ldrb	r3, [r2, #0]
    2396:	2b80      	cmp	r3, #128	; 0x80
    2398:	d029      	beq.n	23ee <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    239a:	061b      	lsls	r3, r3, #24
    239c:	2480      	movs	r4, #128	; 0x80
    239e:	0264      	lsls	r4, r4, #9
    23a0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    23a2:	7854      	ldrb	r4, [r2, #1]
    23a4:	2502      	movs	r5, #2
    23a6:	43ac      	bics	r4, r5
    23a8:	d106      	bne.n	23b8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    23aa:	7894      	ldrb	r4, [r2, #2]
    23ac:	2c00      	cmp	r4, #0
    23ae:	d120      	bne.n	23f2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    23b0:	2480      	movs	r4, #128	; 0x80
    23b2:	02a4      	lsls	r4, r4, #10
    23b4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    23b6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    23b8:	7854      	ldrb	r4, [r2, #1]
    23ba:	3c01      	subs	r4, #1
    23bc:	2c01      	cmp	r4, #1
    23be:	d91c      	bls.n	23fa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    23c0:	040d      	lsls	r5, r1, #16
    23c2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    23c4:	24a0      	movs	r4, #160	; 0xa0
    23c6:	05e4      	lsls	r4, r4, #23
    23c8:	432c      	orrs	r4, r5
    23ca:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23cc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    23ce:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    23d0:	24d0      	movs	r4, #208	; 0xd0
    23d2:	0624      	lsls	r4, r4, #24
    23d4:	432c      	orrs	r4, r5
    23d6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23d8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    23da:	78d4      	ldrb	r4, [r2, #3]
    23dc:	2c00      	cmp	r4, #0
    23de:	d122      	bne.n	2426 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    23e0:	035b      	lsls	r3, r3, #13
    23e2:	d51c      	bpl.n	241e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    23e4:	7893      	ldrb	r3, [r2, #2]
    23e6:	2b01      	cmp	r3, #1
    23e8:	d01e      	beq.n	2428 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    23ea:	6141      	str	r1, [r0, #20]
    23ec:	e017      	b.n	241e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    23ee:	2300      	movs	r3, #0
    23f0:	e7d7      	b.n	23a2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    23f2:	24c0      	movs	r4, #192	; 0xc0
    23f4:	02e4      	lsls	r4, r4, #11
    23f6:	4323      	orrs	r3, r4
    23f8:	e7dd      	b.n	23b6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    23fa:	4c0d      	ldr	r4, [pc, #52]	; (2430 <_system_pinmux_config+0xa4>)
    23fc:	4023      	ands	r3, r4
    23fe:	e7df      	b.n	23c0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2400:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2402:	040c      	lsls	r4, r1, #16
    2404:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2406:	23a0      	movs	r3, #160	; 0xa0
    2408:	05db      	lsls	r3, r3, #23
    240a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    240c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    240e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2410:	23d0      	movs	r3, #208	; 0xd0
    2412:	061b      	lsls	r3, r3, #24
    2414:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2416:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2418:	78d3      	ldrb	r3, [r2, #3]
    241a:	2b00      	cmp	r3, #0
    241c:	d103      	bne.n	2426 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    241e:	7853      	ldrb	r3, [r2, #1]
    2420:	3b01      	subs	r3, #1
    2422:	2b01      	cmp	r3, #1
    2424:	d902      	bls.n	242c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2426:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2428:	6181      	str	r1, [r0, #24]
    242a:	e7f8      	b.n	241e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    242c:	6081      	str	r1, [r0, #8]
}
    242e:	e7fa      	b.n	2426 <_system_pinmux_config+0x9a>
    2430:	fffbffff 	.word	0xfffbffff

00002434 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2434:	b510      	push	{r4, lr}
    2436:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2438:	09c1      	lsrs	r1, r0, #7
		return NULL;
    243a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    243c:	2900      	cmp	r1, #0
    243e:	d104      	bne.n	244a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2440:	0943      	lsrs	r3, r0, #5
    2442:	01db      	lsls	r3, r3, #7
    2444:	4905      	ldr	r1, [pc, #20]	; (245c <system_pinmux_pin_set_config+0x28>)
    2446:	468c      	mov	ip, r1
    2448:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    244a:	241f      	movs	r4, #31
    244c:	4020      	ands	r0, r4
    244e:	2101      	movs	r1, #1
    2450:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2452:	0018      	movs	r0, r3
    2454:	4b02      	ldr	r3, [pc, #8]	; (2460 <system_pinmux_pin_set_config+0x2c>)
    2456:	4798      	blx	r3
}
    2458:	bd10      	pop	{r4, pc}
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	41004400 	.word	0x41004400
    2460:	0000238d 	.word	0x0000238d

00002464 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2464:	4770      	bx	lr
	...

00002468 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2468:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    246a:	4b05      	ldr	r3, [pc, #20]	; (2480 <system_init+0x18>)
    246c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    246e:	4b05      	ldr	r3, [pc, #20]	; (2484 <system_init+0x1c>)
    2470:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2472:	4b05      	ldr	r3, [pc, #20]	; (2488 <system_init+0x20>)
    2474:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2476:	4b05      	ldr	r3, [pc, #20]	; (248c <system_init+0x24>)
    2478:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    247a:	4b05      	ldr	r3, [pc, #20]	; (2490 <system_init+0x28>)
    247c:	4798      	blx	r3
}
    247e:	bd10      	pop	{r4, pc}
    2480:	00001f79 	.word	0x00001f79
    2484:	00001c35 	.word	0x00001c35
    2488:	000001e9 	.word	0x000001e9
    248c:	0000035d 	.word	0x0000035d
    2490:	00002465 	.word	0x00002465

00002494 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2494:	e7fe      	b.n	2494 <Dummy_Handler>
	...

00002498 <Reset_Handler>:
{
    2498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    249a:	4a2a      	ldr	r2, [pc, #168]	; (2544 <Reset_Handler+0xac>)
    249c:	4b2a      	ldr	r3, [pc, #168]	; (2548 <Reset_Handler+0xb0>)
    249e:	429a      	cmp	r2, r3
    24a0:	d011      	beq.n	24c6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    24a2:	001a      	movs	r2, r3
    24a4:	4b29      	ldr	r3, [pc, #164]	; (254c <Reset_Handler+0xb4>)
    24a6:	429a      	cmp	r2, r3
    24a8:	d20d      	bcs.n	24c6 <Reset_Handler+0x2e>
    24aa:	4a29      	ldr	r2, [pc, #164]	; (2550 <Reset_Handler+0xb8>)
    24ac:	3303      	adds	r3, #3
    24ae:	1a9b      	subs	r3, r3, r2
    24b0:	089b      	lsrs	r3, r3, #2
    24b2:	3301      	adds	r3, #1
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    24b8:	4823      	ldr	r0, [pc, #140]	; (2548 <Reset_Handler+0xb0>)
    24ba:	4922      	ldr	r1, [pc, #136]	; (2544 <Reset_Handler+0xac>)
    24bc:	588c      	ldr	r4, [r1, r2]
    24be:	5084      	str	r4, [r0, r2]
    24c0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    24c2:	429a      	cmp	r2, r3
    24c4:	d1fa      	bne.n	24bc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    24c6:	4a23      	ldr	r2, [pc, #140]	; (2554 <Reset_Handler+0xbc>)
    24c8:	4b23      	ldr	r3, [pc, #140]	; (2558 <Reset_Handler+0xc0>)
    24ca:	429a      	cmp	r2, r3
    24cc:	d20a      	bcs.n	24e4 <Reset_Handler+0x4c>
    24ce:	43d3      	mvns	r3, r2
    24d0:	4921      	ldr	r1, [pc, #132]	; (2558 <Reset_Handler+0xc0>)
    24d2:	185b      	adds	r3, r3, r1
    24d4:	2103      	movs	r1, #3
    24d6:	438b      	bics	r3, r1
    24d8:	3304      	adds	r3, #4
    24da:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    24dc:	2100      	movs	r1, #0
    24de:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    24e0:	4293      	cmp	r3, r2
    24e2:	d1fc      	bne.n	24de <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    24e4:	4a1d      	ldr	r2, [pc, #116]	; (255c <Reset_Handler+0xc4>)
    24e6:	21ff      	movs	r1, #255	; 0xff
    24e8:	4b1d      	ldr	r3, [pc, #116]	; (2560 <Reset_Handler+0xc8>)
    24ea:	438b      	bics	r3, r1
    24ec:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    24ee:	39fd      	subs	r1, #253	; 0xfd
    24f0:	2390      	movs	r3, #144	; 0x90
    24f2:	005b      	lsls	r3, r3, #1
    24f4:	4a1b      	ldr	r2, [pc, #108]	; (2564 <Reset_Handler+0xcc>)
    24f6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    24f8:	4a1b      	ldr	r2, [pc, #108]	; (2568 <Reset_Handler+0xd0>)
    24fa:	78d3      	ldrb	r3, [r2, #3]
    24fc:	2503      	movs	r5, #3
    24fe:	43ab      	bics	r3, r5
    2500:	2402      	movs	r4, #2
    2502:	4323      	orrs	r3, r4
    2504:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2506:	78d3      	ldrb	r3, [r2, #3]
    2508:	270c      	movs	r7, #12
    250a:	43bb      	bics	r3, r7
    250c:	2608      	movs	r6, #8
    250e:	4333      	orrs	r3, r6
    2510:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2512:	4b16      	ldr	r3, [pc, #88]	; (256c <Reset_Handler+0xd4>)
    2514:	7b98      	ldrb	r0, [r3, #14]
    2516:	2230      	movs	r2, #48	; 0x30
    2518:	4390      	bics	r0, r2
    251a:	2220      	movs	r2, #32
    251c:	4310      	orrs	r0, r2
    251e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2520:	7b99      	ldrb	r1, [r3, #14]
    2522:	43b9      	bics	r1, r7
    2524:	4331      	orrs	r1, r6
    2526:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2528:	7b9a      	ldrb	r2, [r3, #14]
    252a:	43aa      	bics	r2, r5
    252c:	4322      	orrs	r2, r4
    252e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2530:	4a0f      	ldr	r2, [pc, #60]	; (2570 <Reset_Handler+0xd8>)
    2532:	6853      	ldr	r3, [r2, #4]
    2534:	2180      	movs	r1, #128	; 0x80
    2536:	430b      	orrs	r3, r1
    2538:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    253a:	4b0e      	ldr	r3, [pc, #56]	; (2574 <Reset_Handler+0xdc>)
    253c:	4798      	blx	r3
        main();
    253e:	4b0e      	ldr	r3, [pc, #56]	; (2578 <Reset_Handler+0xe0>)
    2540:	4798      	blx	r3
    2542:	e7fe      	b.n	2542 <Reset_Handler+0xaa>
    2544:	00003028 	.word	0x00003028
    2548:	20000000 	.word	0x20000000
    254c:	20000120 	.word	0x20000120
    2550:	20000004 	.word	0x20000004
    2554:	20000120 	.word	0x20000120
    2558:	20000610 	.word	0x20000610
    255c:	e000ed00 	.word	0xe000ed00
    2560:	00000000 	.word	0x00000000
    2564:	41007000 	.word	0x41007000
    2568:	41005000 	.word	0x41005000
    256c:	41004800 	.word	0x41004800
    2570:	41004000 	.word	0x41004000
    2574:	00002f35 	.word	0x00002f35
    2578:	00002a89 	.word	0x00002a89

0000257c <rtc_overflow_callback>:
			}
		}
	}
}
void rtc_overflow_callback(void)
{
    257c:	b510      	push	{r4, lr}
	//turn on sensor chip in this step
	extint_enable_events(&eic_events); //enable event controller and jump to capture callback. 
    257e:	4802      	ldr	r0, [pc, #8]	; (2588 <rtc_overflow_callback+0xc>)
    2580:	4b02      	ldr	r3, [pc, #8]	; (258c <rtc_overflow_callback+0x10>)
    2582:	4798      	blx	r3

}
    2584:	bd10      	pop	{r4, pc}
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	200005d0 	.word	0x200005d0
    258c:	00000455 	.word	0x00000455

00002590 <capture_event_callback>:
void capture_event_callback(void){
    2590:	b530      	push	{r4, r5, lr}
    2592:	b08f      	sub	sp, #60	; 0x3c
	frequency = Captureclock/(TC4->COUNT16.CC[0].bit.CC*2); //grab frequency from chip
    2594:	4b38      	ldr	r3, [pc, #224]	; (2678 <capture_event_callback+0xe8>)
    2596:	8b19      	ldrh	r1, [r3, #24]
    2598:	4c38      	ldr	r4, [pc, #224]	; (267c <capture_event_callback+0xec>)
    259a:	0049      	lsls	r1, r1, #1
    259c:	4838      	ldr	r0, [pc, #224]	; (2680 <capture_event_callback+0xf0>)
    259e:	4b39      	ldr	r3, [pc, #228]	; (2684 <capture_event_callback+0xf4>)
    25a0:	4798      	blx	r3
    25a2:	6020      	str	r0, [r4, #0]
	time_stamp = rtc_count_get_count(&rtc_instance);
    25a4:	4838      	ldr	r0, [pc, #224]	; (2688 <capture_event_callback+0xf8>)
    25a6:	4b39      	ldr	r3, [pc, #228]	; (268c <capture_event_callback+0xfc>)
    25a8:	4798      	blx	r3
    25aa:	4b39      	ldr	r3, [pc, #228]	; (2690 <capture_event_callback+0x100>)
    25ac:	6018      	str	r0, [r3, #0]
	holder = holder | frequency;
    25ae:	6823      	ldr	r3, [r4, #0]
	if(!count_overflow){
    25b0:	4a38      	ldr	r2, [pc, #224]	; (2694 <capture_event_callback+0x104>)
    25b2:	7812      	ldrb	r2, [r2, #0]
    25b4:	2a00      	cmp	r2, #0
    25b6:	d14a      	bne.n	264e <capture_event_callback+0xbe>
			wd_buffer[(8*counter)+i] =  0xFF & holder;
    25b8:	4a37      	ldr	r2, [pc, #220]	; (2698 <capture_event_callback+0x108>)
    25ba:	8811      	ldrh	r1, [r2, #0]
    25bc:	00c9      	lsls	r1, r1, #3
    25be:	2207      	movs	r2, #7
    25c0:	4c36      	ldr	r4, [pc, #216]	; (269c <capture_event_callback+0x10c>)
    25c2:	1864      	adds	r4, r4, r1
    25c4:	54a3      	strb	r3, [r4, r2]
			holder = holder >> 8;
    25c6:	0601      	lsls	r1, r0, #24
    25c8:	0a1b      	lsrs	r3, r3, #8
    25ca:	430b      	orrs	r3, r1
    25cc:	0a00      	lsrs	r0, r0, #8
		for(int i = 7; i >= 0; i--){
    25ce:	3a01      	subs	r2, #1
    25d0:	d2f8      	bcs.n	25c4 <capture_event_callback+0x34>
	counter++;
    25d2:	4a31      	ldr	r2, [pc, #196]	; (2698 <capture_event_callback+0x108>)
    25d4:	8813      	ldrh	r3, [r2, #0]
    25d6:	3301      	adds	r3, #1
    25d8:	b29b      	uxth	r3, r3
    25da:	8013      	strh	r3, [r2, #0]
	if(counter > 31){
    25dc:	2b1f      	cmp	r3, #31
    25de:	d902      	bls.n	25e6 <capture_event_callback+0x56>
		count_overflow = true;
    25e0:	2201      	movs	r2, #1
    25e2:	4b2c      	ldr	r3, [pc, #176]	; (2694 <capture_event_callback+0x104>)
    25e4:	701a      	strb	r2, [r3, #0]
	measure_count++;
    25e6:	4c2e      	ldr	r4, [pc, #184]	; (26a0 <capture_event_callback+0x110>)
    25e8:	7823      	ldrb	r3, [r4, #0]
    25ea:	3301      	adds	r3, #1
    25ec:	7023      	strb	r3, [r4, #0]
	delay_us(((PULSE_TIME*1000)/10)-10);
    25ee:	482d      	ldr	r0, [pc, #180]	; (26a4 <capture_event_callback+0x114>)
    25f0:	4b2d      	ldr	r3, [pc, #180]	; (26a8 <capture_event_callback+0x118>)
    25f2:	4798      	blx	r3
	if(measure_count < 10){
    25f4:	7823      	ldrb	r3, [r4, #0]
    25f6:	2b09      	cmp	r3, #9
    25f8:	d938      	bls.n	266c <capture_event_callback+0xdc>
		extint_disable_events(&eic_events);
    25fa:	482c      	ldr	r0, [pc, #176]	; (26ac <capture_event_callback+0x11c>)
    25fc:	4b2c      	ldr	r3, [pc, #176]	; (26b0 <capture_event_callback+0x120>)
    25fe:	4798      	blx	r3
		measure_count = 0;
    2600:	2200      	movs	r2, #0
    2602:	4b27      	ldr	r3, [pc, #156]	; (26a0 <capture_event_callback+0x110>)
    2604:	701a      	strb	r2, [r3, #0]
		if(counter>31){
    2606:	4b24      	ldr	r3, [pc, #144]	; (2698 <capture_event_callback+0x108>)
    2608:	881b      	ldrh	r3, [r3, #0]
    260a:	2b1f      	cmp	r3, #31
    260c:	d931      	bls.n	2672 <capture_event_callback+0xe2>
			counter = counter - 31;
    260e:	3b1f      	subs	r3, #31
    2610:	4a21      	ldr	r2, [pc, #132]	; (2698 <capture_event_callback+0x108>)
    2612:	8013      	strh	r3, [r2, #0]
			spi_write_page(send_data);
    2614:	4c27      	ldr	r4, [pc, #156]	; (26b4 <capture_event_callback+0x124>)
    2616:	0021      	movs	r1, r4
    2618:	3110      	adds	r1, #16
    261a:	2238      	movs	r2, #56	; 0x38
    261c:	4668      	mov	r0, sp
    261e:	4b26      	ldr	r3, [pc, #152]	; (26b8 <capture_event_callback+0x128>)
    2620:	4798      	blx	r3
    2622:	6820      	ldr	r0, [r4, #0]
    2624:	6861      	ldr	r1, [r4, #4]
    2626:	68a2      	ldr	r2, [r4, #8]
    2628:	68e3      	ldr	r3, [r4, #12]
    262a:	4d24      	ldr	r5, [pc, #144]	; (26bc <capture_event_callback+0x12c>)
    262c:	47a8      	blx	r5
			send_data.address = send_data.address + 256;
    262e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2630:	3301      	adds	r3, #1
    2632:	33ff      	adds	r3, #255	; 0xff
    2634:	6423      	str	r3, [r4, #64]	; 0x40
			for(int i = 0; i <64; i++){
    2636:	2300      	movs	r3, #0
				wd_buffer[i] = overflow_buffer[i];
    2638:	4818      	ldr	r0, [pc, #96]	; (269c <capture_event_callback+0x10c>)
    263a:	4921      	ldr	r1, [pc, #132]	; (26c0 <capture_event_callback+0x130>)
    263c:	5c5a      	ldrb	r2, [r3, r1]
    263e:	541a      	strb	r2, [r3, r0]
			for(int i = 0; i <64; i++){
    2640:	3301      	adds	r3, #1
    2642:	2b40      	cmp	r3, #64	; 0x40
    2644:	d1fa      	bne.n	263c <capture_event_callback+0xac>
    2646:	2200      	movs	r2, #0
    2648:	4b12      	ldr	r3, [pc, #72]	; (2694 <capture_event_callback+0x104>)
    264a:	701a      	strb	r2, [r3, #0]
}
    264c:	e011      	b.n	2672 <capture_event_callback+0xe2>
			overflow_buffer[(8*(counter-32)+i)] =  0xFF & holder;
    264e:	4a12      	ldr	r2, [pc, #72]	; (2698 <capture_event_callback+0x108>)
    2650:	8811      	ldrh	r1, [r2, #0]
    2652:	3920      	subs	r1, #32
    2654:	00c9      	lsls	r1, r1, #3
    2656:	2207      	movs	r2, #7
    2658:	4c19      	ldr	r4, [pc, #100]	; (26c0 <capture_event_callback+0x130>)
    265a:	1864      	adds	r4, r4, r1
    265c:	54a3      	strb	r3, [r4, r2]
			holder = holder >> 8;
    265e:	0601      	lsls	r1, r0, #24
    2660:	0a1b      	lsrs	r3, r3, #8
    2662:	430b      	orrs	r3, r1
    2664:	0a00      	lsrs	r0, r0, #8
		for(int i = 7; i >= 0; i--){
    2666:	3a01      	subs	r2, #1
    2668:	d2f8      	bcs.n	265c <capture_event_callback+0xcc>
    266a:	e7b2      	b.n	25d2 <capture_event_callback+0x42>
		extint_enable_events(&eic_events);
    266c:	480f      	ldr	r0, [pc, #60]	; (26ac <capture_event_callback+0x11c>)
    266e:	4b15      	ldr	r3, [pc, #84]	; (26c4 <capture_event_callback+0x134>)
    2670:	4798      	blx	r3
}
    2672:	b00f      	add	sp, #60	; 0x3c
    2674:	bd30      	pop	{r4, r5, pc}
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	42003000 	.word	0x42003000
    267c:	20000174 	.word	0x20000174
    2680:	02dc6c00 	.word	0x02dc6c00
    2684:	00002d09 	.word	0x00002d09
    2688:	20000460 	.word	0x20000460
    268c:	0000055d 	.word	0x0000055d
    2690:	200002c4 	.word	0x200002c4
    2694:	20000170 	.word	0x20000170
    2698:	20000172 	.word	0x20000172
    269c:	20000020 	.word	0x20000020
    26a0:	20000178 	.word	0x20000178
    26a4:	00002706 	.word	0x00002706
    26a8:	00000155 	.word	0x00000155
    26ac:	200005d0 	.word	0x200005d0
    26b0:	00000481 	.word	0x00000481
    26b4:	20000548 	.word	0x20000548
    26b8:	00002f7d 	.word	0x00002f7d
    26bc:	00000ee9 	.word	0x00000ee9
    26c0:	2000017c 	.word	0x2000017c
    26c4:	00000455 	.word	0x00000455

000026c8 <configure_terminal>:
{
    26c8:	b530      	push	{r4, r5, lr}
    26ca:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    26cc:	2380      	movs	r3, #128	; 0x80
    26ce:	05db      	lsls	r3, r3, #23
    26d0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    26d2:	2300      	movs	r3, #0
    26d4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    26d6:	22ff      	movs	r2, #255	; 0xff
    26d8:	4669      	mov	r1, sp
    26da:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    26dc:	2200      	movs	r2, #0
    26de:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    26e0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    26e2:	2101      	movs	r1, #1
    26e4:	2024      	movs	r0, #36	; 0x24
    26e6:	466c      	mov	r4, sp
    26e8:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    26ea:	3001      	adds	r0, #1
    26ec:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    26ee:	3125      	adds	r1, #37	; 0x25
    26f0:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    26f2:	3101      	adds	r1, #1
    26f4:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    26f6:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    26f8:	3105      	adds	r1, #5
    26fa:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    26fc:	3101      	adds	r1, #1
    26fe:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2700:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2702:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2704:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2706:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2708:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    270a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    270c:	2313      	movs	r3, #19
    270e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2710:	7762      	strb	r2, [r4, #29]
	config_terminal.baudrate    = 115200;
    2712:	23e1      	movs	r3, #225	; 0xe1
    2714:	025b      	lsls	r3, r3, #9
    2716:	9308      	str	r3, [sp, #32]
	config_terminal.mux_setting = USART_RX_1_TX_0_XCK_1;
    2718:	2380      	movs	r3, #128	; 0x80
    271a:	035b      	lsls	r3, r3, #13
    271c:	9303      	str	r3, [sp, #12]
	config_terminal.pinmux_pad0 = PINMUX_PA04D_SERCOM0_PAD0;
    271e:	4b12      	ldr	r3, [pc, #72]	; (2768 <configure_terminal+0xa0>)
    2720:	930c      	str	r3, [sp, #48]	; 0x30
	config_terminal.pinmux_pad1 = PINMUX_PA05D_SERCOM0_PAD1;
    2722:	4b12      	ldr	r3, [pc, #72]	; (276c <configure_terminal+0xa4>)
    2724:	930d      	str	r3, [sp, #52]	; 0x34
	config_terminal.pinmux_pad2 = PINMUX_UNUSED;
    2726:	2301      	movs	r3, #1
    2728:	425b      	negs	r3, r3
    272a:	930e      	str	r3, [sp, #56]	; 0x38
	config_terminal.pinmux_pad3 = PINMUX_UNUSED;
    272c:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_terminal,SERCOM0, &config_terminal) != STATUS_OK) {
    272e:	4d10      	ldr	r5, [pc, #64]	; (2770 <configure_terminal+0xa8>)
    2730:	4c10      	ldr	r4, [pc, #64]	; (2774 <configure_terminal+0xac>)
    2732:	466a      	mov	r2, sp
    2734:	4910      	ldr	r1, [pc, #64]	; (2778 <configure_terminal+0xb0>)
    2736:	0028      	movs	r0, r5
    2738:	47a0      	blx	r4
    273a:	2800      	cmp	r0, #0
    273c:	d1f9      	bne.n	2732 <configure_terminal+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    273e:	4d0c      	ldr	r5, [pc, #48]	; (2770 <configure_terminal+0xa8>)
    2740:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2742:	0020      	movs	r0, r4
    2744:	4b0d      	ldr	r3, [pc, #52]	; (277c <configure_terminal+0xb4>)
    2746:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2748:	231f      	movs	r3, #31
    274a:	4018      	ands	r0, r3
    274c:	3b1e      	subs	r3, #30
    274e:	4083      	lsls	r3, r0
    2750:	4a0b      	ldr	r2, [pc, #44]	; (2780 <configure_terminal+0xb8>)
    2752:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2754:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2756:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2758:	2b00      	cmp	r3, #0
    275a:	d1fc      	bne.n	2756 <configure_terminal+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    275c:	6823      	ldr	r3, [r4, #0]
    275e:	2202      	movs	r2, #2
    2760:	4313      	orrs	r3, r2
    2762:	6023      	str	r3, [r4, #0]
}
    2764:	b011      	add	sp, #68	; 0x44
    2766:	bd30      	pop	{r4, r5, pc}
    2768:	00040003 	.word	0x00040003
    276c:	00050003 	.word	0x00050003
    2770:	20000504 	.word	0x20000504
    2774:	00000f79 	.word	0x00000f79
    2778:	42000800 	.word	0x42000800
    277c:	00001bd1 	.word	0x00001bd1
    2780:	e000e100 	.word	0xe000e100

00002784 <configure_port_pins>:
{
    2784:	b570      	push	{r4, r5, r6, lr}
    2786:	b082      	sub	sp, #8
	config->direction  = PORT_PIN_DIR_INPUT;
    2788:	ac01      	add	r4, sp, #4
    278a:	2300      	movs	r3, #0
    278c:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    278e:	2601      	movs	r6, #1
    2790:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    2792:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(DEBUG_PIN,&config_port_pin);
    2794:	0021      	movs	r1, r4
    2796:	2002      	movs	r0, #2
    2798:	4d05      	ldr	r5, [pc, #20]	; (27b0 <configure_port_pins+0x2c>)
    279a:	47a8      	blx	r5
	port_pin_set_config(PIN_PA18, &config_port_pin);
    279c:	0021      	movs	r1, r4
    279e:	2012      	movs	r0, #18
    27a0:	47a8      	blx	r5
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    27a2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(PIN_PA15,&config_port_pin);
    27a4:	0021      	movs	r1, r4
    27a6:	200f      	movs	r0, #15
    27a8:	47a8      	blx	r5
}
    27aa:	b002      	add	sp, #8
    27ac:	bd70      	pop	{r4, r5, r6, pc}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	000004ad 	.word	0x000004ad

000027b4 <configure_pinmux>:
void configure_pinmux(void){
    27b4:	b500      	push	{lr}
    27b6:	b083      	sub	sp, #12
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    27b8:	a901      	add	r1, sp, #4
    27ba:	2301      	movs	r3, #1
    27bc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    27be:	2200      	movs	r2, #0
    27c0:	70ca      	strb	r2, [r1, #3]
	config_pinmux.mux_position = PINMUX_PA22H_GCLK_IO6;
    27c2:	3207      	adds	r2, #7
    27c4:	700a      	strb	r2, [r1, #0]
	config_pinmux.direction= SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    27c6:	704b      	strb	r3, [r1, #1]
	system_pinmux_pin_set_config(PIN_PA22H_GCLK_IO6, &config_pinmux);
    27c8:	2016      	movs	r0, #22
    27ca:	4b02      	ldr	r3, [pc, #8]	; (27d4 <configure_pinmux+0x20>)
    27cc:	4798      	blx	r3
}
    27ce:	b003      	add	sp, #12
    27d0:	bd00      	pop	{pc}
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	00002435 	.word	0x00002435

000027d8 <configure_spi_master>:
{
    27d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27da:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    27dc:	4c2a      	ldr	r4, [pc, #168]	; (2888 <configure_spi_master+0xb0>)
    27de:	2309      	movs	r3, #9
    27e0:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    27e2:	2300      	movs	r3, #0
    27e4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    27e6:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    27e8:	a901      	add	r1, sp, #4
    27ea:	2201      	movs	r2, #1
    27ec:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    27ee:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    27f0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    27f2:	2009      	movs	r0, #9
    27f4:	4b25      	ldr	r3, [pc, #148]	; (288c <configure_spi_master+0xb4>)
    27f6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    27f8:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    27fa:	09d9      	lsrs	r1, r3, #7
		return NULL;
    27fc:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    27fe:	2900      	cmp	r1, #0
    2800:	d104      	bne.n	280c <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    2802:	095a      	lsrs	r2, r3, #5
    2804:	01d2      	lsls	r2, r2, #7
    2806:	4922      	ldr	r1, [pc, #136]	; (2890 <configure_spi_master+0xb8>)
    2808:	468c      	mov	ip, r1
    280a:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    280c:	261f      	movs	r6, #31
    280e:	4033      	ands	r3, r6
    2810:	2501      	movs	r5, #1
    2812:	0029      	movs	r1, r5
    2814:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    2816:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    2818:	ac02      	add	r4, sp, #8
    281a:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    281c:	2300      	movs	r3, #0
    281e:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2820:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2822:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    2824:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2826:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2828:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    282a:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    282c:	2224      	movs	r2, #36	; 0x24
    282e:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2830:	3a18      	subs	r2, #24
    2832:	2100      	movs	r1, #0
    2834:	a808      	add	r0, sp, #32
    2836:	4b17      	ldr	r3, [pc, #92]	; (2894 <configure_spi_master+0xbc>)
    2838:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    283a:	4b17      	ldr	r3, [pc, #92]	; (2898 <configure_spi_master+0xc0>)
    283c:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
    283e:	2380      	movs	r3, #128	; 0x80
    2840:	025b      	lsls	r3, r3, #9
    2842:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    2844:	4b15      	ldr	r3, [pc, #84]	; (289c <configure_spi_master+0xc4>)
    2846:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    2848:	2301      	movs	r3, #1
    284a:	425b      	negs	r3, r3
    284c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_PA10D_SERCOM2_PAD2;
    284e:	4b14      	ldr	r3, [pc, #80]	; (28a0 <configure_spi_master+0xc8>)
    2850:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA11D_SERCOM2_PAD3;
    2852:	4b14      	ldr	r3, [pc, #80]	; (28a4 <configure_spi_master+0xcc>)
    2854:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&spi_master_instance, SERCOM2, &config_spi_master);
    2856:	4f14      	ldr	r7, [pc, #80]	; (28a8 <configure_spi_master+0xd0>)
    2858:	0022      	movs	r2, r4
    285a:	4914      	ldr	r1, [pc, #80]	; (28ac <configure_spi_master+0xd4>)
    285c:	0038      	movs	r0, r7
    285e:	4b14      	ldr	r3, [pc, #80]	; (28b0 <configure_spi_master+0xd8>)
    2860:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2862:	683c      	ldr	r4, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2864:	0020      	movs	r0, r4
    2866:	4b13      	ldr	r3, [pc, #76]	; (28b4 <configure_spi_master+0xdc>)
    2868:	4798      	blx	r3
    286a:	4006      	ands	r6, r0
    286c:	40b5      	lsls	r5, r6
    286e:	4b12      	ldr	r3, [pc, #72]	; (28b8 <configure_spi_master+0xe0>)
    2870:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2872:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    2874:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2876:	2b00      	cmp	r3, #0
    2878:	d1fc      	bne.n	2874 <configure_spi_master+0x9c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    287a:	6823      	ldr	r3, [r4, #0]
    287c:	2202      	movs	r2, #2
    287e:	4313      	orrs	r3, r2
    2880:	6023      	str	r3, [r4, #0]
}
    2882:	b011      	add	sp, #68	; 0x44
    2884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	200005cc 	.word	0x200005cc
    288c:	000004ad 	.word	0x000004ad
    2890:	41004400 	.word	0x41004400
    2894:	00002f8f 	.word	0x00002f8f
    2898:	000186a0 	.word	0x000186a0
    289c:	00080003 	.word	0x00080003
    28a0:	000a0003 	.word	0x000a0003
    28a4:	000b0003 	.word	0x000b0003
    28a8:	20000590 	.word	0x20000590
    28ac:	42001000 	.word	0x42001000
    28b0:	00001451 	.word	0x00001451
    28b4:	00001bd1 	.word	0x00001bd1
    28b8:	e000e100 	.word	0xe000e100

000028bc <configure_tc>:
{
    28bc:	b500      	push	{lr}
    28be:	b08f      	sub	sp, #60	; 0x3c
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    28c0:	aa01      	add	r2, sp, #4
    28c2:	2300      	movs	r3, #0
    28c4:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    28c6:	2100      	movs	r1, #0
    28c8:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    28ca:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    28cc:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    28ce:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    28d0:	7291      	strb	r1, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    28d2:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    28d4:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    28d6:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    28d8:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    28da:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    28dc:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    28de:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    28e0:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    28e2:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    28e4:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    28e6:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0] = 1;
    28e8:	3301      	adds	r3, #1
    28ea:	72d3      	strb	r3, [r2, #11]
	config_tc.enable_capture_on_channel[1] = 1;
    28ec:	7313      	strb	r3, [r2, #12]
	config_tc.clock_source = GCLK_GENERATOR_3;
    28ee:	3302      	adds	r3, #2
    28f0:	7013      	strb	r3, [r2, #0]
	tc_init(&capture_instance, TC4, &config_tc);
    28f2:	4903      	ldr	r1, [pc, #12]	; (2900 <configure_tc+0x44>)
    28f4:	4803      	ldr	r0, [pc, #12]	; (2904 <configure_tc+0x48>)
    28f6:	4b04      	ldr	r3, [pc, #16]	; (2908 <configure_tc+0x4c>)
    28f8:	4798      	blx	r3
}
    28fa:	b00f      	add	sp, #60	; 0x3c
    28fc:	bd00      	pop	{pc}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	42003000 	.word	0x42003000
    2904:	200005f0 	.word	0x200005f0
    2908:	00000bd1 	.word	0x00000bd1

0000290c <configure_rtc_count>:
void configure_rtc_count(void){
    290c:	b500      	push	{lr}
    290e:	b085      	sub	sp, #20
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    2910:	2300      	movs	r3, #0
    2912:	466a      	mov	r2, sp
    2914:	70d3      	strb	r3, [r2, #3]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    2916:	9302      	str	r3, [sp, #8]
    2918:	9303      	str	r3, [sp, #12]
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    291a:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    291c:	7093      	strb	r3, [r2, #2]
	config_rtc_count.continuously_update = true;
    291e:	2301      	movs	r3, #1
    2920:	7113      	strb	r3, [r2, #4]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    2922:	4903      	ldr	r1, [pc, #12]	; (2930 <configure_rtc_count+0x24>)
    2924:	4803      	ldr	r0, [pc, #12]	; (2934 <configure_rtc_count+0x28>)
    2926:	4b04      	ldr	r3, [pc, #16]	; (2938 <configure_rtc_count+0x2c>)
    2928:	4798      	blx	r3
	//rtc_count_enable(&rtc_instance);
}
    292a:	b005      	add	sp, #20
    292c:	bd00      	pop	{pc}
    292e:	46c0      	nop			; (mov r8, r8)
    2930:	40001400 	.word	0x40001400
    2934:	20000460 	.word	0x20000460
    2938:	0000060d 	.word	0x0000060d

0000293c <configure_rtc_callbacks>:
void configure_rtc_callbacks(void)
{
    293c:	b510      	push	{r4, lr}
	rtc_count_register_callback(&rtc_instance, rtc_overflow_callback, RTC_COUNT_CALLBACK_OVERFLOW);
    293e:	4c05      	ldr	r4, [pc, #20]	; (2954 <configure_rtc_callbacks+0x18>)
    2940:	2202      	movs	r2, #2
    2942:	4905      	ldr	r1, [pc, #20]	; (2958 <configure_rtc_callbacks+0x1c>)
    2944:	0020      	movs	r0, r4
    2946:	4b05      	ldr	r3, [pc, #20]	; (295c <configure_rtc_callbacks+0x20>)
    2948:	4798      	blx	r3
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    294a:	2102      	movs	r1, #2
    294c:	0020      	movs	r0, r4
    294e:	4b04      	ldr	r3, [pc, #16]	; (2960 <configure_rtc_callbacks+0x24>)
    2950:	4798      	blx	r3
}
    2952:	bd10      	pop	{r4, pc}
    2954:	20000460 	.word	0x20000460
    2958:	0000257d 	.word	0x0000257d
    295c:	00000711 	.word	0x00000711
    2960:	00000749 	.word	0x00000749

00002964 <configure_event_controller>:
void configure_event_controller(void){
    2964:	b5f0      	push	{r4, r5, r6, r7, lr}
    2966:	46c6      	mov	lr, r8
    2968:	b500      	push	{lr}
    296a:	b086      	sub	sp, #24
	// PPW: T captured in CC0, tp captured in CC1
	// f = 1/T, dutyCycle = tp / T
	events_tc.event_action = TC_EVENT_ACTION_PWP;
    296c:	4b39      	ldr	r3, [pc, #228]	; (2a54 <configure_event_controller+0xf0>)
    296e:	2206      	movs	r2, #6
    2970:	715a      	strb	r2, [r3, #5]
	// Enable the event action
	events_tc.on_event_perform_action = 1;
    2972:	3a05      	subs	r2, #5
    2974:	70da      	strb	r2, [r3, #3]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Tc *const tc_module = module_inst->hw;
    2976:	4a38      	ldr	r2, [pc, #224]	; (2a58 <configure_event_controller+0xf4>)
    2978:	6811      	ldr	r1, [r2, #0]

	uint32_t event_mask = 0;

	if (events->invert_event_input == true) {
    297a:	791b      	ldrb	r3, [r3, #4]
		event_mask |= TC_EVCTRL_TCINV;
    297c:	1e5a      	subs	r2, r3, #1
    297e:	4193      	sbcs	r3, r2
    2980:	011b      	lsls	r3, r3, #4

	if (events->on_event_perform_action == true) {
		event_mask |= TC_EVCTRL_TCEI;
	}

	if (events->generate_event_on_overflow == true) {
    2982:	4a34      	ldr	r2, [pc, #208]	; (2a54 <configure_event_controller+0xf0>)
    2984:	7892      	ldrb	r2, [r2, #2]
    2986:	2a00      	cmp	r2, #0
    2988:	d15f      	bne.n	2a4a <configure_event_controller+0xe6>
		event_mask |= TC_EVCTRL_TCEI;
    298a:	3220      	adds	r2, #32
    298c:	4313      	orrs	r3, r2
		event_mask |= TC_EVCTRL_OVFEO;
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (events->generate_event_on_compare_channel[i] == true) {
    298e:	4a31      	ldr	r2, [pc, #196]	; (2a54 <configure_event_controller+0xf0>)
    2990:	7812      	ldrb	r2, [r2, #0]
    2992:	2a00      	cmp	r2, #0
    2994:	d002      	beq.n	299c <configure_event_controller+0x38>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    2996:	2280      	movs	r2, #128	; 0x80
    2998:	0152      	lsls	r2, r2, #5
    299a:	4313      	orrs	r3, r2
		if (events->generate_event_on_compare_channel[i] == true) {
    299c:	4a2d      	ldr	r2, [pc, #180]	; (2a54 <configure_event_controller+0xf0>)
    299e:	7852      	ldrb	r2, [r2, #1]
    29a0:	2a00      	cmp	r2, #0
    29a2:	d002      	beq.n	29aa <configure_event_controller+0x46>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    29a4:	2280      	movs	r2, #128	; 0x80
    29a6:	0192      	lsls	r2, r2, #6
    29a8:	4313      	orrs	r3, r2
		}
	}

	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
    29aa:	894a      	ldrh	r2, [r1, #10]
    29ac:	2006      	movs	r0, #6
    29ae:	4302      	orrs	r2, r0
    29b0:	4313      	orrs	r3, r2
    29b2:	b29b      	uxth	r3, r3
    29b4:	814b      	strh	r3, [r1, #10]
	tc_enable_events(&capture_instance, &events_tc);
	tc_register_callback(&capture_instance, capture_event_callback, TC_CALLBACK_CC_CHANNEL0);
    29b6:	4c28      	ldr	r4, [pc, #160]	; (2a58 <configure_event_controller+0xf4>)
    29b8:	2202      	movs	r2, #2
    29ba:	4928      	ldr	r1, [pc, #160]	; (2a5c <configure_event_controller+0xf8>)
    29bc:	0020      	movs	r0, r4
    29be:	4b28      	ldr	r3, [pc, #160]	; (2a60 <configure_event_controller+0xfc>)
    29c0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    29c2:	6820      	ldr	r0, [r4, #0]
    29c4:	4b27      	ldr	r3, [pc, #156]	; (2a64 <configure_event_controller+0x100>)
    29c6:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    29c8:	4b27      	ldr	r3, [pc, #156]	; (2a68 <configure_event_controller+0x104>)
    29ca:	5c1a      	ldrb	r2, [r3, r0]
    29cc:	231f      	movs	r3, #31
    29ce:	4013      	ands	r3, r2
    29d0:	2201      	movs	r2, #1
    29d2:	4690      	mov	r8, r2
    29d4:	409a      	lsls	r2, r3
    29d6:	4b25      	ldr	r3, [pc, #148]	; (2a6c <configure_event_controller+0x108>)
    29d8:	601a      	str	r2, [r3, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    29da:	7e63      	ldrb	r3, [r4, #25]
    29dc:	2210      	movs	r2, #16
    29de:	4313      	orrs	r3, r2
    29e0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    29e2:	2310      	movs	r3, #16
    29e4:	6822      	ldr	r2, [r4, #0]
    29e6:	7353      	strb	r3, [r2, #13]
	tc_enable_callback(&capture_instance, TC_CALLBACK_CC_CHANNEL0);

	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    29e8:	ad03      	add	r5, sp, #12
    29ea:	0028      	movs	r0, r5
    29ec:	4b20      	ldr	r3, [pc, #128]	; (2a70 <configure_event_controller+0x10c>)
    29ee:	4798      	blx	r3

	config_extint_chan.gpio_pin           = FREQ_PIN;
    29f0:	2312      	movs	r3, #18
    29f2:	9303      	str	r3, [sp, #12]
	config_extint_chan.gpio_pin_mux       = FREQ_MUX;
    29f4:	2600      	movs	r6, #0
    29f6:	606e      	str	r6, [r5, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
    29f8:	2702      	movs	r7, #2
    29fa:	722f      	strb	r7, [r5, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_HIGH;
    29fc:	3b0e      	subs	r3, #14
    29fe:	72eb      	strb	r3, [r5, #11]
	config_extint_chan.wake_if_sleeping   = 0;
    2a00:	726e      	strb	r6, [r5, #9]
	extint_chan_set_config(2, &config_extint_chan); //change first parameter to number of EXTINT channel
    2a02:	0029      	movs	r1, r5
    2a04:	2002      	movs	r0, #2
    2a06:	4b1b      	ldr	r3, [pc, #108]	; (2a74 <configure_event_controller+0x110>)
    2a08:	4798      	blx	r3
	eic_events.generate_event_on_detect[2] = 1; //change [2] to number of EXTINT channel
    2a0a:	4b1b      	ldr	r3, [pc, #108]	; (2a78 <configure_event_controller+0x114>)
    2a0c:	4642      	mov	r2, r8
    2a0e:	709a      	strb	r2, [r3, #2]
	struct events_resource capture_event;
	struct events_config config_evt;
	events_get_config_defaults(&config_evt);
    2a10:	4668      	mov	r0, sp
    2a12:	4b1a      	ldr	r3, [pc, #104]	; (2a7c <configure_event_controller+0x118>)
    2a14:	4798      	blx	r3
	config_evt.generator      = BOARD_PHOTODIODE_GEN;
    2a16:	230e      	movs	r3, #14
    2a18:	466a      	mov	r2, sp
    2a1a:	7093      	strb	r3, [r2, #2]
	config_evt.edge_detect    = EVENTS_EDGE_DETECT_NONE;
    2a1c:	7016      	strb	r6, [r2, #0]
	config_evt.path           = EVENTS_PATH_ASYNCHRONOUS;
    2a1e:	7057      	strb	r7, [r2, #1]
	events_allocate(&capture_event, &config_evt);
    2a20:	4669      	mov	r1, sp
    2a22:	a801      	add	r0, sp, #4
    2a24:	4b16      	ldr	r3, [pc, #88]	; (2a80 <configure_event_controller+0x11c>)
    2a26:	4798      	blx	r3
	events_attach_user(&capture_event, EVSYS_ID_USER_TC4_EVU);
    2a28:	2113      	movs	r1, #19
    2a2a:	a801      	add	r0, sp, #4
    2a2c:	4b15      	ldr	r3, [pc, #84]	; (2a84 <configure_event_controller+0x120>)
    2a2e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2a30:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2a32:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2a34:	b25b      	sxtb	r3, r3
    2a36:	2b00      	cmp	r3, #0
    2a38:	dbfb      	blt.n	2a32 <configure_event_controller+0xce>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2a3a:	8813      	ldrh	r3, [r2, #0]
    2a3c:	2102      	movs	r1, #2
    2a3e:	430b      	orrs	r3, r1
    2a40:	8013      	strh	r3, [r2, #0]
	//extint_enable_events(&eic_events);
	tc_enable(&capture_instance);
} 
    2a42:	b006      	add	sp, #24
    2a44:	bc04      	pop	{r2}
    2a46:	4690      	mov	r8, r2
    2a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		event_mask |= TC_EVCTRL_OVFEO;
    2a4a:	2290      	movs	r2, #144	; 0x90
    2a4c:	0052      	lsls	r2, r2, #1
    2a4e:	4313      	orrs	r3, r2
    2a50:	e79d      	b.n	298e <configure_event_controller+0x2a>
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	20000540 	.word	0x20000540
    2a58:	200005f0 	.word	0x200005f0
    2a5c:	00002591 	.word	0x00002591
    2a60:	00000ad1 	.word	0x00000ad1
    2a64:	00000b99 	.word	0x00000b99
    2a68:	00003004 	.word	0x00003004
    2a6c:	e000e100 	.word	0xe000e100
    2a70:	000003c9 	.word	0x000003c9
    2a74:	000003dd 	.word	0x000003dd
    2a78:	200005d0 	.word	0x200005d0
    2a7c:	0000020d 	.word	0x0000020d
    2a80:	0000021d 	.word	0x0000021d
    2a84:	000002cd 	.word	0x000002cd

00002a88 <main>:
		usart_read_buffer_job(&usart_terminal,in,INPUT_BUFFER_SIZE);
	}
		usart_write_buffer_wait(&usart_terminal, in, sizeof(in));
}
int main (void)
{
    2a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a8a:	46de      	mov	lr, fp
    2a8c:	b500      	push	{lr}
    2a8e:	b08e      	sub	sp, #56	; 0x38
	system_init();
    2a90:	4b3a      	ldr	r3, [pc, #232]	; (2b7c <main+0xf4>)
    2a92:	4798      	blx	r3
	board_init();
    2a94:	4b3a      	ldr	r3, [pc, #232]	; (2b80 <main+0xf8>)
    2a96:	4798      	blx	r3
	configure_terminal();
    2a98:	4b3a      	ldr	r3, [pc, #232]	; (2b84 <main+0xfc>)
    2a9a:	4798      	blx	r3
	configure_pinmux();
    2a9c:	4b3a      	ldr	r3, [pc, #232]	; (2b88 <main+0x100>)
    2a9e:	4798      	blx	r3
	configure_port_pins();
    2aa0:	4b3a      	ldr	r3, [pc, #232]	; (2b8c <main+0x104>)
    2aa2:	4798      	blx	r3
	configure_spi_master();
    2aa4:	4b3a      	ldr	r3, [pc, #232]	; (2b90 <main+0x108>)
    2aa6:	4798      	blx	r3
	delay_init();
    2aa8:	4b3a      	ldr	r3, [pc, #232]	; (2b94 <main+0x10c>)
    2aaa:	4798      	blx	r3
	configure_tc();
    2aac:	4b3a      	ldr	r3, [pc, #232]	; (2b98 <main+0x110>)
    2aae:	4798      	blx	r3
    configure_event_controller();
    2ab0:	4b3a      	ldr	r3, [pc, #232]	; (2b9c <main+0x114>)
    2ab2:	4798      	blx	r3
	cpu_irq_enable();
    2ab4:	4d3a      	ldr	r5, [pc, #232]	; (2ba0 <main+0x118>)
    2ab6:	2401      	movs	r4, #1
    2ab8:	702c      	strb	r4, [r5, #0]
    2aba:	f3bf 8f5f 	dmb	sy
    2abe:	b662      	cpsie	i
	system_interrupt_enable_global();
	configure_rtc_count();
    2ac0:	4b38      	ldr	r3, [pc, #224]	; (2ba4 <main+0x11c>)
    2ac2:	4798      	blx	r3
	configure_rtc_callbacks();
    2ac4:	4b38      	ldr	r3, [pc, #224]	; (2ba8 <main+0x120>)
    2ac6:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, OFF_TIME-50);
    2ac8:	4938      	ldr	r1, [pc, #224]	; (2bac <main+0x124>)
    2aca:	4839      	ldr	r0, [pc, #228]	; (2bb0 <main+0x128>)
    2acc:	4b39      	ldr	r3, [pc, #228]	; (2bb4 <main+0x12c>)
    2ace:	4798      	blx	r3
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2ad0:	4b39      	ldr	r3, [pc, #228]	; (2bb8 <main+0x130>)
    2ad2:	2600      	movs	r6, #0
    2ad4:	701e      	strb	r6, [r3, #0]
    2ad6:	705e      	strb	r6, [r3, #1]
    2ad8:	709e      	strb	r6, [r3, #2]
    2ada:	70de      	strb	r6, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2adc:	711c      	strb	r4, [r3, #4]
	sleepmgr_init();
	send_data.master = spi_master_instance;
    2ade:	4c37      	ldr	r4, [pc, #220]	; (2bbc <main+0x134>)
    2ae0:	223c      	movs	r2, #60	; 0x3c
    2ae2:	4937      	ldr	r1, [pc, #220]	; (2bc0 <main+0x138>)
    2ae4:	0020      	movs	r0, r4
    2ae6:	4f37      	ldr	r7, [pc, #220]	; (2bc4 <main+0x13c>)
    2ae8:	47b8      	blx	r7
	send_data.slave = slave;
    2aea:	0020      	movs	r0, r4
    2aec:	303c      	adds	r0, #60	; 0x3c
    2aee:	2203      	movs	r2, #3
    2af0:	4935      	ldr	r1, [pc, #212]	; (2bc8 <main+0x140>)
    2af2:	47b8      	blx	r7
	send_data.address = 0x000000;
    2af4:	6426      	str	r6, [r4, #64]	; 0x40
	send_data.data = wd_buffer;
    2af6:	4b35      	ldr	r3, [pc, #212]	; (2bcc <main+0x144>)
    2af8:	6463      	str	r3, [r4, #68]	; 0x44
	get_data.master = spi_master_instance;
    2afa:	4b35      	ldr	r3, [pc, #212]	; (2bd0 <main+0x148>)
    2afc:	469b      	mov	fp, r3
    2afe:	223c      	movs	r2, #60	; 0x3c
    2b00:	492f      	ldr	r1, [pc, #188]	; (2bc0 <main+0x138>)
    2b02:	0018      	movs	r0, r3
    2b04:	47b8      	blx	r7
	get_data.slave = slave;
    2b06:	4658      	mov	r0, fp
    2b08:	303c      	adds	r0, #60	; 0x3c
    2b0a:	2203      	movs	r2, #3
    2b0c:	492e      	ldr	r1, [pc, #184]	; (2bc8 <main+0x140>)
    2b0e:	47b8      	blx	r7
	get_data.address = 0x000000;
    2b10:	465b      	mov	r3, fp
    2b12:	641e      	str	r6, [r3, #64]	; 0x40
	get_data.data = rd_buffer;
    2b14:	4b2f      	ldr	r3, [pc, #188]	; (2bd4 <main+0x14c>)
    2b16:	465a      	mov	r2, fp
    2b18:	6453      	str	r3, [r2, #68]	; 0x44
	spi_erase_chip(send_data);
    2b1a:	0021      	movs	r1, r4
    2b1c:	3110      	adds	r1, #16
    2b1e:	2238      	movs	r2, #56	; 0x38
    2b20:	4668      	mov	r0, sp
    2b22:	47b8      	blx	r7
    2b24:	6820      	ldr	r0, [r4, #0]
    2b26:	6861      	ldr	r1, [r4, #4]
    2b28:	68a2      	ldr	r2, [r4, #8]
    2b2a:	68e3      	ldr	r3, [r4, #12]
    2b2c:	4c2a      	ldr	r4, [pc, #168]	; (2bd8 <main+0x150>)
    2b2e:	47a0      	blx	r4
	extint_enable_events(&eic_events);
    2b30:	482a      	ldr	r0, [pc, #168]	; (2bdc <main+0x154>)
    2b32:	4b2b      	ldr	r3, [pc, #172]	; (2be0 <main+0x158>)
    2b34:	4798      	blx	r3
	rtc_count_enable(&rtc_instance); //enable rtc and sleepmgr to start sleep clock
    2b36:	481e      	ldr	r0, [pc, #120]	; (2bb0 <main+0x128>)
    2b38:	4b2a      	ldr	r3, [pc, #168]	; (2be4 <main+0x15c>)
    2b3a:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    2b3c:	b672      	cpsid	i
    2b3e:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    2b42:	702e      	strb	r6, [r5, #0]
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    2b44:	4b28      	ldr	r3, [pc, #160]	; (2be8 <main+0x160>)
    2b46:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    2b48:	051b      	lsls	r3, r3, #20
    2b4a:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    2b4c:	2b02      	cmp	r3, #2
    2b4e:	d805      	bhi.n	2b5c <main+0xd4>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    2b50:	4a26      	ldr	r2, [pc, #152]	; (2bec <main+0x164>)
    2b52:	6851      	ldr	r1, [r2, #4]
    2b54:	23c0      	movs	r3, #192	; 0xc0
    2b56:	009b      	lsls	r3, r3, #2
    2b58:	430b      	orrs	r3, r1
    2b5a:	6053      	str	r3, [r2, #4]
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    2b5c:	4a24      	ldr	r2, [pc, #144]	; (2bf0 <main+0x168>)
    2b5e:	6913      	ldr	r3, [r2, #16]
    2b60:	2104      	movs	r1, #4
    2b62:	430b      	orrs	r3, r1
    2b64:	6113      	str	r3, [r2, #16]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    2b66:	2201      	movs	r2, #1
    2b68:	4b0d      	ldr	r3, [pc, #52]	; (2ba0 <main+0x118>)
    2b6a:	701a      	strb	r2, [r3, #0]
    2b6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2b70:	b662      	cpsie	i
  __ASM volatile ("dsb");
    2b72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    2b76:	bf30      	wfi
    2b78:	e7fe      	b.n	2b78 <main+0xf0>
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	00002469 	.word	0x00002469
    2b80:	00001c35 	.word	0x00001c35
    2b84:	000026c9 	.word	0x000026c9
    2b88:	000027b5 	.word	0x000027b5
    2b8c:	00002785 	.word	0x00002785
    2b90:	000027d9 	.word	0x000027d9
    2b94:	00000115 	.word	0x00000115
    2b98:	000028bd 	.word	0x000028bd
    2b9c:	00002965 	.word	0x00002965
    2ba0:	2000001c 	.word	0x2000001c
    2ba4:	0000290d 	.word	0x0000290d
    2ba8:	0000293d 	.word	0x0000293d
    2bac:	0000173e 	.word	0x0000173e
    2bb0:	20000460 	.word	0x20000460
    2bb4:	000006ed 	.word	0x000006ed
    2bb8:	200002c8 	.word	0x200002c8
    2bbc:	20000548 	.word	0x20000548
    2bc0:	20000590 	.word	0x20000590
    2bc4:	00002f7d 	.word	0x00002f7d
    2bc8:	200005cc 	.word	0x200005cc
    2bcc:	20000020 	.word	0x20000020
    2bd0:	200004ac 	.word	0x200004ac
    2bd4:	200001bc 	.word	0x200001bc
    2bd8:	00000e6d 	.word	0x00000e6d
    2bdc:	200005d0 	.word	0x200005d0
    2be0:	00000455 	.word	0x00000455
    2be4:	000004d9 	.word	0x000004d9
    2be8:	41002000 	.word	0x41002000
    2bec:	41004000 	.word	0x41004000
    2bf0:	e000ed00 	.word	0xe000ed00

00002bf4 <__udivsi3>:
    2bf4:	2200      	movs	r2, #0
    2bf6:	0843      	lsrs	r3, r0, #1
    2bf8:	428b      	cmp	r3, r1
    2bfa:	d374      	bcc.n	2ce6 <__udivsi3+0xf2>
    2bfc:	0903      	lsrs	r3, r0, #4
    2bfe:	428b      	cmp	r3, r1
    2c00:	d35f      	bcc.n	2cc2 <__udivsi3+0xce>
    2c02:	0a03      	lsrs	r3, r0, #8
    2c04:	428b      	cmp	r3, r1
    2c06:	d344      	bcc.n	2c92 <__udivsi3+0x9e>
    2c08:	0b03      	lsrs	r3, r0, #12
    2c0a:	428b      	cmp	r3, r1
    2c0c:	d328      	bcc.n	2c60 <__udivsi3+0x6c>
    2c0e:	0c03      	lsrs	r3, r0, #16
    2c10:	428b      	cmp	r3, r1
    2c12:	d30d      	bcc.n	2c30 <__udivsi3+0x3c>
    2c14:	22ff      	movs	r2, #255	; 0xff
    2c16:	0209      	lsls	r1, r1, #8
    2c18:	ba12      	rev	r2, r2
    2c1a:	0c03      	lsrs	r3, r0, #16
    2c1c:	428b      	cmp	r3, r1
    2c1e:	d302      	bcc.n	2c26 <__udivsi3+0x32>
    2c20:	1212      	asrs	r2, r2, #8
    2c22:	0209      	lsls	r1, r1, #8
    2c24:	d065      	beq.n	2cf2 <__udivsi3+0xfe>
    2c26:	0b03      	lsrs	r3, r0, #12
    2c28:	428b      	cmp	r3, r1
    2c2a:	d319      	bcc.n	2c60 <__udivsi3+0x6c>
    2c2c:	e000      	b.n	2c30 <__udivsi3+0x3c>
    2c2e:	0a09      	lsrs	r1, r1, #8
    2c30:	0bc3      	lsrs	r3, r0, #15
    2c32:	428b      	cmp	r3, r1
    2c34:	d301      	bcc.n	2c3a <__udivsi3+0x46>
    2c36:	03cb      	lsls	r3, r1, #15
    2c38:	1ac0      	subs	r0, r0, r3
    2c3a:	4152      	adcs	r2, r2
    2c3c:	0b83      	lsrs	r3, r0, #14
    2c3e:	428b      	cmp	r3, r1
    2c40:	d301      	bcc.n	2c46 <__udivsi3+0x52>
    2c42:	038b      	lsls	r3, r1, #14
    2c44:	1ac0      	subs	r0, r0, r3
    2c46:	4152      	adcs	r2, r2
    2c48:	0b43      	lsrs	r3, r0, #13
    2c4a:	428b      	cmp	r3, r1
    2c4c:	d301      	bcc.n	2c52 <__udivsi3+0x5e>
    2c4e:	034b      	lsls	r3, r1, #13
    2c50:	1ac0      	subs	r0, r0, r3
    2c52:	4152      	adcs	r2, r2
    2c54:	0b03      	lsrs	r3, r0, #12
    2c56:	428b      	cmp	r3, r1
    2c58:	d301      	bcc.n	2c5e <__udivsi3+0x6a>
    2c5a:	030b      	lsls	r3, r1, #12
    2c5c:	1ac0      	subs	r0, r0, r3
    2c5e:	4152      	adcs	r2, r2
    2c60:	0ac3      	lsrs	r3, r0, #11
    2c62:	428b      	cmp	r3, r1
    2c64:	d301      	bcc.n	2c6a <__udivsi3+0x76>
    2c66:	02cb      	lsls	r3, r1, #11
    2c68:	1ac0      	subs	r0, r0, r3
    2c6a:	4152      	adcs	r2, r2
    2c6c:	0a83      	lsrs	r3, r0, #10
    2c6e:	428b      	cmp	r3, r1
    2c70:	d301      	bcc.n	2c76 <__udivsi3+0x82>
    2c72:	028b      	lsls	r3, r1, #10
    2c74:	1ac0      	subs	r0, r0, r3
    2c76:	4152      	adcs	r2, r2
    2c78:	0a43      	lsrs	r3, r0, #9
    2c7a:	428b      	cmp	r3, r1
    2c7c:	d301      	bcc.n	2c82 <__udivsi3+0x8e>
    2c7e:	024b      	lsls	r3, r1, #9
    2c80:	1ac0      	subs	r0, r0, r3
    2c82:	4152      	adcs	r2, r2
    2c84:	0a03      	lsrs	r3, r0, #8
    2c86:	428b      	cmp	r3, r1
    2c88:	d301      	bcc.n	2c8e <__udivsi3+0x9a>
    2c8a:	020b      	lsls	r3, r1, #8
    2c8c:	1ac0      	subs	r0, r0, r3
    2c8e:	4152      	adcs	r2, r2
    2c90:	d2cd      	bcs.n	2c2e <__udivsi3+0x3a>
    2c92:	09c3      	lsrs	r3, r0, #7
    2c94:	428b      	cmp	r3, r1
    2c96:	d301      	bcc.n	2c9c <__udivsi3+0xa8>
    2c98:	01cb      	lsls	r3, r1, #7
    2c9a:	1ac0      	subs	r0, r0, r3
    2c9c:	4152      	adcs	r2, r2
    2c9e:	0983      	lsrs	r3, r0, #6
    2ca0:	428b      	cmp	r3, r1
    2ca2:	d301      	bcc.n	2ca8 <__udivsi3+0xb4>
    2ca4:	018b      	lsls	r3, r1, #6
    2ca6:	1ac0      	subs	r0, r0, r3
    2ca8:	4152      	adcs	r2, r2
    2caa:	0943      	lsrs	r3, r0, #5
    2cac:	428b      	cmp	r3, r1
    2cae:	d301      	bcc.n	2cb4 <__udivsi3+0xc0>
    2cb0:	014b      	lsls	r3, r1, #5
    2cb2:	1ac0      	subs	r0, r0, r3
    2cb4:	4152      	adcs	r2, r2
    2cb6:	0903      	lsrs	r3, r0, #4
    2cb8:	428b      	cmp	r3, r1
    2cba:	d301      	bcc.n	2cc0 <__udivsi3+0xcc>
    2cbc:	010b      	lsls	r3, r1, #4
    2cbe:	1ac0      	subs	r0, r0, r3
    2cc0:	4152      	adcs	r2, r2
    2cc2:	08c3      	lsrs	r3, r0, #3
    2cc4:	428b      	cmp	r3, r1
    2cc6:	d301      	bcc.n	2ccc <__udivsi3+0xd8>
    2cc8:	00cb      	lsls	r3, r1, #3
    2cca:	1ac0      	subs	r0, r0, r3
    2ccc:	4152      	adcs	r2, r2
    2cce:	0883      	lsrs	r3, r0, #2
    2cd0:	428b      	cmp	r3, r1
    2cd2:	d301      	bcc.n	2cd8 <__udivsi3+0xe4>
    2cd4:	008b      	lsls	r3, r1, #2
    2cd6:	1ac0      	subs	r0, r0, r3
    2cd8:	4152      	adcs	r2, r2
    2cda:	0843      	lsrs	r3, r0, #1
    2cdc:	428b      	cmp	r3, r1
    2cde:	d301      	bcc.n	2ce4 <__udivsi3+0xf0>
    2ce0:	004b      	lsls	r3, r1, #1
    2ce2:	1ac0      	subs	r0, r0, r3
    2ce4:	4152      	adcs	r2, r2
    2ce6:	1a41      	subs	r1, r0, r1
    2ce8:	d200      	bcs.n	2cec <__udivsi3+0xf8>
    2cea:	4601      	mov	r1, r0
    2cec:	4152      	adcs	r2, r2
    2cee:	4610      	mov	r0, r2
    2cf0:	4770      	bx	lr
    2cf2:	e7ff      	b.n	2cf4 <__udivsi3+0x100>
    2cf4:	b501      	push	{r0, lr}
    2cf6:	2000      	movs	r0, #0
    2cf8:	f000 f8f0 	bl	2edc <__aeabi_idiv0>
    2cfc:	bd02      	pop	{r1, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)

00002d00 <__aeabi_uidivmod>:
    2d00:	2900      	cmp	r1, #0
    2d02:	d0f7      	beq.n	2cf4 <__udivsi3+0x100>
    2d04:	e776      	b.n	2bf4 <__udivsi3>
    2d06:	4770      	bx	lr

00002d08 <__divsi3>:
    2d08:	4603      	mov	r3, r0
    2d0a:	430b      	orrs	r3, r1
    2d0c:	d47f      	bmi.n	2e0e <__divsi3+0x106>
    2d0e:	2200      	movs	r2, #0
    2d10:	0843      	lsrs	r3, r0, #1
    2d12:	428b      	cmp	r3, r1
    2d14:	d374      	bcc.n	2e00 <__divsi3+0xf8>
    2d16:	0903      	lsrs	r3, r0, #4
    2d18:	428b      	cmp	r3, r1
    2d1a:	d35f      	bcc.n	2ddc <__divsi3+0xd4>
    2d1c:	0a03      	lsrs	r3, r0, #8
    2d1e:	428b      	cmp	r3, r1
    2d20:	d344      	bcc.n	2dac <__divsi3+0xa4>
    2d22:	0b03      	lsrs	r3, r0, #12
    2d24:	428b      	cmp	r3, r1
    2d26:	d328      	bcc.n	2d7a <__divsi3+0x72>
    2d28:	0c03      	lsrs	r3, r0, #16
    2d2a:	428b      	cmp	r3, r1
    2d2c:	d30d      	bcc.n	2d4a <__divsi3+0x42>
    2d2e:	22ff      	movs	r2, #255	; 0xff
    2d30:	0209      	lsls	r1, r1, #8
    2d32:	ba12      	rev	r2, r2
    2d34:	0c03      	lsrs	r3, r0, #16
    2d36:	428b      	cmp	r3, r1
    2d38:	d302      	bcc.n	2d40 <__divsi3+0x38>
    2d3a:	1212      	asrs	r2, r2, #8
    2d3c:	0209      	lsls	r1, r1, #8
    2d3e:	d065      	beq.n	2e0c <__divsi3+0x104>
    2d40:	0b03      	lsrs	r3, r0, #12
    2d42:	428b      	cmp	r3, r1
    2d44:	d319      	bcc.n	2d7a <__divsi3+0x72>
    2d46:	e000      	b.n	2d4a <__divsi3+0x42>
    2d48:	0a09      	lsrs	r1, r1, #8
    2d4a:	0bc3      	lsrs	r3, r0, #15
    2d4c:	428b      	cmp	r3, r1
    2d4e:	d301      	bcc.n	2d54 <__divsi3+0x4c>
    2d50:	03cb      	lsls	r3, r1, #15
    2d52:	1ac0      	subs	r0, r0, r3
    2d54:	4152      	adcs	r2, r2
    2d56:	0b83      	lsrs	r3, r0, #14
    2d58:	428b      	cmp	r3, r1
    2d5a:	d301      	bcc.n	2d60 <__divsi3+0x58>
    2d5c:	038b      	lsls	r3, r1, #14
    2d5e:	1ac0      	subs	r0, r0, r3
    2d60:	4152      	adcs	r2, r2
    2d62:	0b43      	lsrs	r3, r0, #13
    2d64:	428b      	cmp	r3, r1
    2d66:	d301      	bcc.n	2d6c <__divsi3+0x64>
    2d68:	034b      	lsls	r3, r1, #13
    2d6a:	1ac0      	subs	r0, r0, r3
    2d6c:	4152      	adcs	r2, r2
    2d6e:	0b03      	lsrs	r3, r0, #12
    2d70:	428b      	cmp	r3, r1
    2d72:	d301      	bcc.n	2d78 <__divsi3+0x70>
    2d74:	030b      	lsls	r3, r1, #12
    2d76:	1ac0      	subs	r0, r0, r3
    2d78:	4152      	adcs	r2, r2
    2d7a:	0ac3      	lsrs	r3, r0, #11
    2d7c:	428b      	cmp	r3, r1
    2d7e:	d301      	bcc.n	2d84 <__divsi3+0x7c>
    2d80:	02cb      	lsls	r3, r1, #11
    2d82:	1ac0      	subs	r0, r0, r3
    2d84:	4152      	adcs	r2, r2
    2d86:	0a83      	lsrs	r3, r0, #10
    2d88:	428b      	cmp	r3, r1
    2d8a:	d301      	bcc.n	2d90 <__divsi3+0x88>
    2d8c:	028b      	lsls	r3, r1, #10
    2d8e:	1ac0      	subs	r0, r0, r3
    2d90:	4152      	adcs	r2, r2
    2d92:	0a43      	lsrs	r3, r0, #9
    2d94:	428b      	cmp	r3, r1
    2d96:	d301      	bcc.n	2d9c <__divsi3+0x94>
    2d98:	024b      	lsls	r3, r1, #9
    2d9a:	1ac0      	subs	r0, r0, r3
    2d9c:	4152      	adcs	r2, r2
    2d9e:	0a03      	lsrs	r3, r0, #8
    2da0:	428b      	cmp	r3, r1
    2da2:	d301      	bcc.n	2da8 <__divsi3+0xa0>
    2da4:	020b      	lsls	r3, r1, #8
    2da6:	1ac0      	subs	r0, r0, r3
    2da8:	4152      	adcs	r2, r2
    2daa:	d2cd      	bcs.n	2d48 <__divsi3+0x40>
    2dac:	09c3      	lsrs	r3, r0, #7
    2dae:	428b      	cmp	r3, r1
    2db0:	d301      	bcc.n	2db6 <__divsi3+0xae>
    2db2:	01cb      	lsls	r3, r1, #7
    2db4:	1ac0      	subs	r0, r0, r3
    2db6:	4152      	adcs	r2, r2
    2db8:	0983      	lsrs	r3, r0, #6
    2dba:	428b      	cmp	r3, r1
    2dbc:	d301      	bcc.n	2dc2 <__divsi3+0xba>
    2dbe:	018b      	lsls	r3, r1, #6
    2dc0:	1ac0      	subs	r0, r0, r3
    2dc2:	4152      	adcs	r2, r2
    2dc4:	0943      	lsrs	r3, r0, #5
    2dc6:	428b      	cmp	r3, r1
    2dc8:	d301      	bcc.n	2dce <__divsi3+0xc6>
    2dca:	014b      	lsls	r3, r1, #5
    2dcc:	1ac0      	subs	r0, r0, r3
    2dce:	4152      	adcs	r2, r2
    2dd0:	0903      	lsrs	r3, r0, #4
    2dd2:	428b      	cmp	r3, r1
    2dd4:	d301      	bcc.n	2dda <__divsi3+0xd2>
    2dd6:	010b      	lsls	r3, r1, #4
    2dd8:	1ac0      	subs	r0, r0, r3
    2dda:	4152      	adcs	r2, r2
    2ddc:	08c3      	lsrs	r3, r0, #3
    2dde:	428b      	cmp	r3, r1
    2de0:	d301      	bcc.n	2de6 <__divsi3+0xde>
    2de2:	00cb      	lsls	r3, r1, #3
    2de4:	1ac0      	subs	r0, r0, r3
    2de6:	4152      	adcs	r2, r2
    2de8:	0883      	lsrs	r3, r0, #2
    2dea:	428b      	cmp	r3, r1
    2dec:	d301      	bcc.n	2df2 <__divsi3+0xea>
    2dee:	008b      	lsls	r3, r1, #2
    2df0:	1ac0      	subs	r0, r0, r3
    2df2:	4152      	adcs	r2, r2
    2df4:	0843      	lsrs	r3, r0, #1
    2df6:	428b      	cmp	r3, r1
    2df8:	d301      	bcc.n	2dfe <__divsi3+0xf6>
    2dfa:	004b      	lsls	r3, r1, #1
    2dfc:	1ac0      	subs	r0, r0, r3
    2dfe:	4152      	adcs	r2, r2
    2e00:	1a41      	subs	r1, r0, r1
    2e02:	d200      	bcs.n	2e06 <__divsi3+0xfe>
    2e04:	4601      	mov	r1, r0
    2e06:	4152      	adcs	r2, r2
    2e08:	4610      	mov	r0, r2
    2e0a:	4770      	bx	lr
    2e0c:	e05d      	b.n	2eca <__divsi3+0x1c2>
    2e0e:	0fca      	lsrs	r2, r1, #31
    2e10:	d000      	beq.n	2e14 <__divsi3+0x10c>
    2e12:	4249      	negs	r1, r1
    2e14:	1003      	asrs	r3, r0, #32
    2e16:	d300      	bcc.n	2e1a <__divsi3+0x112>
    2e18:	4240      	negs	r0, r0
    2e1a:	4053      	eors	r3, r2
    2e1c:	2200      	movs	r2, #0
    2e1e:	469c      	mov	ip, r3
    2e20:	0903      	lsrs	r3, r0, #4
    2e22:	428b      	cmp	r3, r1
    2e24:	d32d      	bcc.n	2e82 <__divsi3+0x17a>
    2e26:	0a03      	lsrs	r3, r0, #8
    2e28:	428b      	cmp	r3, r1
    2e2a:	d312      	bcc.n	2e52 <__divsi3+0x14a>
    2e2c:	22fc      	movs	r2, #252	; 0xfc
    2e2e:	0189      	lsls	r1, r1, #6
    2e30:	ba12      	rev	r2, r2
    2e32:	0a03      	lsrs	r3, r0, #8
    2e34:	428b      	cmp	r3, r1
    2e36:	d30c      	bcc.n	2e52 <__divsi3+0x14a>
    2e38:	0189      	lsls	r1, r1, #6
    2e3a:	1192      	asrs	r2, r2, #6
    2e3c:	428b      	cmp	r3, r1
    2e3e:	d308      	bcc.n	2e52 <__divsi3+0x14a>
    2e40:	0189      	lsls	r1, r1, #6
    2e42:	1192      	asrs	r2, r2, #6
    2e44:	428b      	cmp	r3, r1
    2e46:	d304      	bcc.n	2e52 <__divsi3+0x14a>
    2e48:	0189      	lsls	r1, r1, #6
    2e4a:	d03a      	beq.n	2ec2 <__divsi3+0x1ba>
    2e4c:	1192      	asrs	r2, r2, #6
    2e4e:	e000      	b.n	2e52 <__divsi3+0x14a>
    2e50:	0989      	lsrs	r1, r1, #6
    2e52:	09c3      	lsrs	r3, r0, #7
    2e54:	428b      	cmp	r3, r1
    2e56:	d301      	bcc.n	2e5c <__divsi3+0x154>
    2e58:	01cb      	lsls	r3, r1, #7
    2e5a:	1ac0      	subs	r0, r0, r3
    2e5c:	4152      	adcs	r2, r2
    2e5e:	0983      	lsrs	r3, r0, #6
    2e60:	428b      	cmp	r3, r1
    2e62:	d301      	bcc.n	2e68 <__divsi3+0x160>
    2e64:	018b      	lsls	r3, r1, #6
    2e66:	1ac0      	subs	r0, r0, r3
    2e68:	4152      	adcs	r2, r2
    2e6a:	0943      	lsrs	r3, r0, #5
    2e6c:	428b      	cmp	r3, r1
    2e6e:	d301      	bcc.n	2e74 <__divsi3+0x16c>
    2e70:	014b      	lsls	r3, r1, #5
    2e72:	1ac0      	subs	r0, r0, r3
    2e74:	4152      	adcs	r2, r2
    2e76:	0903      	lsrs	r3, r0, #4
    2e78:	428b      	cmp	r3, r1
    2e7a:	d301      	bcc.n	2e80 <__divsi3+0x178>
    2e7c:	010b      	lsls	r3, r1, #4
    2e7e:	1ac0      	subs	r0, r0, r3
    2e80:	4152      	adcs	r2, r2
    2e82:	08c3      	lsrs	r3, r0, #3
    2e84:	428b      	cmp	r3, r1
    2e86:	d301      	bcc.n	2e8c <__divsi3+0x184>
    2e88:	00cb      	lsls	r3, r1, #3
    2e8a:	1ac0      	subs	r0, r0, r3
    2e8c:	4152      	adcs	r2, r2
    2e8e:	0883      	lsrs	r3, r0, #2
    2e90:	428b      	cmp	r3, r1
    2e92:	d301      	bcc.n	2e98 <__divsi3+0x190>
    2e94:	008b      	lsls	r3, r1, #2
    2e96:	1ac0      	subs	r0, r0, r3
    2e98:	4152      	adcs	r2, r2
    2e9a:	d2d9      	bcs.n	2e50 <__divsi3+0x148>
    2e9c:	0843      	lsrs	r3, r0, #1
    2e9e:	428b      	cmp	r3, r1
    2ea0:	d301      	bcc.n	2ea6 <__divsi3+0x19e>
    2ea2:	004b      	lsls	r3, r1, #1
    2ea4:	1ac0      	subs	r0, r0, r3
    2ea6:	4152      	adcs	r2, r2
    2ea8:	1a41      	subs	r1, r0, r1
    2eaa:	d200      	bcs.n	2eae <__divsi3+0x1a6>
    2eac:	4601      	mov	r1, r0
    2eae:	4663      	mov	r3, ip
    2eb0:	4152      	adcs	r2, r2
    2eb2:	105b      	asrs	r3, r3, #1
    2eb4:	4610      	mov	r0, r2
    2eb6:	d301      	bcc.n	2ebc <__divsi3+0x1b4>
    2eb8:	4240      	negs	r0, r0
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d500      	bpl.n	2ec0 <__divsi3+0x1b8>
    2ebe:	4249      	negs	r1, r1
    2ec0:	4770      	bx	lr
    2ec2:	4663      	mov	r3, ip
    2ec4:	105b      	asrs	r3, r3, #1
    2ec6:	d300      	bcc.n	2eca <__divsi3+0x1c2>
    2ec8:	4240      	negs	r0, r0
    2eca:	b501      	push	{r0, lr}
    2ecc:	2000      	movs	r0, #0
    2ece:	f000 f805 	bl	2edc <__aeabi_idiv0>
    2ed2:	bd02      	pop	{r1, pc}

00002ed4 <__aeabi_idivmod>:
    2ed4:	2900      	cmp	r1, #0
    2ed6:	d0f8      	beq.n	2eca <__divsi3+0x1c2>
    2ed8:	e716      	b.n	2d08 <__divsi3>
    2eda:	4770      	bx	lr

00002edc <__aeabi_idiv0>:
    2edc:	4770      	bx	lr
    2ede:	46c0      	nop			; (mov r8, r8)

00002ee0 <__aeabi_lmul>:
    2ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ee2:	46ce      	mov	lr, r9
    2ee4:	4647      	mov	r7, r8
    2ee6:	0415      	lsls	r5, r2, #16
    2ee8:	0c2d      	lsrs	r5, r5, #16
    2eea:	002e      	movs	r6, r5
    2eec:	b580      	push	{r7, lr}
    2eee:	0407      	lsls	r7, r0, #16
    2ef0:	0c14      	lsrs	r4, r2, #16
    2ef2:	0c3f      	lsrs	r7, r7, #16
    2ef4:	4699      	mov	r9, r3
    2ef6:	0c03      	lsrs	r3, r0, #16
    2ef8:	437e      	muls	r6, r7
    2efa:	435d      	muls	r5, r3
    2efc:	4367      	muls	r7, r4
    2efe:	4363      	muls	r3, r4
    2f00:	197f      	adds	r7, r7, r5
    2f02:	0c34      	lsrs	r4, r6, #16
    2f04:	19e4      	adds	r4, r4, r7
    2f06:	469c      	mov	ip, r3
    2f08:	42a5      	cmp	r5, r4
    2f0a:	d903      	bls.n	2f14 <__aeabi_lmul+0x34>
    2f0c:	2380      	movs	r3, #128	; 0x80
    2f0e:	025b      	lsls	r3, r3, #9
    2f10:	4698      	mov	r8, r3
    2f12:	44c4      	add	ip, r8
    2f14:	464b      	mov	r3, r9
    2f16:	4351      	muls	r1, r2
    2f18:	4343      	muls	r3, r0
    2f1a:	0436      	lsls	r6, r6, #16
    2f1c:	0c36      	lsrs	r6, r6, #16
    2f1e:	0c25      	lsrs	r5, r4, #16
    2f20:	0424      	lsls	r4, r4, #16
    2f22:	4465      	add	r5, ip
    2f24:	19a4      	adds	r4, r4, r6
    2f26:	1859      	adds	r1, r3, r1
    2f28:	1949      	adds	r1, r1, r5
    2f2a:	0020      	movs	r0, r4
    2f2c:	bc0c      	pop	{r2, r3}
    2f2e:	4690      	mov	r8, r2
    2f30:	4699      	mov	r9, r3
    2f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f34 <__libc_init_array>:
    2f34:	b570      	push	{r4, r5, r6, lr}
    2f36:	2600      	movs	r6, #0
    2f38:	4d0c      	ldr	r5, [pc, #48]	; (2f6c <__libc_init_array+0x38>)
    2f3a:	4c0d      	ldr	r4, [pc, #52]	; (2f70 <__libc_init_array+0x3c>)
    2f3c:	1b64      	subs	r4, r4, r5
    2f3e:	10a4      	asrs	r4, r4, #2
    2f40:	42a6      	cmp	r6, r4
    2f42:	d109      	bne.n	2f58 <__libc_init_array+0x24>
    2f44:	2600      	movs	r6, #0
    2f46:	f000 f85f 	bl	3008 <_init>
    2f4a:	4d0a      	ldr	r5, [pc, #40]	; (2f74 <__libc_init_array+0x40>)
    2f4c:	4c0a      	ldr	r4, [pc, #40]	; (2f78 <__libc_init_array+0x44>)
    2f4e:	1b64      	subs	r4, r4, r5
    2f50:	10a4      	asrs	r4, r4, #2
    2f52:	42a6      	cmp	r6, r4
    2f54:	d105      	bne.n	2f62 <__libc_init_array+0x2e>
    2f56:	bd70      	pop	{r4, r5, r6, pc}
    2f58:	00b3      	lsls	r3, r6, #2
    2f5a:	58eb      	ldr	r3, [r5, r3]
    2f5c:	4798      	blx	r3
    2f5e:	3601      	adds	r6, #1
    2f60:	e7ee      	b.n	2f40 <__libc_init_array+0xc>
    2f62:	00b3      	lsls	r3, r6, #2
    2f64:	58eb      	ldr	r3, [r5, r3]
    2f66:	4798      	blx	r3
    2f68:	3601      	adds	r6, #1
    2f6a:	e7f2      	b.n	2f52 <__libc_init_array+0x1e>
    2f6c:	00003014 	.word	0x00003014
    2f70:	00003014 	.word	0x00003014
    2f74:	00003014 	.word	0x00003014
    2f78:	00003018 	.word	0x00003018

00002f7c <memcpy>:
    2f7c:	2300      	movs	r3, #0
    2f7e:	b510      	push	{r4, lr}
    2f80:	429a      	cmp	r2, r3
    2f82:	d100      	bne.n	2f86 <memcpy+0xa>
    2f84:	bd10      	pop	{r4, pc}
    2f86:	5ccc      	ldrb	r4, [r1, r3]
    2f88:	54c4      	strb	r4, [r0, r3]
    2f8a:	3301      	adds	r3, #1
    2f8c:	e7f8      	b.n	2f80 <memcpy+0x4>

00002f8e <memset>:
    2f8e:	0003      	movs	r3, r0
    2f90:	1882      	adds	r2, r0, r2
    2f92:	4293      	cmp	r3, r2
    2f94:	d100      	bne.n	2f98 <memset+0xa>
    2f96:	4770      	bx	lr
    2f98:	7019      	strb	r1, [r3, #0]
    2f9a:	3301      	adds	r3, #1
    2f9c:	e7f9      	b.n	2f92 <memset+0x4>
    2f9e:	0000      	movs	r0, r0
    2fa0:	42000800 	.word	0x42000800
    2fa4:	42000c00 	.word	0x42000c00
    2fa8:	42001000 	.word	0x42001000
    2fac:	42001400 	.word	0x42001400
    2fb0:	42002c00 	.word	0x42002c00
    2fb4:	42003000 	.word	0x42003000
    2fb8:	42003400 	.word	0x42003400
    2fbc:	00001cba 	.word	0x00001cba
    2fc0:	00001cb6 	.word	0x00001cb6
    2fc4:	00001cb6 	.word	0x00001cb6
    2fc8:	00001d18 	.word	0x00001d18
    2fcc:	00001d18 	.word	0x00001d18
    2fd0:	00001cce 	.word	0x00001cce
    2fd4:	00001cc0 	.word	0x00001cc0
    2fd8:	00001cd4 	.word	0x00001cd4
    2fdc:	00001d06 	.word	0x00001d06
    2fe0:	00001efc 	.word	0x00001efc
    2fe4:	00001edc 	.word	0x00001edc
    2fe8:	00001edc 	.word	0x00001edc
    2fec:	00001f68 	.word	0x00001f68
    2ff0:	00001eee 	.word	0x00001eee
    2ff4:	00001f0a 	.word	0x00001f0a
    2ff8:	00001ee0 	.word	0x00001ee0
    2ffc:	00001f18 	.word	0x00001f18
    3000:	00001f58 	.word	0x00001f58

00003004 <tc_interrupt_vectors.13380>:
    3004:	00141312                                ....

00003008 <_init>:
    3008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    300a:	46c0      	nop			; (mov r8, r8)
    300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    300e:	bc08      	pop	{r3}
    3010:	469e      	mov	lr, r3
    3012:	4770      	bx	lr

00003014 <__init_array_start>:
    3014:	000000dd 	.word	0x000000dd

00003018 <_fini>:
    3018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    301a:	46c0      	nop			; (mov r8, r8)
    301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    301e:	bc08      	pop	{r3}
    3020:	469e      	mov	lr, r3
    3022:	4770      	bx	lr

00003024 <__fini_array_start>:
    3024:	000000b5 	.word	0x000000b5
