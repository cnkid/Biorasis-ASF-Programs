
Rat sensor board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004438  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00004438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008a8  20000020  00004458  00020020  2**3
                  ALLOC
  3 .stack        00000800  200008c8  00004d00  00020020  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004cafe  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006457  00000000  00000000  0006cb9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c45a  00000000  00000000  00072ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008e8  00000000  00000000  0007f450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001140  00000000  00000000  0007fd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d2a6  00000000  00000000  00080e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000157fe  00000000  00000000  0009e11e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008784a  00000000  00000000  000b391c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001678  00000000  00000000  0013b168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 10 00 20 dd 32 00 00 d9 32 00 00 d9 32 00 00     ... .2...2...2..
	...
      2c:	d9 32 00 00 00 00 00 00 00 00 00 00 d9 32 00 00     .2...........2..
      3c:	d9 32 00 00 d9 32 00 00 11 37 00 00 d9 32 00 00     .2...2...7...2..
      4c:	69 0b 00 00 65 03 00 00 d9 32 00 00 d9 32 00 00     i...e....2...2..
      5c:	d9 32 00 00 21 02 00 00 9d 29 00 00 ad 29 00 00     .2..!....)...)..
      6c:	bd 29 00 00 cd 29 00 00 00 00 00 00 00 00 00 00     .)...)..........
      7c:	d9 32 00 00 d9 32 00 00 d9 32 00 00 61 0f 00 00     .2...2...2..a...
      8c:	71 0f 00 00 81 0f 00 00 00 00 00 00 00 00 00 00     q...............
      9c:	d9 32 00 00 d9 32 00 00 d9 32 00 00 d9 32 00 00     .2...2...2...2..
      ac:	d9 32 00 00 00 00 00 00                             .2......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000020 	.word	0x20000020
      d4:	00000000 	.word	0x00000000
      d8:	00004438 	.word	0x00004438

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000024 	.word	0x20000024
     108:	00004438 	.word	0x00004438
     10c:	00004438 	.word	0x00004438
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003069 	.word	0x00003069
     140:	00003ec1 	.word	0x00003ec1
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <bod_set_config>:
 * \retval STATUS_ERR_INVALID_OPTION  The requested BOD level was outside the acceptable range
 */
enum status_code bod_set_config(
		const enum bod bod_id,
		struct bod_config *const conf)
{
     1ac:	b510      	push	{r4, lr}
	Assert(conf);

	uint32_t temp = 0;

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
     1ae:	4b1b      	ldr	r3, [pc, #108]	; (21c <bod_set_config+0x70>)
     1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     1b2:	079b      	lsls	r3, r3, #30
     1b4:	d504      	bpl.n	1c0 <bod_set_config+0x14>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
     1b6:	4a19      	ldr	r2, [pc, #100]	; (21c <bod_set_config+0x70>)
     1b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
     1ba:	2402      	movs	r4, #2
     1bc:	43a3      	bics	r3, r4
     1be:	6353      	str	r3, [r2, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
			(uint32_t)conf->mode;
     1c0:	884a      	ldrh	r2, [r1, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
     1c2:	880b      	ldrh	r3, [r1, #0]
     1c4:	790c      	ldrb	r4, [r1, #4]
     1c6:	4323      	orrs	r3, r4
     1c8:	4313      	orrs	r3, r2

	if (conf->mode == BOD_MODE_SAMPLED) {
     1ca:	2480      	movs	r4, #128	; 0x80
     1cc:	0064      	lsls	r4, r4, #1
     1ce:	42a2      	cmp	r2, r4
     1d0:	d00d      	beq.n	1ee <bod_set_config+0x42>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
	}

	if (conf->hysteresis == true) {
     1d2:	798a      	ldrb	r2, [r1, #6]
     1d4:	2a00      	cmp	r2, #0
     1d6:	d001      	beq.n	1dc <bod_set_config+0x30>
		temp |= SYSCTRL_BOD33_HYST;
     1d8:	2204      	movs	r2, #4
     1da:	4313      	orrs	r3, r2
	}

	if (conf->run_in_standby == true) {
     1dc:	79ca      	ldrb	r2, [r1, #7]
     1de:	2a00      	cmp	r2, #0
     1e0:	d001      	beq.n	1e6 <bod_set_config+0x3a>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
     1e2:	2240      	movs	r2, #64	; 0x40
     1e4:	4313      	orrs	r3, r2
	}

	switch (bod_id) {
     1e6:	2800      	cmp	r0, #0
     1e8:	d005      	beq.n	1f6 <bod_set_config+0x4a>
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
				/* Wait for BOD33 register sync ready */
			}
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
     1ea:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     1ec:	bd10      	pop	{r4, pc}
		temp |= SYSCTRL_BOD33_CEN;
     1ee:	2280      	movs	r2, #128	; 0x80
     1f0:	0092      	lsls	r2, r2, #2
     1f2:	4313      	orrs	r3, r2
     1f4:	e7ed      	b.n	1d2 <bod_set_config+0x26>
			if (conf->level > 0x3F) {
     1f6:	794a      	ldrb	r2, [r1, #5]
				return STATUS_ERR_INVALID_ARG;
     1f8:	3017      	adds	r0, #23
			if (conf->level > 0x3F) {
     1fa:	2a3f      	cmp	r2, #63	; 0x3f
     1fc:	d8f6      	bhi.n	1ec <bod_set_config+0x40>
			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
     1fe:	0412      	lsls	r2, r2, #16
     200:	21fc      	movs	r1, #252	; 0xfc
     202:	0389      	lsls	r1, r1, #14
     204:	400a      	ands	r2, r1
     206:	4313      	orrs	r3, r2
     208:	4a04      	ldr	r2, [pc, #16]	; (21c <bod_set_config+0x70>)
     20a:	6353      	str	r3, [r2, #52]	; 0x34
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
     20c:	0011      	movs	r1, r2
     20e:	2280      	movs	r2, #128	; 0x80
     210:	0112      	lsls	r2, r2, #4
     212:	68cb      	ldr	r3, [r1, #12]
     214:	4213      	tst	r3, r2
     216:	d0fc      	beq.n	212 <bod_set_config+0x66>
	return STATUS_OK;
     218:	2000      	movs	r0, #0
     21a:	e7e7      	b.n	1ec <bod_set_config+0x40>
     21c:	40000800 	.word	0x40000800

00000220 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     220:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     222:	4b0b      	ldr	r3, [pc, #44]	; (250 <EVSYS_Handler+0x30>)
     224:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     226:	490b      	ldr	r1, [pc, #44]	; (254 <EVSYS_Handler+0x34>)
     228:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     22a:	6898      	ldr	r0, [r3, #8]
     22c:	4302      	orrs	r2, r0
     22e:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     230:	4b09      	ldr	r3, [pc, #36]	; (258 <EVSYS_Handler+0x38>)
     232:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     234:	2c00      	cmp	r4, #0
     236:	d005      	beq.n	244 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     238:	6820      	ldr	r0, [r4, #0]
     23a:	6863      	ldr	r3, [r4, #4]
     23c:	4798      	blx	r3
		current_hook = current_hook->next;
     23e:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     240:	2c00      	cmp	r4, #0
     242:	d1f9      	bne.n	238 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     244:	4b02      	ldr	r3, [pc, #8]	; (250 <EVSYS_Handler+0x30>)
     246:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     248:	689a      	ldr	r2, [r3, #8]
     24a:	438a      	bics	r2, r1
     24c:	609a      	str	r2, [r3, #8]
}
     24e:	bd10      	pop	{r4, pc}
     250:	20000008 	.word	0x20000008
     254:	42000400 	.word	0x42000400
     258:	0f0fffff 	.word	0x0f0fffff

0000025c <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     25c:	4a06      	ldr	r2, [pc, #24]	; (278 <_system_events_init+0x1c>)
     25e:	6a13      	ldr	r3, [r2, #32]
     260:	2102      	movs	r1, #2
     262:	430b      	orrs	r3, r1
     264:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     266:	2201      	movs	r2, #1
     268:	4b04      	ldr	r3, [pc, #16]	; (27c <_system_events_init+0x20>)
     26a:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     26c:	0019      	movs	r1, r3
     26e:	780b      	ldrb	r3, [r1, #0]
     270:	4213      	tst	r3, r2
     272:	d1fc      	bne.n	26e <_system_events_init+0x12>
	}
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	40000400 	.word	0x40000400
     27c:	42000400 	.word	0x42000400

00000280 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     280:	2301      	movs	r3, #1
     282:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     284:	2300      	movs	r3, #0
     286:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     288:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     28a:	70c3      	strb	r3, [r0, #3]
}
     28c:	4770      	bx	lr
	...

00000290 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     290:	b5f0      	push	{r4, r5, r6, r7, lr}
     292:	b083      	sub	sp, #12
     294:	0005      	movs	r5, r0
     296:	000e      	movs	r6, r1
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     298:	4b24      	ldr	r3, [pc, #144]	; (32c <events_allocate+0x9c>)
     29a:	4798      	blx	r3
	tmp = _events_inst.allocated_channels;
     29c:	4b24      	ldr	r3, [pc, #144]	; (330 <events_allocate+0xa0>)
     29e:	681b      	ldr	r3, [r3, #0]
		if(!(tmp & 0x00000001)) {
     2a0:	07da      	lsls	r2, r3, #31
     2a2:	d50e      	bpl.n	2c2 <events_allocate+0x32>
		tmp = tmp >> 1;
     2a4:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     2a6:	2401      	movs	r4, #1
		if(!(tmp & 0x00000001)) {
     2a8:	2201      	movs	r2, #1
     2aa:	421a      	tst	r2, r3
     2ac:	d00a      	beq.n	2c4 <events_allocate+0x34>
		tmp = tmp >> 1;
     2ae:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     2b0:	3401      	adds	r4, #1
     2b2:	b2e4      	uxtb	r4, r4
     2b4:	2c0c      	cmp	r4, #12
     2b6:	d1f8      	bne.n	2aa <events_allocate+0x1a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     2b8:	4b1e      	ldr	r3, [pc, #120]	; (334 <events_allocate+0xa4>)
     2ba:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     2bc:	2014      	movs	r0, #20
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);


	return STATUS_OK;
}
     2be:	b003      	add	sp, #12
     2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     2c2:	2400      	movs	r4, #0
			_events_inst.allocated_channels |= 1 << count;
     2c4:	4a1a      	ldr	r2, [pc, #104]	; (330 <events_allocate+0xa0>)
     2c6:	6811      	ldr	r1, [r2, #0]
     2c8:	2301      	movs	r3, #1
     2ca:	40a3      	lsls	r3, r4
     2cc:	430b      	orrs	r3, r1
     2ce:	6013      	str	r3, [r2, #0]
			_events_inst.free_channels--;
     2d0:	7913      	ldrb	r3, [r2, #4]
     2d2:	3b01      	subs	r3, #1
     2d4:	7113      	strb	r3, [r2, #4]
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <events_allocate+0xa4>)
     2d8:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
     2da:	2014      	movs	r0, #20
	if(new_channel == EVENTS_INVALID_CHANNEL) {
     2dc:	2cff      	cmp	r4, #255	; 0xff
     2de:	d0ee      	beq.n	2be <events_allocate+0x2e>
	resource->channel = new_channel;
     2e0:	702c      	strb	r4, [r5, #0]
	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     2e2:	7873      	ldrb	r3, [r6, #1]
     2e4:	2b02      	cmp	r3, #2
     2e6:	d00a      	beq.n	2fe <events_allocate+0x6e>
		gclk_chan_conf.source_generator =
     2e8:	a901      	add	r1, sp, #4
     2ea:	78f3      	ldrb	r3, [r6, #3]
     2ec:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     2ee:	1de7      	adds	r7, r4, #7
     2f0:	b2ff      	uxtb	r7, r7
     2f2:	0038      	movs	r0, r7
     2f4:	4b10      	ldr	r3, [pc, #64]	; (338 <events_allocate+0xa8>)
     2f6:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     2f8:	0038      	movs	r0, r7
     2fa:	4b10      	ldr	r3, [pc, #64]	; (33c <events_allocate+0xac>)
     2fc:	4798      	blx	r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
     2fe:	78b3      	ldrb	r3, [r6, #2]
     300:	041b      	lsls	r3, r3, #16
     302:	22fe      	movs	r2, #254	; 0xfe
     304:	03d2      	lsls	r2, r2, #15
     306:	4013      	ands	r3, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     308:	7872      	ldrb	r2, [r6, #1]
     30a:	0612      	lsls	r2, r2, #24
     30c:	21c0      	movs	r1, #192	; 0xc0
     30e:	0489      	lsls	r1, r1, #18
     310:	400a      	ands	r2, r1
     312:	4313      	orrs	r3, r2
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
     314:	7832      	ldrb	r2, [r6, #0]
     316:	0692      	lsls	r2, r2, #26
     318:	21c0      	movs	r1, #192	; 0xc0
     31a:	0509      	lsls	r1, r1, #20
     31c:	400a      	ands	r2, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
     31e:	4313      	orrs	r3, r2
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     320:	220f      	movs	r2, #15
     322:	4014      	ands	r4, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     324:	431c      	orrs	r4, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     326:	606c      	str	r4, [r5, #4]
	return STATUS_OK;
     328:	2000      	movs	r0, #0
     32a:	e7c8      	b.n	2be <events_allocate+0x2e>
     32c:	000029e1 	.word	0x000029e1
     330:	20000008 	.word	0x20000008
     334:	00002a21 	.word	0x00002a21
     338:	00003181 	.word	0x00003181
     33c:	000030f5 	.word	0x000030f5

00000340 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     340:	7803      	ldrb	r3, [r0, #0]
     342:	3301      	adds	r3, #1
     344:	021b      	lsls	r3, r3, #8
     346:	22f8      	movs	r2, #248	; 0xf8
     348:	0152      	lsls	r2, r2, #5
     34a:	4013      	ands	r3, r2
			  EVSYS_USER_USER(user_id);
     34c:	221f      	movs	r2, #31
     34e:	4011      	ands	r1, r2
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     350:	430b      	orrs	r3, r1
     352:	4a03      	ldr	r2, [pc, #12]	; (360 <events_attach_user+0x20>)
     354:	8113      	strh	r3, [r2, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
     356:	6843      	ldr	r3, [r0, #4]
     358:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
}
     35a:	2000      	movs	r0, #0
     35c:	4770      	bx	lr
     35e:	46c0      	nop			; (mov r8, r8)
     360:	42000400 	.word	0x42000400

00000364 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     364:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     366:	2200      	movs	r2, #0
     368:	4b10      	ldr	r3, [pc, #64]	; (3ac <EIC_Handler+0x48>)
     36a:	701a      	strb	r2, [r3, #0]
     36c:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     36e:	4910      	ldr	r1, [pc, #64]	; (3b0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     370:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     372:	4e10      	ldr	r6, [pc, #64]	; (3b4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     374:	4c0d      	ldr	r4, [pc, #52]	; (3ac <EIC_Handler+0x48>)
     376:	e00a      	b.n	38e <EIC_Handler+0x2a>
		return eics[eic_index];
     378:	490d      	ldr	r1, [pc, #52]	; (3b0 <EIC_Handler+0x4c>)
     37a:	e008      	b.n	38e <EIC_Handler+0x2a>
     37c:	7823      	ldrb	r3, [r4, #0]
     37e:	3301      	adds	r3, #1
     380:	b2db      	uxtb	r3, r3
     382:	7023      	strb	r3, [r4, #0]
     384:	2b0f      	cmp	r3, #15
     386:	d810      	bhi.n	3aa <EIC_Handler+0x46>
		return NULL;
     388:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     38a:	2b1f      	cmp	r3, #31
     38c:	d9f4      	bls.n	378 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     38e:	0028      	movs	r0, r5
     390:	4018      	ands	r0, r3
     392:	2201      	movs	r2, #1
     394:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     396:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     398:	4210      	tst	r0, r2
     39a:	d0ef      	beq.n	37c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     39c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     39e:	009b      	lsls	r3, r3, #2
     3a0:	599b      	ldr	r3, [r3, r6]
     3a2:	2b00      	cmp	r3, #0
     3a4:	d0ea      	beq.n	37c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     3a6:	4798      	blx	r3
     3a8:	e7e8      	b.n	37c <EIC_Handler+0x18>
			}
		}
	}
}
     3aa:	bd70      	pop	{r4, r5, r6, pc}
     3ac:	20000545 	.word	0x20000545
     3b0:	40001800 	.word	0x40001800
     3b4:	20000548 	.word	0x20000548

000003b8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     3b8:	4a04      	ldr	r2, [pc, #16]	; (3cc <_extint_enable+0x14>)
     3ba:	7813      	ldrb	r3, [r2, #0]
     3bc:	2102      	movs	r1, #2
     3be:	430b      	orrs	r3, r1
     3c0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3c2:	7853      	ldrb	r3, [r2, #1]
     3c4:	b25b      	sxtb	r3, r3
     3c6:	2b00      	cmp	r3, #0
     3c8:	dbfb      	blt.n	3c2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3ca:	4770      	bx	lr
     3cc:	40001800 	.word	0x40001800

000003d0 <_system_extint_init>:
{
     3d0:	b500      	push	{lr}
     3d2:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     3d4:	4a12      	ldr	r2, [pc, #72]	; (420 <_system_extint_init+0x50>)
     3d6:	6993      	ldr	r3, [r2, #24]
     3d8:	2140      	movs	r1, #64	; 0x40
     3da:	430b      	orrs	r3, r1
     3dc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3de:	a901      	add	r1, sp, #4
     3e0:	2300      	movs	r3, #0
     3e2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3e4:	2005      	movs	r0, #5
     3e6:	4b0f      	ldr	r3, [pc, #60]	; (424 <_system_extint_init+0x54>)
     3e8:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     3ea:	2005      	movs	r0, #5
     3ec:	4b0e      	ldr	r3, [pc, #56]	; (428 <_system_extint_init+0x58>)
     3ee:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3f0:	4a0e      	ldr	r2, [pc, #56]	; (42c <_system_extint_init+0x5c>)
     3f2:	7813      	ldrb	r3, [r2, #0]
     3f4:	2101      	movs	r1, #1
     3f6:	430b      	orrs	r3, r1
     3f8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3fa:	7853      	ldrb	r3, [r2, #1]
     3fc:	b25b      	sxtb	r3, r3
     3fe:	2b00      	cmp	r3, #0
     400:	dbfb      	blt.n	3fa <_system_extint_init+0x2a>
     402:	4b0b      	ldr	r3, [pc, #44]	; (430 <_system_extint_init+0x60>)
     404:	0019      	movs	r1, r3
     406:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     408:	2200      	movs	r2, #0
     40a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     40c:	4299      	cmp	r1, r3
     40e:	d1fc      	bne.n	40a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     410:	2210      	movs	r2, #16
     412:	4b08      	ldr	r3, [pc, #32]	; (434 <_system_extint_init+0x64>)
     414:	601a      	str	r2, [r3, #0]
	_extint_enable();
     416:	4b08      	ldr	r3, [pc, #32]	; (438 <_system_extint_init+0x68>)
     418:	4798      	blx	r3
}
     41a:	b003      	add	sp, #12
     41c:	bd00      	pop	{pc}
     41e:	46c0      	nop			; (mov r8, r8)
     420:	40000400 	.word	0x40000400
     424:	00003181 	.word	0x00003181
     428:	000030f5 	.word	0x000030f5
     42c:	40001800 	.word	0x40001800
     430:	20000548 	.word	0x20000548
     434:	e000e100 	.word	0xe000e100
     438:	000003b9 	.word	0x000003b9

0000043c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     43c:	2300      	movs	r3, #0
     43e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     440:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     442:	2201      	movs	r2, #1
     444:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     446:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     448:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     44a:	3302      	adds	r3, #2
     44c:	72c3      	strb	r3, [r0, #11]
}
     44e:	4770      	bx	lr

00000450 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     450:	b5f0      	push	{r4, r5, r6, r7, lr}
     452:	b083      	sub	sp, #12
     454:	0005      	movs	r5, r0
     456:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     458:	a901      	add	r1, sp, #4
     45a:	2300      	movs	r3, #0
     45c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     45e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     460:	7923      	ldrb	r3, [r4, #4]
     462:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     464:	7a23      	ldrb	r3, [r4, #8]
     466:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     468:	7820      	ldrb	r0, [r4, #0]
     46a:	4b15      	ldr	r3, [pc, #84]	; (4c0 <extint_chan_set_config+0x70>)
     46c:	4798      	blx	r3
		return NULL;
     46e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     470:	2d1f      	cmp	r5, #31
     472:	d800      	bhi.n	476 <extint_chan_set_config+0x26>
		return eics[eic_index];
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     476:	2207      	movs	r2, #7
     478:	402a      	ands	r2, r5
     47a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     47c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     47e:	7aa3      	ldrb	r3, [r4, #10]
     480:	2b00      	cmp	r3, #0
     482:	d001      	beq.n	488 <extint_chan_set_config+0x38>
     484:	2308      	movs	r3, #8
     486:	431f      	orrs	r7, r3
     488:	08eb      	lsrs	r3, r5, #3
     48a:	009b      	lsls	r3, r3, #2
     48c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     48e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     490:	260f      	movs	r6, #15
     492:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     494:	43b1      	bics	r1, r6
			(new_config << config_pos);
     496:	4097      	lsls	r7, r2
     498:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     49a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     49c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     49e:	7a63      	ldrb	r3, [r4, #9]
     4a0:	2b00      	cmp	r3, #0
     4a2:	d106      	bne.n	4b2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4a4:	6943      	ldr	r3, [r0, #20]
     4a6:	2201      	movs	r2, #1
     4a8:	40aa      	lsls	r2, r5
     4aa:	4393      	bics	r3, r2
     4ac:	6143      	str	r3, [r0, #20]
	}
}
     4ae:	b003      	add	sp, #12
     4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     4b2:	6942      	ldr	r2, [r0, #20]
     4b4:	2301      	movs	r3, #1
     4b6:	40ab      	lsls	r3, r5
     4b8:	4313      	orrs	r3, r2
     4ba:	6143      	str	r3, [r0, #20]
     4bc:	e7f7      	b.n	4ae <extint_chan_set_config+0x5e>
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	00003279 	.word	0x00003279
     4c4:	40001800 	.word	0x40001800

000004c8 <extint_enable_events>:
 *
 *  \param[in] events    Struct containing flags of events to enable
 */
void extint_enable_events(
		struct extint_events *const events)
{
     4c8:	b510      	push	{r4, lr}
     4ca:	2300      	movs	r3, #0
     4cc:	2100      	movs	r1, #0
		uint32_t event_mask = 0;

		/* Create an enable mask for the current EIC module */
		for (uint32_t j = 0; j < 32; j++) {
			if (events->generate_event_on_detect[(32 * i) + j]) {
				event_mask |= (1UL << j);
     4ce:	2401      	movs	r4, #1
     4d0:	e002      	b.n	4d8 <extint_enable_events+0x10>
		for (uint32_t j = 0; j < 32; j++) {
     4d2:	3301      	adds	r3, #1
     4d4:	2b20      	cmp	r3, #32
     4d6:	d006      	beq.n	4e6 <extint_enable_events+0x1e>
			if (events->generate_event_on_detect[(32 * i) + j]) {
     4d8:	5cc2      	ldrb	r2, [r0, r3]
     4da:	2a00      	cmp	r2, #0
     4dc:	d0f9      	beq.n	4d2 <extint_enable_events+0xa>
				event_mask |= (1UL << j);
     4de:	0022      	movs	r2, r4
     4e0:	409a      	lsls	r2, r3
     4e2:	4311      	orrs	r1, r2
     4e4:	e7f5      	b.n	4d2 <extint_enable_events+0xa>
			}
		}

		/* Enable the masked events */
		eics[i]->EVCTRL.reg |= event_mask;
     4e6:	4b02      	ldr	r3, [pc, #8]	; (4f0 <extint_enable_events+0x28>)
     4e8:	685a      	ldr	r2, [r3, #4]
     4ea:	4311      	orrs	r1, r2
     4ec:	6059      	str	r1, [r3, #4]
	}
}
     4ee:	bd10      	pop	{r4, pc}
     4f0:	40001800 	.word	0x40001800

000004f4 <extint_disable_events>:
 *
 *  \param[in] events    Struct containing flags of events to disable
 */
void extint_disable_events(
		struct extint_events *const events)
{
     4f4:	b510      	push	{r4, lr}
     4f6:	2300      	movs	r3, #0
     4f8:	2100      	movs	r1, #0
		uint32_t event_mask = 0;

		/* Create a disable mask for the current EIC module */
		for (uint32_t j = 0; j < 32; j++) {
			if (events->generate_event_on_detect[(32 * i) + j]) {
				event_mask |= (1UL << j);
     4fa:	2401      	movs	r4, #1
     4fc:	e002      	b.n	504 <extint_disable_events+0x10>
		for (uint32_t j = 0; j < 32; j++) {
     4fe:	3301      	adds	r3, #1
     500:	2b20      	cmp	r3, #32
     502:	d006      	beq.n	512 <extint_disable_events+0x1e>
			if (events->generate_event_on_detect[(32 * i) + j]) {
     504:	5cc2      	ldrb	r2, [r0, r3]
     506:	2a00      	cmp	r2, #0
     508:	d0f9      	beq.n	4fe <extint_disable_events+0xa>
				event_mask |= (1UL << j);
     50a:	0022      	movs	r2, r4
     50c:	409a      	lsls	r2, r3
     50e:	4311      	orrs	r1, r2
     510:	e7f5      	b.n	4fe <extint_disable_events+0xa>
			}
		}

		/* Disable the masked events */
		eics[i]->EVCTRL.reg &= ~event_mask;
     512:	4a02      	ldr	r2, [pc, #8]	; (51c <extint_disable_events+0x28>)
     514:	6853      	ldr	r3, [r2, #4]
     516:	438b      	bics	r3, r1
     518:	6053      	str	r3, [r2, #4]
	}
}
     51a:	bd10      	pop	{r4, pc}
     51c:	40001800 	.word	0x40001800

00000520 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     520:	b510      	push	{r4, lr}
			PM->APBBMASK.reg |= mask;
     522:	4a1e      	ldr	r2, [pc, #120]	; (59c <nvm_set_config+0x7c>)
     524:	69d3      	ldr	r3, [r2, #28]
     526:	2104      	movs	r1, #4
     528:	430b      	orrs	r3, r1
     52a:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     52c:	4b1c      	ldr	r3, [pc, #112]	; (5a0 <nvm_set_config+0x80>)
     52e:	2220      	movs	r2, #32
     530:	32ff      	adds	r2, #255	; 0xff
     532:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     534:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     536:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     538:	07d2      	lsls	r2, r2, #31
     53a:	d401      	bmi.n	540 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     53c:	0018      	movs	r0, r3
     53e:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     540:	7803      	ldrb	r3, [r0, #0]
     542:	021b      	lsls	r3, r3, #8
     544:	22c0      	movs	r2, #192	; 0xc0
     546:	0092      	lsls	r2, r2, #2
     548:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     54a:	7841      	ldrb	r1, [r0, #1]
     54c:	01c9      	lsls	r1, r1, #7
     54e:	22ff      	movs	r2, #255	; 0xff
     550:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     552:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     554:	7881      	ldrb	r1, [r0, #2]
     556:	0049      	lsls	r1, r1, #1
     558:	221e      	movs	r2, #30
     55a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     55c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     55e:	78c2      	ldrb	r2, [r0, #3]
     560:	0492      	lsls	r2, r2, #18
     562:	2180      	movs	r1, #128	; 0x80
     564:	02c9      	lsls	r1, r1, #11
     566:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     568:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     56a:	7902      	ldrb	r2, [r0, #4]
     56c:	0412      	lsls	r2, r2, #16
     56e:	21c0      	movs	r1, #192	; 0xc0
     570:	0289      	lsls	r1, r1, #10
     572:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     574:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     576:	4a0a      	ldr	r2, [pc, #40]	; (5a0 <nvm_set_config+0x80>)
     578:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     57a:	6893      	ldr	r3, [r2, #8]
     57c:	035b      	lsls	r3, r3, #13
     57e:	0f5b      	lsrs	r3, r3, #29
     580:	4908      	ldr	r1, [pc, #32]	; (5a4 <nvm_set_config+0x84>)
     582:	2408      	movs	r4, #8
     584:	409c      	lsls	r4, r3
     586:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     588:	6893      	ldr	r3, [r2, #8]
     58a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     58c:	7843      	ldrb	r3, [r0, #1]
     58e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     590:	8b13      	ldrh	r3, [r2, #24]
     592:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     594:	0fdb      	lsrs	r3, r3, #31
     596:	011b      	lsls	r3, r3, #4
     598:	e7d0      	b.n	53c <nvm_set_config+0x1c>
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	40000400 	.word	0x40000400
     5a0:	41004000 	.word	0x41004000
     5a4:	2000003c 	.word	0x2000003c

000005a8 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     5a8:	b530      	push	{r4, r5, lr}
     5aa:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     5ac:	4a25      	ldr	r2, [pc, #148]	; (644 <nvm_execute_command+0x9c>)
     5ae:	8810      	ldrh	r0, [r2, #0]
     5b0:	8853      	ldrh	r3, [r2, #2]
     5b2:	4343      	muls	r3, r0
     5b4:	428b      	cmp	r3, r1
     5b6:	d20b      	bcs.n	5d0 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     5b8:	2280      	movs	r2, #128	; 0x80
     5ba:	0192      	lsls	r2, r2, #6
     5bc:	4b22      	ldr	r3, [pc, #136]	; (648 <nvm_execute_command+0xa0>)
     5be:	18cb      	adds	r3, r1, r3
     5c0:	4293      	cmp	r3, r2
     5c2:	d905      	bls.n	5d0 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     5c4:	4a21      	ldr	r2, [pc, #132]	; (64c <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     5c6:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     5c8:	4b21      	ldr	r3, [pc, #132]	; (650 <nvm_execute_command+0xa8>)
     5ca:	18cb      	adds	r3, r1, r3
     5cc:	4293      	cmp	r3, r2
     5ce:	d80e      	bhi.n	5ee <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     5d0:	4b20      	ldr	r3, [pc, #128]	; (654 <nvm_execute_command+0xac>)
     5d2:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     5d4:	2280      	movs	r2, #128	; 0x80
     5d6:	02d2      	lsls	r2, r2, #11
     5d8:	432a      	orrs	r2, r5
     5da:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     5dc:	2220      	movs	r2, #32
     5de:	32ff      	adds	r2, #255	; 0xff
     5e0:	831a      	strh	r2, [r3, #24]
     5e2:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     5e4:	07db      	lsls	r3, r3, #31
     5e6:	d403      	bmi.n	5f0 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     5e8:	4b1a      	ldr	r3, [pc, #104]	; (654 <nvm_execute_command+0xac>)
     5ea:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     5ec:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     5ee:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     5f0:	2c45      	cmp	r4, #69	; 0x45
     5f2:	d822      	bhi.n	63a <nvm_execute_command+0x92>
     5f4:	00a3      	lsls	r3, r4, #2
     5f6:	4a18      	ldr	r2, [pc, #96]	; (658 <nvm_execute_command+0xb0>)
     5f8:	58d3      	ldr	r3, [r2, r3]
     5fa:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     5fc:	4b15      	ldr	r3, [pc, #84]	; (654 <nvm_execute_command+0xac>)
     5fe:	8b1b      	ldrh	r3, [r3, #24]
     600:	05db      	lsls	r3, r3, #23
     602:	d503      	bpl.n	60c <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
     604:	4b13      	ldr	r3, [pc, #76]	; (654 <nvm_execute_command+0xac>)
     606:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     608:	2010      	movs	r0, #16
     60a:	e7f0      	b.n	5ee <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     60c:	0889      	lsrs	r1, r1, #2
     60e:	0049      	lsls	r1, r1, #1
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <nvm_execute_command+0xac>)
     612:	61d9      	str	r1, [r3, #28]
			break;
     614:	e003      	b.n	61e <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     616:	0889      	lsrs	r1, r1, #2
     618:	0049      	lsls	r1, r1, #1
     61a:	4b0e      	ldr	r3, [pc, #56]	; (654 <nvm_execute_command+0xac>)
     61c:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     61e:	20a5      	movs	r0, #165	; 0xa5
     620:	0200      	lsls	r0, r0, #8
     622:	4304      	orrs	r4, r0
     624:	4b0b      	ldr	r3, [pc, #44]	; (654 <nvm_execute_command+0xac>)
     626:	801c      	strh	r4, [r3, #0]
     628:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     62a:	2201      	movs	r2, #1
     62c:	7d0b      	ldrb	r3, [r1, #20]
     62e:	4213      	tst	r3, r2
     630:	d0fc      	beq.n	62c <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
     632:	4b08      	ldr	r3, [pc, #32]	; (654 <nvm_execute_command+0xac>)
     634:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     636:	2000      	movs	r0, #0
     638:	e7d9      	b.n	5ee <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
     63a:	4b06      	ldr	r3, [pc, #24]	; (654 <nvm_execute_command+0xac>)
     63c:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     63e:	2017      	movs	r0, #23
     640:	e7d5      	b.n	5ee <nvm_execute_command+0x46>
     642:	46c0      	nop			; (mov r8, r8)
     644:	2000003c 	.word	0x2000003c
     648:	ff7fc000 	.word	0xff7fc000
     64c:	000007ff 	.word	0x000007ff
     650:	ffc00000 	.word	0xffc00000
     654:	41004000 	.word	0x41004000
     658:	0000426c 	.word	0x0000426c

0000065c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     65e:	4b2f      	ldr	r3, [pc, #188]	; (71c <nvm_write_buffer+0xc0>)
     660:	881c      	ldrh	r4, [r3, #0]
     662:	885b      	ldrh	r3, [r3, #2]
     664:	4363      	muls	r3, r4
	if (destination_address >
     666:	4283      	cmp	r3, r0
     668:	d207      	bcs.n	67a <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     66a:	4e2d      	ldr	r6, [pc, #180]	; (720 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     66c:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     66e:	4b2d      	ldr	r3, [pc, #180]	; (724 <nvm_write_buffer+0xc8>)
     670:	18c3      	adds	r3, r0, r3
     672:	42b3      	cmp	r3, r6
     674:	d806      	bhi.n	684 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
     676:	2601      	movs	r6, #1
     678:	e000      	b.n	67c <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
     67a:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     67c:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     67e:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
     680:	4218      	tst	r0, r3
     682:	d001      	beq.n	688 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     684:	0028      	movs	r0, r5
     686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     688:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
     68a:	4294      	cmp	r4, r2
     68c:	d3fa      	bcc.n	684 <nvm_write_buffer+0x28>
     68e:	4b26      	ldr	r3, [pc, #152]	; (728 <nvm_write_buffer+0xcc>)
     690:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     692:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
     694:	07db      	lsls	r3, r3, #31
     696:	d5f5      	bpl.n	684 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     698:	4c24      	ldr	r4, [pc, #144]	; (72c <nvm_write_buffer+0xd0>)
     69a:	4b23      	ldr	r3, [pc, #140]	; (728 <nvm_write_buffer+0xcc>)
     69c:	801c      	strh	r4, [r3, #0]
     69e:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     6a0:	2401      	movs	r4, #1
     6a2:	7d2b      	ldrb	r3, [r5, #20]
     6a4:	4223      	tst	r3, r4
     6a6:	d0fc      	beq.n	6a2 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     6a8:	2420      	movs	r4, #32
     6aa:	34ff      	adds	r4, #255	; 0xff
     6ac:	4b1e      	ldr	r3, [pc, #120]	; (728 <nvm_write_buffer+0xcc>)
     6ae:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     6b0:	2a00      	cmp	r2, #0
     6b2:	d02c      	beq.n	70e <nvm_write_buffer+0xb2>
     6b4:	2301      	movs	r3, #1
     6b6:	0005      	movs	r5, r0
     6b8:	439d      	bics	r5, r3
     6ba:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     6bc:	1e54      	subs	r4, r2, #1
     6be:	46a4      	mov	ip, r4
     6c0:	e009      	b.n	6d6 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
     6c2:	18cf      	adds	r7, r1, r3
     6c4:	787f      	ldrb	r7, [r7, #1]
     6c6:	023f      	lsls	r7, r7, #8
     6c8:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
     6ca:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     6cc:	3302      	adds	r3, #2
     6ce:	b29b      	uxth	r3, r3
     6d0:	3502      	adds	r5, #2
     6d2:	429a      	cmp	r2, r3
     6d4:	d904      	bls.n	6e0 <nvm_write_buffer+0x84>
		data = buffer[i];
     6d6:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     6d8:	4563      	cmp	r3, ip
     6da:	dbf2      	blt.n	6c2 <nvm_write_buffer+0x66>
		data = buffer[i];
     6dc:	b2a4      	uxth	r4, r4
     6de:	e7f4      	b.n	6ca <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     6e0:	4b0e      	ldr	r3, [pc, #56]	; (71c <nvm_write_buffer+0xc0>)
     6e2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     6e4:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     6e6:	2b00      	cmp	r3, #0
     6e8:	d1cc      	bne.n	684 <nvm_write_buffer+0x28>
     6ea:	2a3f      	cmp	r2, #63	; 0x3f
     6ec:	d8ca      	bhi.n	684 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
     6ee:	2e00      	cmp	r6, #0
     6f0:	d106      	bne.n	700 <nvm_write_buffer+0xa4>
     6f2:	2200      	movs	r2, #0
     6f4:	0001      	movs	r1, r0
     6f6:	2004      	movs	r0, #4
     6f8:	4b0d      	ldr	r3, [pc, #52]	; (730 <nvm_write_buffer+0xd4>)
     6fa:	4798      	blx	r3
     6fc:	0005      	movs	r5, r0
     6fe:	e7c1      	b.n	684 <nvm_write_buffer+0x28>
     700:	2200      	movs	r2, #0
     702:	0001      	movs	r1, r0
     704:	201c      	movs	r0, #28
     706:	4b0a      	ldr	r3, [pc, #40]	; (730 <nvm_write_buffer+0xd4>)
     708:	4798      	blx	r3
     70a:	0005      	movs	r5, r0
     70c:	e7ba      	b.n	684 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     70e:	4b03      	ldr	r3, [pc, #12]	; (71c <nvm_write_buffer+0xc0>)
     710:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     712:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     714:	2b00      	cmp	r3, #0
     716:	d0ea      	beq.n	6ee <nvm_write_buffer+0x92>
     718:	e7b4      	b.n	684 <nvm_write_buffer+0x28>
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	2000003c 	.word	0x2000003c
     720:	000007ff 	.word	0x000007ff
     724:	ffc00000 	.word	0xffc00000
     728:	41004000 	.word	0x41004000
     72c:	ffffa544 	.word	0xffffa544
     730:	000005a9 	.word	0x000005a9

00000734 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     734:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     736:	4b1b      	ldr	r3, [pc, #108]	; (7a4 <nvm_read_buffer+0x70>)
     738:	881c      	ldrh	r4, [r3, #0]
     73a:	885b      	ldrh	r3, [r3, #2]
     73c:	4363      	muls	r3, r4
	if (source_address >
     73e:	4283      	cmp	r3, r0
     740:	d205      	bcs.n	74e <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     742:	4e19      	ldr	r6, [pc, #100]	; (7a8 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     744:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     746:	4b19      	ldr	r3, [pc, #100]	; (7ac <nvm_read_buffer+0x78>)
     748:	18c3      	adds	r3, r0, r3
     74a:	42b3      	cmp	r3, r6
     74c:	d803      	bhi.n	756 <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
     74e:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     750:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
     752:	4218      	tst	r0, r3
     754:	d001      	beq.n	75a <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     756:	0028      	movs	r0, r5
     758:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
     75a:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
     75c:	4294      	cmp	r4, r2
     75e:	d3fa      	bcc.n	756 <nvm_read_buffer+0x22>
     760:	4b13      	ldr	r3, [pc, #76]	; (7b0 <nvm_read_buffer+0x7c>)
     762:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     764:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
     766:	07db      	lsls	r3, r3, #31
     768:	d5f5      	bpl.n	756 <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     76a:	2420      	movs	r4, #32
     76c:	34ff      	adds	r4, #255	; 0xff
     76e:	4b10      	ldr	r3, [pc, #64]	; (7b0 <nvm_read_buffer+0x7c>)
     770:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     772:	2a00      	cmp	r2, #0
     774:	d014      	beq.n	7a0 <nvm_read_buffer+0x6c>
     776:	2301      	movs	r3, #1
     778:	4398      	bics	r0, r3
     77a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     77c:	1e56      	subs	r6, r2, #1
     77e:	e004      	b.n	78a <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
     780:	3302      	adds	r3, #2
     782:	b29b      	uxth	r3, r3
     784:	3002      	adds	r0, #2
     786:	429a      	cmp	r2, r3
     788:	d908      	bls.n	79c <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
     78a:	8804      	ldrh	r4, [r0, #0]
     78c:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     78e:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     790:	42b3      	cmp	r3, r6
     792:	daf5      	bge.n	780 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
     794:	18cd      	adds	r5, r1, r3
     796:	0a24      	lsrs	r4, r4, #8
     798:	706c      	strb	r4, [r5, #1]
     79a:	e7f1      	b.n	780 <nvm_read_buffer+0x4c>
	return STATUS_OK;
     79c:	2500      	movs	r5, #0
     79e:	e7da      	b.n	756 <nvm_read_buffer+0x22>
     7a0:	2500      	movs	r5, #0
     7a2:	e7d8      	b.n	756 <nvm_read_buffer+0x22>
     7a4:	2000003c 	.word	0x2000003c
     7a8:	000007ff 	.word	0x000007ff
     7ac:	ffc00000 	.word	0xffc00000
     7b0:	41004000 	.word	0x41004000

000007b4 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     7b4:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     7b6:	4a1d      	ldr	r2, [pc, #116]	; (82c <STACK_SIZE+0x2c>)
     7b8:	8813      	ldrh	r3, [r2, #0]
     7ba:	8852      	ldrh	r2, [r2, #2]
     7bc:	435a      	muls	r2, r3
	if (row_address >
     7be:	4282      	cmp	r2, r0
     7c0:	d207      	bcs.n	7d2 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     7c2:	4c1b      	ldr	r4, [pc, #108]	; (830 <STACK_SIZE+0x30>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     7c4:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     7c6:	491b      	ldr	r1, [pc, #108]	; (834 <STACK_SIZE+0x34>)
     7c8:	1841      	adds	r1, r0, r1
     7ca:	42a1      	cmp	r1, r4
     7cc:	d807      	bhi.n	7de <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
     7ce:	2101      	movs	r1, #1
     7d0:	e000      	b.n	7d4 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
     7d2:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     7d4:	009b      	lsls	r3, r3, #2
     7d6:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
     7d8:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     7da:	4218      	tst	r0, r3
     7dc:	d001      	beq.n	7e2 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     7de:	0010      	movs	r0, r2
     7e0:	bd10      	pop	{r4, pc}
     7e2:	4b15      	ldr	r3, [pc, #84]	; (838 <STACK_SIZE+0x38>)
     7e4:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     7e6:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
     7e8:	07db      	lsls	r3, r3, #31
     7ea:	d5f8      	bpl.n	7de <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     7ec:	4a12      	ldr	r2, [pc, #72]	; (838 <STACK_SIZE+0x38>)
     7ee:	2320      	movs	r3, #32
     7f0:	33ff      	adds	r3, #255	; 0xff
     7f2:	8313      	strh	r3, [r2, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     7f4:	0883      	lsrs	r3, r0, #2
     7f6:	005b      	lsls	r3, r3, #1
     7f8:	61d3      	str	r3, [r2, #28]
	if (is_rww_eeprom) {
     7fa:	2900      	cmp	r1, #0
     7fc:	d013      	beq.n	826 <STACK_SIZE+0x26>
		NVM_MEMORY[row_address / 2] = 0x0;
     7fe:	2301      	movs	r3, #1
     800:	4398      	bics	r0, r3
     802:	2300      	movs	r3, #0
     804:	8003      	strh	r3, [r0, #0]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
     806:	4a0d      	ldr	r2, [pc, #52]	; (83c <STACK_SIZE+0x3c>)
     808:	4b0b      	ldr	r3, [pc, #44]	; (838 <STACK_SIZE+0x38>)
     80a:	801a      	strh	r2, [r3, #0]
     80c:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     80e:	2201      	movs	r2, #1
     810:	7d0b      	ldrb	r3, [r1, #20]
     812:	4213      	tst	r3, r2
     814:	d0fc      	beq.n	810 <STACK_SIZE+0x10>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     816:	4b08      	ldr	r3, [pc, #32]	; (838 <STACK_SIZE+0x38>)
     818:	8b1a      	ldrh	r2, [r3, #24]
     81a:	201c      	movs	r0, #28
     81c:	4002      	ands	r2, r0
	return STATUS_OK;
     81e:	1e50      	subs	r0, r2, #1
     820:	4182      	sbcs	r2, r0
     822:	0092      	lsls	r2, r2, #2
     824:	e7db      	b.n	7de <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
     826:	4a06      	ldr	r2, [pc, #24]	; (840 <STACK_SIZE+0x40>)
     828:	e7ee      	b.n	808 <STACK_SIZE+0x8>
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	2000003c 	.word	0x2000003c
     830:	000007ff 	.word	0x000007ff
     834:	ffc00000 	.word	0xffc00000
     838:	41004000 	.word	0x41004000
     83c:	0000a51a 	.word	0x0000a51a
     840:	0000a502 	.word	0x0000a502

00000844 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     844:	4b15      	ldr	r3, [pc, #84]	; (89c <nvm_get_parameters+0x58>)
     846:	2220      	movs	r2, #32
     848:	32ff      	adds	r2, #255	; 0xff
     84a:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     84c:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     84e:	0359      	lsls	r1, r3, #13
     850:	0f49      	lsrs	r1, r1, #29
     852:	3a18      	subs	r2, #24
     854:	3aff      	subs	r2, #255	; 0xff
     856:	408a      	lsls	r2, r1
	parameters->page_size =
     858:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     85a:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
     85c:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
     85e:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     860:	4b0f      	ldr	r3, [pc, #60]	; (8a0 <nvm_get_parameters+0x5c>)
     862:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
     864:	065b      	lsls	r3, r3, #25
     866:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     868:	2b07      	cmp	r3, #7
     86a:	d010      	beq.n	88e <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     86c:	2206      	movs	r2, #6
     86e:	1ad2      	subs	r2, r2, r3
     870:	2304      	movs	r3, #4
     872:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
     874:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     876:	4b0a      	ldr	r3, [pc, #40]	; (8a0 <nvm_get_parameters+0x5c>)
     878:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
     87a:	2207      	movs	r2, #7
     87c:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     87e:	2b07      	cmp	r3, #7
     880:	d008      	beq.n	894 <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     882:	2207      	movs	r2, #7
     884:	1ad2      	subs	r2, r2, r3
     886:	2304      	movs	r3, #4
     888:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
     88a:	6083      	str	r3, [r0, #8]
	}
}
     88c:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
     88e:	2300      	movs	r3, #0
     890:	6043      	str	r3, [r0, #4]
     892:	e7f0      	b.n	876 <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
     894:	2300      	movs	r3, #0
     896:	6083      	str	r3, [r0, #8]
     898:	e7f8      	b.n	88c <nvm_get_parameters+0x48>
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	41004000 	.word	0x41004000
     8a0:	00804000 	.word	0x00804000

000008a4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     8a4:	b500      	push	{lr}
     8a6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8a8:	ab01      	add	r3, sp, #4
     8aa:	2280      	movs	r2, #128	; 0x80
     8ac:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     8ae:	780a      	ldrb	r2, [r1, #0]
     8b0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     8b2:	784a      	ldrb	r2, [r1, #1]
     8b4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     8b6:	788a      	ldrb	r2, [r1, #2]
     8b8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     8ba:	0019      	movs	r1, r3
     8bc:	4b01      	ldr	r3, [pc, #4]	; (8c4 <port_pin_set_config+0x20>)
     8be:	4798      	blx	r3
}
     8c0:	b003      	add	sp, #12
     8c2:	bd00      	pop	{pc}
     8c4:	00003279 	.word	0x00003279

000008c8 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8c8:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     8ca:	7a98      	ldrb	r0, [r3, #10]
     8cc:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     8ce:	4770      	bx	lr

000008d0 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8d4:	6806      	ldr	r6, [r0, #0]
     8d6:	2208      	movs	r2, #8
     8d8:	4b05      	ldr	r3, [pc, #20]	; (8f0 <rtc_count_enable+0x20>)
     8da:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     8dc:	4d05      	ldr	r5, [pc, #20]	; (8f4 <rtc_count_enable+0x24>)
     8de:	0020      	movs	r0, r4
     8e0:	47a8      	blx	r5
     8e2:	2800      	cmp	r0, #0
     8e4:	d1fb      	bne.n	8de <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     8e6:	8833      	ldrh	r3, [r6, #0]
     8e8:	2202      	movs	r2, #2
     8ea:	4313      	orrs	r3, r2
     8ec:	8033      	strh	r3, [r6, #0]
}
     8ee:	bd70      	pop	{r4, r5, r6, pc}
     8f0:	e000e100 	.word	0xe000e100
     8f4:	000008c9 	.word	0x000008c9

000008f8 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     8f8:	b570      	push	{r4, r5, r6, lr}
     8fa:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8fc:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8fe:	2108      	movs	r1, #8
     900:	2380      	movs	r3, #128	; 0x80
     902:	4a07      	ldr	r2, [pc, #28]	; (920 <rtc_count_disable+0x28>)
     904:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     906:	4d07      	ldr	r5, [pc, #28]	; (924 <rtc_count_disable+0x2c>)
     908:	0020      	movs	r0, r4
     90a:	47a8      	blx	r5
     90c:	2800      	cmp	r0, #0
     90e:	d1fb      	bne.n	908 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     910:	23c1      	movs	r3, #193	; 0xc1
     912:	71b3      	strb	r3, [r6, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     914:	7233      	strb	r3, [r6, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     916:	8833      	ldrh	r3, [r6, #0]
     918:	2202      	movs	r2, #2
     91a:	4393      	bics	r3, r2
     91c:	8033      	strh	r3, [r6, #0]
}
     91e:	bd70      	pop	{r4, r5, r6, pc}
     920:	e000e100 	.word	0xe000e100
     924:	000008c9 	.word	0x000008c9

00000928 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     928:	b570      	push	{r4, r5, r6, lr}
     92a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     92c:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     92e:	4b07      	ldr	r3, [pc, #28]	; (94c <rtc_count_reset+0x24>)
     930:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     932:	2300      	movs	r3, #0
     934:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
     936:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     938:	4d05      	ldr	r5, [pc, #20]	; (950 <rtc_count_reset+0x28>)
     93a:	0020      	movs	r0, r4
     93c:	47a8      	blx	r5
     93e:	2800      	cmp	r0, #0
     940:	d1fb      	bne.n	93a <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     942:	8833      	ldrh	r3, [r6, #0]
     944:	2201      	movs	r2, #1
     946:	4313      	orrs	r3, r2
     948:	8033      	strh	r3, [r6, #0]
}
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	000008f9 	.word	0x000008f9
     950:	000008c9 	.word	0x000008c9

00000954 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     954:	b570      	push	{r4, r5, r6, lr}
     956:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     958:	6806      	ldr	r6, [r0, #0]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     95a:	7943      	ldrb	r3, [r0, #5]
     95c:	2b00      	cmp	r3, #0
     95e:	d10e      	bne.n	97e <rtc_count_get_count+0x2a>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     960:	4b0f      	ldr	r3, [pc, #60]	; (9a0 <rtc_count_get_count+0x4c>)
     962:	8073      	strh	r3, [r6, #2]

		while (rtc_count_is_syncing(module)) {
     964:	4d0f      	ldr	r5, [pc, #60]	; (9a4 <rtc_count_get_count+0x50>)
     966:	0020      	movs	r0, r4
     968:	47a8      	blx	r5
     96a:	2800      	cmp	r0, #0
     96c:	d1fb      	bne.n	966 <rtc_count_get_count+0x12>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     96e:	7923      	ldrb	r3, [r4, #4]
     970:	2b00      	cmp	r3, #0
     972:	d012      	beq.n	99a <rtc_count_get_count+0x46>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     974:	2000      	movs	r0, #0
	switch (module->mode) {
     976:	2b01      	cmp	r3, #1
     978:	d100      	bne.n	97c <rtc_count_get_count+0x28>
			ret_val = rtc_module->MODE0.COUNT.reg;
     97a:	6930      	ldr	r0, [r6, #16]
			break;
	}

	return ret_val;
}
     97c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!(rtc_module->MODE0.READREQ.reg & RTC_READREQ_RCONT)){
     97e:	8873      	ldrh	r3, [r6, #2]
     980:	045b      	lsls	r3, r3, #17
     982:	d4f4      	bmi.n	96e <rtc_count_get_count+0x1a>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
     984:	8873      	ldrh	r3, [r6, #2]
     986:	22c0      	movs	r2, #192	; 0xc0
     988:	0212      	lsls	r2, r2, #8
     98a:	4313      	orrs	r3, r2
     98c:	8073      	strh	r3, [r6, #2]
		while (rtc_count_is_syncing(module)) {
     98e:	4d05      	ldr	r5, [pc, #20]	; (9a4 <rtc_count_get_count+0x50>)
     990:	0020      	movs	r0, r4
     992:	47a8      	blx	r5
     994:	2800      	cmp	r0, #0
     996:	d1fb      	bne.n	990 <rtc_count_get_count+0x3c>
     998:	e7e9      	b.n	96e <rtc_count_get_count+0x1a>
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     99a:	8a30      	ldrh	r0, [r6, #16]
     99c:	b280      	uxth	r0, r0
			break;
     99e:	e7ed      	b.n	97c <rtc_count_get_count+0x28>
     9a0:	ffff8000 	.word	0xffff8000
     9a4:	000008c9 	.word	0x000008c9

000009a8 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9aa:	b083      	sub	sp, #12
     9ac:	0004      	movs	r4, r0
     9ae:	9101      	str	r1, [sp, #4]
     9b0:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9b2:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     9b4:	4f11      	ldr	r7, [pc, #68]	; (9fc <rtc_count_set_compare+0x54>)
     9b6:	0020      	movs	r0, r4
     9b8:	47b8      	blx	r7
     9ba:	2800      	cmp	r0, #0
     9bc:	d1fb      	bne.n	9b6 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     9be:	7923      	ldrb	r3, [r4, #4]
     9c0:	2b00      	cmp	r3, #0
     9c2:	d00a      	beq.n	9da <rtc_count_set_compare+0x32>
     9c4:	2b01      	cmp	r3, #1
     9c6:	d116      	bne.n	9f6 <rtc_count_set_compare+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     9c8:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     9ca:	2d01      	cmp	r5, #1
     9cc:	d814      	bhi.n	9f8 <rtc_count_set_compare+0x50>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     9ce:	3506      	adds	r5, #6
     9d0:	00ad      	lsls	r5, r5, #2
     9d2:	9b01      	ldr	r3, [sp, #4]
     9d4:	51ab      	str	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     9d6:	2000      	movs	r0, #0
			break;
     9d8:	e00e      	b.n	9f8 <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
     9da:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     9dc:	2d02      	cmp	r5, #2
     9de:	d80b      	bhi.n	9f8 <rtc_count_set_compare+0x50>
			if (comp_value > 0xffff) {
     9e0:	4b07      	ldr	r3, [pc, #28]	; (a00 <rtc_count_set_compare+0x58>)
     9e2:	9a01      	ldr	r2, [sp, #4]
     9e4:	429a      	cmp	r2, r3
     9e6:	d807      	bhi.n	9f8 <rtc_count_set_compare+0x50>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     9e8:	466b      	mov	r3, sp
     9ea:	889b      	ldrh	r3, [r3, #4]
     9ec:	350c      	adds	r5, #12
     9ee:	006d      	lsls	r5, r5, #1
     9f0:	53ab      	strh	r3, [r5, r6]
	return STATUS_OK;
     9f2:	2000      	movs	r0, #0
			break;
     9f4:	e000      	b.n	9f8 <rtc_count_set_compare+0x50>
			return STATUS_ERR_BAD_FORMAT;
     9f6:	201a      	movs	r0, #26
}
     9f8:	b003      	add	sp, #12
     9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9fc:	000008c9 	.word	0x000008c9
     a00:	0000ffff 	.word	0x0000ffff

00000a04 <rtc_count_init>:
{
     a04:	b5f0      	push	{r4, r5, r6, r7, lr}
     a06:	b083      	sub	sp, #12
     a08:	0004      	movs	r4, r0
     a0a:	0016      	movs	r6, r2
	module->hw = hw;
     a0c:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
     a0e:	4a2e      	ldr	r2, [pc, #184]	; (ac8 <rtc_count_init+0xc4>)
     a10:	6993      	ldr	r3, [r2, #24]
     a12:	2120      	movs	r1, #32
     a14:	430b      	orrs	r3, r1
     a16:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     a18:	a901      	add	r1, sp, #4
     a1a:	2302      	movs	r3, #2
     a1c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     a1e:	2004      	movs	r0, #4
     a20:	4b2a      	ldr	r3, [pc, #168]	; (acc <rtc_count_init+0xc8>)
     a22:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     a24:	2004      	movs	r0, #4
     a26:	4b2a      	ldr	r3, [pc, #168]	; (ad0 <rtc_count_init+0xcc>)
     a28:	4798      	blx	r3
	rtc_count_reset(module);
     a2a:	0020      	movs	r0, r4
     a2c:	4b29      	ldr	r3, [pc, #164]	; (ad4 <rtc_count_init+0xd0>)
     a2e:	4798      	blx	r3
	module->mode                = config->mode;
     a30:	78b3      	ldrb	r3, [r6, #2]
     a32:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     a34:	7933      	ldrb	r3, [r6, #4]
     a36:	7163      	strb	r3, [r4, #5]
	_rtc_instance[0] = module;
     a38:	4b27      	ldr	r3, [pc, #156]	; (ad8 <rtc_count_init+0xd4>)
     a3a:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     a3c:	6827      	ldr	r7, [r4, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     a3e:	8833      	ldrh	r3, [r6, #0]
     a40:	803b      	strh	r3, [r7, #0]
	switch (config->mode) {
     a42:	78b3      	ldrb	r3, [r6, #2]
     a44:	2b00      	cmp	r3, #0
     a46:	d021      	beq.n	a8c <rtc_count_init+0x88>
			return STATUS_ERR_INVALID_ARG;
     a48:	2017      	movs	r0, #23
	switch (config->mode) {
     a4a:	2b01      	cmp	r3, #1
     a4c:	d11c      	bne.n	a88 <rtc_count_init+0x84>
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     a4e:	883b      	ldrh	r3, [r7, #0]
     a50:	b29b      	uxth	r3, r3
     a52:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     a54:	78f3      	ldrb	r3, [r6, #3]
     a56:	2b00      	cmp	r3, #0
     a58:	d003      	beq.n	a62 <rtc_count_init+0x5e>
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     a5a:	883b      	ldrh	r3, [r7, #0]
     a5c:	2280      	movs	r2, #128	; 0x80
     a5e:	4313      	orrs	r3, r2
     a60:	803b      	strh	r3, [r7, #0]
				while (rtc_count_is_syncing(module)) {
     a62:	4d1e      	ldr	r5, [pc, #120]	; (adc <rtc_count_init+0xd8>)
     a64:	0020      	movs	r0, r4
     a66:	47a8      	blx	r5
     a68:	2800      	cmp	r0, #0
     a6a:	d1fb      	bne.n	a64 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     a6c:	2200      	movs	r2, #0
     a6e:	68b1      	ldr	r1, [r6, #8]
     a70:	0020      	movs	r0, r4
     a72:	4b1b      	ldr	r3, [pc, #108]	; (ae0 <rtc_count_init+0xdc>)
     a74:	4798      	blx	r3
	if (config->continuously_update) {
     a76:	7933      	ldrb	r3, [r6, #4]
	return STATUS_OK;
     a78:	2000      	movs	r0, #0
	if (config->continuously_update) {
     a7a:	2b00      	cmp	r3, #0
     a7c:	d004      	beq.n	a88 <rtc_count_init+0x84>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     a7e:	887b      	ldrh	r3, [r7, #2]
     a80:	2280      	movs	r2, #128	; 0x80
     a82:	01d2      	lsls	r2, r2, #7
     a84:	4313      	orrs	r3, r2
     a86:	807b      	strh	r3, [r7, #2]
}
     a88:	b003      	add	sp, #12
     a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     a8c:	883b      	ldrh	r3, [r7, #0]
     a8e:	2204      	movs	r2, #4
     a90:	4313      	orrs	r3, r2
     a92:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     a94:	78f3      	ldrb	r3, [r6, #3]
				return STATUS_ERR_INVALID_ARG;
     a96:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     a98:	2b00      	cmp	r3, #0
     a9a:	d1f5      	bne.n	a88 <rtc_count_init+0x84>
				while (rtc_count_is_syncing(module)) {
     a9c:	4d0f      	ldr	r5, [pc, #60]	; (adc <rtc_count_init+0xd8>)
     a9e:	0020      	movs	r0, r4
     aa0:	47a8      	blx	r5
     aa2:	2800      	cmp	r0, #0
     aa4:	d1fb      	bne.n	a9e <rtc_count_init+0x9a>
				rtc_count_set_compare(module, config->compare_values[i],
     aa6:	2200      	movs	r2, #0
     aa8:	68b1      	ldr	r1, [r6, #8]
     aaa:	0020      	movs	r0, r4
     aac:	4b0c      	ldr	r3, [pc, #48]	; (ae0 <rtc_count_init+0xdc>)
     aae:	4798      	blx	r3
				while (rtc_count_is_syncing(module)) {
     ab0:	4d0a      	ldr	r5, [pc, #40]	; (adc <rtc_count_init+0xd8>)
     ab2:	0020      	movs	r0, r4
     ab4:	47a8      	blx	r5
     ab6:	2800      	cmp	r0, #0
     ab8:	d1fb      	bne.n	ab2 <rtc_count_init+0xae>
				rtc_count_set_compare(module, config->compare_values[i],
     aba:	2201      	movs	r2, #1
     abc:	68f1      	ldr	r1, [r6, #12]
     abe:	0020      	movs	r0, r4
     ac0:	4b07      	ldr	r3, [pc, #28]	; (ae0 <rtc_count_init+0xdc>)
     ac2:	4798      	blx	r3
     ac4:	e7d7      	b.n	a76 <rtc_count_init+0x72>
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	40000400 	.word	0x40000400
     acc:	00003181 	.word	0x00003181
     ad0:	000030f5 	.word	0x000030f5
     ad4:	00000929 	.word	0x00000929
     ad8:	20000588 	.word	0x20000588
     adc:	000008c9 	.word	0x000008c9
     ae0:	000009a9 	.word	0x000009a9

00000ae4 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ae6:	0004      	movs	r4, r0
     ae8:	000e      	movs	r6, r1
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     aea:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     aec:	2015      	movs	r0, #21
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     aee:	2b00      	cmp	r3, #0
     af0:	d000      	beq.n	af4 <rtc_count_set_period+0x10>

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;

	return STATUS_OK;
}
     af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
     af4:	6827      	ldr	r7, [r4, #0]
	while (rtc_count_is_syncing(module)) {
     af6:	4d03      	ldr	r5, [pc, #12]	; (b04 <rtc_count_set_period+0x20>)
     af8:	0020      	movs	r0, r4
     afa:	47a8      	blx	r5
     afc:	2800      	cmp	r0, #0
     afe:	d1fb      	bne.n	af8 <rtc_count_set_period+0x14>
	rtc_module->MODE1.PER.reg = period_value;
     b00:	82be      	strh	r6, [r7, #20]
	return STATUS_OK;
     b02:	e7f6      	b.n	af2 <rtc_count_set_period+0xe>
     b04:	000008c9 	.word	0x000008c9

00000b08 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     b08:	2a02      	cmp	r2, #2
     b0a:	d00b      	beq.n	b24 <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     b0c:	7903      	ldrb	r3, [r0, #4]
     b0e:	2b00      	cmp	r3, #0
     b10:	d005      	beq.n	b1e <rtc_count_register_callback+0x16>
     b12:	2b01      	cmp	r3, #1
     b14:	d112      	bne.n	b3c <rtc_count_register_callback+0x34>
     b16:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     b18:	2a01      	cmp	r2, #1
     b1a:	d80d      	bhi.n	b38 <rtc_count_register_callback+0x30>
     b1c:	e002      	b.n	b24 <rtc_count_register_callback+0x1c>
     b1e:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     b20:	2a02      	cmp	r2, #2
     b22:	d809      	bhi.n	b38 <rtc_count_register_callback+0x30>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     b24:	1c93      	adds	r3, r2, #2
     b26:	009b      	lsls	r3, r3, #2
     b28:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     b2a:	8a83      	ldrh	r3, [r0, #20]
     b2c:	2101      	movs	r1, #1
     b2e:	4091      	lsls	r1, r2
     b30:	430b      	orrs	r3, r1
     b32:	b29b      	uxth	r3, r3
     b34:	8283      	strh	r3, [r0, #20]
     b36:	2300      	movs	r3, #0
	}

	return status;
}
     b38:	0018      	movs	r0, r3
     b3a:	4770      	bx	lr
			status = STATUS_ERR_INVALID_ARG;
     b3c:	2317      	movs	r3, #23
     b3e:	e7fb      	b.n	b38 <rtc_count_register_callback+0x30>

00000b40 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     b40:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     b42:	6804      	ldr	r4, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     b44:	2902      	cmp	r1, #2
     b46:	d00b      	beq.n	b60 <rtc_count_enable_callback+0x20>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     b48:	2201      	movs	r2, #1
     b4a:	408a      	lsls	r2, r1
     b4c:	2303      	movs	r3, #3
     b4e:	4013      	ands	r3, r2
     b50:	71e3      	strb	r3, [r4, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     b52:	8ac3      	ldrh	r3, [r0, #22]
     b54:	2201      	movs	r2, #1
     b56:	408a      	lsls	r2, r1
     b58:	4313      	orrs	r3, r2
     b5a:	b29b      	uxth	r3, r3
     b5c:	82c3      	strh	r3, [r0, #22]
}
     b5e:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     b60:	2380      	movs	r3, #128	; 0x80
     b62:	71e3      	strb	r3, [r4, #7]
     b64:	e7f5      	b.n	b52 <rtc_count_enable_callback+0x12>
	...

00000b68 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     b68:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     b6a:	4b14      	ldr	r3, [pc, #80]	; (bbc <RTC_Handler+0x54>)
     b6c:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     b6e:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     b70:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
     b72:	8a93      	ldrh	r3, [r2, #20]
     b74:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     b76:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     b78:	79e3      	ldrb	r3, [r4, #7]
     b7a:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     b7c:	b258      	sxtb	r0, r3
     b7e:	2800      	cmp	r0, #0
     b80:	db06      	blt.n	b90 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     b82:	07d8      	lsls	r0, r3, #31
     b84:	d50f      	bpl.n	ba6 <RTC_Handler+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     b86:	07cb      	lsls	r3, r1, #31
     b88:	d40a      	bmi.n	ba0 <RTC_Handler+0x38>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     b8a:	2301      	movs	r3, #1
     b8c:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     b8e:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     b90:	074b      	lsls	r3, r1, #29
     b92:	d402      	bmi.n	b9a <RTC_Handler+0x32>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     b94:	2380      	movs	r3, #128	; 0x80
     b96:	7223      	strb	r3, [r4, #8]
     b98:	e7f9      	b.n	b8e <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     b9a:	6913      	ldr	r3, [r2, #16]
     b9c:	4798      	blx	r3
     b9e:	e7f9      	b.n	b94 <RTC_Handler+0x2c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     ba0:	6893      	ldr	r3, [r2, #8]
     ba2:	4798      	blx	r3
     ba4:	e7f1      	b.n	b8a <RTC_Handler+0x22>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     ba6:	079b      	lsls	r3, r3, #30
     ba8:	d5f1      	bpl.n	b8e <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     baa:	078b      	lsls	r3, r1, #30
     bac:	d402      	bmi.n	bb4 <RTC_Handler+0x4c>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     bae:	2302      	movs	r3, #2
     bb0:	7223      	strb	r3, [r4, #8]
}
     bb2:	e7ec      	b.n	b8e <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     bb4:	68d3      	ldr	r3, [r2, #12]
     bb6:	4798      	blx	r3
     bb8:	e7f9      	b.n	bae <RTC_Handler+0x46>
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	20000588 	.word	0x20000588

00000bc0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bc2:	46de      	mov	lr, fp
     bc4:	4657      	mov	r7, sl
     bc6:	464e      	mov	r6, r9
     bc8:	4645      	mov	r5, r8
     bca:	b5e0      	push	{r5, r6, r7, lr}
     bcc:	b087      	sub	sp, #28
     bce:	4680      	mov	r8, r0
     bd0:	9104      	str	r1, [sp, #16]
     bd2:	0016      	movs	r6, r2
     bd4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     bd6:	2200      	movs	r2, #0
     bd8:	2300      	movs	r3, #0
     bda:	2100      	movs	r1, #0
     bdc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     bde:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     be0:	2001      	movs	r0, #1
     be2:	0021      	movs	r1, r4
     be4:	9600      	str	r6, [sp, #0]
     be6:	9701      	str	r7, [sp, #4]
     be8:	465c      	mov	r4, fp
     bea:	9403      	str	r4, [sp, #12]
     bec:	4644      	mov	r4, r8
     bee:	9405      	str	r4, [sp, #20]
     bf0:	e013      	b.n	c1a <long_division+0x5a>
     bf2:	2420      	movs	r4, #32
     bf4:	1a64      	subs	r4, r4, r1
     bf6:	0005      	movs	r5, r0
     bf8:	40e5      	lsrs	r5, r4
     bfa:	46a8      	mov	r8, r5
     bfc:	e014      	b.n	c28 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     bfe:	9c00      	ldr	r4, [sp, #0]
     c00:	9d01      	ldr	r5, [sp, #4]
     c02:	1b12      	subs	r2, r2, r4
     c04:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     c06:	465c      	mov	r4, fp
     c08:	464d      	mov	r5, r9
     c0a:	432c      	orrs	r4, r5
     c0c:	46a3      	mov	fp, r4
     c0e:	9c03      	ldr	r4, [sp, #12]
     c10:	4645      	mov	r5, r8
     c12:	432c      	orrs	r4, r5
     c14:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     c16:	3901      	subs	r1, #1
     c18:	d325      	bcc.n	c66 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     c1a:	2420      	movs	r4, #32
     c1c:	4264      	negs	r4, r4
     c1e:	190c      	adds	r4, r1, r4
     c20:	d4e7      	bmi.n	bf2 <long_division+0x32>
     c22:	0005      	movs	r5, r0
     c24:	40a5      	lsls	r5, r4
     c26:	46a8      	mov	r8, r5
     c28:	0004      	movs	r4, r0
     c2a:	408c      	lsls	r4, r1
     c2c:	46a1      	mov	r9, r4
		r = r << 1;
     c2e:	1892      	adds	r2, r2, r2
     c30:	415b      	adcs	r3, r3
     c32:	0014      	movs	r4, r2
     c34:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c36:	9e05      	ldr	r6, [sp, #20]
     c38:	464f      	mov	r7, r9
     c3a:	403e      	ands	r6, r7
     c3c:	46b4      	mov	ip, r6
     c3e:	9e04      	ldr	r6, [sp, #16]
     c40:	4647      	mov	r7, r8
     c42:	403e      	ands	r6, r7
     c44:	46b2      	mov	sl, r6
     c46:	4666      	mov	r6, ip
     c48:	4657      	mov	r7, sl
     c4a:	433e      	orrs	r6, r7
     c4c:	d003      	beq.n	c56 <long_division+0x96>
			r |= 0x01;
     c4e:	0006      	movs	r6, r0
     c50:	4326      	orrs	r6, r4
     c52:	0032      	movs	r2, r6
     c54:	002b      	movs	r3, r5
		if (r >= d) {
     c56:	9c00      	ldr	r4, [sp, #0]
     c58:	9d01      	ldr	r5, [sp, #4]
     c5a:	429d      	cmp	r5, r3
     c5c:	d8db      	bhi.n	c16 <long_division+0x56>
     c5e:	d1ce      	bne.n	bfe <long_division+0x3e>
     c60:	4294      	cmp	r4, r2
     c62:	d8d8      	bhi.n	c16 <long_division+0x56>
     c64:	e7cb      	b.n	bfe <long_division+0x3e>
     c66:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     c68:	4658      	mov	r0, fp
     c6a:	0019      	movs	r1, r3
     c6c:	b007      	add	sp, #28
     c6e:	bc3c      	pop	{r2, r3, r4, r5}
     c70:	4690      	mov	r8, r2
     c72:	4699      	mov	r9, r3
     c74:	46a2      	mov	sl, r4
     c76:	46ab      	mov	fp, r5
     c78:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c7a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c7a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     c7c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c7e:	2340      	movs	r3, #64	; 0x40
     c80:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     c82:	4281      	cmp	r1, r0
     c84:	d202      	bcs.n	c8c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     c86:	0018      	movs	r0, r3
     c88:	bd10      	pop	{r4, pc}
		baud_calculated++;
     c8a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     c8c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     c8e:	1c63      	adds	r3, r4, #1
     c90:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     c92:	4288      	cmp	r0, r1
     c94:	d9f9      	bls.n	c8a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c96:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     c98:	2cff      	cmp	r4, #255	; 0xff
     c9a:	d8f4      	bhi.n	c86 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     c9c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     c9e:	2300      	movs	r3, #0
     ca0:	e7f1      	b.n	c86 <_sercom_get_sync_baud_val+0xc>
	...

00000ca4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca6:	b083      	sub	sp, #12
     ca8:	000f      	movs	r7, r1
     caa:	0016      	movs	r6, r2
     cac:	aa08      	add	r2, sp, #32
     cae:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     cb0:	0004      	movs	r4, r0
     cb2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cb4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     cb6:	42bc      	cmp	r4, r7
     cb8:	d902      	bls.n	cc0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     cba:	0010      	movs	r0, r2
     cbc:	b003      	add	sp, #12
     cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     cc0:	2b00      	cmp	r3, #0
     cc2:	d114      	bne.n	cee <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     cc4:	0002      	movs	r2, r0
     cc6:	0008      	movs	r0, r1
     cc8:	2100      	movs	r1, #0
     cca:	4c19      	ldr	r4, [pc, #100]	; (d30 <_sercom_get_async_baud_val+0x8c>)
     ccc:	47a0      	blx	r4
     cce:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     cd0:	003a      	movs	r2, r7
     cd2:	2300      	movs	r3, #0
     cd4:	2000      	movs	r0, #0
     cd6:	4c17      	ldr	r4, [pc, #92]	; (d34 <_sercom_get_async_baud_val+0x90>)
     cd8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     cda:	2200      	movs	r2, #0
     cdc:	2301      	movs	r3, #1
     cde:	1a12      	subs	r2, r2, r0
     ce0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     ce2:	0c12      	lsrs	r2, r2, #16
     ce4:	041b      	lsls	r3, r3, #16
     ce6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     ce8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     cea:	2200      	movs	r2, #0
     cec:	e7e5      	b.n	cba <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     cee:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     cf0:	2b01      	cmp	r3, #1
     cf2:	d1f9      	bne.n	ce8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     cf4:	000a      	movs	r2, r1
     cf6:	2300      	movs	r3, #0
     cf8:	2100      	movs	r1, #0
     cfa:	4c0d      	ldr	r4, [pc, #52]	; (d30 <_sercom_get_async_baud_val+0x8c>)
     cfc:	47a0      	blx	r4
     cfe:	0002      	movs	r2, r0
     d00:	000b      	movs	r3, r1
     d02:	9200      	str	r2, [sp, #0]
     d04:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     d06:	0038      	movs	r0, r7
     d08:	2100      	movs	r1, #0
     d0a:	4c0a      	ldr	r4, [pc, #40]	; (d34 <_sercom_get_async_baud_val+0x90>)
     d0c:	47a0      	blx	r4
     d0e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     d10:	2380      	movs	r3, #128	; 0x80
     d12:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d14:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     d16:	4298      	cmp	r0, r3
     d18:	d8cf      	bhi.n	cba <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     d1a:	0f79      	lsrs	r1, r7, #29
     d1c:	00f8      	lsls	r0, r7, #3
     d1e:	9a00      	ldr	r2, [sp, #0]
     d20:	9b01      	ldr	r3, [sp, #4]
     d22:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     d24:	00ea      	lsls	r2, r5, #3
     d26:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     d28:	b2d2      	uxtb	r2, r2
     d2a:	0352      	lsls	r2, r2, #13
     d2c:	432a      	orrs	r2, r5
     d2e:	e7db      	b.n	ce8 <_sercom_get_async_baud_val+0x44>
     d30:	000041ad 	.word	0x000041ad
     d34:	00000bc1 	.word	0x00000bc1

00000d38 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d38:	b510      	push	{r4, lr}
     d3a:	b082      	sub	sp, #8
     d3c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d3e:	4b0e      	ldr	r3, [pc, #56]	; (d78 <sercom_set_gclk_generator+0x40>)
     d40:	781b      	ldrb	r3, [r3, #0]
     d42:	2b00      	cmp	r3, #0
     d44:	d007      	beq.n	d56 <sercom_set_gclk_generator+0x1e>
     d46:	2900      	cmp	r1, #0
     d48:	d105      	bne.n	d56 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     d4a:	4b0b      	ldr	r3, [pc, #44]	; (d78 <sercom_set_gclk_generator+0x40>)
     d4c:	785b      	ldrb	r3, [r3, #1]
     d4e:	4283      	cmp	r3, r0
     d50:	d010      	beq.n	d74 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d52:	201d      	movs	r0, #29
     d54:	e00c      	b.n	d70 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     d56:	a901      	add	r1, sp, #4
     d58:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d5a:	2013      	movs	r0, #19
     d5c:	4b07      	ldr	r3, [pc, #28]	; (d7c <sercom_set_gclk_generator+0x44>)
     d5e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d60:	2013      	movs	r0, #19
     d62:	4b07      	ldr	r3, [pc, #28]	; (d80 <sercom_set_gclk_generator+0x48>)
     d64:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     d66:	4b04      	ldr	r3, [pc, #16]	; (d78 <sercom_set_gclk_generator+0x40>)
     d68:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d6a:	2201      	movs	r2, #1
     d6c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     d6e:	2000      	movs	r0, #0
}
     d70:	b002      	add	sp, #8
     d72:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     d74:	2000      	movs	r0, #0
     d76:	e7fb      	b.n	d70 <sercom_set_gclk_generator+0x38>
     d78:	20000044 	.word	0x20000044
     d7c:	00003181 	.word	0x00003181
     d80:	000030f5 	.word	0x000030f5

00000d84 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     d84:	4b2b      	ldr	r3, [pc, #172]	; (e34 <_sercom_get_default_pad+0xb0>)
     d86:	4298      	cmp	r0, r3
     d88:	d023      	beq.n	dd2 <_sercom_get_default_pad+0x4e>
     d8a:	d90f      	bls.n	dac <_sercom_get_default_pad+0x28>
     d8c:	4b2a      	ldr	r3, [pc, #168]	; (e38 <_sercom_get_default_pad+0xb4>)
     d8e:	4298      	cmp	r0, r3
     d90:	d02f      	beq.n	df2 <_sercom_get_default_pad+0x6e>
     d92:	4b2a      	ldr	r3, [pc, #168]	; (e3c <_sercom_get_default_pad+0xb8>)
     d94:	4298      	cmp	r0, r3
     d96:	d142      	bne.n	e1e <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d98:	2901      	cmp	r1, #1
     d9a:	d03a      	beq.n	e12 <_sercom_get_default_pad+0x8e>
     d9c:	2900      	cmp	r1, #0
     d9e:	d046      	beq.n	e2e <_sercom_get_default_pad+0xaa>
     da0:	2902      	cmp	r1, #2
     da2:	d038      	beq.n	e16 <_sercom_get_default_pad+0x92>
     da4:	2903      	cmp	r1, #3
     da6:	d038      	beq.n	e1a <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
     da8:	2000      	movs	r0, #0
     daa:	e039      	b.n	e20 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
     dac:	4b24      	ldr	r3, [pc, #144]	; (e40 <_sercom_get_default_pad+0xbc>)
     dae:	4298      	cmp	r0, r3
     db0:	d135      	bne.n	e1e <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     db2:	2901      	cmp	r1, #1
     db4:	d007      	beq.n	dc6 <_sercom_get_default_pad+0x42>
     db6:	2900      	cmp	r1, #0
     db8:	d033      	beq.n	e22 <_sercom_get_default_pad+0x9e>
     dba:	2902      	cmp	r1, #2
     dbc:	d005      	beq.n	dca <_sercom_get_default_pad+0x46>
     dbe:	2903      	cmp	r1, #3
     dc0:	d005      	beq.n	dce <_sercom_get_default_pad+0x4a>
	return 0;
     dc2:	2000      	movs	r0, #0
     dc4:	e02c      	b.n	e20 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dc6:	481f      	ldr	r0, [pc, #124]	; (e44 <_sercom_get_default_pad+0xc0>)
     dc8:	e02a      	b.n	e20 <_sercom_get_default_pad+0x9c>
     dca:	481f      	ldr	r0, [pc, #124]	; (e48 <_sercom_get_default_pad+0xc4>)
     dcc:	e028      	b.n	e20 <_sercom_get_default_pad+0x9c>
     dce:	481f      	ldr	r0, [pc, #124]	; (e4c <_sercom_get_default_pad+0xc8>)
     dd0:	e026      	b.n	e20 <_sercom_get_default_pad+0x9c>
     dd2:	2901      	cmp	r1, #1
     dd4:	d007      	beq.n	de6 <_sercom_get_default_pad+0x62>
     dd6:	2900      	cmp	r1, #0
     dd8:	d025      	beq.n	e26 <_sercom_get_default_pad+0xa2>
     dda:	2902      	cmp	r1, #2
     ddc:	d005      	beq.n	dea <_sercom_get_default_pad+0x66>
     dde:	2903      	cmp	r1, #3
     de0:	d005      	beq.n	dee <_sercom_get_default_pad+0x6a>
	return 0;
     de2:	2000      	movs	r0, #0
     de4:	e01c      	b.n	e20 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     de6:	481a      	ldr	r0, [pc, #104]	; (e50 <_sercom_get_default_pad+0xcc>)
     de8:	e01a      	b.n	e20 <_sercom_get_default_pad+0x9c>
     dea:	481a      	ldr	r0, [pc, #104]	; (e54 <_sercom_get_default_pad+0xd0>)
     dec:	e018      	b.n	e20 <_sercom_get_default_pad+0x9c>
     dee:	481a      	ldr	r0, [pc, #104]	; (e58 <_sercom_get_default_pad+0xd4>)
     df0:	e016      	b.n	e20 <_sercom_get_default_pad+0x9c>
     df2:	2901      	cmp	r1, #1
     df4:	d007      	beq.n	e06 <_sercom_get_default_pad+0x82>
     df6:	2900      	cmp	r1, #0
     df8:	d017      	beq.n	e2a <_sercom_get_default_pad+0xa6>
     dfa:	2902      	cmp	r1, #2
     dfc:	d005      	beq.n	e0a <_sercom_get_default_pad+0x86>
     dfe:	2903      	cmp	r1, #3
     e00:	d005      	beq.n	e0e <_sercom_get_default_pad+0x8a>
	return 0;
     e02:	2000      	movs	r0, #0
     e04:	e00c      	b.n	e20 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e06:	4815      	ldr	r0, [pc, #84]	; (e5c <_sercom_get_default_pad+0xd8>)
     e08:	e00a      	b.n	e20 <_sercom_get_default_pad+0x9c>
     e0a:	4815      	ldr	r0, [pc, #84]	; (e60 <_sercom_get_default_pad+0xdc>)
     e0c:	e008      	b.n	e20 <_sercom_get_default_pad+0x9c>
     e0e:	4815      	ldr	r0, [pc, #84]	; (e64 <_sercom_get_default_pad+0xe0>)
     e10:	e006      	b.n	e20 <_sercom_get_default_pad+0x9c>
     e12:	4815      	ldr	r0, [pc, #84]	; (e68 <_sercom_get_default_pad+0xe4>)
     e14:	e004      	b.n	e20 <_sercom_get_default_pad+0x9c>
     e16:	4815      	ldr	r0, [pc, #84]	; (e6c <_sercom_get_default_pad+0xe8>)
     e18:	e002      	b.n	e20 <_sercom_get_default_pad+0x9c>
     e1a:	4815      	ldr	r0, [pc, #84]	; (e70 <_sercom_get_default_pad+0xec>)
     e1c:	e000      	b.n	e20 <_sercom_get_default_pad+0x9c>
	return 0;
     e1e:	2000      	movs	r0, #0
}
     e20:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e22:	4814      	ldr	r0, [pc, #80]	; (e74 <_sercom_get_default_pad+0xf0>)
     e24:	e7fc      	b.n	e20 <_sercom_get_default_pad+0x9c>
     e26:	2003      	movs	r0, #3
     e28:	e7fa      	b.n	e20 <_sercom_get_default_pad+0x9c>
     e2a:	4813      	ldr	r0, [pc, #76]	; (e78 <_sercom_get_default_pad+0xf4>)
     e2c:	e7f8      	b.n	e20 <_sercom_get_default_pad+0x9c>
     e2e:	4813      	ldr	r0, [pc, #76]	; (e7c <_sercom_get_default_pad+0xf8>)
     e30:	e7f6      	b.n	e20 <_sercom_get_default_pad+0x9c>
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	42000c00 	.word	0x42000c00
     e38:	42001000 	.word	0x42001000
     e3c:	42001400 	.word	0x42001400
     e40:	42000800 	.word	0x42000800
     e44:	00050003 	.word	0x00050003
     e48:	00060003 	.word	0x00060003
     e4c:	00070003 	.word	0x00070003
     e50:	00010003 	.word	0x00010003
     e54:	001e0003 	.word	0x001e0003
     e58:	001f0003 	.word	0x001f0003
     e5c:	00090003 	.word	0x00090003
     e60:	000a0003 	.word	0x000a0003
     e64:	000b0003 	.word	0x000b0003
     e68:	00110003 	.word	0x00110003
     e6c:	00120003 	.word	0x00120003
     e70:	00130003 	.word	0x00130003
     e74:	00040003 	.word	0x00040003
     e78:	00080003 	.word	0x00080003
     e7c:	00100003 	.word	0x00100003

00000e80 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     e80:	b530      	push	{r4, r5, lr}
     e82:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     e84:	466a      	mov	r2, sp
     e86:	4b0f      	ldr	r3, [pc, #60]	; (ec4 <_sercom_get_sercom_inst_index+0x44>)
     e88:	cb32      	ldmia	r3!, {r1, r4, r5}
     e8a:	c232      	stmia	r2!, {r1, r4, r5}
     e8c:	681b      	ldr	r3, [r3, #0]
     e8e:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     e90:	0003      	movs	r3, r0
     e92:	9a00      	ldr	r2, [sp, #0]
     e94:	4282      	cmp	r2, r0
     e96:	d011      	beq.n	ebc <_sercom_get_sercom_inst_index+0x3c>
     e98:	9a01      	ldr	r2, [sp, #4]
     e9a:	4282      	cmp	r2, r0
     e9c:	d00a      	beq.n	eb4 <_sercom_get_sercom_inst_index+0x34>
     e9e:	9a02      	ldr	r2, [sp, #8]
     ea0:	4282      	cmp	r2, r0
     ea2:	d009      	beq.n	eb8 <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     ea4:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ea6:	9a03      	ldr	r2, [sp, #12]
     ea8:	429a      	cmp	r2, r3
     eaa:	d001      	beq.n	eb0 <_sercom_get_sercom_inst_index+0x30>
}
     eac:	b005      	add	sp, #20
     eae:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     eb0:	3003      	adds	r0, #3
     eb2:	e004      	b.n	ebe <_sercom_get_sercom_inst_index+0x3e>
     eb4:	2001      	movs	r0, #1
     eb6:	e002      	b.n	ebe <_sercom_get_sercom_inst_index+0x3e>
     eb8:	2002      	movs	r0, #2
     eba:	e000      	b.n	ebe <_sercom_get_sercom_inst_index+0x3e>
     ebc:	2000      	movs	r0, #0
			return i;
     ebe:	b2c0      	uxtb	r0, r0
     ec0:	e7f4      	b.n	eac <_sercom_get_sercom_inst_index+0x2c>
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	00004384 	.word	0x00004384

00000ec8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     ec8:	1c93      	adds	r3, r2, #2
     eca:	009b      	lsls	r3, r3, #2
     ecc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     ece:	2a02      	cmp	r2, #2
     ed0:	d009      	beq.n	ee6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     ed2:	2a03      	cmp	r2, #3
     ed4:	d00c      	beq.n	ef0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     ed6:	2301      	movs	r3, #1
     ed8:	4093      	lsls	r3, r2
     eda:	001a      	movs	r2, r3
     edc:	7e03      	ldrb	r3, [r0, #24]
     ede:	4313      	orrs	r3, r2
     ee0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     ee2:	2000      	movs	r0, #0
     ee4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     ee6:	7e03      	ldrb	r3, [r0, #24]
     ee8:	2210      	movs	r2, #16
     eea:	4313      	orrs	r3, r2
     eec:	7603      	strb	r3, [r0, #24]
     eee:	e7f8      	b.n	ee2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     ef0:	7e03      	ldrb	r3, [r0, #24]
     ef2:	2220      	movs	r2, #32
     ef4:	4313      	orrs	r3, r2
     ef6:	7603      	strb	r3, [r0, #24]
     ef8:	e7f3      	b.n	ee2 <tc_register_callback+0x1a>
	...

00000efc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     efc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     efe:	0080      	lsls	r0, r0, #2
     f00:	4b16      	ldr	r3, [pc, #88]	; (f5c <_tc_interrupt_handler+0x60>)
     f02:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     f04:	6823      	ldr	r3, [r4, #0]
     f06:	7b9d      	ldrb	r5, [r3, #14]
     f08:	7e22      	ldrb	r2, [r4, #24]
     f0a:	7e63      	ldrb	r3, [r4, #25]
     f0c:	4013      	ands	r3, r2
     f0e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     f10:	07eb      	lsls	r3, r5, #31
     f12:	d406      	bmi.n	f22 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     f14:	07ab      	lsls	r3, r5, #30
     f16:	d40b      	bmi.n	f30 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     f18:	06eb      	lsls	r3, r5, #27
     f1a:	d410      	bmi.n	f3e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     f1c:	06ab      	lsls	r3, r5, #26
     f1e:	d415      	bmi.n	f4c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     f20:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     f22:	0020      	movs	r0, r4
     f24:	68a3      	ldr	r3, [r4, #8]
     f26:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     f28:	2301      	movs	r3, #1
     f2a:	6822      	ldr	r2, [r4, #0]
     f2c:	7393      	strb	r3, [r2, #14]
     f2e:	e7f1      	b.n	f14 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     f30:	0020      	movs	r0, r4
     f32:	68e3      	ldr	r3, [r4, #12]
     f34:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     f36:	2302      	movs	r3, #2
     f38:	6822      	ldr	r2, [r4, #0]
     f3a:	7393      	strb	r3, [r2, #14]
     f3c:	e7ec      	b.n	f18 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     f3e:	0020      	movs	r0, r4
     f40:	6923      	ldr	r3, [r4, #16]
     f42:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     f44:	2310      	movs	r3, #16
     f46:	6822      	ldr	r2, [r4, #0]
     f48:	7393      	strb	r3, [r2, #14]
     f4a:	e7e7      	b.n	f1c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     f4c:	0020      	movs	r0, r4
     f4e:	6963      	ldr	r3, [r4, #20]
     f50:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     f52:	6823      	ldr	r3, [r4, #0]
     f54:	2220      	movs	r2, #32
     f56:	739a      	strb	r2, [r3, #14]
}
     f58:	e7e2      	b.n	f20 <_tc_interrupt_handler+0x24>
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	2000058c 	.word	0x2000058c

00000f60 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     f60:	b510      	push	{r4, lr}
     f62:	2000      	movs	r0, #0
     f64:	4b01      	ldr	r3, [pc, #4]	; (f6c <TC3_Handler+0xc>)
     f66:	4798      	blx	r3
     f68:	bd10      	pop	{r4, pc}
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	00000efd 	.word	0x00000efd

00000f70 <TC4_Handler>:
     f70:	b510      	push	{r4, lr}
     f72:	2001      	movs	r0, #1
     f74:	4b01      	ldr	r3, [pc, #4]	; (f7c <TC4_Handler+0xc>)
     f76:	4798      	blx	r3
     f78:	bd10      	pop	{r4, pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	00000efd 	.word	0x00000efd

00000f80 <TC5_Handler>:
     f80:	b510      	push	{r4, lr}
     f82:	2002      	movs	r0, #2
     f84:	4b01      	ldr	r3, [pc, #4]	; (f8c <TC5_Handler+0xc>)
     f86:	4798      	blx	r3
     f88:	bd10      	pop	{r4, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	00000efd 	.word	0x00000efd

00000f90 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     f90:	b530      	push	{r4, r5, lr}
     f92:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     f94:	aa01      	add	r2, sp, #4
     f96:	4b0b      	ldr	r3, [pc, #44]	; (fc4 <_tc_get_inst_index+0x34>)
     f98:	cb32      	ldmia	r3!, {r1, r4, r5}
     f9a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     f9c:	9b01      	ldr	r3, [sp, #4]
     f9e:	4298      	cmp	r0, r3
     fa0:	d00d      	beq.n	fbe <_tc_get_inst_index+0x2e>
     fa2:	9b02      	ldr	r3, [sp, #8]
     fa4:	4298      	cmp	r0, r3
     fa6:	d008      	beq.n	fba <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     fa8:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
     faa:	9a03      	ldr	r2, [sp, #12]
     fac:	4282      	cmp	r2, r0
     fae:	d002      	beq.n	fb6 <_tc_get_inst_index+0x26>
}
     fb0:	0018      	movs	r0, r3
     fb2:	b005      	add	sp, #20
     fb4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     fb6:	3302      	adds	r3, #2
     fb8:	e002      	b.n	fc0 <_tc_get_inst_index+0x30>
     fba:	2301      	movs	r3, #1
     fbc:	e000      	b.n	fc0 <_tc_get_inst_index+0x30>
     fbe:	2300      	movs	r3, #0
			return i;
     fc0:	b2db      	uxtb	r3, r3
     fc2:	e7f5      	b.n	fb0 <_tc_get_inst_index+0x20>
     fc4:	00004394 	.word	0x00004394

00000fc8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fca:	b087      	sub	sp, #28
     fcc:	0004      	movs	r4, r0
     fce:	000d      	movs	r5, r1
     fd0:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     fd2:	0008      	movs	r0, r1
     fd4:	4b85      	ldr	r3, [pc, #532]	; (11ec <tc_init+0x224>)
     fd6:	4798      	blx	r3
     fd8:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     fda:	ab05      	add	r3, sp, #20
     fdc:	221b      	movs	r2, #27
     fde:	701a      	strb	r2, [r3, #0]
     fe0:	3201      	adds	r2, #1
     fe2:	705a      	strb	r2, [r3, #1]
     fe4:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     fe6:	ab03      	add	r3, sp, #12
     fe8:	2280      	movs	r2, #128	; 0x80
     fea:	0112      	lsls	r2, r2, #4
     fec:	801a      	strh	r2, [r3, #0]
     fee:	2280      	movs	r2, #128	; 0x80
     ff0:	0152      	lsls	r2, r2, #5
     ff2:	805a      	strh	r2, [r3, #2]
     ff4:	2280      	movs	r2, #128	; 0x80
     ff6:	0192      	lsls	r2, r2, #6
     ff8:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     ffa:	2300      	movs	r3, #0
     ffc:	60a3      	str	r3, [r4, #8]
     ffe:	60e3      	str	r3, [r4, #12]
    1000:	6123      	str	r3, [r4, #16]
    1002:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1004:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1006:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1008:	0082      	lsls	r2, r0, #2
    100a:	4b79      	ldr	r3, [pc, #484]	; (11f0 <tc_init+0x228>)
    100c:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    100e:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1010:	78b3      	ldrb	r3, [r6, #2]
    1012:	2b08      	cmp	r3, #8
    1014:	d006      	beq.n	1024 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1016:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1018:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    101a:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    101c:	07db      	lsls	r3, r3, #31
    101e:	d505      	bpl.n	102c <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1020:	b007      	add	sp, #28
    1022:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1024:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1026:	07fa      	lsls	r2, r7, #31
    1028:	d5fa      	bpl.n	1020 <tc_init+0x58>
    102a:	e7f4      	b.n	1016 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    102c:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    102e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1030:	06db      	lsls	r3, r3, #27
    1032:	d4f5      	bmi.n	1020 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1034:	882b      	ldrh	r3, [r5, #0]
    1036:	079b      	lsls	r3, r3, #30
    1038:	d4f2      	bmi.n	1020 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    103a:	7c33      	ldrb	r3, [r6, #16]
    103c:	2b00      	cmp	r3, #0
    103e:	d179      	bne.n	1134 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    1040:	7f33      	ldrb	r3, [r6, #28]
    1042:	2b00      	cmp	r3, #0
    1044:	d000      	beq.n	1048 <tc_init+0x80>
    1046:	e081      	b.n	114c <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    1048:	496a      	ldr	r1, [pc, #424]	; (11f4 <tc_init+0x22c>)
    104a:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    104c:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    104e:	ab03      	add	r3, sp, #12
    1050:	5ad3      	ldrh	r3, [r2, r3]
    1052:	4303      	orrs	r3, r0
    1054:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1056:	78b3      	ldrb	r3, [r6, #2]
    1058:	2b08      	cmp	r3, #8
    105a:	d100      	bne.n	105e <tc_init+0x96>
    105c:	e086      	b.n	116c <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    105e:	a901      	add	r1, sp, #4
    1060:	7833      	ldrb	r3, [r6, #0]
    1062:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1064:	ab05      	add	r3, sp, #20
    1066:	5ddf      	ldrb	r7, [r3, r7]
    1068:	0038      	movs	r0, r7
    106a:	4b63      	ldr	r3, [pc, #396]	; (11f8 <tc_init+0x230>)
    106c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    106e:	0038      	movs	r0, r7
    1070:	4b62      	ldr	r3, [pc, #392]	; (11fc <tc_init+0x234>)
    1072:	4798      	blx	r3
	ctrla_tmp =
    1074:	8931      	ldrh	r1, [r6, #8]
    1076:	88b3      	ldrh	r3, [r6, #4]
    1078:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    107a:	78b1      	ldrb	r1, [r6, #2]
    107c:	79b2      	ldrb	r2, [r6, #6]
    107e:	4311      	orrs	r1, r2
	ctrla_tmp =
    1080:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1082:	7873      	ldrb	r3, [r6, #1]
    1084:	2b00      	cmp	r3, #0
    1086:	d002      	beq.n	108e <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1088:	2380      	movs	r3, #128	; 0x80
    108a:	011b      	lsls	r3, r3, #4
    108c:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    108e:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1090:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1092:	b25b      	sxtb	r3, r3
    1094:	2b00      	cmp	r3, #0
    1096:	dbfb      	blt.n	1090 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1098:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    109a:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    109c:	1e4b      	subs	r3, r1, #1
    109e:	4199      	sbcs	r1, r3
    10a0:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    10a2:	7bb3      	ldrb	r3, [r6, #14]
    10a4:	2b00      	cmp	r3, #0
    10a6:	d001      	beq.n	10ac <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    10a8:	2301      	movs	r3, #1
    10aa:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    10ac:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    10ae:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    10b0:	b25b      	sxtb	r3, r3
    10b2:	2b00      	cmp	r3, #0
    10b4:	dbfb      	blt.n	10ae <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    10b6:	23ff      	movs	r3, #255	; 0xff
    10b8:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    10ba:	2900      	cmp	r1, #0
    10bc:	d005      	beq.n	10ca <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    10be:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    10c0:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    10c2:	b25b      	sxtb	r3, r3
    10c4:	2b00      	cmp	r3, #0
    10c6:	dbfb      	blt.n	10c0 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    10c8:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    10ca:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    10cc:	7af3      	ldrb	r3, [r6, #11]
    10ce:	2b00      	cmp	r3, #0
    10d0:	d001      	beq.n	10d6 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    10d2:	2310      	movs	r3, #16
    10d4:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    10d6:	7b33      	ldrb	r3, [r6, #12]
    10d8:	2b00      	cmp	r3, #0
    10da:	d001      	beq.n	10e0 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    10dc:	2320      	movs	r3, #32
    10de:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    10e0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    10e2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    10e4:	b25b      	sxtb	r3, r3
    10e6:	2b00      	cmp	r3, #0
    10e8:	dbfb      	blt.n	10e2 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    10ea:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    10ec:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    10ee:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    10f0:	b25b      	sxtb	r3, r3
    10f2:	2b00      	cmp	r3, #0
    10f4:	dbfb      	blt.n	10ee <tc_init+0x126>
	switch (module_inst->counter_size) {
    10f6:	7923      	ldrb	r3, [r4, #4]
    10f8:	2b04      	cmp	r3, #4
    10fa:	d03f      	beq.n	117c <tc_init+0x1b4>
    10fc:	2b08      	cmp	r3, #8
    10fe:	d05e      	beq.n	11be <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    1100:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1102:	2b00      	cmp	r3, #0
    1104:	d000      	beq.n	1108 <tc_init+0x140>
    1106:	e78b      	b.n	1020 <tc_init+0x58>
    1108:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    110a:	b25b      	sxtb	r3, r3
    110c:	2b00      	cmp	r3, #0
    110e:	dbfb      	blt.n	1108 <tc_init+0x140>
				= config->counter_16_bit.value;
    1110:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1112:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1114:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1116:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1118:	b25b      	sxtb	r3, r3
    111a:	2b00      	cmp	r3, #0
    111c:	dbfb      	blt.n	1116 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    111e:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1120:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1122:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1124:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1126:	b25b      	sxtb	r3, r3
    1128:	2b00      	cmp	r3, #0
    112a:	dbfb      	blt.n	1124 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    112c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    112e:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1130:	2000      	movs	r0, #0
    1132:	e775      	b.n	1020 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1134:	a902      	add	r1, sp, #8
    1136:	2301      	movs	r3, #1
    1138:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    113a:	2200      	movs	r2, #0
    113c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    113e:	7e32      	ldrb	r2, [r6, #24]
    1140:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1142:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1144:	7d30      	ldrb	r0, [r6, #20]
    1146:	4b2e      	ldr	r3, [pc, #184]	; (1200 <tc_init+0x238>)
    1148:	4798      	blx	r3
    114a:	e779      	b.n	1040 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    114c:	a902      	add	r1, sp, #8
    114e:	2301      	movs	r3, #1
    1150:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1152:	2200      	movs	r2, #0
    1154:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1156:	3224      	adds	r2, #36	; 0x24
    1158:	18b2      	adds	r2, r6, r2
    115a:	7812      	ldrb	r2, [r2, #0]
    115c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    115e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1160:	331f      	adds	r3, #31
    1162:	18f3      	adds	r3, r6, r3
    1164:	7818      	ldrb	r0, [r3, #0]
    1166:	4b26      	ldr	r3, [pc, #152]	; (1200 <tc_init+0x238>)
    1168:	4798      	blx	r3
    116a:	e76d      	b.n	1048 <tc_init+0x80>
    116c:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    116e:	1c7a      	adds	r2, r7, #1
    1170:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1172:	ab03      	add	r3, sp, #12
    1174:	5ad3      	ldrh	r3, [r2, r3]
    1176:	4303      	orrs	r3, r0
    1178:	620b      	str	r3, [r1, #32]
    117a:	e770      	b.n	105e <tc_init+0x96>
    117c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    117e:	b25b      	sxtb	r3, r3
    1180:	2b00      	cmp	r3, #0
    1182:	dbfb      	blt.n	117c <tc_init+0x1b4>
					config->counter_8_bit.value;
    1184:	2328      	movs	r3, #40	; 0x28
    1186:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1188:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    118a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    118c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    118e:	b25b      	sxtb	r3, r3
    1190:	2b00      	cmp	r3, #0
    1192:	dbfb      	blt.n	118c <tc_init+0x1c4>
					config->counter_8_bit.period;
    1194:	2329      	movs	r3, #41	; 0x29
    1196:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1198:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    119a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    119c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    119e:	b25b      	sxtb	r3, r3
    11a0:	2b00      	cmp	r3, #0
    11a2:	dbfb      	blt.n	119c <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    11a4:	232a      	movs	r3, #42	; 0x2a
    11a6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    11a8:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    11aa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    11ac:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    11ae:	b25b      	sxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	dbfb      	blt.n	11ac <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    11b4:	232b      	movs	r3, #43	; 0x2b
    11b6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    11b8:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    11ba:	2000      	movs	r0, #0
    11bc:	e730      	b.n	1020 <tc_init+0x58>
    11be:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    11c0:	b25b      	sxtb	r3, r3
    11c2:	2b00      	cmp	r3, #0
    11c4:	dbfb      	blt.n	11be <tc_init+0x1f6>
				= config->counter_32_bit.value;
    11c6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    11c8:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    11ca:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    11cc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    11ce:	b25b      	sxtb	r3, r3
    11d0:	2b00      	cmp	r3, #0
    11d2:	dbfb      	blt.n	11cc <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    11d4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    11d6:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    11d8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    11da:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    11dc:	b25b      	sxtb	r3, r3
    11de:	2b00      	cmp	r3, #0
    11e0:	dbfb      	blt.n	11da <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    11e2:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    11e4:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    11e6:	2000      	movs	r0, #0
    11e8:	e71a      	b.n	1020 <tc_init+0x58>
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	00000f91 	.word	0x00000f91
    11f0:	2000058c 	.word	0x2000058c
    11f4:	40000400 	.word	0x40000400
    11f8:	00003181 	.word	0x00003181
    11fc:	000030f5 	.word	0x000030f5
    1200:	00003279 	.word	0x00003279

00001204 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    1204:	b570      	push	{r4, r5, r6, lr}
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    1206:	0204      	lsls	r4, r0, #8
    1208:	4e03      	ldr	r6, [pc, #12]	; (1218 <_eeprom_emulator_nvm_erase_row+0x14>)
		error_code = nvm_erase_row(
    120a:	4d04      	ldr	r5, [pc, #16]	; (121c <_eeprom_emulator_nvm_erase_row+0x18>)
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    120c:	6873      	ldr	r3, [r6, #4]
    120e:	1918      	adds	r0, r3, r4
		error_code = nvm_erase_row(
    1210:	47a8      	blx	r5
	} while (error_code == STATUS_BUSY);
    1212:	2805      	cmp	r0, #5
    1214:	d0fa      	beq.n	120c <_eeprom_emulator_nvm_erase_row+0x8>
}
    1216:	bd70      	pop	{r4, r5, r6, pc}
    1218:	20000048 	.word	0x20000048
    121c:	000007b5 	.word	0x000007b5

00001220 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    1220:	b5f0      	push	{r4, r5, r6, r7, lr}
    1222:	46de      	mov	lr, fp
    1224:	4657      	mov	r7, sl
    1226:	464e      	mov	r6, r9
    1228:	4645      	mov	r5, r8
    122a:	b5e0      	push	{r5, r6, r7, lr}
    122c:	b083      	sub	sp, #12
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    122e:	4b4d      	ldr	r3, [pc, #308]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    1230:	891b      	ldrh	r3, [r3, #8]
    1232:	2b00      	cmp	r3, #0
    1234:	d100      	bne.n	1238 <_eeprom_emulator_update_page_mapping+0x18>
    1236:	e08f      	b.n	1358 <_eeprom_emulator_update_page_mapping+0x138>
    1238:	2500      	movs	r5, #0
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    123a:	4b4a      	ldr	r3, [pc, #296]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    123c:	469a      	mov	sl, r3
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    123e:	001f      	movs	r7, r3
    1240:	e027      	b.n	1292 <_eeprom_emulator_update_page_mapping+0x72>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    1242:	9801      	ldr	r0, [sp, #4]
    1244:	4b48      	ldr	r3, [pc, #288]	; (1368 <_eeprom_emulator_update_page_mapping+0x148>)
    1246:	4798      	blx	r3
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    1248:	3404      	adds	r4, #4
    124a:	b2a4      	uxth	r4, r4
    124c:	4b45      	ldr	r3, [pc, #276]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    124e:	891b      	ldrh	r3, [r3, #8]
    1250:	42a3      	cmp	r3, r4
    1252:	d918      	bls.n	1286 <_eeprom_emulator_update_page_mapping+0x66>
			if (j == EEPROM_MASTER_PAGE_NUMBER) {
    1254:	3b01      	subs	r3, #1
    1256:	429c      	cmp	r4, r3
    1258:	d0f6      	beq.n	1248 <_eeprom_emulator_update_page_mapping+0x28>
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    125a:	687a      	ldr	r2, [r7, #4]
    125c:	01a3      	lsls	r3, r4, #6
    125e:	5cd3      	ldrb	r3, [r2, r3]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    1260:	2bff      	cmp	r3, #255	; 0xff
    1262:	d0f1      	beq.n	1248 <_eeprom_emulator_update_page_mapping+0x28>
			if(pre_logical_page == next_logical_page) {
    1264:	429e      	cmp	r6, r3
    1266:	d1ef      	bne.n	1248 <_eeprom_emulator_update_page_mapping+0x28>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    1268:	464b      	mov	r3, r9
    126a:	5cd3      	ldrb	r3, [r2, r3]
	if((_eeprom_instance.flash[phy_page].header.logical_page
    126c:	4641      	mov	r1, r8
    126e:	5c51      	ldrb	r1, [r2, r1]
    1270:	4299      	cmp	r1, r3
    1272:	d0e6      	beq.n	1242 <_eeprom_emulator_update_page_mapping+0x22>
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
    1274:	4659      	mov	r1, fp
    1276:	5c52      	ldrb	r2, [r2, r1]
    1278:	429a      	cmp	r2, r3
    127a:	d0e2      	beq.n	1242 <_eeprom_emulator_update_page_mapping+0x22>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    127c:	08a0      	lsrs	r0, r4, #2
    127e:	b2c0      	uxtb	r0, r0
    1280:	4b39      	ldr	r3, [pc, #228]	; (1368 <_eeprom_emulator_update_page_mapping+0x148>)
    1282:	4798      	blx	r3
    1284:	e7e0      	b.n	1248 <_eeprom_emulator_update_page_mapping+0x28>
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    1286:	3504      	adds	r5, #4
    1288:	b2ad      	uxth	r5, r5
    128a:	4b36      	ldr	r3, [pc, #216]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    128c:	891b      	ldrh	r3, [r3, #8]
    128e:	429d      	cmp	r5, r3
    1290:	d217      	bcs.n	12c2 <_eeprom_emulator_update_page_mapping+0xa2>
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    1292:	01ab      	lsls	r3, r5, #6
    1294:	4698      	mov	r8, r3
    1296:	4653      	mov	r3, sl
    1298:	685b      	ldr	r3, [r3, #4]
    129a:	4642      	mov	r2, r8
    129c:	5c9e      	ldrb	r6, [r3, r2]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    129e:	2eff      	cmp	r6, #255	; 0xff
    12a0:	d0f1      	beq.n	1286 <_eeprom_emulator_update_page_mapping+0x66>
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    12a2:	1d2c      	adds	r4, r5, #4
    12a4:	b2a4      	uxth	r4, r4
    12a6:	4b2f      	ldr	r3, [pc, #188]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    12a8:	891b      	ldrh	r3, [r3, #8]
    12aa:	429c      	cmp	r4, r3
    12ac:	d209      	bcs.n	12c2 <_eeprom_emulator_update_page_mapping+0xa2>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    12ae:	2280      	movs	r2, #128	; 0x80
    12b0:	4442      	add	r2, r8
    12b2:	4691      	mov	r9, r2
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    12b4:	2240      	movs	r2, #64	; 0x40
    12b6:	4442      	add	r2, r8
    12b8:	4693      	mov	fp, r2
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    12ba:	08aa      	lsrs	r2, r5, #2
    12bc:	b2d2      	uxtb	r2, r2
    12be:	9201      	str	r2, [sp, #4]
    12c0:	e7c8      	b.n	1254 <_eeprom_emulator_update_page_mapping+0x34>
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    12c2:	2b00      	cmp	r3, #0
    12c4:	d043      	beq.n	134e <_eeprom_emulator_update_page_mapping+0x12e>
		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
				(logical_page < _eeprom_instance.logical_pages)) {
    12c6:	4a27      	ldr	r2, [pc, #156]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    12c8:	7a97      	ldrb	r7, [r2, #10]
    12ca:	6851      	ldr	r1, [r2, #4]
    12cc:	2200      	movs	r2, #0
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    12ce:	1e5e      	subs	r6, r3, #1
			_eeprom_instance.page_map[logical_page] = c;
    12d0:	4d24      	ldr	r5, [pc, #144]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    12d2:	e004      	b.n	12de <_eeprom_emulator_update_page_mapping+0xbe>
    12d4:	3201      	adds	r2, #1
    12d6:	3140      	adds	r1, #64	; 0x40
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    12d8:	b290      	uxth	r0, r2
    12da:	4298      	cmp	r0, r3
    12dc:	d20a      	bcs.n	12f4 <_eeprom_emulator_update_page_mapping+0xd4>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    12de:	4296      	cmp	r6, r2
    12e0:	d0f8      	beq.n	12d4 <_eeprom_emulator_update_page_mapping+0xb4>
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    12e2:	7808      	ldrb	r0, [r1, #0]
    12e4:	b284      	uxth	r4, r0
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    12e6:	2cff      	cmp	r4, #255	; 0xff
    12e8:	d0f4      	beq.n	12d4 <_eeprom_emulator_update_page_mapping+0xb4>
    12ea:	42bc      	cmp	r4, r7
    12ec:	d2f2      	bcs.n	12d4 <_eeprom_emulator_update_page_mapping+0xb4>
			_eeprom_instance.page_map[logical_page] = c;
    12ee:	1828      	adds	r0, r5, r0
    12f0:	72c2      	strb	r2, [r0, #11]
    12f2:	e7ef      	b.n	12d4 <_eeprom_emulator_update_page_mapping+0xb4>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    12f4:	203f      	movs	r0, #63	; 0x3f
    12f6:	2287      	movs	r2, #135	; 0x87
    12f8:	491a      	ldr	r1, [pc, #104]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    12fa:	5488      	strb	r0, [r1, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    12fc:	089d      	lsrs	r5, r3, #2
    12fe:	d01f      	beq.n	1340 <_eeprom_emulator_update_page_mapping+0x120>

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    1300:	684c      	ldr	r4, [r1, #4]
    1302:	2104      	movs	r1, #4
    1304:	2700      	movs	r7, #0
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    1306:	3b01      	subs	r3, #1
    1308:	e013      	b.n	1332 <_eeprom_emulator_update_page_mapping+0x112>
    130a:	3201      	adds	r2, #1
    130c:	b292      	uxth	r2, r2
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    130e:	4291      	cmp	r1, r2
    1310:	d007      	beq.n	1322 <_eeprom_emulator_update_page_mapping+0x102>
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    1312:	429a      	cmp	r2, r3
    1314:	d0f9      	beq.n	130a <_eeprom_emulator_update_page_mapping+0xea>
			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    1316:	0190      	lsls	r0, r2, #6
    1318:	5d00      	ldrb	r0, [r0, r4]
    131a:	28ff      	cmp	r0, #255	; 0xff
    131c:	d0f5      	beq.n	130a <_eeprom_emulator_update_page_mapping+0xea>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    131e:	2600      	movs	r6, #0
    1320:	e7f3      	b.n	130a <_eeprom_emulator_update_page_mapping+0xea>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    1322:	2e00      	cmp	r6, #0
    1324:	d109      	bne.n	133a <_eeprom_emulator_update_page_mapping+0x11a>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    1326:	3701      	adds	r7, #1
    1328:	b2bf      	uxth	r7, r7
    132a:	3104      	adds	r1, #4
    132c:	b289      	uxth	r1, r1
    132e:	42bd      	cmp	r5, r7
    1330:	d006      	beq.n	1340 <_eeprom_emulator_update_page_mapping+0x120>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
    1332:	1f0a      	subs	r2, r1, #4
    1334:	b292      	uxth	r2, r2
    1336:	2601      	movs	r6, #1
    1338:	e7eb      	b.n	1312 <_eeprom_emulator_update_page_mapping+0xf2>
			_eeprom_instance.spare_row = c;
    133a:	2387      	movs	r3, #135	; 0x87
    133c:	4a09      	ldr	r2, [pc, #36]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    133e:	54d7      	strb	r7, [r2, r3]
			break;
		}
	}
}
    1340:	b003      	add	sp, #12
    1342:	bc3c      	pop	{r2, r3, r4, r5}
    1344:	4690      	mov	r8, r2
    1346:	4699      	mov	r9, r3
    1348:	46a2      	mov	sl, r4
    134a:	46ab      	mov	fp, r5
    134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    134e:	213f      	movs	r1, #63	; 0x3f
    1350:	2387      	movs	r3, #135	; 0x87
    1352:	4a04      	ldr	r2, [pc, #16]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    1354:	54d1      	strb	r1, [r2, r3]
    1356:	e7f3      	b.n	1340 <_eeprom_emulator_update_page_mapping+0x120>
    1358:	213f      	movs	r1, #63	; 0x3f
    135a:	2387      	movs	r3, #135	; 0x87
    135c:	4a01      	ldr	r2, [pc, #4]	; (1364 <_eeprom_emulator_update_page_mapping+0x144>)
    135e:	54d1      	strb	r1, [r2, r3]
    1360:	e7ee      	b.n	1340 <_eeprom_emulator_update_page_mapping+0x120>
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	20000048 	.word	0x20000048
    1368:	00001205 	.word	0x00001205

0000136c <_eeprom_emulator_nvm_read_page>:
{
    136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    136e:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    1370:	0184      	lsls	r4, r0, #6
    1372:	4f05      	ldr	r7, [pc, #20]	; (1388 <_eeprom_emulator_nvm_read_page+0x1c>)
		error_code = nvm_read_buffer(
    1374:	4e05      	ldr	r6, [pc, #20]	; (138c <_eeprom_emulator_nvm_read_page+0x20>)
				(uint32_t)&_eeprom_instance.flash[physical_page],
    1376:	687b      	ldr	r3, [r7, #4]
    1378:	1918      	adds	r0, r3, r4
		error_code = nvm_read_buffer(
    137a:	2240      	movs	r2, #64	; 0x40
    137c:	0029      	movs	r1, r5
    137e:	47b0      	blx	r6
	} while (error_code == STATUS_BUSY);
    1380:	2805      	cmp	r0, #5
    1382:	d0f8      	beq.n	1376 <_eeprom_emulator_nvm_read_page+0xa>
}
    1384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	20000048 	.word	0x20000048
    138c:	00000735 	.word	0x00000735

00001390 <_eeprom_emulator_nvm_fill_cache>:
{
    1390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1392:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    1394:	0184      	lsls	r4, r0, #6
    1396:	4f05      	ldr	r7, [pc, #20]	; (13ac <_eeprom_emulator_nvm_fill_cache+0x1c>)
		error_code = nvm_write_buffer(
    1398:	4e05      	ldr	r6, [pc, #20]	; (13b0 <_eeprom_emulator_nvm_fill_cache+0x20>)
				(uint32_t)&_eeprom_instance.flash[physical_page],
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	1918      	adds	r0, r3, r4
		error_code = nvm_write_buffer(
    139e:	2240      	movs	r2, #64	; 0x40
    13a0:	0029      	movs	r1, r5
    13a2:	47b0      	blx	r6
	} while (error_code == STATUS_BUSY);
    13a4:	2805      	cmp	r0, #5
    13a6:	d0f8      	beq.n	139a <_eeprom_emulator_nvm_fill_cache+0xa>
}
    13a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	20000048 	.word	0x20000048
    13b0:	0000065d 	.word	0x0000065d

000013b4 <_eeprom_emulator_nvm_commit_cache>:
{
    13b4:	b570      	push	{r4, r5, r6, lr}
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    13b6:	0184      	lsls	r4, r0, #6
    13b8:	4e04      	ldr	r6, [pc, #16]	; (13cc <_eeprom_emulator_nvm_commit_cache+0x18>)
		error_code = nvm_execute_command(
    13ba:	4d05      	ldr	r5, [pc, #20]	; (13d0 <_eeprom_emulator_nvm_commit_cache+0x1c>)
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    13bc:	6873      	ldr	r3, [r6, #4]
    13be:	1919      	adds	r1, r3, r4
		error_code = nvm_execute_command(
    13c0:	2200      	movs	r2, #0
    13c2:	2004      	movs	r0, #4
    13c4:	47a8      	blx	r5
	} while (error_code == STATUS_BUSY);
    13c6:	2805      	cmp	r0, #5
    13c8:	d0f8      	beq.n	13bc <_eeprom_emulator_nvm_commit_cache+0x8>
}
    13ca:	bd70      	pop	{r4, r5, r6, pc}
    13cc:	20000048 	.word	0x20000048
    13d0:	000005a9 	.word	0x000005a9

000013d4 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    13d4:	b510      	push	{r4, lr}
    13d6:	b09a      	sub	sp, #104	; 0x68
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    13d8:	ab18      	add	r3, sp, #96	; 0x60
    13da:	2100      	movs	r1, #0
    13dc:	7019      	strb	r1, [r3, #0]
	config->manual_page_write = true;
    13de:	2201      	movs	r2, #1
    13e0:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    13e2:	4a2e      	ldr	r2, [pc, #184]	; (149c <eeprom_emulator_init+0xc8>)
    13e4:	6852      	ldr	r2, [r2, #4]
    13e6:	06d2      	lsls	r2, r2, #27
    13e8:	0f12      	lsrs	r2, r2, #28
    13ea:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    13ec:	70d9      	strb	r1, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    13ee:	7119      	strb	r1, [r3, #4]
	nvm_get_config_defaults(&config);
	config.manual_page_write = true;

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    13f0:	4c2b      	ldr	r4, [pc, #172]	; (14a0 <eeprom_emulator_init+0xcc>)
    13f2:	a818      	add	r0, sp, #96	; 0x60
    13f4:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
    13f6:	2805      	cmp	r0, #5
    13f8:	d0fb      	beq.n	13f2 <eeprom_emulator_init+0x1e>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    13fa:	a814      	add	r0, sp, #80	; 0x50
    13fc:	4b29      	ldr	r3, [pc, #164]	; (14a4 <eeprom_emulator_init+0xd0>)
    13fe:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    1400:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return STATUS_ERR_NO_MEMORY;
    1402:	2016      	movs	r0, #22
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    1404:	2b0b      	cmp	r3, #11
    1406:	d801      	bhi.n	140c <eeprom_emulator_init+0x38>

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;

	return error_code;
}
    1408:	b01a      	add	sp, #104	; 0x68
    140a:	bd10      	pop	{r4, pc}
	_eeprom_instance.physical_pages =
    140c:	4c26      	ldr	r4, [pc, #152]	; (14a8 <eeprom_emulator_init+0xd4>)
    140e:	8123      	strh	r3, [r4, #8]
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    1410:	001a      	movs	r2, r3
    1412:	3a08      	subs	r2, #8
    1414:	0852      	lsrs	r2, r2, #1
	_eeprom_instance.logical_pages  =
    1416:	72a2      	strb	r2, [r4, #10]
			(void*)(FLASH_SIZE -
    1418:	041b      	lsls	r3, r3, #16
    141a:	0a9b      	lsrs	r3, r3, #10
    141c:	425b      	negs	r3, r3
    141e:	2280      	movs	r2, #128	; 0x80
    1420:	0252      	lsls	r2, r2, #9
    1422:	4694      	mov	ip, r2
    1424:	4463      	add	r3, ip
	_eeprom_instance.flash =
    1426:	6063      	str	r3, [r4, #4]
	_eeprom_instance.cache_active = false;
    1428:	2200      	movs	r2, #0
    142a:	23c8      	movs	r3, #200	; 0xc8
    142c:	54e2      	strb	r2, [r4, r3]
	_eeprom_emulator_update_page_mapping();
    142e:	4b1f      	ldr	r3, [pc, #124]	; (14ac <eeprom_emulator_init+0xd8>)
    1430:	4798      	blx	r3
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    1432:	2387      	movs	r3, #135	; 0x87
    1434:	5ce3      	ldrb	r3, [r4, r3]
		return STATUS_ERR_BAD_FORMAT;
    1436:	201a      	movs	r0, #26
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    1438:	2b3f      	cmp	r3, #63	; 0x3f
    143a:	d0e5      	beq.n	1408 <eeprom_emulator_init+0x34>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    143c:	aa01      	add	r2, sp, #4
    143e:	4b1c      	ldr	r3, [pc, #112]	; (14b0 <eeprom_emulator_init+0xdc>)
    1440:	cb13      	ldmia	r3!, {r0, r1, r4}
    1442:	c213      	stmia	r2!, {r0, r1, r4}
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    1444:	4b18      	ldr	r3, [pc, #96]	; (14a8 <eeprom_emulator_init+0xd4>)
    1446:	8918      	ldrh	r0, [r3, #8]
    1448:	3801      	subs	r0, #1
    144a:	b280      	uxth	r0, r0
    144c:	a904      	add	r1, sp, #16
    144e:	4b19      	ldr	r3, [pc, #100]	; (14b4 <eeprom_emulator_init+0xe0>)
    1450:	4798      	blx	r3
		if (master_page.magic_key[c] != magic_key[c]) {
    1452:	9b04      	ldr	r3, [sp, #16]
    1454:	9a01      	ldr	r2, [sp, #4]
    1456:	4293      	cmp	r3, r2
    1458:	d119      	bne.n	148e <eeprom_emulator_init+0xba>
    145a:	9b05      	ldr	r3, [sp, #20]
    145c:	9a02      	ldr	r2, [sp, #8]
    145e:	4293      	cmp	r3, r2
    1460:	d117      	bne.n	1492 <eeprom_emulator_init+0xbe>
    1462:	9b06      	ldr	r3, [sp, #24]
    1464:	9a03      	ldr	r2, [sp, #12]
    1466:	4293      	cmp	r3, r2
    1468:	d115      	bne.n	1496 <eeprom_emulator_init+0xc2>
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    146a:	ab04      	add	r3, sp, #16
    146c:	7bdb      	ldrb	r3, [r3, #15]
		return STATUS_ERR_IO;
    146e:	2010      	movs	r0, #16
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    1470:	2b01      	cmp	r3, #1
    1472:	d1c9      	bne.n	1408 <eeprom_emulator_init+0x34>
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    1474:	ab04      	add	r3, sp, #16
    1476:	7b1b      	ldrb	r3, [r3, #12]
    1478:	2b01      	cmp	r3, #1
    147a:	d1c5      	bne.n	1408 <eeprom_emulator_init+0x34>
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    147c:	ab04      	add	r3, sp, #16
    147e:	7b5b      	ldrb	r3, [r3, #13]
    1480:	2b00      	cmp	r3, #0
    1482:	d1c1      	bne.n	1408 <eeprom_emulator_init+0x34>
	_eeprom_instance.initialized = true;
    1484:	2201      	movs	r2, #1
    1486:	4b08      	ldr	r3, [pc, #32]	; (14a8 <eeprom_emulator_init+0xd4>)
    1488:	701a      	strb	r2, [r3, #0]
	return error_code;
    148a:	2000      	movs	r0, #0
    148c:	e7bc      	b.n	1408 <eeprom_emulator_init+0x34>
			return STATUS_ERR_BAD_FORMAT;
    148e:	201a      	movs	r0, #26
    1490:	e7ba      	b.n	1408 <eeprom_emulator_init+0x34>
    1492:	201a      	movs	r0, #26
    1494:	e7b8      	b.n	1408 <eeprom_emulator_init+0x34>
    1496:	201a      	movs	r0, #26
    1498:	e7b6      	b.n	1408 <eeprom_emulator_init+0x34>
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	41004000 	.word	0x41004000
    14a0:	00000521 	.word	0x00000521
    14a4:	00000845 	.word	0x00000845
    14a8:	20000048 	.word	0x20000048
    14ac:	00001221 	.word	0x00001221
    14b0:	000043a0 	.word	0x000043a0
    14b4:	0000136d 	.word	0x0000136d

000014b8 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    14b8:	b570      	push	{r4, r5, r6, lr}
    14ba:	b094      	sub	sp, #80	; 0x50
	_eeprom_instance.spare_row = 0;
    14bc:	4c2f      	ldr	r4, [pc, #188]	; (157c <eeprom_emulator_erase_memory+0xc4>)
    14be:	2200      	movs	r2, #0
    14c0:	2387      	movs	r3, #135	; 0x87
    14c2:	54e2      	strb	r2, [r4, r3]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    14c4:	2000      	movs	r0, #0
    14c6:	4b2e      	ldr	r3, [pc, #184]	; (1580 <eeprom_emulator_erase_memory+0xc8>)
    14c8:	4798      	blx	r3
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    14ca:	8925      	ldrh	r5, [r4, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    14cc:	2d04      	cmp	r5, #4
    14ce:	d925      	bls.n	151c <eeprom_emulator_erase_memory+0x64>
    14d0:	2600      	movs	r6, #0
    14d2:	2404      	movs	r4, #4
    14d4:	e019      	b.n	150a <eeprom_emulator_erase_memory+0x52>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    14d6:	08a0      	lsrs	r0, r4, #2
    14d8:	b2c0      	uxtb	r0, r0
    14da:	4b29      	ldr	r3, [pc, #164]	; (1580 <eeprom_emulator_erase_memory+0xc8>)
    14dc:	4798      	blx	r3
			memset(&data, 0xFF, sizeof(data));
    14de:	ad04      	add	r5, sp, #16
    14e0:	2240      	movs	r2, #64	; 0x40
    14e2:	21ff      	movs	r1, #255	; 0xff
    14e4:	0028      	movs	r0, r5
    14e6:	4b27      	ldr	r3, [pc, #156]	; (1584 <eeprom_emulator_erase_memory+0xcc>)
    14e8:	4798      	blx	r3
			data.header.logical_page = logical_page;
    14ea:	702e      	strb	r6, [r5, #0]
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    14ec:	0029      	movs	r1, r5
    14ee:	0020      	movs	r0, r4
    14f0:	4b25      	ldr	r3, [pc, #148]	; (1588 <eeprom_emulator_erase_memory+0xd0>)
    14f2:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
    14f4:	0020      	movs	r0, r4
    14f6:	4b25      	ldr	r3, [pc, #148]	; (158c <eeprom_emulator_erase_memory+0xd4>)
    14f8:	4798      	blx	r3
			logical_page++;
    14fa:	3601      	adds	r6, #1
    14fc:	b2b6      	uxth	r6, r6
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    14fe:	3401      	adds	r4, #1
    1500:	b2a4      	uxth	r4, r4
    1502:	4b1e      	ldr	r3, [pc, #120]	; (157c <eeprom_emulator_erase_memory+0xc4>)
    1504:	891d      	ldrh	r5, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    1506:	42a5      	cmp	r5, r4
    1508:	d908      	bls.n	151c <eeprom_emulator_erase_memory+0x64>
		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    150a:	3d01      	subs	r5, #1
    150c:	42ac      	cmp	r4, r5
    150e:	d0f6      	beq.n	14fe <eeprom_emulator_erase_memory+0x46>
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    1510:	2303      	movs	r3, #3
    1512:	4023      	ands	r3, r4
    1514:	d0df      	beq.n	14d6 <eeprom_emulator_erase_memory+0x1e>
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    1516:	2b01      	cmp	r3, #1
    1518:	d8f1      	bhi.n	14fe <eeprom_emulator_erase_memory+0x46>
    151a:	e7e0      	b.n	14de <eeprom_emulator_erase_memory+0x26>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    151c:	ae01      	add	r6, sp, #4
    151e:	4b1c      	ldr	r3, [pc, #112]	; (1590 <eeprom_emulator_erase_memory+0xd8>)
    1520:	0032      	movs	r2, r6
    1522:	cb13      	ldmia	r3!, {r0, r1, r4}
    1524:	c213      	stmia	r2!, {r0, r1, r4}
	memset(&master_page, 0xFF, sizeof(master_page));
    1526:	ac04      	add	r4, sp, #16
    1528:	2240      	movs	r2, #64	; 0x40
    152a:	21ff      	movs	r1, #255	; 0xff
    152c:	0020      	movs	r0, r4
    152e:	4b15      	ldr	r3, [pc, #84]	; (1584 <eeprom_emulator_erase_memory+0xcc>)
    1530:	4798      	blx	r3
		master_page.magic_key[c] = magic_key[c];
    1532:	9b01      	ldr	r3, [sp, #4]
    1534:	9304      	str	r3, [sp, #16]
    1536:	6873      	ldr	r3, [r6, #4]
    1538:	6063      	str	r3, [r4, #4]
    153a:	68b3      	ldr	r3, [r6, #8]
    153c:	60a3      	str	r3, [r4, #8]
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    153e:	2301      	movs	r3, #1
    1540:	73e3      	strb	r3, [r4, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    1542:	7323      	strb	r3, [r4, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    1544:	2300      	movs	r3, #0
    1546:	7363      	strb	r3, [r4, #13]
	master_page.revision      = EEPROM_REVISION;
    1548:	73a3      	strb	r3, [r4, #14]
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    154a:	3d01      	subs	r5, #1
    154c:	17eb      	asrs	r3, r5, #31
    154e:	2003      	movs	r0, #3
    1550:	4018      	ands	r0, r3
    1552:	1945      	adds	r5, r0, r5
    1554:	10ad      	asrs	r5, r5, #2
	_eeprom_emulator_nvm_erase_row(
    1556:	b2e8      	uxtb	r0, r5
    1558:	4b09      	ldr	r3, [pc, #36]	; (1580 <eeprom_emulator_erase_memory+0xc8>)
    155a:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    155c:	4d07      	ldr	r5, [pc, #28]	; (157c <eeprom_emulator_erase_memory+0xc4>)
    155e:	8928      	ldrh	r0, [r5, #8]
    1560:	3801      	subs	r0, #1
    1562:	b280      	uxth	r0, r0
    1564:	0021      	movs	r1, r4
    1566:	4b08      	ldr	r3, [pc, #32]	; (1588 <eeprom_emulator_erase_memory+0xd0>)
    1568:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    156a:	8928      	ldrh	r0, [r5, #8]
    156c:	3801      	subs	r0, #1
    156e:	b280      	uxth	r0, r0
    1570:	4b06      	ldr	r3, [pc, #24]	; (158c <eeprom_emulator_erase_memory+0xd4>)
    1572:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    1574:	4b07      	ldr	r3, [pc, #28]	; (1594 <eeprom_emulator_erase_memory+0xdc>)
    1576:	4798      	blx	r3
}
    1578:	b014      	add	sp, #80	; 0x50
    157a:	bd70      	pop	{r4, r5, r6, pc}
    157c:	20000048 	.word	0x20000048
    1580:	00001205 	.word	0x00001205
    1584:	0000425b 	.word	0x0000425b
    1588:	00001391 	.word	0x00001391
    158c:	000013b5 	.word	0x000013b5
    1590:	000043a0 	.word	0x000043a0
    1594:	00001221 	.word	0x00001221

00001598 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    1598:	b510      	push	{r4, lr}
    159a:	b090      	sub	sp, #64	; 0x40
    159c:	000c      	movs	r4, r1
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    159e:	4b15      	ldr	r3, [pc, #84]	; (15f4 <eeprom_emulator_read_page+0x5c>)
    15a0:	781a      	ldrb	r2, [r3, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    15a2:	231f      	movs	r3, #31
	if (_eeprom_instance.initialized == false) {
    15a4:	2a00      	cmp	r2, #0
    15a6:	d102      	bne.n	15ae <eeprom_emulator_read_page+0x16>
		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
	}

	return STATUS_OK;
}
    15a8:	0018      	movs	r0, r3
    15aa:	b010      	add	sp, #64	; 0x40
    15ac:	bd10      	pop	{r4, pc}
	if (logical_page >= _eeprom_instance.logical_pages) {
    15ae:	4b11      	ldr	r3, [pc, #68]	; (15f4 <eeprom_emulator_read_page+0x5c>)
    15b0:	7a9a      	ldrb	r2, [r3, #10]
		return STATUS_ERR_BAD_ADDRESS;
    15b2:	2318      	movs	r3, #24
	if (logical_page >= _eeprom_instance.logical_pages) {
    15b4:	4282      	cmp	r2, r0
    15b6:	d9f7      	bls.n	15a8 <eeprom_emulator_read_page+0x10>
	if ((_eeprom_instance.cache_active == true) &&
    15b8:	33b0      	adds	r3, #176	; 0xb0
    15ba:	4a0e      	ldr	r2, [pc, #56]	; (15f4 <eeprom_emulator_read_page+0x5c>)
    15bc:	5cd3      	ldrb	r3, [r2, r3]
    15be:	2b00      	cmp	r3, #0
    15c0:	d003      	beq.n	15ca <eeprom_emulator_read_page+0x32>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    15c2:	2388      	movs	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    15c4:	5cd3      	ldrb	r3, [r2, r3]
    15c6:	4283      	cmp	r3, r0
    15c8:	d00c      	beq.n	15e4 <eeprom_emulator_read_page+0x4c>
				_eeprom_instance.page_map[logical_page], &temp);
    15ca:	4b0a      	ldr	r3, [pc, #40]	; (15f4 <eeprom_emulator_read_page+0x5c>)
    15cc:	1818      	adds	r0, r3, r0
		_eeprom_emulator_nvm_read_page(
    15ce:	7ac0      	ldrb	r0, [r0, #11]
    15d0:	4669      	mov	r1, sp
    15d2:	4b09      	ldr	r3, [pc, #36]	; (15f8 <eeprom_emulator_read_page+0x60>)
    15d4:	4798      	blx	r3
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    15d6:	223c      	movs	r2, #60	; 0x3c
    15d8:	a901      	add	r1, sp, #4
    15da:	0020      	movs	r0, r4
    15dc:	4b07      	ldr	r3, [pc, #28]	; (15fc <eeprom_emulator_read_page+0x64>)
    15de:	4798      	blx	r3
	return STATUS_OK;
    15e0:	2300      	movs	r3, #0
    15e2:	e7e1      	b.n	15a8 <eeprom_emulator_read_page+0x10>
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    15e4:	223c      	movs	r2, #60	; 0x3c
    15e6:	4903      	ldr	r1, [pc, #12]	; (15f4 <eeprom_emulator_read_page+0x5c>)
    15e8:	318c      	adds	r1, #140	; 0x8c
    15ea:	0020      	movs	r0, r4
    15ec:	4b03      	ldr	r3, [pc, #12]	; (15fc <eeprom_emulator_read_page+0x64>)
    15ee:	4798      	blx	r3
	return STATUS_OK;
    15f0:	2300      	movs	r3, #0
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    15f2:	e7d9      	b.n	15a8 <eeprom_emulator_read_page+0x10>
    15f4:	20000048 	.word	0x20000048
    15f8:	0000136d 	.word	0x0000136d
    15fc:	00004249 	.word	0x00004249

00001600 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
    1600:	b510      	push	{r4, lr}
	enum status_code error_code = STATUS_OK;

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    1602:	23c8      	movs	r3, #200	; 0xc8
    1604:	4a08      	ldr	r2, [pc, #32]	; (1628 <eeprom_emulator_commit_page_buffer+0x28>)
    1606:	5cd3      	ldrb	r3, [r2, r3]
    1608:	2b00      	cmp	r3, #0
    160a:	d101      	bne.n	1610 <eeprom_emulator_commit_page_buffer+0x10>

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;

	return error_code;
}
    160c:	2000      	movs	r0, #0
    160e:	bd10      	pop	{r4, pc}
			_eeprom_instance.page_map[cached_logical_page]);
    1610:	0014      	movs	r4, r2
	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    1612:	2388      	movs	r3, #136	; 0x88
			_eeprom_instance.page_map[cached_logical_page]);
    1614:	5cd3      	ldrb	r3, [r2, r3]
    1616:	18d3      	adds	r3, r2, r3
	_eeprom_emulator_nvm_commit_cache(
    1618:	7ad8      	ldrb	r0, [r3, #11]
    161a:	4b04      	ldr	r3, [pc, #16]	; (162c <eeprom_emulator_commit_page_buffer+0x2c>)
    161c:	4798      	blx	r3
	_eeprom_instance.cache_active = false;
    161e:	2200      	movs	r2, #0
    1620:	23c8      	movs	r3, #200	; 0xc8
    1622:	54e2      	strb	r2, [r4, r3]
	return error_code;
    1624:	e7f2      	b.n	160c <eeprom_emulator_commit_page_buffer+0xc>
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	20000048 	.word	0x20000048
    162c:	000013b5 	.word	0x000013b5

00001630 <eeprom_emulator_write_page>:
{
    1630:	b5f0      	push	{r4, r5, r6, r7, lr}
    1632:	46de      	mov	lr, fp
    1634:	4657      	mov	r7, sl
    1636:	464e      	mov	r6, r9
    1638:	4645      	mov	r5, r8
    163a:	b5e0      	push	{r5, r6, r7, lr}
    163c:	b087      	sub	sp, #28
    163e:	0004      	movs	r4, r0
    1640:	9100      	str	r1, [sp, #0]
	if (_eeprom_instance.initialized == false) {
    1642:	4b5a      	ldr	r3, [pc, #360]	; (17ac <eeprom_emulator_write_page+0x17c>)
    1644:	781b      	ldrb	r3, [r3, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    1646:	201f      	movs	r0, #31
	if (_eeprom_instance.initialized == false) {
    1648:	2b00      	cmp	r3, #0
    164a:	d106      	bne.n	165a <eeprom_emulator_write_page+0x2a>
}
    164c:	b007      	add	sp, #28
    164e:	bc3c      	pop	{r2, r3, r4, r5}
    1650:	4690      	mov	r8, r2
    1652:	4699      	mov	r9, r3
    1654:	46a2      	mov	sl, r4
    1656:	46ab      	mov	fp, r5
    1658:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (logical_page >= _eeprom_instance.logical_pages) {
    165a:	4b54      	ldr	r3, [pc, #336]	; (17ac <eeprom_emulator_write_page+0x17c>)
    165c:	7a9b      	ldrb	r3, [r3, #10]
		return STATUS_ERR_BAD_ADDRESS;
    165e:	3807      	subs	r0, #7
	if (logical_page >= _eeprom_instance.logical_pages) {
    1660:	42a3      	cmp	r3, r4
    1662:	d9f3      	bls.n	164c <eeprom_emulator_write_page+0x1c>
	if ((_eeprom_instance.cache_active == true) &&
    1664:	23c8      	movs	r3, #200	; 0xc8
    1666:	4a51      	ldr	r2, [pc, #324]	; (17ac <eeprom_emulator_write_page+0x17c>)
    1668:	5cd3      	ldrb	r3, [r2, r3]
    166a:	2b00      	cmp	r3, #0
    166c:	d005      	beq.n	167a <eeprom_emulator_write_page+0x4a>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    166e:	2388      	movs	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    1670:	5cd3      	ldrb	r3, [r2, r3]
    1672:	42a3      	cmp	r3, r4
    1674:	d001      	beq.n	167a <eeprom_emulator_write_page+0x4a>
		eeprom_emulator_commit_page_buffer();
    1676:	4b4e      	ldr	r3, [pc, #312]	; (17b0 <eeprom_emulator_write_page+0x180>)
    1678:	4798      	blx	r3
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    167a:	4b4c      	ldr	r3, [pc, #304]	; (17ac <eeprom_emulator_write_page+0x17c>)
    167c:	191b      	adds	r3, r3, r4
    167e:	7ade      	ldrb	r6, [r3, #11]
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    1680:	2303      	movs	r3, #3
    1682:	0031      	movs	r1, r6
    1684:	4399      	bics	r1, r3
		if (_eeprom_instance.flash[page].header.logical_page ==
    1686:	4b49      	ldr	r3, [pc, #292]	; (17ac <eeprom_emulator_write_page+0x17c>)
    1688:	6858      	ldr	r0, [r3, #4]
    168a:	01b3      	lsls	r3, r6, #6
    168c:	5c1b      	ldrb	r3, [r3, r0]
    168e:	2bff      	cmp	r3, #255	; 0xff
    1690:	d047      	beq.n	1722 <eeprom_emulator_write_page+0xf2>
    1692:	1c75      	adds	r5, r6, #1
    1694:	b2ed      	uxtb	r5, r5
    1696:	3104      	adds	r1, #4
    1698:	b2c9      	uxtb	r1, r1
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    169a:	42a9      	cmp	r1, r5
    169c:	d057      	beq.n	174e <eeprom_emulator_write_page+0x11e>
    169e:	1c6b      	adds	r3, r5, #1
    16a0:	b2db      	uxtb	r3, r3
		if (_eeprom_instance.flash[page].header.logical_page ==
    16a2:	01aa      	lsls	r2, r5, #6
    16a4:	5c12      	ldrb	r2, [r2, r0]
    16a6:	2aff      	cmp	r2, #255	; 0xff
    16a8:	d03c      	beq.n	1724 <eeprom_emulator_write_page+0xf4>
    16aa:	001d      	movs	r5, r3
    16ac:	e7f5      	b.n	169a <eeprom_emulator_write_page+0x6a>
				page_trans[c].physical_page =
    16ae:	aa05      	add	r2, sp, #20
    16b0:	18d2      	adds	r2, r2, r3
    16b2:	7056      	strb	r6, [r2, #1]
    16b4:	e069      	b.n	178a <eeprom_emulator_write_page+0x15a>
    16b6:	af05      	add	r7, sp, #20
    16b8:	18ff      	adds	r7, r7, r3
    16ba:	707d      	strb	r5, [r7, #1]
    16bc:	e063      	b.n	1786 <eeprom_emulator_write_page+0x156>
			_eeprom_emulator_nvm_read_page(
    16be:	7870      	ldrb	r0, [r6, #1]
    16c0:	9902      	ldr	r1, [sp, #8]
    16c2:	4b3c      	ldr	r3, [pc, #240]	; (17b4 <eeprom_emulator_write_page+0x184>)
    16c4:	4798      	blx	r3
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    16c6:	4c39      	ldr	r4, [pc, #228]	; (17ac <eeprom_emulator_write_page+0x17c>)
    16c8:	0021      	movs	r1, r4
    16ca:	3188      	adds	r1, #136	; 0x88
    16cc:	b2a8      	uxth	r0, r5
    16ce:	4b3a      	ldr	r3, [pc, #232]	; (17b8 <eeprom_emulator_write_page+0x188>)
    16d0:	4798      	blx	r3
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    16d2:	464b      	mov	r3, r9
    16d4:	781b      	ldrb	r3, [r3, #0]
    16d6:	18e3      	adds	r3, r4, r3
    16d8:	72dd      	strb	r5, [r3, #11]
		_eeprom_instance.cache_active = true;
    16da:	2201      	movs	r2, #1
    16dc:	23c8      	movs	r3, #200	; 0xc8
    16de:	54e2      	strb	r2, [r4, r3]
    16e0:	3701      	adds	r7, #1
    16e2:	3602      	adds	r6, #2
	for (uint8_t c = 0; c < 2; c++) {
    16e4:	2f02      	cmp	r7, #2
    16e6:	d013      	beq.n	1710 <eeprom_emulator_write_page+0xe0>
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    16e8:	2387      	movs	r3, #135	; 0x87
    16ea:	465a      	mov	r2, fp
    16ec:	5cd5      	ldrb	r5, [r2, r3]
    16ee:	00ad      	lsls	r5, r5, #2
    16f0:	19ed      	adds	r5, r5, r7
		eeprom_emulator_commit_page_buffer();
    16f2:	47d0      	blx	sl
    16f4:	46b1      	mov	r9, r6
		if (logical_page == page_trans[c].logical_page) {
    16f6:	7833      	ldrb	r3, [r6, #0]
    16f8:	9901      	ldr	r1, [sp, #4]
    16fa:	428b      	cmp	r3, r1
    16fc:	d1df      	bne.n	16be <eeprom_emulator_write_page+0x8e>
			_eeprom_instance.cache.header.logical_page = logical_page;
    16fe:	2388      	movs	r3, #136	; 0x88
    1700:	4a2a      	ldr	r2, [pc, #168]	; (17ac <eeprom_emulator_write_page+0x17c>)
    1702:	54d1      	strb	r1, [r2, r3]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    1704:	223c      	movs	r2, #60	; 0x3c
    1706:	9900      	ldr	r1, [sp, #0]
    1708:	9803      	ldr	r0, [sp, #12]
    170a:	4b2c      	ldr	r3, [pc, #176]	; (17bc <eeprom_emulator_write_page+0x18c>)
    170c:	4798      	blx	r3
    170e:	e7da      	b.n	16c6 <eeprom_emulator_write_page+0x96>
	_eeprom_emulator_nvm_erase_row(row_number);
    1710:	4644      	mov	r4, r8
    1712:	4640      	mov	r0, r8
    1714:	4b2a      	ldr	r3, [pc, #168]	; (17c0 <eeprom_emulator_write_page+0x190>)
    1716:	4798      	blx	r3
	_eeprom_instance.spare_row = row_number;
    1718:	2387      	movs	r3, #135	; 0x87
    171a:	4a24      	ldr	r2, [pc, #144]	; (17ac <eeprom_emulator_write_page+0x17c>)
    171c:	54d4      	strb	r4, [r2, r3]
		return STATUS_OK;
    171e:	2000      	movs	r0, #0
    1720:	e794      	b.n	164c <eeprom_emulator_write_page+0x1c>
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    1722:	0035      	movs	r5, r6
	_eeprom_instance.cache.header.logical_page = logical_page;
    1724:	4e21      	ldr	r6, [pc, #132]	; (17ac <eeprom_emulator_write_page+0x17c>)
    1726:	2388      	movs	r3, #136	; 0x88
    1728:	54f4      	strb	r4, [r6, r3]
	memcpy(&_eeprom_instance.cache.data,
    172a:	0030      	movs	r0, r6
    172c:	308c      	adds	r0, #140	; 0x8c
    172e:	223c      	movs	r2, #60	; 0x3c
    1730:	9900      	ldr	r1, [sp, #0]
    1732:	4b22      	ldr	r3, [pc, #136]	; (17bc <eeprom_emulator_write_page+0x18c>)
    1734:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    1736:	0031      	movs	r1, r6
    1738:	3188      	adds	r1, #136	; 0x88
    173a:	b2a8      	uxth	r0, r5
    173c:	4b1e      	ldr	r3, [pc, #120]	; (17b8 <eeprom_emulator_write_page+0x188>)
    173e:	4798      	blx	r3
	_eeprom_instance.page_map[logical_page] = new_page;
    1740:	1934      	adds	r4, r6, r4
    1742:	72e5      	strb	r5, [r4, #11]
	_eeprom_instance.cache_active           = true;
    1744:	2201      	movs	r2, #1
    1746:	23c8      	movs	r3, #200	; 0xc8
    1748:	54f2      	strb	r2, [r6, r3]
	return STATUS_OK;
    174a:	2000      	movs	r0, #0
    174c:	e77e      	b.n	164c <eeprom_emulator_write_page+0x1c>
		_eeprom_emulator_move_data_to_spare(
    174e:	08b3      	lsrs	r3, r6, #2
    1750:	4698      	mov	r8, r3
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    1752:	021b      	lsls	r3, r3, #8
	const struct _eeprom_page *row_data =
    1754:	4a15      	ldr	r2, [pc, #84]	; (17ac <eeprom_emulator_write_page+0x17c>)
    1756:	6852      	ldr	r2, [r2, #4]
    1758:	18d3      	adds	r3, r2, r3
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    175a:	aa05      	add	r2, sp, #20
    175c:	7819      	ldrb	r1, [r3, #0]
    175e:	7011      	strb	r1, [r2, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    1760:	2103      	movs	r1, #3
    1762:	438e      	bics	r6, r1
    1764:	7056      	strb	r6, [r2, #1]
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    1766:	313d      	adds	r1, #61	; 0x3d
    1768:	5c59      	ldrb	r1, [r3, r1]
    176a:	7091      	strb	r1, [r2, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    176c:	1c71      	adds	r1, r6, #1
    176e:	70d1      	strb	r1, [r2, #3]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    1770:	2280      	movs	r2, #128	; 0x80
    1772:	5c98      	ldrb	r0, [r3, r2]
    1774:	3240      	adds	r2, #64	; 0x40
    1776:	5c99      	ldrb	r1, [r3, r2]
    1778:	2300      	movs	r3, #0
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    177a:	1cb5      	adds	r5, r6, #2
    177c:	3603      	adds	r6, #3
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    177e:	aa05      	add	r2, sp, #20
    1780:	5cd2      	ldrb	r2, [r2, r3]
    1782:	4290      	cmp	r0, r2
    1784:	d097      	beq.n	16b6 <eeprom_emulator_write_page+0x86>
    1786:	428a      	cmp	r2, r1
    1788:	d091      	beq.n	16ae <eeprom_emulator_write_page+0x7e>
    178a:	3302      	adds	r3, #2
	for (uint8_t c = 0; c < 2; c++) {
    178c:	2b04      	cmp	r3, #4
    178e:	d1f6      	bne.n	177e <eeprom_emulator_write_page+0x14e>
    1790:	ae05      	add	r6, sp, #20
    1792:	2700      	movs	r7, #0
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    1794:	4b05      	ldr	r3, [pc, #20]	; (17ac <eeprom_emulator_write_page+0x17c>)
    1796:	469b      	mov	fp, r3
		eeprom_emulator_commit_page_buffer();
    1798:	4b05      	ldr	r3, [pc, #20]	; (17b0 <eeprom_emulator_write_page+0x180>)
    179a:	469a      	mov	sl, r3
			_eeprom_emulator_nvm_read_page(
    179c:	465b      	mov	r3, fp
    179e:	3388      	adds	r3, #136	; 0x88
    17a0:	9302      	str	r3, [sp, #8]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    17a2:	3304      	adds	r3, #4
    17a4:	9303      	str	r3, [sp, #12]
    17a6:	9401      	str	r4, [sp, #4]
    17a8:	e79e      	b.n	16e8 <eeprom_emulator_write_page+0xb8>
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	20000048 	.word	0x20000048
    17b0:	00001601 	.word	0x00001601
    17b4:	0000136d 	.word	0x0000136d
    17b8:	00001391 	.word	0x00001391
    17bc:	00004249 	.word	0x00004249
    17c0:	00001205 	.word	0x00001205

000017c4 <spi_enable_write>:
	spi_write_buffer_wait(&datain.master, command_buffer,1);
	spi_select_slave(&datain.master, &datain.slave, false);
	delay_s(6);
	return status_out;
};
enum status_code spi_enable_write(struct packet datain){
    17c4:	b084      	sub	sp, #16
    17c6:	b570      	push	{r4, r5, r6, lr}
    17c8:	9004      	str	r0, [sp, #16]
    17ca:	9105      	str	r1, [sp, #20]
    17cc:	9206      	str	r2, [sp, #24]
    17ce:	9307      	str	r3, [sp, #28]
	command_buffer[0] = FLASH_ENABLE_WRITE;
    17d0:	2206      	movs	r2, #6
    17d2:	4b0f      	ldr	r3, [pc, #60]	; (1810 <spi_enable_write+0x4c>)
    17d4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&datain.master, &datain.slave, true);
    17d6:	3a05      	subs	r2, #5
    17d8:	a913      	add	r1, sp, #76	; 0x4c
    17da:	a804      	add	r0, sp, #16
    17dc:	4b0d      	ldr	r3, [pc, #52]	; (1814 <spi_enable_write+0x50>)
    17de:	4798      	blx	r3
	while(spi_write_buffer_wait(&datain.master,command_buffer,1) != STATUS_OK){
    17e0:	4d0b      	ldr	r5, [pc, #44]	; (1810 <spi_enable_write+0x4c>)
    17e2:	4c0d      	ldr	r4, [pc, #52]	; (1818 <spi_enable_write+0x54>)
    17e4:	2201      	movs	r2, #1
    17e6:	0029      	movs	r1, r5
    17e8:	a804      	add	r0, sp, #16
    17ea:	47a0      	blx	r4
    17ec:	2800      	cmp	r0, #0
    17ee:	d1f9      	bne.n	17e4 <spi_enable_write+0x20>
		
	}
	status_out = STATUS_OK;
    17f0:	4c0a      	ldr	r4, [pc, #40]	; (181c <spi_enable_write+0x58>)
    17f2:	2300      	movs	r3, #0
    17f4:	7023      	strb	r3, [r4, #0]
	spi_select_slave(&datain.master, &datain.slave, false);
    17f6:	2200      	movs	r2, #0
    17f8:	a913      	add	r1, sp, #76	; 0x4c
    17fa:	a804      	add	r0, sp, #16
    17fc:	4b05      	ldr	r3, [pc, #20]	; (1814 <spi_enable_write+0x50>)
    17fe:	4798      	blx	r3
	delay_ms(15);
    1800:	200f      	movs	r0, #15
    1802:	4b07      	ldr	r3, [pc, #28]	; (1820 <spi_enable_write+0x5c>)
    1804:	4798      	blx	r3
	return status_out;
    1806:	7820      	ldrb	r0, [r4, #0]
}; 
    1808:	bc70      	pop	{r4, r5, r6}
    180a:	bc08      	pop	{r3}
    180c:	b004      	add	sp, #16
    180e:	4718      	bx	r3
    1810:	2000059c 	.word	0x2000059c
    1814:	0000216d 	.word	0x0000216d
    1818:	00002261 	.word	0x00002261
    181c:	20000599 	.word	0x20000599
    1820:	00000181 	.word	0x00000181

00001824 <spi_erase_chip>:
enum status_code spi_erase_chip(struct packet datain){
    1824:	b084      	sub	sp, #16
    1826:	b530      	push	{r4, r5, lr}
    1828:	b08f      	sub	sp, #60	; 0x3c
    182a:	9012      	str	r0, [sp, #72]	; 0x48
    182c:	9113      	str	r1, [sp, #76]	; 0x4c
    182e:	9214      	str	r2, [sp, #80]	; 0x50
    1830:	9315      	str	r3, [sp, #84]	; 0x54
	spi_enable_write(datain);
    1832:	2238      	movs	r2, #56	; 0x38
    1834:	a916      	add	r1, sp, #88	; 0x58
    1836:	4668      	mov	r0, sp
    1838:	4b11      	ldr	r3, [pc, #68]	; (1880 <spi_erase_chip+0x5c>)
    183a:	4798      	blx	r3
    183c:	9812      	ldr	r0, [sp, #72]	; 0x48
    183e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1840:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1842:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1844:	4c0f      	ldr	r4, [pc, #60]	; (1884 <spi_erase_chip+0x60>)
    1846:	47a0      	blx	r4
	command_buffer[0] = FLASH_ERASE_CHIP;
    1848:	4d0f      	ldr	r5, [pc, #60]	; (1888 <spi_erase_chip+0x64>)
    184a:	23c7      	movs	r3, #199	; 0xc7
    184c:	702b      	strb	r3, [r5, #0]
	spi_select_slave(&datain.master, &datain.slave, true);
    184e:	2201      	movs	r2, #1
    1850:	a921      	add	r1, sp, #132	; 0x84
    1852:	a812      	add	r0, sp, #72	; 0x48
    1854:	4c0d      	ldr	r4, [pc, #52]	; (188c <spi_erase_chip+0x68>)
    1856:	47a0      	blx	r4
	spi_write_buffer_wait(&datain.master, command_buffer,1);
    1858:	2201      	movs	r2, #1
    185a:	0029      	movs	r1, r5
    185c:	a812      	add	r0, sp, #72	; 0x48
    185e:	4b0c      	ldr	r3, [pc, #48]	; (1890 <spi_erase_chip+0x6c>)
    1860:	4798      	blx	r3
	spi_select_slave(&datain.master, &datain.slave, false);
    1862:	2200      	movs	r2, #0
    1864:	a921      	add	r1, sp, #132	; 0x84
    1866:	a812      	add	r0, sp, #72	; 0x48
    1868:	47a0      	blx	r4
	delay_s(6);
    186a:	480a      	ldr	r0, [pc, #40]	; (1894 <spi_erase_chip+0x70>)
    186c:	4b0a      	ldr	r3, [pc, #40]	; (1898 <spi_erase_chip+0x74>)
    186e:	4798      	blx	r3
	return status_out;
    1870:	4b0a      	ldr	r3, [pc, #40]	; (189c <spi_erase_chip+0x78>)
    1872:	7818      	ldrb	r0, [r3, #0]
};
    1874:	b00f      	add	sp, #60	; 0x3c
    1876:	bc30      	pop	{r4, r5}
    1878:	bc08      	pop	{r3}
    187a:	b004      	add	sp, #16
    187c:	4718      	bx	r3
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	00004249 	.word	0x00004249
    1884:	000017c5 	.word	0x000017c5
    1888:	2000059c 	.word	0x2000059c
    188c:	0000216d 	.word	0x0000216d
    1890:	00002261 	.word	0x00002261
    1894:	00001770 	.word	0x00001770
    1898:	00000181 	.word	0x00000181
    189c:	20000599 	.word	0x20000599

000018a0 <spi_read_256>:
	status_out = spi_transceive_buffer_wait(&datain.master,command_buffer,datain.data,2);
	spi_select_slave(&datain.master, &datain.slave, false);
	delay_us(1);
	return status_out;
};
enum status_code spi_read_256(struct packet datain){
    18a0:	b084      	sub	sp, #16
    18a2:	b570      	push	{r4, r5, r6, lr}
    18a4:	9004      	str	r0, [sp, #16]
    18a6:	9105      	str	r1, [sp, #20]
    18a8:	9206      	str	r2, [sp, #24]
    18aa:	9307      	str	r3, [sp, #28]
	command_buffer[0] = FLASH_FAST_READ;
    18ac:	4c10      	ldr	r4, [pc, #64]	; (18f0 <spi_read_256+0x50>)
    18ae:	230b      	movs	r3, #11
    18b0:	7023      	strb	r3, [r4, #0]
	command_buffer[1] = (datain.address & 0x00ff0000) >> 16;
    18b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    18b4:	0c1a      	lsrs	r2, r3, #16
    18b6:	7062      	strb	r2, [r4, #1]
	command_buffer[2] = (datain.address & 0x0000ff00) >> 8;
    18b8:	0a1a      	lsrs	r2, r3, #8
    18ba:	70a2      	strb	r2, [r4, #2]
	command_buffer[3] = (datain.address & 0x000000ff);
    18bc:	70e3      	strb	r3, [r4, #3]
	spi_select_slave(&datain.master, &datain.slave, true);
    18be:	2201      	movs	r2, #1
    18c0:	a913      	add	r1, sp, #76	; 0x4c
    18c2:	a804      	add	r0, sp, #16
    18c4:	4d0b      	ldr	r5, [pc, #44]	; (18f4 <spi_read_256+0x54>)
    18c6:	47a8      	blx	r5
	spi_transceive_buffer_wait(&datain.master, command_buffer ,datain.data,261);
    18c8:	2306      	movs	r3, #6
    18ca:	33ff      	adds	r3, #255	; 0xff
    18cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
    18ce:	0021      	movs	r1, r4
    18d0:	a804      	add	r0, sp, #16
    18d2:	4c09      	ldr	r4, [pc, #36]	; (18f8 <spi_read_256+0x58>)
    18d4:	47a0      	blx	r4
	spi_select_slave(&datain.master, &datain.slave, false);
    18d6:	2200      	movs	r2, #0
    18d8:	a913      	add	r1, sp, #76	; 0x4c
    18da:	a804      	add	r0, sp, #16
    18dc:	47a8      	blx	r5
	delay_us(1);
    18de:	2001      	movs	r0, #1
    18e0:	4b06      	ldr	r3, [pc, #24]	; (18fc <spi_read_256+0x5c>)
    18e2:	4798      	blx	r3
	return status_out;
    18e4:	4b06      	ldr	r3, [pc, #24]	; (1900 <spi_read_256+0x60>)
    18e6:	7818      	ldrb	r0, [r3, #0]
};
    18e8:	bc70      	pop	{r4, r5, r6}
    18ea:	bc08      	pop	{r3}
    18ec:	b004      	add	sp, #16
    18ee:	4718      	bx	r3
    18f0:	2000059c 	.word	0x2000059c
    18f4:	0000216d 	.word	0x0000216d
    18f8:	00002471 	.word	0x00002471
    18fc:	00000155 	.word	0x00000155
    1900:	20000599 	.word	0x20000599

00001904 <spi_write_page>:
enum status_code spi_write_page(struct packet datain){
    1904:	b084      	sub	sp, #16
    1906:	b530      	push	{r4, r5, lr}
    1908:	b08f      	sub	sp, #60	; 0x3c
    190a:	9012      	str	r0, [sp, #72]	; 0x48
    190c:	9113      	str	r1, [sp, #76]	; 0x4c
    190e:	9214      	str	r2, [sp, #80]	; 0x50
    1910:	9315      	str	r3, [sp, #84]	; 0x54
	spi_enable_write(datain);
    1912:	2238      	movs	r2, #56	; 0x38
    1914:	a916      	add	r1, sp, #88	; 0x58
    1916:	4668      	mov	r0, sp
    1918:	4d17      	ldr	r5, [pc, #92]	; (1978 <spi_write_page+0x74>)
    191a:	47a8      	blx	r5
    191c:	9812      	ldr	r0, [sp, #72]	; 0x48
    191e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1920:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1922:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1924:	4c15      	ldr	r4, [pc, #84]	; (197c <spi_write_page+0x78>)
    1926:	47a0      	blx	r4
	command_buffer[0] = FLASH_PAGE_PROGRAM;
    1928:	4c15      	ldr	r4, [pc, #84]	; (1980 <spi_write_page+0x7c>)
    192a:	2302      	movs	r3, #2
    192c:	7023      	strb	r3, [r4, #0]
	command_buffer[1] = (datain.address & 0x00ff0000) >> 16;
    192e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1930:	0c1a      	lsrs	r2, r3, #16
    1932:	7062      	strb	r2, [r4, #1]
	command_buffer[2] = (datain.address & 0x0000ff00) >> 8;
    1934:	0a1a      	lsrs	r2, r3, #8
    1936:	70a2      	strb	r2, [r4, #2]
	command_buffer[3] = (datain.address & 0x000000ff);
    1938:	70e3      	strb	r3, [r4, #3]
	memcpy(command_buffer + 4, datain.data,256);
    193a:	1d20      	adds	r0, r4, #4
    193c:	2280      	movs	r2, #128	; 0x80
    193e:	0052      	lsls	r2, r2, #1
    1940:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1942:	47a8      	blx	r5
	spi_select_slave(&datain.master, &datain.slave, true);
    1944:	2201      	movs	r2, #1
    1946:	a921      	add	r1, sp, #132	; 0x84
    1948:	a812      	add	r0, sp, #72	; 0x48
    194a:	4d0e      	ldr	r5, [pc, #56]	; (1984 <spi_write_page+0x80>)
    194c:	47a8      	blx	r5
	spi_write_buffer_wait(&datain.master,command_buffer,260);
    194e:	2282      	movs	r2, #130	; 0x82
    1950:	0052      	lsls	r2, r2, #1
    1952:	0021      	movs	r1, r4
    1954:	a812      	add	r0, sp, #72	; 0x48
    1956:	4b0c      	ldr	r3, [pc, #48]	; (1988 <spi_write_page+0x84>)
    1958:	4798      	blx	r3
	spi_select_slave(&datain.master, &datain.slave, false);
    195a:	2200      	movs	r2, #0
    195c:	a921      	add	r1, sp, #132	; 0x84
    195e:	a812      	add	r0, sp, #72	; 0x48
    1960:	47a8      	blx	r5
	delay_ms(3);
    1962:	2003      	movs	r0, #3
    1964:	4b09      	ldr	r3, [pc, #36]	; (198c <spi_write_page+0x88>)
    1966:	4798      	blx	r3
	return status_out;
    1968:	4b09      	ldr	r3, [pc, #36]	; (1990 <spi_write_page+0x8c>)
    196a:	7818      	ldrb	r0, [r3, #0]
};
    196c:	b00f      	add	sp, #60	; 0x3c
    196e:	bc30      	pop	{r4, r5}
    1970:	bc08      	pop	{r3}
    1972:	b004      	add	sp, #16
    1974:	4718      	bx	r3
    1976:	46c0      	nop			; (mov r8, r8)
    1978:	00004249 	.word	0x00004249
    197c:	000017c5 	.word	0x000017c5
    1980:	2000059c 	.word	0x2000059c
    1984:	0000216d 	.word	0x0000216d
    1988:	00002261 	.word	0x00002261
    198c:	00000181 	.word	0x00000181
    1990:	20000599 	.word	0x20000599

00001994 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1994:	b5f0      	push	{r4, r5, r6, r7, lr}
    1996:	46de      	mov	lr, fp
    1998:	4657      	mov	r7, sl
    199a:	464e      	mov	r6, r9
    199c:	4645      	mov	r5, r8
    199e:	b5e0      	push	{r5, r6, r7, lr}
    19a0:	b091      	sub	sp, #68	; 0x44
    19a2:	0005      	movs	r5, r0
    19a4:	000c      	movs	r4, r1
    19a6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    19a8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    19aa:	0008      	movs	r0, r1
    19ac:	4bbc      	ldr	r3, [pc, #752]	; (1ca0 <usart_init+0x30c>)
    19ae:	4798      	blx	r3
    19b0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    19b2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    19b4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    19b6:	07db      	lsls	r3, r3, #31
    19b8:	d506      	bpl.n	19c8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    19ba:	b011      	add	sp, #68	; 0x44
    19bc:	bc3c      	pop	{r2, r3, r4, r5}
    19be:	4690      	mov	r8, r2
    19c0:	4699      	mov	r9, r3
    19c2:	46a2      	mov	sl, r4
    19c4:	46ab      	mov	fp, r5
    19c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    19c8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    19ca:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    19cc:	079b      	lsls	r3, r3, #30
    19ce:	d4f4      	bmi.n	19ba <usart_init+0x26>
    19d0:	49b4      	ldr	r1, [pc, #720]	; (1ca4 <usart_init+0x310>)
    19d2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    19d4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    19d6:	2301      	movs	r3, #1
    19d8:	40bb      	lsls	r3, r7
    19da:	4303      	orrs	r3, r0
    19dc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    19de:	a90f      	add	r1, sp, #60	; 0x3c
    19e0:	272d      	movs	r7, #45	; 0x2d
    19e2:	5df3      	ldrb	r3, [r6, r7]
    19e4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    19e6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    19e8:	b2d3      	uxtb	r3, r2
    19ea:	9302      	str	r3, [sp, #8]
    19ec:	0018      	movs	r0, r3
    19ee:	4bae      	ldr	r3, [pc, #696]	; (1ca8 <usart_init+0x314>)
    19f0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    19f2:	9802      	ldr	r0, [sp, #8]
    19f4:	4bad      	ldr	r3, [pc, #692]	; (1cac <usart_init+0x318>)
    19f6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    19f8:	5df0      	ldrb	r0, [r6, r7]
    19fa:	2100      	movs	r1, #0
    19fc:	4bac      	ldr	r3, [pc, #688]	; (1cb0 <usart_init+0x31c>)
    19fe:	4798      	blx	r3
	module->character_size = config->character_size;
    1a00:	7af3      	ldrb	r3, [r6, #11]
    1a02:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1a04:	2324      	movs	r3, #36	; 0x24
    1a06:	5cf3      	ldrb	r3, [r6, r3]
    1a08:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1a0a:	2325      	movs	r3, #37	; 0x25
    1a0c:	5cf3      	ldrb	r3, [r6, r3]
    1a0e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1a10:	7ef3      	ldrb	r3, [r6, #27]
    1a12:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1a14:	7f33      	ldrb	r3, [r6, #28]
    1a16:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a18:	682b      	ldr	r3, [r5, #0]
    1a1a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a1c:	0018      	movs	r0, r3
    1a1e:	4ba0      	ldr	r3, [pc, #640]	; (1ca0 <usart_init+0x30c>)
    1a20:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a22:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1a24:	2200      	movs	r2, #0
    1a26:	230e      	movs	r3, #14
    1a28:	a906      	add	r1, sp, #24
    1a2a:	468c      	mov	ip, r1
    1a2c:	4463      	add	r3, ip
    1a2e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1a30:	8a32      	ldrh	r2, [r6, #16]
    1a32:	9202      	str	r2, [sp, #8]
    1a34:	2380      	movs	r3, #128	; 0x80
    1a36:	01db      	lsls	r3, r3, #7
    1a38:	429a      	cmp	r2, r3
    1a3a:	d100      	bne.n	1a3e <usart_init+0xaa>
    1a3c:	e09e      	b.n	1b7c <usart_init+0x1e8>
    1a3e:	d90f      	bls.n	1a60 <usart_init+0xcc>
    1a40:	23c0      	movs	r3, #192	; 0xc0
    1a42:	01db      	lsls	r3, r3, #7
    1a44:	9a02      	ldr	r2, [sp, #8]
    1a46:	429a      	cmp	r2, r3
    1a48:	d100      	bne.n	1a4c <usart_init+0xb8>
    1a4a:	e092      	b.n	1b72 <usart_init+0x1de>
    1a4c:	2380      	movs	r3, #128	; 0x80
    1a4e:	021b      	lsls	r3, r3, #8
    1a50:	429a      	cmp	r2, r3
    1a52:	d000      	beq.n	1a56 <usart_init+0xc2>
    1a54:	e11f      	b.n	1c96 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1a56:	2303      	movs	r3, #3
    1a58:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1a5a:	2300      	movs	r3, #0
    1a5c:	9307      	str	r3, [sp, #28]
    1a5e:	e008      	b.n	1a72 <usart_init+0xde>
	switch (config->sample_rate) {
    1a60:	2380      	movs	r3, #128	; 0x80
    1a62:	019b      	lsls	r3, r3, #6
    1a64:	429a      	cmp	r2, r3
    1a66:	d000      	beq.n	1a6a <usart_init+0xd6>
    1a68:	e115      	b.n	1c96 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1a6a:	2310      	movs	r3, #16
    1a6c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1a6e:	3b0f      	subs	r3, #15
    1a70:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1a72:	6833      	ldr	r3, [r6, #0]
    1a74:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1a76:	68f3      	ldr	r3, [r6, #12]
    1a78:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1a7a:	6973      	ldr	r3, [r6, #20]
    1a7c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1a7e:	7e33      	ldrb	r3, [r6, #24]
    1a80:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1a82:	2326      	movs	r3, #38	; 0x26
    1a84:	5cf3      	ldrb	r3, [r6, r3]
    1a86:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1a88:	6873      	ldr	r3, [r6, #4]
    1a8a:	4699      	mov	r9, r3
	switch (transfer_mode)
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d100      	bne.n	1a92 <usart_init+0xfe>
    1a90:	e0a0      	b.n	1bd4 <usart_init+0x240>
    1a92:	2380      	movs	r3, #128	; 0x80
    1a94:	055b      	lsls	r3, r3, #21
    1a96:	4599      	cmp	r9, r3
    1a98:	d100      	bne.n	1a9c <usart_init+0x108>
    1a9a:	e084      	b.n	1ba6 <usart_init+0x212>
	if(config->encoding_format_enable) {
    1a9c:	7e73      	ldrb	r3, [r6, #25]
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d002      	beq.n	1aa8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1aa2:	7eb3      	ldrb	r3, [r6, #26]
    1aa4:	4642      	mov	r2, r8
    1aa6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1aa8:	682a      	ldr	r2, [r5, #0]
    1aaa:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1aac:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d1fc      	bne.n	1aac <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1ab2:	330e      	adds	r3, #14
    1ab4:	aa06      	add	r2, sp, #24
    1ab6:	4694      	mov	ip, r2
    1ab8:	4463      	add	r3, ip
    1aba:	881b      	ldrh	r3, [r3, #0]
    1abc:	4642      	mov	r2, r8
    1abe:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1ac0:	9b05      	ldr	r3, [sp, #20]
    1ac2:	9a03      	ldr	r2, [sp, #12]
    1ac4:	4313      	orrs	r3, r2
    1ac6:	9a04      	ldr	r2, [sp, #16]
    1ac8:	4313      	orrs	r3, r2
    1aca:	464a      	mov	r2, r9
    1acc:	4313      	orrs	r3, r2
    1ace:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ad0:	465b      	mov	r3, fp
    1ad2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1ad4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ad6:	4653      	mov	r3, sl
    1ad8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1ada:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1adc:	2327      	movs	r3, #39	; 0x27
    1ade:	5cf3      	ldrb	r3, [r6, r3]
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d101      	bne.n	1ae8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1ae4:	3304      	adds	r3, #4
    1ae6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1ae8:	7e73      	ldrb	r3, [r6, #25]
    1aea:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1aec:	7f32      	ldrb	r2, [r6, #28]
    1aee:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1af0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1af2:	7f72      	ldrb	r2, [r6, #29]
    1af4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1af6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1af8:	2224      	movs	r2, #36	; 0x24
    1afa:	5cb2      	ldrb	r2, [r6, r2]
    1afc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1afe:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1b00:	2225      	movs	r2, #37	; 0x25
    1b02:	5cb2      	ldrb	r2, [r6, r2]
    1b04:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1b06:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1b08:	7ab1      	ldrb	r1, [r6, #10]
    1b0a:	7af2      	ldrb	r2, [r6, #11]
    1b0c:	4311      	orrs	r1, r2
    1b0e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1b10:	8933      	ldrh	r3, [r6, #8]
    1b12:	2bff      	cmp	r3, #255	; 0xff
    1b14:	d100      	bne.n	1b18 <usart_init+0x184>
    1b16:	e081      	b.n	1c1c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1b18:	2280      	movs	r2, #128	; 0x80
    1b1a:	0452      	lsls	r2, r2, #17
    1b1c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1b1e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1b20:	232c      	movs	r3, #44	; 0x2c
    1b22:	5cf3      	ldrb	r3, [r6, r3]
    1b24:	2b00      	cmp	r3, #0
    1b26:	d103      	bne.n	1b30 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1b28:	4b62      	ldr	r3, [pc, #392]	; (1cb4 <usart_init+0x320>)
    1b2a:	789b      	ldrb	r3, [r3, #2]
    1b2c:	079b      	lsls	r3, r3, #30
    1b2e:	d501      	bpl.n	1b34 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1b30:	2380      	movs	r3, #128	; 0x80
    1b32:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b34:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b36:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d1fc      	bne.n	1b36 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1b3c:	4643      	mov	r3, r8
    1b3e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b40:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b42:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b44:	2b00      	cmp	r3, #0
    1b46:	d1fc      	bne.n	1b42 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1b48:	4643      	mov	r3, r8
    1b4a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1b4c:	ab0e      	add	r3, sp, #56	; 0x38
    1b4e:	2280      	movs	r2, #128	; 0x80
    1b50:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b52:	2200      	movs	r2, #0
    1b54:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1b56:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1b58:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1b5a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1b5c:	930a      	str	r3, [sp, #40]	; 0x28
    1b5e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1b60:	930b      	str	r3, [sp, #44]	; 0x2c
    1b62:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1b64:	930c      	str	r3, [sp, #48]	; 0x30
    1b66:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1b68:	9302      	str	r3, [sp, #8]
    1b6a:	930d      	str	r3, [sp, #52]	; 0x34
    1b6c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1b6e:	ae0a      	add	r6, sp, #40	; 0x28
    1b70:	e063      	b.n	1c3a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1b72:	2308      	movs	r3, #8
    1b74:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1b76:	3b07      	subs	r3, #7
    1b78:	9307      	str	r3, [sp, #28]
    1b7a:	e77a      	b.n	1a72 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1b7c:	6833      	ldr	r3, [r6, #0]
    1b7e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1b80:	68f3      	ldr	r3, [r6, #12]
    1b82:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1b84:	6973      	ldr	r3, [r6, #20]
    1b86:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b88:	7e33      	ldrb	r3, [r6, #24]
    1b8a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1b8c:	2326      	movs	r3, #38	; 0x26
    1b8e:	5cf3      	ldrb	r3, [r6, r3]
    1b90:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1b92:	6873      	ldr	r3, [r6, #4]
    1b94:	4699      	mov	r9, r3
	switch (transfer_mode)
    1b96:	2b00      	cmp	r3, #0
    1b98:	d018      	beq.n	1bcc <usart_init+0x238>
    1b9a:	2380      	movs	r3, #128	; 0x80
    1b9c:	055b      	lsls	r3, r3, #21
    1b9e:	4599      	cmp	r9, r3
    1ba0:	d001      	beq.n	1ba6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1ba2:	2000      	movs	r0, #0
    1ba4:	e025      	b.n	1bf2 <usart_init+0x25e>
			if (!config->use_external_clock) {
    1ba6:	2327      	movs	r3, #39	; 0x27
    1ba8:	5cf3      	ldrb	r3, [r6, r3]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d000      	beq.n	1bb0 <usart_init+0x21c>
    1bae:	e775      	b.n	1a9c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1bb0:	6a33      	ldr	r3, [r6, #32]
    1bb2:	001f      	movs	r7, r3
    1bb4:	b2c0      	uxtb	r0, r0
    1bb6:	4b40      	ldr	r3, [pc, #256]	; (1cb8 <usart_init+0x324>)
    1bb8:	4798      	blx	r3
    1bba:	0001      	movs	r1, r0
    1bbc:	220e      	movs	r2, #14
    1bbe:	ab06      	add	r3, sp, #24
    1bc0:	469c      	mov	ip, r3
    1bc2:	4462      	add	r2, ip
    1bc4:	0038      	movs	r0, r7
    1bc6:	4b3d      	ldr	r3, [pc, #244]	; (1cbc <usart_init+0x328>)
    1bc8:	4798      	blx	r3
    1bca:	e012      	b.n	1bf2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1bcc:	2308      	movs	r3, #8
    1bce:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1bd0:	2300      	movs	r3, #0
    1bd2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1bd4:	2327      	movs	r3, #39	; 0x27
    1bd6:	5cf3      	ldrb	r3, [r6, r3]
    1bd8:	2b00      	cmp	r3, #0
    1bda:	d00e      	beq.n	1bfa <usart_init+0x266>
				status_code =
    1bdc:	9b06      	ldr	r3, [sp, #24]
    1bde:	9300      	str	r3, [sp, #0]
    1be0:	9b07      	ldr	r3, [sp, #28]
    1be2:	220e      	movs	r2, #14
    1be4:	a906      	add	r1, sp, #24
    1be6:	468c      	mov	ip, r1
    1be8:	4462      	add	r2, ip
    1bea:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1bec:	6a30      	ldr	r0, [r6, #32]
    1bee:	4f34      	ldr	r7, [pc, #208]	; (1cc0 <usart_init+0x32c>)
    1bf0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1bf2:	2800      	cmp	r0, #0
    1bf4:	d000      	beq.n	1bf8 <usart_init+0x264>
    1bf6:	e6e0      	b.n	19ba <usart_init+0x26>
    1bf8:	e750      	b.n	1a9c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1bfa:	6a33      	ldr	r3, [r6, #32]
    1bfc:	001f      	movs	r7, r3
    1bfe:	b2c0      	uxtb	r0, r0
    1c00:	4b2d      	ldr	r3, [pc, #180]	; (1cb8 <usart_init+0x324>)
    1c02:	4798      	blx	r3
    1c04:	0001      	movs	r1, r0
				status_code =
    1c06:	9b06      	ldr	r3, [sp, #24]
    1c08:	9300      	str	r3, [sp, #0]
    1c0a:	9b07      	ldr	r3, [sp, #28]
    1c0c:	220e      	movs	r2, #14
    1c0e:	a806      	add	r0, sp, #24
    1c10:	4684      	mov	ip, r0
    1c12:	4462      	add	r2, ip
    1c14:	0038      	movs	r0, r7
    1c16:	4f2a      	ldr	r7, [pc, #168]	; (1cc0 <usart_init+0x32c>)
    1c18:	47b8      	blx	r7
    1c1a:	e7ea      	b.n	1bf2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1c1c:	7ef3      	ldrb	r3, [r6, #27]
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d100      	bne.n	1c24 <usart_init+0x290>
    1c22:	e77d      	b.n	1b20 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1c24:	2380      	movs	r3, #128	; 0x80
    1c26:	04db      	lsls	r3, r3, #19
    1c28:	431f      	orrs	r7, r3
    1c2a:	e779      	b.n	1b20 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1c2c:	0020      	movs	r0, r4
    1c2e:	4b25      	ldr	r3, [pc, #148]	; (1cc4 <usart_init+0x330>)
    1c30:	4798      	blx	r3
    1c32:	e007      	b.n	1c44 <usart_init+0x2b0>
    1c34:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1c36:	2f04      	cmp	r7, #4
    1c38:	d00d      	beq.n	1c56 <usart_init+0x2c2>
    1c3a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c3c:	00bb      	lsls	r3, r7, #2
    1c3e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1c40:	2800      	cmp	r0, #0
    1c42:	d0f3      	beq.n	1c2c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1c44:	1c43      	adds	r3, r0, #1
    1c46:	d0f5      	beq.n	1c34 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1c48:	a90e      	add	r1, sp, #56	; 0x38
    1c4a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1c4c:	0c00      	lsrs	r0, r0, #16
    1c4e:	b2c0      	uxtb	r0, r0
    1c50:	4b1d      	ldr	r3, [pc, #116]	; (1cc8 <usart_init+0x334>)
    1c52:	4798      	blx	r3
    1c54:	e7ee      	b.n	1c34 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1c56:	2300      	movs	r3, #0
    1c58:	60eb      	str	r3, [r5, #12]
    1c5a:	612b      	str	r3, [r5, #16]
    1c5c:	616b      	str	r3, [r5, #20]
    1c5e:	61ab      	str	r3, [r5, #24]
    1c60:	61eb      	str	r3, [r5, #28]
    1c62:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1c64:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1c66:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1c68:	2200      	movs	r2, #0
    1c6a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1c6c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1c6e:	3330      	adds	r3, #48	; 0x30
    1c70:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1c72:	3301      	adds	r3, #1
    1c74:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1c76:	3301      	adds	r3, #1
    1c78:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1c7a:	3301      	adds	r3, #1
    1c7c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1c7e:	6828      	ldr	r0, [r5, #0]
    1c80:	4b07      	ldr	r3, [pc, #28]	; (1ca0 <usart_init+0x30c>)
    1c82:	4798      	blx	r3
    1c84:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1c86:	4911      	ldr	r1, [pc, #68]	; (1ccc <usart_init+0x338>)
    1c88:	4b11      	ldr	r3, [pc, #68]	; (1cd0 <usart_init+0x33c>)
    1c8a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1c8c:	00a4      	lsls	r4, r4, #2
    1c8e:	4b11      	ldr	r3, [pc, #68]	; (1cd4 <usart_init+0x340>)
    1c90:	50e5      	str	r5, [r4, r3]
	return status_code;
    1c92:	2000      	movs	r0, #0
    1c94:	e691      	b.n	19ba <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1c96:	2310      	movs	r3, #16
    1c98:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1c9a:	2300      	movs	r3, #0
    1c9c:	9307      	str	r3, [sp, #28]
    1c9e:	e6e8      	b.n	1a72 <usart_init+0xde>
    1ca0:	00000e81 	.word	0x00000e81
    1ca4:	40000400 	.word	0x40000400
    1ca8:	00003181 	.word	0x00003181
    1cac:	000030f5 	.word	0x000030f5
    1cb0:	00000d39 	.word	0x00000d39
    1cb4:	41002000 	.word	0x41002000
    1cb8:	0000319d 	.word	0x0000319d
    1cbc:	00000c7b 	.word	0x00000c7b
    1cc0:	00000ca5 	.word	0x00000ca5
    1cc4:	00000d85 	.word	0x00000d85
    1cc8:	00003279 	.word	0x00003279
    1ccc:	00001dc5 	.word	0x00001dc5
    1cd0:	00002939 	.word	0x00002939
    1cd4:	200006a4 	.word	0x200006a4

00001cd8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1cd8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1cda:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1cdc:	2a00      	cmp	r2, #0
    1cde:	d101      	bne.n	1ce4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1ce0:	0018      	movs	r0, r3
    1ce2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1ce4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1ce6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1ce8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1cea:	2a00      	cmp	r2, #0
    1cec:	d1f8      	bne.n	1ce0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1cee:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1cf0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1cf2:	2a00      	cmp	r2, #0
    1cf4:	d1fc      	bne.n	1cf0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1cf6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1cf8:	2102      	movs	r1, #2
    1cfa:	7e1a      	ldrb	r2, [r3, #24]
    1cfc:	420a      	tst	r2, r1
    1cfe:	d0fc      	beq.n	1cfa <usart_write_wait+0x22>
	return STATUS_OK;
    1d00:	2300      	movs	r3, #0
    1d02:	e7ed      	b.n	1ce0 <usart_write_wait+0x8>

00001d04 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d06:	46ce      	mov	lr, r9
    1d08:	4647      	mov	r7, r8
    1d0a:	b580      	push	{r7, lr}
    1d0c:	b083      	sub	sp, #12
    1d0e:	0005      	movs	r5, r0
    1d10:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1d12:	2017      	movs	r0, #23
	if (length == 0) {
    1d14:	2a00      	cmp	r2, #0
    1d16:	d104      	bne.n	1d22 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1d18:	b003      	add	sp, #12
    1d1a:	bc0c      	pop	{r2, r3}
    1d1c:	4690      	mov	r8, r2
    1d1e:	4699      	mov	r9, r3
    1d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    1d22:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    1d24:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    1d26:	2b00      	cmp	r3, #0
    1d28:	d0f6      	beq.n	1d18 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d2a:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1d2c:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d1fc      	bne.n	1d2c <usart_write_buffer_wait+0x28>
	while (length--) {
    1d32:	3a01      	subs	r2, #1
    1d34:	b293      	uxth	r3, r2
    1d36:	4699      	mov	r9, r3
    1d38:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1d3a:	2701      	movs	r7, #1
	while (length--) {
    1d3c:	4b1f      	ldr	r3, [pc, #124]	; (1dbc <usart_write_buffer_wait+0xb8>)
    1d3e:	4698      	mov	r8, r3
    1d40:	e011      	b.n	1d66 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    1d42:	1c73      	adds	r3, r6, #1
    1d44:	b29b      	uxth	r3, r3
    1d46:	9a01      	ldr	r2, [sp, #4]
    1d48:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1d4a:	796a      	ldrb	r2, [r5, #5]
    1d4c:	2a01      	cmp	r2, #1
    1d4e:	d017      	beq.n	1d80 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    1d50:	b289      	uxth	r1, r1
    1d52:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    1d54:	0028      	movs	r0, r5
    1d56:	4b1a      	ldr	r3, [pc, #104]	; (1dc0 <usart_write_buffer_wait+0xbc>)
    1d58:	4798      	blx	r3
	while (length--) {
    1d5a:	464b      	mov	r3, r9
    1d5c:	3b01      	subs	r3, #1
    1d5e:	b29b      	uxth	r3, r3
    1d60:	4699      	mov	r9, r3
    1d62:	4543      	cmp	r3, r8
    1d64:	d013      	beq.n	1d8e <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1d66:	7e23      	ldrb	r3, [r4, #24]
    1d68:	423b      	tst	r3, r7
    1d6a:	d1ea      	bne.n	1d42 <usart_write_buffer_wait+0x3e>
    1d6c:	4b13      	ldr	r3, [pc, #76]	; (1dbc <usart_write_buffer_wait+0xb8>)
    1d6e:	7e22      	ldrb	r2, [r4, #24]
    1d70:	423a      	tst	r2, r7
    1d72:	d1e6      	bne.n	1d42 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    1d74:	2b01      	cmp	r3, #1
    1d76:	d019      	beq.n	1dac <usart_write_buffer_wait+0xa8>
    1d78:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	d1f7      	bne.n	1d6e <usart_write_buffer_wait+0x6a>
    1d7e:	e7e0      	b.n	1d42 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1d80:	3602      	adds	r6, #2
    1d82:	b2b6      	uxth	r6, r6
    1d84:	9a01      	ldr	r2, [sp, #4]
    1d86:	5cd3      	ldrb	r3, [r2, r3]
    1d88:	021b      	lsls	r3, r3, #8
    1d8a:	4319      	orrs	r1, r3
    1d8c:	e7e2      	b.n	1d54 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1d8e:	7e23      	ldrb	r3, [r4, #24]
    1d90:	079b      	lsls	r3, r3, #30
    1d92:	d40d      	bmi.n	1db0 <usart_write_buffer_wait+0xac>
    1d94:	4b09      	ldr	r3, [pc, #36]	; (1dbc <usart_write_buffer_wait+0xb8>)
    1d96:	2102      	movs	r1, #2
    1d98:	7e22      	ldrb	r2, [r4, #24]
    1d9a:	420a      	tst	r2, r1
    1d9c:	d10a      	bne.n	1db4 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    1d9e:	2b01      	cmp	r3, #1
    1da0:	d00a      	beq.n	1db8 <usart_write_buffer_wait+0xb4>
    1da2:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1da4:	2b00      	cmp	r3, #0
    1da6:	d1f7      	bne.n	1d98 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    1da8:	2000      	movs	r0, #0
    1daa:	e7b5      	b.n	1d18 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    1dac:	2012      	movs	r0, #18
    1dae:	e7b3      	b.n	1d18 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    1db0:	2000      	movs	r0, #0
    1db2:	e7b1      	b.n	1d18 <usart_write_buffer_wait+0x14>
    1db4:	2000      	movs	r0, #0
    1db6:	e7af      	b.n	1d18 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    1db8:	2012      	movs	r0, #18
    1dba:	e7ad      	b.n	1d18 <usart_write_buffer_wait+0x14>
    1dbc:	0000ffff 	.word	0x0000ffff
    1dc0:	00001cd9 	.word	0x00001cd9

00001dc4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1dc6:	0080      	lsls	r0, r0, #2
    1dc8:	4b62      	ldr	r3, [pc, #392]	; (1f54 <_usart_interrupt_handler+0x190>)
    1dca:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1dcc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1dce:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d1fc      	bne.n	1dce <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1dd4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1dd6:	7da6      	ldrb	r6, [r4, #22]
    1dd8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1dda:	2330      	movs	r3, #48	; 0x30
    1ddc:	5ceb      	ldrb	r3, [r5, r3]
    1dde:	2231      	movs	r2, #49	; 0x31
    1de0:	5caf      	ldrb	r7, [r5, r2]
    1de2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1de4:	07f3      	lsls	r3, r6, #31
    1de6:	d522      	bpl.n	1e2e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1de8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1dea:	b29b      	uxth	r3, r3
    1dec:	2b00      	cmp	r3, #0
    1dee:	d01c      	beq.n	1e2a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1df0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1df2:	7813      	ldrb	r3, [r2, #0]
    1df4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1df6:	1c51      	adds	r1, r2, #1
    1df8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1dfa:	7969      	ldrb	r1, [r5, #5]
    1dfc:	2901      	cmp	r1, #1
    1dfe:	d00e      	beq.n	1e1e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1e00:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1e02:	05db      	lsls	r3, r3, #23
    1e04:	0ddb      	lsrs	r3, r3, #23
    1e06:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1e08:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1e0a:	3b01      	subs	r3, #1
    1e0c:	b29b      	uxth	r3, r3
    1e0e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1e10:	2b00      	cmp	r3, #0
    1e12:	d10c      	bne.n	1e2e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e14:	3301      	adds	r3, #1
    1e16:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1e18:	3301      	adds	r3, #1
    1e1a:	75a3      	strb	r3, [r4, #22]
    1e1c:	e007      	b.n	1e2e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1e1e:	7851      	ldrb	r1, [r2, #1]
    1e20:	0209      	lsls	r1, r1, #8
    1e22:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1e24:	3202      	adds	r2, #2
    1e26:	62aa      	str	r2, [r5, #40]	; 0x28
    1e28:	e7eb      	b.n	1e02 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e2a:	2301      	movs	r3, #1
    1e2c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1e2e:	07b3      	lsls	r3, r6, #30
    1e30:	d506      	bpl.n	1e40 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1e32:	2302      	movs	r3, #2
    1e34:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1e36:	2200      	movs	r2, #0
    1e38:	3331      	adds	r3, #49	; 0x31
    1e3a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1e3c:	07fb      	lsls	r3, r7, #31
    1e3e:	d41a      	bmi.n	1e76 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1e40:	0773      	lsls	r3, r6, #29
    1e42:	d565      	bpl.n	1f10 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1e44:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1e46:	b29b      	uxth	r3, r3
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d05f      	beq.n	1f0c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1e4c:	8b63      	ldrh	r3, [r4, #26]
    1e4e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1e50:	071a      	lsls	r2, r3, #28
    1e52:	d414      	bmi.n	1e7e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1e54:	223f      	movs	r2, #63	; 0x3f
    1e56:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d034      	beq.n	1ec6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1e5c:	079a      	lsls	r2, r3, #30
    1e5e:	d511      	bpl.n	1e84 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1e60:	221a      	movs	r2, #26
    1e62:	2332      	movs	r3, #50	; 0x32
    1e64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1e66:	3b30      	subs	r3, #48	; 0x30
    1e68:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1e6a:	077b      	lsls	r3, r7, #29
    1e6c:	d550      	bpl.n	1f10 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1e6e:	0028      	movs	r0, r5
    1e70:	696b      	ldr	r3, [r5, #20]
    1e72:	4798      	blx	r3
    1e74:	e04c      	b.n	1f10 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1e76:	0028      	movs	r0, r5
    1e78:	68eb      	ldr	r3, [r5, #12]
    1e7a:	4798      	blx	r3
    1e7c:	e7e0      	b.n	1e40 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1e7e:	2237      	movs	r2, #55	; 0x37
    1e80:	4013      	ands	r3, r2
    1e82:	e7e9      	b.n	1e58 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1e84:	075a      	lsls	r2, r3, #29
    1e86:	d505      	bpl.n	1e94 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1e88:	221e      	movs	r2, #30
    1e8a:	2332      	movs	r3, #50	; 0x32
    1e8c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1e8e:	3b2e      	subs	r3, #46	; 0x2e
    1e90:	8363      	strh	r3, [r4, #26]
    1e92:	e7ea      	b.n	1e6a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1e94:	07da      	lsls	r2, r3, #31
    1e96:	d505      	bpl.n	1ea4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1e98:	2213      	movs	r2, #19
    1e9a:	2332      	movs	r3, #50	; 0x32
    1e9c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1e9e:	3b31      	subs	r3, #49	; 0x31
    1ea0:	8363      	strh	r3, [r4, #26]
    1ea2:	e7e2      	b.n	1e6a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1ea4:	06da      	lsls	r2, r3, #27
    1ea6:	d505      	bpl.n	1eb4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1ea8:	2242      	movs	r2, #66	; 0x42
    1eaa:	2332      	movs	r3, #50	; 0x32
    1eac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1eae:	3b22      	subs	r3, #34	; 0x22
    1eb0:	8363      	strh	r3, [r4, #26]
    1eb2:	e7da      	b.n	1e6a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1eb4:	2220      	movs	r2, #32
    1eb6:	421a      	tst	r2, r3
    1eb8:	d0d7      	beq.n	1e6a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1eba:	3221      	adds	r2, #33	; 0x21
    1ebc:	2332      	movs	r3, #50	; 0x32
    1ebe:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1ec0:	3b12      	subs	r3, #18
    1ec2:	8363      	strh	r3, [r4, #26]
    1ec4:	e7d1      	b.n	1e6a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1ec6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1ec8:	05db      	lsls	r3, r3, #23
    1eca:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1ecc:	b2da      	uxtb	r2, r3
    1ece:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1ed0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1ed2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1ed4:	1c51      	adds	r1, r2, #1
    1ed6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1ed8:	7969      	ldrb	r1, [r5, #5]
    1eda:	2901      	cmp	r1, #1
    1edc:	d010      	beq.n	1f00 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1ede:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1ee0:	3b01      	subs	r3, #1
    1ee2:	b29b      	uxth	r3, r3
    1ee4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d112      	bne.n	1f10 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1eea:	3304      	adds	r3, #4
    1eec:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1eee:	2200      	movs	r2, #0
    1ef0:	332e      	adds	r3, #46	; 0x2e
    1ef2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1ef4:	07bb      	lsls	r3, r7, #30
    1ef6:	d50b      	bpl.n	1f10 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1ef8:	0028      	movs	r0, r5
    1efa:	692b      	ldr	r3, [r5, #16]
    1efc:	4798      	blx	r3
    1efe:	e007      	b.n	1f10 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1f00:	0a1b      	lsrs	r3, r3, #8
    1f02:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1f04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1f06:	3301      	adds	r3, #1
    1f08:	626b      	str	r3, [r5, #36]	; 0x24
    1f0a:	e7e8      	b.n	1ede <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1f0c:	2304      	movs	r3, #4
    1f0e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1f10:	06f3      	lsls	r3, r6, #27
    1f12:	d504      	bpl.n	1f1e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1f14:	2310      	movs	r3, #16
    1f16:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1f18:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1f1a:	06fb      	lsls	r3, r7, #27
    1f1c:	d40e      	bmi.n	1f3c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1f1e:	06b3      	lsls	r3, r6, #26
    1f20:	d504      	bpl.n	1f2c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1f22:	2320      	movs	r3, #32
    1f24:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1f26:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1f28:	073b      	lsls	r3, r7, #28
    1f2a:	d40b      	bmi.n	1f44 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1f2c:	0733      	lsls	r3, r6, #28
    1f2e:	d504      	bpl.n	1f3a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1f30:	2308      	movs	r3, #8
    1f32:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1f34:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1f36:	06bb      	lsls	r3, r7, #26
    1f38:	d408      	bmi.n	1f4c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1f3c:	0028      	movs	r0, r5
    1f3e:	69eb      	ldr	r3, [r5, #28]
    1f40:	4798      	blx	r3
    1f42:	e7ec      	b.n	1f1e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1f44:	0028      	movs	r0, r5
    1f46:	69ab      	ldr	r3, [r5, #24]
    1f48:	4798      	blx	r3
    1f4a:	e7ef      	b.n	1f2c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1f4c:	6a2b      	ldr	r3, [r5, #32]
    1f4e:	0028      	movs	r0, r5
    1f50:	4798      	blx	r3
}
    1f52:	e7f2      	b.n	1f3a <_usart_interrupt_handler+0x176>
    1f54:	200006a4 	.word	0x200006a4

00001f58 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5a:	b08b      	sub	sp, #44	; 0x2c
    1f5c:	0005      	movs	r5, r0
    1f5e:	000c      	movs	r4, r1
    1f60:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1f62:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1f64:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1f66:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1f68:	079b      	lsls	r3, r3, #30
    1f6a:	d501      	bpl.n	1f70 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1f6c:	b00b      	add	sp, #44	; 0x2c
    1f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1f70:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1f72:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1f74:	07db      	lsls	r3, r3, #31
    1f76:	d4f9      	bmi.n	1f6c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f78:	0008      	movs	r0, r1
    1f7a:	4b6f      	ldr	r3, [pc, #444]	; (2138 <spi_init+0x1e0>)
    1f7c:	4798      	blx	r3
    1f7e:	4a6f      	ldr	r2, [pc, #444]	; (213c <spi_init+0x1e4>)
    1f80:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1f82:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1f84:	2301      	movs	r3, #1
    1f86:	40bb      	lsls	r3, r7
    1f88:	430b      	orrs	r3, r1
    1f8a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1f8c:	a909      	add	r1, sp, #36	; 0x24
    1f8e:	2724      	movs	r7, #36	; 0x24
    1f90:	5df3      	ldrb	r3, [r6, r7]
    1f92:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1f94:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1f96:	b2c3      	uxtb	r3, r0
    1f98:	9301      	str	r3, [sp, #4]
    1f9a:	0018      	movs	r0, r3
    1f9c:	4b68      	ldr	r3, [pc, #416]	; (2140 <spi_init+0x1e8>)
    1f9e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1fa0:	9801      	ldr	r0, [sp, #4]
    1fa2:	4b68      	ldr	r3, [pc, #416]	; (2144 <spi_init+0x1ec>)
    1fa4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1fa6:	5df0      	ldrb	r0, [r6, r7]
    1fa8:	2100      	movs	r1, #0
    1faa:	4b67      	ldr	r3, [pc, #412]	; (2148 <spi_init+0x1f0>)
    1fac:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1fae:	7833      	ldrb	r3, [r6, #0]
    1fb0:	2b01      	cmp	r3, #1
    1fb2:	d03f      	beq.n	2034 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    1fb4:	7833      	ldrb	r3, [r6, #0]
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	d103      	bne.n	1fc2 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1fba:	6823      	ldr	r3, [r4, #0]
    1fbc:	2208      	movs	r2, #8
    1fbe:	4313      	orrs	r3, r2
    1fc0:	6023      	str	r3, [r4, #0]
    1fc2:	002b      	movs	r3, r5
    1fc4:	330c      	adds	r3, #12
    1fc6:	0029      	movs	r1, r5
    1fc8:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1fca:	2200      	movs	r2, #0
    1fcc:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1fce:	428b      	cmp	r3, r1
    1fd0:	d1fc      	bne.n	1fcc <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    1fd2:	2300      	movs	r3, #0
    1fd4:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1fd6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1fd8:	2400      	movs	r4, #0
    1fda:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1fdc:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1fde:	3336      	adds	r3, #54	; 0x36
    1fe0:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1fe2:	3301      	adds	r3, #1
    1fe4:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    1fe6:	3301      	adds	r3, #1
    1fe8:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    1fea:	3b35      	subs	r3, #53	; 0x35
    1fec:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1fee:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1ff0:	6828      	ldr	r0, [r5, #0]
    1ff2:	4b51      	ldr	r3, [pc, #324]	; (2138 <spi_init+0x1e0>)
    1ff4:	4798      	blx	r3
    1ff6:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1ff8:	4954      	ldr	r1, [pc, #336]	; (214c <spi_init+0x1f4>)
    1ffa:	4b55      	ldr	r3, [pc, #340]	; (2150 <spi_init+0x1f8>)
    1ffc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1ffe:	00bf      	lsls	r7, r7, #2
    2000:	4b54      	ldr	r3, [pc, #336]	; (2154 <spi_init+0x1fc>)
    2002:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2004:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2006:	ab04      	add	r3, sp, #16
    2008:	2280      	movs	r2, #128	; 0x80
    200a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    200c:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    200e:	3a7f      	subs	r2, #127	; 0x7f
    2010:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2012:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    2014:	7833      	ldrb	r3, [r6, #0]
    2016:	2b00      	cmp	r3, #0
    2018:	d102      	bne.n	2020 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    201a:	2200      	movs	r2, #0
    201c:	ab04      	add	r3, sp, #16
    201e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2020:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2022:	9305      	str	r3, [sp, #20]
    2024:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2026:	9306      	str	r3, [sp, #24]
    2028:	6b33      	ldr	r3, [r6, #48]	; 0x30
    202a:	9307      	str	r3, [sp, #28]
    202c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    202e:	9308      	str	r3, [sp, #32]
    2030:	2400      	movs	r4, #0
    2032:	e00b      	b.n	204c <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    2034:	6823      	ldr	r3, [r4, #0]
    2036:	220c      	movs	r2, #12
    2038:	4313      	orrs	r3, r2
    203a:	6023      	str	r3, [r4, #0]
    203c:	e7ba      	b.n	1fb4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    203e:	0038      	movs	r0, r7
    2040:	4b45      	ldr	r3, [pc, #276]	; (2158 <spi_init+0x200>)
    2042:	4798      	blx	r3
    2044:	e00a      	b.n	205c <spi_init+0x104>
    2046:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2048:	2c04      	cmp	r4, #4
    204a:	d010      	beq.n	206e <spi_init+0x116>
    204c:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    204e:	00a3      	lsls	r3, r4, #2
    2050:	aa02      	add	r2, sp, #8
    2052:	200c      	movs	r0, #12
    2054:	1812      	adds	r2, r2, r0
    2056:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    2058:	2800      	cmp	r0, #0
    205a:	d0f0      	beq.n	203e <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    205c:	1c43      	adds	r3, r0, #1
    205e:	d0f2      	beq.n	2046 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2060:	a904      	add	r1, sp, #16
    2062:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2064:	0c00      	lsrs	r0, r0, #16
    2066:	b2c0      	uxtb	r0, r0
    2068:	4b3c      	ldr	r3, [pc, #240]	; (215c <spi_init+0x204>)
    206a:	4798      	blx	r3
    206c:	e7eb      	b.n	2046 <spi_init+0xee>
	module->mode             = config->mode;
    206e:	7833      	ldrb	r3, [r6, #0]
    2070:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    2072:	7c33      	ldrb	r3, [r6, #16]
    2074:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    2076:	7cb3      	ldrb	r3, [r6, #18]
    2078:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    207a:	7d33      	ldrb	r3, [r6, #20]
    207c:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    207e:	2200      	movs	r2, #0
    2080:	ab02      	add	r3, sp, #8
    2082:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    2084:	7833      	ldrb	r3, [r6, #0]
    2086:	2b01      	cmp	r3, #1
    2088:	d012      	beq.n	20b0 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    208a:	7833      	ldrb	r3, [r6, #0]
    208c:	2b00      	cmp	r3, #0
    208e:	d126      	bne.n	20de <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    2090:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    2092:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    2094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    2096:	7ff1      	ldrb	r1, [r6, #31]
    2098:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    209a:	7fb4      	ldrb	r4, [r6, #30]
    209c:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    209e:	4319      	orrs	r1, r3
    20a0:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    20a2:	2320      	movs	r3, #32
    20a4:	5cf3      	ldrb	r3, [r6, r3]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d01b      	beq.n	20e2 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    20aa:	2340      	movs	r3, #64	; 0x40
    20ac:	431a      	orrs	r2, r3
    20ae:	e018      	b.n	20e2 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    20b0:	6828      	ldr	r0, [r5, #0]
    20b2:	4b21      	ldr	r3, [pc, #132]	; (2138 <spi_init+0x1e0>)
    20b4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    20b6:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    20b8:	b2c0      	uxtb	r0, r0
    20ba:	4b29      	ldr	r3, [pc, #164]	; (2160 <spi_init+0x208>)
    20bc:	4798      	blx	r3
    20be:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    20c0:	ab02      	add	r3, sp, #8
    20c2:	1d9a      	adds	r2, r3, #6
    20c4:	69b0      	ldr	r0, [r6, #24]
    20c6:	4b27      	ldr	r3, [pc, #156]	; (2164 <spi_init+0x20c>)
    20c8:	4798      	blx	r3
    20ca:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    20cc:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    20ce:	2b00      	cmp	r3, #0
    20d0:	d000      	beq.n	20d4 <spi_init+0x17c>
    20d2:	e74b      	b.n	1f6c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    20d4:	ab02      	add	r3, sp, #8
    20d6:	3306      	adds	r3, #6
    20d8:	781b      	ldrb	r3, [r3, #0]
    20da:	733b      	strb	r3, [r7, #12]
    20dc:	e7d5      	b.n	208a <spi_init+0x132>
	uint32_t ctrlb = 0;
    20de:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    20e0:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    20e2:	6873      	ldr	r3, [r6, #4]
    20e4:	68b1      	ldr	r1, [r6, #8]
    20e6:	430b      	orrs	r3, r1
    20e8:	68f1      	ldr	r1, [r6, #12]
    20ea:	430b      	orrs	r3, r1
    20ec:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    20ee:	7c31      	ldrb	r1, [r6, #16]
    20f0:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    20f2:	7c71      	ldrb	r1, [r6, #17]
    20f4:	2900      	cmp	r1, #0
    20f6:	d103      	bne.n	2100 <spi_init+0x1a8>
    20f8:	491b      	ldr	r1, [pc, #108]	; (2168 <spi_init+0x210>)
    20fa:	7889      	ldrb	r1, [r1, #2]
    20fc:	0789      	lsls	r1, r1, #30
    20fe:	d501      	bpl.n	2104 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2100:	2180      	movs	r1, #128	; 0x80
    2102:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    2104:	7cb1      	ldrb	r1, [r6, #18]
    2106:	2900      	cmp	r1, #0
    2108:	d002      	beq.n	2110 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    210a:	2180      	movs	r1, #128	; 0x80
    210c:	0289      	lsls	r1, r1, #10
    210e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    2110:	7cf1      	ldrb	r1, [r6, #19]
    2112:	2900      	cmp	r1, #0
    2114:	d002      	beq.n	211c <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2116:	2180      	movs	r1, #128	; 0x80
    2118:	0089      	lsls	r1, r1, #2
    211a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    211c:	7d31      	ldrb	r1, [r6, #20]
    211e:	2900      	cmp	r1, #0
    2120:	d002      	beq.n	2128 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2122:	2180      	movs	r1, #128	; 0x80
    2124:	0189      	lsls	r1, r1, #6
    2126:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    2128:	6839      	ldr	r1, [r7, #0]
    212a:	430b      	orrs	r3, r1
    212c:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    212e:	687b      	ldr	r3, [r7, #4]
    2130:	431a      	orrs	r2, r3
    2132:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    2134:	2000      	movs	r0, #0
    2136:	e719      	b.n	1f6c <spi_init+0x14>
    2138:	00000e81 	.word	0x00000e81
    213c:	40000400 	.word	0x40000400
    2140:	00003181 	.word	0x00003181
    2144:	000030f5 	.word	0x000030f5
    2148:	00000d39 	.word	0x00000d39
    214c:	00002711 	.word	0x00002711
    2150:	00002939 	.word	0x00002939
    2154:	200006a4 	.word	0x200006a4
    2158:	00000d85 	.word	0x00000d85
    215c:	00003279 	.word	0x00003279
    2160:	0000319d 	.word	0x0000319d
    2164:	00000c7b 	.word	0x00000c7b
    2168:	41002000 	.word	0x41002000

0000216c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    216c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    216e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2170:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    2172:	2c01      	cmp	r4, #1
    2174:	d001      	beq.n	217a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    2176:	0018      	movs	r0, r3
    2178:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    217a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    217c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    217e:	2c00      	cmp	r4, #0
    2180:	d1f9      	bne.n	2176 <spi_select_slave+0xa>
		if (select) {
    2182:	2a00      	cmp	r2, #0
    2184:	d058      	beq.n	2238 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    2186:	784b      	ldrb	r3, [r1, #1]
    2188:	2b00      	cmp	r3, #0
    218a:	d044      	beq.n	2216 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    218c:	6803      	ldr	r3, [r0, #0]
    218e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2190:	07db      	lsls	r3, r3, #31
    2192:	d410      	bmi.n	21b6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    2194:	780a      	ldrb	r2, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2196:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2198:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    219a:	2900      	cmp	r1, #0
    219c:	d104      	bne.n	21a8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    219e:	0953      	lsrs	r3, r2, #5
    21a0:	01db      	lsls	r3, r3, #7
    21a2:	492e      	ldr	r1, [pc, #184]	; (225c <spi_select_slave+0xf0>)
    21a4:	468c      	mov	ip, r1
    21a6:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    21a8:	211f      	movs	r1, #31
    21aa:	4011      	ands	r1, r2
    21ac:	2201      	movs	r2, #1
    21ae:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    21b0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    21b2:	2305      	movs	r3, #5
    21b4:	e7df      	b.n	2176 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    21b6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    21b8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    21ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    21bc:	2c00      	cmp	r4, #0
    21be:	d104      	bne.n	21ca <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    21c0:	0953      	lsrs	r3, r2, #5
    21c2:	01db      	lsls	r3, r3, #7
    21c4:	4c25      	ldr	r4, [pc, #148]	; (225c <spi_select_slave+0xf0>)
    21c6:	46a4      	mov	ip, r4
    21c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    21ca:	241f      	movs	r4, #31
    21cc:	4014      	ands	r4, r2
    21ce:	2201      	movs	r2, #1
    21d0:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    21d2:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21d4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    21d6:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    21d8:	07d2      	lsls	r2, r2, #31
    21da:	d501      	bpl.n	21e0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    21dc:	788a      	ldrb	r2, [r1, #2]
    21de:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    21e0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    21e2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    21e4:	2a00      	cmp	r2, #0
    21e6:	d1c6      	bne.n	2176 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    21e8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    21ea:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    21ec:	7e13      	ldrb	r3, [r2, #24]
    21ee:	420b      	tst	r3, r1
    21f0:	d0fc      	beq.n	21ec <spi_select_slave+0x80>
    21f2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    21f4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    21f6:	0749      	lsls	r1, r1, #29
    21f8:	d5bd      	bpl.n	2176 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    21fa:	8b53      	ldrh	r3, [r2, #26]
    21fc:	075b      	lsls	r3, r3, #29
    21fe:	d501      	bpl.n	2204 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2200:	2304      	movs	r3, #4
    2202:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2204:	7983      	ldrb	r3, [r0, #6]
    2206:	2b01      	cmp	r3, #1
    2208:	d002      	beq.n	2210 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    220a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    220c:	2300      	movs	r3, #0
    220e:	e7b2      	b.n	2176 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2210:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2212:	2300      	movs	r3, #0
    2214:	e7af      	b.n	2176 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2216:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2218:	09d1      	lsrs	r1, r2, #7
		return NULL;
    221a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    221c:	2900      	cmp	r1, #0
    221e:	d104      	bne.n	222a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    2220:	0953      	lsrs	r3, r2, #5
    2222:	01db      	lsls	r3, r3, #7
    2224:	490d      	ldr	r1, [pc, #52]	; (225c <spi_select_slave+0xf0>)
    2226:	468c      	mov	ip, r1
    2228:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    222a:	211f      	movs	r1, #31
    222c:	4011      	ands	r1, r2
    222e:	2201      	movs	r2, #1
    2230:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2232:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    2234:	2300      	movs	r3, #0
    2236:	e79e      	b.n	2176 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2238:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    223a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    223c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    223e:	2900      	cmp	r1, #0
    2240:	d104      	bne.n	224c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    2242:	0953      	lsrs	r3, r2, #5
    2244:	01db      	lsls	r3, r3, #7
    2246:	4905      	ldr	r1, [pc, #20]	; (225c <spi_select_slave+0xf0>)
    2248:	468c      	mov	ip, r1
    224a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    224c:	211f      	movs	r1, #31
    224e:	4011      	ands	r1, r2
    2250:	2201      	movs	r2, #1
    2252:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2254:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    2256:	2300      	movs	r3, #0
    2258:	e78d      	b.n	2176 <spi_select_slave+0xa>
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	41004400 	.word	0x41004400

00002260 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2260:	b5f0      	push	{r4, r5, r6, r7, lr}
    2262:	46de      	mov	lr, fp
    2264:	4657      	mov	r7, sl
    2266:	464e      	mov	r6, r9
    2268:	4645      	mov	r5, r8
    226a:	b5e0      	push	{r5, r6, r7, lr}
    226c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    226e:	2338      	movs	r3, #56	; 0x38
    2270:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2272:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    2274:	2c05      	cmp	r4, #5
    2276:	d002      	beq.n	227e <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2278:	3312      	adds	r3, #18
	if (length == 0) {
    227a:	2a00      	cmp	r2, #0
    227c:	d107      	bne.n	228e <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    227e:	0018      	movs	r0, r3
    2280:	b003      	add	sp, #12
    2282:	bc3c      	pop	{r2, r3, r4, r5}
    2284:	4690      	mov	r8, r2
    2286:	4699      	mov	r9, r3
    2288:	46a2      	mov	sl, r4
    228a:	46ab      	mov	fp, r5
    228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    228e:	7943      	ldrb	r3, [r0, #5]
    2290:	2b00      	cmp	r3, #0
    2292:	d103      	bne.n	229c <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2294:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2296:	7e1c      	ldrb	r4, [r3, #24]
    2298:	07a4      	lsls	r4, r4, #30
    229a:	d40a      	bmi.n	22b2 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    229c:	4693      	mov	fp, r2
    229e:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    22a0:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    22a2:	2502      	movs	r5, #2
    22a4:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    22a6:	3502      	adds	r5, #2
    22a8:	46a8      	mov	r8, r5
    22aa:	3a01      	subs	r2, #1
    22ac:	b292      	uxth	r2, r2
    22ae:	468a      	mov	sl, r1
    22b0:	e023      	b.n	22fa <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    22b2:	2402      	movs	r4, #2
    22b4:	761c      	strb	r4, [r3, #24]
    22b6:	e7f1      	b.n	229c <spi_write_buffer_wait+0x3c>
    22b8:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    22ba:	4661      	mov	r1, ip
    22bc:	420d      	tst	r5, r1
    22be:	d12e      	bne.n	231e <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    22c0:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    22c2:	421d      	tst	r5, r3
    22c4:	d100      	bne.n	22c8 <spi_write_buffer_wait+0x68>
    22c6:	e0c2      	b.n	244e <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    22c8:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    22ca:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    22cc:	421d      	tst	r5, r3
    22ce:	d0fc      	beq.n	22ca <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    22d0:	1c67      	adds	r7, r4, #1
    22d2:	b2bf      	uxth	r7, r7
    22d4:	4651      	mov	r1, sl
    22d6:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    22d8:	7981      	ldrb	r1, [r0, #6]
    22da:	2901      	cmp	r1, #1
    22dc:	d023      	beq.n	2326 <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    22de:	b2ad      	uxth	r5, r5
    22e0:	003c      	movs	r4, r7
    22e2:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    22e4:	421f      	tst	r7, r3
    22e6:	d002      	beq.n	22ee <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    22e8:	05ed      	lsls	r5, r5, #23
    22ea:	0ded      	lsrs	r5, r5, #23
    22ec:	62b5      	str	r5, [r6, #40]	; 0x28
    22ee:	1e55      	subs	r5, r2, #1
    22f0:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    22f2:	79c6      	ldrb	r6, [r0, #7]
    22f4:	2e00      	cmp	r6, #0
    22f6:	d11d      	bne.n	2334 <spi_write_buffer_wait+0xd4>
    22f8:	002a      	movs	r2, r5
	while (length--) {
    22fa:	4d5a      	ldr	r5, [pc, #360]	; (2464 <spi_write_buffer_wait+0x204>)
    22fc:	42aa      	cmp	r2, r5
    22fe:	d070      	beq.n	23e2 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    2300:	7945      	ldrb	r5, [r0, #5]
    2302:	2d00      	cmp	r5, #0
    2304:	d1e0      	bne.n	22c8 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2306:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2308:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    230a:	421d      	tst	r5, r3
    230c:	d1d4      	bne.n	22b8 <spi_write_buffer_wait+0x58>
    230e:	4d56      	ldr	r5, [pc, #344]	; (2468 <spi_write_buffer_wait+0x208>)
    2310:	7e37      	ldrb	r7, [r6, #24]
    2312:	421f      	tst	r7, r3
    2314:	d1d0      	bne.n	22b8 <spi_write_buffer_wait+0x58>
    2316:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2318:	2d00      	cmp	r5, #0
    231a:	d1f9      	bne.n	2310 <spi_write_buffer_wait+0xb0>
    231c:	e7cc      	b.n	22b8 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    231e:	2302      	movs	r3, #2
    2320:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    2322:	3302      	adds	r3, #2
    2324:	e7ab      	b.n	227e <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2326:	3402      	adds	r4, #2
    2328:	b2a4      	uxth	r4, r4
    232a:	4651      	mov	r1, sl
    232c:	5dcf      	ldrb	r7, [r1, r7]
    232e:	023f      	lsls	r7, r7, #8
    2330:	433d      	orrs	r5, r7
    2332:	e7d6      	b.n	22e2 <spi_write_buffer_wait+0x82>
    2334:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    2336:	7945      	ldrb	r5, [r0, #5]
    2338:	2d00      	cmp	r5, #0
    233a:	d137      	bne.n	23ac <spi_write_buffer_wait+0x14c>
    233c:	4d4b      	ldr	r5, [pc, #300]	; (246c <spi_write_buffer_wait+0x20c>)
    233e:	9101      	str	r1, [sp, #4]
    2340:	e012      	b.n	2368 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    2342:	3402      	adds	r4, #2
    2344:	b2a4      	uxth	r4, r4
    2346:	4649      	mov	r1, r9
    2348:	9f01      	ldr	r7, [sp, #4]
    234a:	5c79      	ldrb	r1, [r7, r1]
    234c:	0209      	lsls	r1, r1, #8
    234e:	9f00      	ldr	r7, [sp, #0]
    2350:	430f      	orrs	r7, r1
    2352:	e01b      	b.n	238c <spi_write_buffer_wait+0x12c>
						length--;
    2354:	3a01      	subs	r2, #1
    2356:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    2358:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    235a:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    235c:	4641      	mov	r1, r8
    235e:	420f      	tst	r7, r1
    2360:	d11b      	bne.n	239a <spi_write_buffer_wait+0x13a>
    2362:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2364:	2d00      	cmp	r5, #0
    2366:	d018      	beq.n	239a <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    2368:	2a00      	cmp	r2, #0
    236a:	d0f5      	beq.n	2358 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    236c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    236e:	7e37      	ldrb	r7, [r6, #24]
    2370:	421f      	tst	r7, r3
    2372:	d0f1      	beq.n	2358 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    2374:	1c67      	adds	r7, r4, #1
    2376:	b2b9      	uxth	r1, r7
    2378:	4689      	mov	r9, r1
    237a:	9901      	ldr	r1, [sp, #4]
    237c:	5d09      	ldrb	r1, [r1, r4]
    237e:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2380:	7981      	ldrb	r1, [r0, #6]
    2382:	2901      	cmp	r1, #1
    2384:	d0dd      	beq.n	2342 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    2386:	4669      	mov	r1, sp
    2388:	880f      	ldrh	r7, [r1, #0]
    238a:	464c      	mov	r4, r9
    238c:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    238e:	4219      	tst	r1, r3
    2390:	d0e0      	beq.n	2354 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2392:	05ff      	lsls	r7, r7, #23
    2394:	0dff      	lsrs	r7, r7, #23
    2396:	62b7      	str	r7, [r6, #40]	; 0x28
    2398:	e7dc      	b.n	2354 <spi_write_buffer_wait+0xf4>
    239a:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    239c:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    239e:	4667      	mov	r7, ip
    23a0:	423d      	tst	r5, r7
    23a2:	d118      	bne.n	23d6 <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    23a4:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    23a6:	4646      	mov	r6, r8
    23a8:	4235      	tst	r5, r6
    23aa:	d052      	beq.n	2452 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    23ac:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    23ae:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    23b0:	4647      	mov	r7, r8
    23b2:	423d      	tst	r5, r7
    23b4:	d0fb      	beq.n	23ae <spi_write_buffer_wait+0x14e>
    23b6:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    23b8:	423d      	tst	r5, r7
    23ba:	d007      	beq.n	23cc <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23bc:	8b75      	ldrh	r5, [r6, #26]
    23be:	423d      	tst	r5, r7
    23c0:	d000      	beq.n	23c4 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    23c2:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    23c4:	7985      	ldrb	r5, [r0, #6]
    23c6:	2d01      	cmp	r5, #1
    23c8:	d009      	beq.n	23de <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    23ca:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    23cc:	465d      	mov	r5, fp
    23ce:	3d01      	subs	r5, #1
    23d0:	b2ad      	uxth	r5, r5
    23d2:	46ab      	mov	fp, r5
    23d4:	e769      	b.n	22aa <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    23d6:	2302      	movs	r3, #2
    23d8:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    23da:	3302      	adds	r3, #2
    23dc:	e74f      	b.n	227e <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    23de:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    23e0:	e7f4      	b.n	23cc <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    23e2:	7943      	ldrb	r3, [r0, #5]
    23e4:	2b01      	cmp	r3, #1
    23e6:	d00b      	beq.n	2400 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    23e8:	2b00      	cmp	r3, #0
    23ea:	d134      	bne.n	2456 <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    23ec:	79c2      	ldrb	r2, [r0, #7]
    23ee:	2a00      	cmp	r2, #0
    23f0:	d100      	bne.n	23f4 <spi_write_buffer_wait+0x194>
    23f2:	e744      	b.n	227e <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    23f4:	2404      	movs	r4, #4
			while (flush_length) {
    23f6:	465b      	mov	r3, fp
    23f8:	465d      	mov	r5, fp
    23fa:	2b00      	cmp	r3, #0
    23fc:	d119      	bne.n	2432 <spi_write_buffer_wait+0x1d2>
    23fe:	e73e      	b.n	227e <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2400:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    2402:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2404:	7e0b      	ldrb	r3, [r1, #24]
    2406:	4213      	tst	r3, r2
    2408:	d0fc      	beq.n	2404 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    240a:	2300      	movs	r3, #0
    240c:	e737      	b.n	227e <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    240e:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    2410:	4223      	tst	r3, r4
    2412:	d022      	beq.n	245a <spi_write_buffer_wait+0x1fa>
    2414:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    2416:	4223      	tst	r3, r4
    2418:	d007      	beq.n	242a <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    241a:	8b4b      	ldrh	r3, [r1, #26]
    241c:	4223      	tst	r3, r4
    241e:	d000      	beq.n	2422 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2420:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2422:	7983      	ldrb	r3, [r0, #6]
    2424:	2b01      	cmp	r3, #1
    2426:	d010      	beq.n	244a <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2428:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    242a:	3d01      	subs	r5, #1
    242c:	b2ad      	uxth	r5, r5
			while (flush_length) {
    242e:	2d00      	cmp	r5, #0
    2430:	d015      	beq.n	245e <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2432:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2434:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    2436:	4223      	tst	r3, r4
    2438:	d1e9      	bne.n	240e <spi_write_buffer_wait+0x1ae>
    243a:	4b0b      	ldr	r3, [pc, #44]	; (2468 <spi_write_buffer_wait+0x208>)
    243c:	7e0a      	ldrb	r2, [r1, #24]
    243e:	4222      	tst	r2, r4
    2440:	d1e5      	bne.n	240e <spi_write_buffer_wait+0x1ae>
    2442:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2444:	2b00      	cmp	r3, #0
    2446:	d1f9      	bne.n	243c <spi_write_buffer_wait+0x1dc>
    2448:	e7e1      	b.n	240e <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    244a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    244c:	e7ed      	b.n	242a <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    244e:	2312      	movs	r3, #18
    2450:	e715      	b.n	227e <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    2452:	2312      	movs	r3, #18
    2454:	e713      	b.n	227e <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    2456:	2300      	movs	r3, #0
    2458:	e711      	b.n	227e <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    245a:	2312      	movs	r3, #18
    245c:	e70f      	b.n	227e <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    245e:	2300      	movs	r3, #0
    2460:	e70d      	b.n	227e <spi_write_buffer_wait+0x1e>
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	0000ffff 	.word	0x0000ffff
    2468:	00002710 	.word	0x00002710
    246c:	00002711 	.word	0x00002711

00002470 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    2470:	b5f0      	push	{r4, r5, r6, r7, lr}
    2472:	46de      	mov	lr, fp
    2474:	4657      	mov	r7, sl
    2476:	464e      	mov	r6, r9
    2478:	4645      	mov	r5, r8
    247a:	b5e0      	push	{r5, r6, r7, lr}
    247c:	b085      	sub	sp, #20
    247e:	4688      	mov	r8, r1
    2480:	9203      	str	r2, [sp, #12]
    2482:	4699      	mov	r9, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2484:	2338      	movs	r3, #56	; 0x38
    2486:	5cc3      	ldrb	r3, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2488:	2405      	movs	r4, #5
	if (module->status == STATUS_BUSY) {
    248a:	2b05      	cmp	r3, #5
    248c:	d003      	beq.n	2496 <spi_transceive_buffer_wait+0x26>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    248e:	3412      	adds	r4, #18
	if (length == 0) {
    2490:	464b      	mov	r3, r9
    2492:	2b00      	cmp	r3, #0
    2494:	d107      	bne.n	24a6 <spi_transceive_buffer_wait+0x36>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    2496:	0020      	movs	r0, r4
    2498:	b005      	add	sp, #20
    249a:	bc3c      	pop	{r2, r3, r4, r5}
    249c:	4690      	mov	r8, r2
    249e:	4699      	mov	r9, r3
    24a0:	46a2      	mov	sl, r4
    24a2:	46ab      	mov	fp, r5
    24a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    24a6:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
    24a8:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
    24aa:	2b00      	cmp	r3, #0
    24ac:	d0f3      	beq.n	2496 <spi_transceive_buffer_wait+0x26>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    24ae:	7943      	ldrb	r3, [r0, #5]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d103      	bne.n	24bc <spi_transceive_buffer_wait+0x4c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    24b4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    24b6:	7e1a      	ldrb	r2, [r3, #24]
    24b8:	0792      	lsls	r2, r2, #30
    24ba:	d407      	bmi.n	24cc <spi_transceive_buffer_wait+0x5c>
	while (length--) {
    24bc:	464b      	mov	r3, r9
    24be:	1e59      	subs	r1, r3, #1
    24c0:	b289      	uxth	r1, r1
    24c2:	2300      	movs	r3, #0
    24c4:	469a      	mov	sl, r3
				if (spi_is_ready_to_write(module)) {
    24c6:	2201      	movs	r2, #1
				if (spi_is_ready_to_read(module)) {
    24c8:	2704      	movs	r7, #4
    24ca:	e075      	b.n	25b8 <spi_transceive_buffer_wait+0x148>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    24cc:	2202      	movs	r2, #2
    24ce:	761a      	strb	r2, [r3, #24]
    24d0:	e7f4      	b.n	24bc <spi_transceive_buffer_wait+0x4c>
    24d2:	2302      	movs	r3, #2
    24d4:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    24d6:	2404      	movs	r4, #4
    24d8:	e7dd      	b.n	2496 <spi_transceive_buffer_wait+0x26>
			data_to_send |= (tx_data[tx_pos++] << 8);
    24da:	3302      	adds	r3, #2
    24dc:	b29b      	uxth	r3, r3
    24de:	4644      	mov	r4, r8
    24e0:	5da6      	ldrb	r6, [r4, r6]
    24e2:	0236      	lsls	r6, r6, #8
    24e4:	465c      	mov	r4, fp
    24e6:	4334      	orrs	r4, r6
    24e8:	e08f      	b.n	260a <spi_transceive_buffer_wait+0x19a>
						data_to_send |= (tx_data[tx_pos++] << 8);
    24ea:	3302      	adds	r3, #2
    24ec:	b29b      	uxth	r3, r3
    24ee:	4641      	mov	r1, r8
    24f0:	4666      	mov	r6, ip
    24f2:	5d89      	ldrb	r1, [r1, r6]
    24f4:	0209      	lsls	r1, r1, #8
    24f6:	9e02      	ldr	r6, [sp, #8]
    24f8:	430e      	orrs	r6, r1
    24fa:	e01a      	b.n	2532 <spi_transceive_buffer_wait+0xc2>
					length--;
    24fc:	9901      	ldr	r1, [sp, #4]
    24fe:	3901      	subs	r1, #1
    2500:	b289      	uxth	r1, r1
    2502:	9101      	str	r1, [sp, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2504:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2506:	7e26      	ldrb	r6, [r4, #24]
				if (spi_is_ready_to_read(module)) {
    2508:	423e      	tst	r6, r7
    250a:	d119      	bne.n	2540 <spi_transceive_buffer_wait+0xd0>
    250c:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    250e:	2d00      	cmp	r5, #0
    2510:	d016      	beq.n	2540 <spi_transceive_buffer_wait+0xd0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2512:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2514:	7e26      	ldrb	r6, [r4, #24]
				if (spi_is_ready_to_write(module)) {
    2516:	4216      	tst	r6, r2
    2518:	d0f4      	beq.n	2504 <spi_transceive_buffer_wait+0x94>
					data_to_send = tx_data[tx_pos++];
    251a:	1c5e      	adds	r6, r3, #1
    251c:	b2b6      	uxth	r6, r6
    251e:	46b4      	mov	ip, r6
    2520:	4646      	mov	r6, r8
    2522:	5cf1      	ldrb	r1, [r6, r3]
    2524:	000e      	movs	r6, r1
    2526:	9102      	str	r1, [sp, #8]
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2528:	7981      	ldrb	r1, [r0, #6]
    252a:	2901      	cmp	r1, #1
    252c:	d0dd      	beq.n	24ea <spi_transceive_buffer_wait+0x7a>
					data_to_send = tx_data[tx_pos++];
    252e:	b2b6      	uxth	r6, r6
    2530:	4663      	mov	r3, ip
    2532:	7e21      	ldrb	r1, [r4, #24]
	if (!spi_is_ready_to_write(module)) {
    2534:	4211      	tst	r1, r2
    2536:	d0e1      	beq.n	24fc <spi_transceive_buffer_wait+0x8c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2538:	05f6      	lsls	r6, r6, #23
    253a:	0df6      	lsrs	r6, r6, #23
    253c:	62a6      	str	r6, [r4, #40]	; 0x28
    253e:	e7dd      	b.n	24fc <spi_transceive_buffer_wait+0x8c>
    2540:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2542:	7e25      	ldrb	r5, [r4, #24]
			if (spi_is_write_complete(module)) {
    2544:	2602      	movs	r6, #2
    2546:	4235      	tst	r5, r6
    2548:	d105      	bne.n	2556 <spi_transceive_buffer_wait+0xe6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    254a:	7e24      	ldrb	r4, [r4, #24]
			if (!spi_is_ready_to_read(module)) {
    254c:	423c      	tst	r4, r7
    254e:	d100      	bne.n	2552 <spi_transceive_buffer_wait+0xe2>
    2550:	e0ce      	b.n	26f0 <spi_transceive_buffer_wait+0x280>
    2552:	000e      	movs	r6, r1
    2554:	e004      	b.n	2560 <spi_transceive_buffer_wait+0xf0>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2556:	2302      	movs	r3, #2
    2558:	7623      	strb	r3, [r4, #24]
				return STATUS_ABORTED;
    255a:	2404      	movs	r4, #4
    255c:	e79b      	b.n	2496 <spi_transceive_buffer_wait+0x26>
    255e:	000e      	movs	r6, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
    2560:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2562:	7e29      	ldrb	r1, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    2564:	4239      	tst	r1, r7
    2566:	d0fc      	beq.n	2562 <spi_transceive_buffer_wait+0xf2>
		rx_length--;
    2568:	4649      	mov	r1, r9
    256a:	3901      	subs	r1, #1
    256c:	b289      	uxth	r1, r1
    256e:	4689      	mov	r9, r1
    2570:	7e29      	ldrb	r1, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    2572:	4239      	tst	r1, r7
    2574:	d100      	bne.n	2578 <spi_transceive_buffer_wait+0x108>
    2576:	e0bd      	b.n	26f4 <spi_transceive_buffer_wait+0x284>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2578:	8b69      	ldrh	r1, [r5, #26]
	enum status_code retval = STATUS_OK;
    257a:	2400      	movs	r4, #0
    257c:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    257e:	4239      	tst	r1, r7
    2580:	d002      	beq.n	2588 <spi_transceive_buffer_wait+0x118>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2582:	836f      	strh	r7, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    2584:	211e      	movs	r1, #30
    2586:	9101      	str	r1, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2588:	7981      	ldrb	r1, [r0, #6]
    258a:	2901      	cmp	r1, #1
    258c:	d049      	beq.n	2622 <spi_transceive_buffer_wait+0x1b2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    258e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2590:	b2ed      	uxtb	r5, r5
		if (retval != STATUS_OK) {
    2592:	9901      	ldr	r1, [sp, #4]
    2594:	2900      	cmp	r1, #0
    2596:	d000      	beq.n	259a <spi_transceive_buffer_wait+0x12a>
    2598:	e0b4      	b.n	2704 <spi_transceive_buffer_wait+0x294>
		rx_data[rx_pos++] = received_data;
    259a:	4651      	mov	r1, sl
    259c:	3101      	adds	r1, #1
    259e:	b289      	uxth	r1, r1
    25a0:	468b      	mov	fp, r1
    25a2:	9c03      	ldr	r4, [sp, #12]
    25a4:	4651      	mov	r1, sl
    25a6:	5465      	strb	r5, [r4, r1]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    25a8:	7984      	ldrb	r4, [r0, #6]
    25aa:	2c01      	cmp	r4, #1
    25ac:	d03d      	beq.n	262a <spi_transceive_buffer_wait+0x1ba>
		rx_data[rx_pos++] = received_data;
    25ae:	46da      	mov	sl, fp
	while (length--) {
    25b0:	1e71      	subs	r1, r6, #1
    25b2:	b289      	uxth	r1, r1
    25b4:	2e00      	cmp	r6, #0
    25b6:	d045      	beq.n	2644 <spi_transceive_buffer_wait+0x1d4>
		if (module->mode == SPI_MODE_SLAVE) {
    25b8:	7944      	ldrb	r4, [r0, #5]
    25ba:	2c00      	cmp	r4, #0
    25bc:	d113      	bne.n	25e6 <spi_transceive_buffer_wait+0x176>
	SercomSpi *const spi_module = &(module->hw->SPI);
    25be:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    25c0:	7e34      	ldrb	r4, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    25c2:	4214      	tst	r4, r2
    25c4:	d106      	bne.n	25d4 <spi_transceive_buffer_wait+0x164>
    25c6:	4c50      	ldr	r4, [pc, #320]	; (2708 <spi_transceive_buffer_wait+0x298>)
    25c8:	7e35      	ldrb	r5, [r6, #24]
    25ca:	4215      	tst	r5, r2
    25cc:	d102      	bne.n	25d4 <spi_transceive_buffer_wait+0x164>
    25ce:	3c01      	subs	r4, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    25d0:	2c00      	cmp	r4, #0
    25d2:	d1f9      	bne.n	25c8 <spi_transceive_buffer_wait+0x158>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    25d4:	7e34      	ldrb	r4, [r6, #24]
			if (spi_is_write_complete(module)) {
    25d6:	2502      	movs	r5, #2
    25d8:	422c      	tst	r4, r5
    25da:	d000      	beq.n	25de <spi_transceive_buffer_wait+0x16e>
    25dc:	e779      	b.n	24d2 <spi_transceive_buffer_wait+0x62>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    25de:	7e34      	ldrb	r4, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    25e0:	4214      	tst	r4, r2
    25e2:	d100      	bne.n	25e6 <spi_transceive_buffer_wait+0x176>
    25e4:	e082      	b.n	26ec <spi_transceive_buffer_wait+0x27c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    25e6:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    25e8:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_write(module)) {
    25ea:	4214      	tst	r4, r2
    25ec:	d0fc      	beq.n	25e8 <spi_transceive_buffer_wait+0x178>
		uint16_t data_to_send = tx_data[tx_pos++];
    25ee:	1c5e      	adds	r6, r3, #1
    25f0:	b2b6      	uxth	r6, r6
    25f2:	4644      	mov	r4, r8
    25f4:	5ce4      	ldrb	r4, [r4, r3]
    25f6:	46a3      	mov	fp, r4
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    25f8:	7984      	ldrb	r4, [r0, #6]
    25fa:	2c01      	cmp	r4, #1
    25fc:	d100      	bne.n	2600 <spi_transceive_buffer_wait+0x190>
    25fe:	e76c      	b.n	24da <spi_transceive_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    2600:	465b      	mov	r3, fp
    2602:	466c      	mov	r4, sp
    2604:	80a3      	strh	r3, [r4, #4]
    2606:	88a4      	ldrh	r4, [r4, #4]
    2608:	0033      	movs	r3, r6
    260a:	7e2e      	ldrb	r6, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    260c:	4216      	tst	r6, r2
    260e:	d002      	beq.n	2616 <spi_transceive_buffer_wait+0x1a6>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2610:	05e4      	lsls	r4, r4, #23
    2612:	0de4      	lsrs	r4, r4, #23
    2614:	62ac      	str	r4, [r5, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    2616:	7944      	ldrb	r4, [r0, #5]
    2618:	2c00      	cmp	r4, #0
    261a:	d1a0      	bne.n	255e <spi_transceive_buffer_wait+0xee>
    261c:	4d3b      	ldr	r5, [pc, #236]	; (270c <spi_transceive_buffer_wait+0x29c>)
    261e:	9101      	str	r1, [sp, #4]
    2620:	e777      	b.n	2512 <spi_transceive_buffer_wait+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2622:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2624:	05ed      	lsls	r5, r5, #23
    2626:	0ded      	lsrs	r5, r5, #23
    2628:	e7b3      	b.n	2592 <spi_transceive_buffer_wait+0x122>
			rx_data[rx_pos++] = (received_data >> 8);
    262a:	2102      	movs	r1, #2
    262c:	468c      	mov	ip, r1
    262e:	44e2      	add	sl, ip
    2630:	4651      	mov	r1, sl
    2632:	466c      	mov	r4, sp
    2634:	8121      	strh	r1, [r4, #8]
    2636:	8921      	ldrh	r1, [r4, #8]
    2638:	468a      	mov	sl, r1
    263a:	0a2d      	lsrs	r5, r5, #8
    263c:	9903      	ldr	r1, [sp, #12]
    263e:	465c      	mov	r4, fp
    2640:	550d      	strb	r5, [r1, r4]
    2642:	e7b5      	b.n	25b0 <spi_transceive_buffer_wait+0x140>
    2644:	9c01      	ldr	r4, [sp, #4]
	if (module->mode == SPI_MODE_MASTER) {
    2646:	7943      	ldrb	r3, [r0, #5]
    2648:	2b01      	cmp	r3, #1
    264a:	d010      	beq.n	266e <spi_transceive_buffer_wait+0x1fe>
	if (module->mode == SPI_MODE_SLAVE) {
    264c:	2b00      	cmp	r3, #0
    264e:	d000      	beq.n	2652 <spi_transceive_buffer_wait+0x1e2>
    2650:	e721      	b.n	2496 <spi_transceive_buffer_wait+0x26>
		while (rx_length) {
    2652:	464b      	mov	r3, r9
    2654:	2b00      	cmp	r3, #0
    2656:	d100      	bne.n	265a <spi_transceive_buffer_wait+0x1ea>
    2658:	e71d      	b.n	2496 <spi_transceive_buffer_wait+0x26>
				if (spi_is_ready_to_read(module)) {
    265a:	2704      	movs	r7, #4
	enum status_code retval = STATUS_OK;
    265c:	0021      	movs	r1, r4
		retval = STATUS_ERR_OVERFLOW;
    265e:	251e      	movs	r5, #30
    2660:	0004      	movs	r4, r0
    2662:	4650      	mov	r0, sl
    2664:	9b03      	ldr	r3, [sp, #12]
    2666:	4698      	mov	r8, r3
    2668:	9102      	str	r1, [sp, #8]
    266a:	4649      	mov	r1, r9
    266c:	e026      	b.n	26bc <spi_transceive_buffer_wait+0x24c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    266e:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    2670:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2672:	7e0b      	ldrb	r3, [r1, #24]
    2674:	4213      	tst	r3, r2
    2676:	d0fc      	beq.n	2672 <spi_transceive_buffer_wait+0x202>
    2678:	e70d      	b.n	2496 <spi_transceive_buffer_wait+0x26>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    267a:	7e33      	ldrb	r3, [r6, #24]
			if (!spi_is_ready_to_read(module)) {
    267c:	423b      	tst	r3, r7
    267e:	d03b      	beq.n	26f8 <spi_transceive_buffer_wait+0x288>
			rx_length--;
    2680:	3901      	subs	r1, #1
    2682:	b289      	uxth	r1, r1
    2684:	7e33      	ldrb	r3, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    2686:	423b      	tst	r3, r7
    2688:	d038      	beq.n	26fc <spi_transceive_buffer_wait+0x28c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    268a:	8b73      	ldrh	r3, [r6, #26]
	enum status_code retval = STATUS_OK;
    268c:	9a02      	ldr	r2, [sp, #8]
    268e:	9201      	str	r2, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2690:	423b      	tst	r3, r7
    2692:	d001      	beq.n	2698 <spi_transceive_buffer_wait+0x228>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2694:	8377      	strh	r7, [r6, #26]
		retval = STATUS_ERR_OVERFLOW;
    2696:	9501      	str	r5, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2698:	79a3      	ldrb	r3, [r4, #6]
    269a:	2b01      	cmp	r3, #1
    269c:	d01a      	beq.n	26d4 <spi_transceive_buffer_wait+0x264>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    269e:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    26a0:	b2f6      	uxtb	r6, r6
			if (retval != STATUS_OK) {
    26a2:	9b01      	ldr	r3, [sp, #4]
    26a4:	2b00      	cmp	r3, #0
    26a6:	d12b      	bne.n	2700 <spi_transceive_buffer_wait+0x290>
			rx_data[rx_pos++] = received_data;
    26a8:	1c43      	adds	r3, r0, #1
    26aa:	b29b      	uxth	r3, r3
    26ac:	4642      	mov	r2, r8
    26ae:	5416      	strb	r6, [r2, r0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26b0:	79a2      	ldrb	r2, [r4, #6]
    26b2:	2a01      	cmp	r2, #1
    26b4:	d012      	beq.n	26dc <spi_transceive_buffer_wait+0x26c>
			rx_data[rx_pos++] = received_data;
    26b6:	0018      	movs	r0, r3
		while (rx_length) {
    26b8:	2900      	cmp	r1, #0
    26ba:	d015      	beq.n	26e8 <spi_transceive_buffer_wait+0x278>
	SercomSpi *const spi_module = &(module->hw->SPI);
    26bc:	6826      	ldr	r6, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    26be:	7e33      	ldrb	r3, [r6, #24]
				if (spi_is_ready_to_read(module)) {
    26c0:	423b      	tst	r3, r7
    26c2:	d1da      	bne.n	267a <spi_transceive_buffer_wait+0x20a>
    26c4:	4b10      	ldr	r3, [pc, #64]	; (2708 <spi_transceive_buffer_wait+0x298>)
    26c6:	7e32      	ldrb	r2, [r6, #24]
    26c8:	423a      	tst	r2, r7
    26ca:	d1d6      	bne.n	267a <spi_transceive_buffer_wait+0x20a>
    26cc:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    26ce:	2b00      	cmp	r3, #0
    26d0:	d1f9      	bne.n	26c6 <spi_transceive_buffer_wait+0x256>
    26d2:	e7d2      	b.n	267a <spi_transceive_buffer_wait+0x20a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    26d4:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    26d6:	05f6      	lsls	r6, r6, #23
    26d8:	0df6      	lsrs	r6, r6, #23
    26da:	e7e2      	b.n	26a2 <spi_transceive_buffer_wait+0x232>
				rx_data[rx_pos++] = (received_data >> 8);
    26dc:	3002      	adds	r0, #2
    26de:	b280      	uxth	r0, r0
    26e0:	0a36      	lsrs	r6, r6, #8
    26e2:	4642      	mov	r2, r8
    26e4:	54d6      	strb	r6, [r2, r3]
    26e6:	e7e7      	b.n	26b8 <spi_transceive_buffer_wait+0x248>
    26e8:	9c01      	ldr	r4, [sp, #4]
    26ea:	e6d4      	b.n	2496 <spi_transceive_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
    26ec:	2412      	movs	r4, #18
    26ee:	e6d2      	b.n	2496 <spi_transceive_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
    26f0:	2412      	movs	r4, #18
    26f2:	e6d0      	b.n	2496 <spi_transceive_buffer_wait+0x26>
		return STATUS_ERR_IO;
    26f4:	2410      	movs	r4, #16
    26f6:	e6ce      	b.n	2496 <spi_transceive_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
    26f8:	2412      	movs	r4, #18
    26fa:	e6cc      	b.n	2496 <spi_transceive_buffer_wait+0x26>
    26fc:	2410      	movs	r4, #16
    26fe:	e6ca      	b.n	2496 <spi_transceive_buffer_wait+0x26>
    2700:	9c01      	ldr	r4, [sp, #4]
    2702:	e6c8      	b.n	2496 <spi_transceive_buffer_wait+0x26>
    2704:	9c01      	ldr	r4, [sp, #4]
    2706:	e6c6      	b.n	2496 <spi_transceive_buffer_wait+0x26>
    2708:	00002710 	.word	0x00002710
    270c:	00002711 	.word	0x00002711

00002710 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    2712:	0080      	lsls	r0, r0, #2
    2714:	4b85      	ldr	r3, [pc, #532]	; (292c <_spi_interrupt_handler+0x21c>)
    2716:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2718:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    271a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    271c:	5ce3      	ldrb	r3, [r4, r3]
    271e:	2236      	movs	r2, #54	; 0x36
    2720:	5ca7      	ldrb	r7, [r4, r2]
    2722:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2724:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    2726:	7db5      	ldrb	r5, [r6, #22]
    2728:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    272a:	07eb      	lsls	r3, r5, #31
    272c:	d52e      	bpl.n	278c <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    272e:	7963      	ldrb	r3, [r4, #5]
    2730:	2b01      	cmp	r3, #1
    2732:	d025      	beq.n	2780 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    2734:	2b00      	cmp	r3, #0
    2736:	d129      	bne.n	278c <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    2738:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    273a:	2b00      	cmp	r3, #0
    273c:	d026      	beq.n	278c <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    273e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2740:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2742:	7813      	ldrb	r3, [r2, #0]
    2744:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    2746:	1c50      	adds	r0, r2, #1
    2748:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    274a:	79a0      	ldrb	r0, [r4, #6]
    274c:	2801      	cmp	r0, #1
    274e:	d100      	bne.n	2752 <_spi_interrupt_handler+0x42>
    2750:	e069      	b.n	2826 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2752:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    2754:	05db      	lsls	r3, r3, #23
    2756:	0ddb      	lsrs	r3, r3, #23
    2758:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    275a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    275c:	3b01      	subs	r3, #1
    275e:	b29b      	uxth	r3, r3
    2760:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    2762:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2764:	b29b      	uxth	r3, r3
    2766:	2b00      	cmp	r3, #0
    2768:	d110      	bne.n	278c <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    276a:	3301      	adds	r3, #1
    276c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    276e:	7a63      	ldrb	r3, [r4, #9]
    2770:	2b01      	cmp	r3, #1
    2772:	d10b      	bne.n	278c <_spi_interrupt_handler+0x7c>
    2774:	79e3      	ldrb	r3, [r4, #7]
    2776:	2b00      	cmp	r3, #0
    2778:	d108      	bne.n	278c <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    277a:	3302      	adds	r3, #2
    277c:	75b3      	strb	r3, [r6, #22]
    277e:	e005      	b.n	278c <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    2780:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2782:	2b00      	cmp	r3, #0
    2784:	d03e      	beq.n	2804 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    2786:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    2788:	2b00      	cmp	r3, #0
    278a:	d1d8      	bne.n	273e <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    278c:	076b      	lsls	r3, r5, #29
    278e:	d511      	bpl.n	27b4 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2790:	8b73      	ldrh	r3, [r6, #26]
    2792:	075b      	lsls	r3, r3, #29
    2794:	d551      	bpl.n	283a <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2796:	7a63      	ldrb	r3, [r4, #9]
    2798:	2b01      	cmp	r3, #1
    279a:	d008      	beq.n	27ae <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    279c:	221e      	movs	r2, #30
    279e:	2338      	movs	r3, #56	; 0x38
    27a0:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    27a2:	3b35      	subs	r3, #53	; 0x35
    27a4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    27a6:	3302      	adds	r3, #2
    27a8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    27aa:	073b      	lsls	r3, r7, #28
    27ac:	d441      	bmi.n	2832 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    27ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    27b0:	2304      	movs	r3, #4
    27b2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    27b4:	07ab      	lsls	r3, r5, #30
    27b6:	d515      	bpl.n	27e4 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    27b8:	7963      	ldrb	r3, [r4, #5]
    27ba:	2b00      	cmp	r3, #0
    27bc:	d10e      	bne.n	27dc <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    27be:	3307      	adds	r3, #7
    27c0:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    27c2:	3b05      	subs	r3, #5
    27c4:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    27c6:	3301      	adds	r3, #1
    27c8:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    27ca:	2300      	movs	r3, #0
    27cc:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    27ce:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    27d0:	3338      	adds	r3, #56	; 0x38
    27d2:	2200      	movs	r2, #0
    27d4:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    27d6:	06fb      	lsls	r3, r7, #27
    27d8:	d500      	bpl.n	27dc <_spi_interrupt_handler+0xcc>
    27da:	e07f      	b.n	28dc <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    27dc:	7963      	ldrb	r3, [r4, #5]
    27de:	2b01      	cmp	r3, #1
    27e0:	d100      	bne.n	27e4 <_spi_interrupt_handler+0xd4>
    27e2:	e07f      	b.n	28e4 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    27e4:	072b      	lsls	r3, r5, #28
    27e6:	d508      	bpl.n	27fa <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    27e8:	7963      	ldrb	r3, [r4, #5]
    27ea:	2b00      	cmp	r3, #0
    27ec:	d105      	bne.n	27fa <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    27ee:	3308      	adds	r3, #8
    27f0:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    27f2:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    27f4:	06bb      	lsls	r3, r7, #26
    27f6:	d500      	bpl.n	27fa <_spi_interrupt_handler+0xea>
    27f8:	e08a      	b.n	2910 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    27fa:	b26d      	sxtb	r5, r5
    27fc:	2d00      	cmp	r5, #0
    27fe:	da00      	bge.n	2802 <_spi_interrupt_handler+0xf2>
    2800:	e08a      	b.n	2918 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    2802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    2804:	4b4a      	ldr	r3, [pc, #296]	; (2930 <_spi_interrupt_handler+0x220>)
    2806:	881b      	ldrh	r3, [r3, #0]
    2808:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    280a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    280c:	3b01      	subs	r3, #1
    280e:	b29b      	uxth	r3, r3
    2810:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    2812:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2814:	b29b      	uxth	r3, r3
    2816:	2b00      	cmp	r3, #0
    2818:	d101      	bne.n	281e <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    281a:	3301      	adds	r3, #1
    281c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    281e:	7963      	ldrb	r3, [r4, #5]
		if (0
    2820:	2b01      	cmp	r3, #1
    2822:	d0b0      	beq.n	2786 <_spi_interrupt_handler+0x76>
    2824:	e786      	b.n	2734 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    2826:	7850      	ldrb	r0, [r2, #1]
    2828:	0200      	lsls	r0, r0, #8
    282a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    282c:	3202      	adds	r2, #2
    282e:	62e2      	str	r2, [r4, #44]	; 0x2c
    2830:	e790      	b.n	2754 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    2832:	0020      	movs	r0, r4
    2834:	69a3      	ldr	r3, [r4, #24]
    2836:	4798      	blx	r3
    2838:	e7b9      	b.n	27ae <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    283a:	7a63      	ldrb	r3, [r4, #9]
    283c:	2b01      	cmp	r3, #1
    283e:	d027      	beq.n	2890 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2840:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    2842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2844:	05db      	lsls	r3, r3, #23
    2846:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    2848:	b2da      	uxtb	r2, r3
    284a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    284c:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    284e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2850:	1c51      	adds	r1, r2, #1
    2852:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2854:	79a1      	ldrb	r1, [r4, #6]
    2856:	2901      	cmp	r1, #1
    2858:	d033      	beq.n	28c2 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    285a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    285c:	3b01      	subs	r3, #1
    285e:	b29b      	uxth	r3, r3
    2860:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    2862:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2864:	b29b      	uxth	r3, r3
    2866:	2b00      	cmp	r3, #0
    2868:	d1a4      	bne.n	27b4 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    286a:	2200      	movs	r2, #0
    286c:	3338      	adds	r3, #56	; 0x38
    286e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2870:	3b34      	subs	r3, #52	; 0x34
    2872:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2874:	7a63      	ldrb	r3, [r4, #9]
    2876:	2b02      	cmp	r3, #2
    2878:	d029      	beq.n	28ce <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    287a:	7a63      	ldrb	r3, [r4, #9]
    287c:	2b00      	cmp	r3, #0
    287e:	d000      	beq.n	2882 <_spi_interrupt_handler+0x172>
    2880:	e798      	b.n	27b4 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2882:	07bb      	lsls	r3, r7, #30
    2884:	d400      	bmi.n	2888 <_spi_interrupt_handler+0x178>
    2886:	e795      	b.n	27b4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2888:	0020      	movs	r0, r4
    288a:	6923      	ldr	r3, [r4, #16]
    288c:	4798      	blx	r3
    288e:	e791      	b.n	27b4 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2890:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    2892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2894:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2896:	3b01      	subs	r3, #1
    2898:	b29b      	uxth	r3, r3
    289a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    289c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    289e:	b29b      	uxth	r3, r3
    28a0:	2b00      	cmp	r3, #0
    28a2:	d000      	beq.n	28a6 <_spi_interrupt_handler+0x196>
    28a4:	e786      	b.n	27b4 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    28a6:	3304      	adds	r3, #4
    28a8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    28aa:	2200      	movs	r2, #0
    28ac:	3334      	adds	r3, #52	; 0x34
    28ae:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    28b0:	3b35      	subs	r3, #53	; 0x35
    28b2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    28b4:	07fb      	lsls	r3, r7, #31
    28b6:	d400      	bmi.n	28ba <_spi_interrupt_handler+0x1aa>
    28b8:	e77c      	b.n	27b4 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    28ba:	0020      	movs	r0, r4
    28bc:	68e3      	ldr	r3, [r4, #12]
    28be:	4798      	blx	r3
    28c0:	e778      	b.n	27b4 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    28c2:	0a1b      	lsrs	r3, r3, #8
    28c4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    28c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28c8:	3301      	adds	r3, #1
    28ca:	62a3      	str	r3, [r4, #40]	; 0x28
    28cc:	e7c5      	b.n	285a <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    28ce:	077b      	lsls	r3, r7, #29
    28d0:	d400      	bmi.n	28d4 <_spi_interrupt_handler+0x1c4>
    28d2:	e76f      	b.n	27b4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    28d4:	0020      	movs	r0, r4
    28d6:	6963      	ldr	r3, [r4, #20]
    28d8:	4798      	blx	r3
    28da:	e76b      	b.n	27b4 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    28dc:	0020      	movs	r0, r4
    28de:	69e3      	ldr	r3, [r4, #28]
    28e0:	4798      	blx	r3
    28e2:	e77b      	b.n	27dc <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    28e4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    28e6:	2b01      	cmp	r3, #1
    28e8:	d000      	beq.n	28ec <_spi_interrupt_handler+0x1dc>
    28ea:	e786      	b.n	27fa <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    28ec:	79e3      	ldrb	r3, [r4, #7]
    28ee:	2b00      	cmp	r3, #0
    28f0:	d000      	beq.n	28f4 <_spi_interrupt_handler+0x1e4>
    28f2:	e782      	b.n	27fa <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    28f4:	3302      	adds	r3, #2
    28f6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    28f8:	3301      	adds	r3, #1
    28fa:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    28fc:	2200      	movs	r2, #0
    28fe:	3335      	adds	r3, #53	; 0x35
    2900:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    2902:	07fb      	lsls	r3, r7, #31
    2904:	d400      	bmi.n	2908 <_spi_interrupt_handler+0x1f8>
    2906:	e76d      	b.n	27e4 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2908:	0020      	movs	r0, r4
    290a:	68e3      	ldr	r3, [r4, #12]
    290c:	4798      	blx	r3
    290e:	e769      	b.n	27e4 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    2910:	0020      	movs	r0, r4
    2912:	6a23      	ldr	r3, [r4, #32]
    2914:	4798      	blx	r3
    2916:	e770      	b.n	27fa <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2918:	2380      	movs	r3, #128	; 0x80
    291a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    291c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    291e:	067b      	lsls	r3, r7, #25
    2920:	d400      	bmi.n	2924 <_spi_interrupt_handler+0x214>
    2922:	e76e      	b.n	2802 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2924:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2926:	0020      	movs	r0, r4
    2928:	4798      	blx	r3
}
    292a:	e76a      	b.n	2802 <_spi_interrupt_handler+0xf2>
    292c:	200006a4 	.word	0x200006a4
    2930:	200006a0 	.word	0x200006a0

00002934 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2934:	4770      	bx	lr
	...

00002938 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2938:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    293a:	4b0b      	ldr	r3, [pc, #44]	; (2968 <_sercom_set_handler+0x30>)
    293c:	781b      	ldrb	r3, [r3, #0]
    293e:	2b00      	cmp	r3, #0
    2940:	d10e      	bne.n	2960 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2942:	4c0a      	ldr	r4, [pc, #40]	; (296c <_sercom_set_handler+0x34>)
    2944:	4d0a      	ldr	r5, [pc, #40]	; (2970 <_sercom_set_handler+0x38>)
    2946:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    2948:	4b0a      	ldr	r3, [pc, #40]	; (2974 <_sercom_set_handler+0x3c>)
    294a:	2200      	movs	r2, #0
    294c:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    294e:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    2950:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2952:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    2954:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2956:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
    2958:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
    295a:	3201      	adds	r2, #1
    295c:	4b02      	ldr	r3, [pc, #8]	; (2968 <_sercom_set_handler+0x30>)
    295e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2960:	0080      	lsls	r0, r0, #2
    2962:	4b02      	ldr	r3, [pc, #8]	; (296c <_sercom_set_handler+0x34>)
    2964:	50c1      	str	r1, [r0, r3]
}
    2966:	bd30      	pop	{r4, r5, pc}
    2968:	20000114 	.word	0x20000114
    296c:	20000118 	.word	0x20000118
    2970:	00002935 	.word	0x00002935
    2974:	200006a4 	.word	0x200006a4

00002978 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2978:	b510      	push	{r4, lr}
    297a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    297c:	ac01      	add	r4, sp, #4
    297e:	2309      	movs	r3, #9
    2980:	7023      	strb	r3, [r4, #0]
    2982:	3301      	adds	r3, #1
    2984:	7063      	strb	r3, [r4, #1]
    2986:	3301      	adds	r3, #1
    2988:	70a3      	strb	r3, [r4, #2]
    298a:	3301      	adds	r3, #1
    298c:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    298e:	4b02      	ldr	r3, [pc, #8]	; (2998 <_sercom_get_interrupt_vector+0x20>)
    2990:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2992:	5620      	ldrsb	r0, [r4, r0]
}
    2994:	b002      	add	sp, #8
    2996:	bd10      	pop	{r4, pc}
    2998:	00000e81 	.word	0x00000e81

0000299c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    299c:	b510      	push	{r4, lr}
    299e:	4b02      	ldr	r3, [pc, #8]	; (29a8 <SERCOM0_Handler+0xc>)
    29a0:	681b      	ldr	r3, [r3, #0]
    29a2:	2000      	movs	r0, #0
    29a4:	4798      	blx	r3
    29a6:	bd10      	pop	{r4, pc}
    29a8:	20000118 	.word	0x20000118

000029ac <SERCOM1_Handler>:
    29ac:	b510      	push	{r4, lr}
    29ae:	4b02      	ldr	r3, [pc, #8]	; (29b8 <SERCOM1_Handler+0xc>)
    29b0:	685b      	ldr	r3, [r3, #4]
    29b2:	2001      	movs	r0, #1
    29b4:	4798      	blx	r3
    29b6:	bd10      	pop	{r4, pc}
    29b8:	20000118 	.word	0x20000118

000029bc <SERCOM2_Handler>:
    29bc:	b510      	push	{r4, lr}
    29be:	4b02      	ldr	r3, [pc, #8]	; (29c8 <SERCOM2_Handler+0xc>)
    29c0:	689b      	ldr	r3, [r3, #8]
    29c2:	2002      	movs	r0, #2
    29c4:	4798      	blx	r3
    29c6:	bd10      	pop	{r4, pc}
    29c8:	20000118 	.word	0x20000118

000029cc <SERCOM3_Handler>:
    29cc:	b510      	push	{r4, lr}
    29ce:	4b02      	ldr	r3, [pc, #8]	; (29d8 <SERCOM3_Handler+0xc>)
    29d0:	68db      	ldr	r3, [r3, #12]
    29d2:	2003      	movs	r0, #3
    29d4:	4798      	blx	r3
    29d6:	bd10      	pop	{r4, pc}
    29d8:	20000118 	.word	0x20000118

000029dc <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    29dc:	4770      	bx	lr
	...

000029e0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    29e0:	4b0c      	ldr	r3, [pc, #48]	; (2a14 <cpu_irq_enter_critical+0x34>)
    29e2:	681b      	ldr	r3, [r3, #0]
    29e4:	2b00      	cmp	r3, #0
    29e6:	d106      	bne.n	29f6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    29e8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    29ec:	2b00      	cmp	r3, #0
    29ee:	d007      	beq.n	2a00 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    29f0:	2200      	movs	r2, #0
    29f2:	4b09      	ldr	r3, [pc, #36]	; (2a18 <cpu_irq_enter_critical+0x38>)
    29f4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    29f6:	4a07      	ldr	r2, [pc, #28]	; (2a14 <cpu_irq_enter_critical+0x34>)
    29f8:	6813      	ldr	r3, [r2, #0]
    29fa:	3301      	adds	r3, #1
    29fc:	6013      	str	r3, [r2, #0]
}
    29fe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2a00:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2a02:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2a06:	2200      	movs	r2, #0
    2a08:	4b04      	ldr	r3, [pc, #16]	; (2a1c <cpu_irq_enter_critical+0x3c>)
    2a0a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2a0c:	3201      	adds	r2, #1
    2a0e:	4b02      	ldr	r3, [pc, #8]	; (2a18 <cpu_irq_enter_critical+0x38>)
    2a10:	701a      	strb	r2, [r3, #0]
    2a12:	e7f0      	b.n	29f6 <cpu_irq_enter_critical+0x16>
    2a14:	20000128 	.word	0x20000128
    2a18:	2000012c 	.word	0x2000012c
    2a1c:	2000001c 	.word	0x2000001c

00002a20 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2a20:	4b08      	ldr	r3, [pc, #32]	; (2a44 <cpu_irq_leave_critical+0x24>)
    2a22:	681a      	ldr	r2, [r3, #0]
    2a24:	3a01      	subs	r2, #1
    2a26:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d109      	bne.n	2a42 <cpu_irq_leave_critical+0x22>
    2a2e:	4b06      	ldr	r3, [pc, #24]	; (2a48 <cpu_irq_leave_critical+0x28>)
    2a30:	781b      	ldrb	r3, [r3, #0]
    2a32:	2b00      	cmp	r3, #0
    2a34:	d005      	beq.n	2a42 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2a36:	2201      	movs	r2, #1
    2a38:	4b04      	ldr	r3, [pc, #16]	; (2a4c <cpu_irq_leave_critical+0x2c>)
    2a3a:	701a      	strb	r2, [r3, #0]
    2a3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2a40:	b662      	cpsie	i
	}
}
    2a42:	4770      	bx	lr
    2a44:	20000128 	.word	0x20000128
    2a48:	2000012c 	.word	0x2000012c
    2a4c:	2000001c 	.word	0x2000001c

00002a50 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2a50:	b510      	push	{r4, lr}
	switch (clock_source) {
    2a52:	2808      	cmp	r0, #8
    2a54:	d803      	bhi.n	2a5e <system_clock_source_get_hz+0xe>
    2a56:	0080      	lsls	r0, r0, #2
    2a58:	4b1b      	ldr	r3, [pc, #108]	; (2ac8 <system_clock_source_get_hz+0x78>)
    2a5a:	581b      	ldr	r3, [r3, r0]
    2a5c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2a5e:	2000      	movs	r0, #0
    2a60:	e030      	b.n	2ac4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2a62:	4b1a      	ldr	r3, [pc, #104]	; (2acc <system_clock_source_get_hz+0x7c>)
    2a64:	6918      	ldr	r0, [r3, #16]
    2a66:	e02d      	b.n	2ac4 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2a68:	4b19      	ldr	r3, [pc, #100]	; (2ad0 <system_clock_source_get_hz+0x80>)
    2a6a:	6a1b      	ldr	r3, [r3, #32]
    2a6c:	059b      	lsls	r3, r3, #22
    2a6e:	0f9b      	lsrs	r3, r3, #30
    2a70:	4818      	ldr	r0, [pc, #96]	; (2ad4 <system_clock_source_get_hz+0x84>)
    2a72:	40d8      	lsrs	r0, r3
    2a74:	e026      	b.n	2ac4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2a76:	4b15      	ldr	r3, [pc, #84]	; (2acc <system_clock_source_get_hz+0x7c>)
    2a78:	6958      	ldr	r0, [r3, #20]
    2a7a:	e023      	b.n	2ac4 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2a7c:	4b13      	ldr	r3, [pc, #76]	; (2acc <system_clock_source_get_hz+0x7c>)
    2a7e:	681b      	ldr	r3, [r3, #0]
			return 0;
    2a80:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2a82:	079b      	lsls	r3, r3, #30
    2a84:	d51e      	bpl.n	2ac4 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2a86:	4912      	ldr	r1, [pc, #72]	; (2ad0 <system_clock_source_get_hz+0x80>)
    2a88:	2210      	movs	r2, #16
    2a8a:	68cb      	ldr	r3, [r1, #12]
    2a8c:	421a      	tst	r2, r3
    2a8e:	d0fc      	beq.n	2a8a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2a90:	4b0e      	ldr	r3, [pc, #56]	; (2acc <system_clock_source_get_hz+0x7c>)
    2a92:	681b      	ldr	r3, [r3, #0]
    2a94:	075b      	lsls	r3, r3, #29
    2a96:	d401      	bmi.n	2a9c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2a98:	480f      	ldr	r0, [pc, #60]	; (2ad8 <system_clock_source_get_hz+0x88>)
    2a9a:	e013      	b.n	2ac4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2a9c:	2000      	movs	r0, #0
    2a9e:	4b0f      	ldr	r3, [pc, #60]	; (2adc <system_clock_source_get_hz+0x8c>)
    2aa0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2aa2:	4b0a      	ldr	r3, [pc, #40]	; (2acc <system_clock_source_get_hz+0x7c>)
    2aa4:	689b      	ldr	r3, [r3, #8]
    2aa6:	041b      	lsls	r3, r3, #16
    2aa8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2aaa:	4358      	muls	r0, r3
    2aac:	e00a      	b.n	2ac4 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2aae:	2350      	movs	r3, #80	; 0x50
    2ab0:	4a07      	ldr	r2, [pc, #28]	; (2ad0 <system_clock_source_get_hz+0x80>)
    2ab2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2ab4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2ab6:	075b      	lsls	r3, r3, #29
    2ab8:	d504      	bpl.n	2ac4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2aba:	4b04      	ldr	r3, [pc, #16]	; (2acc <system_clock_source_get_hz+0x7c>)
    2abc:	68d8      	ldr	r0, [r3, #12]
    2abe:	e001      	b.n	2ac4 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2ac0:	2080      	movs	r0, #128	; 0x80
    2ac2:	0200      	lsls	r0, r0, #8
	}
}
    2ac4:	bd10      	pop	{r4, pc}
    2ac6:	46c0      	nop			; (mov r8, r8)
    2ac8:	000043ac 	.word	0x000043ac
    2acc:	20000130 	.word	0x20000130
    2ad0:	40000800 	.word	0x40000800
    2ad4:	007a1200 	.word	0x007a1200
    2ad8:	02dc6c00 	.word	0x02dc6c00
    2adc:	0000319d 	.word	0x0000319d

00002ae0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2ae0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2ae2:	490c      	ldr	r1, [pc, #48]	; (2b14 <system_clock_source_osc8m_set_config+0x34>)
    2ae4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2ae6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2ae8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2aea:	7840      	ldrb	r0, [r0, #1]
    2aec:	2201      	movs	r2, #1
    2aee:	4010      	ands	r0, r2
    2af0:	0180      	lsls	r0, r0, #6
    2af2:	2640      	movs	r6, #64	; 0x40
    2af4:	43b3      	bics	r3, r6
    2af6:	4303      	orrs	r3, r0
    2af8:	402a      	ands	r2, r5
    2afa:	01d2      	lsls	r2, r2, #7
    2afc:	2080      	movs	r0, #128	; 0x80
    2afe:	4383      	bics	r3, r0
    2b00:	4313      	orrs	r3, r2
    2b02:	2203      	movs	r2, #3
    2b04:	4022      	ands	r2, r4
    2b06:	0212      	lsls	r2, r2, #8
    2b08:	4803      	ldr	r0, [pc, #12]	; (2b18 <system_clock_source_osc8m_set_config+0x38>)
    2b0a:	4003      	ands	r3, r0
    2b0c:	4313      	orrs	r3, r2
    2b0e:	620b      	str	r3, [r1, #32]
}
    2b10:	bd70      	pop	{r4, r5, r6, pc}
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	40000800 	.word	0x40000800
    2b18:	fffffcff 	.word	0xfffffcff

00002b1c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b1e:	46ce      	mov	lr, r9
    2b20:	4647      	mov	r7, r8
    2b22:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2b24:	4b19      	ldr	r3, [pc, #100]	; (2b8c <system_clock_source_osc32k_set_config+0x70>)
    2b26:	4699      	mov	r9, r3
    2b28:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2b2a:	7841      	ldrb	r1, [r0, #1]
    2b2c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2b2e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2b30:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2b32:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2b34:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2b36:	7880      	ldrb	r0, [r0, #2]
    2b38:	2101      	movs	r1, #1
    2b3a:	4008      	ands	r0, r1
    2b3c:	0080      	lsls	r0, r0, #2
    2b3e:	2204      	movs	r2, #4
    2b40:	4393      	bics	r3, r2
    2b42:	4303      	orrs	r3, r0
    2b44:	4660      	mov	r0, ip
    2b46:	4008      	ands	r0, r1
    2b48:	00c0      	lsls	r0, r0, #3
    2b4a:	3204      	adds	r2, #4
    2b4c:	4393      	bics	r3, r2
    2b4e:	4303      	orrs	r3, r0
    2b50:	0038      	movs	r0, r7
    2b52:	4008      	ands	r0, r1
    2b54:	0180      	lsls	r0, r0, #6
    2b56:	2740      	movs	r7, #64	; 0x40
    2b58:	43bb      	bics	r3, r7
    2b5a:	4303      	orrs	r3, r0
    2b5c:	0030      	movs	r0, r6
    2b5e:	4008      	ands	r0, r1
    2b60:	01c0      	lsls	r0, r0, #7
    2b62:	2680      	movs	r6, #128	; 0x80
    2b64:	43b3      	bics	r3, r6
    2b66:	4303      	orrs	r3, r0
    2b68:	2007      	movs	r0, #7
    2b6a:	4005      	ands	r5, r0
    2b6c:	022d      	lsls	r5, r5, #8
    2b6e:	4808      	ldr	r0, [pc, #32]	; (2b90 <system_clock_source_osc32k_set_config+0x74>)
    2b70:	4003      	ands	r3, r0
    2b72:	432b      	orrs	r3, r5
    2b74:	4021      	ands	r1, r4
    2b76:	0309      	lsls	r1, r1, #12
    2b78:	4806      	ldr	r0, [pc, #24]	; (2b94 <system_clock_source_osc32k_set_config+0x78>)
    2b7a:	4003      	ands	r3, r0
    2b7c:	430b      	orrs	r3, r1
    2b7e:	464a      	mov	r2, r9
    2b80:	6193      	str	r3, [r2, #24]
}
    2b82:	bc0c      	pop	{r2, r3}
    2b84:	4690      	mov	r8, r2
    2b86:	4699      	mov	r9, r3
    2b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b8a:	46c0      	nop			; (mov r8, r8)
    2b8c:	40000800 	.word	0x40000800
    2b90:	fffff8ff 	.word	0xfffff8ff
    2b94:	ffffefff 	.word	0xffffefff

00002b98 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b9a:	46de      	mov	lr, fp
    2b9c:	4657      	mov	r7, sl
    2b9e:	464e      	mov	r6, r9
    2ba0:	4645      	mov	r5, r8
    2ba2:	b5e0      	push	{r5, r6, r7, lr}
    2ba4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2ba6:	4b26      	ldr	r3, [pc, #152]	; (2c40 <system_clock_source_xosc32k_set_config+0xa8>)
    2ba8:	469b      	mov	fp, r3
    2baa:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2bac:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2bae:	7800      	ldrb	r0, [r0, #0]
    2bb0:	4242      	negs	r2, r0
    2bb2:	4142      	adcs	r2, r0
    2bb4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2bb6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2bb8:	78ca      	ldrb	r2, [r1, #3]
    2bba:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2bbc:	790a      	ldrb	r2, [r1, #4]
    2bbe:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2bc0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2bc2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2bc4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2bc6:	688a      	ldr	r2, [r1, #8]
    2bc8:	491e      	ldr	r1, [pc, #120]	; (2c44 <system_clock_source_xosc32k_set_config+0xac>)
    2bca:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2bcc:	2101      	movs	r1, #1
    2bce:	464a      	mov	r2, r9
    2bd0:	0092      	lsls	r2, r2, #2
    2bd2:	4691      	mov	r9, r2
    2bd4:	2204      	movs	r2, #4
    2bd6:	4393      	bics	r3, r2
    2bd8:	464a      	mov	r2, r9
    2bda:	4313      	orrs	r3, r2
    2bdc:	4642      	mov	r2, r8
    2bde:	400a      	ands	r2, r1
    2be0:	00d2      	lsls	r2, r2, #3
    2be2:	4690      	mov	r8, r2
    2be4:	2208      	movs	r2, #8
    2be6:	4393      	bics	r3, r2
    2be8:	4642      	mov	r2, r8
    2bea:	4313      	orrs	r3, r2
    2bec:	4662      	mov	r2, ip
    2bee:	400a      	ands	r2, r1
    2bf0:	0112      	lsls	r2, r2, #4
    2bf2:	4694      	mov	ip, r2
    2bf4:	2210      	movs	r2, #16
    2bf6:	4393      	bics	r3, r2
    2bf8:	4662      	mov	r2, ip
    2bfa:	4313      	orrs	r3, r2
    2bfc:	4008      	ands	r0, r1
    2bfe:	0140      	lsls	r0, r0, #5
    2c00:	2220      	movs	r2, #32
    2c02:	4393      	bics	r3, r2
    2c04:	4303      	orrs	r3, r0
    2c06:	400f      	ands	r7, r1
    2c08:	01bf      	lsls	r7, r7, #6
    2c0a:	2040      	movs	r0, #64	; 0x40
    2c0c:	4383      	bics	r3, r0
    2c0e:	433b      	orrs	r3, r7
    2c10:	400e      	ands	r6, r1
    2c12:	01f6      	lsls	r6, r6, #7
    2c14:	3040      	adds	r0, #64	; 0x40
    2c16:	4383      	bics	r3, r0
    2c18:	4333      	orrs	r3, r6
    2c1a:	3879      	subs	r0, #121	; 0x79
    2c1c:	4005      	ands	r5, r0
    2c1e:	022d      	lsls	r5, r5, #8
    2c20:	4809      	ldr	r0, [pc, #36]	; (2c48 <system_clock_source_xosc32k_set_config+0xb0>)
    2c22:	4003      	ands	r3, r0
    2c24:	432b      	orrs	r3, r5
    2c26:	4021      	ands	r1, r4
    2c28:	0309      	lsls	r1, r1, #12
    2c2a:	4808      	ldr	r0, [pc, #32]	; (2c4c <system_clock_source_xosc32k_set_config+0xb4>)
    2c2c:	4003      	ands	r3, r0
    2c2e:	430b      	orrs	r3, r1
    2c30:	465a      	mov	r2, fp
    2c32:	8293      	strh	r3, [r2, #20]
}
    2c34:	bc3c      	pop	{r2, r3, r4, r5}
    2c36:	4690      	mov	r8, r2
    2c38:	4699      	mov	r9, r3
    2c3a:	46a2      	mov	sl, r4
    2c3c:	46ab      	mov	fp, r5
    2c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c40:	40000800 	.word	0x40000800
    2c44:	20000130 	.word	0x20000130
    2c48:	fffff8ff 	.word	0xfffff8ff
    2c4c:	ffffefff 	.word	0xffffefff

00002c50 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    2c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c52:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    2c54:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    2c56:	7d03      	ldrb	r3, [r0, #20]
    2c58:	2b01      	cmp	r3, #1
    2c5a:	d03b      	beq.n	2cd4 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    2c5c:	68ab      	ldr	r3, [r5, #8]
    2c5e:	0118      	lsls	r0, r3, #4
    2c60:	0021      	movs	r1, r4
    2c62:	4b20      	ldr	r3, [pc, #128]	; (2ce4 <system_clock_source_dpll_set_config+0x94>)
    2c64:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    2c66:	220f      	movs	r2, #15
    2c68:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    2c6a:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    2c6c:	782e      	ldrb	r6, [r5, #0]
    2c6e:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    2c70:	7869      	ldrb	r1, [r5, #1]
    2c72:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    2c74:	430e      	orrs	r6, r1
    2c76:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
    2c78:	491b      	ldr	r1, [pc, #108]	; (2ce8 <system_clock_source_dpll_set_config+0x98>)
    2c7a:	2744      	movs	r7, #68	; 0x44
    2c7c:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2c7e:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    2c80:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    2c82:	051b      	lsls	r3, r3, #20
    2c84:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2c86:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
    2c88:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    2c8a:	78ab      	ldrb	r3, [r5, #2]
    2c8c:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    2c8e:	78ee      	ldrb	r6, [r5, #3]
    2c90:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2c92:	4333      	orrs	r3, r6
    2c94:	792e      	ldrb	r6, [r5, #4]
    2c96:	00b6      	lsls	r6, r6, #2
    2c98:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    2c9a:	7caf      	ldrb	r7, [r5, #18]
    2c9c:	2603      	movs	r6, #3
    2c9e:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2ca0:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    2ca2:	8a2e      	ldrh	r6, [r5, #16]
    2ca4:	0436      	lsls	r6, r6, #16
    2ca6:	4f11      	ldr	r7, [pc, #68]	; (2cec <system_clock_source_dpll_set_config+0x9c>)
    2ca8:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2caa:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    2cac:	7cee      	ldrb	r6, [r5, #19]
    2cae:	0236      	lsls	r6, r6, #8
    2cb0:	27e0      	movs	r7, #224	; 0xe0
    2cb2:	00ff      	lsls	r7, r7, #3
    2cb4:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2cb6:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    2cb8:	7d2e      	ldrb	r6, [r5, #20]
    2cba:	0136      	lsls	r6, r6, #4
    2cbc:	2530      	movs	r5, #48	; 0x30
    2cbe:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2cc0:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
    2cc2:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    2cc4:	230f      	movs	r3, #15
    2cc6:	4398      	bics	r0, r3
    2cc8:	1880      	adds	r0, r0, r2
    2cca:	4344      	muls	r4, r0
    2ccc:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
    2cce:	4b08      	ldr	r3, [pc, #32]	; (2cf0 <system_clock_source_dpll_set_config+0xa0>)
    2cd0:	60dc      	str	r4, [r3, #12]
}
    2cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    2cd4:	8a01      	ldrh	r1, [r0, #16]
    2cd6:	3101      	adds	r1, #1
    2cd8:	0049      	lsls	r1, r1, #1
    2cda:	0020      	movs	r0, r4
    2cdc:	4b01      	ldr	r3, [pc, #4]	; (2ce4 <system_clock_source_dpll_set_config+0x94>)
    2cde:	4798      	blx	r3
    2ce0:	0004      	movs	r4, r0
    2ce2:	e7bb      	b.n	2c5c <system_clock_source_dpll_set_config+0xc>
    2ce4:	00003ec1 	.word	0x00003ec1
    2ce8:	40000800 	.word	0x40000800
    2cec:	07ff0000 	.word	0x07ff0000
    2cf0:	20000130 	.word	0x20000130

00002cf4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2cf4:	2808      	cmp	r0, #8
    2cf6:	d803      	bhi.n	2d00 <system_clock_source_enable+0xc>
    2cf8:	0080      	lsls	r0, r0, #2
    2cfa:	4b25      	ldr	r3, [pc, #148]	; (2d90 <system_clock_source_enable+0x9c>)
    2cfc:	581b      	ldr	r3, [r3, r0]
    2cfe:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2d00:	2017      	movs	r0, #23
    2d02:	e044      	b.n	2d8e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2d04:	4a23      	ldr	r2, [pc, #140]	; (2d94 <system_clock_source_enable+0xa0>)
    2d06:	6a13      	ldr	r3, [r2, #32]
    2d08:	2102      	movs	r1, #2
    2d0a:	430b      	orrs	r3, r1
    2d0c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2d0e:	2000      	movs	r0, #0
    2d10:	e03d      	b.n	2d8e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2d12:	4a20      	ldr	r2, [pc, #128]	; (2d94 <system_clock_source_enable+0xa0>)
    2d14:	6993      	ldr	r3, [r2, #24]
    2d16:	2102      	movs	r1, #2
    2d18:	430b      	orrs	r3, r1
    2d1a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2d1c:	2000      	movs	r0, #0
		break;
    2d1e:	e036      	b.n	2d8e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2d20:	4a1c      	ldr	r2, [pc, #112]	; (2d94 <system_clock_source_enable+0xa0>)
    2d22:	8a13      	ldrh	r3, [r2, #16]
    2d24:	2102      	movs	r1, #2
    2d26:	430b      	orrs	r3, r1
    2d28:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2d2a:	2000      	movs	r0, #0
		break;
    2d2c:	e02f      	b.n	2d8e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2d2e:	4a19      	ldr	r2, [pc, #100]	; (2d94 <system_clock_source_enable+0xa0>)
    2d30:	8a93      	ldrh	r3, [r2, #20]
    2d32:	2102      	movs	r1, #2
    2d34:	430b      	orrs	r3, r1
    2d36:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2d38:	2000      	movs	r0, #0
		break;
    2d3a:	e028      	b.n	2d8e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2d3c:	4916      	ldr	r1, [pc, #88]	; (2d98 <system_clock_source_enable+0xa4>)
    2d3e:	680b      	ldr	r3, [r1, #0]
    2d40:	2202      	movs	r2, #2
    2d42:	4313      	orrs	r3, r2
    2d44:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2d46:	4b13      	ldr	r3, [pc, #76]	; (2d94 <system_clock_source_enable+0xa0>)
    2d48:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d4a:	0019      	movs	r1, r3
    2d4c:	320e      	adds	r2, #14
    2d4e:	68cb      	ldr	r3, [r1, #12]
    2d50:	421a      	tst	r2, r3
    2d52:	d0fc      	beq.n	2d4e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2d54:	4a10      	ldr	r2, [pc, #64]	; (2d98 <system_clock_source_enable+0xa4>)
    2d56:	6891      	ldr	r1, [r2, #8]
    2d58:	4b0e      	ldr	r3, [pc, #56]	; (2d94 <system_clock_source_enable+0xa0>)
    2d5a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2d5c:	6852      	ldr	r2, [r2, #4]
    2d5e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2d60:	2200      	movs	r2, #0
    2d62:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d64:	0019      	movs	r1, r3
    2d66:	3210      	adds	r2, #16
    2d68:	68cb      	ldr	r3, [r1, #12]
    2d6a:	421a      	tst	r2, r3
    2d6c:	d0fc      	beq.n	2d68 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2d6e:	4b0a      	ldr	r3, [pc, #40]	; (2d98 <system_clock_source_enable+0xa4>)
    2d70:	681b      	ldr	r3, [r3, #0]
    2d72:	b29b      	uxth	r3, r3
    2d74:	4a07      	ldr	r2, [pc, #28]	; (2d94 <system_clock_source_enable+0xa0>)
    2d76:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2d78:	2000      	movs	r0, #0
    2d7a:	e008      	b.n	2d8e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2d7c:	4905      	ldr	r1, [pc, #20]	; (2d94 <system_clock_source_enable+0xa0>)
    2d7e:	2244      	movs	r2, #68	; 0x44
    2d80:	5c8b      	ldrb	r3, [r1, r2]
    2d82:	2002      	movs	r0, #2
    2d84:	4303      	orrs	r3, r0
    2d86:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2d88:	2000      	movs	r0, #0
		break;
    2d8a:	e000      	b.n	2d8e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2d8c:	2000      	movs	r0, #0
}
    2d8e:	4770      	bx	lr
    2d90:	000043d0 	.word	0x000043d0
    2d94:	40000800 	.word	0x40000800
    2d98:	20000130 	.word	0x20000130

00002d9c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d9e:	46ce      	mov	lr, r9
    2da0:	4647      	mov	r7, r8
    2da2:	b580      	push	{r7, lr}
    2da4:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2da6:	22c2      	movs	r2, #194	; 0xc2
    2da8:	00d2      	lsls	r2, r2, #3
    2daa:	4b58      	ldr	r3, [pc, #352]	; (2f0c <system_clock_init+0x170>)
    2dac:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2dae:	4a58      	ldr	r2, [pc, #352]	; (2f10 <system_clock_init+0x174>)
    2db0:	6853      	ldr	r3, [r2, #4]
    2db2:	211e      	movs	r1, #30
    2db4:	438b      	bics	r3, r1
    2db6:	391c      	subs	r1, #28
    2db8:	430b      	orrs	r3, r1
    2dba:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_4;
    2dbc:	2304      	movs	r3, #4
    2dbe:	466a      	mov	r2, sp
    2dc0:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2dc2:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2dc4:	4d53      	ldr	r5, [pc, #332]	; (2f14 <system_clock_init+0x178>)
    2dc6:	b2e0      	uxtb	r0, r4
    2dc8:	4669      	mov	r1, sp
    2dca:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2dcc:	3401      	adds	r4, #1
    2dce:	2c25      	cmp	r4, #37	; 0x25
    2dd0:	d1f9      	bne.n	2dc6 <system_clock_init+0x2a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2dd2:	a80c      	add	r0, sp, #48	; 0x30
    2dd4:	2300      	movs	r3, #0
    2dd6:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2dd8:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2dda:	2280      	movs	r2, #128	; 0x80
    2ddc:	0212      	lsls	r2, r2, #8
    2dde:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2de0:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2de2:	2201      	movs	r2, #1
    2de4:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    2de6:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2de8:	2106      	movs	r1, #6
    2dea:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2dec:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    2dee:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2df0:	4b49      	ldr	r3, [pc, #292]	; (2f18 <system_clock_init+0x17c>)
    2df2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2df4:	2005      	movs	r0, #5
    2df6:	4b49      	ldr	r3, [pc, #292]	; (2f1c <system_clock_init+0x180>)
    2df8:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2dfa:	4944      	ldr	r1, [pc, #272]	; (2f0c <system_clock_init+0x170>)
    2dfc:	2202      	movs	r2, #2
    2dfe:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2e00:	421a      	tst	r2, r3
    2e02:	d0fc      	beq.n	2dfe <system_clock_init+0x62>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2e04:	4b46      	ldr	r3, [pc, #280]	; (2f20 <system_clock_init+0x184>)
    2e06:	681b      	ldr	r3, [r3, #0]
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    2e08:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    2e0a:	4940      	ldr	r1, [pc, #256]	; (2f0c <system_clock_init+0x170>)
    2e0c:	698a      	ldr	r2, [r1, #24]
    2e0e:	0e5b      	lsrs	r3, r3, #25
    2e10:	041b      	lsls	r3, r3, #16
    2e12:	4844      	ldr	r0, [pc, #272]	; (2f24 <system_clock_init+0x188>)
    2e14:	4002      	ands	r2, r0
    2e16:	4313      	orrs	r3, r2
    2e18:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2e1a:	a80a      	add	r0, sp, #40	; 0x28
    2e1c:	2501      	movs	r5, #1
    2e1e:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    2e20:	7085      	strb	r5, [r0, #2]
	config->on_demand           = true;
    2e22:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2e24:	2307      	movs	r3, #7
    2e26:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    2e28:	2400      	movs	r4, #0
    2e2a:	7144      	strb	r4, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    2e2c:	70c5      	strb	r5, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2e2e:	4b3e      	ldr	r3, [pc, #248]	; (2f28 <system_clock_init+0x18c>)
    2e30:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2e32:	2004      	movs	r0, #4
    2e34:	4e39      	ldr	r6, [pc, #228]	; (2f1c <system_clock_init+0x180>)
    2e36:	47b0      	blx	r6
	config->run_in_standby  = false;
    2e38:	a809      	add	r0, sp, #36	; 0x24
    2e3a:	7044      	strb	r4, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2e3c:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    2e3e:	7084      	strb	r4, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2e40:	4b3a      	ldr	r3, [pc, #232]	; (2f2c <system_clock_init+0x190>)
    2e42:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2e44:	2006      	movs	r0, #6
    2e46:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2e48:	4b39      	ldr	r3, [pc, #228]	; (2f30 <system_clock_init+0x194>)
    2e4a:	4798      	blx	r3
	config->high_when_disabled = false;
    2e4c:	466b      	mov	r3, sp
    2e4e:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2e50:	2306      	movs	r3, #6
    2e52:	466a      	mov	r2, sp
    2e54:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    2e56:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2e58:	7254      	strb	r4, [r2, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2e5a:	2308      	movs	r3, #8
    2e5c:	4699      	mov	r9, r3
    2e5e:	9301      	str	r3, [sp, #4]
    2e60:	4669      	mov	r1, sp
    2e62:	2001      	movs	r0, #1
    2e64:	4b33      	ldr	r3, [pc, #204]	; (2f34 <system_clock_init+0x198>)
    2e66:	4698      	mov	r8, r3
    2e68:	4798      	blx	r3
    2e6a:	2001      	movs	r0, #1
    2e6c:	4f32      	ldr	r7, [pc, #200]	; (2f38 <system_clock_init+0x19c>)
    2e6e:	47b8      	blx	r7
	config->high_when_disabled = false;
    2e70:	466b      	mov	r3, sp
    2e72:	705c      	strb	r4, [r3, #1]
	config->output_enable      = false;
    2e74:	725c      	strb	r4, [r3, #9]
    2e76:	2304      	movs	r3, #4
    2e78:	466a      	mov	r2, sp
    2e7a:	7013      	strb	r3, [r2, #0]
    2e7c:	331c      	adds	r3, #28
    2e7e:	9301      	str	r3, [sp, #4]
    2e80:	7215      	strb	r5, [r2, #8]
    2e82:	4669      	mov	r1, sp
    2e84:	2002      	movs	r0, #2
    2e86:	47c0      	blx	r8
    2e88:	2002      	movs	r0, #2
    2e8a:	47b8      	blx	r7
	config->division_factor    = 1;
    2e8c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    2e8e:	466b      	mov	r3, sp
    2e90:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    2e92:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    2e94:	725c      	strb	r4, [r3, #9]
    2e96:	464a      	mov	r2, r9
    2e98:	701a      	strb	r2, [r3, #0]
    2e9a:	4669      	mov	r1, sp
    2e9c:	2003      	movs	r0, #3
    2e9e:	47c0      	blx	r8
    2ea0:	2003      	movs	r0, #3
    2ea2:	47b8      	blx	r7
	config->run_in_standby      = false;
    2ea4:	a803      	add	r0, sp, #12
    2ea6:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    2ea8:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    2eaa:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    2eac:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    2eae:	4b23      	ldr	r3, [pc, #140]	; (2f3c <system_clock_init+0x1a0>)
    2eb0:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
    2eb2:	2380      	movs	r3, #128	; 0x80
    2eb4:	021b      	lsls	r3, r3, #8
    2eb6:	60c3      	str	r3, [r0, #12]
	config->reference_divider   = 1;
    2eb8:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    2eba:	7504      	strb	r4, [r0, #20]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    2ebc:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    2ebe:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    2ec0:	7004      	strb	r4, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    2ec2:	4b1f      	ldr	r3, [pc, #124]	; (2f40 <system_clock_init+0x1a4>)
    2ec4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    2ec6:	2008      	movs	r0, #8
    2ec8:	47b0      	blx	r6
		return ((SYSCTRL->DPLLSTATUS.reg &
    2eca:	4810      	ldr	r0, [pc, #64]	; (2f0c <system_clock_init+0x170>)
    2ecc:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    2ece:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
    2ed0:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    2ed2:	4013      	ands	r3, r2
    2ed4:	2b03      	cmp	r3, #3
    2ed6:	d1fb      	bne.n	2ed0 <system_clock_init+0x134>
	PM->CPUSEL.reg = (uint32_t)divider;
    2ed8:	4a1a      	ldr	r2, [pc, #104]	; (2f44 <system_clock_init+0x1a8>)
    2eda:	2300      	movs	r3, #0
    2edc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2ede:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2ee0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2ee2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2ee4:	2201      	movs	r2, #1
    2ee6:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    2ee8:	466a      	mov	r2, sp
    2eea:	7053      	strb	r3, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2eec:	2206      	movs	r2, #6
    2eee:	4669      	mov	r1, sp
    2ef0:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    2ef2:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2ef4:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2ef6:	2000      	movs	r0, #0
    2ef8:	4b0e      	ldr	r3, [pc, #56]	; (2f34 <system_clock_init+0x198>)
    2efa:	4798      	blx	r3
    2efc:	2000      	movs	r0, #0
    2efe:	4b0e      	ldr	r3, [pc, #56]	; (2f38 <system_clock_init+0x19c>)
    2f00:	4798      	blx	r3
#endif
}
    2f02:	b011      	add	sp, #68	; 0x44
    2f04:	bc0c      	pop	{r2, r3}
    2f06:	4690      	mov	r8, r2
    2f08:	4699      	mov	r9, r3
    2f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f0c:	40000800 	.word	0x40000800
    2f10:	41004000 	.word	0x41004000
    2f14:	00003181 	.word	0x00003181
    2f18:	00002b99 	.word	0x00002b99
    2f1c:	00002cf5 	.word	0x00002cf5
    2f20:	00806024 	.word	0x00806024
    2f24:	ff80ffff 	.word	0xff80ffff
    2f28:	00002b1d 	.word	0x00002b1d
    2f2c:	00002ae1 	.word	0x00002ae1
    2f30:	00002f49 	.word	0x00002f49
    2f34:	00002f6d 	.word	0x00002f6d
    2f38:	00003025 	.word	0x00003025
    2f3c:	02dc6c00 	.word	0x02dc6c00
    2f40:	00002c51 	.word	0x00002c51
    2f44:	40000400 	.word	0x40000400

00002f48 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2f48:	4a06      	ldr	r2, [pc, #24]	; (2f64 <system_gclk_init+0x1c>)
    2f4a:	6993      	ldr	r3, [r2, #24]
    2f4c:	2108      	movs	r1, #8
    2f4e:	430b      	orrs	r3, r1
    2f50:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2f52:	2201      	movs	r2, #1
    2f54:	4b04      	ldr	r3, [pc, #16]	; (2f68 <system_gclk_init+0x20>)
    2f56:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2f58:	0019      	movs	r1, r3
    2f5a:	780b      	ldrb	r3, [r1, #0]
    2f5c:	4213      	tst	r3, r2
    2f5e:	d1fc      	bne.n	2f5a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2f60:	4770      	bx	lr
    2f62:	46c0      	nop			; (mov r8, r8)
    2f64:	40000400 	.word	0x40000400
    2f68:	40000c00 	.word	0x40000c00

00002f6c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2f6c:	b570      	push	{r4, r5, r6, lr}
    2f6e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2f70:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2f72:	780d      	ldrb	r5, [r1, #0]
    2f74:	022d      	lsls	r5, r5, #8
    2f76:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2f78:	784b      	ldrb	r3, [r1, #1]
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	d002      	beq.n	2f84 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2f7e:	2380      	movs	r3, #128	; 0x80
    2f80:	02db      	lsls	r3, r3, #11
    2f82:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2f84:	7a4b      	ldrb	r3, [r1, #9]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d002      	beq.n	2f90 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2f8a:	2380      	movs	r3, #128	; 0x80
    2f8c:	031b      	lsls	r3, r3, #12
    2f8e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2f90:	6848      	ldr	r0, [r1, #4]
    2f92:	2801      	cmp	r0, #1
    2f94:	d910      	bls.n	2fb8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2f96:	1e43      	subs	r3, r0, #1
    2f98:	4218      	tst	r0, r3
    2f9a:	d134      	bne.n	3006 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2f9c:	2802      	cmp	r0, #2
    2f9e:	d930      	bls.n	3002 <system_gclk_gen_set_config+0x96>
    2fa0:	2302      	movs	r3, #2
    2fa2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2fa4:	3201      	adds	r2, #1
						mask <<= 1) {
    2fa6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2fa8:	4298      	cmp	r0, r3
    2faa:	d8fb      	bhi.n	2fa4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2fac:	0212      	lsls	r2, r2, #8
    2fae:	4332      	orrs	r2, r6
    2fb0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2fb2:	2380      	movs	r3, #128	; 0x80
    2fb4:	035b      	lsls	r3, r3, #13
    2fb6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2fb8:	7a0b      	ldrb	r3, [r1, #8]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d002      	beq.n	2fc4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2fbe:	2380      	movs	r3, #128	; 0x80
    2fc0:	039b      	lsls	r3, r3, #14
    2fc2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2fc4:	4a13      	ldr	r2, [pc, #76]	; (3014 <system_gclk_gen_set_config+0xa8>)
    2fc6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2fc8:	b25b      	sxtb	r3, r3
    2fca:	2b00      	cmp	r3, #0
    2fcc:	dbfb      	blt.n	2fc6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2fce:	4b12      	ldr	r3, [pc, #72]	; (3018 <system_gclk_gen_set_config+0xac>)
    2fd0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2fd2:	4b12      	ldr	r3, [pc, #72]	; (301c <system_gclk_gen_set_config+0xb0>)
    2fd4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2fd6:	4a0f      	ldr	r2, [pc, #60]	; (3014 <system_gclk_gen_set_config+0xa8>)
    2fd8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2fda:	b25b      	sxtb	r3, r3
    2fdc:	2b00      	cmp	r3, #0
    2fde:	dbfb      	blt.n	2fd8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2fe0:	4b0c      	ldr	r3, [pc, #48]	; (3014 <system_gclk_gen_set_config+0xa8>)
    2fe2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2fe4:	001a      	movs	r2, r3
    2fe6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2fe8:	b25b      	sxtb	r3, r3
    2fea:	2b00      	cmp	r3, #0
    2fec:	dbfb      	blt.n	2fe6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2fee:	4a09      	ldr	r2, [pc, #36]	; (3014 <system_gclk_gen_set_config+0xa8>)
    2ff0:	6853      	ldr	r3, [r2, #4]
    2ff2:	2180      	movs	r1, #128	; 0x80
    2ff4:	0249      	lsls	r1, r1, #9
    2ff6:	400b      	ands	r3, r1
    2ff8:	431d      	orrs	r5, r3
    2ffa:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2ffc:	4b08      	ldr	r3, [pc, #32]	; (3020 <system_gclk_gen_set_config+0xb4>)
    2ffe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3000:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3002:	2200      	movs	r2, #0
    3004:	e7d2      	b.n	2fac <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3006:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3008:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    300a:	2380      	movs	r3, #128	; 0x80
    300c:	029b      	lsls	r3, r3, #10
    300e:	431d      	orrs	r5, r3
    3010:	e7d2      	b.n	2fb8 <system_gclk_gen_set_config+0x4c>
    3012:	46c0      	nop			; (mov r8, r8)
    3014:	40000c00 	.word	0x40000c00
    3018:	000029e1 	.word	0x000029e1
    301c:	40000c08 	.word	0x40000c08
    3020:	00002a21 	.word	0x00002a21

00003024 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3024:	b510      	push	{r4, lr}
    3026:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3028:	4a0b      	ldr	r2, [pc, #44]	; (3058 <system_gclk_gen_enable+0x34>)
    302a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    302c:	b25b      	sxtb	r3, r3
    302e:	2b00      	cmp	r3, #0
    3030:	dbfb      	blt.n	302a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3032:	4b0a      	ldr	r3, [pc, #40]	; (305c <system_gclk_gen_enable+0x38>)
    3034:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3036:	4b0a      	ldr	r3, [pc, #40]	; (3060 <system_gclk_gen_enable+0x3c>)
    3038:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    303a:	4a07      	ldr	r2, [pc, #28]	; (3058 <system_gclk_gen_enable+0x34>)
    303c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    303e:	b25b      	sxtb	r3, r3
    3040:	2b00      	cmp	r3, #0
    3042:	dbfb      	blt.n	303c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3044:	4a04      	ldr	r2, [pc, #16]	; (3058 <system_gclk_gen_enable+0x34>)
    3046:	6851      	ldr	r1, [r2, #4]
    3048:	2380      	movs	r3, #128	; 0x80
    304a:	025b      	lsls	r3, r3, #9
    304c:	430b      	orrs	r3, r1
    304e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3050:	4b04      	ldr	r3, [pc, #16]	; (3064 <system_gclk_gen_enable+0x40>)
    3052:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3054:	bd10      	pop	{r4, pc}
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	40000c00 	.word	0x40000c00
    305c:	000029e1 	.word	0x000029e1
    3060:	40000c04 	.word	0x40000c04
    3064:	00002a21 	.word	0x00002a21

00003068 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3068:	b570      	push	{r4, r5, r6, lr}
    306a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    306c:	4a1a      	ldr	r2, [pc, #104]	; (30d8 <system_gclk_gen_get_hz+0x70>)
    306e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3070:	b25b      	sxtb	r3, r3
    3072:	2b00      	cmp	r3, #0
    3074:	dbfb      	blt.n	306e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3076:	4b19      	ldr	r3, [pc, #100]	; (30dc <system_gclk_gen_get_hz+0x74>)
    3078:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    307a:	4b19      	ldr	r3, [pc, #100]	; (30e0 <system_gclk_gen_get_hz+0x78>)
    307c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    307e:	4a16      	ldr	r2, [pc, #88]	; (30d8 <system_gclk_gen_get_hz+0x70>)
    3080:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3082:	b25b      	sxtb	r3, r3
    3084:	2b00      	cmp	r3, #0
    3086:	dbfb      	blt.n	3080 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3088:	4e13      	ldr	r6, [pc, #76]	; (30d8 <system_gclk_gen_get_hz+0x70>)
    308a:	6870      	ldr	r0, [r6, #4]
    308c:	04c0      	lsls	r0, r0, #19
    308e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3090:	4b14      	ldr	r3, [pc, #80]	; (30e4 <system_gclk_gen_get_hz+0x7c>)
    3092:	4798      	blx	r3
    3094:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3096:	4b12      	ldr	r3, [pc, #72]	; (30e0 <system_gclk_gen_get_hz+0x78>)
    3098:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    309a:	6876      	ldr	r6, [r6, #4]
    309c:	02f6      	lsls	r6, r6, #11
    309e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    30a0:	4b11      	ldr	r3, [pc, #68]	; (30e8 <system_gclk_gen_get_hz+0x80>)
    30a2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30a4:	4a0c      	ldr	r2, [pc, #48]	; (30d8 <system_gclk_gen_get_hz+0x70>)
    30a6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    30a8:	b25b      	sxtb	r3, r3
    30aa:	2b00      	cmp	r3, #0
    30ac:	dbfb      	blt.n	30a6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    30ae:	4b0a      	ldr	r3, [pc, #40]	; (30d8 <system_gclk_gen_get_hz+0x70>)
    30b0:	689c      	ldr	r4, [r3, #8]
    30b2:	0224      	lsls	r4, r4, #8
    30b4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    30b6:	4b0d      	ldr	r3, [pc, #52]	; (30ec <system_gclk_gen_get_hz+0x84>)
    30b8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    30ba:	2e00      	cmp	r6, #0
    30bc:	d107      	bne.n	30ce <system_gclk_gen_get_hz+0x66>
    30be:	2c01      	cmp	r4, #1
    30c0:	d907      	bls.n	30d2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    30c2:	0021      	movs	r1, r4
    30c4:	0028      	movs	r0, r5
    30c6:	4b0a      	ldr	r3, [pc, #40]	; (30f0 <system_gclk_gen_get_hz+0x88>)
    30c8:	4798      	blx	r3
    30ca:	0005      	movs	r5, r0
    30cc:	e001      	b.n	30d2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    30ce:	3401      	adds	r4, #1
    30d0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    30d2:	0028      	movs	r0, r5
    30d4:	bd70      	pop	{r4, r5, r6, pc}
    30d6:	46c0      	nop			; (mov r8, r8)
    30d8:	40000c00 	.word	0x40000c00
    30dc:	000029e1 	.word	0x000029e1
    30e0:	40000c04 	.word	0x40000c04
    30e4:	00002a51 	.word	0x00002a51
    30e8:	40000c08 	.word	0x40000c08
    30ec:	00002a21 	.word	0x00002a21
    30f0:	00003ec1 	.word	0x00003ec1

000030f4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    30f4:	b510      	push	{r4, lr}
    30f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    30f8:	4b06      	ldr	r3, [pc, #24]	; (3114 <system_gclk_chan_enable+0x20>)
    30fa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    30fc:	4b06      	ldr	r3, [pc, #24]	; (3118 <system_gclk_chan_enable+0x24>)
    30fe:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3100:	4a06      	ldr	r2, [pc, #24]	; (311c <system_gclk_chan_enable+0x28>)
    3102:	8853      	ldrh	r3, [r2, #2]
    3104:	2180      	movs	r1, #128	; 0x80
    3106:	01c9      	lsls	r1, r1, #7
    3108:	430b      	orrs	r3, r1
    310a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    310c:	4b04      	ldr	r3, [pc, #16]	; (3120 <system_gclk_chan_enable+0x2c>)
    310e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3110:	bd10      	pop	{r4, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	000029e1 	.word	0x000029e1
    3118:	40000c02 	.word	0x40000c02
    311c:	40000c00 	.word	0x40000c00
    3120:	00002a21 	.word	0x00002a21

00003124 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3124:	b510      	push	{r4, lr}
    3126:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3128:	4b0f      	ldr	r3, [pc, #60]	; (3168 <system_gclk_chan_disable+0x44>)
    312a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    312c:	4b0f      	ldr	r3, [pc, #60]	; (316c <system_gclk_chan_disable+0x48>)
    312e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3130:	4a0f      	ldr	r2, [pc, #60]	; (3170 <system_gclk_chan_disable+0x4c>)
    3132:	8853      	ldrh	r3, [r2, #2]
    3134:	051b      	lsls	r3, r3, #20
    3136:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3138:	8853      	ldrh	r3, [r2, #2]
    313a:	490e      	ldr	r1, [pc, #56]	; (3174 <system_gclk_chan_disable+0x50>)
    313c:	400b      	ands	r3, r1
    313e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3140:	8853      	ldrh	r3, [r2, #2]
    3142:	490d      	ldr	r1, [pc, #52]	; (3178 <system_gclk_chan_disable+0x54>)
    3144:	400b      	ands	r3, r1
    3146:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3148:	0011      	movs	r1, r2
    314a:	2280      	movs	r2, #128	; 0x80
    314c:	01d2      	lsls	r2, r2, #7
    314e:	884b      	ldrh	r3, [r1, #2]
    3150:	4213      	tst	r3, r2
    3152:	d1fc      	bne.n	314e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3154:	4906      	ldr	r1, [pc, #24]	; (3170 <system_gclk_chan_disable+0x4c>)
    3156:	884a      	ldrh	r2, [r1, #2]
    3158:	0203      	lsls	r3, r0, #8
    315a:	4806      	ldr	r0, [pc, #24]	; (3174 <system_gclk_chan_disable+0x50>)
    315c:	4002      	ands	r2, r0
    315e:	4313      	orrs	r3, r2
    3160:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3162:	4b06      	ldr	r3, [pc, #24]	; (317c <system_gclk_chan_disable+0x58>)
    3164:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3166:	bd10      	pop	{r4, pc}
    3168:	000029e1 	.word	0x000029e1
    316c:	40000c02 	.word	0x40000c02
    3170:	40000c00 	.word	0x40000c00
    3174:	fffff0ff 	.word	0xfffff0ff
    3178:	ffffbfff 	.word	0xffffbfff
    317c:	00002a21 	.word	0x00002a21

00003180 <system_gclk_chan_set_config>:
{
    3180:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3182:	780c      	ldrb	r4, [r1, #0]
    3184:	0224      	lsls	r4, r4, #8
    3186:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3188:	4b02      	ldr	r3, [pc, #8]	; (3194 <system_gclk_chan_set_config+0x14>)
    318a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    318c:	b2a4      	uxth	r4, r4
    318e:	4b02      	ldr	r3, [pc, #8]	; (3198 <system_gclk_chan_set_config+0x18>)
    3190:	805c      	strh	r4, [r3, #2]
}
    3192:	bd10      	pop	{r4, pc}
    3194:	00003125 	.word	0x00003125
    3198:	40000c00 	.word	0x40000c00

0000319c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    319c:	b510      	push	{r4, lr}
    319e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    31a0:	4b06      	ldr	r3, [pc, #24]	; (31bc <system_gclk_chan_get_hz+0x20>)
    31a2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    31a4:	4b06      	ldr	r3, [pc, #24]	; (31c0 <system_gclk_chan_get_hz+0x24>)
    31a6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    31a8:	4b06      	ldr	r3, [pc, #24]	; (31c4 <system_gclk_chan_get_hz+0x28>)
    31aa:	885c      	ldrh	r4, [r3, #2]
    31ac:	0524      	lsls	r4, r4, #20
    31ae:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    31b0:	4b05      	ldr	r3, [pc, #20]	; (31c8 <system_gclk_chan_get_hz+0x2c>)
    31b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    31b4:	0020      	movs	r0, r4
    31b6:	4b05      	ldr	r3, [pc, #20]	; (31cc <system_gclk_chan_get_hz+0x30>)
    31b8:	4798      	blx	r3
}
    31ba:	bd10      	pop	{r4, pc}
    31bc:	000029e1 	.word	0x000029e1
    31c0:	40000c02 	.word	0x40000c02
    31c4:	40000c00 	.word	0x40000c00
    31c8:	00002a21 	.word	0x00002a21
    31cc:	00003069 	.word	0x00003069

000031d0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    31d0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    31d2:	78d3      	ldrb	r3, [r2, #3]
    31d4:	2b00      	cmp	r3, #0
    31d6:	d135      	bne.n	3244 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    31d8:	7813      	ldrb	r3, [r2, #0]
    31da:	2b80      	cmp	r3, #128	; 0x80
    31dc:	d029      	beq.n	3232 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    31de:	061b      	lsls	r3, r3, #24
    31e0:	2480      	movs	r4, #128	; 0x80
    31e2:	0264      	lsls	r4, r4, #9
    31e4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    31e6:	7854      	ldrb	r4, [r2, #1]
    31e8:	2502      	movs	r5, #2
    31ea:	43ac      	bics	r4, r5
    31ec:	d106      	bne.n	31fc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    31ee:	7894      	ldrb	r4, [r2, #2]
    31f0:	2c00      	cmp	r4, #0
    31f2:	d120      	bne.n	3236 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    31f4:	2480      	movs	r4, #128	; 0x80
    31f6:	02a4      	lsls	r4, r4, #10
    31f8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    31fa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    31fc:	7854      	ldrb	r4, [r2, #1]
    31fe:	3c01      	subs	r4, #1
    3200:	2c01      	cmp	r4, #1
    3202:	d91c      	bls.n	323e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3204:	040d      	lsls	r5, r1, #16
    3206:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3208:	24a0      	movs	r4, #160	; 0xa0
    320a:	05e4      	lsls	r4, r4, #23
    320c:	432c      	orrs	r4, r5
    320e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3210:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3212:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3214:	24d0      	movs	r4, #208	; 0xd0
    3216:	0624      	lsls	r4, r4, #24
    3218:	432c      	orrs	r4, r5
    321a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    321c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    321e:	78d4      	ldrb	r4, [r2, #3]
    3220:	2c00      	cmp	r4, #0
    3222:	d122      	bne.n	326a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3224:	035b      	lsls	r3, r3, #13
    3226:	d51c      	bpl.n	3262 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3228:	7893      	ldrb	r3, [r2, #2]
    322a:	2b01      	cmp	r3, #1
    322c:	d01e      	beq.n	326c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    322e:	6141      	str	r1, [r0, #20]
    3230:	e017      	b.n	3262 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3232:	2300      	movs	r3, #0
    3234:	e7d7      	b.n	31e6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3236:	24c0      	movs	r4, #192	; 0xc0
    3238:	02e4      	lsls	r4, r4, #11
    323a:	4323      	orrs	r3, r4
    323c:	e7dd      	b.n	31fa <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    323e:	4c0d      	ldr	r4, [pc, #52]	; (3274 <_system_pinmux_config+0xa4>)
    3240:	4023      	ands	r3, r4
    3242:	e7df      	b.n	3204 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3244:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3246:	040c      	lsls	r4, r1, #16
    3248:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    324a:	23a0      	movs	r3, #160	; 0xa0
    324c:	05db      	lsls	r3, r3, #23
    324e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3250:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3252:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3254:	23d0      	movs	r3, #208	; 0xd0
    3256:	061b      	lsls	r3, r3, #24
    3258:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    325a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    325c:	78d3      	ldrb	r3, [r2, #3]
    325e:	2b00      	cmp	r3, #0
    3260:	d103      	bne.n	326a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3262:	7853      	ldrb	r3, [r2, #1]
    3264:	3b01      	subs	r3, #1
    3266:	2b01      	cmp	r3, #1
    3268:	d902      	bls.n	3270 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    326a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    326c:	6181      	str	r1, [r0, #24]
    326e:	e7f8      	b.n	3262 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3270:	6081      	str	r1, [r0, #8]
}
    3272:	e7fa      	b.n	326a <_system_pinmux_config+0x9a>
    3274:	fffbffff 	.word	0xfffbffff

00003278 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3278:	b510      	push	{r4, lr}
    327a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    327c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    327e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3280:	2900      	cmp	r1, #0
    3282:	d104      	bne.n	328e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3284:	0943      	lsrs	r3, r0, #5
    3286:	01db      	lsls	r3, r3, #7
    3288:	4905      	ldr	r1, [pc, #20]	; (32a0 <system_pinmux_pin_set_config+0x28>)
    328a:	468c      	mov	ip, r1
    328c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    328e:	241f      	movs	r4, #31
    3290:	4020      	ands	r0, r4
    3292:	2101      	movs	r1, #1
    3294:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3296:	0018      	movs	r0, r3
    3298:	4b02      	ldr	r3, [pc, #8]	; (32a4 <system_pinmux_pin_set_config+0x2c>)
    329a:	4798      	blx	r3
}
    329c:	bd10      	pop	{r4, pc}
    329e:	46c0      	nop			; (mov r8, r8)
    32a0:	41004400 	.word	0x41004400
    32a4:	000031d1 	.word	0x000031d1

000032a8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    32a8:	4770      	bx	lr
	...

000032ac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    32ac:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    32ae:	4b05      	ldr	r3, [pc, #20]	; (32c4 <system_init+0x18>)
    32b0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    32b2:	4b05      	ldr	r3, [pc, #20]	; (32c8 <system_init+0x1c>)
    32b4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    32b6:	4b05      	ldr	r3, [pc, #20]	; (32cc <system_init+0x20>)
    32b8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    32ba:	4b05      	ldr	r3, [pc, #20]	; (32d0 <system_init+0x24>)
    32bc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    32be:	4b05      	ldr	r3, [pc, #20]	; (32d4 <system_init+0x28>)
    32c0:	4798      	blx	r3
}
    32c2:	bd10      	pop	{r4, pc}
    32c4:	00002d9d 	.word	0x00002d9d
    32c8:	000029dd 	.word	0x000029dd
    32cc:	0000025d 	.word	0x0000025d
    32d0:	000003d1 	.word	0x000003d1
    32d4:	000032a9 	.word	0x000032a9

000032d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    32d8:	e7fe      	b.n	32d8 <Dummy_Handler>
	...

000032dc <Reset_Handler>:
{
    32dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    32de:	4a2a      	ldr	r2, [pc, #168]	; (3388 <Reset_Handler+0xac>)
    32e0:	4b2a      	ldr	r3, [pc, #168]	; (338c <Reset_Handler+0xb0>)
    32e2:	429a      	cmp	r2, r3
    32e4:	d011      	beq.n	330a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    32e6:	001a      	movs	r2, r3
    32e8:	4b29      	ldr	r3, [pc, #164]	; (3390 <Reset_Handler+0xb4>)
    32ea:	429a      	cmp	r2, r3
    32ec:	d20d      	bcs.n	330a <Reset_Handler+0x2e>
    32ee:	4a29      	ldr	r2, [pc, #164]	; (3394 <Reset_Handler+0xb8>)
    32f0:	3303      	adds	r3, #3
    32f2:	1a9b      	subs	r3, r3, r2
    32f4:	089b      	lsrs	r3, r3, #2
    32f6:	3301      	adds	r3, #1
    32f8:	009b      	lsls	r3, r3, #2
    32fa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    32fc:	4823      	ldr	r0, [pc, #140]	; (338c <Reset_Handler+0xb0>)
    32fe:	4922      	ldr	r1, [pc, #136]	; (3388 <Reset_Handler+0xac>)
    3300:	588c      	ldr	r4, [r1, r2]
    3302:	5084      	str	r4, [r0, r2]
    3304:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3306:	429a      	cmp	r2, r3
    3308:	d1fa      	bne.n	3300 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    330a:	4a23      	ldr	r2, [pc, #140]	; (3398 <Reset_Handler+0xbc>)
    330c:	4b23      	ldr	r3, [pc, #140]	; (339c <Reset_Handler+0xc0>)
    330e:	429a      	cmp	r2, r3
    3310:	d20a      	bcs.n	3328 <Reset_Handler+0x4c>
    3312:	43d3      	mvns	r3, r2
    3314:	4921      	ldr	r1, [pc, #132]	; (339c <Reset_Handler+0xc0>)
    3316:	185b      	adds	r3, r3, r1
    3318:	2103      	movs	r1, #3
    331a:	438b      	bics	r3, r1
    331c:	3304      	adds	r3, #4
    331e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3320:	2100      	movs	r1, #0
    3322:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3324:	4293      	cmp	r3, r2
    3326:	d1fc      	bne.n	3322 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3328:	4a1d      	ldr	r2, [pc, #116]	; (33a0 <Reset_Handler+0xc4>)
    332a:	21ff      	movs	r1, #255	; 0xff
    332c:	4b1d      	ldr	r3, [pc, #116]	; (33a4 <Reset_Handler+0xc8>)
    332e:	438b      	bics	r3, r1
    3330:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3332:	39fd      	subs	r1, #253	; 0xfd
    3334:	2390      	movs	r3, #144	; 0x90
    3336:	005b      	lsls	r3, r3, #1
    3338:	4a1b      	ldr	r2, [pc, #108]	; (33a8 <Reset_Handler+0xcc>)
    333a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    333c:	4a1b      	ldr	r2, [pc, #108]	; (33ac <Reset_Handler+0xd0>)
    333e:	78d3      	ldrb	r3, [r2, #3]
    3340:	2503      	movs	r5, #3
    3342:	43ab      	bics	r3, r5
    3344:	2402      	movs	r4, #2
    3346:	4323      	orrs	r3, r4
    3348:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    334a:	78d3      	ldrb	r3, [r2, #3]
    334c:	270c      	movs	r7, #12
    334e:	43bb      	bics	r3, r7
    3350:	2608      	movs	r6, #8
    3352:	4333      	orrs	r3, r6
    3354:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3356:	4b16      	ldr	r3, [pc, #88]	; (33b0 <Reset_Handler+0xd4>)
    3358:	7b98      	ldrb	r0, [r3, #14]
    335a:	2230      	movs	r2, #48	; 0x30
    335c:	4390      	bics	r0, r2
    335e:	2220      	movs	r2, #32
    3360:	4310      	orrs	r0, r2
    3362:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3364:	7b99      	ldrb	r1, [r3, #14]
    3366:	43b9      	bics	r1, r7
    3368:	4331      	orrs	r1, r6
    336a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    336c:	7b9a      	ldrb	r2, [r3, #14]
    336e:	43aa      	bics	r2, r5
    3370:	4322      	orrs	r2, r4
    3372:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3374:	4a0f      	ldr	r2, [pc, #60]	; (33b4 <Reset_Handler+0xd8>)
    3376:	6853      	ldr	r3, [r2, #4]
    3378:	2180      	movs	r1, #128	; 0x80
    337a:	430b      	orrs	r3, r1
    337c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    337e:	4b0e      	ldr	r3, [pc, #56]	; (33b8 <Reset_Handler+0xdc>)
    3380:	4798      	blx	r3
        main();
    3382:	4b0e      	ldr	r3, [pc, #56]	; (33bc <Reset_Handler+0xe0>)
    3384:	4798      	blx	r3
    3386:	e7fe      	b.n	3386 <Reset_Handler+0xaa>
    3388:	00004438 	.word	0x00004438
    338c:	20000000 	.word	0x20000000
    3390:	20000020 	.word	0x20000020
    3394:	20000004 	.word	0x20000004
    3398:	20000020 	.word	0x20000020
    339c:	200008c8 	.word	0x200008c8
    33a0:	e000ed00 	.word	0xe000ed00
    33a4:	00000000 	.word	0x00000000
    33a8:	41007000 	.word	0x41007000
    33ac:	41005000 	.word	0x41005000
    33b0:	41004800 	.word	0x41004800
    33b4:	41004000 	.word	0x41004000
    33b8:	00004201 	.word	0x00004201
    33bc:	00003b11 	.word	0x00003b11

000033c0 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    33c0:	b082      	sub	sp, #8
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    33c2:	4b0f      	ldr	r3, [pc, #60]	; (3400 <sleepmgr_lock_mode+0x40>)
    33c4:	5c1b      	ldrb	r3, [r3, r0]
    33c6:	2bff      	cmp	r3, #255	; 0xff
    33c8:	d019      	beq.n	33fe <sleepmgr_lock_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    33ca:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    33ce:	425a      	negs	r2, r3
    33d0:	4153      	adcs	r3, r2
    33d2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    33d4:	b672      	cpsid	i
    33d6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    33da:	2200      	movs	r2, #0
    33dc:	4b09      	ldr	r3, [pc, #36]	; (3404 <sleepmgr_lock_mode+0x44>)
    33de:	701a      	strb	r2, [r3, #0]
	return flags;
    33e0:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    33e2:	4a07      	ldr	r2, [pc, #28]	; (3400 <sleepmgr_lock_mode+0x40>)
    33e4:	5c13      	ldrb	r3, [r2, r0]
    33e6:	3301      	adds	r3, #1
    33e8:	5413      	strb	r3, [r2, r0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    33ea:	2900      	cmp	r1, #0
    33ec:	d005      	beq.n	33fa <sleepmgr_lock_mode+0x3a>
		cpu_irq_enable();
    33ee:	2201      	movs	r2, #1
    33f0:	4b04      	ldr	r3, [pc, #16]	; (3404 <sleepmgr_lock_mode+0x44>)
    33f2:	701a      	strb	r2, [r3, #0]
    33f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    33f8:	b662      	cpsie	i
	// Leave the critical section
	cpu_irq_restore(flags);
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    33fa:	b002      	add	sp, #8
    33fc:	4770      	bx	lr
    33fe:	e7fe      	b.n	33fe <sleepmgr_lock_mode+0x3e>
    3400:	20000540 	.word	0x20000540
    3404:	2000001c 	.word	0x2000001c

00003408 <rtc_overflow_callback>:
	config_rtc_count.continuously_update = true;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
	//rtc_count_enable(&rtc_instance);
}
void rtc_overflow_callback(void)
{
    3408:	b570      	push	{r4, r5, r6, lr}
	rtc_counter++;
    340a:	4a0e      	ldr	r2, [pc, #56]	; (3444 <rtc_overflow_callback+0x3c>)
    340c:	6813      	ldr	r3, [r2, #0]
    340e:	3301      	adds	r3, #1
    3410:	6013      	str	r3, [r2, #0]
    3412:	4c0d      	ldr	r4, [pc, #52]	; (3448 <rtc_overflow_callback+0x40>)
    3414:	2380      	movs	r3, #128	; 0x80
    3416:	025b      	lsls	r3, r3, #9
    3418:	61a3      	str	r3, [r4, #24]
    341a:	2580      	movs	r5, #128	; 0x80
    341c:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(SENSOR_PWR,1);
	port_pin_set_output_level(STATUS_LED,1);
	extint_enable_events(&eic_events); //enable event controller and jump to capture callback.
    341e:	480b      	ldr	r0, [pc, #44]	; (344c <rtc_overflow_callback+0x44>)
    3420:	4b0b      	ldr	r3, [pc, #44]	; (3450 <rtc_overflow_callback+0x48>)
    3422:	4798      	blx	r3
	delay_ms(10);
    3424:	200a      	movs	r0, #10
    3426:	4b0b      	ldr	r3, [pc, #44]	; (3454 <rtc_overflow_callback+0x4c>)
    3428:	4798      	blx	r3
	controlflag = true;
    342a:	2201      	movs	r2, #1
    342c:	4b0a      	ldr	r3, [pc, #40]	; (3458 <rtc_overflow_callback+0x50>)
    342e:	701a      	strb	r2, [r3, #0]
	timeout_timer = rtc_count_get_count(&rtc_instance);
    3430:	480a      	ldr	r0, [pc, #40]	; (345c <rtc_overflow_callback+0x54>)
    3432:	4b0b      	ldr	r3, [pc, #44]	; (3460 <rtc_overflow_callback+0x58>)
    3434:	4798      	blx	r3
    3436:	4b0b      	ldr	r3, [pc, #44]	; (3464 <rtc_overflow_callback+0x5c>)
    3438:	6018      	str	r0, [r3, #0]
    343a:	2200      	movs	r2, #0
    343c:	605a      	str	r2, [r3, #4]
		port_base->OUTCLR.reg = pin_mask;
    343e:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(STATUS_LED,0);
	
}
    3440:	bd70      	pop	{r4, r5, r6, pc}
    3442:	46c0      	nop			; (mov r8, r8)
    3444:	2000042c 	.word	0x2000042c
    3448:	41004400 	.word	0x41004400
    344c:	20000888 	.word	0x20000888
    3450:	000004c9 	.word	0x000004c9
    3454:	00000181 	.word	0x00000181
    3458:	20000148 	.word	0x20000148
    345c:	200006dc 	.word	0x200006dc
    3460:	00000955 	.word	0x00000955
    3464:	20000438 	.word	0x20000438

00003468 <capture_event_callback>:
void capture_event_callback(void){
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    346a:	b091      	sub	sp, #68	; 0x44
		port_base->OUTSET.reg = pin_mask;
    346c:	2280      	movs	r2, #128	; 0x80
    346e:	0252      	lsls	r2, r2, #9
    3470:	4b7c      	ldr	r3, [pc, #496]	; (3664 <capture_event_callback+0x1fc>)
    3472:	619a      	str	r2, [r3, #24]
	frequency = Captureclock/(TC4->COUNT16.CC[0].bit.CC*2); //grab frequency from chip
    3474:	4b7c      	ldr	r3, [pc, #496]	; (3668 <capture_event_callback+0x200>)
    3476:	8b19      	ldrh	r1, [r3, #24]
    3478:	4c7c      	ldr	r4, [pc, #496]	; (366c <capture_event_callback+0x204>)
    347a:	0049      	lsls	r1, r1, #1
    347c:	487c      	ldr	r0, [pc, #496]	; (3670 <capture_event_callback+0x208>)
    347e:	4b7d      	ldr	r3, [pc, #500]	; (3674 <capture_event_callback+0x20c>)
    3480:	4798      	blx	r3
    3482:	6020      	str	r0, [r4, #0]
	time_stamp = rtc_count_get_count(&rtc_instance) + (rtc_counter*OFF_TIME) + rollover;
    3484:	487c      	ldr	r0, [pc, #496]	; (3678 <capture_event_callback+0x210>)
    3486:	4b7d      	ldr	r3, [pc, #500]	; (367c <capture_event_callback+0x214>)
    3488:	4798      	blx	r3
    348a:	0002      	movs	r2, r0
    348c:	4b7c      	ldr	r3, [pc, #496]	; (3680 <capture_event_callback+0x218>)
    348e:	6818      	ldr	r0, [r3, #0]
    3490:	4b7c      	ldr	r3, [pc, #496]	; (3684 <capture_event_callback+0x21c>)
    3492:	4343      	muls	r3, r0
    3494:	497c      	ldr	r1, [pc, #496]	; (3688 <capture_event_callback+0x220>)
    3496:	6808      	ldr	r0, [r1, #0]
    3498:	1818      	adds	r0, r3, r0
    349a:	1880      	adds	r0, r0, r2
    349c:	4b7b      	ldr	r3, [pc, #492]	; (368c <capture_event_callback+0x224>)
    349e:	6018      	str	r0, [r3, #0]
	holder = holder | frequency;
    34a0:	6823      	ldr	r3, [r4, #0]
	if(!count_overflow && measure_count != 0){
    34a2:	4a7b      	ldr	r2, [pc, #492]	; (3690 <capture_event_callback+0x228>)
    34a4:	7812      	ldrb	r2, [r2, #0]
    34a6:	2a00      	cmp	r2, #0
    34a8:	d000      	beq.n	34ac <capture_event_callback+0x44>
    34aa:	e0b3      	b.n	3614 <capture_event_callback+0x1ac>
    34ac:	4a79      	ldr	r2, [pc, #484]	; (3694 <capture_event_callback+0x22c>)
    34ae:	7812      	ldrb	r2, [r2, #0]
    34b0:	2a00      	cmp	r2, #0
    34b2:	d00f      	beq.n	34d4 <capture_event_callback+0x6c>
			wd_buffer[(8*counter)+i] =  0xFF & holder;
    34b4:	4a78      	ldr	r2, [pc, #480]	; (3698 <capture_event_callback+0x230>)
    34b6:	8815      	ldrh	r5, [r2, #0]
    34b8:	00e9      	lsls	r1, r5, #3
    34ba:	2207      	movs	r2, #7
    34bc:	4c77      	ldr	r4, [pc, #476]	; (369c <capture_event_callback+0x234>)
    34be:	1864      	adds	r4, r4, r1
    34c0:	54a3      	strb	r3, [r4, r2]
			holder = holder >> 8;
    34c2:	0601      	lsls	r1, r0, #24
    34c4:	0a1b      	lsrs	r3, r3, #8
    34c6:	430b      	orrs	r3, r1
    34c8:	0a00      	lsrs	r0, r0, #8
		for(int i = 7; i >= 0; i--){
    34ca:	3a01      	subs	r2, #1
    34cc:	d2f8      	bcs.n	34c0 <capture_event_callback+0x58>
		counter++;
    34ce:	3501      	adds	r5, #1
    34d0:	4b71      	ldr	r3, [pc, #452]	; (3698 <capture_event_callback+0x230>)
    34d2:	801d      	strh	r5, [r3, #0]
	if(counter > 31){
    34d4:	4b70      	ldr	r3, [pc, #448]	; (3698 <capture_event_callback+0x230>)
    34d6:	881b      	ldrh	r3, [r3, #0]
    34d8:	2b1f      	cmp	r3, #31
    34da:	d902      	bls.n	34e2 <capture_event_callback+0x7a>
		count_overflow = true;
    34dc:	2201      	movs	r2, #1
    34de:	4b6c      	ldr	r3, [pc, #432]	; (3690 <capture_event_callback+0x228>)
    34e0:	701a      	strb	r2, [r3, #0]
	measure_count++;
    34e2:	4a6c      	ldr	r2, [pc, #432]	; (3694 <capture_event_callback+0x22c>)
    34e4:	7813      	ldrb	r3, [r2, #0]
    34e6:	3301      	adds	r3, #1
    34e8:	b2db      	uxtb	r3, r3
    34ea:	7013      	strb	r3, [r2, #0]
	if(measure_count < 11){
    34ec:	2b0a      	cmp	r3, #10
    34ee:	d800      	bhi.n	34f2 <capture_event_callback+0x8a>
    34f0:	e0af      	b.n	3652 <capture_event_callback+0x1ea>
		port_base->OUTCLR.reg = pin_mask;
    34f2:	2280      	movs	r2, #128	; 0x80
    34f4:	0252      	lsls	r2, r2, #9
    34f6:	4b5b      	ldr	r3, [pc, #364]	; (3664 <capture_event_callback+0x1fc>)
    34f8:	615a      	str	r2, [r3, #20]
		extint_disable_events(&eic_events);
    34fa:	4869      	ldr	r0, [pc, #420]	; (36a0 <capture_event_callback+0x238>)
    34fc:	4b69      	ldr	r3, [pc, #420]	; (36a4 <capture_event_callback+0x23c>)
    34fe:	4798      	blx	r3
		measure_count = 0;
    3500:	2200      	movs	r2, #0
    3502:	4b64      	ldr	r3, [pc, #400]	; (3694 <capture_event_callback+0x22c>)
    3504:	701a      	strb	r2, [r3, #0]
		if(count_overflow){
    3506:	4b62      	ldr	r3, [pc, #392]	; (3690 <capture_event_callback+0x228>)
    3508:	781e      	ldrb	r6, [r3, #0]
    350a:	2e00      	cmp	r6, #0
    350c:	d104      	bne.n	3518 <capture_event_callback+0xb0>
		sleepflag = true;
    350e:	2201      	movs	r2, #1
    3510:	4b65      	ldr	r3, [pc, #404]	; (36a8 <capture_event_callback+0x240>)
    3512:	701a      	strb	r2, [r3, #0]
}
    3514:	b011      	add	sp, #68	; 0x44
    3516:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port_base->OUTSET.reg = pin_mask;
    3518:	2280      	movs	r2, #128	; 0x80
    351a:	0492      	lsls	r2, r2, #18
    351c:	4b51      	ldr	r3, [pc, #324]	; (3664 <capture_event_callback+0x1fc>)
    351e:	619a      	str	r2, [r3, #24]
			counter = counter - 31;
    3520:	4a5d      	ldr	r2, [pc, #372]	; (3698 <capture_event_callback+0x230>)
    3522:	8813      	ldrh	r3, [r2, #0]
    3524:	3b1f      	subs	r3, #31
    3526:	8013      	strh	r3, [r2, #0]
			send_data.data = wd_buffer;
    3528:	4c60      	ldr	r4, [pc, #384]	; (36ac <capture_event_callback+0x244>)
    352a:	4b5c      	ldr	r3, [pc, #368]	; (369c <capture_event_callback+0x234>)
    352c:	6463      	str	r3, [r4, #68]	; 0x44
			spi_write_page(send_data);
    352e:	0021      	movs	r1, r4
    3530:	3110      	adds	r1, #16
    3532:	2238      	movs	r2, #56	; 0x38
    3534:	4668      	mov	r0, sp
    3536:	4d5e      	ldr	r5, [pc, #376]	; (36b0 <capture_event_callback+0x248>)
    3538:	47a8      	blx	r5
    353a:	6820      	ldr	r0, [r4, #0]
    353c:	6861      	ldr	r1, [r4, #4]
    353e:	68a2      	ldr	r2, [r4, #8]
    3540:	68e3      	ldr	r3, [r4, #12]
    3542:	4c5c      	ldr	r4, [pc, #368]	; (36b4 <capture_event_callback+0x24c>)
    3544:	47a0      	blx	r4
			spi_read_256(get_data);
    3546:	4c5c      	ldr	r4, [pc, #368]	; (36b8 <capture_event_callback+0x250>)
    3548:	0021      	movs	r1, r4
    354a:	3110      	adds	r1, #16
    354c:	2238      	movs	r2, #56	; 0x38
    354e:	4668      	mov	r0, sp
    3550:	47a8      	blx	r5
    3552:	6820      	ldr	r0, [r4, #0]
    3554:	6861      	ldr	r1, [r4, #4]
    3556:	68a2      	ldr	r2, [r4, #8]
    3558:	68e3      	ldr	r3, [r4, #12]
    355a:	4c58      	ldr	r4, [pc, #352]	; (36bc <capture_event_callback+0x254>)
    355c:	47a0      	blx	r4
    355e:	4b58      	ldr	r3, [pc, #352]	; (36c0 <capture_event_callback+0x258>)
    3560:	681d      	ldr	r5, [r3, #0]
    3562:	685c      	ldr	r4, [r3, #4]
    3564:	4f57      	ldr	r7, [pc, #348]	; (36c4 <capture_event_callback+0x25c>)
    3566:	3705      	adds	r7, #5
    3568:	4b57      	ldr	r3, [pc, #348]	; (36c8 <capture_event_callback+0x260>)
    356a:	1c59      	adds	r1, r3, #1
    356c:	31ff      	adds	r1, #255	; 0xff
    356e:	2000      	movs	r0, #0
				if(out_buffer[i] == 0xFF && out_buffer[i+1] == 0xFF && out_buffer[i+2] == 0xFF){
    3570:	960f      	str	r6, [sp, #60]	; 0x3c
    3572:	e003      	b.n	357c <capture_event_callback+0x114>
    3574:	3701      	adds	r7, #1
    3576:	3301      	adds	r3, #1
			for(int i = 5; i<261; i++){
    3578:	428b      	cmp	r3, r1
    357a:	d00e      	beq.n	359a <capture_event_callback+0x132>
				out_buffer[i-5] = rd_buffer[i];
    357c:	783e      	ldrb	r6, [r7, #0]
    357e:	701e      	strb	r6, [r3, #0]
				if(out_buffer[i] == 0xFF && out_buffer[i+1] == 0xFF && out_buffer[i+2] == 0xFF){
    3580:	795e      	ldrb	r6, [r3, #5]
    3582:	2eff      	cmp	r6, #255	; 0xff
    3584:	d1f6      	bne.n	3574 <capture_event_callback+0x10c>
    3586:	799e      	ldrb	r6, [r3, #6]
    3588:	2eff      	cmp	r6, #255	; 0xff
    358a:	d1f3      	bne.n	3574 <capture_event_callback+0x10c>
    358c:	79da      	ldrb	r2, [r3, #7]
    358e:	2aff      	cmp	r2, #255	; 0xff
    3590:	d1f0      	bne.n	3574 <capture_event_callback+0x10c>
    3592:	980f      	ldr	r0, [sp, #60]	; 0x3c
					test = 121;
    3594:	2579      	movs	r5, #121	; 0x79
    3596:	2400      	movs	r4, #0
    3598:	e7ec      	b.n	3574 <capture_event_callback+0x10c>
    359a:	2800      	cmp	r0, #0
    359c:	d136      	bne.n	360c <capture_event_callback+0x1a4>
			usart_write_buffer_wait(&usart_terminal, out_buffer, sizeof(out_buffer));
    359e:	2280      	movs	r2, #128	; 0x80
    35a0:	0052      	lsls	r2, r2, #1
    35a2:	4949      	ldr	r1, [pc, #292]	; (36c8 <capture_event_callback+0x260>)
    35a4:	4849      	ldr	r0, [pc, #292]	; (36cc <capture_event_callback+0x264>)
    35a6:	4b4a      	ldr	r3, [pc, #296]	; (36d0 <capture_event_callback+0x268>)
    35a8:	4798      	blx	r3
			send_data.address = send_data.address + 256;
    35aa:	4a40      	ldr	r2, [pc, #256]	; (36ac <capture_event_callback+0x244>)
    35ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
    35ae:	3301      	adds	r3, #1
    35b0:	33ff      	adds	r3, #255	; 0xff
    35b2:	6413      	str	r3, [r2, #64]	; 0x40
			get_data.address = get_data.address + 256;
    35b4:	4940      	ldr	r1, [pc, #256]	; (36b8 <capture_event_callback+0x250>)
    35b6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    35b8:	3201      	adds	r2, #1
    35ba:	32ff      	adds	r2, #255	; 0xff
    35bc:	640a      	str	r2, [r1, #64]	; 0x40
		port_base->OUTCLR.reg = pin_mask;
    35be:	2180      	movs	r1, #128	; 0x80
    35c0:	0489      	lsls	r1, r1, #18
    35c2:	4a28      	ldr	r2, [pc, #160]	; (3664 <capture_event_callback+0x1fc>)
    35c4:	6151      	str	r1, [r2, #20]
			page_data[1] = send_data.address>>16 & 0x0000FF;
    35c6:	4943      	ldr	r1, [pc, #268]	; (36d4 <capture_event_callback+0x26c>)
    35c8:	0c1a      	lsrs	r2, r3, #16
    35ca:	704a      	strb	r2, [r1, #1]
			page_data[2] = send_data.address>>8 & 0x0000FF;
    35cc:	0a1a      	lsrs	r2, r3, #8
    35ce:	708a      	strb	r2, [r1, #2]
			page_data[3] = send_data.address & 0x0000FF;
    35d0:	70cb      	strb	r3, [r1, #3]
			page_data[4] = time_stamp >>24;
    35d2:	4b2e      	ldr	r3, [pc, #184]	; (368c <capture_event_callback+0x224>)
    35d4:	681b      	ldr	r3, [r3, #0]
    35d6:	0e1a      	lsrs	r2, r3, #24
    35d8:	710a      	strb	r2, [r1, #4]
			page_data[5] = (time_stamp & 0x00FF0000) >> 16;
    35da:	0c1a      	lsrs	r2, r3, #16
    35dc:	714a      	strb	r2, [r1, #5]
			page_data[6] = (time_stamp & 0x0000FF00) >> 8;
    35de:	0a1a      	lsrs	r2, r3, #8
    35e0:	718a      	strb	r2, [r1, #6]
			page_data[7] = (time_stamp & 0x000000FF);
    35e2:	71cb      	strb	r3, [r1, #7]
			eeprom_emulator_write_page(0, page_data);
    35e4:	2000      	movs	r0, #0
    35e6:	4b3c      	ldr	r3, [pc, #240]	; (36d8 <capture_event_callback+0x270>)
    35e8:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    35ea:	4b3c      	ldr	r3, [pc, #240]	; (36dc <capture_event_callback+0x274>)
    35ec:	4798      	blx	r3
			for(int i = 0; i <= counter*8; i++){
    35ee:	4b2a      	ldr	r3, [pc, #168]	; (3698 <capture_event_callback+0x230>)
    35f0:	8819      	ldrh	r1, [r3, #0]
    35f2:	00c9      	lsls	r1, r1, #3
    35f4:	2300      	movs	r3, #0
				wd_buffer[i] = overflow_buffer[i];
    35f6:	4c29      	ldr	r4, [pc, #164]	; (369c <capture_event_callback+0x234>)
    35f8:	4839      	ldr	r0, [pc, #228]	; (36e0 <capture_event_callback+0x278>)
    35fa:	5c1a      	ldrb	r2, [r3, r0]
    35fc:	551a      	strb	r2, [r3, r4]
			for(int i = 0; i <= counter*8; i++){
    35fe:	3301      	adds	r3, #1
    3600:	428b      	cmp	r3, r1
    3602:	ddfa      	ble.n	35fa <capture_event_callback+0x192>
			count_overflow = false;
    3604:	2200      	movs	r2, #0
    3606:	4b22      	ldr	r3, [pc, #136]	; (3690 <capture_event_callback+0x228>)
    3608:	701a      	strb	r2, [r3, #0]
    360a:	e780      	b.n	350e <capture_event_callback+0xa6>
    360c:	4b2c      	ldr	r3, [pc, #176]	; (36c0 <capture_event_callback+0x258>)
    360e:	601d      	str	r5, [r3, #0]
    3610:	605c      	str	r4, [r3, #4]
    3612:	e7c4      	b.n	359e <capture_event_callback+0x136>
	if(count_overflow && measure_count != 0){
    3614:	4a1f      	ldr	r2, [pc, #124]	; (3694 <capture_event_callback+0x22c>)
    3616:	7812      	ldrb	r2, [r2, #0]
    3618:	2a00      	cmp	r2, #0
    361a:	d012      	beq.n	3642 <capture_event_callback+0x1da>
			overflow_buffer[(8*(counter-32)+i)] =  0xFF & holder;
    361c:	4a1e      	ldr	r2, [pc, #120]	; (3698 <capture_event_callback+0x230>)
    361e:	8815      	ldrh	r5, [r2, #0]
    3620:	0029      	movs	r1, r5
    3622:	3920      	subs	r1, #32
    3624:	00c9      	lsls	r1, r1, #3
    3626:	2207      	movs	r2, #7
    3628:	4c2d      	ldr	r4, [pc, #180]	; (36e0 <capture_event_callback+0x278>)
    362a:	1864      	adds	r4, r4, r1
    362c:	54a3      	strb	r3, [r4, r2]
			holder = holder >> 8;
    362e:	0601      	lsls	r1, r0, #24
    3630:	0a1b      	lsrs	r3, r3, #8
    3632:	430b      	orrs	r3, r1
    3634:	0a00      	lsrs	r0, r0, #8
		for(int i = 7; i >= 0; i--){
    3636:	3a01      	subs	r2, #1
    3638:	d2f8      	bcs.n	362c <capture_event_callback+0x1c4>
		counter++;
    363a:	3501      	adds	r5, #1
    363c:	4b16      	ldr	r3, [pc, #88]	; (3698 <capture_event_callback+0x230>)
    363e:	801d      	strh	r5, [r3, #0]
    3640:	e748      	b.n	34d4 <capture_event_callback+0x6c>
	if(counter > 31){
    3642:	4b15      	ldr	r3, [pc, #84]	; (3698 <capture_event_callback+0x230>)
    3644:	881b      	ldrh	r3, [r3, #0]
    3646:	2b1f      	cmp	r3, #31
    3648:	d900      	bls.n	364c <capture_event_callback+0x1e4>
    364a:	e747      	b.n	34dc <capture_event_callback+0x74>
	measure_count++;
    364c:	2201      	movs	r2, #1
    364e:	4b11      	ldr	r3, [pc, #68]	; (3694 <capture_event_callback+0x22c>)
    3650:	701a      	strb	r2, [r3, #0]
		delay_ms(PULSE_TIME/10);
    3652:	20fa      	movs	r0, #250	; 0xfa
    3654:	0040      	lsls	r0, r0, #1
    3656:	4b23      	ldr	r3, [pc, #140]	; (36e4 <capture_event_callback+0x27c>)
    3658:	4798      	blx	r3
		extint_enable_events(&eic_events);
    365a:	4811      	ldr	r0, [pc, #68]	; (36a0 <capture_event_callback+0x238>)
    365c:	4b22      	ldr	r3, [pc, #136]	; (36e8 <capture_event_callback+0x280>)
    365e:	4798      	blx	r3
    3660:	e758      	b.n	3514 <capture_event_callback+0xac>
    3662:	46c0      	nop			; (mov r8, r8)
    3664:	41004400 	.word	0x41004400
    3668:	42003000 	.word	0x42003000
    366c:	20000150 	.word	0x20000150
    3670:	02dc6c00 	.word	0x02dc6c00
    3674:	00003fd5 	.word	0x00003fd5
    3678:	200006dc 	.word	0x200006dc
    367c:	00000955 	.word	0x00000955
    3680:	2000042c 	.word	0x2000042c
    3684:	00001388 	.word	0x00001388
    3688:	20000428 	.word	0x20000428
    368c:	20000434 	.word	0x20000434
    3690:	20000149 	.word	0x20000149
    3694:	20000154 	.word	0x20000154
    3698:	2000014a 	.word	0x2000014a
    369c:	20000440 	.word	0x20000440
    36a0:	20000888 	.word	0x20000888
    36a4:	000004f5 	.word	0x000004f5
    36a8:	20000430 	.word	0x20000430
    36ac:	20000800 	.word	0x20000800
    36b0:	00004249 	.word	0x00004249
    36b4:	00001905 	.word	0x00001905
    36b8:	20000728 	.word	0x20000728
    36bc:	000018a1 	.word	0x000018a1
    36c0:	200007f0 	.word	0x200007f0
    36c4:	20000320 	.word	0x20000320
    36c8:	20000158 	.word	0x20000158
    36cc:	200007bc 	.word	0x200007bc
    36d0:	00001d05 	.word	0x00001d05
    36d4:	20000770 	.word	0x20000770
    36d8:	00001631 	.word	0x00001631
    36dc:	00001601 	.word	0x00001601
    36e0:	20000258 	.word	0x20000258
    36e4:	00000181 	.word	0x00000181
    36e8:	000004c9 	.word	0x000004c9

000036ec <configure_eeprom>:
{
    36ec:	b510      	push	{r4, lr}
	enum status_code error_code = eeprom_emulator_init();
    36ee:	4b06      	ldr	r3, [pc, #24]	; (3708 <configure_eeprom+0x1c>)
    36f0:	4798      	blx	r3
	if (error_code == STATUS_ERR_NO_MEMORY) {
    36f2:	2816      	cmp	r0, #22
    36f4:	d002      	beq.n	36fc <configure_eeprom+0x10>
	else if (error_code != STATUS_OK) {
    36f6:	2800      	cmp	r0, #0
    36f8:	d101      	bne.n	36fe <configure_eeprom+0x12>
}
    36fa:	bd10      	pop	{r4, pc}
    36fc:	e7fe      	b.n	36fc <configure_eeprom+0x10>
		eeprom_emulator_erase_memory();
    36fe:	4b03      	ldr	r3, [pc, #12]	; (370c <configure_eeprom+0x20>)
    3700:	4798      	blx	r3
		eeprom_emulator_init();
    3702:	4b01      	ldr	r3, [pc, #4]	; (3708 <configure_eeprom+0x1c>)
    3704:	4798      	blx	r3
}
    3706:	e7f8      	b.n	36fa <configure_eeprom+0xe>
    3708:	000013d5 	.word	0x000013d5
    370c:	000014b9 	.word	0x000014b9

00003710 <SYSCTRL_Handler>:
{
    3710:	b510      	push	{r4, lr}
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
    3712:	4b06      	ldr	r3, [pc, #24]	; (372c <SYSCTRL_Handler+0x1c>)
    3714:	689b      	ldr	r3, [r3, #8]
    3716:	055b      	lsls	r3, r3, #21
    3718:	d400      	bmi.n	371c <SYSCTRL_Handler+0xc>
}
    371a:	bd10      	pop	{r4, pc}
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
    371c:	2280      	movs	r2, #128	; 0x80
    371e:	00d2      	lsls	r2, r2, #3
    3720:	4b02      	ldr	r3, [pc, #8]	; (372c <SYSCTRL_Handler+0x1c>)
    3722:	609a      	str	r2, [r3, #8]
		eeprom_emulator_commit_page_buffer();
    3724:	4b02      	ldr	r3, [pc, #8]	; (3730 <SYSCTRL_Handler+0x20>)
    3726:	4798      	blx	r3
}
    3728:	e7f7      	b.n	371a <SYSCTRL_Handler+0xa>
    372a:	46c0      	nop			; (mov r8, r8)
    372c:	40000800 	.word	0x40000800
    3730:	00001601 	.word	0x00001601

00003734 <configure_terminal>:
{
    3734:	b530      	push	{r4, r5, lr}
    3736:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3738:	2380      	movs	r3, #128	; 0x80
    373a:	05db      	lsls	r3, r3, #23
    373c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    373e:	2300      	movs	r3, #0
    3740:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3742:	22ff      	movs	r2, #255	; 0xff
    3744:	4669      	mov	r1, sp
    3746:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3748:	2200      	movs	r2, #0
    374a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    374c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    374e:	2101      	movs	r1, #1
    3750:	2024      	movs	r0, #36	; 0x24
    3752:	466c      	mov	r4, sp
    3754:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    3756:	3001      	adds	r0, #1
    3758:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    375a:	3125      	adds	r1, #37	; 0x25
    375c:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    375e:	3101      	adds	r1, #1
    3760:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3762:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3764:	3105      	adds	r1, #5
    3766:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3768:	3101      	adds	r1, #1
    376a:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    376c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    376e:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3770:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3772:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3774:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3776:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    3778:	2313      	movs	r3, #19
    377a:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    377c:	7762      	strb	r2, [r4, #29]
	config_terminal.baudrate    = 256000;
    377e:	23fa      	movs	r3, #250	; 0xfa
    3780:	029b      	lsls	r3, r3, #10
    3782:	9308      	str	r3, [sp, #32]
	config_terminal.mux_setting = USART_RX_1_TX_0_XCK_1;
    3784:	2380      	movs	r3, #128	; 0x80
    3786:	035b      	lsls	r3, r3, #13
    3788:	9303      	str	r3, [sp, #12]
	config_terminal.pinmux_pad0 = PINMUX_PA04D_SERCOM0_PAD0;
    378a:	4b12      	ldr	r3, [pc, #72]	; (37d4 <configure_terminal+0xa0>)
    378c:	930c      	str	r3, [sp, #48]	; 0x30
	config_terminal.pinmux_pad1 = PINMUX_PA05D_SERCOM0_PAD1;
    378e:	4b12      	ldr	r3, [pc, #72]	; (37d8 <configure_terminal+0xa4>)
    3790:	930d      	str	r3, [sp, #52]	; 0x34
	config_terminal.pinmux_pad2 = PINMUX_UNUSED;
    3792:	2301      	movs	r3, #1
    3794:	425b      	negs	r3, r3
    3796:	930e      	str	r3, [sp, #56]	; 0x38
	config_terminal.pinmux_pad3 = PINMUX_UNUSED;
    3798:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_terminal,SERCOM0, &config_terminal) != STATUS_OK) {
    379a:	4d10      	ldr	r5, [pc, #64]	; (37dc <configure_terminal+0xa8>)
    379c:	4c10      	ldr	r4, [pc, #64]	; (37e0 <configure_terminal+0xac>)
    379e:	466a      	mov	r2, sp
    37a0:	4910      	ldr	r1, [pc, #64]	; (37e4 <configure_terminal+0xb0>)
    37a2:	0028      	movs	r0, r5
    37a4:	47a0      	blx	r4
    37a6:	2800      	cmp	r0, #0
    37a8:	d1f9      	bne.n	379e <configure_terminal+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    37aa:	4d0c      	ldr	r5, [pc, #48]	; (37dc <configure_terminal+0xa8>)
    37ac:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    37ae:	0020      	movs	r0, r4
    37b0:	4b0d      	ldr	r3, [pc, #52]	; (37e8 <configure_terminal+0xb4>)
    37b2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    37b4:	231f      	movs	r3, #31
    37b6:	4018      	ands	r0, r3
    37b8:	3b1e      	subs	r3, #30
    37ba:	4083      	lsls	r3, r0
    37bc:	4a0b      	ldr	r2, [pc, #44]	; (37ec <configure_terminal+0xb8>)
    37be:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    37c0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    37c2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    37c4:	2b00      	cmp	r3, #0
    37c6:	d1fc      	bne.n	37c2 <configure_terminal+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    37c8:	6823      	ldr	r3, [r4, #0]
    37ca:	2202      	movs	r2, #2
    37cc:	4313      	orrs	r3, r2
    37ce:	6023      	str	r3, [r4, #0]
}
    37d0:	b011      	add	sp, #68	; 0x44
    37d2:	bd30      	pop	{r4, r5, pc}
    37d4:	00040003 	.word	0x00040003
    37d8:	00050003 	.word	0x00050003
    37dc:	200007bc 	.word	0x200007bc
    37e0:	00001995 	.word	0x00001995
    37e4:	42000800 	.word	0x42000800
    37e8:	00002979 	.word	0x00002979
    37ec:	e000e100 	.word	0xe000e100

000037f0 <configure_port_pins>:
{
    37f0:	b570      	push	{r4, r5, r6, lr}
    37f2:	b082      	sub	sp, #8
	config->direction  = PORT_PIN_DIR_INPUT;
    37f4:	ac01      	add	r4, sp, #4
    37f6:	2300      	movs	r3, #0
    37f8:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    37fa:	2601      	movs	r6, #1
    37fc:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    37fe:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(DEBUG_PIN,&config_port_pin);
    3800:	0021      	movs	r1, r4
    3802:	2002      	movs	r0, #2
    3804:	4d0b      	ldr	r5, [pc, #44]	; (3834 <configure_port_pins+0x44>)
    3806:	47a8      	blx	r5
	port_pin_set_config(PIN_PA18, &config_port_pin);
    3808:	0021      	movs	r1, r4
    380a:	2012      	movs	r0, #18
    380c:	47a8      	blx	r5
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    380e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SENSOR_PWR, &config_port_pin);
    3810:	0021      	movs	r1, r4
    3812:	2010      	movs	r0, #16
    3814:	47a8      	blx	r5
	port_pin_set_config(STATUS_LED, &config_port_pin);
    3816:	0021      	movs	r1, r4
    3818:	2007      	movs	r0, #7
    381a:	47a8      	blx	r5
	port_pin_set_config(PIN_PA15,&config_port_pin);
    381c:	0021      	movs	r1, r4
    381e:	200f      	movs	r0, #15
    3820:	47a8      	blx	r5
	port_pin_set_config(FLASH_PWR,&config_port_pin);
    3822:	0021      	movs	r1, r4
    3824:	2019      	movs	r0, #25
    3826:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    3828:	2280      	movs	r2, #128	; 0x80
    382a:	0252      	lsls	r2, r2, #9
    382c:	4b02      	ldr	r3, [pc, #8]	; (3838 <configure_port_pins+0x48>)
    382e:	615a      	str	r2, [r3, #20]
}
    3830:	b002      	add	sp, #8
    3832:	bd70      	pop	{r4, r5, r6, pc}
    3834:	000008a5 	.word	0x000008a5
    3838:	41004400 	.word	0x41004400

0000383c <configure_pinmux>:
void configure_pinmux(void){
    383c:	b500      	push	{lr}
    383e:	b083      	sub	sp, #12
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3840:	a901      	add	r1, sp, #4
    3842:	2301      	movs	r3, #1
    3844:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3846:	2200      	movs	r2, #0
    3848:	70ca      	strb	r2, [r1, #3]
	config_pinmux.mux_position = PINMUX_PA22H_GCLK_IO6;
    384a:	3207      	adds	r2, #7
    384c:	700a      	strb	r2, [r1, #0]
	config_pinmux.direction= SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    384e:	704b      	strb	r3, [r1, #1]
	system_pinmux_pin_set_config(PIN_PA22H_GCLK_IO6, &config_pinmux);
    3850:	2016      	movs	r0, #22
    3852:	4b02      	ldr	r3, [pc, #8]	; (385c <configure_pinmux+0x20>)
    3854:	4798      	blx	r3
}
    3856:	b003      	add	sp, #12
    3858:	bd00      	pop	{pc}
    385a:	46c0      	nop			; (mov r8, r8)
    385c:	00003279 	.word	0x00003279

00003860 <configure_spi_master>:
{
    3860:	b5f0      	push	{r4, r5, r6, r7, lr}
    3862:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    3864:	4c2a      	ldr	r4, [pc, #168]	; (3910 <configure_spi_master+0xb0>)
    3866:	2309      	movs	r3, #9
    3868:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    386a:	2300      	movs	r3, #0
    386c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    386e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3870:	a901      	add	r1, sp, #4
    3872:	2201      	movs	r2, #1
    3874:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3876:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3878:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    387a:	2009      	movs	r0, #9
    387c:	4b25      	ldr	r3, [pc, #148]	; (3914 <configure_spi_master+0xb4>)
    387e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3880:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    3882:	09d9      	lsrs	r1, r3, #7
		return NULL;
    3884:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    3886:	2900      	cmp	r1, #0
    3888:	d104      	bne.n	3894 <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    388a:	095a      	lsrs	r2, r3, #5
    388c:	01d2      	lsls	r2, r2, #7
    388e:	4922      	ldr	r1, [pc, #136]	; (3918 <configure_spi_master+0xb8>)
    3890:	468c      	mov	ip, r1
    3892:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3894:	261f      	movs	r6, #31
    3896:	4033      	ands	r3, r6
    3898:	2501      	movs	r5, #1
    389a:	0029      	movs	r1, r5
    389c:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    389e:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    38a0:	ac02      	add	r4, sp, #8
    38a2:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    38a4:	2300      	movs	r3, #0
    38a6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    38a8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    38aa:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    38ac:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    38ae:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    38b0:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    38b2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    38b4:	2224      	movs	r2, #36	; 0x24
    38b6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    38b8:	3a18      	subs	r2, #24
    38ba:	2100      	movs	r1, #0
    38bc:	a808      	add	r0, sp, #32
    38be:	4b17      	ldr	r3, [pc, #92]	; (391c <configure_spi_master+0xbc>)
    38c0:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    38c2:	4b17      	ldr	r3, [pc, #92]	; (3920 <configure_spi_master+0xc0>)
    38c4:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
    38c6:	2380      	movs	r3, #128	; 0x80
    38c8:	025b      	lsls	r3, r3, #9
    38ca:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    38cc:	4b15      	ldr	r3, [pc, #84]	; (3924 <configure_spi_master+0xc4>)
    38ce:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    38d0:	2301      	movs	r3, #1
    38d2:	425b      	negs	r3, r3
    38d4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_PA10D_SERCOM2_PAD2;
    38d6:	4b14      	ldr	r3, [pc, #80]	; (3928 <configure_spi_master+0xc8>)
    38d8:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA11D_SERCOM2_PAD3;
    38da:	4b14      	ldr	r3, [pc, #80]	; (392c <configure_spi_master+0xcc>)
    38dc:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&spi_master_instance, SERCOM2, &config_spi_master);
    38de:	4f14      	ldr	r7, [pc, #80]	; (3930 <configure_spi_master+0xd0>)
    38e0:	0022      	movs	r2, r4
    38e2:	4914      	ldr	r1, [pc, #80]	; (3934 <configure_spi_master+0xd4>)
    38e4:	0038      	movs	r0, r7
    38e6:	4b14      	ldr	r3, [pc, #80]	; (3938 <configure_spi_master+0xd8>)
    38e8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    38ea:	683c      	ldr	r4, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    38ec:	0020      	movs	r0, r4
    38ee:	4b13      	ldr	r3, [pc, #76]	; (393c <configure_spi_master+0xdc>)
    38f0:	4798      	blx	r3
    38f2:	4006      	ands	r6, r0
    38f4:	40b5      	lsls	r5, r6
    38f6:	4b12      	ldr	r3, [pc, #72]	; (3940 <configure_spi_master+0xe0>)
    38f8:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    38fa:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    38fc:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    38fe:	2b00      	cmp	r3, #0
    3900:	d1fc      	bne.n	38fc <configure_spi_master+0x9c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3902:	6823      	ldr	r3, [r4, #0]
    3904:	2202      	movs	r2, #2
    3906:	4313      	orrs	r3, r2
    3908:	6023      	str	r3, [r4, #0]
}
    390a:	b011      	add	sp, #68	; 0x44
    390c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    390e:	46c0      	nop			; (mov r8, r8)
    3910:	20000884 	.word	0x20000884
    3914:	000008a5 	.word	0x000008a5
    3918:	41004400 	.word	0x41004400
    391c:	0000425b 	.word	0x0000425b
    3920:	000186a0 	.word	0x000186a0
    3924:	00080003 	.word	0x00080003
    3928:	000a0003 	.word	0x000a0003
    392c:	000b0003 	.word	0x000b0003
    3930:	20000848 	.word	0x20000848
    3934:	42001000 	.word	0x42001000
    3938:	00001f59 	.word	0x00001f59
    393c:	00002979 	.word	0x00002979
    3940:	e000e100 	.word	0xe000e100

00003944 <configure_tc>:
{
    3944:	b500      	push	{lr}
    3946:	b08f      	sub	sp, #60	; 0x3c
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3948:	aa01      	add	r2, sp, #4
    394a:	2300      	movs	r3, #0
    394c:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    394e:	2100      	movs	r1, #0
    3950:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3952:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3954:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3956:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3958:	7291      	strb	r1, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    395a:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    395c:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    395e:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3960:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3962:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3964:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3966:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3968:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    396a:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    396c:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    396e:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0] = 1;
    3970:	3301      	adds	r3, #1
    3972:	72d3      	strb	r3, [r2, #11]
	config_tc.enable_capture_on_channel[1] = 1;
    3974:	7313      	strb	r3, [r2, #12]
	config_tc.clock_source = GCLK_GENERATOR_3;
    3976:	3302      	adds	r3, #2
    3978:	7013      	strb	r3, [r2, #0]
	tc_init(&capture_instance, TC4, &config_tc);
    397a:	4903      	ldr	r1, [pc, #12]	; (3988 <configure_tc+0x44>)
    397c:	4803      	ldr	r0, [pc, #12]	; (398c <configure_tc+0x48>)
    397e:	4b04      	ldr	r3, [pc, #16]	; (3990 <configure_tc+0x4c>)
    3980:	4798      	blx	r3
}
    3982:	b00f      	add	sp, #60	; 0x3c
    3984:	bd00      	pop	{pc}
    3986:	46c0      	nop			; (mov r8, r8)
    3988:	42003000 	.word	0x42003000
    398c:	200008a8 	.word	0x200008a8
    3990:	00000fc9 	.word	0x00000fc9

00003994 <configure_rtc_count>:
void configure_rtc_count(void){
    3994:	b500      	push	{lr}
    3996:	b085      	sub	sp, #20
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    3998:	2300      	movs	r3, #0
    399a:	466a      	mov	r2, sp
    399c:	70d3      	strb	r3, [r2, #3]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    399e:	9302      	str	r3, [sp, #8]
    39a0:	9303      	str	r3, [sp, #12]
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    39a2:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    39a4:	7093      	strb	r3, [r2, #2]
	config_rtc_count.continuously_update = true;
    39a6:	2301      	movs	r3, #1
    39a8:	7113      	strb	r3, [r2, #4]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    39aa:	4903      	ldr	r1, [pc, #12]	; (39b8 <configure_rtc_count+0x24>)
    39ac:	4803      	ldr	r0, [pc, #12]	; (39bc <configure_rtc_count+0x28>)
    39ae:	4b04      	ldr	r3, [pc, #16]	; (39c0 <configure_rtc_count+0x2c>)
    39b0:	4798      	blx	r3
}
    39b2:	b005      	add	sp, #20
    39b4:	bd00      	pop	{pc}
    39b6:	46c0      	nop			; (mov r8, r8)
    39b8:	40001400 	.word	0x40001400
    39bc:	200006dc 	.word	0x200006dc
    39c0:	00000a05 	.word	0x00000a05

000039c4 <configure_rtc_callbacks>:
void configure_rtc_callbacks(void)
{
    39c4:	b510      	push	{r4, lr}
	rtc_count_register_callback(&rtc_instance, rtc_overflow_callback, RTC_COUNT_CALLBACK_OVERFLOW);
    39c6:	4c05      	ldr	r4, [pc, #20]	; (39dc <configure_rtc_callbacks+0x18>)
    39c8:	2202      	movs	r2, #2
    39ca:	4905      	ldr	r1, [pc, #20]	; (39e0 <configure_rtc_callbacks+0x1c>)
    39cc:	0020      	movs	r0, r4
    39ce:	4b05      	ldr	r3, [pc, #20]	; (39e4 <configure_rtc_callbacks+0x20>)
    39d0:	4798      	blx	r3
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    39d2:	2102      	movs	r1, #2
    39d4:	0020      	movs	r0, r4
    39d6:	4b04      	ldr	r3, [pc, #16]	; (39e8 <configure_rtc_callbacks+0x24>)
    39d8:	4798      	blx	r3
}
    39da:	bd10      	pop	{r4, pc}
    39dc:	200006dc 	.word	0x200006dc
    39e0:	00003409 	.word	0x00003409
    39e4:	00000b09 	.word	0x00000b09
    39e8:	00000b41 	.word	0x00000b41

000039ec <configure_event_controller>:
void configure_event_controller(void){
    39ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ee:	46c6      	mov	lr, r8
    39f0:	b500      	push	{lr}
    39f2:	b086      	sub	sp, #24
	// PPW: T captured in CC0, tp captured in CC1
	// f = 1/T, dutyCycle = tp / T
	events_tc.event_action = TC_EVENT_ACTION_PWP;
    39f4:	4b39      	ldr	r3, [pc, #228]	; (3adc <configure_event_controller+0xf0>)
    39f6:	2206      	movs	r2, #6
    39f8:	715a      	strb	r2, [r3, #5]
	// Enable the event action
	events_tc.on_event_perform_action = 1;
    39fa:	3a05      	subs	r2, #5
    39fc:	70da      	strb	r2, [r3, #3]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Tc *const tc_module = module_inst->hw;
    39fe:	4a38      	ldr	r2, [pc, #224]	; (3ae0 <configure_event_controller+0xf4>)
    3a00:	6811      	ldr	r1, [r2, #0]

	uint32_t event_mask = 0;

	if (events->invert_event_input == true) {
    3a02:	791b      	ldrb	r3, [r3, #4]
		event_mask |= TC_EVCTRL_TCINV;
    3a04:	1e5a      	subs	r2, r3, #1
    3a06:	4193      	sbcs	r3, r2
    3a08:	011b      	lsls	r3, r3, #4

	if (events->on_event_perform_action == true) {
		event_mask |= TC_EVCTRL_TCEI;
	}

	if (events->generate_event_on_overflow == true) {
    3a0a:	4a34      	ldr	r2, [pc, #208]	; (3adc <configure_event_controller+0xf0>)
    3a0c:	7892      	ldrb	r2, [r2, #2]
    3a0e:	2a00      	cmp	r2, #0
    3a10:	d15f      	bne.n	3ad2 <configure_event_controller+0xe6>
		event_mask |= TC_EVCTRL_TCEI;
    3a12:	3220      	adds	r2, #32
    3a14:	4313      	orrs	r3, r2
		event_mask |= TC_EVCTRL_OVFEO;
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (events->generate_event_on_compare_channel[i] == true) {
    3a16:	4a31      	ldr	r2, [pc, #196]	; (3adc <configure_event_controller+0xf0>)
    3a18:	7812      	ldrb	r2, [r2, #0]
    3a1a:	2a00      	cmp	r2, #0
    3a1c:	d002      	beq.n	3a24 <configure_event_controller+0x38>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    3a1e:	2280      	movs	r2, #128	; 0x80
    3a20:	0152      	lsls	r2, r2, #5
    3a22:	4313      	orrs	r3, r2
		if (events->generate_event_on_compare_channel[i] == true) {
    3a24:	4a2d      	ldr	r2, [pc, #180]	; (3adc <configure_event_controller+0xf0>)
    3a26:	7852      	ldrb	r2, [r2, #1]
    3a28:	2a00      	cmp	r2, #0
    3a2a:	d002      	beq.n	3a32 <configure_event_controller+0x46>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    3a2c:	2280      	movs	r2, #128	; 0x80
    3a2e:	0192      	lsls	r2, r2, #6
    3a30:	4313      	orrs	r3, r2
		}
	}

	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
    3a32:	894a      	ldrh	r2, [r1, #10]
    3a34:	2006      	movs	r0, #6
    3a36:	4302      	orrs	r2, r0
    3a38:	4313      	orrs	r3, r2
    3a3a:	b29b      	uxth	r3, r3
    3a3c:	814b      	strh	r3, [r1, #10]
	tc_enable_events(&capture_instance, &events_tc);
	tc_register_callback(&capture_instance, capture_event_callback, TC_CALLBACK_CC_CHANNEL0);
    3a3e:	4c28      	ldr	r4, [pc, #160]	; (3ae0 <configure_event_controller+0xf4>)
    3a40:	2202      	movs	r2, #2
    3a42:	4928      	ldr	r1, [pc, #160]	; (3ae4 <configure_event_controller+0xf8>)
    3a44:	0020      	movs	r0, r4
    3a46:	4b28      	ldr	r3, [pc, #160]	; (3ae8 <configure_event_controller+0xfc>)
    3a48:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3a4a:	6820      	ldr	r0, [r4, #0]
    3a4c:	4b27      	ldr	r3, [pc, #156]	; (3aec <configure_event_controller+0x100>)
    3a4e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3a50:	4b27      	ldr	r3, [pc, #156]	; (3af0 <configure_event_controller+0x104>)
    3a52:	5c1a      	ldrb	r2, [r3, r0]
    3a54:	231f      	movs	r3, #31
    3a56:	4013      	ands	r3, r2
    3a58:	2201      	movs	r2, #1
    3a5a:	4690      	mov	r8, r2
    3a5c:	409a      	lsls	r2, r3
    3a5e:	4b25      	ldr	r3, [pc, #148]	; (3af4 <configure_event_controller+0x108>)
    3a60:	601a      	str	r2, [r3, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3a62:	7e63      	ldrb	r3, [r4, #25]
    3a64:	2210      	movs	r2, #16
    3a66:	4313      	orrs	r3, r2
    3a68:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3a6a:	2310      	movs	r3, #16
    3a6c:	6822      	ldr	r2, [r4, #0]
    3a6e:	7353      	strb	r3, [r2, #13]
	tc_enable_callback(&capture_instance, TC_CALLBACK_CC_CHANNEL0);

	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    3a70:	ad03      	add	r5, sp, #12
    3a72:	0028      	movs	r0, r5
    3a74:	4b20      	ldr	r3, [pc, #128]	; (3af8 <configure_event_controller+0x10c>)
    3a76:	4798      	blx	r3

	config_extint_chan.gpio_pin           = FREQ_PIN;
    3a78:	2312      	movs	r3, #18
    3a7a:	9303      	str	r3, [sp, #12]
	config_extint_chan.gpio_pin_mux       = FREQ_MUX;
    3a7c:	2600      	movs	r6, #0
    3a7e:	606e      	str	r6, [r5, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
    3a80:	2702      	movs	r7, #2
    3a82:	722f      	strb	r7, [r5, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_HIGH;
    3a84:	3b0e      	subs	r3, #14
    3a86:	72eb      	strb	r3, [r5, #11]
	config_extint_chan.wake_if_sleeping   = 0;
    3a88:	726e      	strb	r6, [r5, #9]
	extint_chan_set_config(2, &config_extint_chan); //change first parameter to number of EXTINT channel
    3a8a:	0029      	movs	r1, r5
    3a8c:	2002      	movs	r0, #2
    3a8e:	4b1b      	ldr	r3, [pc, #108]	; (3afc <configure_event_controller+0x110>)
    3a90:	4798      	blx	r3
	eic_events.generate_event_on_detect[2] = 1; //change [2] to number of EXTINT channel
    3a92:	4b1b      	ldr	r3, [pc, #108]	; (3b00 <configure_event_controller+0x114>)
    3a94:	4642      	mov	r2, r8
    3a96:	709a      	strb	r2, [r3, #2]
	struct events_resource capture_event;
	struct events_config config_evt;
	events_get_config_defaults(&config_evt);
    3a98:	4668      	mov	r0, sp
    3a9a:	4b1a      	ldr	r3, [pc, #104]	; (3b04 <configure_event_controller+0x118>)
    3a9c:	4798      	blx	r3
	config_evt.generator      = BOARD_PHOTODIODE_GEN;
    3a9e:	230e      	movs	r3, #14
    3aa0:	466a      	mov	r2, sp
    3aa2:	7093      	strb	r3, [r2, #2]
	config_evt.edge_detect    = EVENTS_EDGE_DETECT_NONE;
    3aa4:	7016      	strb	r6, [r2, #0]
	config_evt.path           = EVENTS_PATH_ASYNCHRONOUS;
    3aa6:	7057      	strb	r7, [r2, #1]
	events_allocate(&capture_event, &config_evt);
    3aa8:	4669      	mov	r1, sp
    3aaa:	a801      	add	r0, sp, #4
    3aac:	4b16      	ldr	r3, [pc, #88]	; (3b08 <configure_event_controller+0x11c>)
    3aae:	4798      	blx	r3
	events_attach_user(&capture_event, EVSYS_ID_USER_TC4_EVU);
    3ab0:	2113      	movs	r1, #19
    3ab2:	a801      	add	r0, sp, #4
    3ab4:	4b15      	ldr	r3, [pc, #84]	; (3b0c <configure_event_controller+0x120>)
    3ab6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3ab8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3aba:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    3abc:	b25b      	sxtb	r3, r3
    3abe:	2b00      	cmp	r3, #0
    3ac0:	dbfb      	blt.n	3aba <configure_event_controller+0xce>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3ac2:	8813      	ldrh	r3, [r2, #0]
    3ac4:	2102      	movs	r1, #2
    3ac6:	430b      	orrs	r3, r1
    3ac8:	8013      	strh	r3, [r2, #0]
	//extint_enable_events(&eic_events);
	tc_enable(&capture_instance);
}
    3aca:	b006      	add	sp, #24
    3acc:	bc04      	pop	{r2}
    3ace:	4690      	mov	r8, r2
    3ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		event_mask |= TC_EVCTRL_OVFEO;
    3ad2:	2290      	movs	r2, #144	; 0x90
    3ad4:	0052      	lsls	r2, r2, #1
    3ad6:	4313      	orrs	r3, r2
    3ad8:	e79d      	b.n	3a16 <configure_event_controller+0x2a>
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	200007f8 	.word	0x200007f8
    3ae0:	200008a8 	.word	0x200008a8
    3ae4:	00003469 	.word	0x00003469
    3ae8:	00000ec9 	.word	0x00000ec9
    3aec:	00000f91 	.word	0x00000f91
    3af0:	00004414 	.word	0x00004414
    3af4:	e000e100 	.word	0xe000e100
    3af8:	0000043d 	.word	0x0000043d
    3afc:	00000451 	.word	0x00000451
    3b00:	20000888 	.word	0x20000888
    3b04:	00000281 	.word	0x00000281
    3b08:	00000291 	.word	0x00000291
    3b0c:	00000341 	.word	0x00000341

00003b10 <main>:

int main (void)
{
    3b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b12:	46d6      	mov	lr, sl
    3b14:	464f      	mov	r7, r9
    3b16:	4646      	mov	r6, r8
    3b18:	b5c0      	push	{r6, r7, lr}
    3b1a:	b090      	sub	sp, #64	; 0x40
	system_init();
    3b1c:	4bb3      	ldr	r3, [pc, #716]	; (3dec <main+0x2dc>)
    3b1e:	4798      	blx	r3
	board_init();
    3b20:	4bb3      	ldr	r3, [pc, #716]	; (3df0 <main+0x2e0>)
    3b22:	4798      	blx	r3
	configure_eeprom();
    3b24:	4bb3      	ldr	r3, [pc, #716]	; (3df4 <main+0x2e4>)
    3b26:	4798      	blx	r3
		struct bod_config *const conf)
{
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    3b28:	a90e      	add	r1, sp, #56	; 0x38
    3b2a:	2300      	movs	r3, #0
    3b2c:	4699      	mov	r9, r3
    3b2e:	2700      	movs	r7, #0
    3b30:	800b      	strh	r3, [r1, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
    3b32:	804b      	strh	r3, [r1, #2]
	conf->action         = BOD_ACTION_RESET;
	conf->level          = 0x27;
	conf->hysteresis     = true;
    3b34:	2601      	movs	r6, #1
    3b36:	718e      	strb	r6, [r1, #6]
	conf->run_in_standby = true;
    3b38:	71ce      	strb	r6, [r1, #7]
	config_bod33.action = BOD_ACTION_INTERRUPT;
    3b3a:	2310      	movs	r3, #16
    3b3c:	710b      	strb	r3, [r1, #4]
	config_bod33.level = 48;
    3b3e:	3320      	adds	r3, #32
    3b40:	714b      	strb	r3, [r1, #5]
	bod_set_config(BOD_BOD33, &config_bod33);
    3b42:	2000      	movs	r0, #0
    3b44:	4bac      	ldr	r3, [pc, #688]	; (3df8 <main+0x2e8>)
    3b46:	4798      	blx	r3
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
	switch (bod_id) {
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    3b48:	4bac      	ldr	r3, [pc, #688]	; (3dfc <main+0x2ec>)
    3b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3b4c:	2102      	movs	r1, #2
    3b4e:	430a      	orrs	r2, r1
    3b50:	635a      	str	r2, [r3, #52]	; 0x34
	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
    3b52:	2280      	movs	r2, #128	; 0x80
    3b54:	00d2      	lsls	r2, r2, #3
    3b56:	605a      	str	r2, [r3, #4]
    3b58:	4ba9      	ldr	r3, [pc, #676]	; (3e00 <main+0x2f0>)
    3b5a:	6019      	str	r1, [r3, #0]
	configure_bod();
	configure_terminal();
    3b5c:	4ba9      	ldr	r3, [pc, #676]	; (3e04 <main+0x2f4>)
    3b5e:	4798      	blx	r3
	configure_pinmux();
    3b60:	4ba9      	ldr	r3, [pc, #676]	; (3e08 <main+0x2f8>)
    3b62:	4798      	blx	r3
	configure_port_pins();
    3b64:	4ba9      	ldr	r3, [pc, #676]	; (3e0c <main+0x2fc>)
    3b66:	4798      	blx	r3
	configure_spi_master();
    3b68:	4ba9      	ldr	r3, [pc, #676]	; (3e10 <main+0x300>)
    3b6a:	4798      	blx	r3
	delay_init();
    3b6c:	4ba9      	ldr	r3, [pc, #676]	; (3e14 <main+0x304>)
    3b6e:	4798      	blx	r3
	configure_tc();
    3b70:	4ba9      	ldr	r3, [pc, #676]	; (3e18 <main+0x308>)
    3b72:	4798      	blx	r3
	configure_event_controller();
    3b74:	4ba9      	ldr	r3, [pc, #676]	; (3e1c <main+0x30c>)
    3b76:	4798      	blx	r3
	configure_rtc_count();
    3b78:	4ba9      	ldr	r3, [pc, #676]	; (3e20 <main+0x310>)
    3b7a:	4798      	blx	r3
	configure_rtc_callbacks();
    3b7c:	4ba9      	ldr	r3, [pc, #676]	; (3e24 <main+0x314>)
    3b7e:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, OFF_TIME);
    3b80:	49a9      	ldr	r1, [pc, #676]	; (3e28 <main+0x318>)
    3b82:	48aa      	ldr	r0, [pc, #680]	; (3e2c <main+0x31c>)
    3b84:	4baa      	ldr	r3, [pc, #680]	; (3e30 <main+0x320>)
    3b86:	4798      	blx	r3
		sleepmgr_locks[i] = 0;
    3b88:	4baa      	ldr	r3, [pc, #680]	; (3e34 <main+0x324>)
    3b8a:	701f      	strb	r7, [r3, #0]
    3b8c:	705f      	strb	r7, [r3, #1]
    3b8e:	709f      	strb	r7, [r3, #2]
    3b90:	70df      	strb	r7, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3b92:	711e      	strb	r6, [r3, #4]
	cpu_irq_enable();
    3b94:	4fa8      	ldr	r7, [pc, #672]	; (3e38 <main+0x328>)
    3b96:	703e      	strb	r6, [r7, #0]
    3b98:	f3bf 8f5f 	dmb	sy
    3b9c:	b662      	cpsie	i
	sleepmgr_init();
	system_interrupt_enable_global();
	send_data.master = spi_master_instance;
    3b9e:	4ba7      	ldr	r3, [pc, #668]	; (3e3c <main+0x32c>)
    3ba0:	4698      	mov	r8, r3
    3ba2:	223c      	movs	r2, #60	; 0x3c
    3ba4:	49a6      	ldr	r1, [pc, #664]	; (3e40 <main+0x330>)
    3ba6:	0018      	movs	r0, r3
    3ba8:	4ba6      	ldr	r3, [pc, #664]	; (3e44 <main+0x334>)
    3baa:	469a      	mov	sl, r3
    3bac:	4798      	blx	r3
	send_data.slave = slave;
    3bae:	4640      	mov	r0, r8
    3bb0:	303c      	adds	r0, #60	; 0x3c
    3bb2:	2203      	movs	r2, #3
    3bb4:	49a4      	ldr	r1, [pc, #656]	; (3e48 <main+0x338>)
    3bb6:	47d0      	blx	sl
	send_data.address = 0x000000;
    3bb8:	4643      	mov	r3, r8
    3bba:	464a      	mov	r2, r9
    3bbc:	641a      	str	r2, [r3, #64]	; 0x40
	send_data.data = wd_buffer;
    3bbe:	4ba3      	ldr	r3, [pc, #652]	; (3e4c <main+0x33c>)
    3bc0:	4642      	mov	r2, r8
    3bc2:	6453      	str	r3, [r2, #68]	; 0x44
	get_data.master = spi_master_instance;
    3bc4:	4ba2      	ldr	r3, [pc, #648]	; (3e50 <main+0x340>)
    3bc6:	4698      	mov	r8, r3
    3bc8:	223c      	movs	r2, #60	; 0x3c
    3bca:	499d      	ldr	r1, [pc, #628]	; (3e40 <main+0x330>)
    3bcc:	0018      	movs	r0, r3
    3bce:	47d0      	blx	sl
	get_data.slave = slave;
    3bd0:	4640      	mov	r0, r8
    3bd2:	303c      	adds	r0, #60	; 0x3c
    3bd4:	2203      	movs	r2, #3
    3bd6:	499c      	ldr	r1, [pc, #624]	; (3e48 <main+0x338>)
    3bd8:	47d0      	blx	sl
	get_data.address = 0x000000;
    3bda:	4643      	mov	r3, r8
    3bdc:	464a      	mov	r2, r9
    3bde:	641a      	str	r2, [r3, #64]	; 0x40
	get_data.data = rd_buffer;
    3be0:	4b9c      	ldr	r3, [pc, #624]	; (3e54 <main+0x344>)
    3be2:	4642      	mov	r2, r8
    3be4:	6453      	str	r3, [r2, #68]	; 0x44
    3be6:	2280      	movs	r2, #128	; 0x80
    3be8:	0492      	lsls	r2, r2, #18
    3bea:	4b9b      	ldr	r3, [pc, #620]	; (3e58 <main+0x348>)
    3bec:	619a      	str	r2, [r3, #24]
    3bee:	703e      	strb	r6, [r7, #0]
    3bf0:	f3bf 8f5f 	dmb	sy
    3bf4:	b662      	cpsie	i
	port_pin_set_output_level(FLASH_PWR,1);
	system_interrupt_enable_global();
	//usart_write_buffer_wait(&usart_terminal, "CHIP ERASED, STARTING PROGRAM\r\n", sizeof("CHIP ERASED, STARTING PROGRAM\r\n"));
	eeprom_emulator_read_page(0, page_data); //first time memory protection, page 0 is erase protect, page 1-3 is current addr, 4-7 is last time stamp.
    3bf6:	4e99      	ldr	r6, [pc, #612]	; (3e5c <main+0x34c>)
    3bf8:	0031      	movs	r1, r6
    3bfa:	2000      	movs	r0, #0
    3bfc:	4b98      	ldr	r3, [pc, #608]	; (3e60 <main+0x350>)
    3bfe:	4798      	blx	r3
	delay_s(10);
    3c00:	4898      	ldr	r0, [pc, #608]	; (3e64 <main+0x354>)
    3c02:	4b99      	ldr	r3, [pc, #612]	; (3e68 <main+0x358>)
    3c04:	4798      	blx	r3
	if(page_data[0] == 255 && (READ_MODE != 1)) {
    3c06:	7833      	ldrb	r3, [r6, #0]
    3c08:	2bff      	cmp	r3, #255	; 0xff
    3c0a:	d126      	bne.n	3c5a <main+0x14a>
		page_data[0] = 0;
    3c0c:	4993      	ldr	r1, [pc, #588]	; (3e5c <main+0x34c>)
    3c0e:	2300      	movs	r3, #0
    3c10:	700b      	strb	r3, [r1, #0]
		page_data[1] = 0;
    3c12:	704b      	strb	r3, [r1, #1]
		page_data[2] = 0;
    3c14:	708b      	strb	r3, [r1, #2]
		page_data[3] = 0;
    3c16:	70cb      	strb	r3, [r1, #3]
		eeprom_emulator_write_page(0, page_data);
    3c18:	2000      	movs	r0, #0
    3c1a:	4b94      	ldr	r3, [pc, #592]	; (3e6c <main+0x35c>)
    3c1c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    3c1e:	4b94      	ldr	r3, [pc, #592]	; (3e70 <main+0x360>)
    3c20:	4798      	blx	r3
		spi_erase_chip(send_data);
    3c22:	4e86      	ldr	r6, [pc, #536]	; (3e3c <main+0x32c>)
    3c24:	0031      	movs	r1, r6
    3c26:	3110      	adds	r1, #16
    3c28:	2238      	movs	r2, #56	; 0x38
    3c2a:	4668      	mov	r0, sp
    3c2c:	4b85      	ldr	r3, [pc, #532]	; (3e44 <main+0x334>)
    3c2e:	4798      	blx	r3
    3c30:	6830      	ldr	r0, [r6, #0]
    3c32:	6871      	ldr	r1, [r6, #4]
    3c34:	68b2      	ldr	r2, [r6, #8]
    3c36:	68f3      	ldr	r3, [r6, #12]
    3c38:	4e8e      	ldr	r6, [pc, #568]	; (3e74 <main+0x364>)
    3c3a:	47b0      	blx	r6
		usart_write_buffer_wait(&usart_terminal, "CHIP ERASED, STARTING PROGRAM\r\n", sizeof("CHIP ERASED, STARTING PROGRAM\r\n"));
    3c3c:	2220      	movs	r2, #32
    3c3e:	498e      	ldr	r1, [pc, #568]	; (3e78 <main+0x368>)
    3c40:	488e      	ldr	r0, [pc, #568]	; (3e7c <main+0x36c>)
    3c42:	4b8f      	ldr	r3, [pc, #572]	; (3e80 <main+0x370>)
    3c44:	4798      	blx	r3
		rollover = (page_data[4] | rollover) << 8;
		rollover = (page_data[5] | rollover) << 8;
		rollover = (page_data[6] | rollover) << 8;
		rollover = (page_data[7] | rollover);
	}
	sleepmgr_lock_mode(SLEEPMGR_STANDBY);
    3c46:	2004      	movs	r0, #4
    3c48:	4e8e      	ldr	r6, [pc, #568]	; (3e84 <main+0x374>)
    3c4a:	47b0      	blx	r6
	sleepmgr_lock_mode(SLEEPMGR_STANDBY);
    3c4c:	2004      	movs	r0, #4
    3c4e:	47b0      	blx	r6
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    3c50:	4b78      	ldr	r3, [pc, #480]	; (3e34 <main+0x324>)
    3c52:	791b      	ldrb	r3, [r3, #4]
    3c54:	2b00      	cmp	r3, #0
    3c56:	d11d      	bne.n	3c94 <main+0x184>
    3c58:	e7fe      	b.n	3c58 <main+0x148>
		send_data.address = page_data[1] | send_data.address;
    3c5a:	4a80      	ldr	r2, [pc, #512]	; (3e5c <main+0x34c>)
    3c5c:	7853      	ldrb	r3, [r2, #1]
    3c5e:	4977      	ldr	r1, [pc, #476]	; (3e3c <main+0x32c>)
    3c60:	6c08      	ldr	r0, [r1, #64]	; 0x40
    3c62:	4303      	orrs	r3, r0
		send_data.address = send_data.address << 8;
    3c64:	021b      	lsls	r3, r3, #8
		send_data.address = page_data[2] | send_data.address;
    3c66:	7890      	ldrb	r0, [r2, #2]
    3c68:	4303      	orrs	r3, r0
		send_data.address = send_data.address << 8;
    3c6a:	021b      	lsls	r3, r3, #8
		send_data.address = page_data[3] | send_data.address;
    3c6c:	78d0      	ldrb	r0, [r2, #3]
    3c6e:	4303      	orrs	r3, r0
    3c70:	640b      	str	r3, [r1, #64]	; 0x40
		get_data.address = send_data.address;
    3c72:	4977      	ldr	r1, [pc, #476]	; (3e50 <main+0x340>)
    3c74:	640b      	str	r3, [r1, #64]	; 0x40
		rollover = (page_data[7] | rollover);
    3c76:	4984      	ldr	r1, [pc, #528]	; (3e88 <main+0x378>)
		rollover = (page_data[4] | rollover) << 8;
    3c78:	7913      	ldrb	r3, [r2, #4]
    3c7a:	6808      	ldr	r0, [r1, #0]
    3c7c:	4303      	orrs	r3, r0
    3c7e:	021b      	lsls	r3, r3, #8
		rollover = (page_data[5] | rollover) << 8;
    3c80:	7950      	ldrb	r0, [r2, #5]
    3c82:	4303      	orrs	r3, r0
    3c84:	021b      	lsls	r3, r3, #8
		rollover = (page_data[6] | rollover) << 8;
    3c86:	7990      	ldrb	r0, [r2, #6]
    3c88:	4303      	orrs	r3, r0
    3c8a:	021b      	lsls	r3, r3, #8
		rollover = (page_data[7] | rollover);
    3c8c:	79d2      	ldrb	r2, [r2, #7]
    3c8e:	4313      	orrs	r3, r2
    3c90:	600b      	str	r3, [r1, #0]
    3c92:	e7d8      	b.n	3c46 <main+0x136>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c94:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3c98:	4253      	negs	r3, r2
    3c9a:	4153      	adcs	r3, r2
    3c9c:	930e      	str	r3, [sp, #56]	; 0x38
  __ASM volatile ("cpsid i" : : : "memory");
    3c9e:	b672      	cpsid	i
    3ca0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3ca4:	2200      	movs	r2, #0
    3ca6:	4b64      	ldr	r3, [pc, #400]	; (3e38 <main+0x328>)
    3ca8:	701a      	strb	r2, [r3, #0]
	return flags;
    3caa:	990e      	ldr	r1, [sp, #56]	; 0x38
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3cac:	4a61      	ldr	r2, [pc, #388]	; (3e34 <main+0x324>)
    3cae:	7913      	ldrb	r3, [r2, #4]
    3cb0:	3b01      	subs	r3, #1
    3cb2:	7113      	strb	r3, [r2, #4]
	if (cpu_irq_is_enabled_flags(flags))
    3cb4:	2900      	cmp	r1, #0
    3cb6:	d005      	beq.n	3cc4 <main+0x1b4>
		cpu_irq_enable();
    3cb8:	2201      	movs	r2, #1
    3cba:	4b5f      	ldr	r3, [pc, #380]	; (3e38 <main+0x328>)
    3cbc:	701a      	strb	r2, [r3, #0]
    3cbe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3cc2:	b662      	cpsie	i

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3cc4:	4b5b      	ldr	r3, [pc, #364]	; (3e34 <main+0x324>)
    3cc6:	781b      	ldrb	r3, [r3, #0]
    3cc8:	2b00      	cmp	r3, #0
    3cca:	d119      	bne.n	3d00 <main+0x1f0>
    3ccc:	4b59      	ldr	r3, [pc, #356]	; (3e34 <main+0x324>)
		lock_ptr++;
    3cce:	3301      	adds	r3, #1
	while (!(*lock_ptr)) {
    3cd0:	781a      	ldrb	r2, [r3, #0]
    3cd2:	2a00      	cmp	r2, #0
    3cd4:	d0fb      	beq.n	3cce <main+0x1be>
    3cd6:	2300      	movs	r3, #0
    3cd8:	4a56      	ldr	r2, [pc, #344]	; (3e34 <main+0x324>)
		lock_ptr++;
    3cda:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3cdc:	3301      	adds	r3, #1
    3cde:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    3ce0:	7811      	ldrb	r1, [r2, #0]
    3ce2:	2900      	cmp	r1, #0
    3ce4:	d0f9      	beq.n	3cda <main+0x1ca>
	sleepmgr_unlock_mode(SLEEPMGR_STANDBY);
	delta = sleepmgr_get_sleep_mode();
	delta = sleepmgr_get_sleep_mode();
    3ce6:	4a69      	ldr	r2, [pc, #420]	; (3e8c <main+0x37c>)
    3ce8:	7013      	strb	r3, [r2, #0]
		port_base->OUTCLR.reg = pin_mask;
    3cea:	2280      	movs	r2, #128	; 0x80
    3cec:	0492      	lsls	r2, r2, #18
    3cee:	4b5a      	ldr	r3, [pc, #360]	; (3e58 <main+0x348>)
    3cf0:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(FLASH_PWR,0);
	rtc_count_enable(&rtc_instance); //enable rtc and sleepmgr to start sleep clock
    3cf2:	484e      	ldr	r0, [pc, #312]	; (3e2c <main+0x31c>)
    3cf4:	4b66      	ldr	r3, [pc, #408]	; (3e90 <main+0x380>)
    3cf6:	4798      	blx	r3
		// 		if(page_data[0] >= 4){
		// 			usart_write_buffer_wait(&usart_terminal, "win", sizeof("win"));
		// 		}

		if(!READ_MODE){
			if(controlflag){
    3cf8:	4f66      	ldr	r7, [pc, #408]	; (3e94 <main+0x384>)
				controlflag = false;
    3cfa:	46b9      	mov	r9, r7
				extint_enable_events(&eic_events); //enable event controller and jump to capture callback.
    3cfc:	4e66      	ldr	r6, [pc, #408]	; (3e98 <main+0x388>)
    3cfe:	e023      	b.n	3d48 <main+0x238>
    3d00:	2300      	movs	r3, #0
    3d02:	e7f0      	b.n	3ce6 <main+0x1d6>
				controlflag = false;
    3d04:	2300      	movs	r3, #0
    3d06:	464a      	mov	r2, r9
    3d08:	7013      	strb	r3, [r2, #0]
				extint_enable_events(&eic_events); //enable event controller and jump to capture callback.
    3d0a:	4864      	ldr	r0, [pc, #400]	; (3e9c <main+0x38c>)
    3d0c:	47b0      	blx	r6
    3d0e:	e01e      	b.n	3d4e <main+0x23e>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3d10:	0019      	movs	r1, r3
		lock_ptr++;
    3d12:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3d14:	1c4b      	adds	r3, r1, #1
    3d16:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    3d18:	7810      	ldrb	r0, [r2, #0]
    3d1a:	2800      	cmp	r0, #0
    3d1c:	d0f8      	beq.n	3d10 <main+0x200>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d128      	bne.n	3d74 <main+0x264>
		cpu_irq_enable();
    3d22:	2201      	movs	r2, #1
    3d24:	4b44      	ldr	r3, [pc, #272]	; (3e38 <main+0x328>)
    3d26:	701a      	strb	r2, [r3, #0]
    3d28:	f3bf 8f5f 	dmb	sy
    3d2c:	b662      	cpsie	i
				sleepflag = false;
				sleepmgr_enter_sleep();
			}


			if(rtc_count_get_count(&rtc_instance) - timeout_timer > OFF_TIME){
    3d2e:	483f      	ldr	r0, [pc, #252]	; (3e2c <main+0x31c>)
    3d30:	4b5b      	ldr	r3, [pc, #364]	; (3ea0 <main+0x390>)
    3d32:	4798      	blx	r3
    3d34:	2500      	movs	r5, #0
    3d36:	4b5b      	ldr	r3, [pc, #364]	; (3ea4 <main+0x394>)
    3d38:	681a      	ldr	r2, [r3, #0]
    3d3a:	685b      	ldr	r3, [r3, #4]
    3d3c:	0029      	movs	r1, r5
    3d3e:	1a80      	subs	r0, r0, r2
    3d40:	4199      	sbcs	r1, r3
    3d42:	1e0a      	subs	r2, r1, #0
    3d44:	d147      	bne.n	3dd6 <main+0x2c6>
    3d46:	d043      	beq.n	3dd0 <main+0x2c0>
			if(controlflag){
    3d48:	783b      	ldrb	r3, [r7, #0]
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	d1da      	bne.n	3d04 <main+0x1f4>
			if(sleepflag == true){
    3d4e:	4b56      	ldr	r3, [pc, #344]	; (3ea8 <main+0x398>)
    3d50:	781b      	ldrb	r3, [r3, #0]
    3d52:	2b00      	cmp	r3, #0
    3d54:	d0eb      	beq.n	3d2e <main+0x21e>
				sleepflag = false;
    3d56:	2300      	movs	r3, #0
    3d58:	4a53      	ldr	r2, [pc, #332]	; (3ea8 <main+0x398>)
    3d5a:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3d5c:	b672      	cpsid	i
    3d5e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3d62:	4a35      	ldr	r2, [pc, #212]	; (3e38 <main+0x328>)
    3d64:	7013      	strb	r3, [r2, #0]
	while (!(*lock_ptr)) {
    3d66:	4b33      	ldr	r3, [pc, #204]	; (3e34 <main+0x324>)
    3d68:	781b      	ldrb	r3, [r3, #0]
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d1d9      	bne.n	3d22 <main+0x212>
    3d6e:	2100      	movs	r1, #0
    3d70:	4a30      	ldr	r2, [pc, #192]	; (3e34 <main+0x324>)
    3d72:	e7ce      	b.n	3d12 <main+0x202>
    3d74:	b672      	cpsid	i
    3d76:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    3d7a:	2200      	movs	r2, #0
    3d7c:	4b2e      	ldr	r3, [pc, #184]	; (3e38 <main+0x328>)
    3d7e:	701a      	strb	r2, [r3, #0]
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    3d80:	4b4a      	ldr	r3, [pc, #296]	; (3eac <main+0x39c>)
    3d82:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    3d84:	051b      	lsls	r3, r3, #20
    3d86:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    3d88:	2b02      	cmp	r3, #2
    3d8a:	d805      	bhi.n	3d98 <main+0x288>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    3d8c:	4a48      	ldr	r2, [pc, #288]	; (3eb0 <main+0x3a0>)
    3d8e:	6850      	ldr	r0, [r2, #4]
    3d90:	23c0      	movs	r3, #192	; 0xc0
    3d92:	009b      	lsls	r3, r3, #2
    3d94:	4303      	orrs	r3, r0
    3d96:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    3d98:	2902      	cmp	r1, #2
    3d9a:	d90b      	bls.n	3db4 <main+0x2a4>
    3d9c:	2903      	cmp	r1, #3
    3d9e:	d011      	beq.n	3dc4 <main+0x2b4>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    3da0:	2201      	movs	r2, #1
    3da2:	4b25      	ldr	r3, [pc, #148]	; (3e38 <main+0x328>)
    3da4:	701a      	strb	r2, [r3, #0]
    3da6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3daa:	b662      	cpsie	i
  __ASM volatile ("dsb");
    3dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    3db0:	bf30      	wfi
    3db2:	e7bc      	b.n	3d2e <main+0x21e>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3db4:	4a3f      	ldr	r2, [pc, #252]	; (3eb4 <main+0x3a4>)
    3db6:	6913      	ldr	r3, [r2, #16]
    3db8:	2004      	movs	r0, #4
    3dba:	4383      	bics	r3, r0
    3dbc:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    3dbe:	4b3e      	ldr	r3, [pc, #248]	; (3eb8 <main+0x3a8>)
    3dc0:	7059      	strb	r1, [r3, #1]
    3dc2:	e7ed      	b.n	3da0 <main+0x290>
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    3dc4:	4a3b      	ldr	r2, [pc, #236]	; (3eb4 <main+0x3a4>)
    3dc6:	6913      	ldr	r3, [r2, #16]
    3dc8:	2104      	movs	r1, #4
    3dca:	430b      	orrs	r3, r1
    3dcc:	6113      	str	r3, [r2, #16]
    3dce:	e7e7      	b.n	3da0 <main+0x290>
			if(rtc_count_get_count(&rtc_instance) - timeout_timer > OFF_TIME){
    3dd0:	4b15      	ldr	r3, [pc, #84]	; (3e28 <main+0x318>)
    3dd2:	4298      	cmp	r0, r3
    3dd4:	d9b8      	bls.n	3d48 <main+0x238>
				sleepflag = true;
    3dd6:	2201      	movs	r2, #1
    3dd8:	4b33      	ldr	r3, [pc, #204]	; (3ea8 <main+0x398>)
    3dda:	701a      	strb	r2, [r3, #0]
				extint_disable_events(&eic_events);
    3ddc:	482f      	ldr	r0, [pc, #188]	; (3e9c <main+0x38c>)
    3dde:	4b37      	ldr	r3, [pc, #220]	; (3ebc <main+0x3ac>)
    3de0:	4798      	blx	r3
    3de2:	2280      	movs	r2, #128	; 0x80
    3de4:	0252      	lsls	r2, r2, #9
    3de6:	4b1c      	ldr	r3, [pc, #112]	; (3e58 <main+0x348>)
    3de8:	615a      	str	r2, [r3, #20]
    3dea:	e7ad      	b.n	3d48 <main+0x238>
    3dec:	000032ad 	.word	0x000032ad
    3df0:	000029dd 	.word	0x000029dd
    3df4:	000036ed 	.word	0x000036ed
    3df8:	000001ad 	.word	0x000001ad
    3dfc:	40000800 	.word	0x40000800
    3e00:	e000e100 	.word	0xe000e100
    3e04:	00003735 	.word	0x00003735
    3e08:	0000383d 	.word	0x0000383d
    3e0c:	000037f1 	.word	0x000037f1
    3e10:	00003861 	.word	0x00003861
    3e14:	00000115 	.word	0x00000115
    3e18:	00003945 	.word	0x00003945
    3e1c:	000039ed 	.word	0x000039ed
    3e20:	00003995 	.word	0x00003995
    3e24:	000039c5 	.word	0x000039c5
    3e28:	00001388 	.word	0x00001388
    3e2c:	200006dc 	.word	0x200006dc
    3e30:	00000ae5 	.word	0x00000ae5
    3e34:	20000540 	.word	0x20000540
    3e38:	2000001c 	.word	0x2000001c
    3e3c:	20000800 	.word	0x20000800
    3e40:	20000848 	.word	0x20000848
    3e44:	00004249 	.word	0x00004249
    3e48:	20000884 	.word	0x20000884
    3e4c:	20000440 	.word	0x20000440
    3e50:	20000728 	.word	0x20000728
    3e54:	20000320 	.word	0x20000320
    3e58:	41004400 	.word	0x41004400
    3e5c:	20000770 	.word	0x20000770
    3e60:	00001599 	.word	0x00001599
    3e64:	00002710 	.word	0x00002710
    3e68:	00000181 	.word	0x00000181
    3e6c:	00001631 	.word	0x00001631
    3e70:	00001601 	.word	0x00001601
    3e74:	00001825 	.word	0x00001825
    3e78:	000043f4 	.word	0x000043f4
    3e7c:	200007bc 	.word	0x200007bc
    3e80:	00001d05 	.word	0x00001d05
    3e84:	000033c1 	.word	0x000033c1
    3e88:	20000428 	.word	0x20000428
    3e8c:	2000014c 	.word	0x2000014c
    3e90:	000008d1 	.word	0x000008d1
    3e94:	20000148 	.word	0x20000148
    3e98:	000004c9 	.word	0x000004c9
    3e9c:	20000888 	.word	0x20000888
    3ea0:	00000955 	.word	0x00000955
    3ea4:	20000438 	.word	0x20000438
    3ea8:	20000430 	.word	0x20000430
    3eac:	41002000 	.word	0x41002000
    3eb0:	41004000 	.word	0x41004000
    3eb4:	e000ed00 	.word	0xe000ed00
    3eb8:	40000400 	.word	0x40000400
    3ebc:	000004f5 	.word	0x000004f5

00003ec0 <__udivsi3>:
    3ec0:	2200      	movs	r2, #0
    3ec2:	0843      	lsrs	r3, r0, #1
    3ec4:	428b      	cmp	r3, r1
    3ec6:	d374      	bcc.n	3fb2 <__udivsi3+0xf2>
    3ec8:	0903      	lsrs	r3, r0, #4
    3eca:	428b      	cmp	r3, r1
    3ecc:	d35f      	bcc.n	3f8e <__udivsi3+0xce>
    3ece:	0a03      	lsrs	r3, r0, #8
    3ed0:	428b      	cmp	r3, r1
    3ed2:	d344      	bcc.n	3f5e <__udivsi3+0x9e>
    3ed4:	0b03      	lsrs	r3, r0, #12
    3ed6:	428b      	cmp	r3, r1
    3ed8:	d328      	bcc.n	3f2c <__udivsi3+0x6c>
    3eda:	0c03      	lsrs	r3, r0, #16
    3edc:	428b      	cmp	r3, r1
    3ede:	d30d      	bcc.n	3efc <__udivsi3+0x3c>
    3ee0:	22ff      	movs	r2, #255	; 0xff
    3ee2:	0209      	lsls	r1, r1, #8
    3ee4:	ba12      	rev	r2, r2
    3ee6:	0c03      	lsrs	r3, r0, #16
    3ee8:	428b      	cmp	r3, r1
    3eea:	d302      	bcc.n	3ef2 <__udivsi3+0x32>
    3eec:	1212      	asrs	r2, r2, #8
    3eee:	0209      	lsls	r1, r1, #8
    3ef0:	d065      	beq.n	3fbe <__udivsi3+0xfe>
    3ef2:	0b03      	lsrs	r3, r0, #12
    3ef4:	428b      	cmp	r3, r1
    3ef6:	d319      	bcc.n	3f2c <__udivsi3+0x6c>
    3ef8:	e000      	b.n	3efc <__udivsi3+0x3c>
    3efa:	0a09      	lsrs	r1, r1, #8
    3efc:	0bc3      	lsrs	r3, r0, #15
    3efe:	428b      	cmp	r3, r1
    3f00:	d301      	bcc.n	3f06 <__udivsi3+0x46>
    3f02:	03cb      	lsls	r3, r1, #15
    3f04:	1ac0      	subs	r0, r0, r3
    3f06:	4152      	adcs	r2, r2
    3f08:	0b83      	lsrs	r3, r0, #14
    3f0a:	428b      	cmp	r3, r1
    3f0c:	d301      	bcc.n	3f12 <__udivsi3+0x52>
    3f0e:	038b      	lsls	r3, r1, #14
    3f10:	1ac0      	subs	r0, r0, r3
    3f12:	4152      	adcs	r2, r2
    3f14:	0b43      	lsrs	r3, r0, #13
    3f16:	428b      	cmp	r3, r1
    3f18:	d301      	bcc.n	3f1e <__udivsi3+0x5e>
    3f1a:	034b      	lsls	r3, r1, #13
    3f1c:	1ac0      	subs	r0, r0, r3
    3f1e:	4152      	adcs	r2, r2
    3f20:	0b03      	lsrs	r3, r0, #12
    3f22:	428b      	cmp	r3, r1
    3f24:	d301      	bcc.n	3f2a <__udivsi3+0x6a>
    3f26:	030b      	lsls	r3, r1, #12
    3f28:	1ac0      	subs	r0, r0, r3
    3f2a:	4152      	adcs	r2, r2
    3f2c:	0ac3      	lsrs	r3, r0, #11
    3f2e:	428b      	cmp	r3, r1
    3f30:	d301      	bcc.n	3f36 <__udivsi3+0x76>
    3f32:	02cb      	lsls	r3, r1, #11
    3f34:	1ac0      	subs	r0, r0, r3
    3f36:	4152      	adcs	r2, r2
    3f38:	0a83      	lsrs	r3, r0, #10
    3f3a:	428b      	cmp	r3, r1
    3f3c:	d301      	bcc.n	3f42 <__udivsi3+0x82>
    3f3e:	028b      	lsls	r3, r1, #10
    3f40:	1ac0      	subs	r0, r0, r3
    3f42:	4152      	adcs	r2, r2
    3f44:	0a43      	lsrs	r3, r0, #9
    3f46:	428b      	cmp	r3, r1
    3f48:	d301      	bcc.n	3f4e <__udivsi3+0x8e>
    3f4a:	024b      	lsls	r3, r1, #9
    3f4c:	1ac0      	subs	r0, r0, r3
    3f4e:	4152      	adcs	r2, r2
    3f50:	0a03      	lsrs	r3, r0, #8
    3f52:	428b      	cmp	r3, r1
    3f54:	d301      	bcc.n	3f5a <__udivsi3+0x9a>
    3f56:	020b      	lsls	r3, r1, #8
    3f58:	1ac0      	subs	r0, r0, r3
    3f5a:	4152      	adcs	r2, r2
    3f5c:	d2cd      	bcs.n	3efa <__udivsi3+0x3a>
    3f5e:	09c3      	lsrs	r3, r0, #7
    3f60:	428b      	cmp	r3, r1
    3f62:	d301      	bcc.n	3f68 <__udivsi3+0xa8>
    3f64:	01cb      	lsls	r3, r1, #7
    3f66:	1ac0      	subs	r0, r0, r3
    3f68:	4152      	adcs	r2, r2
    3f6a:	0983      	lsrs	r3, r0, #6
    3f6c:	428b      	cmp	r3, r1
    3f6e:	d301      	bcc.n	3f74 <__udivsi3+0xb4>
    3f70:	018b      	lsls	r3, r1, #6
    3f72:	1ac0      	subs	r0, r0, r3
    3f74:	4152      	adcs	r2, r2
    3f76:	0943      	lsrs	r3, r0, #5
    3f78:	428b      	cmp	r3, r1
    3f7a:	d301      	bcc.n	3f80 <__udivsi3+0xc0>
    3f7c:	014b      	lsls	r3, r1, #5
    3f7e:	1ac0      	subs	r0, r0, r3
    3f80:	4152      	adcs	r2, r2
    3f82:	0903      	lsrs	r3, r0, #4
    3f84:	428b      	cmp	r3, r1
    3f86:	d301      	bcc.n	3f8c <__udivsi3+0xcc>
    3f88:	010b      	lsls	r3, r1, #4
    3f8a:	1ac0      	subs	r0, r0, r3
    3f8c:	4152      	adcs	r2, r2
    3f8e:	08c3      	lsrs	r3, r0, #3
    3f90:	428b      	cmp	r3, r1
    3f92:	d301      	bcc.n	3f98 <__udivsi3+0xd8>
    3f94:	00cb      	lsls	r3, r1, #3
    3f96:	1ac0      	subs	r0, r0, r3
    3f98:	4152      	adcs	r2, r2
    3f9a:	0883      	lsrs	r3, r0, #2
    3f9c:	428b      	cmp	r3, r1
    3f9e:	d301      	bcc.n	3fa4 <__udivsi3+0xe4>
    3fa0:	008b      	lsls	r3, r1, #2
    3fa2:	1ac0      	subs	r0, r0, r3
    3fa4:	4152      	adcs	r2, r2
    3fa6:	0843      	lsrs	r3, r0, #1
    3fa8:	428b      	cmp	r3, r1
    3faa:	d301      	bcc.n	3fb0 <__udivsi3+0xf0>
    3fac:	004b      	lsls	r3, r1, #1
    3fae:	1ac0      	subs	r0, r0, r3
    3fb0:	4152      	adcs	r2, r2
    3fb2:	1a41      	subs	r1, r0, r1
    3fb4:	d200      	bcs.n	3fb8 <__udivsi3+0xf8>
    3fb6:	4601      	mov	r1, r0
    3fb8:	4152      	adcs	r2, r2
    3fba:	4610      	mov	r0, r2
    3fbc:	4770      	bx	lr
    3fbe:	e7ff      	b.n	3fc0 <__udivsi3+0x100>
    3fc0:	b501      	push	{r0, lr}
    3fc2:	2000      	movs	r0, #0
    3fc4:	f000 f8f0 	bl	41a8 <__aeabi_idiv0>
    3fc8:	bd02      	pop	{r1, pc}
    3fca:	46c0      	nop			; (mov r8, r8)

00003fcc <__aeabi_uidivmod>:
    3fcc:	2900      	cmp	r1, #0
    3fce:	d0f7      	beq.n	3fc0 <__udivsi3+0x100>
    3fd0:	e776      	b.n	3ec0 <__udivsi3>
    3fd2:	4770      	bx	lr

00003fd4 <__divsi3>:
    3fd4:	4603      	mov	r3, r0
    3fd6:	430b      	orrs	r3, r1
    3fd8:	d47f      	bmi.n	40da <__divsi3+0x106>
    3fda:	2200      	movs	r2, #0
    3fdc:	0843      	lsrs	r3, r0, #1
    3fde:	428b      	cmp	r3, r1
    3fe0:	d374      	bcc.n	40cc <__divsi3+0xf8>
    3fe2:	0903      	lsrs	r3, r0, #4
    3fe4:	428b      	cmp	r3, r1
    3fe6:	d35f      	bcc.n	40a8 <__divsi3+0xd4>
    3fe8:	0a03      	lsrs	r3, r0, #8
    3fea:	428b      	cmp	r3, r1
    3fec:	d344      	bcc.n	4078 <__divsi3+0xa4>
    3fee:	0b03      	lsrs	r3, r0, #12
    3ff0:	428b      	cmp	r3, r1
    3ff2:	d328      	bcc.n	4046 <__divsi3+0x72>
    3ff4:	0c03      	lsrs	r3, r0, #16
    3ff6:	428b      	cmp	r3, r1
    3ff8:	d30d      	bcc.n	4016 <__divsi3+0x42>
    3ffa:	22ff      	movs	r2, #255	; 0xff
    3ffc:	0209      	lsls	r1, r1, #8
    3ffe:	ba12      	rev	r2, r2
    4000:	0c03      	lsrs	r3, r0, #16
    4002:	428b      	cmp	r3, r1
    4004:	d302      	bcc.n	400c <__divsi3+0x38>
    4006:	1212      	asrs	r2, r2, #8
    4008:	0209      	lsls	r1, r1, #8
    400a:	d065      	beq.n	40d8 <__divsi3+0x104>
    400c:	0b03      	lsrs	r3, r0, #12
    400e:	428b      	cmp	r3, r1
    4010:	d319      	bcc.n	4046 <__divsi3+0x72>
    4012:	e000      	b.n	4016 <__divsi3+0x42>
    4014:	0a09      	lsrs	r1, r1, #8
    4016:	0bc3      	lsrs	r3, r0, #15
    4018:	428b      	cmp	r3, r1
    401a:	d301      	bcc.n	4020 <__divsi3+0x4c>
    401c:	03cb      	lsls	r3, r1, #15
    401e:	1ac0      	subs	r0, r0, r3
    4020:	4152      	adcs	r2, r2
    4022:	0b83      	lsrs	r3, r0, #14
    4024:	428b      	cmp	r3, r1
    4026:	d301      	bcc.n	402c <__divsi3+0x58>
    4028:	038b      	lsls	r3, r1, #14
    402a:	1ac0      	subs	r0, r0, r3
    402c:	4152      	adcs	r2, r2
    402e:	0b43      	lsrs	r3, r0, #13
    4030:	428b      	cmp	r3, r1
    4032:	d301      	bcc.n	4038 <__divsi3+0x64>
    4034:	034b      	lsls	r3, r1, #13
    4036:	1ac0      	subs	r0, r0, r3
    4038:	4152      	adcs	r2, r2
    403a:	0b03      	lsrs	r3, r0, #12
    403c:	428b      	cmp	r3, r1
    403e:	d301      	bcc.n	4044 <__divsi3+0x70>
    4040:	030b      	lsls	r3, r1, #12
    4042:	1ac0      	subs	r0, r0, r3
    4044:	4152      	adcs	r2, r2
    4046:	0ac3      	lsrs	r3, r0, #11
    4048:	428b      	cmp	r3, r1
    404a:	d301      	bcc.n	4050 <__divsi3+0x7c>
    404c:	02cb      	lsls	r3, r1, #11
    404e:	1ac0      	subs	r0, r0, r3
    4050:	4152      	adcs	r2, r2
    4052:	0a83      	lsrs	r3, r0, #10
    4054:	428b      	cmp	r3, r1
    4056:	d301      	bcc.n	405c <__divsi3+0x88>
    4058:	028b      	lsls	r3, r1, #10
    405a:	1ac0      	subs	r0, r0, r3
    405c:	4152      	adcs	r2, r2
    405e:	0a43      	lsrs	r3, r0, #9
    4060:	428b      	cmp	r3, r1
    4062:	d301      	bcc.n	4068 <__divsi3+0x94>
    4064:	024b      	lsls	r3, r1, #9
    4066:	1ac0      	subs	r0, r0, r3
    4068:	4152      	adcs	r2, r2
    406a:	0a03      	lsrs	r3, r0, #8
    406c:	428b      	cmp	r3, r1
    406e:	d301      	bcc.n	4074 <__divsi3+0xa0>
    4070:	020b      	lsls	r3, r1, #8
    4072:	1ac0      	subs	r0, r0, r3
    4074:	4152      	adcs	r2, r2
    4076:	d2cd      	bcs.n	4014 <__divsi3+0x40>
    4078:	09c3      	lsrs	r3, r0, #7
    407a:	428b      	cmp	r3, r1
    407c:	d301      	bcc.n	4082 <__divsi3+0xae>
    407e:	01cb      	lsls	r3, r1, #7
    4080:	1ac0      	subs	r0, r0, r3
    4082:	4152      	adcs	r2, r2
    4084:	0983      	lsrs	r3, r0, #6
    4086:	428b      	cmp	r3, r1
    4088:	d301      	bcc.n	408e <__divsi3+0xba>
    408a:	018b      	lsls	r3, r1, #6
    408c:	1ac0      	subs	r0, r0, r3
    408e:	4152      	adcs	r2, r2
    4090:	0943      	lsrs	r3, r0, #5
    4092:	428b      	cmp	r3, r1
    4094:	d301      	bcc.n	409a <__divsi3+0xc6>
    4096:	014b      	lsls	r3, r1, #5
    4098:	1ac0      	subs	r0, r0, r3
    409a:	4152      	adcs	r2, r2
    409c:	0903      	lsrs	r3, r0, #4
    409e:	428b      	cmp	r3, r1
    40a0:	d301      	bcc.n	40a6 <__divsi3+0xd2>
    40a2:	010b      	lsls	r3, r1, #4
    40a4:	1ac0      	subs	r0, r0, r3
    40a6:	4152      	adcs	r2, r2
    40a8:	08c3      	lsrs	r3, r0, #3
    40aa:	428b      	cmp	r3, r1
    40ac:	d301      	bcc.n	40b2 <__divsi3+0xde>
    40ae:	00cb      	lsls	r3, r1, #3
    40b0:	1ac0      	subs	r0, r0, r3
    40b2:	4152      	adcs	r2, r2
    40b4:	0883      	lsrs	r3, r0, #2
    40b6:	428b      	cmp	r3, r1
    40b8:	d301      	bcc.n	40be <__divsi3+0xea>
    40ba:	008b      	lsls	r3, r1, #2
    40bc:	1ac0      	subs	r0, r0, r3
    40be:	4152      	adcs	r2, r2
    40c0:	0843      	lsrs	r3, r0, #1
    40c2:	428b      	cmp	r3, r1
    40c4:	d301      	bcc.n	40ca <__divsi3+0xf6>
    40c6:	004b      	lsls	r3, r1, #1
    40c8:	1ac0      	subs	r0, r0, r3
    40ca:	4152      	adcs	r2, r2
    40cc:	1a41      	subs	r1, r0, r1
    40ce:	d200      	bcs.n	40d2 <__divsi3+0xfe>
    40d0:	4601      	mov	r1, r0
    40d2:	4152      	adcs	r2, r2
    40d4:	4610      	mov	r0, r2
    40d6:	4770      	bx	lr
    40d8:	e05d      	b.n	4196 <__divsi3+0x1c2>
    40da:	0fca      	lsrs	r2, r1, #31
    40dc:	d000      	beq.n	40e0 <__divsi3+0x10c>
    40de:	4249      	negs	r1, r1
    40e0:	1003      	asrs	r3, r0, #32
    40e2:	d300      	bcc.n	40e6 <__divsi3+0x112>
    40e4:	4240      	negs	r0, r0
    40e6:	4053      	eors	r3, r2
    40e8:	2200      	movs	r2, #0
    40ea:	469c      	mov	ip, r3
    40ec:	0903      	lsrs	r3, r0, #4
    40ee:	428b      	cmp	r3, r1
    40f0:	d32d      	bcc.n	414e <__divsi3+0x17a>
    40f2:	0a03      	lsrs	r3, r0, #8
    40f4:	428b      	cmp	r3, r1
    40f6:	d312      	bcc.n	411e <__divsi3+0x14a>
    40f8:	22fc      	movs	r2, #252	; 0xfc
    40fa:	0189      	lsls	r1, r1, #6
    40fc:	ba12      	rev	r2, r2
    40fe:	0a03      	lsrs	r3, r0, #8
    4100:	428b      	cmp	r3, r1
    4102:	d30c      	bcc.n	411e <__divsi3+0x14a>
    4104:	0189      	lsls	r1, r1, #6
    4106:	1192      	asrs	r2, r2, #6
    4108:	428b      	cmp	r3, r1
    410a:	d308      	bcc.n	411e <__divsi3+0x14a>
    410c:	0189      	lsls	r1, r1, #6
    410e:	1192      	asrs	r2, r2, #6
    4110:	428b      	cmp	r3, r1
    4112:	d304      	bcc.n	411e <__divsi3+0x14a>
    4114:	0189      	lsls	r1, r1, #6
    4116:	d03a      	beq.n	418e <__divsi3+0x1ba>
    4118:	1192      	asrs	r2, r2, #6
    411a:	e000      	b.n	411e <__divsi3+0x14a>
    411c:	0989      	lsrs	r1, r1, #6
    411e:	09c3      	lsrs	r3, r0, #7
    4120:	428b      	cmp	r3, r1
    4122:	d301      	bcc.n	4128 <__divsi3+0x154>
    4124:	01cb      	lsls	r3, r1, #7
    4126:	1ac0      	subs	r0, r0, r3
    4128:	4152      	adcs	r2, r2
    412a:	0983      	lsrs	r3, r0, #6
    412c:	428b      	cmp	r3, r1
    412e:	d301      	bcc.n	4134 <__divsi3+0x160>
    4130:	018b      	lsls	r3, r1, #6
    4132:	1ac0      	subs	r0, r0, r3
    4134:	4152      	adcs	r2, r2
    4136:	0943      	lsrs	r3, r0, #5
    4138:	428b      	cmp	r3, r1
    413a:	d301      	bcc.n	4140 <__divsi3+0x16c>
    413c:	014b      	lsls	r3, r1, #5
    413e:	1ac0      	subs	r0, r0, r3
    4140:	4152      	adcs	r2, r2
    4142:	0903      	lsrs	r3, r0, #4
    4144:	428b      	cmp	r3, r1
    4146:	d301      	bcc.n	414c <__divsi3+0x178>
    4148:	010b      	lsls	r3, r1, #4
    414a:	1ac0      	subs	r0, r0, r3
    414c:	4152      	adcs	r2, r2
    414e:	08c3      	lsrs	r3, r0, #3
    4150:	428b      	cmp	r3, r1
    4152:	d301      	bcc.n	4158 <__divsi3+0x184>
    4154:	00cb      	lsls	r3, r1, #3
    4156:	1ac0      	subs	r0, r0, r3
    4158:	4152      	adcs	r2, r2
    415a:	0883      	lsrs	r3, r0, #2
    415c:	428b      	cmp	r3, r1
    415e:	d301      	bcc.n	4164 <__divsi3+0x190>
    4160:	008b      	lsls	r3, r1, #2
    4162:	1ac0      	subs	r0, r0, r3
    4164:	4152      	adcs	r2, r2
    4166:	d2d9      	bcs.n	411c <__divsi3+0x148>
    4168:	0843      	lsrs	r3, r0, #1
    416a:	428b      	cmp	r3, r1
    416c:	d301      	bcc.n	4172 <__divsi3+0x19e>
    416e:	004b      	lsls	r3, r1, #1
    4170:	1ac0      	subs	r0, r0, r3
    4172:	4152      	adcs	r2, r2
    4174:	1a41      	subs	r1, r0, r1
    4176:	d200      	bcs.n	417a <__divsi3+0x1a6>
    4178:	4601      	mov	r1, r0
    417a:	4663      	mov	r3, ip
    417c:	4152      	adcs	r2, r2
    417e:	105b      	asrs	r3, r3, #1
    4180:	4610      	mov	r0, r2
    4182:	d301      	bcc.n	4188 <__divsi3+0x1b4>
    4184:	4240      	negs	r0, r0
    4186:	2b00      	cmp	r3, #0
    4188:	d500      	bpl.n	418c <__divsi3+0x1b8>
    418a:	4249      	negs	r1, r1
    418c:	4770      	bx	lr
    418e:	4663      	mov	r3, ip
    4190:	105b      	asrs	r3, r3, #1
    4192:	d300      	bcc.n	4196 <__divsi3+0x1c2>
    4194:	4240      	negs	r0, r0
    4196:	b501      	push	{r0, lr}
    4198:	2000      	movs	r0, #0
    419a:	f000 f805 	bl	41a8 <__aeabi_idiv0>
    419e:	bd02      	pop	{r1, pc}

000041a0 <__aeabi_idivmod>:
    41a0:	2900      	cmp	r1, #0
    41a2:	d0f8      	beq.n	4196 <__divsi3+0x1c2>
    41a4:	e716      	b.n	3fd4 <__divsi3>
    41a6:	4770      	bx	lr

000041a8 <__aeabi_idiv0>:
    41a8:	4770      	bx	lr
    41aa:	46c0      	nop			; (mov r8, r8)

000041ac <__aeabi_lmul>:
    41ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ae:	46ce      	mov	lr, r9
    41b0:	4647      	mov	r7, r8
    41b2:	0415      	lsls	r5, r2, #16
    41b4:	0c2d      	lsrs	r5, r5, #16
    41b6:	002e      	movs	r6, r5
    41b8:	b580      	push	{r7, lr}
    41ba:	0407      	lsls	r7, r0, #16
    41bc:	0c14      	lsrs	r4, r2, #16
    41be:	0c3f      	lsrs	r7, r7, #16
    41c0:	4699      	mov	r9, r3
    41c2:	0c03      	lsrs	r3, r0, #16
    41c4:	437e      	muls	r6, r7
    41c6:	435d      	muls	r5, r3
    41c8:	4367      	muls	r7, r4
    41ca:	4363      	muls	r3, r4
    41cc:	197f      	adds	r7, r7, r5
    41ce:	0c34      	lsrs	r4, r6, #16
    41d0:	19e4      	adds	r4, r4, r7
    41d2:	469c      	mov	ip, r3
    41d4:	42a5      	cmp	r5, r4
    41d6:	d903      	bls.n	41e0 <__aeabi_lmul+0x34>
    41d8:	2380      	movs	r3, #128	; 0x80
    41da:	025b      	lsls	r3, r3, #9
    41dc:	4698      	mov	r8, r3
    41de:	44c4      	add	ip, r8
    41e0:	464b      	mov	r3, r9
    41e2:	4351      	muls	r1, r2
    41e4:	4343      	muls	r3, r0
    41e6:	0436      	lsls	r6, r6, #16
    41e8:	0c36      	lsrs	r6, r6, #16
    41ea:	0c25      	lsrs	r5, r4, #16
    41ec:	0424      	lsls	r4, r4, #16
    41ee:	4465      	add	r5, ip
    41f0:	19a4      	adds	r4, r4, r6
    41f2:	1859      	adds	r1, r3, r1
    41f4:	1949      	adds	r1, r1, r5
    41f6:	0020      	movs	r0, r4
    41f8:	bc0c      	pop	{r2, r3}
    41fa:	4690      	mov	r8, r2
    41fc:	4699      	mov	r9, r3
    41fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004200 <__libc_init_array>:
    4200:	b570      	push	{r4, r5, r6, lr}
    4202:	2600      	movs	r6, #0
    4204:	4d0c      	ldr	r5, [pc, #48]	; (4238 <__libc_init_array+0x38>)
    4206:	4c0d      	ldr	r4, [pc, #52]	; (423c <__libc_init_array+0x3c>)
    4208:	1b64      	subs	r4, r4, r5
    420a:	10a4      	asrs	r4, r4, #2
    420c:	42a6      	cmp	r6, r4
    420e:	d109      	bne.n	4224 <__libc_init_array+0x24>
    4210:	2600      	movs	r6, #0
    4212:	f000 f901 	bl	4418 <_init>
    4216:	4d0a      	ldr	r5, [pc, #40]	; (4240 <__libc_init_array+0x40>)
    4218:	4c0a      	ldr	r4, [pc, #40]	; (4244 <__libc_init_array+0x44>)
    421a:	1b64      	subs	r4, r4, r5
    421c:	10a4      	asrs	r4, r4, #2
    421e:	42a6      	cmp	r6, r4
    4220:	d105      	bne.n	422e <__libc_init_array+0x2e>
    4222:	bd70      	pop	{r4, r5, r6, pc}
    4224:	00b3      	lsls	r3, r6, #2
    4226:	58eb      	ldr	r3, [r5, r3]
    4228:	4798      	blx	r3
    422a:	3601      	adds	r6, #1
    422c:	e7ee      	b.n	420c <__libc_init_array+0xc>
    422e:	00b3      	lsls	r3, r6, #2
    4230:	58eb      	ldr	r3, [r5, r3]
    4232:	4798      	blx	r3
    4234:	3601      	adds	r6, #1
    4236:	e7f2      	b.n	421e <__libc_init_array+0x1e>
    4238:	00004424 	.word	0x00004424
    423c:	00004424 	.word	0x00004424
    4240:	00004424 	.word	0x00004424
    4244:	00004428 	.word	0x00004428

00004248 <memcpy>:
    4248:	2300      	movs	r3, #0
    424a:	b510      	push	{r4, lr}
    424c:	429a      	cmp	r2, r3
    424e:	d100      	bne.n	4252 <memcpy+0xa>
    4250:	bd10      	pop	{r4, pc}
    4252:	5ccc      	ldrb	r4, [r1, r3]
    4254:	54c4      	strb	r4, [r0, r3]
    4256:	3301      	adds	r3, #1
    4258:	e7f8      	b.n	424c <memcpy+0x4>

0000425a <memset>:
    425a:	0003      	movs	r3, r0
    425c:	1882      	adds	r2, r0, r2
    425e:	4293      	cmp	r3, r2
    4260:	d100      	bne.n	4264 <memset+0xa>
    4262:	4770      	bx	lr
    4264:	7019      	strb	r1, [r3, #0]
    4266:	3301      	adds	r3, #1
    4268:	e7f9      	b.n	425e <memset+0x4>
    426a:	0000      	movs	r0, r0
    426c:	0000063a 	.word	0x0000063a
    4270:	0000063a 	.word	0x0000063a
    4274:	00000616 	.word	0x00000616
    4278:	0000063a 	.word	0x0000063a
    427c:	00000616 	.word	0x00000616
    4280:	000005fc 	.word	0x000005fc
    4284:	000005fc 	.word	0x000005fc
    4288:	0000063a 	.word	0x0000063a
    428c:	0000063a 	.word	0x0000063a
    4290:	0000063a 	.word	0x0000063a
    4294:	0000063a 	.word	0x0000063a
    4298:	0000063a 	.word	0x0000063a
    429c:	0000063a 	.word	0x0000063a
    42a0:	0000063a 	.word	0x0000063a
    42a4:	0000063a 	.word	0x0000063a
    42a8:	0000063a 	.word	0x0000063a
    42ac:	0000063a 	.word	0x0000063a
    42b0:	0000063a 	.word	0x0000063a
    42b4:	0000063a 	.word	0x0000063a
    42b8:	0000063a 	.word	0x0000063a
    42bc:	0000063a 	.word	0x0000063a
    42c0:	0000063a 	.word	0x0000063a
    42c4:	0000063a 	.word	0x0000063a
    42c8:	0000063a 	.word	0x0000063a
    42cc:	0000063a 	.word	0x0000063a
    42d0:	0000063a 	.word	0x0000063a
    42d4:	00000616 	.word	0x00000616
    42d8:	0000063a 	.word	0x0000063a
    42dc:	00000616 	.word	0x00000616
    42e0:	0000063a 	.word	0x0000063a
    42e4:	0000063a 	.word	0x0000063a
    42e8:	0000063a 	.word	0x0000063a
    42ec:	0000063a 	.word	0x0000063a
    42f0:	0000063a 	.word	0x0000063a
    42f4:	0000063a 	.word	0x0000063a
    42f8:	0000063a 	.word	0x0000063a
    42fc:	0000063a 	.word	0x0000063a
    4300:	0000063a 	.word	0x0000063a
    4304:	0000063a 	.word	0x0000063a
    4308:	0000063a 	.word	0x0000063a
    430c:	0000063a 	.word	0x0000063a
    4310:	0000063a 	.word	0x0000063a
    4314:	0000063a 	.word	0x0000063a
    4318:	0000063a 	.word	0x0000063a
    431c:	0000063a 	.word	0x0000063a
    4320:	0000063a 	.word	0x0000063a
    4324:	0000063a 	.word	0x0000063a
    4328:	0000063a 	.word	0x0000063a
    432c:	0000063a 	.word	0x0000063a
    4330:	0000063a 	.word	0x0000063a
    4334:	0000063a 	.word	0x0000063a
    4338:	0000063a 	.word	0x0000063a
    433c:	0000063a 	.word	0x0000063a
    4340:	0000063a 	.word	0x0000063a
    4344:	0000063a 	.word	0x0000063a
    4348:	0000063a 	.word	0x0000063a
    434c:	0000063a 	.word	0x0000063a
    4350:	0000063a 	.word	0x0000063a
    4354:	0000063a 	.word	0x0000063a
    4358:	0000063a 	.word	0x0000063a
    435c:	0000063a 	.word	0x0000063a
    4360:	0000063a 	.word	0x0000063a
    4364:	0000063a 	.word	0x0000063a
    4368:	0000063a 	.word	0x0000063a
    436c:	00000616 	.word	0x00000616
    4370:	00000616 	.word	0x00000616
    4374:	0000061e 	.word	0x0000061e
    4378:	0000061e 	.word	0x0000061e
    437c:	0000061e 	.word	0x0000061e
    4380:	0000061e 	.word	0x0000061e
    4384:	42000800 	.word	0x42000800
    4388:	42000c00 	.word	0x42000c00
    438c:	42001000 	.word	0x42001000
    4390:	42001400 	.word	0x42001400
    4394:	42002c00 	.word	0x42002c00
    4398:	42003000 	.word	0x42003000
    439c:	42003400 	.word	0x42003400
    43a0:	41744545 	.word	0x41744545
    43a4:	50524f4d 	.word	0x50524f4d
    43a8:	456d752e 	.word	0x456d752e
    43ac:	00002a62 	.word	0x00002a62
    43b0:	00002a5e 	.word	0x00002a5e
    43b4:	00002a5e 	.word	0x00002a5e
    43b8:	00002ac0 	.word	0x00002ac0
    43bc:	00002ac0 	.word	0x00002ac0
    43c0:	00002a76 	.word	0x00002a76
    43c4:	00002a68 	.word	0x00002a68
    43c8:	00002a7c 	.word	0x00002a7c
    43cc:	00002aae 	.word	0x00002aae
    43d0:	00002d20 	.word	0x00002d20
    43d4:	00002d00 	.word	0x00002d00
    43d8:	00002d00 	.word	0x00002d00
    43dc:	00002d8c 	.word	0x00002d8c
    43e0:	00002d12 	.word	0x00002d12
    43e4:	00002d2e 	.word	0x00002d2e
    43e8:	00002d04 	.word	0x00002d04
    43ec:	00002d3c 	.word	0x00002d3c
    43f0:	00002d7c 	.word	0x00002d7c
    43f4:	50494843 	.word	0x50494843
    43f8:	41524520 	.word	0x41524520
    43fc:	2c444553 	.word	0x2c444553
    4400:	41545320 	.word	0x41545320
    4404:	4e495452 	.word	0x4e495452
    4408:	52502047 	.word	0x52502047
    440c:	4152474f 	.word	0x4152474f
    4410:	000a0d4d 	.word	0x000a0d4d

00004414 <tc_interrupt_vectors.13606>:
    4414:	00141312                                ....

00004418 <_init>:
    4418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    441a:	46c0      	nop			; (mov r8, r8)
    441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    441e:	bc08      	pop	{r3}
    4420:	469e      	mov	lr, r3
    4422:	4770      	bx	lr

00004424 <__init_array_start>:
    4424:	000000dd 	.word	0x000000dd

00004428 <_fini>:
    4428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    442e:	bc08      	pop	{r3}
    4430:	469e      	mov	lr, r3
    4432:	4770      	bx	lr

00004434 <__fini_array_start>:
    4434:	000000b5 	.word	0x000000b5
