
EEPROM_EMULATOR_UNIT_TEST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b9c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00004b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000029c  20000068  00004c04  00020068  2**2
                  ALLOC
  3 .stack        00002004  20000304  00004ea0  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029a85  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004140  00000000  00000000  00049b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000080ff  00000000  00000000  0004dcae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000560  00000000  00000000  00055dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000af0  00000000  00000000  0005630d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b7c2  00000000  00000000  00056dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d1ae  00000000  00000000  000725bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e78b  00000000  00000000  0007f76d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001698  00000000  00000000  0010def8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 23 00 20 d1 28 00 00 cd 28 00 00 cd 28 00 00     .#. .(...(...(..
	...
      2c:	cd 28 00 00 00 00 00 00 00 00 00 00 cd 28 00 00     .(...........(..
      3c:	cd 28 00 00 cd 28 00 00 cd 28 00 00 cd 28 00 00     .(...(...(...(..
      4c:	cd 28 00 00 cd 28 00 00 cd 28 00 00 cd 28 00 00     .(...(...(...(..
      5c:	cd 28 00 00 cd 28 00 00 cd 0c 00 00 dd 0c 00 00     .(...(..........
      6c:	ed 0c 00 00 fd 0c 00 00 0d 0d 00 00 1d 0d 00 00     ................
      7c:	cd 28 00 00 cd 28 00 00 cd 28 00 00 cd 28 00 00     .(...(...(...(..
      8c:	cd 28 00 00 cd 28 00 00 cd 28 00 00 cd 28 00 00     .(...(...(...(..
      9c:	cd 28 00 00 cd 28 00 00 cd 28 00 00 cd 28 00 00     .(...(...(...(..
      ac:	cd 28 00 00 00 00 00 00                             .(......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00004b9c 	.word	0x00004b9c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00004b9c 	.word	0x00004b9c
     10c:	00004b9c 	.word	0x00004b9c
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     114:	4b0c      	ldr	r3, [pc, #48]	; (148 <cpu_irq_enter_critical+0x34>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	2b00      	cmp	r3, #0
     11a:	d106      	bne.n	12a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     11c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     120:	2b00      	cmp	r3, #0
     122:	d007      	beq.n	134 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     124:	2200      	movs	r2, #0
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <cpu_irq_enter_critical+0x38>)
     128:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     12a:	4a07      	ldr	r2, [pc, #28]	; (148 <cpu_irq_enter_critical+0x34>)
     12c:	6813      	ldr	r3, [r2, #0]
     12e:	3301      	adds	r3, #1
     130:	6013      	str	r3, [r2, #0]
}
     132:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     134:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     136:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     13a:	2200      	movs	r2, #0
     13c:	4b04      	ldr	r3, [pc, #16]	; (150 <cpu_irq_enter_critical+0x3c>)
     13e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     140:	3201      	adds	r2, #1
     142:	4b02      	ldr	r3, [pc, #8]	; (14c <cpu_irq_enter_critical+0x38>)
     144:	701a      	strb	r2, [r3, #0]
     146:	e7f0      	b.n	12a <cpu_irq_enter_critical+0x16>
     148:	20000084 	.word	0x20000084
     14c:	20000088 	.word	0x20000088
     150:	20000000 	.word	0x20000000

00000154 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     154:	b510      	push	{r4, lr}
     156:	b082      	sub	sp, #8
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
	return test_case_ptr;
     158:	4b17      	ldr	r3, [pc, #92]	; (1b8 <cpu_irq_leave_critical+0x64>)
     15a:	6818      	ldr	r0, [r3, #0]
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);
     15c:	2800      	cmp	r0, #0
     15e:	d020      	beq.n	1a2 <cpu_irq_leave_critical+0x4e>
     160:	4b16      	ldr	r3, [pc, #88]	; (1bc <cpu_irq_leave_critical+0x68>)
     162:	681b      	ldr	r3, [r3, #0]
     164:	2b00      	cmp	r3, #0
     166:	d012      	beq.n	18e <cpu_irq_leave_critical+0x3a>

	cpu_irq_critical_section_counter--;
     168:	4b14      	ldr	r3, [pc, #80]	; (1bc <cpu_irq_leave_critical+0x68>)
     16a:	681a      	ldr	r2, [r3, #0]
     16c:	3a01      	subs	r2, #1
     16e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     170:	681b      	ldr	r3, [r3, #0]
     172:	2b00      	cmp	r3, #0
     174:	d109      	bne.n	18a <cpu_irq_leave_critical+0x36>
     176:	4b12      	ldr	r3, [pc, #72]	; (1c0 <cpu_irq_leave_critical+0x6c>)
     178:	781b      	ldrb	r3, [r3, #0]
     17a:	2b00      	cmp	r3, #0
     17c:	d005      	beq.n	18a <cpu_irq_leave_critical+0x36>
		cpu_irq_enable();
     17e:	2201      	movs	r2, #1
     180:	4b10      	ldr	r3, [pc, #64]	; (1c4 <cpu_irq_leave_critical+0x70>)
     182:	701a      	strb	r2, [r3, #0]
     184:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     188:	b662      	cpsie	i
	}
}
     18a:	b002      	add	sp, #8
     18c:	bd10      	pop	{r4, pc}
	Assert(cpu_irq_critical_section_counter > 0);
     18e:	4b0e      	ldr	r3, [pc, #56]	; (1c8 <cpu_irq_leave_critical+0x74>)
     190:	9301      	str	r3, [sp, #4]
     192:	4b0e      	ldr	r3, [pc, #56]	; (1cc <cpu_irq_leave_critical+0x78>)
     194:	9300      	str	r3, [sp, #0]
     196:	234c      	movs	r3, #76	; 0x4c
     198:	4a0d      	ldr	r2, [pc, #52]	; (1d0 <cpu_irq_leave_critical+0x7c>)
     19a:	2101      	movs	r1, #1
     19c:	4c0d      	ldr	r4, [pc, #52]	; (1d4 <cpu_irq_leave_critical+0x80>)
     19e:	47a0      	blx	r4
     1a0:	e7e2      	b.n	168 <cpu_irq_leave_critical+0x14>
     1a2:	4b06      	ldr	r3, [pc, #24]	; (1bc <cpu_irq_leave_critical+0x68>)
     1a4:	681b      	ldr	r3, [r3, #0]
     1a6:	2b00      	cmp	r3, #0
     1a8:	d1de      	bne.n	168 <cpu_irq_leave_critical+0x14>
     1aa:	334c      	adds	r3, #76	; 0x4c
     1ac:	4a08      	ldr	r2, [pc, #32]	; (1d0 <cpu_irq_leave_critical+0x7c>)
     1ae:	4906      	ldr	r1, [pc, #24]	; (1c8 <cpu_irq_leave_critical+0x74>)
     1b0:	4809      	ldr	r0, [pc, #36]	; (1d8 <cpu_irq_leave_critical+0x84>)
     1b2:	4c0a      	ldr	r4, [pc, #40]	; (1dc <cpu_irq_leave_critical+0x88>)
     1b4:	47a0      	blx	r4
     1b6:	e7fe      	b.n	1b6 <cpu_irq_leave_critical+0x62>
     1b8:	2000008c 	.word	0x2000008c
     1bc:	20000084 	.word	0x20000084
     1c0:	20000088 	.word	0x20000088
     1c4:	20000000 	.word	0x20000000
     1c8:	000042a8 	.word	0x000042a8
     1cc:	000042d0 	.word	0x000042d0
     1d0:	00004270 	.word	0x00004270
     1d4:	00000211 	.word	0x00000211
     1d8:	000042e8 	.word	0x000042e8
     1dc:	0000371d 	.word	0x0000371d

000001e0 <test_call>:
 * \return #TEST_PASS if \a func was executed successfully, or the
 * result value passed to test_fail() on failure.
 */
static int test_call(void (*func)(const struct test_case *),
		const struct test_case *test)
{
     1e0:	b510      	push	{r4, lr}
     1e2:	b082      	sub	sp, #8
     1e4:	9000      	str	r0, [sp, #0]
     1e6:	9101      	str	r1, [sp, #4]
	int ret = 0;

	if (!func) {
     1e8:	2800      	cmp	r0, #0
     1ea:	d00b      	beq.n	204 <test_call+0x24>
	/*
	 * The first call to setjmp() always return 0. However, if the
	 * call to func() below goes wrong, we'll return here again with
	 * a nonzero value.
	 */
	ret = setjmp(test_failure_jmpbuf);
     1ec:	4806      	ldr	r0, [pc, #24]	; (208 <test_call+0x28>)
     1ee:	4b07      	ldr	r3, [pc, #28]	; (20c <test_call+0x2c>)
     1f0:	4798      	blx	r3
     1f2:	1e04      	subs	r4, r0, #0
	if (ret) {
     1f4:	d002      	beq.n	1fc <test_call+0x1c>
	}

	func(test);

	return TEST_PASS;
}
     1f6:	0020      	movs	r0, r4
     1f8:	b002      	add	sp, #8
     1fa:	bd10      	pop	{r4, pc}
	func(test);
     1fc:	9801      	ldr	r0, [sp, #4]
     1fe:	9b00      	ldr	r3, [sp, #0]
     200:	4798      	blx	r3
     202:	e7f8      	b.n	1f6 <test_call+0x16>
		return TEST_PASS;
     204:	2400      	movs	r4, #0
     206:	e7f6      	b.n	1f6 <test_call+0x16>
     208:	20000090 	.word	0x20000090
     20c:	00003837 	.word	0x00003837

00000210 <test_case_fail>:
 * \param ... Values to insert into failure message.
 */
void test_case_fail(const struct test_case *test, int result,
		const char *file, unsigned int line,
		const char *fmt, ...)
{
     210:	b5f0      	push	{r4, r5, r6, r7, lr}
     212:	b083      	sub	sp, #12
     214:	000c      	movs	r4, r1
     216:	ad08      	add	r5, sp, #32
     218:	cd80      	ldmia	r5!, {r7}
	va_list ap;

	dbg_error("Test '%s' failed at %s:%u:\r\n\t", test->name, file, line);
     21a:	68c1      	ldr	r1, [r0, #12]
     21c:	4819      	ldr	r0, [pc, #100]	; (284 <test_case_fail+0x74>)
     21e:	4e1a      	ldr	r6, [pc, #104]	; (288 <test_case_fail+0x78>)
     220:	47b0      	blx	r6

	va_start(ap, fmt);
     222:	9501      	str	r5, [sp, #4]
	dbg_vprintf_pgm(fmt, ap);
     224:	4e19      	ldr	r6, [pc, #100]	; (28c <test_case_fail+0x7c>)
     226:	6833      	ldr	r3, [r6, #0]
     228:	6898      	ldr	r0, [r3, #8]
     22a:	002a      	movs	r2, r5
     22c:	0039      	movs	r1, r7
     22e:	4b18      	ldr	r3, [pc, #96]	; (290 <test_case_fail+0x80>)
     230:	4798      	blx	r3
	va_end(ap);
	dbg_putchar('\r');
     232:	6830      	ldr	r0, [r6, #0]
     234:	6882      	ldr	r2, [r0, #8]
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
     236:	6893      	ldr	r3, [r2, #8]
     238:	3b01      	subs	r3, #1
     23a:	6093      	str	r3, [r2, #8]
     23c:	2b00      	cmp	r3, #0
     23e:	db15      	blt.n	26c <test_case_fail+0x5c>
		return (*_p->_p++ = _c);
     240:	6813      	ldr	r3, [r2, #0]
     242:	1c59      	adds	r1, r3, #1
     244:	6011      	str	r1, [r2, #0]
     246:	220d      	movs	r2, #13
     248:	701a      	strb	r2, [r3, #0]
	dbg_putchar('\n');
     24a:	4b10      	ldr	r3, [pc, #64]	; (28c <test_case_fail+0x7c>)
     24c:	6818      	ldr	r0, [r3, #0]
     24e:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
     250:	6893      	ldr	r3, [r2, #8]
     252:	3b01      	subs	r3, #1
     254:	6093      	str	r3, [r2, #8]
     256:	2b00      	cmp	r3, #0
     258:	db0f      	blt.n	27a <test_case_fail+0x6a>
		return (*_p->_p++ = _c);
     25a:	6813      	ldr	r3, [r2, #0]
     25c:	1c59      	adds	r1, r3, #1
     25e:	6011      	str	r1, [r2, #0]
     260:	220a      	movs	r2, #10
     262:	701a      	strb	r2, [r3, #0]

	/*
	 * This will cause the setjmp() call in test_call() to return
	 * TEST_FAIL.
	 */
	longjmp(test_failure_jmpbuf, result);
     264:	0021      	movs	r1, r4
     266:	480b      	ldr	r0, [pc, #44]	; (294 <test_case_fail+0x84>)
     268:	4b0b      	ldr	r3, [pc, #44]	; (298 <test_case_fail+0x88>)
     26a:	4798      	blx	r3
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
     26c:	6991      	ldr	r1, [r2, #24]
     26e:	428b      	cmp	r3, r1
     270:	dae6      	bge.n	240 <test_case_fail+0x30>
	else
		return (__swbuf_r(_ptr, _c, _p));
     272:	210d      	movs	r1, #13
     274:	4b09      	ldr	r3, [pc, #36]	; (29c <test_case_fail+0x8c>)
     276:	4798      	blx	r3
     278:	e7e7      	b.n	24a <test_case_fail+0x3a>
     27a:	210a      	movs	r1, #10
     27c:	4b07      	ldr	r3, [pc, #28]	; (29c <test_case_fail+0x8c>)
     27e:	4798      	blx	r3
     280:	e7f0      	b.n	264 <test_case_fail+0x54>
     282:	46c0      	nop			; (mov r8, r8)
     284:	0000430c 	.word	0x0000430c
     288:	0000371d 	.word	0x0000371d
     28c:	20000004 	.word	0x20000004
     290:	000033f5 	.word	0x000033f5
     294:	20000090 	.word	0x20000090
     298:	0000384f 	.word	0x0000384f
     29c:	000039c5 	.word	0x000039c5

000002a0 <test_suite_run>:
 * the array.
 *
 * \return The number of tests that didn't pass.
 */
int test_suite_run(const struct test_suite *suite)
{
     2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2a2:	46de      	mov	lr, fp
     2a4:	4657      	mov	r7, sl
     2a6:	464e      	mov	r6, r9
     2a8:	4645      	mov	r5, r8
     2aa:	b5e0      	push	{r5, r6, r7, lr}
     2ac:	b085      	sub	sp, #20
     2ae:	0007      	movs	r7, r0
	unsigned int nr_failures = 0;
	unsigned int nr_errors = 0;
	unsigned int i;
	int          ret;

	dbg_info("Running test suite '%s'...\r\n", suite->name);
     2b0:	6881      	ldr	r1, [r0, #8]
     2b2:	483a      	ldr	r0, [pc, #232]	; (39c <test_suite_run+0xfc>)
     2b4:	4b3a      	ldr	r3, [pc, #232]	; (3a0 <test_suite_run+0x100>)
     2b6:	4798      	blx	r3

	for (i = 0; i < suite->nr_tests; i++) {
     2b8:	683b      	ldr	r3, [r7, #0]
     2ba:	4698      	mov	r8, r3
     2bc:	2b00      	cmp	r3, #0
     2be:	d06a      	beq.n	396 <test_suite_run+0xf6>
     2c0:	2600      	movs	r6, #0
     2c2:	2300      	movs	r3, #0
     2c4:	4699      	mov	r9, r3
     2c6:	4698      	mov	r8, r3
	test_case_ptr = (struct test_case *)test;
     2c8:	4b36      	ldr	r3, [pc, #216]	; (3a4 <test_suite_run+0x104>)
     2ca:	469b      	mov	fp, r3
	dbg_info("Running test: %s\r\n", test->name);
     2cc:	4b34      	ldr	r3, [pc, #208]	; (3a0 <test_suite_run+0x100>)
     2ce:	469a      	mov	sl, r3
     2d0:	9703      	str	r7, [sp, #12]
     2d2:	e01b      	b.n	30c <test_suite_run+0x6c>
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
     2d4:	68e1      	ldr	r1, [r4, #12]
     2d6:	0003      	movs	r3, r0
     2d8:	4a33      	ldr	r2, [pc, #204]	; (3a8 <test_suite_run+0x108>)
     2da:	4834      	ldr	r0, [pc, #208]	; (3ac <test_suite_run+0x10c>)
     2dc:	4c30      	ldr	r4, [pc, #192]	; (3a0 <test_suite_run+0x100>)
     2de:	47a0      	blx	r4
     2e0:	e009      	b.n	2f6 <test_suite_run+0x56>
     2e2:	0003      	movs	r3, r0
     2e4:	4a32      	ldr	r2, [pc, #200]	; (3b0 <test_suite_run+0x110>)
     2e6:	68e1      	ldr	r1, [r4, #12]
     2e8:	4830      	ldr	r0, [pc, #192]	; (3ac <test_suite_run+0x10c>)
     2ea:	4f2d      	ldr	r7, [pc, #180]	; (3a0 <test_suite_run+0x100>)
     2ec:	47b8      	blx	r7
     2ee:	e028      	b.n	342 <test_suite_run+0xa2>
     2f0:	2200      	movs	r2, #0
     2f2:	4b2c      	ldr	r3, [pc, #176]	; (3a4 <test_suite_run+0x104>)
     2f4:	601a      	str	r2, [r3, #0]
		const struct test_case *test;

		test = suite->tests[i];
		ret = test_case_run(test);
		if (ret < TEST_PASS) {
     2f6:	2d00      	cmp	r5, #0
     2f8:	db38      	blt.n	36c <test_suite_run+0xcc>
			nr_errors++;
		} else if (ret > TEST_PASS) {
			nr_failures++;
     2fa:	17eb      	asrs	r3, r5, #31
     2fc:	1b5d      	subs	r5, r3, r5
     2fe:	0fed      	lsrs	r5, r5, #31
     300:	44a8      	add	r8, r5
	for (i = 0; i < suite->nr_tests; i++) {
     302:	3601      	adds	r6, #1
     304:	9b03      	ldr	r3, [sp, #12]
     306:	681a      	ldr	r2, [r3, #0]
     308:	42b2      	cmp	r2, r6
     30a:	d933      	bls.n	374 <test_suite_run+0xd4>
		test = suite->tests[i];
     30c:	00b3      	lsls	r3, r6, #2
     30e:	9a03      	ldr	r2, [sp, #12]
     310:	6852      	ldr	r2, [r2, #4]
     312:	589c      	ldr	r4, [r3, r2]
     314:	465b      	mov	r3, fp
     316:	601c      	str	r4, [r3, #0]
	dbg_info("Running test: %s\r\n", test->name);
     318:	68e1      	ldr	r1, [r4, #12]
     31a:	4826      	ldr	r0, [pc, #152]	; (3b4 <test_suite_run+0x114>)
     31c:	47d0      	blx	sl
	if (test->setup) {
     31e:	6823      	ldr	r3, [r4, #0]
     320:	2b00      	cmp	r3, #0
     322:	d008      	beq.n	336 <test_suite_run+0x96>
		dbg("Setting up fixture\r\n");
     324:	4824      	ldr	r0, [pc, #144]	; (3b8 <test_suite_run+0x118>)
     326:	4b25      	ldr	r3, [pc, #148]	; (3bc <test_suite_run+0x11c>)
     328:	4798      	blx	r3
		ret = test_call(test->setup, test);
     32a:	0021      	movs	r1, r4
     32c:	6820      	ldr	r0, [r4, #0]
     32e:	4b24      	ldr	r3, [pc, #144]	; (3c0 <test_suite_run+0x120>)
     330:	4798      	blx	r3
     332:	1e05      	subs	r5, r0, #0
		if (ret) {
     334:	d1ce      	bne.n	2d4 <test_suite_run+0x34>
	result = test_call(test->run, test);
     336:	0021      	movs	r1, r4
     338:	6860      	ldr	r0, [r4, #4]
     33a:	4b21      	ldr	r3, [pc, #132]	; (3c0 <test_suite_run+0x120>)
     33c:	4798      	blx	r3
     33e:	1e05      	subs	r5, r0, #0
	if (result) {
     340:	d1cf      	bne.n	2e2 <test_suite_run+0x42>
	if (test->cleanup) {
     342:	68a3      	ldr	r3, [r4, #8]
     344:	2b00      	cmp	r3, #0
     346:	d0d3      	beq.n	2f0 <test_suite_run+0x50>
		dbg("Cleaning up fixture\r\n");
     348:	481e      	ldr	r0, [pc, #120]	; (3c4 <test_suite_run+0x124>)
     34a:	4b1c      	ldr	r3, [pc, #112]	; (3bc <test_suite_run+0x11c>)
     34c:	4798      	blx	r3
		ret = test_call(test->cleanup, test);
     34e:	0021      	movs	r1, r4
     350:	68a0      	ldr	r0, [r4, #8]
     352:	4b1b      	ldr	r3, [pc, #108]	; (3c0 <test_suite_run+0x120>)
     354:	4798      	blx	r3
     356:	1e03      	subs	r3, r0, #0
		if (ret && !result) {
     358:	d0ca      	beq.n	2f0 <test_suite_run+0x50>
     35a:	2d00      	cmp	r5, #0
     35c:	d1c8      	bne.n	2f0 <test_suite_run+0x50>
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
     35e:	68e1      	ldr	r1, [r4, #12]
     360:	0005      	movs	r5, r0
     362:	4a19      	ldr	r2, [pc, #100]	; (3c8 <test_suite_run+0x128>)
     364:	4811      	ldr	r0, [pc, #68]	; (3ac <test_suite_run+0x10c>)
     366:	4c0e      	ldr	r4, [pc, #56]	; (3a0 <test_suite_run+0x100>)
     368:	47a0      	blx	r4
     36a:	e7c1      	b.n	2f0 <test_suite_run+0x50>
			nr_errors++;
     36c:	2301      	movs	r3, #1
     36e:	469c      	mov	ip, r3
     370:	44e1      	add	r9, ip
     372:	e7c6      	b.n	302 <test_suite_run+0x62>
     374:	001f      	movs	r7, r3
		}
	}

	dbg_info("Test suite '%s' complete: %u tests, %u failures, %u errors\r\n\r\n",
     376:	68b9      	ldr	r1, [r7, #8]
     378:	464b      	mov	r3, r9
     37a:	9300      	str	r3, [sp, #0]
     37c:	4643      	mov	r3, r8
     37e:	4813      	ldr	r0, [pc, #76]	; (3cc <test_suite_run+0x12c>)
     380:	4c07      	ldr	r4, [pc, #28]	; (3a0 <test_suite_run+0x100>)
     382:	47a0      	blx	r4
			suite->name, suite->nr_tests, nr_failures, nr_errors);

	return nr_errors + nr_failures;
     384:	4640      	mov	r0, r8
     386:	4448      	add	r0, r9
}
     388:	b005      	add	sp, #20
     38a:	bc3c      	pop	{r2, r3, r4, r5}
     38c:	4690      	mov	r8, r2
     38e:	4699      	mov	r9, r3
     390:	46a2      	mov	sl, r4
     392:	46ab      	mov	fp, r5
     394:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < suite->nr_tests; i++) {
     396:	001a      	movs	r2, r3
	unsigned int nr_errors = 0;
     398:	4699      	mov	r9, r3
     39a:	e7ec      	b.n	376 <test_suite_run+0xd6>
     39c:	0000432c 	.word	0x0000432c
     3a0:	0000371d 	.word	0x0000371d
     3a4:	2000008c 	.word	0x2000008c
     3a8:	00004374 	.word	0x00004374
     3ac:	0000437c 	.word	0x0000437c
     3b0:	000043a0 	.word	0x000043a0
     3b4:	0000434c 	.word	0x0000434c
     3b8:	00004360 	.word	0x00004360
     3bc:	00003811 	.word	0x00003811
     3c0:	000001e1 	.word	0x000001e1
     3c4:	000043a8 	.word	0x000043a8
     3c8:	000043c0 	.word	0x000043c0
     3cc:	000043c8 	.word	0x000043c8

000003d0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3d2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     3d4:	ac01      	add	r4, sp, #4
     3d6:	2501      	movs	r5, #1
     3d8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     3da:	2700      	movs	r7, #0
     3dc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     3de:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     3e0:	0021      	movs	r1, r4
     3e2:	203e      	movs	r0, #62	; 0x3e
     3e4:	4e06      	ldr	r6, [pc, #24]	; (400 <system_board_init+0x30>)
     3e6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     3e8:	2280      	movs	r2, #128	; 0x80
     3ea:	05d2      	lsls	r2, r2, #23
     3ec:	4b05      	ldr	r3, [pc, #20]	; (404 <system_board_init+0x34>)
     3ee:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     3f0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     3f2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     3f4:	0021      	movs	r1, r4
     3f6:	200f      	movs	r0, #15
     3f8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     3fa:	b003      	add	sp, #12
     3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	000007a5 	.word	0x000007a5
     404:	41004480 	.word	0x41004480

00000408 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     408:	b530      	push	{r4, r5, lr}
     40a:	b083      	sub	sp, #12
     40c:	0004      	movs	r4, r0
	return test_case_ptr;
     40e:	4b2a      	ldr	r3, [pc, #168]	; (4b8 <nvm_set_config+0xb0>)
     410:	6818      	ldr	r0, [r3, #0]
	/* Sanity check argument */
	Assert(config);
     412:	2800      	cmp	r0, #0
     414:	d01a      	beq.n	44c <nvm_set_config+0x44>
     416:	2c00      	cmp	r4, #0
     418:	d00e      	beq.n	438 <nvm_set_config+0x30>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     41a:	4a28      	ldr	r2, [pc, #160]	; (4bc <nvm_set_config+0xb4>)
     41c:	69d3      	ldr	r3, [r2, #28]
     41e:	2104      	movs	r1, #4
     420:	430b      	orrs	r3, r1
     422:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     424:	4b26      	ldr	r3, [pc, #152]	; (4c0 <nvm_set_config+0xb8>)
     426:	2220      	movs	r2, #32
     428:	32ff      	adds	r2, #255	; 0xff
     42a:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     42c:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     42e:	2005      	movs	r0, #5
	if (!nvm_is_ready()) {
     430:	07db      	lsls	r3, r3, #31
     432:	d414      	bmi.n	45e <nvm_set_config+0x56>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     434:	b003      	add	sp, #12
     436:	bd30      	pop	{r4, r5, pc}
	Assert(config);
     438:	4b22      	ldr	r3, [pc, #136]	; (4c4 <nvm_set_config+0xbc>)
     43a:	9301      	str	r3, [sp, #4]
     43c:	4b22      	ldr	r3, [pc, #136]	; (4c8 <nvm_set_config+0xc0>)
     43e:	9300      	str	r3, [sp, #0]
     440:	236b      	movs	r3, #107	; 0x6b
     442:	4a22      	ldr	r2, [pc, #136]	; (4cc <nvm_set_config+0xc4>)
     444:	2101      	movs	r1, #1
     446:	4d22      	ldr	r5, [pc, #136]	; (4d0 <nvm_set_config+0xc8>)
     448:	47a8      	blx	r5
     44a:	e7e6      	b.n	41a <nvm_set_config+0x12>
     44c:	2c00      	cmp	r4, #0
     44e:	d1e4      	bne.n	41a <nvm_set_config+0x12>
     450:	236b      	movs	r3, #107	; 0x6b
     452:	4a1e      	ldr	r2, [pc, #120]	; (4cc <nvm_set_config+0xc4>)
     454:	491b      	ldr	r1, [pc, #108]	; (4c4 <nvm_set_config+0xbc>)
     456:	481f      	ldr	r0, [pc, #124]	; (4d4 <nvm_set_config+0xcc>)
     458:	4c1f      	ldr	r4, [pc, #124]	; (4d8 <nvm_set_config+0xd0>)
     45a:	47a0      	blx	r4
     45c:	e7fe      	b.n	45c <nvm_set_config+0x54>
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     45e:	7823      	ldrb	r3, [r4, #0]
     460:	021b      	lsls	r3, r3, #8
     462:	32e2      	adds	r2, #226	; 0xe2
     464:	32ff      	adds	r2, #255	; 0xff
     466:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     468:	7861      	ldrb	r1, [r4, #1]
     46a:	01c9      	lsls	r1, r1, #7
     46c:	22ff      	movs	r2, #255	; 0xff
     46e:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     470:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     472:	78a1      	ldrb	r1, [r4, #2]
     474:	0049      	lsls	r1, r1, #1
     476:	221e      	movs	r2, #30
     478:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     47a:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     47c:	78e2      	ldrb	r2, [r4, #3]
     47e:	0492      	lsls	r2, r2, #18
     480:	2180      	movs	r1, #128	; 0x80
     482:	02c9      	lsls	r1, r1, #11
     484:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     486:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     488:	7922      	ldrb	r2, [r4, #4]
     48a:	0412      	lsls	r2, r2, #16
     48c:	21c0      	movs	r1, #192	; 0xc0
     48e:	0289      	lsls	r1, r1, #10
     490:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     492:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     494:	4a0a      	ldr	r2, [pc, #40]	; (4c0 <nvm_set_config+0xb8>)
     496:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     498:	6893      	ldr	r3, [r2, #8]
     49a:	035b      	lsls	r3, r3, #13
     49c:	0f5b      	lsrs	r3, r3, #29
     49e:	490f      	ldr	r1, [pc, #60]	; (4dc <nvm_set_config+0xd4>)
     4a0:	3003      	adds	r0, #3
     4a2:	4098      	lsls	r0, r3
     4a4:	8008      	strh	r0, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     4a6:	6893      	ldr	r3, [r2, #8]
     4a8:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     4aa:	7863      	ldrb	r3, [r4, #1]
     4ac:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     4ae:	8b10      	ldrh	r0, [r2, #24]
     4b0:	05c0      	lsls	r0, r0, #23
	return STATUS_OK;
     4b2:	0fc0      	lsrs	r0, r0, #31
     4b4:	0100      	lsls	r0, r0, #4
     4b6:	e7bd      	b.n	434 <nvm_set_config+0x2c>
     4b8:	2000008c 	.word	0x2000008c
     4bc:	40000400 	.word	0x40000400
     4c0:	41004000 	.word	0x41004000
     4c4:	00004550 	.word	0x00004550
     4c8:	000042d0 	.word	0x000042d0
     4cc:	0000452c 	.word	0x0000452c
     4d0:	00000211 	.word	0x00000211
     4d4:	000042e8 	.word	0x000042e8
     4d8:	0000371d 	.word	0x0000371d
     4dc:	200000ec 	.word	0x200000ec

000004e0 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     4e0:	b530      	push	{r4, r5, lr}
     4e2:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     4e4:	4a22      	ldr	r2, [pc, #136]	; (570 <nvm_execute_command+0x90>)
     4e6:	8810      	ldrh	r0, [r2, #0]
     4e8:	8853      	ldrh	r3, [r2, #2]
     4ea:	4343      	muls	r3, r0
     4ec:	428b      	cmp	r3, r1
     4ee:	d206      	bcs.n	4fe <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     4f0:	2280      	movs	r2, #128	; 0x80
     4f2:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     4f4:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     4f6:	4b1f      	ldr	r3, [pc, #124]	; (574 <nvm_execute_command+0x94>)
     4f8:	18cb      	adds	r3, r1, r3
     4fa:	4293      	cmp	r3, r2
     4fc:	d80e      	bhi.n	51c <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     4fe:	4b1e      	ldr	r3, [pc, #120]	; (578 <nvm_execute_command+0x98>)
     500:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     502:	2280      	movs	r2, #128	; 0x80
     504:	02d2      	lsls	r2, r2, #11
     506:	432a      	orrs	r2, r5
     508:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     50a:	2220      	movs	r2, #32
     50c:	32ff      	adds	r2, #255	; 0xff
     50e:	831a      	strh	r2, [r3, #24]
     510:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     512:	07db      	lsls	r3, r3, #31
     514:	d403      	bmi.n	51e <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     516:	4b18      	ldr	r3, [pc, #96]	; (578 <nvm_execute_command+0x98>)
     518:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     51a:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     51c:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     51e:	2c45      	cmp	r4, #69	; 0x45
     520:	d822      	bhi.n	568 <nvm_execute_command+0x88>
     522:	00a3      	lsls	r3, r4, #2
     524:	4a15      	ldr	r2, [pc, #84]	; (57c <nvm_execute_command+0x9c>)
     526:	58d3      	ldr	r3, [r2, r3]
     528:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     52a:	4b13      	ldr	r3, [pc, #76]	; (578 <nvm_execute_command+0x98>)
     52c:	8b1b      	ldrh	r3, [r3, #24]
     52e:	05db      	lsls	r3, r3, #23
     530:	d503      	bpl.n	53a <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     532:	4b11      	ldr	r3, [pc, #68]	; (578 <nvm_execute_command+0x98>)
     534:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     536:	2010      	movs	r0, #16
     538:	e7f0      	b.n	51c <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     53a:	0889      	lsrs	r1, r1, #2
     53c:	0049      	lsls	r1, r1, #1
     53e:	4b0e      	ldr	r3, [pc, #56]	; (578 <nvm_execute_command+0x98>)
     540:	61d9      	str	r1, [r3, #28]
			break;
     542:	e003      	b.n	54c <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     544:	0889      	lsrs	r1, r1, #2
     546:	0049      	lsls	r1, r1, #1
     548:	4b0b      	ldr	r3, [pc, #44]	; (578 <nvm_execute_command+0x98>)
     54a:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     54c:	20a5      	movs	r0, #165	; 0xa5
     54e:	0200      	lsls	r0, r0, #8
     550:	4304      	orrs	r4, r0
     552:	4b09      	ldr	r3, [pc, #36]	; (578 <nvm_execute_command+0x98>)
     554:	801c      	strh	r4, [r3, #0]
     556:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     558:	2201      	movs	r2, #1
     55a:	7d0b      	ldrb	r3, [r1, #20]
     55c:	4213      	tst	r3, r2
     55e:	d0fc      	beq.n	55a <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     560:	4b05      	ldr	r3, [pc, #20]	; (578 <nvm_execute_command+0x98>)
     562:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     564:	2000      	movs	r0, #0
     566:	e7d9      	b.n	51c <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     568:	4b03      	ldr	r3, [pc, #12]	; (578 <nvm_execute_command+0x98>)
     56a:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     56c:	2017      	movs	r0, #23
     56e:	e7d5      	b.n	51c <nvm_execute_command+0x3c>
     570:	200000ec 	.word	0x200000ec
     574:	ff7fc000 	.word	0xff7fc000
     578:	41004000 	.word	0x41004000
     57c:	00004408 	.word	0x00004408

00000580 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     582:	4b25      	ldr	r3, [pc, #148]	; (618 <nvm_write_buffer+0x98>)
     584:	881d      	ldrh	r5, [r3, #0]
     586:	885b      	ldrh	r3, [r3, #2]
     588:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     58a:	2418      	movs	r4, #24
	if (destination_address >
     58c:	4283      	cmp	r3, r0
     58e:	d201      	bcs.n	594 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     590:	0020      	movs	r0, r4
     592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     594:	1e6b      	subs	r3, r5, #1
     596:	4218      	tst	r0, r3
     598:	d1fa      	bne.n	590 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     59a:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     59c:	4295      	cmp	r5, r2
     59e:	d3f7      	bcc.n	590 <nvm_write_buffer+0x10>
     5a0:	4b1e      	ldr	r3, [pc, #120]	; (61c <nvm_write_buffer+0x9c>)
     5a2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     5a4:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     5a6:	07db      	lsls	r3, r3, #31
     5a8:	d5f2      	bpl.n	590 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     5aa:	4c1d      	ldr	r4, [pc, #116]	; (620 <nvm_write_buffer+0xa0>)
     5ac:	4b1b      	ldr	r3, [pc, #108]	; (61c <nvm_write_buffer+0x9c>)
     5ae:	801c      	strh	r4, [r3, #0]
     5b0:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     5b2:	2401      	movs	r4, #1
     5b4:	7d2b      	ldrb	r3, [r5, #20]
     5b6:	4223      	tst	r3, r4
     5b8:	d0fc      	beq.n	5b4 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     5ba:	2420      	movs	r4, #32
     5bc:	34ff      	adds	r4, #255	; 0xff
     5be:	4b17      	ldr	r3, [pc, #92]	; (61c <nvm_write_buffer+0x9c>)
     5c0:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     5c2:	2a00      	cmp	r2, #0
     5c4:	d022      	beq.n	60c <nvm_write_buffer+0x8c>
     5c6:	2301      	movs	r3, #1
     5c8:	0005      	movs	r5, r0
     5ca:	439d      	bics	r5, r3
     5cc:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     5ce:	1e57      	subs	r7, r2, #1
     5d0:	e009      	b.n	5e6 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     5d2:	18ce      	adds	r6, r1, r3
     5d4:	7876      	ldrb	r6, [r6, #1]
     5d6:	0236      	lsls	r6, r6, #8
     5d8:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     5da:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     5dc:	3302      	adds	r3, #2
     5de:	b29b      	uxth	r3, r3
     5e0:	3502      	adds	r5, #2
     5e2:	429a      	cmp	r2, r3
     5e4:	d904      	bls.n	5f0 <nvm_write_buffer+0x70>
		data = buffer[i];
     5e6:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     5e8:	42bb      	cmp	r3, r7
     5ea:	dbf2      	blt.n	5d2 <nvm_write_buffer+0x52>
		data = buffer[i];
     5ec:	b2a4      	uxth	r4, r4
     5ee:	e7f4      	b.n	5da <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     5f0:	4b09      	ldr	r3, [pc, #36]	; (618 <nvm_write_buffer+0x98>)
     5f2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     5f4:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     5f6:	2b00      	cmp	r3, #0
     5f8:	d1ca      	bne.n	590 <nvm_write_buffer+0x10>
     5fa:	2a3f      	cmp	r2, #63	; 0x3f
     5fc:	d8c8      	bhi.n	590 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     5fe:	2200      	movs	r2, #0
     600:	0001      	movs	r1, r0
     602:	2004      	movs	r0, #4
     604:	4b07      	ldr	r3, [pc, #28]	; (624 <nvm_write_buffer+0xa4>)
     606:	4798      	blx	r3
     608:	0004      	movs	r4, r0
     60a:	e7c1      	b.n	590 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     60c:	4b02      	ldr	r3, [pc, #8]	; (618 <nvm_write_buffer+0x98>)
     60e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     610:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     612:	2b00      	cmp	r3, #0
     614:	d0f3      	beq.n	5fe <nvm_write_buffer+0x7e>
     616:	e7bb      	b.n	590 <nvm_write_buffer+0x10>
     618:	200000ec 	.word	0x200000ec
     61c:	41004000 	.word	0x41004000
     620:	ffffa544 	.word	0xffffa544
     624:	000004e1 	.word	0x000004e1

00000628 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     628:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     62a:	4b18      	ldr	r3, [pc, #96]	; (68c <nvm_read_buffer+0x64>)
     62c:	881d      	ldrh	r5, [r3, #0]
     62e:	885b      	ldrh	r3, [r3, #2]
     630:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     632:	2418      	movs	r4, #24
	if (source_address >
     634:	4283      	cmp	r3, r0
     636:	d201      	bcs.n	63c <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     638:	0020      	movs	r0, r4
     63a:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
     63c:	1e6b      	subs	r3, r5, #1
     63e:	4218      	tst	r0, r3
     640:	d1fa      	bne.n	638 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     642:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     644:	4295      	cmp	r5, r2
     646:	d3f7      	bcc.n	638 <nvm_read_buffer+0x10>
     648:	4b11      	ldr	r3, [pc, #68]	; (690 <nvm_read_buffer+0x68>)
     64a:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     64c:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     64e:	07db      	lsls	r3, r3, #31
     650:	d5f2      	bpl.n	638 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     652:	2420      	movs	r4, #32
     654:	34ff      	adds	r4, #255	; 0xff
     656:	4b0e      	ldr	r3, [pc, #56]	; (690 <nvm_read_buffer+0x68>)
     658:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     65a:	2a00      	cmp	r2, #0
     65c:	d014      	beq.n	688 <nvm_read_buffer+0x60>
     65e:	2301      	movs	r3, #1
     660:	4398      	bics	r0, r3
     662:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     664:	1e56      	subs	r6, r2, #1
     666:	e004      	b.n	672 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
     668:	3302      	adds	r3, #2
     66a:	b29b      	uxth	r3, r3
     66c:	3002      	adds	r0, #2
     66e:	429a      	cmp	r2, r3
     670:	d908      	bls.n	684 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
     672:	8804      	ldrh	r4, [r0, #0]
     674:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     676:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     678:	42b3      	cmp	r3, r6
     67a:	daf5      	bge.n	668 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
     67c:	18cd      	adds	r5, r1, r3
     67e:	0a24      	lsrs	r4, r4, #8
     680:	706c      	strb	r4, [r5, #1]
     682:	e7f1      	b.n	668 <nvm_read_buffer+0x40>
	return STATUS_OK;
     684:	2400      	movs	r4, #0
     686:	e7d7      	b.n	638 <nvm_read_buffer+0x10>
     688:	2400      	movs	r4, #0
     68a:	e7d5      	b.n	638 <nvm_read_buffer+0x10>
     68c:	200000ec 	.word	0x200000ec
     690:	41004000 	.word	0x41004000

00000694 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     694:	4b13      	ldr	r3, [pc, #76]	; (6e4 <nvm_erase_row+0x50>)
     696:	881a      	ldrh	r2, [r3, #0]
     698:	885b      	ldrh	r3, [r3, #2]
     69a:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     69c:	2118      	movs	r1, #24
	if (row_address >
     69e:	4283      	cmp	r3, r0
     6a0:	d201      	bcs.n	6a6 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     6a2:	0008      	movs	r0, r1
     6a4:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     6a6:	0092      	lsls	r2, r2, #2
     6a8:	3a01      	subs	r2, #1
     6aa:	4210      	tst	r0, r2
     6ac:	d1f9      	bne.n	6a2 <nvm_erase_row+0xe>
     6ae:	4b0e      	ldr	r3, [pc, #56]	; (6e8 <nvm_erase_row+0x54>)
     6b0:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     6b2:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     6b4:	07db      	lsls	r3, r3, #31
     6b6:	d5f4      	bpl.n	6a2 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     6b8:	4b0b      	ldr	r3, [pc, #44]	; (6e8 <nvm_erase_row+0x54>)
     6ba:	2220      	movs	r2, #32
     6bc:	32ff      	adds	r2, #255	; 0xff
     6be:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     6c0:	0880      	lsrs	r0, r0, #2
     6c2:	0040      	lsls	r0, r0, #1
     6c4:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     6c6:	4a09      	ldr	r2, [pc, #36]	; (6ec <nvm_erase_row+0x58>)
     6c8:	801a      	strh	r2, [r3, #0]
     6ca:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     6cc:	2201      	movs	r2, #1
     6ce:	7d0b      	ldrb	r3, [r1, #20]
     6d0:	4213      	tst	r3, r2
     6d2:	d0fc      	beq.n	6ce <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     6d4:	4b04      	ldr	r3, [pc, #16]	; (6e8 <nvm_erase_row+0x54>)
     6d6:	8b19      	ldrh	r1, [r3, #24]
     6d8:	201c      	movs	r0, #28
     6da:	4001      	ands	r1, r0
	return STATUS_OK;
     6dc:	1e48      	subs	r0, r1, #1
     6de:	4181      	sbcs	r1, r0
     6e0:	0089      	lsls	r1, r1, #2
     6e2:	e7de      	b.n	6a2 <nvm_erase_row+0xe>
     6e4:	200000ec 	.word	0x200000ec
     6e8:	41004000 	.word	0x41004000
     6ec:	ffffa502 	.word	0xffffa502

000006f0 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
     6f0:	b530      	push	{r4, r5, lr}
     6f2:	b083      	sub	sp, #12
     6f4:	0004      	movs	r4, r0
     6f6:	4b21      	ldr	r3, [pc, #132]	; (77c <nvm_get_parameters+0x8c>)
     6f8:	6818      	ldr	r0, [r3, #0]
	/* Sanity check parameters */
	Assert(parameters);
     6fa:	2800      	cmp	r0, #0
     6fc:	d02e      	beq.n	75c <nvm_get_parameters+0x6c>
     6fe:	2c00      	cmp	r4, #0
     700:	d022      	beq.n	748 <nvm_get_parameters+0x58>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     702:	4b1f      	ldr	r3, [pc, #124]	; (780 <nvm_get_parameters+0x90>)
     704:	2220      	movs	r2, #32
     706:	32ff      	adds	r2, #255	; 0xff
     708:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     70a:	6899      	ldr	r1, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     70c:	034a      	lsls	r2, r1, #13
     70e:	0f52      	lsrs	r2, r2, #29
     710:	2308      	movs	r3, #8
     712:	4093      	lsls	r3, r2
	parameters->page_size =
     714:	7023      	strb	r3, [r4, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     716:	8061      	strh	r1, [r4, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     718:	4b1a      	ldr	r3, [pc, #104]	; (784 <nvm_get_parameters+0x94>)
     71a:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
     71c:	065b      	lsls	r3, r3, #25
     71e:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     720:	2b07      	cmp	r3, #7
     722:	d024      	beq.n	76e <nvm_get_parameters+0x7e>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     724:	2206      	movs	r2, #6
     726:	1ad2      	subs	r2, r2, r3
     728:	2304      	movs	r3, #4
     72a:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
     72c:	6063      	str	r3, [r4, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     72e:	4b15      	ldr	r3, [pc, #84]	; (784 <nvm_get_parameters+0x94>)
     730:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
     732:	2207      	movs	r2, #7
     734:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     736:	2b07      	cmp	r3, #7
     738:	d01c      	beq.n	774 <nvm_get_parameters+0x84>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     73a:	2207      	movs	r2, #7
     73c:	1ad2      	subs	r2, r2, r3
     73e:	2304      	movs	r3, #4
     740:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
     742:	60a3      	str	r3, [r4, #8]
	}
}
     744:	b003      	add	sp, #12
     746:	bd30      	pop	{r4, r5, pc}
	Assert(parameters);
     748:	4b0f      	ldr	r3, [pc, #60]	; (788 <nvm_get_parameters+0x98>)
     74a:	9301      	str	r3, [sp, #4]
     74c:	4b0f      	ldr	r3, [pc, #60]	; (78c <nvm_get_parameters+0x9c>)
     74e:	9300      	str	r3, [sp, #0]
     750:	4b0f      	ldr	r3, [pc, #60]	; (790 <nvm_get_parameters+0xa0>)
     752:	4a10      	ldr	r2, [pc, #64]	; (794 <nvm_get_parameters+0xa4>)
     754:	2101      	movs	r1, #1
     756:	4d10      	ldr	r5, [pc, #64]	; (798 <nvm_get_parameters+0xa8>)
     758:	47a8      	blx	r5
     75a:	e7d2      	b.n	702 <nvm_get_parameters+0x12>
     75c:	2c00      	cmp	r4, #0
     75e:	d1d0      	bne.n	702 <nvm_get_parameters+0x12>
     760:	4b0b      	ldr	r3, [pc, #44]	; (790 <nvm_get_parameters+0xa0>)
     762:	4a0c      	ldr	r2, [pc, #48]	; (794 <nvm_get_parameters+0xa4>)
     764:	4908      	ldr	r1, [pc, #32]	; (788 <nvm_get_parameters+0x98>)
     766:	480d      	ldr	r0, [pc, #52]	; (79c <nvm_get_parameters+0xac>)
     768:	4c0d      	ldr	r4, [pc, #52]	; (7a0 <nvm_get_parameters+0xb0>)
     76a:	47a0      	blx	r4
     76c:	e7fe      	b.n	76c <nvm_get_parameters+0x7c>
		parameters->eeprom_number_of_pages = 0;
     76e:	2300      	movs	r3, #0
     770:	6063      	str	r3, [r4, #4]
     772:	e7dc      	b.n	72e <nvm_get_parameters+0x3e>
		parameters->bootloader_number_of_pages = 0;
     774:	2300      	movs	r3, #0
     776:	60a3      	str	r3, [r4, #8]
     778:	e7e4      	b.n	744 <nvm_get_parameters+0x54>
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	2000008c 	.word	0x2000008c
     780:	41004000 	.word	0x41004000
     784:	00804000 	.word	0x00804000
     788:	00004520 	.word	0x00004520
     78c:	000042d0 	.word	0x000042d0
     790:	000002b9 	.word	0x000002b9
     794:	0000452c 	.word	0x0000452c
     798:	00000211 	.word	0x00000211
     79c:	000042e8 	.word	0x000042e8
     7a0:	0000371d 	.word	0x0000371d

000007a4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     7a4:	b570      	push	{r4, r5, r6, lr}
     7a6:	b084      	sub	sp, #16
     7a8:	0005      	movs	r5, r0
     7aa:	000c      	movs	r4, r1
     7ac:	4b13      	ldr	r3, [pc, #76]	; (7fc <port_pin_set_config+0x58>)
     7ae:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
     7b0:	2800      	cmp	r0, #0
     7b2:	d019      	beq.n	7e8 <port_pin_set_config+0x44>
     7b4:	2900      	cmp	r1, #0
     7b6:	d00d      	beq.n	7d4 <port_pin_set_config+0x30>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7b8:	a903      	add	r1, sp, #12
     7ba:	2380      	movs	r3, #128	; 0x80
     7bc:	700b      	strb	r3, [r1, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     7be:	7823      	ldrb	r3, [r4, #0]
     7c0:	704b      	strb	r3, [r1, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     7c2:	7863      	ldrb	r3, [r4, #1]
     7c4:	708b      	strb	r3, [r1, #2]
	pinmux_config.powersave    = config->powersave;
     7c6:	78a3      	ldrb	r3, [r4, #2]
     7c8:	70cb      	strb	r3, [r1, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     7ca:	0028      	movs	r0, r5
     7cc:	4b0c      	ldr	r3, [pc, #48]	; (800 <port_pin_set_config+0x5c>)
     7ce:	4798      	blx	r3
}
     7d0:	b004      	add	sp, #16
     7d2:	bd70      	pop	{r4, r5, r6, pc}
	Assert(config);
     7d4:	4b0b      	ldr	r3, [pc, #44]	; (804 <port_pin_set_config+0x60>)
     7d6:	9301      	str	r3, [sp, #4]
     7d8:	4b0b      	ldr	r3, [pc, #44]	; (808 <port_pin_set_config+0x64>)
     7da:	9300      	str	r3, [sp, #0]
     7dc:	2341      	movs	r3, #65	; 0x41
     7de:	4a0b      	ldr	r2, [pc, #44]	; (80c <port_pin_set_config+0x68>)
     7e0:	2101      	movs	r1, #1
     7e2:	4e0b      	ldr	r6, [pc, #44]	; (810 <port_pin_set_config+0x6c>)
     7e4:	47b0      	blx	r6
     7e6:	e7e7      	b.n	7b8 <port_pin_set_config+0x14>
     7e8:	2900      	cmp	r1, #0
     7ea:	d1e5      	bne.n	7b8 <port_pin_set_config+0x14>
     7ec:	2341      	movs	r3, #65	; 0x41
     7ee:	4a07      	ldr	r2, [pc, #28]	; (80c <port_pin_set_config+0x68>)
     7f0:	4904      	ldr	r1, [pc, #16]	; (804 <port_pin_set_config+0x60>)
     7f2:	4808      	ldr	r0, [pc, #32]	; (814 <port_pin_set_config+0x70>)
     7f4:	4c08      	ldr	r4, [pc, #32]	; (818 <port_pin_set_config+0x74>)
     7f6:	47a0      	blx	r4
     7f8:	e7fe      	b.n	7f8 <port_pin_set_config+0x54>
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	2000008c 	.word	0x2000008c
     800:	000020b5 	.word	0x000020b5
     804:	00004550 	.word	0x00004550
     808:	000042d0 	.word	0x000042d0
     80c:	00004558 	.word	0x00004558
     810:	00000211 	.word	0x00000211
     814:	000042e8 	.word	0x000042e8
     818:	0000371d 	.word	0x0000371d

0000081c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     81c:	b5f0      	push	{r4, r5, r6, r7, lr}
     81e:	46de      	mov	lr, fp
     820:	4657      	mov	r7, sl
     822:	464e      	mov	r6, r9
     824:	4645      	mov	r5, r8
     826:	b5e0      	push	{r5, r6, r7, lr}
     828:	b087      	sub	sp, #28
     82a:	4680      	mov	r8, r0
     82c:	9104      	str	r1, [sp, #16]
     82e:	0016      	movs	r6, r2
     830:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     832:	2200      	movs	r2, #0
     834:	2300      	movs	r3, #0
     836:	2100      	movs	r1, #0
     838:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     83a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     83c:	2001      	movs	r0, #1
     83e:	0021      	movs	r1, r4
     840:	9600      	str	r6, [sp, #0]
     842:	9701      	str	r7, [sp, #4]
     844:	465c      	mov	r4, fp
     846:	9403      	str	r4, [sp, #12]
     848:	4644      	mov	r4, r8
     84a:	9405      	str	r4, [sp, #20]
     84c:	e013      	b.n	876 <long_division+0x5a>
     84e:	2420      	movs	r4, #32
     850:	1a64      	subs	r4, r4, r1
     852:	0005      	movs	r5, r0
     854:	40e5      	lsrs	r5, r4
     856:	46a8      	mov	r8, r5
     858:	e014      	b.n	884 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     85a:	9c00      	ldr	r4, [sp, #0]
     85c:	9d01      	ldr	r5, [sp, #4]
     85e:	1b12      	subs	r2, r2, r4
     860:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     862:	465c      	mov	r4, fp
     864:	464d      	mov	r5, r9
     866:	432c      	orrs	r4, r5
     868:	46a3      	mov	fp, r4
     86a:	9c03      	ldr	r4, [sp, #12]
     86c:	4645      	mov	r5, r8
     86e:	432c      	orrs	r4, r5
     870:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     872:	3901      	subs	r1, #1
     874:	d325      	bcc.n	8c2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     876:	2420      	movs	r4, #32
     878:	4264      	negs	r4, r4
     87a:	190c      	adds	r4, r1, r4
     87c:	d4e7      	bmi.n	84e <long_division+0x32>
     87e:	0005      	movs	r5, r0
     880:	40a5      	lsls	r5, r4
     882:	46a8      	mov	r8, r5
     884:	0004      	movs	r4, r0
     886:	408c      	lsls	r4, r1
     888:	46a1      	mov	r9, r4
		r = r << 1;
     88a:	1892      	adds	r2, r2, r2
     88c:	415b      	adcs	r3, r3
     88e:	0014      	movs	r4, r2
     890:	001d      	movs	r5, r3
		if (n & bit_shift) {
     892:	9e05      	ldr	r6, [sp, #20]
     894:	464f      	mov	r7, r9
     896:	403e      	ands	r6, r7
     898:	46b4      	mov	ip, r6
     89a:	9e04      	ldr	r6, [sp, #16]
     89c:	4647      	mov	r7, r8
     89e:	403e      	ands	r6, r7
     8a0:	46b2      	mov	sl, r6
     8a2:	4666      	mov	r6, ip
     8a4:	4657      	mov	r7, sl
     8a6:	433e      	orrs	r6, r7
     8a8:	d003      	beq.n	8b2 <long_division+0x96>
			r |= 0x01;
     8aa:	0006      	movs	r6, r0
     8ac:	4326      	orrs	r6, r4
     8ae:	0032      	movs	r2, r6
     8b0:	002b      	movs	r3, r5
		if (r >= d) {
     8b2:	9c00      	ldr	r4, [sp, #0]
     8b4:	9d01      	ldr	r5, [sp, #4]
     8b6:	429d      	cmp	r5, r3
     8b8:	d8db      	bhi.n	872 <long_division+0x56>
     8ba:	d1ce      	bne.n	85a <long_division+0x3e>
     8bc:	4294      	cmp	r4, r2
     8be:	d8d8      	bhi.n	872 <long_division+0x56>
     8c0:	e7cb      	b.n	85a <long_division+0x3e>
     8c2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     8c4:	4658      	mov	r0, fp
     8c6:	0019      	movs	r1, r3
     8c8:	b007      	add	sp, #28
     8ca:	bc3c      	pop	{r2, r3, r4, r5}
     8cc:	4690      	mov	r8, r2
     8ce:	4699      	mov	r9, r3
     8d0:	46a2      	mov	sl, r4
     8d2:	46ab      	mov	fp, r5
     8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000008d6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     8d6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     8d8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8da:	2340      	movs	r3, #64	; 0x40
     8dc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     8de:	4281      	cmp	r1, r0
     8e0:	d202      	bcs.n	8e8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     8e2:	0018      	movs	r0, r3
     8e4:	bd10      	pop	{r4, pc}
		baud_calculated++;
     8e6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     8e8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     8ea:	1c63      	adds	r3, r4, #1
     8ec:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     8ee:	4288      	cmp	r0, r1
     8f0:	d9f9      	bls.n	8e6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8f2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     8f4:	2cff      	cmp	r4, #255	; 0xff
     8f6:	d8f4      	bhi.n	8e2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     8f8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     8fa:	2300      	movs	r3, #0
     8fc:	e7f1      	b.n	8e2 <_sercom_get_sync_baud_val+0xc>
	...

00000900 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     900:	b5f0      	push	{r4, r5, r6, r7, lr}
     902:	b083      	sub	sp, #12
     904:	000f      	movs	r7, r1
     906:	0016      	movs	r6, r2
     908:	aa08      	add	r2, sp, #32
     90a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     90c:	0004      	movs	r4, r0
     90e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     910:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     912:	42bc      	cmp	r4, r7
     914:	d902      	bls.n	91c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     916:	0010      	movs	r0, r2
     918:	b003      	add	sp, #12
     91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     91c:	2b00      	cmp	r3, #0
     91e:	d114      	bne.n	94a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     920:	0002      	movs	r2, r0
     922:	0008      	movs	r0, r1
     924:	2100      	movs	r1, #0
     926:	4c19      	ldr	r4, [pc, #100]	; (98c <_sercom_get_async_baud_val+0x8c>)
     928:	47a0      	blx	r4
     92a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     92c:	003a      	movs	r2, r7
     92e:	2300      	movs	r3, #0
     930:	2000      	movs	r0, #0
     932:	4c17      	ldr	r4, [pc, #92]	; (990 <_sercom_get_async_baud_val+0x90>)
     934:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     936:	2200      	movs	r2, #0
     938:	2301      	movs	r3, #1
     93a:	1a12      	subs	r2, r2, r0
     93c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     93e:	0c12      	lsrs	r2, r2, #16
     940:	041b      	lsls	r3, r3, #16
     942:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     944:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     946:	2200      	movs	r2, #0
     948:	e7e5      	b.n	916 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     94a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     94c:	2b01      	cmp	r3, #1
     94e:	d1f9      	bne.n	944 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     950:	000a      	movs	r2, r1
     952:	2300      	movs	r3, #0
     954:	2100      	movs	r1, #0
     956:	4c0d      	ldr	r4, [pc, #52]	; (98c <_sercom_get_async_baud_val+0x8c>)
     958:	47a0      	blx	r4
     95a:	0002      	movs	r2, r0
     95c:	000b      	movs	r3, r1
     95e:	9200      	str	r2, [sp, #0]
     960:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     962:	0038      	movs	r0, r7
     964:	2100      	movs	r1, #0
     966:	4c0a      	ldr	r4, [pc, #40]	; (990 <_sercom_get_async_baud_val+0x90>)
     968:	47a0      	blx	r4
     96a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     96c:	2380      	movs	r3, #128	; 0x80
     96e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     970:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     972:	4298      	cmp	r0, r3
     974:	d8cf      	bhi.n	916 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     976:	0f79      	lsrs	r1, r7, #29
     978:	00f8      	lsls	r0, r7, #3
     97a:	9a00      	ldr	r2, [sp, #0]
     97c:	9b01      	ldr	r3, [sp, #4]
     97e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     980:	00ea      	lsls	r2, r5, #3
     982:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     984:	b2d2      	uxtb	r2, r2
     986:	0352      	lsls	r2, r2, #13
     988:	432a      	orrs	r2, r5
     98a:	e7db      	b.n	944 <_sercom_get_async_baud_val+0x44>
     98c:	000030b1 	.word	0x000030b1
     990:	0000081d 	.word	0x0000081d

00000994 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     994:	b510      	push	{r4, lr}
     996:	b082      	sub	sp, #8
     998:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     99a:	4b0e      	ldr	r3, [pc, #56]	; (9d4 <sercom_set_gclk_generator+0x40>)
     99c:	781b      	ldrb	r3, [r3, #0]
     99e:	2b00      	cmp	r3, #0
     9a0:	d007      	beq.n	9b2 <sercom_set_gclk_generator+0x1e>
     9a2:	2900      	cmp	r1, #0
     9a4:	d105      	bne.n	9b2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     9a6:	4b0b      	ldr	r3, [pc, #44]	; (9d4 <sercom_set_gclk_generator+0x40>)
     9a8:	785b      	ldrb	r3, [r3, #1]
     9aa:	4283      	cmp	r3, r0
     9ac:	d010      	beq.n	9d0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     9ae:	201d      	movs	r0, #29
     9b0:	e00c      	b.n	9cc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     9b2:	a901      	add	r1, sp, #4
     9b4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     9b6:	2013      	movs	r0, #19
     9b8:	4b07      	ldr	r3, [pc, #28]	; (9d8 <sercom_set_gclk_generator+0x44>)
     9ba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     9bc:	2013      	movs	r0, #19
     9be:	4b07      	ldr	r3, [pc, #28]	; (9dc <sercom_set_gclk_generator+0x48>)
     9c0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     9c2:	4b04      	ldr	r3, [pc, #16]	; (9d4 <sercom_set_gclk_generator+0x40>)
     9c4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     9c6:	2201      	movs	r2, #1
     9c8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     9ca:	2000      	movs	r0, #0
}
     9cc:	b002      	add	sp, #8
     9ce:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     9d0:	2000      	movs	r0, #0
     9d2:	e7fb      	b.n	9cc <sercom_set_gclk_generator+0x38>
     9d4:	200000f4 	.word	0x200000f4
     9d8:	00001ed1 	.word	0x00001ed1
     9dc:	00001de5 	.word	0x00001de5

000009e0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     9e0:	b510      	push	{r4, lr}
     9e2:	b082      	sub	sp, #8
	switch ((uintptr_t)sercom_module) {
     9e4:	4b46      	ldr	r3, [pc, #280]	; (b00 <_sercom_get_default_pad+0x120>)
     9e6:	4298      	cmp	r0, r3
     9e8:	d045      	beq.n	a76 <_sercom_get_default_pad+0x96>
     9ea:	d913      	bls.n	a14 <_sercom_get_default_pad+0x34>
     9ec:	4b45      	ldr	r3, [pc, #276]	; (b04 <_sercom_get_default_pad+0x124>)
     9ee:	4298      	cmp	r0, r3
     9f0:	d053      	beq.n	a9a <_sercom_get_default_pad+0xba>
     9f2:	4b45      	ldr	r3, [pc, #276]	; (b08 <_sercom_get_default_pad+0x128>)
     9f4:	4298      	cmp	r0, r3
     9f6:	d05e      	beq.n	ab6 <_sercom_get_default_pad+0xd6>
     9f8:	4b44      	ldr	r3, [pc, #272]	; (b0c <_sercom_get_default_pad+0x12c>)
     9fa:	4298      	cmp	r0, r3
     9fc:	d122      	bne.n	a44 <_sercom_get_default_pad+0x64>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9fe:	2901      	cmp	r1, #1
     a00:	d047      	beq.n	a92 <_sercom_get_default_pad+0xb2>
     a02:	2900      	cmp	r1, #0
     a04:	d100      	bne.n	a08 <_sercom_get_default_pad+0x28>
     a06:	e074      	b.n	af2 <_sercom_get_default_pad+0x112>
     a08:	2902      	cmp	r1, #2
     a0a:	d044      	beq.n	a96 <_sercom_get_default_pad+0xb6>
     a0c:	2903      	cmp	r1, #3
     a0e:	d119      	bne.n	a44 <_sercom_get_default_pad+0x64>
     a10:	483f      	ldr	r0, [pc, #252]	; (b10 <_sercom_get_default_pad+0x130>)
     a12:	e026      	b.n	a62 <_sercom_get_default_pad+0x82>
	switch ((uintptr_t)sercom_module) {
     a14:	4b3f      	ldr	r3, [pc, #252]	; (b14 <_sercom_get_default_pad+0x134>)
     a16:	4298      	cmp	r0, r3
     a18:	d00c      	beq.n	a34 <_sercom_get_default_pad+0x54>
     a1a:	4b3f      	ldr	r3, [pc, #252]	; (b18 <_sercom_get_default_pad+0x138>)
     a1c:	4298      	cmp	r0, r3
     a1e:	d111      	bne.n	a44 <_sercom_get_default_pad+0x64>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a20:	2901      	cmp	r1, #1
     a22:	d024      	beq.n	a6e <_sercom_get_default_pad+0x8e>
     a24:	2900      	cmp	r1, #0
     a26:	d060      	beq.n	aea <_sercom_get_default_pad+0x10a>
     a28:	2902      	cmp	r1, #2
     a2a:	d022      	beq.n	a72 <_sercom_get_default_pad+0x92>
     a2c:	2903      	cmp	r1, #3
     a2e:	d109      	bne.n	a44 <_sercom_get_default_pad+0x64>
     a30:	483a      	ldr	r0, [pc, #232]	; (b1c <_sercom_get_default_pad+0x13c>)
     a32:	e016      	b.n	a62 <_sercom_get_default_pad+0x82>
     a34:	2901      	cmp	r1, #1
     a36:	d016      	beq.n	a66 <_sercom_get_default_pad+0x86>
     a38:	2900      	cmp	r1, #0
     a3a:	d052      	beq.n	ae2 <_sercom_get_default_pad+0x102>
     a3c:	2902      	cmp	r1, #2
     a3e:	d052      	beq.n	ae6 <_sercom_get_default_pad+0x106>
     a40:	2903      	cmp	r1, #3
     a42:	d012      	beq.n	a6a <_sercom_get_default_pad+0x8a>
     a44:	4b36      	ldr	r3, [pc, #216]	; (b20 <_sercom_get_default_pad+0x140>)
     a46:	6818      	ldr	r0, [r3, #0]
	}

	Assert(false);
     a48:	2800      	cmp	r0, #0
     a4a:	d042      	beq.n	ad2 <_sercom_get_default_pad+0xf2>
     a4c:	4b35      	ldr	r3, [pc, #212]	; (b24 <_sercom_get_default_pad+0x144>)
     a4e:	9301      	str	r3, [sp, #4]
     a50:	4b35      	ldr	r3, [pc, #212]	; (b28 <_sercom_get_default_pad+0x148>)
     a52:	9300      	str	r3, [sp, #0]
     a54:	2383      	movs	r3, #131	; 0x83
     a56:	005b      	lsls	r3, r3, #1
     a58:	4a34      	ldr	r2, [pc, #208]	; (b2c <_sercom_get_default_pad+0x14c>)
     a5a:	2101      	movs	r1, #1
     a5c:	4c34      	ldr	r4, [pc, #208]	; (b30 <_sercom_get_default_pad+0x150>)
     a5e:	47a0      	blx	r4
	return 0;
     a60:	2000      	movs	r0, #0
}
     a62:	b002      	add	sp, #8
     a64:	bd10      	pop	{r4, pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a66:	4833      	ldr	r0, [pc, #204]	; (b34 <_sercom_get_default_pad+0x154>)
     a68:	e7fb      	b.n	a62 <_sercom_get_default_pad+0x82>
     a6a:	4833      	ldr	r0, [pc, #204]	; (b38 <_sercom_get_default_pad+0x158>)
     a6c:	e7f9      	b.n	a62 <_sercom_get_default_pad+0x82>
     a6e:	4833      	ldr	r0, [pc, #204]	; (b3c <_sercom_get_default_pad+0x15c>)
     a70:	e7f7      	b.n	a62 <_sercom_get_default_pad+0x82>
     a72:	4833      	ldr	r0, [pc, #204]	; (b40 <_sercom_get_default_pad+0x160>)
     a74:	e7f5      	b.n	a62 <_sercom_get_default_pad+0x82>
     a76:	2901      	cmp	r1, #1
     a78:	d007      	beq.n	a8a <_sercom_get_default_pad+0xaa>
     a7a:	2900      	cmp	r1, #0
     a7c:	d037      	beq.n	aee <_sercom_get_default_pad+0x10e>
     a7e:	2902      	cmp	r1, #2
     a80:	d005      	beq.n	a8e <_sercom_get_default_pad+0xae>
     a82:	2903      	cmp	r1, #3
     a84:	d1de      	bne.n	a44 <_sercom_get_default_pad+0x64>
     a86:	482f      	ldr	r0, [pc, #188]	; (b44 <_sercom_get_default_pad+0x164>)
     a88:	e7eb      	b.n	a62 <_sercom_get_default_pad+0x82>
     a8a:	482f      	ldr	r0, [pc, #188]	; (b48 <_sercom_get_default_pad+0x168>)
     a8c:	e7e9      	b.n	a62 <_sercom_get_default_pad+0x82>
     a8e:	482f      	ldr	r0, [pc, #188]	; (b4c <_sercom_get_default_pad+0x16c>)
     a90:	e7e7      	b.n	a62 <_sercom_get_default_pad+0x82>
     a92:	482f      	ldr	r0, [pc, #188]	; (b50 <_sercom_get_default_pad+0x170>)
     a94:	e7e5      	b.n	a62 <_sercom_get_default_pad+0x82>
     a96:	482f      	ldr	r0, [pc, #188]	; (b54 <_sercom_get_default_pad+0x174>)
     a98:	e7e3      	b.n	a62 <_sercom_get_default_pad+0x82>
     a9a:	2901      	cmp	r1, #1
     a9c:	d007      	beq.n	aae <_sercom_get_default_pad+0xce>
     a9e:	2900      	cmp	r1, #0
     aa0:	d029      	beq.n	af6 <_sercom_get_default_pad+0x116>
     aa2:	2902      	cmp	r1, #2
     aa4:	d005      	beq.n	ab2 <_sercom_get_default_pad+0xd2>
     aa6:	2903      	cmp	r1, #3
     aa8:	d1cc      	bne.n	a44 <_sercom_get_default_pad+0x64>
     aaa:	482b      	ldr	r0, [pc, #172]	; (b58 <_sercom_get_default_pad+0x178>)
     aac:	e7d9      	b.n	a62 <_sercom_get_default_pad+0x82>
     aae:	482b      	ldr	r0, [pc, #172]	; (b5c <_sercom_get_default_pad+0x17c>)
     ab0:	e7d7      	b.n	a62 <_sercom_get_default_pad+0x82>
     ab2:	482b      	ldr	r0, [pc, #172]	; (b60 <_sercom_get_default_pad+0x180>)
     ab4:	e7d5      	b.n	a62 <_sercom_get_default_pad+0x82>
     ab6:	2901      	cmp	r1, #1
     ab8:	d007      	beq.n	aca <_sercom_get_default_pad+0xea>
     aba:	2900      	cmp	r1, #0
     abc:	d01d      	beq.n	afa <_sercom_get_default_pad+0x11a>
     abe:	2902      	cmp	r1, #2
     ac0:	d005      	beq.n	ace <_sercom_get_default_pad+0xee>
     ac2:	2903      	cmp	r1, #3
     ac4:	d1be      	bne.n	a44 <_sercom_get_default_pad+0x64>
     ac6:	4827      	ldr	r0, [pc, #156]	; (b64 <_sercom_get_default_pad+0x184>)
     ac8:	e7cb      	b.n	a62 <_sercom_get_default_pad+0x82>
     aca:	4827      	ldr	r0, [pc, #156]	; (b68 <_sercom_get_default_pad+0x188>)
     acc:	e7c9      	b.n	a62 <_sercom_get_default_pad+0x82>
     ace:	4827      	ldr	r0, [pc, #156]	; (b6c <_sercom_get_default_pad+0x18c>)
     ad0:	e7c7      	b.n	a62 <_sercom_get_default_pad+0x82>
	Assert(false);
     ad2:	2383      	movs	r3, #131	; 0x83
     ad4:	005b      	lsls	r3, r3, #1
     ad6:	4a15      	ldr	r2, [pc, #84]	; (b2c <_sercom_get_default_pad+0x14c>)
     ad8:	4912      	ldr	r1, [pc, #72]	; (b24 <_sercom_get_default_pad+0x144>)
     ada:	4825      	ldr	r0, [pc, #148]	; (b70 <_sercom_get_default_pad+0x190>)
     adc:	4c25      	ldr	r4, [pc, #148]	; (b74 <_sercom_get_default_pad+0x194>)
     ade:	47a0      	blx	r4
     ae0:	e7fe      	b.n	ae0 <_sercom_get_default_pad+0x100>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ae2:	4825      	ldr	r0, [pc, #148]	; (b78 <_sercom_get_default_pad+0x198>)
     ae4:	e7bd      	b.n	a62 <_sercom_get_default_pad+0x82>
     ae6:	4825      	ldr	r0, [pc, #148]	; (b7c <_sercom_get_default_pad+0x19c>)
     ae8:	e7bb      	b.n	a62 <_sercom_get_default_pad+0x82>
     aea:	2003      	movs	r0, #3
     aec:	e7b9      	b.n	a62 <_sercom_get_default_pad+0x82>
     aee:	4824      	ldr	r0, [pc, #144]	; (b80 <_sercom_get_default_pad+0x1a0>)
     af0:	e7b7      	b.n	a62 <_sercom_get_default_pad+0x82>
     af2:	4824      	ldr	r0, [pc, #144]	; (b84 <_sercom_get_default_pad+0x1a4>)
     af4:	e7b5      	b.n	a62 <_sercom_get_default_pad+0x82>
     af6:	4824      	ldr	r0, [pc, #144]	; (b88 <_sercom_get_default_pad+0x1a8>)
     af8:	e7b3      	b.n	a62 <_sercom_get_default_pad+0x82>
     afa:	4824      	ldr	r0, [pc, #144]	; (b8c <_sercom_get_default_pad+0x1ac>)
     afc:	e7b1      	b.n	a62 <_sercom_get_default_pad+0x82>
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	42001000 	.word	0x42001000
     b04:	42001800 	.word	0x42001800
     b08:	42001c00 	.word	0x42001c00
     b0c:	42001400 	.word	0x42001400
     b10:	00130003 	.word	0x00130003
     b14:	42000800 	.word	0x42000800
     b18:	42000c00 	.word	0x42000c00
     b1c:	001f0003 	.word	0x001f0003
     b20:	2000008c 	.word	0x2000008c
     b24:	000045bc 	.word	0x000045bc
     b28:	000042d0 	.word	0x000042d0
     b2c:	00004594 	.word	0x00004594
     b30:	00000211 	.word	0x00000211
     b34:	00050003 	.word	0x00050003
     b38:	00070003 	.word	0x00070003
     b3c:	00010003 	.word	0x00010003
     b40:	001e0003 	.word	0x001e0003
     b44:	000b0003 	.word	0x000b0003
     b48:	00090003 	.word	0x00090003
     b4c:	000a0003 	.word	0x000a0003
     b50:	00110003 	.word	0x00110003
     b54:	00120003 	.word	0x00120003
     b58:	000f0003 	.word	0x000f0003
     b5c:	000d0003 	.word	0x000d0003
     b60:	000e0003 	.word	0x000e0003
     b64:	00190003 	.word	0x00190003
     b68:	00170003 	.word	0x00170003
     b6c:	00180003 	.word	0x00180003
     b70:	000042e8 	.word	0x000042e8
     b74:	0000371d 	.word	0x0000371d
     b78:	00040003 	.word	0x00040003
     b7c:	00060003 	.word	0x00060003
     b80:	00080003 	.word	0x00080003
     b84:	00100003 	.word	0x00100003
     b88:	000c0003 	.word	0x000c0003
     b8c:	00160003 	.word	0x00160003

00000b90 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b90:	b530      	push	{r4, r5, lr}
     b92:	b089      	sub	sp, #36	; 0x24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b94:	a902      	add	r1, sp, #8
     b96:	4b17      	ldr	r3, [pc, #92]	; (bf4 <_sercom_get_sercom_inst_index+0x64>)
     b98:	000a      	movs	r2, r1
     b9a:	cb32      	ldmia	r3!, {r1, r4, r5}
     b9c:	c232      	stmia	r2!, {r1, r4, r5}
     b9e:	cb32      	ldmia	r3!, {r1, r4, r5}
     ba0:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ba2:	0003      	movs	r3, r0
     ba4:	9a02      	ldr	r2, [sp, #8]
     ba6:	4282      	cmp	r2, r0
     ba8:	d019      	beq.n	bde <_sercom_get_sercom_inst_index+0x4e>
     baa:	2001      	movs	r0, #1
     bac:	a902      	add	r1, sp, #8
     bae:	0082      	lsls	r2, r0, #2
     bb0:	5852      	ldr	r2, [r2, r1]
     bb2:	429a      	cmp	r2, r3
     bb4:	d014      	beq.n	be0 <_sercom_get_sercom_inst_index+0x50>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bb6:	3001      	adds	r0, #1
     bb8:	2806      	cmp	r0, #6
     bba:	d1f8      	bne.n	bae <_sercom_get_sercom_inst_index+0x1e>
     bbc:	4b0e      	ldr	r3, [pc, #56]	; (bf8 <_sercom_get_sercom_inst_index+0x68>)
     bbe:	6818      	ldr	r0, [r3, #0]
			return i;
		}
	}

	/* Invalid data given */
	Assert(false);
     bc0:	2800      	cmp	r0, #0
     bc2:	d00f      	beq.n	be4 <_sercom_get_sercom_inst_index+0x54>
     bc4:	4b0d      	ldr	r3, [pc, #52]	; (bfc <_sercom_get_sercom_inst_index+0x6c>)
     bc6:	9301      	str	r3, [sp, #4]
     bc8:	4b0d      	ldr	r3, [pc, #52]	; (c00 <_sercom_get_sercom_inst_index+0x70>)
     bca:	9300      	str	r3, [sp, #0]
     bcc:	2390      	movs	r3, #144	; 0x90
     bce:	005b      	lsls	r3, r3, #1
     bd0:	4a0c      	ldr	r2, [pc, #48]	; (c04 <_sercom_get_sercom_inst_index+0x74>)
     bd2:	2101      	movs	r1, #1
     bd4:	4c0c      	ldr	r4, [pc, #48]	; (c08 <_sercom_get_sercom_inst_index+0x78>)
     bd6:	47a0      	blx	r4
	return 0;
     bd8:	2000      	movs	r0, #0
}
     bda:	b009      	add	sp, #36	; 0x24
     bdc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bde:	2000      	movs	r0, #0
			return i;
     be0:	b2c0      	uxtb	r0, r0
     be2:	e7fa      	b.n	bda <_sercom_get_sercom_inst_index+0x4a>
	Assert(false);
     be4:	2390      	movs	r3, #144	; 0x90
     be6:	005b      	lsls	r3, r3, #1
     be8:	4a06      	ldr	r2, [pc, #24]	; (c04 <_sercom_get_sercom_inst_index+0x74>)
     bea:	4904      	ldr	r1, [pc, #16]	; (bfc <_sercom_get_sercom_inst_index+0x6c>)
     bec:	4807      	ldr	r0, [pc, #28]	; (c0c <_sercom_get_sercom_inst_index+0x7c>)
     bee:	4c08      	ldr	r4, [pc, #32]	; (c10 <_sercom_get_sercom_inst_index+0x80>)
     bf0:	47a0      	blx	r4
     bf2:	e7fe      	b.n	bf2 <_sercom_get_sercom_inst_index+0x62>
     bf4:	0000457c 	.word	0x0000457c
     bf8:	2000008c 	.word	0x2000008c
     bfc:	000045bc 	.word	0x000045bc
     c00:	000042d0 	.word	0x000042d0
     c04:	00004594 	.word	0x00004594
     c08:	00000211 	.word	0x00000211
     c0c:	000042e8 	.word	0x000042e8
     c10:	0000371d 	.word	0x0000371d

00000c14 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
     c14:	b510      	push	{r4, lr}
     c16:	b082      	sub	sp, #8
     c18:	4b0a      	ldr	r3, [pc, #40]	; (c44 <_sercom_default_handler+0x30>)
     c1a:	6818      	ldr	r0, [r3, #0]
	Assert(false);
     c1c:	2800      	cmp	r0, #0
     c1e:	d00a      	beq.n	c36 <_sercom_default_handler+0x22>
     c20:	4b09      	ldr	r3, [pc, #36]	; (c48 <_sercom_default_handler+0x34>)
     c22:	9301      	str	r3, [sp, #4]
     c24:	4b09      	ldr	r3, [pc, #36]	; (c4c <_sercom_default_handler+0x38>)
     c26:	9300      	str	r3, [sp, #0]
     c28:	2341      	movs	r3, #65	; 0x41
     c2a:	4a09      	ldr	r2, [pc, #36]	; (c50 <_sercom_default_handler+0x3c>)
     c2c:	2101      	movs	r1, #1
     c2e:	4c09      	ldr	r4, [pc, #36]	; (c54 <_sercom_default_handler+0x40>)
     c30:	47a0      	blx	r4
}
     c32:	b002      	add	sp, #8
     c34:	bd10      	pop	{r4, pc}
	Assert(false);
     c36:	2341      	movs	r3, #65	; 0x41
     c38:	4a05      	ldr	r2, [pc, #20]	; (c50 <_sercom_default_handler+0x3c>)
     c3a:	4903      	ldr	r1, [pc, #12]	; (c48 <_sercom_default_handler+0x34>)
     c3c:	4806      	ldr	r0, [pc, #24]	; (c58 <_sercom_default_handler+0x44>)
     c3e:	4c07      	ldr	r4, [pc, #28]	; (c5c <_sercom_default_handler+0x48>)
     c40:	47a0      	blx	r4
     c42:	e7fe      	b.n	c42 <_sercom_default_handler+0x2e>
     c44:	2000008c 	.word	0x2000008c
     c48:	000045bc 	.word	0x000045bc
     c4c:	000042d0 	.word	0x000042d0
     c50:	000045c4 	.word	0x000045c4
     c54:	00000211 	.word	0x00000211
     c58:	000042e8 	.word	0x000042e8
     c5c:	0000371d 	.word	0x0000371d

00000c60 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c60:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c62:	4b0a      	ldr	r3, [pc, #40]	; (c8c <_sercom_set_handler+0x2c>)
     c64:	781b      	ldrb	r3, [r3, #0]
     c66:	2b00      	cmp	r3, #0
     c68:	d10c      	bne.n	c84 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c6a:	4f09      	ldr	r7, [pc, #36]	; (c90 <_sercom_set_handler+0x30>)
     c6c:	4e09      	ldr	r6, [pc, #36]	; (c94 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     c6e:	4d0a      	ldr	r5, [pc, #40]	; (c98 <_sercom_set_handler+0x38>)
     c70:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c72:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     c74:	195a      	adds	r2, r3, r5
     c76:	6014      	str	r4, [r2, #0]
     c78:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c7a:	2b18      	cmp	r3, #24
     c7c:	d1f9      	bne.n	c72 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     c7e:	2201      	movs	r2, #1
     c80:	4b02      	ldr	r3, [pc, #8]	; (c8c <_sercom_set_handler+0x2c>)
     c82:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c84:	0080      	lsls	r0, r0, #2
     c86:	4b02      	ldr	r3, [pc, #8]	; (c90 <_sercom_set_handler+0x30>)
     c88:	50c1      	str	r1, [r0, r3]
}
     c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c8c:	200000f6 	.word	0x200000f6
     c90:	200000f8 	.word	0x200000f8
     c94:	00000c15 	.word	0x00000c15
     c98:	20000200 	.word	0x20000200

00000c9c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c9c:	b500      	push	{lr}
     c9e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ca0:	2309      	movs	r3, #9
     ca2:	466a      	mov	r2, sp
     ca4:	7013      	strb	r3, [r2, #0]
     ca6:	3301      	adds	r3, #1
     ca8:	7053      	strb	r3, [r2, #1]
     caa:	3301      	adds	r3, #1
     cac:	7093      	strb	r3, [r2, #2]
     cae:	3301      	adds	r3, #1
     cb0:	70d3      	strb	r3, [r2, #3]
     cb2:	3301      	adds	r3, #1
     cb4:	7113      	strb	r3, [r2, #4]
     cb6:	3301      	adds	r3, #1
     cb8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     cba:	4b03      	ldr	r3, [pc, #12]	; (cc8 <_sercom_get_interrupt_vector+0x2c>)
     cbc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     cbe:	466b      	mov	r3, sp
     cc0:	5618      	ldrsb	r0, [r3, r0]
}
     cc2:	b003      	add	sp, #12
     cc4:	bd00      	pop	{pc}
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	00000b91 	.word	0x00000b91

00000ccc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ccc:	b510      	push	{r4, lr}
     cce:	4b02      	ldr	r3, [pc, #8]	; (cd8 <SERCOM0_Handler+0xc>)
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	2000      	movs	r0, #0
     cd4:	4798      	blx	r3
     cd6:	bd10      	pop	{r4, pc}
     cd8:	200000f8 	.word	0x200000f8

00000cdc <SERCOM1_Handler>:
     cdc:	b510      	push	{r4, lr}
     cde:	4b02      	ldr	r3, [pc, #8]	; (ce8 <SERCOM1_Handler+0xc>)
     ce0:	685b      	ldr	r3, [r3, #4]
     ce2:	2001      	movs	r0, #1
     ce4:	4798      	blx	r3
     ce6:	bd10      	pop	{r4, pc}
     ce8:	200000f8 	.word	0x200000f8

00000cec <SERCOM2_Handler>:
     cec:	b510      	push	{r4, lr}
     cee:	4b02      	ldr	r3, [pc, #8]	; (cf8 <SERCOM2_Handler+0xc>)
     cf0:	689b      	ldr	r3, [r3, #8]
     cf2:	2002      	movs	r0, #2
     cf4:	4798      	blx	r3
     cf6:	bd10      	pop	{r4, pc}
     cf8:	200000f8 	.word	0x200000f8

00000cfc <SERCOM3_Handler>:
     cfc:	b510      	push	{r4, lr}
     cfe:	4b02      	ldr	r3, [pc, #8]	; (d08 <SERCOM3_Handler+0xc>)
     d00:	68db      	ldr	r3, [r3, #12]
     d02:	2003      	movs	r0, #3
     d04:	4798      	blx	r3
     d06:	bd10      	pop	{r4, pc}
     d08:	200000f8 	.word	0x200000f8

00000d0c <SERCOM4_Handler>:
     d0c:	b510      	push	{r4, lr}
     d0e:	4b02      	ldr	r3, [pc, #8]	; (d18 <SERCOM4_Handler+0xc>)
     d10:	691b      	ldr	r3, [r3, #16]
     d12:	2004      	movs	r0, #4
     d14:	4798      	blx	r3
     d16:	bd10      	pop	{r4, pc}
     d18:	200000f8 	.word	0x200000f8

00000d1c <SERCOM5_Handler>:
     d1c:	b510      	push	{r4, lr}
     d1e:	4b02      	ldr	r3, [pc, #8]	; (d28 <SERCOM5_Handler+0xc>)
     d20:	695b      	ldr	r3, [r3, #20]
     d22:	2005      	movs	r0, #5
     d24:	4798      	blx	r3
     d26:	bd10      	pop	{r4, pc}
     d28:	200000f8 	.word	0x200000f8

00000d2c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d2e:	46de      	mov	lr, fp
     d30:	4657      	mov	r7, sl
     d32:	464e      	mov	r6, r9
     d34:	4645      	mov	r5, r8
     d36:	b5e0      	push	{r5, r6, r7, lr}
     d38:	b091      	sub	sp, #68	; 0x44
     d3a:	0004      	movs	r4, r0
     d3c:	000e      	movs	r6, r1
     d3e:	0015      	movs	r5, r2
     d40:	4bbf      	ldr	r3, [pc, #764]	; (1040 <usart_init+0x314>)
     d42:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
     d44:	2800      	cmp	r0, #0
     d46:	d026      	beq.n	d96 <usart_init+0x6a>
     d48:	2c00      	cmp	r4, #0
     d4a:	d015      	beq.n	d78 <usart_init+0x4c>
	Assert(hw);
     d4c:	2e00      	cmp	r6, #0
     d4e:	d038      	beq.n	dc2 <usart_init+0x96>
     d50:	4bbb      	ldr	r3, [pc, #748]	; (1040 <usart_init+0x314>)
     d52:	6818      	ldr	r0, [r3, #0]
	Assert(config);
     d54:	2d00      	cmp	r5, #0
     d56:	d04b      	beq.n	df0 <usart_init+0xc4>

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d58:	6026      	str	r6, [r4, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d5a:	0030      	movs	r0, r6
     d5c:	4bb9      	ldr	r3, [pc, #740]	; (1044 <usart_init+0x318>)
     d5e:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d60:	6832      	ldr	r2, [r6, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d62:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d64:	07d2      	lsls	r2, r2, #31
     d66:	d54e      	bpl.n	e06 <usart_init+0xda>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     d68:	0018      	movs	r0, r3
     d6a:	b011      	add	sp, #68	; 0x44
     d6c:	bc3c      	pop	{r2, r3, r4, r5}
     d6e:	4690      	mov	r8, r2
     d70:	4699      	mov	r9, r3
     d72:	46a2      	mov	sl, r4
     d74:	46ab      	mov	fp, r5
     d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Assert(module);
     d78:	4bb3      	ldr	r3, [pc, #716]	; (1048 <usart_init+0x31c>)
     d7a:	9301      	str	r3, [sp, #4]
     d7c:	4bb3      	ldr	r3, [pc, #716]	; (104c <usart_init+0x320>)
     d7e:	9300      	str	r3, [sp, #0]
     d80:	2346      	movs	r3, #70	; 0x46
     d82:	33ff      	adds	r3, #255	; 0xff
     d84:	4ab2      	ldr	r2, [pc, #712]	; (1050 <usart_init+0x324>)
     d86:	2101      	movs	r1, #1
     d88:	4fb2      	ldr	r7, [pc, #712]	; (1054 <usart_init+0x328>)
     d8a:	47b8      	blx	r7
     d8c:	4bac      	ldr	r3, [pc, #688]	; (1040 <usart_init+0x314>)
     d8e:	6818      	ldr	r0, [r3, #0]
	Assert(hw);
     d90:	2800      	cmp	r0, #0
     d92:	d1db      	bne.n	d4c <usart_init+0x20>
     d94:	e001      	b.n	d9a <usart_init+0x6e>
	Assert(module);
     d96:	2c00      	cmp	r4, #0
     d98:	d00b      	beq.n	db2 <usart_init+0x86>
	Assert(hw);
     d9a:	2e00      	cmp	r6, #0
     d9c:	d020      	beq.n	de0 <usart_init+0xb4>
	Assert(config);
     d9e:	2d00      	cmp	r5, #0
     da0:	d1da      	bne.n	d58 <usart_init+0x2c>
     da2:	2348      	movs	r3, #72	; 0x48
     da4:	33ff      	adds	r3, #255	; 0xff
     da6:	4aaa      	ldr	r2, [pc, #680]	; (1050 <usart_init+0x324>)
     da8:	49ab      	ldr	r1, [pc, #684]	; (1058 <usart_init+0x32c>)
     daa:	48ac      	ldr	r0, [pc, #688]	; (105c <usart_init+0x330>)
     dac:	4cac      	ldr	r4, [pc, #688]	; (1060 <usart_init+0x334>)
     dae:	47a0      	blx	r4
     db0:	e7fe      	b.n	db0 <usart_init+0x84>
	Assert(module);
     db2:	2346      	movs	r3, #70	; 0x46
     db4:	33ff      	adds	r3, #255	; 0xff
     db6:	4aa6      	ldr	r2, [pc, #664]	; (1050 <usart_init+0x324>)
     db8:	49a3      	ldr	r1, [pc, #652]	; (1048 <usart_init+0x31c>)
     dba:	48a8      	ldr	r0, [pc, #672]	; (105c <usart_init+0x330>)
     dbc:	4ca8      	ldr	r4, [pc, #672]	; (1060 <usart_init+0x334>)
     dbe:	47a0      	blx	r4
     dc0:	e7fe      	b.n	dc0 <usart_init+0x94>
	Assert(hw);
     dc2:	4ba8      	ldr	r3, [pc, #672]	; (1064 <usart_init+0x338>)
     dc4:	9301      	str	r3, [sp, #4]
     dc6:	4ba1      	ldr	r3, [pc, #644]	; (104c <usart_init+0x320>)
     dc8:	9300      	str	r3, [sp, #0]
     dca:	23a3      	movs	r3, #163	; 0xa3
     dcc:	005b      	lsls	r3, r3, #1
     dce:	4aa0      	ldr	r2, [pc, #640]	; (1050 <usart_init+0x324>)
     dd0:	2101      	movs	r1, #1
     dd2:	4fa0      	ldr	r7, [pc, #640]	; (1054 <usart_init+0x328>)
     dd4:	47b8      	blx	r7
     dd6:	4b9a      	ldr	r3, [pc, #616]	; (1040 <usart_init+0x314>)
     dd8:	6818      	ldr	r0, [r3, #0]
	Assert(config);
     dda:	2800      	cmp	r0, #0
     ddc:	d1ba      	bne.n	d54 <usart_init+0x28>
     dde:	e7de      	b.n	d9e <usart_init+0x72>
	Assert(hw);
     de0:	23a3      	movs	r3, #163	; 0xa3
     de2:	005b      	lsls	r3, r3, #1
     de4:	4a9a      	ldr	r2, [pc, #616]	; (1050 <usart_init+0x324>)
     de6:	499f      	ldr	r1, [pc, #636]	; (1064 <usart_init+0x338>)
     de8:	489c      	ldr	r0, [pc, #624]	; (105c <usart_init+0x330>)
     dea:	4c9d      	ldr	r4, [pc, #628]	; (1060 <usart_init+0x334>)
     dec:	47a0      	blx	r4
     dee:	e7fe      	b.n	dee <usart_init+0xc2>
	Assert(config);
     df0:	4b99      	ldr	r3, [pc, #612]	; (1058 <usart_init+0x32c>)
     df2:	9301      	str	r3, [sp, #4]
     df4:	4b95      	ldr	r3, [pc, #596]	; (104c <usart_init+0x320>)
     df6:	9300      	str	r3, [sp, #0]
     df8:	2348      	movs	r3, #72	; 0x48
     dfa:	33ff      	adds	r3, #255	; 0xff
     dfc:	4a94      	ldr	r2, [pc, #592]	; (1050 <usart_init+0x324>)
     dfe:	2101      	movs	r1, #1
     e00:	4f94      	ldr	r7, [pc, #592]	; (1054 <usart_init+0x328>)
     e02:	47b8      	blx	r7
     e04:	e7a8      	b.n	d58 <usart_init+0x2c>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e06:	6832      	ldr	r2, [r6, #0]
		return STATUS_ERR_DENIED;
     e08:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e0a:	0792      	lsls	r2, r2, #30
     e0c:	d4ac      	bmi.n	d68 <usart_init+0x3c>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     e0e:	4a96      	ldr	r2, [pc, #600]	; (1068 <usart_init+0x33c>)
     e10:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     e12:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     e14:	3b1b      	subs	r3, #27
     e16:	40bb      	lsls	r3, r7
     e18:	430b      	orrs	r3, r1
     e1a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     e1c:	a90f      	add	r1, sp, #60	; 0x3c
     e1e:	272d      	movs	r7, #45	; 0x2d
     e20:	5deb      	ldrb	r3, [r5, r7]
     e22:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e24:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e26:	b2c3      	uxtb	r3, r0
     e28:	9302      	str	r3, [sp, #8]
     e2a:	0018      	movs	r0, r3
     e2c:	4b8f      	ldr	r3, [pc, #572]	; (106c <usart_init+0x340>)
     e2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e30:	9802      	ldr	r0, [sp, #8]
     e32:	4b8f      	ldr	r3, [pc, #572]	; (1070 <usart_init+0x344>)
     e34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     e36:	5de8      	ldrb	r0, [r5, r7]
     e38:	2100      	movs	r1, #0
     e3a:	4b8e      	ldr	r3, [pc, #568]	; (1074 <usart_init+0x348>)
     e3c:	4798      	blx	r3
	module->character_size = config->character_size;
     e3e:	7aeb      	ldrb	r3, [r5, #11]
     e40:	7163      	strb	r3, [r4, #5]
	module->receiver_enabled = config->receiver_enable;
     e42:	2324      	movs	r3, #36	; 0x24
     e44:	5ceb      	ldrb	r3, [r5, r3]
     e46:	71a3      	strb	r3, [r4, #6]
	module->transmitter_enabled = config->transmitter_enable;
     e48:	2325      	movs	r3, #37	; 0x25
     e4a:	5ceb      	ldrb	r3, [r5, r3]
     e4c:	71e3      	strb	r3, [r4, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     e4e:	7eeb      	ldrb	r3, [r5, #27]
     e50:	7223      	strb	r3, [r4, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     e52:	7f2b      	ldrb	r3, [r5, #28]
     e54:	7263      	strb	r3, [r4, #9]
     e56:	4b7a      	ldr	r3, [pc, #488]	; (1040 <usart_init+0x314>)
     e58:	6818      	ldr	r0, [r3, #0]
	Assert(module);
     e5a:	2800      	cmp	r0, #0
     e5c:	d031      	beq.n	ec2 <usart_init+0x196>
     e5e:	2c00      	cmp	r4, #0
     e60:	d021      	beq.n	ea6 <usart_init+0x17a>
	Assert(module->hw);
     e62:	6823      	ldr	r3, [r4, #0]
     e64:	2b00      	cmp	r3, #0
     e66:	d03f      	beq.n	ee8 <usart_init+0x1bc>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e68:	6823      	ldr	r3, [r4, #0]
     e6a:	469b      	mov	fp, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e6c:	0018      	movs	r0, r3
     e6e:	4b75      	ldr	r3, [pc, #468]	; (1044 <usart_init+0x318>)
     e70:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e72:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     e74:	2200      	movs	r2, #0
     e76:	230e      	movs	r3, #14
     e78:	a906      	add	r1, sp, #24
     e7a:	468c      	mov	ip, r1
     e7c:	4463      	add	r3, ip
     e7e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     e80:	8a2b      	ldrh	r3, [r5, #16]
     e82:	4698      	mov	r8, r3
     e84:	2380      	movs	r3, #128	; 0x80
     e86:	01db      	lsls	r3, r3, #7
     e88:	4598      	cmp	r8, r3
     e8a:	d07c      	beq.n	f86 <usart_init+0x25a>
     e8c:	d936      	bls.n	efc <usart_init+0x1d0>
     e8e:	23c0      	movs	r3, #192	; 0xc0
     e90:	01db      	lsls	r3, r3, #7
     e92:	4598      	cmp	r8, r3
     e94:	d073      	beq.n	f7e <usart_init+0x252>
     e96:	2380      	movs	r3, #128	; 0x80
     e98:	021b      	lsls	r3, r3, #8
     e9a:	4598      	cmp	r8, r3
     e9c:	d132      	bne.n	f04 <usart_init+0x1d8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     e9e:	2703      	movs	r7, #3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ea0:	2300      	movs	r3, #0
     ea2:	9302      	str	r3, [sp, #8]
     ea4:	e035      	b.n	f12 <usart_init+0x1e6>
	Assert(module);
     ea6:	4b68      	ldr	r3, [pc, #416]	; (1048 <usart_init+0x31c>)
     ea8:	9301      	str	r3, [sp, #4]
     eaa:	4b68      	ldr	r3, [pc, #416]	; (104c <usart_init+0x320>)
     eac:	9300      	str	r3, [sp, #0]
     eae:	233d      	movs	r3, #61	; 0x3d
     eb0:	4a67      	ldr	r2, [pc, #412]	; (1050 <usart_init+0x324>)
     eb2:	2101      	movs	r1, #1
     eb4:	4f67      	ldr	r7, [pc, #412]	; (1054 <usart_init+0x328>)
     eb6:	47b8      	blx	r7
     eb8:	4b61      	ldr	r3, [pc, #388]	; (1040 <usart_init+0x314>)
     eba:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
     ebc:	2800      	cmp	r0, #0
     ebe:	d1d0      	bne.n	e62 <usart_init+0x136>
     ec0:	e001      	b.n	ec6 <usart_init+0x19a>
	Assert(module);
     ec2:	2c00      	cmp	r4, #0
     ec4:	d009      	beq.n	eda <usart_init+0x1ae>
	Assert(module->hw);
     ec6:	6823      	ldr	r3, [r4, #0]
     ec8:	2b00      	cmp	r3, #0
     eca:	d1cd      	bne.n	e68 <usart_init+0x13c>
     ecc:	333e      	adds	r3, #62	; 0x3e
     ece:	4a60      	ldr	r2, [pc, #384]	; (1050 <usart_init+0x324>)
     ed0:	4969      	ldr	r1, [pc, #420]	; (1078 <usart_init+0x34c>)
     ed2:	4862      	ldr	r0, [pc, #392]	; (105c <usart_init+0x330>)
     ed4:	4c62      	ldr	r4, [pc, #392]	; (1060 <usart_init+0x334>)
     ed6:	47a0      	blx	r4
     ed8:	e7fe      	b.n	ed8 <usart_init+0x1ac>
	Assert(module);
     eda:	233d      	movs	r3, #61	; 0x3d
     edc:	4a5c      	ldr	r2, [pc, #368]	; (1050 <usart_init+0x324>)
     ede:	495a      	ldr	r1, [pc, #360]	; (1048 <usart_init+0x31c>)
     ee0:	485e      	ldr	r0, [pc, #376]	; (105c <usart_init+0x330>)
     ee2:	4c5f      	ldr	r4, [pc, #380]	; (1060 <usart_init+0x334>)
     ee4:	47a0      	blx	r4
     ee6:	e7fe      	b.n	ee6 <usart_init+0x1ba>
	Assert(module->hw);
     ee8:	4b63      	ldr	r3, [pc, #396]	; (1078 <usart_init+0x34c>)
     eea:	9301      	str	r3, [sp, #4]
     eec:	4b57      	ldr	r3, [pc, #348]	; (104c <usart_init+0x320>)
     eee:	9300      	str	r3, [sp, #0]
     ef0:	233e      	movs	r3, #62	; 0x3e
     ef2:	4a57      	ldr	r2, [pc, #348]	; (1050 <usart_init+0x324>)
     ef4:	2101      	movs	r1, #1
     ef6:	4f57      	ldr	r7, [pc, #348]	; (1054 <usart_init+0x328>)
     ef8:	47b8      	blx	r7
     efa:	e7b5      	b.n	e68 <usart_init+0x13c>
	switch (config->sample_rate) {
     efc:	2380      	movs	r3, #128	; 0x80
     efe:	019b      	lsls	r3, r3, #6
     f00:	4598      	cmp	r8, r3
     f02:	d003      	beq.n	f0c <usart_init+0x1e0>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f04:	2710      	movs	r7, #16
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f06:	2300      	movs	r3, #0
     f08:	9302      	str	r3, [sp, #8]
     f0a:	e002      	b.n	f12 <usart_init+0x1e6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f0c:	2710      	movs	r7, #16
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f0e:	2301      	movs	r3, #1
     f10:	9302      	str	r3, [sp, #8]
	ctrla = (uint32_t)config->data_order |
     f12:	682b      	ldr	r3, [r5, #0]
     f14:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     f16:	68eb      	ldr	r3, [r5, #12]
     f18:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     f1a:	696b      	ldr	r3, [r5, #20]
     f1c:	9305      	str	r3, [sp, #20]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f1e:	7e2b      	ldrb	r3, [r5, #24]
     f20:	9306      	str	r3, [sp, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f22:	2326      	movs	r3, #38	; 0x26
     f24:	5ceb      	ldrb	r3, [r5, r3]
     f26:	9307      	str	r3, [sp, #28]
	transfer_mode = (uint32_t)config->transfer_mode;
     f28:	686b      	ldr	r3, [r5, #4]
     f2a:	4699      	mov	r9, r3
	switch (transfer_mode)
     f2c:	2b00      	cmp	r3, #0
     f2e:	d042      	beq.n	fb6 <usart_init+0x28a>
     f30:	2380      	movs	r3, #128	; 0x80
     f32:	055b      	lsls	r3, r3, #21
     f34:	4599      	cmp	r9, r3
     f36:	d113      	bne.n	f60 <usart_init+0x234>
			if (!config->use_external_clock) {
     f38:	2327      	movs	r3, #39	; 0x27
     f3a:	5ceb      	ldrb	r3, [r5, r3]
     f3c:	2b00      	cmp	r3, #0
     f3e:	d10f      	bne.n	f60 <usart_init+0x234>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     f40:	6a2f      	ldr	r7, [r5, #32]
     f42:	b2c0      	uxtb	r0, r0
     f44:	4b4d      	ldr	r3, [pc, #308]	; (107c <usart_init+0x350>)
     f46:	4798      	blx	r3
     f48:	0001      	movs	r1, r0
     f4a:	220e      	movs	r2, #14
     f4c:	ab06      	add	r3, sp, #24
     f4e:	469c      	mov	ip, r3
     f50:	4462      	add	r2, ip
     f52:	0038      	movs	r0, r7
     f54:	4b4a      	ldr	r3, [pc, #296]	; (1080 <usart_init+0x354>)
     f56:	4798      	blx	r3
     f58:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
     f5a:	2b00      	cmp	r3, #0
     f5c:	d000      	beq.n	f60 <usart_init+0x234>
     f5e:	e703      	b.n	d68 <usart_init+0x3c>
	if(config->encoding_format_enable) {
     f60:	7e6b      	ldrb	r3, [r5, #25]
     f62:	2b00      	cmp	r3, #0
     f64:	d002      	beq.n	f6c <usart_init+0x240>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     f66:	7eab      	ldrb	r3, [r5, #26]
     f68:	465a      	mov	r2, fp
     f6a:	7393      	strb	r3, [r2, #14]
     f6c:	4b34      	ldr	r3, [pc, #208]	; (1040 <usart_init+0x314>)
     f6e:	6818      	ldr	r0, [r3, #0]
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);
     f70:	2800      	cmp	r0, #0
     f72:	d04c      	beq.n	100e <usart_init+0x2e2>
     f74:	2c00      	cmp	r4, #0
     f76:	d03f      	beq.n	ff8 <usart_init+0x2cc>
     f78:	4f31      	ldr	r7, [pc, #196]	; (1040 <usart_init+0x314>)
	Assert(module->hw);
     f7a:	9502      	str	r5, [sp, #8]
     f7c:	e091      	b.n	10a2 <usart_init+0x376>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f7e:	2708      	movs	r7, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f80:	2301      	movs	r3, #1
     f82:	9302      	str	r3, [sp, #8]
     f84:	e7c5      	b.n	f12 <usart_init+0x1e6>
	ctrla = (uint32_t)config->data_order |
     f86:	682b      	ldr	r3, [r5, #0]
     f88:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     f8a:	68eb      	ldr	r3, [r5, #12]
     f8c:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
     f8e:	696b      	ldr	r3, [r5, #20]
     f90:	9305      	str	r3, [sp, #20]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f92:	7e2b      	ldrb	r3, [r5, #24]
     f94:	9306      	str	r3, [sp, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f96:	2326      	movs	r3, #38	; 0x26
     f98:	5ceb      	ldrb	r3, [r5, r3]
     f9a:	9307      	str	r3, [sp, #28]
	transfer_mode = (uint32_t)config->transfer_mode;
     f9c:	686b      	ldr	r3, [r5, #4]
     f9e:	4699      	mov	r9, r3
	switch (transfer_mode)
     fa0:	2b00      	cmp	r3, #0
     fa2:	d005      	beq.n	fb0 <usart_init+0x284>
     fa4:	2380      	movs	r3, #128	; 0x80
     fa6:	055b      	lsls	r3, r3, #21
     fa8:	4599      	cmp	r9, r3
     faa:	d0c5      	beq.n	f38 <usart_init+0x20c>
	enum status_code status_code = STATUS_OK;
     fac:	2300      	movs	r3, #0
     fae:	e7d4      	b.n	f5a <usart_init+0x22e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fb0:	2708      	movs	r7, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fb2:	2300      	movs	r3, #0
     fb4:	9302      	str	r3, [sp, #8]
			if (config->use_external_clock) {
     fb6:	2327      	movs	r3, #39	; 0x27
     fb8:	5ceb      	ldrb	r3, [r5, r3]
     fba:	2b00      	cmp	r3, #0
     fbc:	d00b      	beq.n	fd6 <usart_init+0x2aa>
				status_code =
     fbe:	9700      	str	r7, [sp, #0]
     fc0:	9b02      	ldr	r3, [sp, #8]
     fc2:	220e      	movs	r2, #14
     fc4:	a906      	add	r1, sp, #24
     fc6:	468c      	mov	ip, r1
     fc8:	4462      	add	r2, ip
     fca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     fcc:	6a28      	ldr	r0, [r5, #32]
     fce:	4f2d      	ldr	r7, [pc, #180]	; (1084 <usart_init+0x358>)
     fd0:	47b8      	blx	r7
     fd2:	0003      	movs	r3, r0
     fd4:	e7c1      	b.n	f5a <usart_init+0x22e>
						_sercom_get_async_baud_val(config->baudrate,
     fd6:	6a2b      	ldr	r3, [r5, #32]
     fd8:	469a      	mov	sl, r3
     fda:	b2c0      	uxtb	r0, r0
     fdc:	4b27      	ldr	r3, [pc, #156]	; (107c <usart_init+0x350>)
     fde:	4798      	blx	r3
     fe0:	0001      	movs	r1, r0
				status_code =
     fe2:	9700      	str	r7, [sp, #0]
     fe4:	9b02      	ldr	r3, [sp, #8]
     fe6:	220e      	movs	r2, #14
     fe8:	a806      	add	r0, sp, #24
     fea:	4684      	mov	ip, r0
     fec:	4462      	add	r2, ip
     fee:	4650      	mov	r0, sl
     ff0:	4f24      	ldr	r7, [pc, #144]	; (1084 <usart_init+0x358>)
     ff2:	47b8      	blx	r7
     ff4:	0003      	movs	r3, r0
     ff6:	e7b0      	b.n	f5a <usart_init+0x22e>
	Assert(module);
     ff8:	4b13      	ldr	r3, [pc, #76]	; (1048 <usart_init+0x31c>)
     ffa:	9301      	str	r3, [sp, #4]
     ffc:	4b13      	ldr	r3, [pc, #76]	; (104c <usart_init+0x320>)
     ffe:	9300      	str	r3, [sp, #0]
    1000:	2381      	movs	r3, #129	; 0x81
    1002:	00db      	lsls	r3, r3, #3
    1004:	4a20      	ldr	r2, [pc, #128]	; (1088 <usart_init+0x35c>)
    1006:	2101      	movs	r1, #1
    1008:	4f12      	ldr	r7, [pc, #72]	; (1054 <usart_init+0x328>)
    100a:	47b8      	blx	r7
    100c:	e7b4      	b.n	f78 <usart_init+0x24c>
    100e:	2c00      	cmp	r4, #0
    1010:	d1b2      	bne.n	f78 <usart_init+0x24c>
    1012:	2381      	movs	r3, #129	; 0x81
    1014:	00db      	lsls	r3, r3, #3
    1016:	4a1c      	ldr	r2, [pc, #112]	; (1088 <usart_init+0x35c>)
    1018:	490b      	ldr	r1, [pc, #44]	; (1048 <usart_init+0x31c>)
    101a:	4810      	ldr	r0, [pc, #64]	; (105c <usart_init+0x330>)
    101c:	4c10      	ldr	r4, [pc, #64]	; (1060 <usart_init+0x334>)
    101e:	47a0      	blx	r4
    1020:	e7fe      	b.n	1020 <usart_init+0x2f4>
	Assert(module);
    1022:	4b09      	ldr	r3, [pc, #36]	; (1048 <usart_init+0x31c>)
    1024:	9301      	str	r3, [sp, #4]
    1026:	4b09      	ldr	r3, [pc, #36]	; (104c <usart_init+0x320>)
    1028:	9300      	str	r3, [sp, #0]
    102a:	4b18      	ldr	r3, [pc, #96]	; (108c <usart_init+0x360>)
    102c:	4a16      	ldr	r2, [pc, #88]	; (1088 <usart_init+0x35c>)
    102e:	2101      	movs	r1, #1
    1030:	4d08      	ldr	r5, [pc, #32]	; (1054 <usart_init+0x328>)
    1032:	47a8      	blx	r5
    1034:	4b02      	ldr	r3, [pc, #8]	; (1040 <usart_init+0x314>)
    1036:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1038:	2800      	cmp	r0, #0
    103a:	d137      	bne.n	10ac <usart_init+0x380>
    103c:	e02a      	b.n	1094 <usart_init+0x368>
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	2000008c 	.word	0x2000008c
    1044:	00000b91 	.word	0x00000b91
    1048:	00004628 	.word	0x00004628
    104c:	000042d0 	.word	0x000042d0
    1050:	000045f8 	.word	0x000045f8
    1054:	00000211 	.word	0x00000211
    1058:	00004550 	.word	0x00004550
    105c:	000042e8 	.word	0x000042e8
    1060:	0000371d 	.word	0x0000371d
    1064:	00004638 	.word	0x00004638
    1068:	40000400 	.word	0x40000400
    106c:	00001ed1 	.word	0x00001ed1
    1070:	00001de5 	.word	0x00001de5
    1074:	00000995 	.word	0x00000995
    1078:	00004630 	.word	0x00004630
    107c:	00001f49 	.word	0x00001f49
    1080:	000008d7 	.word	0x000008d7
    1084:	00000901 	.word	0x00000901
    1088:	0000463c 	.word	0x0000463c
    108c:	000003f3 	.word	0x000003f3
	Assert(module);
    1090:	2c00      	cmp	r4, #0
    1092:	d019      	beq.n	10c8 <usart_init+0x39c>
	Assert(module->hw);
    1094:	6823      	ldr	r3, [r4, #0]
    1096:	2b00      	cmp	r3, #0
    1098:	d01d      	beq.n	10d6 <usart_init+0x3aa>
	SercomUsart *const usart_hw = &(module->hw->USART);
    109a:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    109c:	69db      	ldr	r3, [r3, #28]

	while (usart_is_syncing(module)) {
    109e:	2b00      	cmp	r3, #0
    10a0:	d021      	beq.n	10e6 <usart_init+0x3ba>
    10a2:	6838      	ldr	r0, [r7, #0]
	Assert(module);
    10a4:	2800      	cmp	r0, #0
    10a6:	d0f3      	beq.n	1090 <usart_init+0x364>
    10a8:	2c00      	cmp	r4, #0
    10aa:	d0ba      	beq.n	1022 <usart_init+0x2f6>
	Assert(module->hw);
    10ac:	6823      	ldr	r3, [r4, #0]
    10ae:	2b00      	cmp	r3, #0
    10b0:	d1f3      	bne.n	109a <usart_init+0x36e>
    10b2:	4bb9      	ldr	r3, [pc, #740]	; (1398 <usart_init+0x66c>)
    10b4:	9301      	str	r3, [sp, #4]
    10b6:	4bb9      	ldr	r3, [pc, #740]	; (139c <usart_init+0x670>)
    10b8:	9300      	str	r3, [sp, #0]
    10ba:	23fd      	movs	r3, #253	; 0xfd
    10bc:	009b      	lsls	r3, r3, #2
    10be:	4ab8      	ldr	r2, [pc, #736]	; (13a0 <usart_init+0x674>)
    10c0:	2101      	movs	r1, #1
    10c2:	4db8      	ldr	r5, [pc, #736]	; (13a4 <usart_init+0x678>)
    10c4:	47a8      	blx	r5
    10c6:	e7e8      	b.n	109a <usart_init+0x36e>
	Assert(module);
    10c8:	4bb7      	ldr	r3, [pc, #732]	; (13a8 <usart_init+0x67c>)
    10ca:	4ab5      	ldr	r2, [pc, #724]	; (13a0 <usart_init+0x674>)
    10cc:	49b7      	ldr	r1, [pc, #732]	; (13ac <usart_init+0x680>)
    10ce:	48b8      	ldr	r0, [pc, #736]	; (13b0 <usart_init+0x684>)
    10d0:	4cb8      	ldr	r4, [pc, #736]	; (13b4 <usart_init+0x688>)
    10d2:	47a0      	blx	r4
    10d4:	e7fe      	b.n	10d4 <usart_init+0x3a8>
	Assert(module->hw);
    10d6:	23fd      	movs	r3, #253	; 0xfd
    10d8:	009b      	lsls	r3, r3, #2
    10da:	4ab1      	ldr	r2, [pc, #708]	; (13a0 <usart_init+0x674>)
    10dc:	49ae      	ldr	r1, [pc, #696]	; (1398 <usart_init+0x66c>)
    10de:	48b4      	ldr	r0, [pc, #720]	; (13b0 <usart_init+0x684>)
    10e0:	4cb4      	ldr	r4, [pc, #720]	; (13b4 <usart_init+0x688>)
    10e2:	47a0      	blx	r4
    10e4:	e7fe      	b.n	10e4 <usart_init+0x3b8>
    10e6:	9d02      	ldr	r5, [sp, #8]
	usart_hw->BAUD.reg = baud;
    10e8:	330e      	adds	r3, #14
    10ea:	aa06      	add	r2, sp, #24
    10ec:	4694      	mov	ip, r2
    10ee:	4463      	add	r3, ip
    10f0:	881b      	ldrh	r3, [r3, #0]
    10f2:	465a      	mov	r2, fp
    10f4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    10f6:	9f03      	ldr	r7, [sp, #12]
    10f8:	9b04      	ldr	r3, [sp, #16]
    10fa:	431f      	orrs	r7, r3
    10fc:	9b05      	ldr	r3, [sp, #20]
    10fe:	431f      	orrs	r7, r3
    1100:	464b      	mov	r3, r9
    1102:	431f      	orrs	r7, r3
    1104:	4643      	mov	r3, r8
    1106:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1108:	9b06      	ldr	r3, [sp, #24]
    110a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    110c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    110e:	9b07      	ldr	r3, [sp, #28]
    1110:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1112:	431f      	orrs	r7, r3
    1114:	46ba      	mov	sl, r7
	if (config->use_external_clock == false) {
    1116:	2327      	movs	r3, #39	; 0x27
    1118:	5ceb      	ldrb	r3, [r5, r3]
    111a:	2b00      	cmp	r3, #0
    111c:	d103      	bne.n	1126 <usart_init+0x3fa>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    111e:	3304      	adds	r3, #4
    1120:	003a      	movs	r2, r7
    1122:	431a      	orrs	r2, r3
    1124:	4692      	mov	sl, r2
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1126:	7e6b      	ldrb	r3, [r5, #25]
    1128:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    112a:	7f2a      	ldrb	r2, [r5, #28]
    112c:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    112e:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1130:	7f6a      	ldrb	r2, [r5, #29]
    1132:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1134:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1136:	2224      	movs	r2, #36	; 0x24
    1138:	5caa      	ldrb	r2, [r5, r2]
    113a:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    113c:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    113e:	2225      	movs	r2, #37	; 0x25
    1140:	5caa      	ldrb	r2, [r5, r2]
    1142:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1144:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1146:	7aaa      	ldrb	r2, [r5, #10]
    1148:	7ae9      	ldrb	r1, [r5, #11]
    114a:	430a      	orrs	r2, r1
    114c:	431a      	orrs	r2, r3
    114e:	4690      	mov	r8, r2
	if (config->parity != USART_PARITY_NONE) {
    1150:	892b      	ldrh	r3, [r5, #8]
    1152:	2bff      	cmp	r3, #255	; 0xff
    1154:	d01e      	beq.n	1194 <usart_init+0x468>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1156:	2280      	movs	r2, #128	; 0x80
    1158:	0452      	lsls	r2, r2, #17
    115a:	4651      	mov	r1, sl
    115c:	4311      	orrs	r1, r2
    115e:	468a      	mov	sl, r1
		ctrlb |= config->parity;
    1160:	4642      	mov	r2, r8
    1162:	431a      	orrs	r2, r3
    1164:	4690      	mov	r8, r2
	if (config->run_in_standby || system_is_debugger_present()) {
    1166:	232c      	movs	r3, #44	; 0x2c
    1168:	5ceb      	ldrb	r3, [r5, r3]
    116a:	2b00      	cmp	r3, #0
    116c:	d103      	bne.n	1176 <usart_init+0x44a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    116e:	4b92      	ldr	r3, [pc, #584]	; (13b8 <usart_init+0x68c>)
    1170:	789b      	ldrb	r3, [r3, #2]
    1172:	079b      	lsls	r3, r3, #30
    1174:	d503      	bpl.n	117e <usart_init+0x452>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1176:	2380      	movs	r3, #128	; 0x80
    1178:	4652      	mov	r2, sl
    117a:	431a      	orrs	r2, r3
    117c:	4692      	mov	sl, r2
    117e:	4b8f      	ldr	r3, [pc, #572]	; (13bc <usart_init+0x690>)
    1180:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    1182:	2800      	cmp	r0, #0
    1184:	d01a      	beq.n	11bc <usart_init+0x490>
    1186:	2c00      	cmp	r4, #0
    1188:	d00d      	beq.n	11a6 <usart_init+0x47a>
    118a:	4b8c      	ldr	r3, [pc, #560]	; (13bc <usart_init+0x690>)
    118c:	4699      	mov	r9, r3
	Assert(module->hw);
    118e:	4657      	mov	r7, sl
    1190:	9502      	str	r5, [sp, #8]
    1192:	e034      	b.n	11fe <usart_init+0x4d2>
		if(config->lin_slave_enable) {
    1194:	7eeb      	ldrb	r3, [r5, #27]
    1196:	2b00      	cmp	r3, #0
    1198:	d0e5      	beq.n	1166 <usart_init+0x43a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    119a:	2380      	movs	r3, #128	; 0x80
    119c:	04db      	lsls	r3, r3, #19
    119e:	4652      	mov	r2, sl
    11a0:	431a      	orrs	r2, r3
    11a2:	4692      	mov	sl, r2
    11a4:	e7df      	b.n	1166 <usart_init+0x43a>
	Assert(module);
    11a6:	4b81      	ldr	r3, [pc, #516]	; (13ac <usart_init+0x680>)
    11a8:	9301      	str	r3, [sp, #4]
    11aa:	4b7c      	ldr	r3, [pc, #496]	; (139c <usart_init+0x670>)
    11ac:	9300      	str	r3, [sp, #0]
    11ae:	2381      	movs	r3, #129	; 0x81
    11b0:	00db      	lsls	r3, r3, #3
    11b2:	4a7b      	ldr	r2, [pc, #492]	; (13a0 <usart_init+0x674>)
    11b4:	2101      	movs	r1, #1
    11b6:	4f7b      	ldr	r7, [pc, #492]	; (13a4 <usart_init+0x678>)
    11b8:	47b8      	blx	r7
    11ba:	e7e6      	b.n	118a <usart_init+0x45e>
    11bc:	2c00      	cmp	r4, #0
    11be:	d1e4      	bne.n	118a <usart_init+0x45e>
    11c0:	2381      	movs	r3, #129	; 0x81
    11c2:	00db      	lsls	r3, r3, #3
    11c4:	4a76      	ldr	r2, [pc, #472]	; (13a0 <usart_init+0x674>)
    11c6:	4979      	ldr	r1, [pc, #484]	; (13ac <usart_init+0x680>)
    11c8:	4879      	ldr	r0, [pc, #484]	; (13b0 <usart_init+0x684>)
    11ca:	4c7a      	ldr	r4, [pc, #488]	; (13b4 <usart_init+0x688>)
    11cc:	47a0      	blx	r4
    11ce:	e7fe      	b.n	11ce <usart_init+0x4a2>
	Assert(module);
    11d0:	4b76      	ldr	r3, [pc, #472]	; (13ac <usart_init+0x680>)
    11d2:	9301      	str	r3, [sp, #4]
    11d4:	4b71      	ldr	r3, [pc, #452]	; (139c <usart_init+0x670>)
    11d6:	9300      	str	r3, [sp, #0]
    11d8:	4b73      	ldr	r3, [pc, #460]	; (13a8 <usart_init+0x67c>)
    11da:	4a71      	ldr	r2, [pc, #452]	; (13a0 <usart_init+0x674>)
    11dc:	2101      	movs	r1, #1
    11de:	4d71      	ldr	r5, [pc, #452]	; (13a4 <usart_init+0x678>)
    11e0:	47a8      	blx	r5
    11e2:	4b76      	ldr	r3, [pc, #472]	; (13bc <usart_init+0x690>)
    11e4:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    11e6:	2800      	cmp	r0, #0
    11e8:	d10f      	bne.n	120a <usart_init+0x4de>
    11ea:	e001      	b.n	11f0 <usart_init+0x4c4>
	Assert(module);
    11ec:	2c00      	cmp	r4, #0
    11ee:	d01a      	beq.n	1226 <usart_init+0x4fa>
	Assert(module->hw);
    11f0:	6823      	ldr	r3, [r4, #0]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d01e      	beq.n	1234 <usart_init+0x508>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11f6:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    11f8:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    11fa:	2b00      	cmp	r3, #0
    11fc:	d022      	beq.n	1244 <usart_init+0x518>
    11fe:	464b      	mov	r3, r9
    1200:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    1202:	2800      	cmp	r0, #0
    1204:	d0f2      	beq.n	11ec <usart_init+0x4c0>
    1206:	2c00      	cmp	r4, #0
    1208:	d0e2      	beq.n	11d0 <usart_init+0x4a4>
	Assert(module->hw);
    120a:	6823      	ldr	r3, [r4, #0]
    120c:	2b00      	cmp	r3, #0
    120e:	d1f2      	bne.n	11f6 <usart_init+0x4ca>
    1210:	4b61      	ldr	r3, [pc, #388]	; (1398 <usart_init+0x66c>)
    1212:	9301      	str	r3, [sp, #4]
    1214:	4b61      	ldr	r3, [pc, #388]	; (139c <usart_init+0x670>)
    1216:	9300      	str	r3, [sp, #0]
    1218:	23fd      	movs	r3, #253	; 0xfd
    121a:	009b      	lsls	r3, r3, #2
    121c:	4a60      	ldr	r2, [pc, #384]	; (13a0 <usart_init+0x674>)
    121e:	2101      	movs	r1, #1
    1220:	4d60      	ldr	r5, [pc, #384]	; (13a4 <usart_init+0x678>)
    1222:	47a8      	blx	r5
    1224:	e7e7      	b.n	11f6 <usart_init+0x4ca>
	Assert(module);
    1226:	4b60      	ldr	r3, [pc, #384]	; (13a8 <usart_init+0x67c>)
    1228:	4a5d      	ldr	r2, [pc, #372]	; (13a0 <usart_init+0x674>)
    122a:	4960      	ldr	r1, [pc, #384]	; (13ac <usart_init+0x680>)
    122c:	4860      	ldr	r0, [pc, #384]	; (13b0 <usart_init+0x684>)
    122e:	4c61      	ldr	r4, [pc, #388]	; (13b4 <usart_init+0x688>)
    1230:	47a0      	blx	r4
    1232:	e7fe      	b.n	1232 <usart_init+0x506>
	Assert(module->hw);
    1234:	23fd      	movs	r3, #253	; 0xfd
    1236:	009b      	lsls	r3, r3, #2
    1238:	4a59      	ldr	r2, [pc, #356]	; (13a0 <usart_init+0x674>)
    123a:	4957      	ldr	r1, [pc, #348]	; (1398 <usart_init+0x66c>)
    123c:	485c      	ldr	r0, [pc, #368]	; (13b0 <usart_init+0x684>)
    123e:	4c5d      	ldr	r4, [pc, #372]	; (13b4 <usart_init+0x688>)
    1240:	47a0      	blx	r4
    1242:	e7fe      	b.n	1242 <usart_init+0x516>
    1244:	46ba      	mov	sl, r7
    1246:	9d02      	ldr	r5, [sp, #8]
	usart_hw->CTRLB.reg = ctrlb;
    1248:	465b      	mov	r3, fp
    124a:	4642      	mov	r2, r8
    124c:	605a      	str	r2, [r3, #4]
    124e:	4b5b      	ldr	r3, [pc, #364]	; (13bc <usart_init+0x690>)
    1250:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    1252:	2800      	cmp	r0, #0
    1254:	d011      	beq.n	127a <usart_init+0x54e>
    1256:	2c00      	cmp	r4, #0
    1258:	d004      	beq.n	1264 <usart_init+0x538>
    125a:	4b58      	ldr	r3, [pc, #352]	; (13bc <usart_init+0x690>)
    125c:	4698      	mov	r8, r3
	Assert(module->hw);
    125e:	4657      	mov	r7, sl
    1260:	9502      	str	r5, [sp, #8]
    1262:	e02b      	b.n	12bc <usart_init+0x590>
	Assert(module);
    1264:	4b51      	ldr	r3, [pc, #324]	; (13ac <usart_init+0x680>)
    1266:	9301      	str	r3, [sp, #4]
    1268:	4b4c      	ldr	r3, [pc, #304]	; (139c <usart_init+0x670>)
    126a:	9300      	str	r3, [sp, #0]
    126c:	2381      	movs	r3, #129	; 0x81
    126e:	00db      	lsls	r3, r3, #3
    1270:	4a4b      	ldr	r2, [pc, #300]	; (13a0 <usart_init+0x674>)
    1272:	2101      	movs	r1, #1
    1274:	4f4b      	ldr	r7, [pc, #300]	; (13a4 <usart_init+0x678>)
    1276:	47b8      	blx	r7
    1278:	e7ef      	b.n	125a <usart_init+0x52e>
    127a:	2c00      	cmp	r4, #0
    127c:	d1ed      	bne.n	125a <usart_init+0x52e>
    127e:	2381      	movs	r3, #129	; 0x81
    1280:	00db      	lsls	r3, r3, #3
    1282:	4a47      	ldr	r2, [pc, #284]	; (13a0 <usart_init+0x674>)
    1284:	4949      	ldr	r1, [pc, #292]	; (13ac <usart_init+0x680>)
    1286:	484a      	ldr	r0, [pc, #296]	; (13b0 <usart_init+0x684>)
    1288:	4c4a      	ldr	r4, [pc, #296]	; (13b4 <usart_init+0x688>)
    128a:	47a0      	blx	r4
    128c:	e7fe      	b.n	128c <usart_init+0x560>
	Assert(module);
    128e:	4b47      	ldr	r3, [pc, #284]	; (13ac <usart_init+0x680>)
    1290:	9301      	str	r3, [sp, #4]
    1292:	4b42      	ldr	r3, [pc, #264]	; (139c <usart_init+0x670>)
    1294:	9300      	str	r3, [sp, #0]
    1296:	4b44      	ldr	r3, [pc, #272]	; (13a8 <usart_init+0x67c>)
    1298:	4a41      	ldr	r2, [pc, #260]	; (13a0 <usart_init+0x674>)
    129a:	2101      	movs	r1, #1
    129c:	4d41      	ldr	r5, [pc, #260]	; (13a4 <usart_init+0x678>)
    129e:	47a8      	blx	r5
    12a0:	4b46      	ldr	r3, [pc, #280]	; (13bc <usart_init+0x690>)
    12a2:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    12a4:	2800      	cmp	r0, #0
    12a6:	d002      	beq.n	12ae <usart_init+0x582>
    12a8:	e00e      	b.n	12c8 <usart_init+0x59c>
	Assert(module);
    12aa:	2c00      	cmp	r4, #0
    12ac:	d01a      	beq.n	12e4 <usart_init+0x5b8>
	Assert(module->hw);
    12ae:	6823      	ldr	r3, [r4, #0]
    12b0:	2b00      	cmp	r3, #0
    12b2:	d01e      	beq.n	12f2 <usart_init+0x5c6>
	SercomUsart *const usart_hw = &(module->hw->USART);
    12b4:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    12b6:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    12b8:	2b00      	cmp	r3, #0
    12ba:	d022      	beq.n	1302 <usart_init+0x5d6>
    12bc:	4643      	mov	r3, r8
    12be:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    12c0:	2800      	cmp	r0, #0
    12c2:	d0f2      	beq.n	12aa <usart_init+0x57e>
    12c4:	2c00      	cmp	r4, #0
    12c6:	d0e2      	beq.n	128e <usart_init+0x562>
	Assert(module->hw);
    12c8:	6823      	ldr	r3, [r4, #0]
    12ca:	2b00      	cmp	r3, #0
    12cc:	d1f2      	bne.n	12b4 <usart_init+0x588>
    12ce:	4b32      	ldr	r3, [pc, #200]	; (1398 <usart_init+0x66c>)
    12d0:	9301      	str	r3, [sp, #4]
    12d2:	4b32      	ldr	r3, [pc, #200]	; (139c <usart_init+0x670>)
    12d4:	9300      	str	r3, [sp, #0]
    12d6:	23fd      	movs	r3, #253	; 0xfd
    12d8:	009b      	lsls	r3, r3, #2
    12da:	4a31      	ldr	r2, [pc, #196]	; (13a0 <usart_init+0x674>)
    12dc:	2101      	movs	r1, #1
    12de:	4d31      	ldr	r5, [pc, #196]	; (13a4 <usart_init+0x678>)
    12e0:	47a8      	blx	r5
    12e2:	e7e7      	b.n	12b4 <usart_init+0x588>
	Assert(module);
    12e4:	4b30      	ldr	r3, [pc, #192]	; (13a8 <usart_init+0x67c>)
    12e6:	4a2e      	ldr	r2, [pc, #184]	; (13a0 <usart_init+0x674>)
    12e8:	4930      	ldr	r1, [pc, #192]	; (13ac <usart_init+0x680>)
    12ea:	4831      	ldr	r0, [pc, #196]	; (13b0 <usart_init+0x684>)
    12ec:	4c31      	ldr	r4, [pc, #196]	; (13b4 <usart_init+0x688>)
    12ee:	47a0      	blx	r4
    12f0:	e7fe      	b.n	12f0 <usart_init+0x5c4>
	Assert(module->hw);
    12f2:	23fd      	movs	r3, #253	; 0xfd
    12f4:	009b      	lsls	r3, r3, #2
    12f6:	4a2a      	ldr	r2, [pc, #168]	; (13a0 <usart_init+0x674>)
    12f8:	4927      	ldr	r1, [pc, #156]	; (1398 <usart_init+0x66c>)
    12fa:	482d      	ldr	r0, [pc, #180]	; (13b0 <usart_init+0x684>)
    12fc:	4c2d      	ldr	r4, [pc, #180]	; (13b4 <usart_init+0x688>)
    12fe:	47a0      	blx	r4
    1300:	e7fe      	b.n	1300 <usart_init+0x5d4>
    1302:	9d02      	ldr	r5, [sp, #8]
	usart_hw->CTRLA.reg = ctrla;
    1304:	465b      	mov	r3, fp
    1306:	601f      	str	r7, [r3, #0]
    1308:	ab0e      	add	r3, sp, #56	; 0x38
    130a:	2280      	movs	r2, #128	; 0x80
    130c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    130e:	2200      	movs	r2, #0
    1310:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1312:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1314:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1316:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    1318:	930a      	str	r3, [sp, #40]	; 0x28
    131a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    131c:	930b      	str	r3, [sp, #44]	; 0x2c
    131e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1320:	930c      	str	r3, [sp, #48]	; 0x30
    1322:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    1324:	9302      	str	r3, [sp, #8]
    1326:	930d      	str	r3, [sp, #52]	; 0x34
    1328:	2500      	movs	r5, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    132a:	af0a      	add	r7, sp, #40	; 0x28
    132c:	e006      	b.n	133c <usart_init+0x610>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    132e:	0030      	movs	r0, r6
    1330:	4b23      	ldr	r3, [pc, #140]	; (13c0 <usart_init+0x694>)
    1332:	4798      	blx	r3
    1334:	e007      	b.n	1346 <usart_init+0x61a>
    1336:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1338:	2d04      	cmp	r5, #4
    133a:	d00d      	beq.n	1358 <usart_init+0x62c>
    133c:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    133e:	00ab      	lsls	r3, r5, #2
    1340:	59d8      	ldr	r0, [r3, r7]
		if (current_pinmux == PINMUX_DEFAULT) {
    1342:	2800      	cmp	r0, #0
    1344:	d0f3      	beq.n	132e <usart_init+0x602>
		if (current_pinmux != PINMUX_UNUSED) {
    1346:	1c43      	adds	r3, r0, #1
    1348:	d0f5      	beq.n	1336 <usart_init+0x60a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    134a:	a90e      	add	r1, sp, #56	; 0x38
    134c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    134e:	0c00      	lsrs	r0, r0, #16
    1350:	b2c0      	uxtb	r0, r0
    1352:	4b1c      	ldr	r3, [pc, #112]	; (13c4 <usart_init+0x698>)
    1354:	4798      	blx	r3
    1356:	e7ee      	b.n	1336 <usart_init+0x60a>
		module->callback[i]            = NULL;
    1358:	2300      	movs	r3, #0
    135a:	60e3      	str	r3, [r4, #12]
    135c:	6123      	str	r3, [r4, #16]
    135e:	6163      	str	r3, [r4, #20]
    1360:	61a3      	str	r3, [r4, #24]
    1362:	61e3      	str	r3, [r4, #28]
    1364:	6223      	str	r3, [r4, #32]
	module->tx_buffer_ptr              = NULL;
    1366:	62a3      	str	r3, [r4, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1368:	6263      	str	r3, [r4, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    136a:	2200      	movs	r2, #0
    136c:	85e3      	strh	r3, [r4, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    136e:	85a3      	strh	r3, [r4, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1370:	3330      	adds	r3, #48	; 0x30
    1372:	54e2      	strb	r2, [r4, r3]
	module->callback_enable_mask       = 0x00;
    1374:	3301      	adds	r3, #1
    1376:	54e2      	strb	r2, [r4, r3]
	module->rx_status                  = STATUS_OK;
    1378:	3301      	adds	r3, #1
    137a:	54e2      	strb	r2, [r4, r3]
	module->tx_status                  = STATUS_OK;
    137c:	3301      	adds	r3, #1
    137e:	54e2      	strb	r2, [r4, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1380:	6820      	ldr	r0, [r4, #0]
    1382:	4b11      	ldr	r3, [pc, #68]	; (13c8 <usart_init+0x69c>)
    1384:	4798      	blx	r3
    1386:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1388:	4910      	ldr	r1, [pc, #64]	; (13cc <usart_init+0x6a0>)
    138a:	4b11      	ldr	r3, [pc, #68]	; (13d0 <usart_init+0x6a4>)
    138c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    138e:	00ad      	lsls	r5, r5, #2
    1390:	4b10      	ldr	r3, [pc, #64]	; (13d4 <usart_init+0x6a8>)
    1392:	50ec      	str	r4, [r5, r3]
	return status_code;
    1394:	2300      	movs	r3, #0
    1396:	e4e7      	b.n	d68 <usart_init+0x3c>
    1398:	00004630 	.word	0x00004630
    139c:	000042d0 	.word	0x000042d0
    13a0:	0000463c 	.word	0x0000463c
    13a4:	00000211 	.word	0x00000211
    13a8:	000003f3 	.word	0x000003f3
    13ac:	00004628 	.word	0x00004628
    13b0:	000042e8 	.word	0x000042e8
    13b4:	0000371d 	.word	0x0000371d
    13b8:	41002000 	.word	0x41002000
    13bc:	2000008c 	.word	0x2000008c
    13c0:	000009e1 	.word	0x000009e1
    13c4:	000020b5 	.word	0x000020b5
    13c8:	00000b91 	.word	0x00000b91
    13cc:	00001725 	.word	0x00001725
    13d0:	00000c61 	.word	0x00000c61
    13d4:	20000200 	.word	0x20000200

000013d8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	46ce      	mov	lr, r9
    13dc:	4647      	mov	r7, r8
    13de:	b580      	push	{r7, lr}
    13e0:	b083      	sub	sp, #12
    13e2:	0004      	movs	r4, r0
    13e4:	000d      	movs	r5, r1
    13e6:	4b53      	ldr	r3, [pc, #332]	; (1534 <usart_write_wait+0x15c>)
    13e8:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    13ea:	2800      	cmp	r0, #0
    13ec:	d01c      	beq.n	1428 <usart_write_wait+0x50>
    13ee:	2c00      	cmp	r4, #0
    13f0:	d00b      	beq.n	140a <usart_write_wait+0x32>
	Assert(module->hw);
    13f2:	6823      	ldr	r3, [r4, #0]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d02c      	beq.n	1452 <usart_write_wait+0x7a>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    13f8:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    13fa:	201c      	movs	r0, #28
	if (!(module->transmitter_enabled)) {
    13fc:	2b00      	cmp	r3, #0
    13fe:	d133      	bne.n	1468 <usart_write_wait+0x90>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1400:	b003      	add	sp, #12
    1402:	bc0c      	pop	{r2, r3}
    1404:	4690      	mov	r8, r2
    1406:	4699      	mov	r9, r3
    1408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Assert(module);
    140a:	4b4b      	ldr	r3, [pc, #300]	; (1538 <usart_write_wait+0x160>)
    140c:	9301      	str	r3, [sp, #4]
    140e:	4b4b      	ldr	r3, [pc, #300]	; (153c <usart_write_wait+0x164>)
    1410:	9300      	str	r3, [sp, #0]
    1412:	23e4      	movs	r3, #228	; 0xe4
    1414:	33ff      	adds	r3, #255	; 0xff
    1416:	4a4a      	ldr	r2, [pc, #296]	; (1540 <usart_write_wait+0x168>)
    1418:	2101      	movs	r1, #1
    141a:	4e4a      	ldr	r6, [pc, #296]	; (1544 <usart_write_wait+0x16c>)
    141c:	47b0      	blx	r6
    141e:	4b45      	ldr	r3, [pc, #276]	; (1534 <usart_write_wait+0x15c>)
    1420:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1422:	2800      	cmp	r0, #0
    1424:	d1e5      	bne.n	13f2 <usart_write_wait+0x1a>
    1426:	e001      	b.n	142c <usart_write_wait+0x54>
	Assert(module);
    1428:	2c00      	cmp	r4, #0
    142a:	d00a      	beq.n	1442 <usart_write_wait+0x6a>
	Assert(module->hw);
    142c:	6823      	ldr	r3, [r4, #0]
    142e:	2b00      	cmp	r3, #0
    1430:	d1e2      	bne.n	13f8 <usart_write_wait+0x20>
    1432:	33e5      	adds	r3, #229	; 0xe5
    1434:	33ff      	adds	r3, #255	; 0xff
    1436:	4a42      	ldr	r2, [pc, #264]	; (1540 <usart_write_wait+0x168>)
    1438:	4943      	ldr	r1, [pc, #268]	; (1548 <usart_write_wait+0x170>)
    143a:	4844      	ldr	r0, [pc, #272]	; (154c <usart_write_wait+0x174>)
    143c:	4c44      	ldr	r4, [pc, #272]	; (1550 <usart_write_wait+0x178>)
    143e:	47a0      	blx	r4
    1440:	e7fe      	b.n	1440 <usart_write_wait+0x68>
	Assert(module);
    1442:	23e4      	movs	r3, #228	; 0xe4
    1444:	33ff      	adds	r3, #255	; 0xff
    1446:	4a3e      	ldr	r2, [pc, #248]	; (1540 <usart_write_wait+0x168>)
    1448:	493b      	ldr	r1, [pc, #236]	; (1538 <usart_write_wait+0x160>)
    144a:	4840      	ldr	r0, [pc, #256]	; (154c <usart_write_wait+0x174>)
    144c:	4c40      	ldr	r4, [pc, #256]	; (1550 <usart_write_wait+0x178>)
    144e:	47a0      	blx	r4
    1450:	e7fe      	b.n	1450 <usart_write_wait+0x78>
	Assert(module->hw);
    1452:	4b3d      	ldr	r3, [pc, #244]	; (1548 <usart_write_wait+0x170>)
    1454:	9301      	str	r3, [sp, #4]
    1456:	4b39      	ldr	r3, [pc, #228]	; (153c <usart_write_wait+0x164>)
    1458:	9300      	str	r3, [sp, #0]
    145a:	23f2      	movs	r3, #242	; 0xf2
    145c:	005b      	lsls	r3, r3, #1
    145e:	4a38      	ldr	r2, [pc, #224]	; (1540 <usart_write_wait+0x168>)
    1460:	2101      	movs	r1, #1
    1462:	4e38      	ldr	r6, [pc, #224]	; (1544 <usart_write_wait+0x16c>)
    1464:	47b0      	blx	r6
    1466:	e7c7      	b.n	13f8 <usart_write_wait+0x20>
	if (module->remaining_tx_buffer_length > 0) {
    1468:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    146a:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    146c:	3817      	subs	r0, #23
	if (module->remaining_tx_buffer_length > 0) {
    146e:	2b00      	cmp	r3, #0
    1470:	d1c6      	bne.n	1400 <usart_write_wait+0x28>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1472:	6826      	ldr	r6, [r4, #0]
    1474:	4b2f      	ldr	r3, [pc, #188]	; (1534 <usart_write_wait+0x15c>)
    1476:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    1478:	2800      	cmp	r0, #0
    147a:	d00f      	beq.n	149c <usart_write_wait+0xc4>
    147c:	2c00      	cmp	r4, #0
    147e:	d002      	beq.n	1486 <usart_write_wait+0xae>
    1480:	4b2c      	ldr	r3, [pc, #176]	; (1534 <usart_write_wait+0x15c>)
    1482:	4699      	mov	r9, r3
    1484:	e02b      	b.n	14de <usart_write_wait+0x106>
    1486:	4b2c      	ldr	r3, [pc, #176]	; (1538 <usart_write_wait+0x160>)
    1488:	9301      	str	r3, [sp, #4]
    148a:	4b2c      	ldr	r3, [pc, #176]	; (153c <usart_write_wait+0x164>)
    148c:	9300      	str	r3, [sp, #0]
    148e:	2381      	movs	r3, #129	; 0x81
    1490:	00db      	lsls	r3, r3, #3
    1492:	4a30      	ldr	r2, [pc, #192]	; (1554 <usart_write_wait+0x17c>)
    1494:	2101      	movs	r1, #1
    1496:	4f2b      	ldr	r7, [pc, #172]	; (1544 <usart_write_wait+0x16c>)
    1498:	47b8      	blx	r7
    149a:	e7f1      	b.n	1480 <usart_write_wait+0xa8>
    149c:	2c00      	cmp	r4, #0
    149e:	d1ef      	bne.n	1480 <usart_write_wait+0xa8>
    14a0:	2381      	movs	r3, #129	; 0x81
    14a2:	00db      	lsls	r3, r3, #3
    14a4:	4a2b      	ldr	r2, [pc, #172]	; (1554 <usart_write_wait+0x17c>)
    14a6:	4924      	ldr	r1, [pc, #144]	; (1538 <usart_write_wait+0x160>)
    14a8:	4828      	ldr	r0, [pc, #160]	; (154c <usart_write_wait+0x174>)
    14aa:	4c29      	ldr	r4, [pc, #164]	; (1550 <usart_write_wait+0x178>)
    14ac:	47a0      	blx	r4
    14ae:	e7fe      	b.n	14ae <usart_write_wait+0xd6>
	Assert(module);
    14b0:	4b21      	ldr	r3, [pc, #132]	; (1538 <usart_write_wait+0x160>)
    14b2:	9301      	str	r3, [sp, #4]
    14b4:	4b21      	ldr	r3, [pc, #132]	; (153c <usart_write_wait+0x164>)
    14b6:	9300      	str	r3, [sp, #0]
    14b8:	4b27      	ldr	r3, [pc, #156]	; (1558 <usart_write_wait+0x180>)
    14ba:	4a26      	ldr	r2, [pc, #152]	; (1554 <usart_write_wait+0x17c>)
    14bc:	2101      	movs	r1, #1
    14be:	4f21      	ldr	r7, [pc, #132]	; (1544 <usart_write_wait+0x16c>)
    14c0:	47b8      	blx	r7
    14c2:	4b1c      	ldr	r3, [pc, #112]	; (1534 <usart_write_wait+0x15c>)
    14c4:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    14c6:	2800      	cmp	r0, #0
    14c8:	d10f      	bne.n	14ea <usart_write_wait+0x112>
    14ca:	e001      	b.n	14d0 <usart_write_wait+0xf8>
	Assert(module);
    14cc:	2c00      	cmp	r4, #0
    14ce:	d01a      	beq.n	1506 <usart_write_wait+0x12e>
	Assert(module->hw);
    14d0:	6823      	ldr	r3, [r4, #0]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d01e      	beq.n	1514 <usart_write_wait+0x13c>
	SercomUsart *const usart_hw = &(module->hw->USART);
    14d6:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    14d8:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    14da:	2b00      	cmp	r3, #0
    14dc:	d022      	beq.n	1524 <usart_write_wait+0x14c>
    14de:	464b      	mov	r3, r9
    14e0:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    14e2:	2800      	cmp	r0, #0
    14e4:	d0f2      	beq.n	14cc <usart_write_wait+0xf4>
    14e6:	2c00      	cmp	r4, #0
    14e8:	d0e2      	beq.n	14b0 <usart_write_wait+0xd8>
	Assert(module->hw);
    14ea:	6823      	ldr	r3, [r4, #0]
    14ec:	2b00      	cmp	r3, #0
    14ee:	d1f2      	bne.n	14d6 <usart_write_wait+0xfe>
    14f0:	4b15      	ldr	r3, [pc, #84]	; (1548 <usart_write_wait+0x170>)
    14f2:	9301      	str	r3, [sp, #4]
    14f4:	4b11      	ldr	r3, [pc, #68]	; (153c <usart_write_wait+0x164>)
    14f6:	9300      	str	r3, [sp, #0]
    14f8:	23fd      	movs	r3, #253	; 0xfd
    14fa:	009b      	lsls	r3, r3, #2
    14fc:	4a15      	ldr	r2, [pc, #84]	; (1554 <usart_write_wait+0x17c>)
    14fe:	2101      	movs	r1, #1
    1500:	4f10      	ldr	r7, [pc, #64]	; (1544 <usart_write_wait+0x16c>)
    1502:	47b8      	blx	r7
    1504:	e7e7      	b.n	14d6 <usart_write_wait+0xfe>
	Assert(module);
    1506:	4b14      	ldr	r3, [pc, #80]	; (1558 <usart_write_wait+0x180>)
    1508:	4a12      	ldr	r2, [pc, #72]	; (1554 <usart_write_wait+0x17c>)
    150a:	490b      	ldr	r1, [pc, #44]	; (1538 <usart_write_wait+0x160>)
    150c:	480f      	ldr	r0, [pc, #60]	; (154c <usart_write_wait+0x174>)
    150e:	4c10      	ldr	r4, [pc, #64]	; (1550 <usart_write_wait+0x178>)
    1510:	47a0      	blx	r4
    1512:	e7fe      	b.n	1512 <usart_write_wait+0x13a>
	Assert(module->hw);
    1514:	23fd      	movs	r3, #253	; 0xfd
    1516:	009b      	lsls	r3, r3, #2
    1518:	4a0e      	ldr	r2, [pc, #56]	; (1554 <usart_write_wait+0x17c>)
    151a:	490b      	ldr	r1, [pc, #44]	; (1548 <usart_write_wait+0x170>)
    151c:	480b      	ldr	r0, [pc, #44]	; (154c <usart_write_wait+0x174>)
    151e:	4c0c      	ldr	r4, [pc, #48]	; (1550 <usart_write_wait+0x178>)
    1520:	47a0      	blx	r4
    1522:	e7fe      	b.n	1522 <usart_write_wait+0x14a>
	usart_hw->DATA.reg = tx_data;
    1524:	8535      	strh	r5, [r6, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1526:	2202      	movs	r2, #2
    1528:	7e33      	ldrb	r3, [r6, #24]
    152a:	4213      	tst	r3, r2
    152c:	d0fc      	beq.n	1528 <usart_write_wait+0x150>
	return STATUS_OK;
    152e:	2000      	movs	r0, #0
    1530:	e766      	b.n	1400 <usart_write_wait+0x28>
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	2000008c 	.word	0x2000008c
    1538:	00004628 	.word	0x00004628
    153c:	000042d0 	.word	0x000042d0
    1540:	000045f8 	.word	0x000045f8
    1544:	00000211 	.word	0x00000211
    1548:	00004630 	.word	0x00004630
    154c:	000042e8 	.word	0x000042e8
    1550:	0000371d 	.word	0x0000371d
    1554:	0000463c 	.word	0x0000463c
    1558:	000003f3 	.word	0x000003f3

0000155c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    155c:	b5f0      	push	{r4, r5, r6, r7, lr}
    155e:	46ce      	mov	lr, r9
    1560:	4647      	mov	r7, r8
    1562:	b580      	push	{r7, lr}
    1564:	b083      	sub	sp, #12
    1566:	0004      	movs	r4, r0
    1568:	000d      	movs	r5, r1
    156a:	4b63      	ldr	r3, [pc, #396]	; (16f8 <usart_read_wait+0x19c>)
    156c:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    156e:	2800      	cmp	r0, #0
    1570:	d01c      	beq.n	15ac <usart_read_wait+0x50>
    1572:	2c00      	cmp	r4, #0
    1574:	d00b      	beq.n	158e <usart_read_wait+0x32>
	Assert(module->hw);
    1576:	6823      	ldr	r3, [r4, #0]
    1578:	2b00      	cmp	r3, #0
    157a:	d02b      	beq.n	15d4 <usart_read_wait+0x78>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    157c:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    157e:	201c      	movs	r0, #28
	if (!(module->receiver_enabled)) {
    1580:	2b00      	cmp	r3, #0
    1582:	d131      	bne.n	15e8 <usart_read_wait+0x8c>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1584:	b003      	add	sp, #12
    1586:	bc0c      	pop	{r2, r3}
    1588:	4690      	mov	r8, r2
    158a:	4699      	mov	r9, r3
    158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Assert(module);
    158e:	4b5b      	ldr	r3, [pc, #364]	; (16fc <usart_read_wait+0x1a0>)
    1590:	9301      	str	r3, [sp, #4]
    1592:	4b5b      	ldr	r3, [pc, #364]	; (1700 <usart_read_wait+0x1a4>)
    1594:	9300      	str	r3, [sp, #0]
    1596:	2389      	movs	r3, #137	; 0x89
    1598:	009b      	lsls	r3, r3, #2
    159a:	4a5a      	ldr	r2, [pc, #360]	; (1704 <usart_read_wait+0x1a8>)
    159c:	2101      	movs	r1, #1
    159e:	4e5a      	ldr	r6, [pc, #360]	; (1708 <usart_read_wait+0x1ac>)
    15a0:	47b0      	blx	r6
    15a2:	4b55      	ldr	r3, [pc, #340]	; (16f8 <usart_read_wait+0x19c>)
    15a4:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    15a6:	2800      	cmp	r0, #0
    15a8:	d1e5      	bne.n	1576 <usart_read_wait+0x1a>
    15aa:	e001      	b.n	15b0 <usart_read_wait+0x54>
	Assert(module);
    15ac:	2c00      	cmp	r4, #0
    15ae:	d009      	beq.n	15c4 <usart_read_wait+0x68>
	Assert(module->hw);
    15b0:	6823      	ldr	r3, [r4, #0]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d1e2      	bne.n	157c <usart_read_wait+0x20>
    15b6:	4b55      	ldr	r3, [pc, #340]	; (170c <usart_read_wait+0x1b0>)
    15b8:	4a52      	ldr	r2, [pc, #328]	; (1704 <usart_read_wait+0x1a8>)
    15ba:	4955      	ldr	r1, [pc, #340]	; (1710 <usart_read_wait+0x1b4>)
    15bc:	4855      	ldr	r0, [pc, #340]	; (1714 <usart_read_wait+0x1b8>)
    15be:	4c56      	ldr	r4, [pc, #344]	; (1718 <usart_read_wait+0x1bc>)
    15c0:	47a0      	blx	r4
    15c2:	e7fe      	b.n	15c2 <usart_read_wait+0x66>
	Assert(module);
    15c4:	2389      	movs	r3, #137	; 0x89
    15c6:	009b      	lsls	r3, r3, #2
    15c8:	4a4e      	ldr	r2, [pc, #312]	; (1704 <usart_read_wait+0x1a8>)
    15ca:	494c      	ldr	r1, [pc, #304]	; (16fc <usart_read_wait+0x1a0>)
    15cc:	4851      	ldr	r0, [pc, #324]	; (1714 <usart_read_wait+0x1b8>)
    15ce:	4c52      	ldr	r4, [pc, #328]	; (1718 <usart_read_wait+0x1bc>)
    15d0:	47a0      	blx	r4
    15d2:	e7fe      	b.n	15d2 <usart_read_wait+0x76>
	Assert(module->hw);
    15d4:	4b4e      	ldr	r3, [pc, #312]	; (1710 <usart_read_wait+0x1b4>)
    15d6:	9301      	str	r3, [sp, #4]
    15d8:	4b49      	ldr	r3, [pc, #292]	; (1700 <usart_read_wait+0x1a4>)
    15da:	9300      	str	r3, [sp, #0]
    15dc:	4b4b      	ldr	r3, [pc, #300]	; (170c <usart_read_wait+0x1b0>)
    15de:	4a49      	ldr	r2, [pc, #292]	; (1704 <usart_read_wait+0x1a8>)
    15e0:	2101      	movs	r1, #1
    15e2:	4e49      	ldr	r6, [pc, #292]	; (1708 <usart_read_wait+0x1ac>)
    15e4:	47b0      	blx	r6
    15e6:	e7c9      	b.n	157c <usart_read_wait+0x20>
	if (module->remaining_rx_buffer_length > 0) {
    15e8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    15ea:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    15ec:	3817      	subs	r0, #23
	if (module->remaining_rx_buffer_length > 0) {
    15ee:	2b00      	cmp	r3, #0
    15f0:	d1c8      	bne.n	1584 <usart_read_wait+0x28>
	SercomUsart *const usart_hw = &(module->hw->USART);
    15f2:	6826      	ldr	r6, [r4, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    15f4:	7e33      	ldrb	r3, [r6, #24]
    15f6:	075b      	lsls	r3, r3, #29
    15f8:	d5c4      	bpl.n	1584 <usart_read_wait+0x28>
    15fa:	4b3f      	ldr	r3, [pc, #252]	; (16f8 <usart_read_wait+0x19c>)
    15fc:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    15fe:	2800      	cmp	r0, #0
    1600:	d00f      	beq.n	1622 <usart_read_wait+0xc6>
    1602:	2c00      	cmp	r4, #0
    1604:	d002      	beq.n	160c <usart_read_wait+0xb0>
    1606:	4b3c      	ldr	r3, [pc, #240]	; (16f8 <usart_read_wait+0x19c>)
    1608:	4699      	mov	r9, r3
    160a:	e02b      	b.n	1664 <usart_read_wait+0x108>
    160c:	4b3b      	ldr	r3, [pc, #236]	; (16fc <usart_read_wait+0x1a0>)
    160e:	9301      	str	r3, [sp, #4]
    1610:	4b3b      	ldr	r3, [pc, #236]	; (1700 <usart_read_wait+0x1a4>)
    1612:	9300      	str	r3, [sp, #0]
    1614:	2381      	movs	r3, #129	; 0x81
    1616:	00db      	lsls	r3, r3, #3
    1618:	4a40      	ldr	r2, [pc, #256]	; (171c <usart_read_wait+0x1c0>)
    161a:	2101      	movs	r1, #1
    161c:	4f3a      	ldr	r7, [pc, #232]	; (1708 <usart_read_wait+0x1ac>)
    161e:	47b8      	blx	r7
    1620:	e7f1      	b.n	1606 <usart_read_wait+0xaa>
    1622:	2c00      	cmp	r4, #0
    1624:	d1ef      	bne.n	1606 <usart_read_wait+0xaa>
    1626:	2381      	movs	r3, #129	; 0x81
    1628:	00db      	lsls	r3, r3, #3
    162a:	4a3c      	ldr	r2, [pc, #240]	; (171c <usart_read_wait+0x1c0>)
    162c:	4933      	ldr	r1, [pc, #204]	; (16fc <usart_read_wait+0x1a0>)
    162e:	4839      	ldr	r0, [pc, #228]	; (1714 <usart_read_wait+0x1b8>)
    1630:	4c39      	ldr	r4, [pc, #228]	; (1718 <usart_read_wait+0x1bc>)
    1632:	47a0      	blx	r4
    1634:	e7fe      	b.n	1634 <usart_read_wait+0xd8>
	Assert(module);
    1636:	4b31      	ldr	r3, [pc, #196]	; (16fc <usart_read_wait+0x1a0>)
    1638:	9301      	str	r3, [sp, #4]
    163a:	4b31      	ldr	r3, [pc, #196]	; (1700 <usart_read_wait+0x1a4>)
    163c:	9300      	str	r3, [sp, #0]
    163e:	4b38      	ldr	r3, [pc, #224]	; (1720 <usart_read_wait+0x1c4>)
    1640:	4a36      	ldr	r2, [pc, #216]	; (171c <usart_read_wait+0x1c0>)
    1642:	2101      	movs	r1, #1
    1644:	4f30      	ldr	r7, [pc, #192]	; (1708 <usart_read_wait+0x1ac>)
    1646:	47b8      	blx	r7
    1648:	4b2b      	ldr	r3, [pc, #172]	; (16f8 <usart_read_wait+0x19c>)
    164a:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    164c:	2800      	cmp	r0, #0
    164e:	d10f      	bne.n	1670 <usart_read_wait+0x114>
    1650:	e001      	b.n	1656 <usart_read_wait+0xfa>
	Assert(module);
    1652:	2c00      	cmp	r4, #0
    1654:	d01a      	beq.n	168c <usart_read_wait+0x130>
	Assert(module->hw);
    1656:	6823      	ldr	r3, [r4, #0]
    1658:	2b00      	cmp	r3, #0
    165a:	d01e      	beq.n	169a <usart_read_wait+0x13e>
	SercomUsart *const usart_hw = &(module->hw->USART);
    165c:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    165e:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    1660:	2b00      	cmp	r3, #0
    1662:	d022      	beq.n	16aa <usart_read_wait+0x14e>
    1664:	464b      	mov	r3, r9
    1666:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    1668:	2800      	cmp	r0, #0
    166a:	d0f2      	beq.n	1652 <usart_read_wait+0xf6>
    166c:	2c00      	cmp	r4, #0
    166e:	d0e2      	beq.n	1636 <usart_read_wait+0xda>
	Assert(module->hw);
    1670:	6823      	ldr	r3, [r4, #0]
    1672:	2b00      	cmp	r3, #0
    1674:	d1f2      	bne.n	165c <usart_read_wait+0x100>
    1676:	4b26      	ldr	r3, [pc, #152]	; (1710 <usart_read_wait+0x1b4>)
    1678:	9301      	str	r3, [sp, #4]
    167a:	4b21      	ldr	r3, [pc, #132]	; (1700 <usart_read_wait+0x1a4>)
    167c:	9300      	str	r3, [sp, #0]
    167e:	23fd      	movs	r3, #253	; 0xfd
    1680:	009b      	lsls	r3, r3, #2
    1682:	4a26      	ldr	r2, [pc, #152]	; (171c <usart_read_wait+0x1c0>)
    1684:	2101      	movs	r1, #1
    1686:	4f20      	ldr	r7, [pc, #128]	; (1708 <usart_read_wait+0x1ac>)
    1688:	47b8      	blx	r7
    168a:	e7e7      	b.n	165c <usart_read_wait+0x100>
	Assert(module);
    168c:	4b24      	ldr	r3, [pc, #144]	; (1720 <usart_read_wait+0x1c4>)
    168e:	4a23      	ldr	r2, [pc, #140]	; (171c <usart_read_wait+0x1c0>)
    1690:	491a      	ldr	r1, [pc, #104]	; (16fc <usart_read_wait+0x1a0>)
    1692:	4820      	ldr	r0, [pc, #128]	; (1714 <usart_read_wait+0x1b8>)
    1694:	4c20      	ldr	r4, [pc, #128]	; (1718 <usart_read_wait+0x1bc>)
    1696:	47a0      	blx	r4
    1698:	e7fe      	b.n	1698 <usart_read_wait+0x13c>
	Assert(module->hw);
    169a:	23fd      	movs	r3, #253	; 0xfd
    169c:	009b      	lsls	r3, r3, #2
    169e:	4a1f      	ldr	r2, [pc, #124]	; (171c <usart_read_wait+0x1c0>)
    16a0:	491b      	ldr	r1, [pc, #108]	; (1710 <usart_read_wait+0x1b4>)
    16a2:	481c      	ldr	r0, [pc, #112]	; (1714 <usart_read_wait+0x1b8>)
    16a4:	4c1c      	ldr	r4, [pc, #112]	; (1718 <usart_read_wait+0x1bc>)
    16a6:	47a0      	blx	r4
    16a8:	e7fe      	b.n	16a8 <usart_read_wait+0x14c>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16aa:	8b73      	ldrh	r3, [r6, #26]
    16ac:	b2db      	uxtb	r3, r3
	if (error_code) {
    16ae:	069a      	lsls	r2, r3, #26
    16b0:	d01d      	beq.n	16ee <usart_read_wait+0x192>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    16b2:	079a      	lsls	r2, r3, #30
    16b4:	d503      	bpl.n	16be <usart_read_wait+0x162>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    16b6:	2302      	movs	r3, #2
    16b8:	8373      	strh	r3, [r6, #26]
			return STATUS_ERR_BAD_FORMAT;
    16ba:	201a      	movs	r0, #26
    16bc:	e762      	b.n	1584 <usart_read_wait+0x28>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    16be:	075a      	lsls	r2, r3, #29
    16c0:	d503      	bpl.n	16ca <usart_read_wait+0x16e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    16c2:	2304      	movs	r3, #4
    16c4:	8373      	strh	r3, [r6, #26]
			return STATUS_ERR_OVERFLOW;
    16c6:	201e      	movs	r0, #30
    16c8:	e75c      	b.n	1584 <usart_read_wait+0x28>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    16ca:	07da      	lsls	r2, r3, #31
    16cc:	d503      	bpl.n	16d6 <usart_read_wait+0x17a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    16ce:	2301      	movs	r3, #1
    16d0:	8373      	strh	r3, [r6, #26]
			return STATUS_ERR_BAD_DATA;
    16d2:	2013      	movs	r0, #19
    16d4:	e756      	b.n	1584 <usart_read_wait+0x28>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    16d6:	06da      	lsls	r2, r3, #27
    16d8:	d503      	bpl.n	16e2 <usart_read_wait+0x186>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    16da:	2310      	movs	r3, #16
    16dc:	8373      	strh	r3, [r6, #26]
			return STATUS_ERR_PROTOCOL;
    16de:	2042      	movs	r0, #66	; 0x42
    16e0:	e750      	b.n	1584 <usart_read_wait+0x28>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    16e2:	069b      	lsls	r3, r3, #26
    16e4:	d503      	bpl.n	16ee <usart_read_wait+0x192>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    16e6:	2320      	movs	r3, #32
    16e8:	8373      	strh	r3, [r6, #26]
			return STATUS_ERR_PACKET_COLLISION;
    16ea:	2041      	movs	r0, #65	; 0x41
    16ec:	e74a      	b.n	1584 <usart_read_wait+0x28>
	*rx_data = usart_hw->DATA.reg;
    16ee:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    16f0:	802b      	strh	r3, [r5, #0]
	return STATUS_OK;
    16f2:	2000      	movs	r0, #0
    16f4:	e746      	b.n	1584 <usart_read_wait+0x28>
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	2000008c 	.word	0x2000008c
    16fc:	00004628 	.word	0x00004628
    1700:	000042d0 	.word	0x000042d0
    1704:	000045f8 	.word	0x000045f8
    1708:	00000211 	.word	0x00000211
    170c:	00000225 	.word	0x00000225
    1710:	00004630 	.word	0x00004630
    1714:	000042e8 	.word	0x000042e8
    1718:	0000371d 	.word	0x0000371d
    171c:	0000463c 	.word	0x0000463c
    1720:	000003f3 	.word	0x000003f3

00001724 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1724:	b5f0      	push	{r4, r5, r6, r7, lr}
    1726:	b083      	sub	sp, #12
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1728:	0080      	lsls	r0, r0, #2
    172a:	4b8d      	ldr	r3, [pc, #564]	; (1960 <_usart_interrupt_handler+0x23c>)
    172c:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    172e:	6825      	ldr	r5, [r4, #0]
    1730:	4b8c      	ldr	r3, [pc, #560]	; (1964 <_usart_interrupt_handler+0x240>)
    1732:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    1734:	2800      	cmp	r0, #0
    1736:	d00e      	beq.n	1756 <_usart_interrupt_handler+0x32>
    1738:	2c00      	cmp	r4, #0
    173a:	d001      	beq.n	1740 <_usart_interrupt_handler+0x1c>
    173c:	4e89      	ldr	r6, [pc, #548]	; (1964 <_usart_interrupt_handler+0x240>)
    173e:	e02b      	b.n	1798 <_usart_interrupt_handler+0x74>
    1740:	4b89      	ldr	r3, [pc, #548]	; (1968 <_usart_interrupt_handler+0x244>)
    1742:	9301      	str	r3, [sp, #4]
    1744:	4b89      	ldr	r3, [pc, #548]	; (196c <_usart_interrupt_handler+0x248>)
    1746:	9300      	str	r3, [sp, #0]
    1748:	2381      	movs	r3, #129	; 0x81
    174a:	00db      	lsls	r3, r3, #3
    174c:	4a88      	ldr	r2, [pc, #544]	; (1970 <_usart_interrupt_handler+0x24c>)
    174e:	2101      	movs	r1, #1
    1750:	4e88      	ldr	r6, [pc, #544]	; (1974 <_usart_interrupt_handler+0x250>)
    1752:	47b0      	blx	r6
    1754:	e7f2      	b.n	173c <_usart_interrupt_handler+0x18>
    1756:	2c00      	cmp	r4, #0
    1758:	d1f0      	bne.n	173c <_usart_interrupt_handler+0x18>
    175a:	2381      	movs	r3, #129	; 0x81
    175c:	00db      	lsls	r3, r3, #3
    175e:	4a84      	ldr	r2, [pc, #528]	; (1970 <_usart_interrupt_handler+0x24c>)
    1760:	4981      	ldr	r1, [pc, #516]	; (1968 <_usart_interrupt_handler+0x244>)
    1762:	4885      	ldr	r0, [pc, #532]	; (1978 <_usart_interrupt_handler+0x254>)
    1764:	4c85      	ldr	r4, [pc, #532]	; (197c <_usart_interrupt_handler+0x258>)
    1766:	47a0      	blx	r4
    1768:	e7fe      	b.n	1768 <_usart_interrupt_handler+0x44>
	Assert(module);
    176a:	4b7f      	ldr	r3, [pc, #508]	; (1968 <_usart_interrupt_handler+0x244>)
    176c:	9301      	str	r3, [sp, #4]
    176e:	4b7f      	ldr	r3, [pc, #508]	; (196c <_usart_interrupt_handler+0x248>)
    1770:	9300      	str	r3, [sp, #0]
    1772:	4b83      	ldr	r3, [pc, #524]	; (1980 <_usart_interrupt_handler+0x25c>)
    1774:	4a7e      	ldr	r2, [pc, #504]	; (1970 <_usart_interrupt_handler+0x24c>)
    1776:	2101      	movs	r1, #1
    1778:	4f7e      	ldr	r7, [pc, #504]	; (1974 <_usart_interrupt_handler+0x250>)
    177a:	47b8      	blx	r7
    177c:	4b79      	ldr	r3, [pc, #484]	; (1964 <_usart_interrupt_handler+0x240>)
    177e:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1780:	2800      	cmp	r0, #0
    1782:	d10e      	bne.n	17a2 <_usart_interrupt_handler+0x7e>
    1784:	e001      	b.n	178a <_usart_interrupt_handler+0x66>
	Assert(module);
    1786:	2c00      	cmp	r4, #0
    1788:	d019      	beq.n	17be <_usart_interrupt_handler+0x9a>
	Assert(module->hw);
    178a:	6823      	ldr	r3, [r4, #0]
    178c:	2b00      	cmp	r3, #0
    178e:	d01d      	beq.n	17cc <_usart_interrupt_handler+0xa8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1790:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    1792:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    1794:	2b00      	cmp	r3, #0
    1796:	d021      	beq.n	17dc <_usart_interrupt_handler+0xb8>
    1798:	6830      	ldr	r0, [r6, #0]
	Assert(module);
    179a:	2800      	cmp	r0, #0
    179c:	d0f3      	beq.n	1786 <_usart_interrupt_handler+0x62>
    179e:	2c00      	cmp	r4, #0
    17a0:	d0e3      	beq.n	176a <_usart_interrupt_handler+0x46>
	Assert(module->hw);
    17a2:	6823      	ldr	r3, [r4, #0]
    17a4:	2b00      	cmp	r3, #0
    17a6:	d1f3      	bne.n	1790 <_usart_interrupt_handler+0x6c>
    17a8:	4b76      	ldr	r3, [pc, #472]	; (1984 <_usart_interrupt_handler+0x260>)
    17aa:	9301      	str	r3, [sp, #4]
    17ac:	4b6f      	ldr	r3, [pc, #444]	; (196c <_usart_interrupt_handler+0x248>)
    17ae:	9300      	str	r3, [sp, #0]
    17b0:	23fd      	movs	r3, #253	; 0xfd
    17b2:	009b      	lsls	r3, r3, #2
    17b4:	4a6e      	ldr	r2, [pc, #440]	; (1970 <_usart_interrupt_handler+0x24c>)
    17b6:	2101      	movs	r1, #1
    17b8:	4f6e      	ldr	r7, [pc, #440]	; (1974 <_usart_interrupt_handler+0x250>)
    17ba:	47b8      	blx	r7
    17bc:	e7e8      	b.n	1790 <_usart_interrupt_handler+0x6c>
	Assert(module);
    17be:	4b70      	ldr	r3, [pc, #448]	; (1980 <_usart_interrupt_handler+0x25c>)
    17c0:	4a6b      	ldr	r2, [pc, #428]	; (1970 <_usart_interrupt_handler+0x24c>)
    17c2:	4969      	ldr	r1, [pc, #420]	; (1968 <_usart_interrupt_handler+0x244>)
    17c4:	486c      	ldr	r0, [pc, #432]	; (1978 <_usart_interrupt_handler+0x254>)
    17c6:	4c6d      	ldr	r4, [pc, #436]	; (197c <_usart_interrupt_handler+0x258>)
    17c8:	47a0      	blx	r4
    17ca:	e7fe      	b.n	17ca <_usart_interrupt_handler+0xa6>
	Assert(module->hw);
    17cc:	23fd      	movs	r3, #253	; 0xfd
    17ce:	009b      	lsls	r3, r3, #2
    17d0:	4a67      	ldr	r2, [pc, #412]	; (1970 <_usart_interrupt_handler+0x24c>)
    17d2:	496c      	ldr	r1, [pc, #432]	; (1984 <_usart_interrupt_handler+0x260>)
    17d4:	4868      	ldr	r0, [pc, #416]	; (1978 <_usart_interrupt_handler+0x254>)
    17d6:	4c69      	ldr	r4, [pc, #420]	; (197c <_usart_interrupt_handler+0x258>)
    17d8:	47a0      	blx	r4
    17da:	e7fe      	b.n	17da <_usart_interrupt_handler+0xb6>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    17dc:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    17de:	7daf      	ldrb	r7, [r5, #22]
    17e0:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
    17e2:	2330      	movs	r3, #48	; 0x30
    17e4:	5ce3      	ldrb	r3, [r4, r3]
    17e6:	2231      	movs	r2, #49	; 0x31
    17e8:	5ca6      	ldrb	r6, [r4, r2]
    17ea:	401e      	ands	r6, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    17ec:	07fb      	lsls	r3, r7, #31
    17ee:	d519      	bpl.n	1824 <_usart_interrupt_handler+0x100>
		if (module->remaining_tx_buffer_length) {
    17f0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    17f2:	b29b      	uxth	r3, r3
    17f4:	2b00      	cmp	r3, #0
    17f6:	d059      	beq.n	18ac <_usart_interrupt_handler+0x188>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    17f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    17fa:	7811      	ldrb	r1, [r2, #0]
    17fc:	b2c9      	uxtb	r1, r1
    17fe:	b28b      	uxth	r3, r1
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1800:	1c50      	adds	r0, r2, #1
    1802:	62a0      	str	r0, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1804:	7960      	ldrb	r0, [r4, #5]
    1806:	2801      	cmp	r0, #1
    1808:	d04a      	beq.n	18a0 <_usart_interrupt_handler+0x17c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    180a:	05db      	lsls	r3, r3, #23
    180c:	0ddb      	lsrs	r3, r3, #23
    180e:	852b      	strh	r3, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1810:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1812:	3b01      	subs	r3, #1
    1814:	b29b      	uxth	r3, r3
    1816:	85e3      	strh	r3, [r4, #46]	; 0x2e
    1818:	2b00      	cmp	r3, #0
    181a:	d103      	bne.n	1824 <_usart_interrupt_handler+0x100>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    181c:	3301      	adds	r3, #1
    181e:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1820:	3301      	adds	r3, #1
    1822:	75ab      	strb	r3, [r5, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1824:	07bb      	lsls	r3, r7, #30
    1826:	d506      	bpl.n	1836 <_usart_interrupt_handler+0x112>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1828:	2302      	movs	r3, #2
    182a:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
    182c:	2200      	movs	r2, #0
    182e:	3331      	adds	r3, #49	; 0x31
    1830:	54e2      	strb	r2, [r4, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1832:	07f3      	lsls	r3, r6, #31
    1834:	d43d      	bmi.n	18b2 <_usart_interrupt_handler+0x18e>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1836:	077b      	lsls	r3, r7, #29
    1838:	d517      	bpl.n	186a <_usart_interrupt_handler+0x146>

		if (module->remaining_rx_buffer_length) {
    183a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    183c:	b29b      	uxth	r3, r3
    183e:	2b00      	cmp	r3, #0
    1840:	d100      	bne.n	1844 <_usart_interrupt_handler+0x120>
    1842:	e082      	b.n	194a <_usart_interrupt_handler+0x226>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1844:	8b6a      	ldrh	r2, [r5, #26]
    1846:	b2d2      	uxtb	r2, r2
    1848:	233f      	movs	r3, #63	; 0x3f
    184a:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    184c:	0711      	lsls	r1, r2, #28
    184e:	d501      	bpl.n	1854 <_usart_interrupt_handler+0x130>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1850:	2337      	movs	r3, #55	; 0x37
    1852:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1854:	2b00      	cmp	r3, #0
    1856:	d055      	beq.n	1904 <_usart_interrupt_handler+0x1e0>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1858:	079a      	lsls	r2, r3, #30
    185a:	d52e      	bpl.n	18ba <_usart_interrupt_handler+0x196>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    185c:	221a      	movs	r2, #26
    185e:	2332      	movs	r3, #50	; 0x32
    1860:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1862:	3b30      	subs	r3, #48	; 0x30
    1864:	836b      	strh	r3, [r5, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1866:	0773      	lsls	r3, r6, #29
    1868:	d448      	bmi.n	18fc <_usart_interrupt_handler+0x1d8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    186a:	06fb      	lsls	r3, r7, #27
    186c:	d505      	bpl.n	187a <_usart_interrupt_handler+0x156>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    186e:	2310      	movs	r3, #16
    1870:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1872:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1874:	06f3      	lsls	r3, r6, #27
    1876:	d500      	bpl.n	187a <_usart_interrupt_handler+0x156>
    1878:	e06a      	b.n	1950 <_usart_interrupt_handler+0x22c>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    187a:	06bb      	lsls	r3, r7, #26
    187c:	d504      	bpl.n	1888 <_usart_interrupt_handler+0x164>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    187e:	2320      	movs	r3, #32
    1880:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1882:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1884:	0733      	lsls	r3, r6, #28
    1886:	d467      	bmi.n	1958 <_usart_interrupt_handler+0x234>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1888:	073b      	lsls	r3, r7, #28
    188a:	d507      	bpl.n	189c <_usart_interrupt_handler+0x178>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    188c:	2308      	movs	r3, #8
    188e:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1890:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1892:	06b3      	lsls	r3, r6, #26
    1894:	d502      	bpl.n	189c <_usart_interrupt_handler+0x178>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1896:	6a23      	ldr	r3, [r4, #32]
    1898:	0020      	movs	r0, r4
    189a:	4798      	blx	r3
		}
	}
#endif
}
    189c:	b003      	add	sp, #12
    189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    18a0:	7853      	ldrb	r3, [r2, #1]
    18a2:	021b      	lsls	r3, r3, #8
    18a4:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    18a6:	3202      	adds	r2, #2
    18a8:	62a2      	str	r2, [r4, #40]	; 0x28
    18aa:	e7ae      	b.n	180a <_usart_interrupt_handler+0xe6>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18ac:	2301      	movs	r3, #1
    18ae:	752b      	strb	r3, [r5, #20]
    18b0:	e7b8      	b.n	1824 <_usart_interrupt_handler+0x100>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    18b2:	0020      	movs	r0, r4
    18b4:	68e3      	ldr	r3, [r4, #12]
    18b6:	4798      	blx	r3
    18b8:	e7bd      	b.n	1836 <_usart_interrupt_handler+0x112>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    18ba:	075a      	lsls	r2, r3, #29
    18bc:	d505      	bpl.n	18ca <_usart_interrupt_handler+0x1a6>
					module->rx_status = STATUS_ERR_OVERFLOW;
    18be:	221e      	movs	r2, #30
    18c0:	2332      	movs	r3, #50	; 0x32
    18c2:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    18c4:	3b2e      	subs	r3, #46	; 0x2e
    18c6:	836b      	strh	r3, [r5, #26]
    18c8:	e7cd      	b.n	1866 <_usart_interrupt_handler+0x142>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    18ca:	07da      	lsls	r2, r3, #31
    18cc:	d505      	bpl.n	18da <_usart_interrupt_handler+0x1b6>
					module->rx_status = STATUS_ERR_BAD_DATA;
    18ce:	2213      	movs	r2, #19
    18d0:	2332      	movs	r3, #50	; 0x32
    18d2:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    18d4:	3b31      	subs	r3, #49	; 0x31
    18d6:	836b      	strh	r3, [r5, #26]
    18d8:	e7c5      	b.n	1866 <_usart_interrupt_handler+0x142>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    18da:	06da      	lsls	r2, r3, #27
    18dc:	d505      	bpl.n	18ea <_usart_interrupt_handler+0x1c6>
					module->rx_status = STATUS_ERR_PROTOCOL;
    18de:	2242      	movs	r2, #66	; 0x42
    18e0:	2332      	movs	r3, #50	; 0x32
    18e2:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    18e4:	3b22      	subs	r3, #34	; 0x22
    18e6:	836b      	strh	r3, [r5, #26]
    18e8:	e7bd      	b.n	1866 <_usart_interrupt_handler+0x142>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    18ea:	2220      	movs	r2, #32
    18ec:	421a      	tst	r2, r3
    18ee:	d0ba      	beq.n	1866 <_usart_interrupt_handler+0x142>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    18f0:	3221      	adds	r2, #33	; 0x21
    18f2:	2332      	movs	r3, #50	; 0x32
    18f4:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    18f6:	3b12      	subs	r3, #18
    18f8:	836b      	strh	r3, [r5, #26]
    18fa:	e7b4      	b.n	1866 <_usart_interrupt_handler+0x142>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    18fc:	0020      	movs	r0, r4
    18fe:	6963      	ldr	r3, [r4, #20]
    1900:	4798      	blx	r3
    1902:	e7b2      	b.n	186a <_usart_interrupt_handler+0x146>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1904:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    1906:	05db      	lsls	r3, r3, #23
    1908:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
    190a:	b2da      	uxtb	r2, r3
    190c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    190e:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
    1910:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1912:	1c51      	adds	r1, r2, #1
    1914:	6261      	str	r1, [r4, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1916:	7961      	ldrb	r1, [r4, #5]
    1918:	2901      	cmp	r1, #1
    191a:	d010      	beq.n	193e <_usart_interrupt_handler+0x21a>
				if(--(module->remaining_rx_buffer_length) == 0) {
    191c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    191e:	3b01      	subs	r3, #1
    1920:	b29b      	uxth	r3, r3
    1922:	85a3      	strh	r3, [r4, #44]	; 0x2c
    1924:	2b00      	cmp	r3, #0
    1926:	d1a0      	bne.n	186a <_usart_interrupt_handler+0x146>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1928:	3304      	adds	r3, #4
    192a:	752b      	strb	r3, [r5, #20]
					module->rx_status = STATUS_OK;
    192c:	2200      	movs	r2, #0
    192e:	332e      	adds	r3, #46	; 0x2e
    1930:	54e2      	strb	r2, [r4, r3]
					if (callback_status
    1932:	07b3      	lsls	r3, r6, #30
    1934:	d599      	bpl.n	186a <_usart_interrupt_handler+0x146>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1936:	0020      	movs	r0, r4
    1938:	6923      	ldr	r3, [r4, #16]
    193a:	4798      	blx	r3
    193c:	e795      	b.n	186a <_usart_interrupt_handler+0x146>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    193e:	0a1b      	lsrs	r3, r3, #8
    1940:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1942:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1944:	3301      	adds	r3, #1
    1946:	6263      	str	r3, [r4, #36]	; 0x24
    1948:	e7e8      	b.n	191c <_usart_interrupt_handler+0x1f8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    194a:	2304      	movs	r3, #4
    194c:	752b      	strb	r3, [r5, #20]
    194e:	e78c      	b.n	186a <_usart_interrupt_handler+0x146>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1950:	0020      	movs	r0, r4
    1952:	69e3      	ldr	r3, [r4, #28]
    1954:	4798      	blx	r3
    1956:	e790      	b.n	187a <_usart_interrupt_handler+0x156>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1958:	0020      	movs	r0, r4
    195a:	69a3      	ldr	r3, [r4, #24]
    195c:	4798      	blx	r3
    195e:	e793      	b.n	1888 <_usart_interrupt_handler+0x164>
    1960:	20000200 	.word	0x20000200
    1964:	2000008c 	.word	0x2000008c
    1968:	00004628 	.word	0x00004628
    196c:	000042d0 	.word	0x000042d0
    1970:	0000463c 	.word	0x0000463c
    1974:	00000211 	.word	0x00000211
    1978:	000042e8 	.word	0x000042e8
    197c:	0000371d 	.word	0x0000371d
    1980:	000003f3 	.word	0x000003f3
    1984:	00004630 	.word	0x00004630

00001988 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1988:	b510      	push	{r4, lr}
	switch (clock_source) {
    198a:	2808      	cmp	r0, #8
    198c:	d803      	bhi.n	1996 <system_clock_source_get_hz+0xe>
    198e:	0080      	lsls	r0, r0, #2
    1990:	4b1b      	ldr	r3, [pc, #108]	; (1a00 <system_clock_source_get_hz+0x78>)
    1992:	581b      	ldr	r3, [r3, r0]
    1994:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1996:	2000      	movs	r0, #0
    1998:	e030      	b.n	19fc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    199a:	4b1a      	ldr	r3, [pc, #104]	; (1a04 <system_clock_source_get_hz+0x7c>)
    199c:	6918      	ldr	r0, [r3, #16]
    199e:	e02d      	b.n	19fc <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    19a0:	4b19      	ldr	r3, [pc, #100]	; (1a08 <system_clock_source_get_hz+0x80>)
    19a2:	6a1b      	ldr	r3, [r3, #32]
    19a4:	059b      	lsls	r3, r3, #22
    19a6:	0f9b      	lsrs	r3, r3, #30
    19a8:	4818      	ldr	r0, [pc, #96]	; (1a0c <system_clock_source_get_hz+0x84>)
    19aa:	40d8      	lsrs	r0, r3
    19ac:	e026      	b.n	19fc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    19ae:	4b15      	ldr	r3, [pc, #84]	; (1a04 <system_clock_source_get_hz+0x7c>)
    19b0:	6958      	ldr	r0, [r3, #20]
    19b2:	e023      	b.n	19fc <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    19b4:	4b13      	ldr	r3, [pc, #76]	; (1a04 <system_clock_source_get_hz+0x7c>)
    19b6:	681b      	ldr	r3, [r3, #0]
			return 0;
    19b8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    19ba:	079b      	lsls	r3, r3, #30
    19bc:	d51e      	bpl.n	19fc <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    19be:	4912      	ldr	r1, [pc, #72]	; (1a08 <system_clock_source_get_hz+0x80>)
    19c0:	2210      	movs	r2, #16
    19c2:	68cb      	ldr	r3, [r1, #12]
    19c4:	421a      	tst	r2, r3
    19c6:	d0fc      	beq.n	19c2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    19c8:	4b0e      	ldr	r3, [pc, #56]	; (1a04 <system_clock_source_get_hz+0x7c>)
    19ca:	681b      	ldr	r3, [r3, #0]
    19cc:	075b      	lsls	r3, r3, #29
    19ce:	d401      	bmi.n	19d4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    19d0:	480f      	ldr	r0, [pc, #60]	; (1a10 <system_clock_source_get_hz+0x88>)
    19d2:	e013      	b.n	19fc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19d4:	2000      	movs	r0, #0
    19d6:	4b0f      	ldr	r3, [pc, #60]	; (1a14 <system_clock_source_get_hz+0x8c>)
    19d8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    19da:	4b0a      	ldr	r3, [pc, #40]	; (1a04 <system_clock_source_get_hz+0x7c>)
    19dc:	689b      	ldr	r3, [r3, #8]
    19de:	041b      	lsls	r3, r3, #16
    19e0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19e2:	4358      	muls	r0, r3
    19e4:	e00a      	b.n	19fc <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19e6:	2350      	movs	r3, #80	; 0x50
    19e8:	4a07      	ldr	r2, [pc, #28]	; (1a08 <system_clock_source_get_hz+0x80>)
    19ea:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    19ec:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19ee:	075b      	lsls	r3, r3, #29
    19f0:	d504      	bpl.n	19fc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    19f2:	4b04      	ldr	r3, [pc, #16]	; (1a04 <system_clock_source_get_hz+0x7c>)
    19f4:	68d8      	ldr	r0, [r3, #12]
    19f6:	e001      	b.n	19fc <system_clock_source_get_hz+0x74>
		return 32768UL;
    19f8:	2080      	movs	r0, #128	; 0x80
    19fa:	0200      	lsls	r0, r0, #8
	}
}
    19fc:	bd10      	pop	{r4, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	000046ac 	.word	0x000046ac
    1a04:	20000110 	.word	0x20000110
    1a08:	40000800 	.word	0x40000800
    1a0c:	007a1200 	.word	0x007a1200
    1a10:	02dc6c00 	.word	0x02dc6c00
    1a14:	00001f49 	.word	0x00001f49

00001a18 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1a18:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1a1a:	490c      	ldr	r1, [pc, #48]	; (1a4c <system_clock_source_osc8m_set_config+0x34>)
    1a1c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1a1e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1a20:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1a22:	7840      	ldrb	r0, [r0, #1]
    1a24:	2201      	movs	r2, #1
    1a26:	4010      	ands	r0, r2
    1a28:	0180      	lsls	r0, r0, #6
    1a2a:	2640      	movs	r6, #64	; 0x40
    1a2c:	43b3      	bics	r3, r6
    1a2e:	4303      	orrs	r3, r0
    1a30:	402a      	ands	r2, r5
    1a32:	01d2      	lsls	r2, r2, #7
    1a34:	2080      	movs	r0, #128	; 0x80
    1a36:	4383      	bics	r3, r0
    1a38:	4313      	orrs	r3, r2
    1a3a:	2203      	movs	r2, #3
    1a3c:	4022      	ands	r2, r4
    1a3e:	0212      	lsls	r2, r2, #8
    1a40:	4803      	ldr	r0, [pc, #12]	; (1a50 <system_clock_source_osc8m_set_config+0x38>)
    1a42:	4003      	ands	r3, r0
    1a44:	4313      	orrs	r3, r2
    1a46:	620b      	str	r3, [r1, #32]
}
    1a48:	bd70      	pop	{r4, r5, r6, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	40000800 	.word	0x40000800
    1a50:	fffffcff 	.word	0xfffffcff

00001a54 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1a54:	b510      	push	{r4, lr}
    1a56:	b082      	sub	sp, #8
	switch (clock_source) {
    1a58:	2808      	cmp	r0, #8
    1a5a:	d848      	bhi.n	1aee <system_clock_source_enable+0x9a>
    1a5c:	0080      	lsls	r0, r0, #2
    1a5e:	4b30      	ldr	r3, [pc, #192]	; (1b20 <system_clock_source_enable+0xcc>)
    1a60:	581b      	ldr	r3, [r3, r0]
    1a62:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1a64:	4a2f      	ldr	r2, [pc, #188]	; (1b24 <system_clock_source_enable+0xd0>)
    1a66:	6a13      	ldr	r3, [r2, #32]
    1a68:	2102      	movs	r1, #2
    1a6a:	430b      	orrs	r3, r1
    1a6c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1a6e:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1a70:	b002      	add	sp, #8
    1a72:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a74:	4a2b      	ldr	r2, [pc, #172]	; (1b24 <system_clock_source_enable+0xd0>)
    1a76:	6993      	ldr	r3, [r2, #24]
    1a78:	2102      	movs	r1, #2
    1a7a:	430b      	orrs	r3, r1
    1a7c:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1a7e:	2000      	movs	r0, #0
		break;
    1a80:	e7f6      	b.n	1a70 <system_clock_source_enable+0x1c>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1a82:	4a28      	ldr	r2, [pc, #160]	; (1b24 <system_clock_source_enable+0xd0>)
    1a84:	8a13      	ldrh	r3, [r2, #16]
    1a86:	2102      	movs	r1, #2
    1a88:	430b      	orrs	r3, r1
    1a8a:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1a8c:	2000      	movs	r0, #0
		break;
    1a8e:	e7ef      	b.n	1a70 <system_clock_source_enable+0x1c>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1a90:	4a24      	ldr	r2, [pc, #144]	; (1b24 <system_clock_source_enable+0xd0>)
    1a92:	8a93      	ldrh	r3, [r2, #20]
    1a94:	2102      	movs	r1, #2
    1a96:	430b      	orrs	r3, r1
    1a98:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1a9a:	2000      	movs	r0, #0
		break;
    1a9c:	e7e8      	b.n	1a70 <system_clock_source_enable+0x1c>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1a9e:	4922      	ldr	r1, [pc, #136]	; (1b28 <system_clock_source_enable+0xd4>)
    1aa0:	680b      	ldr	r3, [r1, #0]
    1aa2:	2202      	movs	r2, #2
    1aa4:	4313      	orrs	r3, r2
    1aa6:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1aa8:	4b1e      	ldr	r3, [pc, #120]	; (1b24 <system_clock_source_enable+0xd0>)
    1aaa:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1aac:	0019      	movs	r1, r3
    1aae:	320e      	adds	r2, #14
    1ab0:	68cb      	ldr	r3, [r1, #12]
    1ab2:	421a      	tst	r2, r3
    1ab4:	d0fc      	beq.n	1ab0 <system_clock_source_enable+0x5c>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1ab6:	4a1c      	ldr	r2, [pc, #112]	; (1b28 <system_clock_source_enable+0xd4>)
    1ab8:	6891      	ldr	r1, [r2, #8]
    1aba:	4b1a      	ldr	r3, [pc, #104]	; (1b24 <system_clock_source_enable+0xd0>)
    1abc:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1abe:	6852      	ldr	r2, [r2, #4]
    1ac0:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1ac2:	2200      	movs	r2, #0
    1ac4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ac6:	0019      	movs	r1, r3
    1ac8:	3210      	adds	r2, #16
    1aca:	68cb      	ldr	r3, [r1, #12]
    1acc:	421a      	tst	r2, r3
    1ace:	d0fc      	beq.n	1aca <system_clock_source_enable+0x76>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ad0:	4b15      	ldr	r3, [pc, #84]	; (1b28 <system_clock_source_enable+0xd4>)
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	4a13      	ldr	r2, [pc, #76]	; (1b24 <system_clock_source_enable+0xd0>)
    1ad8:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1ada:	2000      	movs	r0, #0
    1adc:	e7c8      	b.n	1a70 <system_clock_source_enable+0x1c>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1ade:	4911      	ldr	r1, [pc, #68]	; (1b24 <system_clock_source_enable+0xd0>)
    1ae0:	2244      	movs	r2, #68	; 0x44
    1ae2:	5c8b      	ldrb	r3, [r1, r2]
    1ae4:	2002      	movs	r0, #2
    1ae6:	4303      	orrs	r3, r0
    1ae8:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1aea:	2000      	movs	r0, #0
		break;
    1aec:	e7c0      	b.n	1a70 <system_clock_source_enable+0x1c>
    1aee:	4b0f      	ldr	r3, [pc, #60]	; (1b2c <system_clock_source_enable+0xd8>)
    1af0:	6818      	ldr	r0, [r3, #0]
		Assert(false);
    1af2:	2800      	cmp	r0, #0
    1af4:	d00a      	beq.n	1b0c <system_clock_source_enable+0xb8>
    1af6:	4b0e      	ldr	r3, [pc, #56]	; (1b30 <system_clock_source_enable+0xdc>)
    1af8:	9301      	str	r3, [sp, #4]
    1afa:	4b0e      	ldr	r3, [pc, #56]	; (1b34 <system_clock_source_enable+0xe0>)
    1afc:	9300      	str	r3, [sp, #0]
    1afe:	4b0e      	ldr	r3, [pc, #56]	; (1b38 <system_clock_source_enable+0xe4>)
    1b00:	4a0e      	ldr	r2, [pc, #56]	; (1b3c <system_clock_source_enable+0xe8>)
    1b02:	2101      	movs	r1, #1
    1b04:	4c0e      	ldr	r4, [pc, #56]	; (1b40 <system_clock_source_enable+0xec>)
    1b06:	47a0      	blx	r4
		return STATUS_ERR_INVALID_ARG;
    1b08:	2017      	movs	r0, #23
    1b0a:	e7b1      	b.n	1a70 <system_clock_source_enable+0x1c>
		Assert(false);
    1b0c:	4b0a      	ldr	r3, [pc, #40]	; (1b38 <system_clock_source_enable+0xe4>)
    1b0e:	4a0b      	ldr	r2, [pc, #44]	; (1b3c <system_clock_source_enable+0xe8>)
    1b10:	4907      	ldr	r1, [pc, #28]	; (1b30 <system_clock_source_enable+0xdc>)
    1b12:	480c      	ldr	r0, [pc, #48]	; (1b44 <system_clock_source_enable+0xf0>)
    1b14:	4c0c      	ldr	r4, [pc, #48]	; (1b48 <system_clock_source_enable+0xf4>)
    1b16:	47a0      	blx	r4
    1b18:	e7fe      	b.n	1b18 <system_clock_source_enable+0xc4>
		return STATUS_OK;
    1b1a:	2000      	movs	r0, #0
    1b1c:	e7a8      	b.n	1a70 <system_clock_source_enable+0x1c>
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	000046d0 	.word	0x000046d0
    1b24:	40000800 	.word	0x40000800
    1b28:	20000110 	.word	0x20000110
    1b2c:	2000008c 	.word	0x2000008c
    1b30:	000045bc 	.word	0x000045bc
    1b34:	000042d0 	.word	0x000042d0
    1b38:	00000243 	.word	0x00000243
    1b3c:	000046f4 	.word	0x000046f4
    1b40:	00000211 	.word	0x00000211
    1b44:	000042e8 	.word	0x000042e8
    1b48:	0000371d 	.word	0x0000371d

00001b4c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1b4c:	b530      	push	{r4, r5, lr}
    1b4e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1b50:	22c2      	movs	r2, #194	; 0xc2
    1b52:	00d2      	lsls	r2, r2, #3
    1b54:	4b1a      	ldr	r3, [pc, #104]	; (1bc0 <system_clock_init+0x74>)
    1b56:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1b58:	4a1a      	ldr	r2, [pc, #104]	; (1bc4 <system_clock_init+0x78>)
    1b5a:	6853      	ldr	r3, [r2, #4]
    1b5c:	211e      	movs	r1, #30
    1b5e:	438b      	bics	r3, r1
    1b60:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1b62:	2301      	movs	r3, #1
    1b64:	466a      	mov	r2, sp
    1b66:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b68:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1b6a:	4d17      	ldr	r5, [pc, #92]	; (1bc8 <system_clock_init+0x7c>)
    1b6c:	b2e0      	uxtb	r0, r4
    1b6e:	4669      	mov	r1, sp
    1b70:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b72:	3401      	adds	r4, #1
    1b74:	2c25      	cmp	r4, #37	; 0x25
    1b76:	d1f9      	bne.n	1b6c <system_clock_init+0x20>
	config->run_in_standby  = false;
    1b78:	a803      	add	r0, sp, #12
    1b7a:	2400      	movs	r4, #0
    1b7c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1b7e:	2501      	movs	r5, #1
    1b80:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1b82:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1b84:	4b11      	ldr	r3, [pc, #68]	; (1bcc <system_clock_init+0x80>)
    1b86:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1b88:	2006      	movs	r0, #6
    1b8a:	4b11      	ldr	r3, [pc, #68]	; (1bd0 <system_clock_init+0x84>)
    1b8c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1b8e:	4b11      	ldr	r3, [pc, #68]	; (1bd4 <system_clock_init+0x88>)
    1b90:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1b92:	4b11      	ldr	r3, [pc, #68]	; (1bd8 <system_clock_init+0x8c>)
    1b94:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1b96:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1b98:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1b9a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1b9c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1b9e:	466b      	mov	r3, sp
    1ba0:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1ba2:	2306      	movs	r3, #6
    1ba4:	466a      	mov	r2, sp
    1ba6:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1ba8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1baa:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1bac:	4669      	mov	r1, sp
    1bae:	2000      	movs	r0, #0
    1bb0:	4b0a      	ldr	r3, [pc, #40]	; (1bdc <system_clock_init+0x90>)
    1bb2:	4798      	blx	r3
    1bb4:	2000      	movs	r0, #0
    1bb6:	4b0a      	ldr	r3, [pc, #40]	; (1be0 <system_clock_init+0x94>)
    1bb8:	4798      	blx	r3
#endif
}
    1bba:	b005      	add	sp, #20
    1bbc:	bd30      	pop	{r4, r5, pc}
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	40000800 	.word	0x40000800
    1bc4:	41004000 	.word	0x41004000
    1bc8:	00001ed1 	.word	0x00001ed1
    1bcc:	00001a19 	.word	0x00001a19
    1bd0:	00001a55 	.word	0x00001a55
    1bd4:	00001be5 	.word	0x00001be5
    1bd8:	40000400 	.word	0x40000400
    1bdc:	00001c09 	.word	0x00001c09
    1be0:	00001d15 	.word	0x00001d15

00001be4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1be4:	4a06      	ldr	r2, [pc, #24]	; (1c00 <system_gclk_init+0x1c>)
    1be6:	6993      	ldr	r3, [r2, #24]
    1be8:	2108      	movs	r1, #8
    1bea:	430b      	orrs	r3, r1
    1bec:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1bee:	2201      	movs	r2, #1
    1bf0:	4b04      	ldr	r3, [pc, #16]	; (1c04 <system_gclk_init+0x20>)
    1bf2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1bf4:	0019      	movs	r1, r3
    1bf6:	780b      	ldrb	r3, [r1, #0]
    1bf8:	4213      	tst	r3, r2
    1bfa:	d1fc      	bne.n	1bf6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1bfc:	4770      	bx	lr
    1bfe:	46c0      	nop			; (mov r8, r8)
    1c00:	40000400 	.word	0x40000400
    1c04:	40000c00 	.word	0x40000c00

00001c08 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0a:	b083      	sub	sp, #12
    1c0c:	0007      	movs	r7, r0
    1c0e:	000e      	movs	r6, r1
    1c10:	4b35      	ldr	r3, [pc, #212]	; (1ce8 <system_gclk_gen_set_config+0xe0>)
    1c12:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
    1c14:	2800      	cmp	r0, #0
    1c16:	d108      	bne.n	1c2a <system_gclk_gen_set_config+0x22>
    1c18:	2900      	cmp	r1, #0
    1c1a:	d111      	bne.n	1c40 <system_gclk_gen_set_config+0x38>
    1c1c:	2375      	movs	r3, #117	; 0x75
    1c1e:	4a33      	ldr	r2, [pc, #204]	; (1cec <system_gclk_gen_set_config+0xe4>)
    1c20:	4933      	ldr	r1, [pc, #204]	; (1cf0 <system_gclk_gen_set_config+0xe8>)
    1c22:	4834      	ldr	r0, [pc, #208]	; (1cf4 <system_gclk_gen_set_config+0xec>)
    1c24:	4c34      	ldr	r4, [pc, #208]	; (1cf8 <system_gclk_gen_set_config+0xf0>)
    1c26:	47a0      	blx	r4
    1c28:	e7fe      	b.n	1c28 <system_gclk_gen_set_config+0x20>
    1c2a:	2900      	cmp	r1, #0
    1c2c:	d108      	bne.n	1c40 <system_gclk_gen_set_config+0x38>
    1c2e:	4b30      	ldr	r3, [pc, #192]	; (1cf0 <system_gclk_gen_set_config+0xe8>)
    1c30:	9301      	str	r3, [sp, #4]
    1c32:	4b32      	ldr	r3, [pc, #200]	; (1cfc <system_gclk_gen_set_config+0xf4>)
    1c34:	9300      	str	r3, [sp, #0]
    1c36:	2375      	movs	r3, #117	; 0x75
    1c38:	4a2c      	ldr	r2, [pc, #176]	; (1cec <system_gclk_gen_set_config+0xe4>)
    1c3a:	2101      	movs	r1, #1
    1c3c:	4c30      	ldr	r4, [pc, #192]	; (1d00 <system_gclk_gen_set_config+0xf8>)
    1c3e:	47a0      	blx	r4

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1c40:	003d      	movs	r5, r7
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1c42:	7834      	ldrb	r4, [r6, #0]
    1c44:	0224      	lsls	r4, r4, #8
    1c46:	433c      	orrs	r4, r7

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1c48:	7873      	ldrb	r3, [r6, #1]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d002      	beq.n	1c54 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1c4e:	2380      	movs	r3, #128	; 0x80
    1c50:	02db      	lsls	r3, r3, #11
    1c52:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1c54:	7a73      	ldrb	r3, [r6, #9]
    1c56:	2b00      	cmp	r3, #0
    1c58:	d002      	beq.n	1c60 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1c5a:	2380      	movs	r3, #128	; 0x80
    1c5c:	031b      	lsls	r3, r3, #12
    1c5e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1c60:	6873      	ldr	r3, [r6, #4]
    1c62:	2b01      	cmp	r3, #1
    1c64:	d910      	bls.n	1c88 <system_gclk_gen_set_config+0x80>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1c66:	1e5a      	subs	r2, r3, #1
    1c68:	4213      	tst	r3, r2
    1c6a:	d135      	bne.n	1cd8 <system_gclk_gen_set_config+0xd0>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c6c:	2b02      	cmp	r3, #2
    1c6e:	d931      	bls.n	1cd4 <system_gclk_gen_set_config+0xcc>
    1c70:	2102      	movs	r1, #2
    1c72:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1c74:	3201      	adds	r2, #1
						mask <<= 1) {
    1c76:	0049      	lsls	r1, r1, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1c78:	428b      	cmp	r3, r1
    1c7a:	d8fb      	bhi.n	1c74 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1c7c:	0212      	lsls	r2, r2, #8
    1c7e:	433a      	orrs	r2, r7
    1c80:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1c82:	2380      	movs	r3, #128	; 0x80
    1c84:	035b      	lsls	r3, r3, #13
    1c86:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1c88:	7a33      	ldrb	r3, [r6, #8]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d002      	beq.n	1c94 <system_gclk_gen_set_config+0x8c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1c8e:	2380      	movs	r3, #128	; 0x80
    1c90:	039b      	lsls	r3, r3, #14
    1c92:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c94:	4a1b      	ldr	r2, [pc, #108]	; (1d04 <system_gclk_gen_set_config+0xfc>)
    1c96:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1c98:	b25b      	sxtb	r3, r3
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	dbfb      	blt.n	1c96 <system_gclk_gen_set_config+0x8e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c9e:	4b1a      	ldr	r3, [pc, #104]	; (1d08 <system_gclk_gen_set_config+0x100>)
    1ca0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ca2:	4b1a      	ldr	r3, [pc, #104]	; (1d0c <system_gclk_gen_set_config+0x104>)
    1ca4:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ca6:	4a17      	ldr	r2, [pc, #92]	; (1d04 <system_gclk_gen_set_config+0xfc>)
    1ca8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1caa:	b25b      	sxtb	r3, r3
    1cac:	2b00      	cmp	r3, #0
    1cae:	dbfb      	blt.n	1ca8 <system_gclk_gen_set_config+0xa0>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1cb0:	4b14      	ldr	r3, [pc, #80]	; (1d04 <system_gclk_gen_set_config+0xfc>)
    1cb2:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cb4:	001a      	movs	r2, r3
    1cb6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1cb8:	b25b      	sxtb	r3, r3
    1cba:	2b00      	cmp	r3, #0
    1cbc:	dbfb      	blt.n	1cb6 <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1cbe:	4a11      	ldr	r2, [pc, #68]	; (1d04 <system_gclk_gen_set_config+0xfc>)
    1cc0:	6853      	ldr	r3, [r2, #4]
    1cc2:	2180      	movs	r1, #128	; 0x80
    1cc4:	0249      	lsls	r1, r1, #9
    1cc6:	400b      	ands	r3, r1
    1cc8:	431c      	orrs	r4, r3
    1cca:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ccc:	4b10      	ldr	r3, [pc, #64]	; (1d10 <system_gclk_gen_set_config+0x108>)
    1cce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cd0:	b003      	add	sp, #12
    1cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1cd4:	2200      	movs	r2, #0
    1cd6:	e7d1      	b.n	1c7c <system_gclk_gen_set_config+0x74>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1cd8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    1cda:	433b      	orrs	r3, r7
    1cdc:	001d      	movs	r5, r3
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1cde:	2380      	movs	r3, #128	; 0x80
    1ce0:	029b      	lsls	r3, r3, #10
    1ce2:	431c      	orrs	r4, r3
    1ce4:	e7d0      	b.n	1c88 <system_gclk_gen_set_config+0x80>
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	2000008c 	.word	0x2000008c
    1cec:	00004758 	.word	0x00004758
    1cf0:	00004550 	.word	0x00004550
    1cf4:	000042e8 	.word	0x000042e8
    1cf8:	0000371d 	.word	0x0000371d
    1cfc:	000042d0 	.word	0x000042d0
    1d00:	00000211 	.word	0x00000211
    1d04:	40000c00 	.word	0x40000c00
    1d08:	00000115 	.word	0x00000115
    1d0c:	40000c08 	.word	0x40000c08
    1d10:	00000155 	.word	0x00000155

00001d14 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1d14:	b510      	push	{r4, lr}
    1d16:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d18:	4a0b      	ldr	r2, [pc, #44]	; (1d48 <system_gclk_gen_enable+0x34>)
    1d1a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d1c:	b25b      	sxtb	r3, r3
    1d1e:	2b00      	cmp	r3, #0
    1d20:	dbfb      	blt.n	1d1a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1d22:	4b0a      	ldr	r3, [pc, #40]	; (1d4c <system_gclk_gen_enable+0x38>)
    1d24:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d26:	4b0a      	ldr	r3, [pc, #40]	; (1d50 <system_gclk_gen_enable+0x3c>)
    1d28:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d2a:	4a07      	ldr	r2, [pc, #28]	; (1d48 <system_gclk_gen_enable+0x34>)
    1d2c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d2e:	b25b      	sxtb	r3, r3
    1d30:	2b00      	cmp	r3, #0
    1d32:	dbfb      	blt.n	1d2c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1d34:	4a04      	ldr	r2, [pc, #16]	; (1d48 <system_gclk_gen_enable+0x34>)
    1d36:	6851      	ldr	r1, [r2, #4]
    1d38:	2380      	movs	r3, #128	; 0x80
    1d3a:	025b      	lsls	r3, r3, #9
    1d3c:	430b      	orrs	r3, r1
    1d3e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1d40:	4b04      	ldr	r3, [pc, #16]	; (1d54 <system_gclk_gen_enable+0x40>)
    1d42:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d44:	bd10      	pop	{r4, pc}
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	40000c00 	.word	0x40000c00
    1d4c:	00000115 	.word	0x00000115
    1d50:	40000c04 	.word	0x40000c04
    1d54:	00000155 	.word	0x00000155

00001d58 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1d58:	b570      	push	{r4, r5, r6, lr}
    1d5a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d5c:	4a1a      	ldr	r2, [pc, #104]	; (1dc8 <system_gclk_gen_get_hz+0x70>)
    1d5e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d60:	b25b      	sxtb	r3, r3
    1d62:	2b00      	cmp	r3, #0
    1d64:	dbfb      	blt.n	1d5e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1d66:	4b19      	ldr	r3, [pc, #100]	; (1dcc <system_gclk_gen_get_hz+0x74>)
    1d68:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d6a:	4b19      	ldr	r3, [pc, #100]	; (1dd0 <system_gclk_gen_get_hz+0x78>)
    1d6c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d6e:	4a16      	ldr	r2, [pc, #88]	; (1dc8 <system_gclk_gen_get_hz+0x70>)
    1d70:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d72:	b25b      	sxtb	r3, r3
    1d74:	2b00      	cmp	r3, #0
    1d76:	dbfb      	blt.n	1d70 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1d78:	4e13      	ldr	r6, [pc, #76]	; (1dc8 <system_gclk_gen_get_hz+0x70>)
    1d7a:	6870      	ldr	r0, [r6, #4]
    1d7c:	04c0      	lsls	r0, r0, #19
    1d7e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1d80:	4b14      	ldr	r3, [pc, #80]	; (1dd4 <system_gclk_gen_get_hz+0x7c>)
    1d82:	4798      	blx	r3
    1d84:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d86:	4b12      	ldr	r3, [pc, #72]	; (1dd0 <system_gclk_gen_get_hz+0x78>)
    1d88:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1d8a:	6876      	ldr	r6, [r6, #4]
    1d8c:	02f6      	lsls	r6, r6, #11
    1d8e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d90:	4b11      	ldr	r3, [pc, #68]	; (1dd8 <system_gclk_gen_get_hz+0x80>)
    1d92:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d94:	4a0c      	ldr	r2, [pc, #48]	; (1dc8 <system_gclk_gen_get_hz+0x70>)
    1d96:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d98:	b25b      	sxtb	r3, r3
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	dbfb      	blt.n	1d96 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1d9e:	4b0a      	ldr	r3, [pc, #40]	; (1dc8 <system_gclk_gen_get_hz+0x70>)
    1da0:	689c      	ldr	r4, [r3, #8]
    1da2:	0224      	lsls	r4, r4, #8
    1da4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1da6:	4b0d      	ldr	r3, [pc, #52]	; (1ddc <system_gclk_gen_get_hz+0x84>)
    1da8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1daa:	2e00      	cmp	r6, #0
    1dac:	d107      	bne.n	1dbe <system_gclk_gen_get_hz+0x66>
    1dae:	2c01      	cmp	r4, #1
    1db0:	d907      	bls.n	1dc2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1db2:	0021      	movs	r1, r4
    1db4:	0028      	movs	r0, r5
    1db6:	4b0a      	ldr	r3, [pc, #40]	; (1de0 <system_gclk_gen_get_hz+0x88>)
    1db8:	4798      	blx	r3
    1dba:	0005      	movs	r5, r0
    1dbc:	e001      	b.n	1dc2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1dbe:	3401      	adds	r4, #1
    1dc0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1dc2:	0028      	movs	r0, r5
    1dc4:	bd70      	pop	{r4, r5, r6, pc}
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	40000c00 	.word	0x40000c00
    1dcc:	00000115 	.word	0x00000115
    1dd0:	40000c04 	.word	0x40000c04
    1dd4:	00001989 	.word	0x00001989
    1dd8:	40000c08 	.word	0x40000c08
    1ddc:	00000155 	.word	0x00000155
    1de0:	00002f99 	.word	0x00002f99

00001de4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1de4:	b510      	push	{r4, lr}
    1de6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1de8:	4b06      	ldr	r3, [pc, #24]	; (1e04 <system_gclk_chan_enable+0x20>)
    1dea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1dec:	4b06      	ldr	r3, [pc, #24]	; (1e08 <system_gclk_chan_enable+0x24>)
    1dee:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1df0:	4a06      	ldr	r2, [pc, #24]	; (1e0c <system_gclk_chan_enable+0x28>)
    1df2:	8853      	ldrh	r3, [r2, #2]
    1df4:	2180      	movs	r1, #128	; 0x80
    1df6:	01c9      	lsls	r1, r1, #7
    1df8:	430b      	orrs	r3, r1
    1dfa:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1dfc:	4b04      	ldr	r3, [pc, #16]	; (1e10 <system_gclk_chan_enable+0x2c>)
    1dfe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e00:	bd10      	pop	{r4, pc}
    1e02:	46c0      	nop			; (mov r8, r8)
    1e04:	00000115 	.word	0x00000115
    1e08:	40000c02 	.word	0x40000c02
    1e0c:	40000c00 	.word	0x40000c00
    1e10:	00000155 	.word	0x00000155

00001e14 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1e14:	b510      	push	{r4, lr}
    1e16:	b082      	sub	sp, #8
    1e18:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e1a:	4b20      	ldr	r3, [pc, #128]	; (1e9c <system_gclk_chan_disable+0x88>)
    1e1c:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e1e:	4b20      	ldr	r3, [pc, #128]	; (1ea0 <system_gclk_chan_disable+0x8c>)
    1e20:	701c      	strb	r4, [r3, #0]
    1e22:	4b20      	ldr	r3, [pc, #128]	; (1ea4 <system_gclk_chan_disable+0x90>)
    1e24:	6818      	ldr	r0, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);
    1e26:	2800      	cmp	r0, #0
    1e28:	d02b      	beq.n	1e82 <system_gclk_chan_disable+0x6e>
    1e2a:	4b1f      	ldr	r3, [pc, #124]	; (1ea8 <system_gclk_chan_disable+0x94>)
    1e2c:	885b      	ldrh	r3, [r3, #2]
    1e2e:	0bdb      	lsrs	r3, r3, #15
    1e30:	d11c      	bne.n	1e6c <system_gclk_chan_disable+0x58>

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1e32:	4a1d      	ldr	r2, [pc, #116]	; (1ea8 <system_gclk_chan_disable+0x94>)
    1e34:	8853      	ldrh	r3, [r2, #2]
    1e36:	051b      	lsls	r3, r3, #20
    1e38:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1e3a:	8853      	ldrh	r3, [r2, #2]
    1e3c:	491b      	ldr	r1, [pc, #108]	; (1eac <system_gclk_chan_disable+0x98>)
    1e3e:	400b      	ands	r3, r1
    1e40:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1e42:	8853      	ldrh	r3, [r2, #2]
    1e44:	491a      	ldr	r1, [pc, #104]	; (1eb0 <system_gclk_chan_disable+0x9c>)
    1e46:	400b      	ands	r3, r1
    1e48:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1e4a:	0011      	movs	r1, r2
    1e4c:	2280      	movs	r2, #128	; 0x80
    1e4e:	01d2      	lsls	r2, r2, #7
    1e50:	884b      	ldrh	r3, [r1, #2]
    1e52:	4213      	tst	r3, r2
    1e54:	d1fc      	bne.n	1e50 <system_gclk_chan_disable+0x3c>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1e56:	4914      	ldr	r1, [pc, #80]	; (1ea8 <system_gclk_chan_disable+0x94>)
    1e58:	884a      	ldrh	r2, [r1, #2]
    1e5a:	0203      	lsls	r3, r0, #8
    1e5c:	4813      	ldr	r0, [pc, #76]	; (1eac <system_gclk_chan_disable+0x98>)
    1e5e:	4002      	ands	r2, r0
    1e60:	4313      	orrs	r3, r2
    1e62:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1e64:	4b13      	ldr	r3, [pc, #76]	; (1eb4 <system_gclk_chan_disable+0xa0>)
    1e66:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e68:	b002      	add	sp, #8
    1e6a:	bd10      	pop	{r4, pc}
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);
    1e6c:	4b12      	ldr	r3, [pc, #72]	; (1eb8 <system_gclk_chan_disable+0xa4>)
    1e6e:	9301      	str	r3, [sp, #4]
    1e70:	4b12      	ldr	r3, [pc, #72]	; (1ebc <system_gclk_chan_disable+0xa8>)
    1e72:	9300      	str	r3, [sp, #0]
    1e74:	2398      	movs	r3, #152	; 0x98
    1e76:	33ff      	adds	r3, #255	; 0xff
    1e78:	4a11      	ldr	r2, [pc, #68]	; (1ec0 <system_gclk_chan_disable+0xac>)
    1e7a:	2101      	movs	r1, #1
    1e7c:	4c11      	ldr	r4, [pc, #68]	; (1ec4 <system_gclk_chan_disable+0xb0>)
    1e7e:	47a0      	blx	r4
    1e80:	e7d7      	b.n	1e32 <system_gclk_chan_disable+0x1e>
    1e82:	4b09      	ldr	r3, [pc, #36]	; (1ea8 <system_gclk_chan_disable+0x94>)
    1e84:	885b      	ldrh	r3, [r3, #2]
    1e86:	0bdb      	lsrs	r3, r3, #15
    1e88:	d0d3      	beq.n	1e32 <system_gclk_chan_disable+0x1e>
    1e8a:	2398      	movs	r3, #152	; 0x98
    1e8c:	33ff      	adds	r3, #255	; 0xff
    1e8e:	4a0c      	ldr	r2, [pc, #48]	; (1ec0 <system_gclk_chan_disable+0xac>)
    1e90:	4909      	ldr	r1, [pc, #36]	; (1eb8 <system_gclk_chan_disable+0xa4>)
    1e92:	480d      	ldr	r0, [pc, #52]	; (1ec8 <system_gclk_chan_disable+0xb4>)
    1e94:	4c0d      	ldr	r4, [pc, #52]	; (1ecc <system_gclk_chan_disable+0xb8>)
    1e96:	47a0      	blx	r4
    1e98:	e7fe      	b.n	1e98 <system_gclk_chan_disable+0x84>
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	00000115 	.word	0x00000115
    1ea0:	40000c02 	.word	0x40000c02
    1ea4:	2000008c 	.word	0x2000008c
    1ea8:	40000c00 	.word	0x40000c00
    1eac:	fffff0ff 	.word	0xfffff0ff
    1eb0:	ffffbfff 	.word	0xffffbfff
    1eb4:	00000155 	.word	0x00000155
    1eb8:	0000473c 	.word	0x0000473c
    1ebc:	000042d0 	.word	0x000042d0
    1ec0:	00004758 	.word	0x00004758
    1ec4:	00000211 	.word	0x00000211
    1ec8:	000042e8 	.word	0x000042e8
    1ecc:	0000371d 	.word	0x0000371d

00001ed0 <system_gclk_chan_set_config>:
{
    1ed0:	b570      	push	{r4, r5, r6, lr}
    1ed2:	b082      	sub	sp, #8
    1ed4:	0005      	movs	r5, r0
    1ed6:	000c      	movs	r4, r1
    1ed8:	4b12      	ldr	r3, [pc, #72]	; (1f24 <system_gclk_chan_set_config+0x54>)
    1eda:	6818      	ldr	r0, [r3, #0]
	Assert(config);
    1edc:	2800      	cmp	r0, #0
    1ede:	d017      	beq.n	1f10 <system_gclk_chan_set_config+0x40>
    1ee0:	2900      	cmp	r1, #0
    1ee2:	d00a      	beq.n	1efa <system_gclk_chan_set_config+0x2a>
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1ee4:	7824      	ldrb	r4, [r4, #0]
    1ee6:	0224      	lsls	r4, r4, #8
    1ee8:	432c      	orrs	r4, r5
	system_gclk_chan_disable(channel);
    1eea:	0028      	movs	r0, r5
    1eec:	4b0e      	ldr	r3, [pc, #56]	; (1f28 <system_gclk_chan_set_config+0x58>)
    1eee:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1ef0:	b2a4      	uxth	r4, r4
    1ef2:	4b0e      	ldr	r3, [pc, #56]	; (1f2c <system_gclk_chan_set_config+0x5c>)
    1ef4:	805c      	strh	r4, [r3, #2]
}
    1ef6:	b002      	add	sp, #8
    1ef8:	bd70      	pop	{r4, r5, r6, pc}
	Assert(config);
    1efa:	4b0d      	ldr	r3, [pc, #52]	; (1f30 <system_gclk_chan_set_config+0x60>)
    1efc:	9301      	str	r3, [sp, #4]
    1efe:	4b0d      	ldr	r3, [pc, #52]	; (1f34 <system_gclk_chan_set_config+0x64>)
    1f00:	9300      	str	r3, [sp, #0]
    1f02:	2362      	movs	r3, #98	; 0x62
    1f04:	33ff      	adds	r3, #255	; 0xff
    1f06:	4a0c      	ldr	r2, [pc, #48]	; (1f38 <system_gclk_chan_set_config+0x68>)
    1f08:	2101      	movs	r1, #1
    1f0a:	4e0c      	ldr	r6, [pc, #48]	; (1f3c <system_gclk_chan_set_config+0x6c>)
    1f0c:	47b0      	blx	r6
    1f0e:	e7e9      	b.n	1ee4 <system_gclk_chan_set_config+0x14>
    1f10:	2900      	cmp	r1, #0
    1f12:	d1e7      	bne.n	1ee4 <system_gclk_chan_set_config+0x14>
    1f14:	2362      	movs	r3, #98	; 0x62
    1f16:	33ff      	adds	r3, #255	; 0xff
    1f18:	4a07      	ldr	r2, [pc, #28]	; (1f38 <system_gclk_chan_set_config+0x68>)
    1f1a:	4905      	ldr	r1, [pc, #20]	; (1f30 <system_gclk_chan_set_config+0x60>)
    1f1c:	4808      	ldr	r0, [pc, #32]	; (1f40 <system_gclk_chan_set_config+0x70>)
    1f1e:	4c09      	ldr	r4, [pc, #36]	; (1f44 <system_gclk_chan_set_config+0x74>)
    1f20:	47a0      	blx	r4
    1f22:	e7fe      	b.n	1f22 <system_gclk_chan_set_config+0x52>
    1f24:	2000008c 	.word	0x2000008c
    1f28:	00001e15 	.word	0x00001e15
    1f2c:	40000c00 	.word	0x40000c00
    1f30:	00004550 	.word	0x00004550
    1f34:	000042d0 	.word	0x000042d0
    1f38:	00004758 	.word	0x00004758
    1f3c:	00000211 	.word	0x00000211
    1f40:	000042e8 	.word	0x000042e8
    1f44:	0000371d 	.word	0x0000371d

00001f48 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1f48:	b510      	push	{r4, lr}
    1f4a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1f4c:	4b06      	ldr	r3, [pc, #24]	; (1f68 <system_gclk_chan_get_hz+0x20>)
    1f4e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f50:	4b06      	ldr	r3, [pc, #24]	; (1f6c <system_gclk_chan_get_hz+0x24>)
    1f52:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1f54:	4b06      	ldr	r3, [pc, #24]	; (1f70 <system_gclk_chan_get_hz+0x28>)
    1f56:	885c      	ldrh	r4, [r3, #2]
    1f58:	0524      	lsls	r4, r4, #20
    1f5a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1f5c:	4b05      	ldr	r3, [pc, #20]	; (1f74 <system_gclk_chan_get_hz+0x2c>)
    1f5e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1f60:	0020      	movs	r0, r4
    1f62:	4b05      	ldr	r3, [pc, #20]	; (1f78 <system_gclk_chan_get_hz+0x30>)
    1f64:	4798      	blx	r3
}
    1f66:	bd10      	pop	{r4, pc}
    1f68:	00000115 	.word	0x00000115
    1f6c:	40000c02 	.word	0x40000c02
    1f70:	40000c00 	.word	0x40000c00
    1f74:	00000155 	.word	0x00000155
    1f78:	00001d59 	.word	0x00001d59

00001f7c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7e:	b083      	sub	sp, #12
    1f80:	0005      	movs	r5, r0
    1f82:	000e      	movs	r6, r1
    1f84:	0014      	movs	r4, r2
    1f86:	4b42      	ldr	r3, [pc, #264]	; (2090 <STACK_SIZE+0x90>)
    1f88:	6818      	ldr	r0, [r3, #0]
	Assert(port);
    1f8a:	2800      	cmp	r0, #0
    1f8c:	d041      	beq.n	2012 <STACK_SIZE+0x12>
    1f8e:	2d00      	cmp	r5, #0
    1f90:	d031      	beq.n	1ff6 <_system_pinmux_config+0x7a>
	Assert(config);
    1f92:	2c00      	cmp	r4, #0
    1f94:	d04f      	beq.n	2036 <STACK_SIZE+0x36>

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1f96:	78e3      	ldrb	r3, [r4, #3]
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d15f      	bne.n	205c <STACK_SIZE+0x5c>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1f9c:	7823      	ldrb	r3, [r4, #0]
    1f9e:	2b80      	cmp	r3, #128	; 0x80
    1fa0:	d053      	beq.n	204a <STACK_SIZE+0x4a>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1fa2:	061b      	lsls	r3, r3, #24
    1fa4:	2280      	movs	r2, #128	; 0x80
    1fa6:	0252      	lsls	r2, r2, #9
    1fa8:	4313      	orrs	r3, r2
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1faa:	7862      	ldrb	r2, [r4, #1]
    1fac:	2102      	movs	r1, #2
    1fae:	438a      	bics	r2, r1
    1fb0:	d106      	bne.n	1fc0 <_system_pinmux_config+0x44>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1fb2:	78a2      	ldrb	r2, [r4, #2]
    1fb4:	2a00      	cmp	r2, #0
    1fb6:	d14a      	bne.n	204e <STACK_SIZE+0x4e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1fb8:	2280      	movs	r2, #128	; 0x80
    1fba:	0292      	lsls	r2, r2, #10
    1fbc:	4313      	orrs	r3, r2
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1fbe:	606e      	str	r6, [r5, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1fc0:	7862      	ldrb	r2, [r4, #1]
    1fc2:	3a01      	subs	r2, #1
    1fc4:	2a01      	cmp	r2, #1
    1fc6:	d946      	bls.n	2056 <STACK_SIZE+0x56>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1fc8:	0431      	lsls	r1, r6, #16
    1fca:	0c09      	lsrs	r1, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1fcc:	22a0      	movs	r2, #160	; 0xa0
    1fce:	05d2      	lsls	r2, r2, #23
    1fd0:	430a      	orrs	r2, r1
    1fd2:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1fd4:	62aa      	str	r2, [r5, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1fd6:	0c31      	lsrs	r1, r6, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1fd8:	22d0      	movs	r2, #208	; 0xd0
    1fda:	0612      	lsls	r2, r2, #24
    1fdc:	430a      	orrs	r2, r1
    1fde:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1fe0:	62aa      	str	r2, [r5, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1fe2:	78e2      	ldrb	r2, [r4, #3]
    1fe4:	2a00      	cmp	r2, #0
    1fe6:	d14c      	bne.n	2082 <STACK_SIZE+0x82>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1fe8:	035b      	lsls	r3, r3, #13
    1fea:	d546      	bpl.n	207a <STACK_SIZE+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1fec:	78a3      	ldrb	r3, [r4, #2]
    1fee:	2b01      	cmp	r3, #1
    1ff0:	d049      	beq.n	2086 <STACK_SIZE+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1ff2:	616e      	str	r6, [r5, #20]
    1ff4:	e041      	b.n	207a <STACK_SIZE+0x7a>
	Assert(port);
    1ff6:	4b27      	ldr	r3, [pc, #156]	; (2094 <STACK_SIZE+0x94>)
    1ff8:	9301      	str	r3, [sp, #4]
    1ffa:	4b27      	ldr	r3, [pc, #156]	; (2098 <STACK_SIZE+0x98>)
    1ffc:	9300      	str	r3, [sp, #0]
    1ffe:	2341      	movs	r3, #65	; 0x41
    2000:	4a26      	ldr	r2, [pc, #152]	; (209c <STACK_SIZE+0x9c>)
    2002:	2101      	movs	r1, #1
    2004:	4f26      	ldr	r7, [pc, #152]	; (20a0 <STACK_SIZE+0xa0>)
    2006:	47b8      	blx	r7
    2008:	4b21      	ldr	r3, [pc, #132]	; (2090 <STACK_SIZE+0x90>)
    200a:	6818      	ldr	r0, [r3, #0]
	Assert(config);
    200c:	2800      	cmp	r0, #0
    200e:	d1c0      	bne.n	1f92 <_system_pinmux_config+0x16>
    2010:	e001      	b.n	2016 <STACK_SIZE+0x16>
	Assert(port);
    2012:	2d00      	cmp	r5, #0
    2014:	d008      	beq.n	2028 <STACK_SIZE+0x28>
	Assert(config);
    2016:	2c00      	cmp	r4, #0
    2018:	d1bd      	bne.n	1f96 <_system_pinmux_config+0x1a>
    201a:	2342      	movs	r3, #66	; 0x42
    201c:	4a1f      	ldr	r2, [pc, #124]	; (209c <STACK_SIZE+0x9c>)
    201e:	4921      	ldr	r1, [pc, #132]	; (20a4 <STACK_SIZE+0xa4>)
    2020:	4821      	ldr	r0, [pc, #132]	; (20a8 <STACK_SIZE+0xa8>)
    2022:	4c22      	ldr	r4, [pc, #136]	; (20ac <STACK_SIZE+0xac>)
    2024:	47a0      	blx	r4
    2026:	e7fe      	b.n	2026 <STACK_SIZE+0x26>
	Assert(port);
    2028:	2341      	movs	r3, #65	; 0x41
    202a:	4a1c      	ldr	r2, [pc, #112]	; (209c <STACK_SIZE+0x9c>)
    202c:	4919      	ldr	r1, [pc, #100]	; (2094 <STACK_SIZE+0x94>)
    202e:	481e      	ldr	r0, [pc, #120]	; (20a8 <STACK_SIZE+0xa8>)
    2030:	4c1e      	ldr	r4, [pc, #120]	; (20ac <STACK_SIZE+0xac>)
    2032:	47a0      	blx	r4
    2034:	e7fe      	b.n	2034 <STACK_SIZE+0x34>
	Assert(config);
    2036:	4b1b      	ldr	r3, [pc, #108]	; (20a4 <STACK_SIZE+0xa4>)
    2038:	9301      	str	r3, [sp, #4]
    203a:	4b17      	ldr	r3, [pc, #92]	; (2098 <STACK_SIZE+0x98>)
    203c:	9300      	str	r3, [sp, #0]
    203e:	2342      	movs	r3, #66	; 0x42
    2040:	4a16      	ldr	r2, [pc, #88]	; (209c <STACK_SIZE+0x9c>)
    2042:	2101      	movs	r1, #1
    2044:	4f16      	ldr	r7, [pc, #88]	; (20a0 <STACK_SIZE+0xa0>)
    2046:	47b8      	blx	r7
    2048:	e7a5      	b.n	1f96 <_system_pinmux_config+0x1a>
	uint32_t pin_cfg = 0;
    204a:	2300      	movs	r3, #0
    204c:	e7ad      	b.n	1faa <_system_pinmux_config+0x2e>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    204e:	22c0      	movs	r2, #192	; 0xc0
    2050:	02d2      	lsls	r2, r2, #11
    2052:	4313      	orrs	r3, r2
    2054:	e7b3      	b.n	1fbe <_system_pinmux_config+0x42>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2056:	4a16      	ldr	r2, [pc, #88]	; (20b0 <STACK_SIZE+0xb0>)
    2058:	4013      	ands	r3, r2
    205a:	e7b5      	b.n	1fc8 <_system_pinmux_config+0x4c>
		port->DIRCLR.reg = pin_mask;
    205c:	606e      	str	r6, [r5, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    205e:	0432      	lsls	r2, r6, #16
    2060:	0c12      	lsrs	r2, r2, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2062:	23a0      	movs	r3, #160	; 0xa0
    2064:	05db      	lsls	r3, r3, #23
    2066:	4313      	orrs	r3, r2
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2068:	62ab      	str	r3, [r5, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    206a:	0c32      	lsrs	r2, r6, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    206c:	23d0      	movs	r3, #208	; 0xd0
    206e:	061b      	lsls	r3, r3, #24
    2070:	4313      	orrs	r3, r2
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2072:	62ab      	str	r3, [r5, #40]	; 0x28
	if(!config->powersave) {
    2074:	78e3      	ldrb	r3, [r4, #3]
    2076:	2b00      	cmp	r3, #0
    2078:	d103      	bne.n	2082 <STACK_SIZE+0x82>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    207a:	7863      	ldrb	r3, [r4, #1]
    207c:	3b01      	subs	r3, #1
    207e:	2b01      	cmp	r3, #1
    2080:	d903      	bls.n	208a <STACK_SIZE+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2082:	b003      	add	sp, #12
    2084:	bdf0      	pop	{r4, r5, r6, r7, pc}
				port->OUTSET.reg = pin_mask;
    2086:	61ae      	str	r6, [r5, #24]
    2088:	e7f7      	b.n	207a <STACK_SIZE+0x7a>
			port->DIRSET.reg = pin_mask;
    208a:	60ae      	str	r6, [r5, #8]
}
    208c:	e7f9      	b.n	2082 <STACK_SIZE+0x82>
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	2000008c 	.word	0x2000008c
    2094:	000047cc 	.word	0x000047cc
    2098:	000042d0 	.word	0x000042d0
    209c:	0000479c 	.word	0x0000479c
    20a0:	00000211 	.word	0x00000211
    20a4:	00004550 	.word	0x00004550
    20a8:	000042e8 	.word	0x000042e8
    20ac:	0000371d 	.word	0x0000371d
    20b0:	fffbffff 	.word	0xfffbffff

000020b4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    20b4:	b570      	push	{r4, r5, r6, lr}
    20b6:	b082      	sub	sp, #8
    20b8:	0005      	movs	r5, r0
    20ba:	000c      	movs	r4, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    20bc:	09c3      	lsrs	r3, r0, #7
    20be:	d00f      	beq.n	20e0 <system_pinmux_pin_set_config+0x2c>
    20c0:	4b12      	ldr	r3, [pc, #72]	; (210c <system_pinmux_pin_set_config+0x58>)
    20c2:	6818      	ldr	r0, [r3, #0]
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
    20c4:	2800      	cmp	r0, #0
    20c6:	d019      	beq.n	20fc <system_pinmux_pin_set_config+0x48>
    20c8:	4b11      	ldr	r3, [pc, #68]	; (2110 <system_pinmux_pin_set_config+0x5c>)
    20ca:	9301      	str	r3, [sp, #4]
    20cc:	4b11      	ldr	r3, [pc, #68]	; (2114 <system_pinmux_pin_set_config+0x60>)
    20ce:	9300      	str	r3, [sp, #0]
    20d0:	2362      	movs	r3, #98	; 0x62
    20d2:	33ff      	adds	r3, #255	; 0xff
    20d4:	4a10      	ldr	r2, [pc, #64]	; (2118 <system_pinmux_pin_set_config+0x64>)
    20d6:	2101      	movs	r1, #1
    20d8:	4e10      	ldr	r6, [pc, #64]	; (211c <system_pinmux_pin_set_config+0x68>)
    20da:	47b0      	blx	r6
		return NULL;
    20dc:	2000      	movs	r0, #0
    20de:	e004      	b.n	20ea <system_pinmux_pin_set_config+0x36>
		return &(ports[port_index]->Group[group_index]);
    20e0:	0940      	lsrs	r0, r0, #5
    20e2:	01c0      	lsls	r0, r0, #7
    20e4:	4b0e      	ldr	r3, [pc, #56]	; (2120 <system_pinmux_pin_set_config+0x6c>)
    20e6:	469c      	mov	ip, r3
    20e8:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    20ea:	231f      	movs	r3, #31
    20ec:	402b      	ands	r3, r5
    20ee:	2101      	movs	r1, #1
    20f0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    20f2:	0022      	movs	r2, r4
    20f4:	4b0b      	ldr	r3, [pc, #44]	; (2124 <system_pinmux_pin_set_config+0x70>)
    20f6:	4798      	blx	r3
}
    20f8:	b002      	add	sp, #8
    20fa:	bd70      	pop	{r4, r5, r6, pc}
		Assert(false);
    20fc:	2362      	movs	r3, #98	; 0x62
    20fe:	33ff      	adds	r3, #255	; 0xff
    2100:	4a05      	ldr	r2, [pc, #20]	; (2118 <system_pinmux_pin_set_config+0x64>)
    2102:	4903      	ldr	r1, [pc, #12]	; (2110 <system_pinmux_pin_set_config+0x5c>)
    2104:	4808      	ldr	r0, [pc, #32]	; (2128 <system_pinmux_pin_set_config+0x74>)
    2106:	4c09      	ldr	r4, [pc, #36]	; (212c <system_pinmux_pin_set_config+0x78>)
    2108:	47a0      	blx	r4
    210a:	e7fe      	b.n	210a <system_pinmux_pin_set_config+0x56>
    210c:	2000008c 	.word	0x2000008c
    2110:	000045bc 	.word	0x000045bc
    2114:	000042d0 	.word	0x000042d0
    2118:	000047d4 	.word	0x000047d4
    211c:	00000211 	.word	0x00000211
    2120:	41004400 	.word	0x41004400
    2124:	00001f7d 	.word	0x00001f7d
    2128:	000042e8 	.word	0x000042e8
    212c:	0000371d 	.word	0x0000371d

00002130 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2130:	4770      	bx	lr
	...

00002134 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2134:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2136:	4b05      	ldr	r3, [pc, #20]	; (214c <system_init+0x18>)
    2138:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    213a:	4b05      	ldr	r3, [pc, #20]	; (2150 <system_init+0x1c>)
    213c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    213e:	4b05      	ldr	r3, [pc, #20]	; (2154 <system_init+0x20>)
    2140:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2142:	4b05      	ldr	r3, [pc, #20]	; (2158 <system_init+0x24>)
    2144:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2146:	4b05      	ldr	r3, [pc, #20]	; (215c <system_init+0x28>)
    2148:	4798      	blx	r3
}
    214a:	bd10      	pop	{r4, pc}
    214c:	00001b4d 	.word	0x00001b4d
    2150:	000003d1 	.word	0x000003d1
    2154:	00002131 	.word	0x00002131
    2158:	00002131 	.word	0x00002131
    215c:	00002131 	.word	0x00002131

00002160 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    2160:	b570      	push	{r4, r5, r6, lr}
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    2162:	0204      	lsls	r4, r0, #8
    2164:	4e03      	ldr	r6, [pc, #12]	; (2174 <_eeprom_emulator_nvm_erase_row+0x14>)
		error_code = nvm_erase_row(
    2166:	4d04      	ldr	r5, [pc, #16]	; (2178 <_eeprom_emulator_nvm_erase_row+0x18>)
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    2168:	6873      	ldr	r3, [r6, #4]
    216a:	1918      	adds	r0, r3, r4
		error_code = nvm_erase_row(
    216c:	47a8      	blx	r5
	} while (error_code == STATUS_BUSY);
    216e:	2805      	cmp	r0, #5
    2170:	d0fa      	beq.n	2168 <_eeprom_emulator_nvm_erase_row+0x8>
}
    2172:	bd70      	pop	{r4, r5, r6, pc}
    2174:	20000128 	.word	0x20000128
    2178:	00000695 	.word	0x00000695

0000217c <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    217c:	b5f0      	push	{r4, r5, r6, r7, lr}
    217e:	46de      	mov	lr, fp
    2180:	4657      	mov	r7, sl
    2182:	464e      	mov	r6, r9
    2184:	4645      	mov	r5, r8
    2186:	b5e0      	push	{r5, r6, r7, lr}
    2188:	b083      	sub	sp, #12
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    218a:	4b4d      	ldr	r3, [pc, #308]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    218c:	891b      	ldrh	r3, [r3, #8]
    218e:	2b00      	cmp	r3, #0
    2190:	d100      	bne.n	2194 <_eeprom_emulator_update_page_mapping+0x18>
    2192:	e08f      	b.n	22b4 <_eeprom_emulator_update_page_mapping+0x138>
    2194:	2500      	movs	r5, #0
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    2196:	4b4a      	ldr	r3, [pc, #296]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    2198:	469a      	mov	sl, r3
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    219a:	001f      	movs	r7, r3
    219c:	e027      	b.n	21ee <_eeprom_emulator_update_page_mapping+0x72>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    219e:	9801      	ldr	r0, [sp, #4]
    21a0:	4b48      	ldr	r3, [pc, #288]	; (22c4 <_eeprom_emulator_update_page_mapping+0x148>)
    21a2:	4798      	blx	r3
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    21a4:	3404      	adds	r4, #4
    21a6:	b2a4      	uxth	r4, r4
    21a8:	4b45      	ldr	r3, [pc, #276]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    21aa:	891b      	ldrh	r3, [r3, #8]
    21ac:	42a3      	cmp	r3, r4
    21ae:	d918      	bls.n	21e2 <_eeprom_emulator_update_page_mapping+0x66>
			if (j == EEPROM_MASTER_PAGE_NUMBER) {
    21b0:	3b01      	subs	r3, #1
    21b2:	429c      	cmp	r4, r3
    21b4:	d0f6      	beq.n	21a4 <_eeprom_emulator_update_page_mapping+0x28>
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    21b6:	687a      	ldr	r2, [r7, #4]
    21b8:	01a3      	lsls	r3, r4, #6
    21ba:	5cd3      	ldrb	r3, [r2, r3]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    21bc:	2bff      	cmp	r3, #255	; 0xff
    21be:	d0f1      	beq.n	21a4 <_eeprom_emulator_update_page_mapping+0x28>
			if(pre_logical_page == next_logical_page) {
    21c0:	429e      	cmp	r6, r3
    21c2:	d1ef      	bne.n	21a4 <_eeprom_emulator_update_page_mapping+0x28>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    21c4:	464b      	mov	r3, r9
    21c6:	5cd3      	ldrb	r3, [r2, r3]
	if((_eeprom_instance.flash[phy_page].header.logical_page
    21c8:	4641      	mov	r1, r8
    21ca:	5c51      	ldrb	r1, [r2, r1]
    21cc:	4299      	cmp	r1, r3
    21ce:	d0e6      	beq.n	219e <_eeprom_emulator_update_page_mapping+0x22>
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
    21d0:	4659      	mov	r1, fp
    21d2:	5c52      	ldrb	r2, [r2, r1]
    21d4:	429a      	cmp	r2, r3
    21d6:	d0e2      	beq.n	219e <_eeprom_emulator_update_page_mapping+0x22>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    21d8:	08a0      	lsrs	r0, r4, #2
    21da:	b2c0      	uxtb	r0, r0
    21dc:	4b39      	ldr	r3, [pc, #228]	; (22c4 <_eeprom_emulator_update_page_mapping+0x148>)
    21de:	4798      	blx	r3
    21e0:	e7e0      	b.n	21a4 <_eeprom_emulator_update_page_mapping+0x28>
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    21e2:	3504      	adds	r5, #4
    21e4:	b2ad      	uxth	r5, r5
    21e6:	4b36      	ldr	r3, [pc, #216]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    21e8:	891b      	ldrh	r3, [r3, #8]
    21ea:	429d      	cmp	r5, r3
    21ec:	d217      	bcs.n	221e <_eeprom_emulator_update_page_mapping+0xa2>
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    21ee:	01ab      	lsls	r3, r5, #6
    21f0:	4698      	mov	r8, r3
    21f2:	4653      	mov	r3, sl
    21f4:	685b      	ldr	r3, [r3, #4]
    21f6:	4642      	mov	r2, r8
    21f8:	5c9e      	ldrb	r6, [r3, r2]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    21fa:	2eff      	cmp	r6, #255	; 0xff
    21fc:	d0f1      	beq.n	21e2 <_eeprom_emulator_update_page_mapping+0x66>
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    21fe:	1d2c      	adds	r4, r5, #4
    2200:	b2a4      	uxth	r4, r4
    2202:	4b2f      	ldr	r3, [pc, #188]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    2204:	891b      	ldrh	r3, [r3, #8]
    2206:	429c      	cmp	r4, r3
    2208:	d209      	bcs.n	221e <_eeprom_emulator_update_page_mapping+0xa2>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    220a:	2280      	movs	r2, #128	; 0x80
    220c:	4442      	add	r2, r8
    220e:	4691      	mov	r9, r2
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    2210:	2240      	movs	r2, #64	; 0x40
    2212:	4442      	add	r2, r8
    2214:	4693      	mov	fp, r2
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    2216:	08aa      	lsrs	r2, r5, #2
    2218:	b2d2      	uxtb	r2, r2
    221a:	9201      	str	r2, [sp, #4]
    221c:	e7c8      	b.n	21b0 <_eeprom_emulator_update_page_mapping+0x34>
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    221e:	2b00      	cmp	r3, #0
    2220:	d043      	beq.n	22aa <_eeprom_emulator_update_page_mapping+0x12e>
		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
				(logical_page < _eeprom_instance.logical_pages)) {
    2222:	4a27      	ldr	r2, [pc, #156]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    2224:	7a97      	ldrb	r7, [r2, #10]
    2226:	6851      	ldr	r1, [r2, #4]
    2228:	2200      	movs	r2, #0
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    222a:	1e5e      	subs	r6, r3, #1
			_eeprom_instance.page_map[logical_page] = c;
    222c:	4d24      	ldr	r5, [pc, #144]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    222e:	e004      	b.n	223a <_eeprom_emulator_update_page_mapping+0xbe>
    2230:	3201      	adds	r2, #1
    2232:	3140      	adds	r1, #64	; 0x40
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    2234:	b290      	uxth	r0, r2
    2236:	4298      	cmp	r0, r3
    2238:	d20a      	bcs.n	2250 <_eeprom_emulator_update_page_mapping+0xd4>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    223a:	4296      	cmp	r6, r2
    223c:	d0f8      	beq.n	2230 <_eeprom_emulator_update_page_mapping+0xb4>
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    223e:	7808      	ldrb	r0, [r1, #0]
    2240:	b284      	uxth	r4, r0
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    2242:	2cff      	cmp	r4, #255	; 0xff
    2244:	d0f4      	beq.n	2230 <_eeprom_emulator_update_page_mapping+0xb4>
    2246:	42bc      	cmp	r4, r7
    2248:	d2f2      	bcs.n	2230 <_eeprom_emulator_update_page_mapping+0xb4>
			_eeprom_instance.page_map[logical_page] = c;
    224a:	1828      	adds	r0, r5, r0
    224c:	72c2      	strb	r2, [r0, #11]
    224e:	e7ef      	b.n	2230 <_eeprom_emulator_update_page_mapping+0xb4>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    2250:	203f      	movs	r0, #63	; 0x3f
    2252:	2287      	movs	r2, #135	; 0x87
    2254:	491a      	ldr	r1, [pc, #104]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    2256:	5488      	strb	r0, [r1, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    2258:	089d      	lsrs	r5, r3, #2
    225a:	d01f      	beq.n	229c <_eeprom_emulator_update_page_mapping+0x120>

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    225c:	684c      	ldr	r4, [r1, #4]
    225e:	2104      	movs	r1, #4
    2260:	2700      	movs	r7, #0
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    2262:	3b01      	subs	r3, #1
    2264:	e013      	b.n	228e <_eeprom_emulator_update_page_mapping+0x112>
    2266:	3201      	adds	r2, #1
    2268:	b292      	uxth	r2, r2
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    226a:	4291      	cmp	r1, r2
    226c:	d007      	beq.n	227e <_eeprom_emulator_update_page_mapping+0x102>
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    226e:	429a      	cmp	r2, r3
    2270:	d0f9      	beq.n	2266 <_eeprom_emulator_update_page_mapping+0xea>
			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    2272:	0190      	lsls	r0, r2, #6
    2274:	5d00      	ldrb	r0, [r0, r4]
    2276:	28ff      	cmp	r0, #255	; 0xff
    2278:	d0f5      	beq.n	2266 <_eeprom_emulator_update_page_mapping+0xea>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    227a:	2600      	movs	r6, #0
    227c:	e7f3      	b.n	2266 <_eeprom_emulator_update_page_mapping+0xea>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    227e:	2e00      	cmp	r6, #0
    2280:	d109      	bne.n	2296 <_eeprom_emulator_update_page_mapping+0x11a>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    2282:	3701      	adds	r7, #1
    2284:	b2bf      	uxth	r7, r7
    2286:	3104      	adds	r1, #4
    2288:	b289      	uxth	r1, r1
    228a:	42bd      	cmp	r5, r7
    228c:	d006      	beq.n	229c <_eeprom_emulator_update_page_mapping+0x120>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
    228e:	1f0a      	subs	r2, r1, #4
    2290:	b292      	uxth	r2, r2
    2292:	2601      	movs	r6, #1
    2294:	e7eb      	b.n	226e <_eeprom_emulator_update_page_mapping+0xf2>
			_eeprom_instance.spare_row = c;
    2296:	2387      	movs	r3, #135	; 0x87
    2298:	4a09      	ldr	r2, [pc, #36]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    229a:	54d7      	strb	r7, [r2, r3]
			break;
		}
	}
}
    229c:	b003      	add	sp, #12
    229e:	bc3c      	pop	{r2, r3, r4, r5}
    22a0:	4690      	mov	r8, r2
    22a2:	4699      	mov	r9, r3
    22a4:	46a2      	mov	sl, r4
    22a6:	46ab      	mov	fp, r5
    22a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    22aa:	213f      	movs	r1, #63	; 0x3f
    22ac:	2387      	movs	r3, #135	; 0x87
    22ae:	4a04      	ldr	r2, [pc, #16]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    22b0:	54d1      	strb	r1, [r2, r3]
    22b2:	e7f3      	b.n	229c <_eeprom_emulator_update_page_mapping+0x120>
    22b4:	213f      	movs	r1, #63	; 0x3f
    22b6:	2387      	movs	r3, #135	; 0x87
    22b8:	4a01      	ldr	r2, [pc, #4]	; (22c0 <_eeprom_emulator_update_page_mapping+0x144>)
    22ba:	54d1      	strb	r1, [r2, r3]
    22bc:	e7ee      	b.n	229c <_eeprom_emulator_update_page_mapping+0x120>
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	20000128 	.word	0x20000128
    22c4:	00002161 	.word	0x00002161

000022c8 <_eeprom_emulator_nvm_read_page>:
{
    22c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ca:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    22cc:	0184      	lsls	r4, r0, #6
    22ce:	4f05      	ldr	r7, [pc, #20]	; (22e4 <_eeprom_emulator_nvm_read_page+0x1c>)
		error_code = nvm_read_buffer(
    22d0:	4e05      	ldr	r6, [pc, #20]	; (22e8 <_eeprom_emulator_nvm_read_page+0x20>)
				(uint32_t)&_eeprom_instance.flash[physical_page],
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	1918      	adds	r0, r3, r4
		error_code = nvm_read_buffer(
    22d6:	2240      	movs	r2, #64	; 0x40
    22d8:	0029      	movs	r1, r5
    22da:	47b0      	blx	r6
	} while (error_code == STATUS_BUSY);
    22dc:	2805      	cmp	r0, #5
    22de:	d0f8      	beq.n	22d2 <_eeprom_emulator_nvm_read_page+0xa>
}
    22e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	20000128 	.word	0x20000128
    22e8:	00000629 	.word	0x00000629

000022ec <_eeprom_emulator_nvm_fill_cache>:
{
    22ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ee:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    22f0:	0184      	lsls	r4, r0, #6
    22f2:	4f05      	ldr	r7, [pc, #20]	; (2308 <_eeprom_emulator_nvm_fill_cache+0x1c>)
		error_code = nvm_write_buffer(
    22f4:	4e05      	ldr	r6, [pc, #20]	; (230c <_eeprom_emulator_nvm_fill_cache+0x20>)
				(uint32_t)&_eeprom_instance.flash[physical_page],
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	1918      	adds	r0, r3, r4
		error_code = nvm_write_buffer(
    22fa:	2240      	movs	r2, #64	; 0x40
    22fc:	0029      	movs	r1, r5
    22fe:	47b0      	blx	r6
	} while (error_code == STATUS_BUSY);
    2300:	2805      	cmp	r0, #5
    2302:	d0f8      	beq.n	22f6 <_eeprom_emulator_nvm_fill_cache+0xa>
}
    2304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	20000128 	.word	0x20000128
    230c:	00000581 	.word	0x00000581

00002310 <_eeprom_emulator_nvm_commit_cache>:
{
    2310:	b570      	push	{r4, r5, r6, lr}
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    2312:	0184      	lsls	r4, r0, #6
    2314:	4e04      	ldr	r6, [pc, #16]	; (2328 <_eeprom_emulator_nvm_commit_cache+0x18>)
		error_code = nvm_execute_command(
    2316:	4d05      	ldr	r5, [pc, #20]	; (232c <_eeprom_emulator_nvm_commit_cache+0x1c>)
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    2318:	6873      	ldr	r3, [r6, #4]
    231a:	1919      	adds	r1, r3, r4
		error_code = nvm_execute_command(
    231c:	2200      	movs	r2, #0
    231e:	2004      	movs	r0, #4
    2320:	47a8      	blx	r5
	} while (error_code == STATUS_BUSY);
    2322:	2805      	cmp	r0, #5
    2324:	d0f8      	beq.n	2318 <_eeprom_emulator_nvm_commit_cache+0x8>
}
    2326:	bd70      	pop	{r4, r5, r6, pc}
    2328:	20000128 	.word	0x20000128
    232c:	000004e1 	.word	0x000004e1

00002330 <eeprom_emulator_get_parameters>:
 * \retval STATUS_ERR_NOT_INITIALIZED   If the EEPROM Emulator is not initialized
 */
enum status_code eeprom_emulator_get_parameters(
	struct eeprom_emulator_parameters *const parameters)
{
	if (_eeprom_instance.initialized == false) {
    2330:	4b06      	ldr	r3, [pc, #24]	; (234c <eeprom_emulator_get_parameters+0x1c>)
    2332:	781a      	ldrb	r2, [r3, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    2334:	231f      	movs	r3, #31
	if (_eeprom_instance.initialized == false) {
    2336:	2a00      	cmp	r2, #0
    2338:	d101      	bne.n	233e <eeprom_emulator_get_parameters+0xe>

	parameters->page_size              = EEPROM_PAGE_SIZE;
	parameters->eeprom_number_of_pages = _eeprom_instance.logical_pages;

	return STATUS_OK;
}
    233a:	0018      	movs	r0, r3
    233c:	4770      	bx	lr
	parameters->page_size              = EEPROM_PAGE_SIZE;
    233e:	331d      	adds	r3, #29
    2340:	7003      	strb	r3, [r0, #0]
	parameters->eeprom_number_of_pages = _eeprom_instance.logical_pages;
    2342:	4b02      	ldr	r3, [pc, #8]	; (234c <eeprom_emulator_get_parameters+0x1c>)
    2344:	7a9b      	ldrb	r3, [r3, #10]
    2346:	8043      	strh	r3, [r0, #2]
	return STATUS_OK;
    2348:	2300      	movs	r3, #0
    234a:	e7f6      	b.n	233a <eeprom_emulator_get_parameters+0xa>
    234c:	20000128 	.word	0x20000128

00002350 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    2350:	b510      	push	{r4, lr}
    2352:	b098      	sub	sp, #96	; 0x60
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2354:	ab16      	add	r3, sp, #88	; 0x58
    2356:	2100      	movs	r1, #0
    2358:	7019      	strb	r1, [r3, #0]
	config->manual_page_write = true;
    235a:	2201      	movs	r2, #1
    235c:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    235e:	4a2e      	ldr	r2, [pc, #184]	; (2418 <eeprom_emulator_init+0xc8>)
    2360:	6852      	ldr	r2, [r2, #4]
    2362:	06d2      	lsls	r2, r2, #27
    2364:	0f12      	lsrs	r2, r2, #28
    2366:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    2368:	70d9      	strb	r1, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    236a:	7119      	strb	r1, [r3, #4]
	nvm_get_config_defaults(&config);
	config.manual_page_write = true;

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    236c:	4c2b      	ldr	r4, [pc, #172]	; (241c <eeprom_emulator_init+0xcc>)
    236e:	a816      	add	r0, sp, #88	; 0x58
    2370:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
    2372:	2805      	cmp	r0, #5
    2374:	d0fb      	beq.n	236e <eeprom_emulator_init+0x1e>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    2376:	a813      	add	r0, sp, #76	; 0x4c
    2378:	4b29      	ldr	r3, [pc, #164]	; (2420 <eeprom_emulator_init+0xd0>)
    237a:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    237c:	9b14      	ldr	r3, [sp, #80]	; 0x50
		return STATUS_ERR_NO_MEMORY;
    237e:	2016      	movs	r0, #22
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    2380:	2b0b      	cmp	r3, #11
    2382:	d801      	bhi.n	2388 <eeprom_emulator_init+0x38>

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;

	return error_code;
}
    2384:	b018      	add	sp, #96	; 0x60
    2386:	bd10      	pop	{r4, pc}
	_eeprom_instance.physical_pages =
    2388:	4c26      	ldr	r4, [pc, #152]	; (2424 <eeprom_emulator_init+0xd4>)
    238a:	8123      	strh	r3, [r4, #8]
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    238c:	001a      	movs	r2, r3
    238e:	3a08      	subs	r2, #8
    2390:	0852      	lsrs	r2, r2, #1
	_eeprom_instance.logical_pages  =
    2392:	72a2      	strb	r2, [r4, #10]
			(void*)(FLASH_SIZE -
    2394:	041b      	lsls	r3, r3, #16
    2396:	0a9b      	lsrs	r3, r3, #10
    2398:	425b      	negs	r3, r3
    239a:	2280      	movs	r2, #128	; 0x80
    239c:	02d2      	lsls	r2, r2, #11
    239e:	4694      	mov	ip, r2
    23a0:	4463      	add	r3, ip
	_eeprom_instance.flash =
    23a2:	6063      	str	r3, [r4, #4]
	_eeprom_instance.cache_active = false;
    23a4:	2200      	movs	r2, #0
    23a6:	23c8      	movs	r3, #200	; 0xc8
    23a8:	54e2      	strb	r2, [r4, r3]
	_eeprom_emulator_update_page_mapping();
    23aa:	4b1f      	ldr	r3, [pc, #124]	; (2428 <eeprom_emulator_init+0xd8>)
    23ac:	4798      	blx	r3
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    23ae:	2387      	movs	r3, #135	; 0x87
    23b0:	5ce3      	ldrb	r3, [r4, r3]
		return STATUS_ERR_BAD_FORMAT;
    23b2:	201a      	movs	r0, #26
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    23b4:	2b3f      	cmp	r3, #63	; 0x3f
    23b6:	d0e5      	beq.n	2384 <eeprom_emulator_init+0x34>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    23b8:	466a      	mov	r2, sp
    23ba:	4b1c      	ldr	r3, [pc, #112]	; (242c <eeprom_emulator_init+0xdc>)
    23bc:	cb13      	ldmia	r3!, {r0, r1, r4}
    23be:	c213      	stmia	r2!, {r0, r1, r4}
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    23c0:	4b18      	ldr	r3, [pc, #96]	; (2424 <eeprom_emulator_init+0xd4>)
    23c2:	8918      	ldrh	r0, [r3, #8]
    23c4:	3801      	subs	r0, #1
    23c6:	b280      	uxth	r0, r0
    23c8:	0011      	movs	r1, r2
    23ca:	4b19      	ldr	r3, [pc, #100]	; (2430 <eeprom_emulator_init+0xe0>)
    23cc:	4798      	blx	r3
		if (master_page.magic_key[c] != magic_key[c]) {
    23ce:	9b03      	ldr	r3, [sp, #12]
    23d0:	9a00      	ldr	r2, [sp, #0]
    23d2:	4293      	cmp	r3, r2
    23d4:	d119      	bne.n	240a <eeprom_emulator_init+0xba>
    23d6:	9b04      	ldr	r3, [sp, #16]
    23d8:	9a01      	ldr	r2, [sp, #4]
    23da:	4293      	cmp	r3, r2
    23dc:	d117      	bne.n	240e <eeprom_emulator_init+0xbe>
    23de:	9b05      	ldr	r3, [sp, #20]
    23e0:	9a02      	ldr	r2, [sp, #8]
    23e2:	4293      	cmp	r3, r2
    23e4:	d115      	bne.n	2412 <eeprom_emulator_init+0xc2>
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    23e6:	ab03      	add	r3, sp, #12
    23e8:	7bdb      	ldrb	r3, [r3, #15]
		return STATUS_ERR_IO;
    23ea:	2010      	movs	r0, #16
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    23ec:	2b01      	cmp	r3, #1
    23ee:	d1c9      	bne.n	2384 <eeprom_emulator_init+0x34>
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    23f0:	ab03      	add	r3, sp, #12
    23f2:	7b1b      	ldrb	r3, [r3, #12]
    23f4:	2b01      	cmp	r3, #1
    23f6:	d1c5      	bne.n	2384 <eeprom_emulator_init+0x34>
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    23f8:	ab03      	add	r3, sp, #12
    23fa:	7b5b      	ldrb	r3, [r3, #13]
    23fc:	2b00      	cmp	r3, #0
    23fe:	d1c1      	bne.n	2384 <eeprom_emulator_init+0x34>
	_eeprom_instance.initialized = true;
    2400:	2201      	movs	r2, #1
    2402:	4b08      	ldr	r3, [pc, #32]	; (2424 <eeprom_emulator_init+0xd4>)
    2404:	701a      	strb	r2, [r3, #0]
	return error_code;
    2406:	2000      	movs	r0, #0
    2408:	e7bc      	b.n	2384 <eeprom_emulator_init+0x34>
			return STATUS_ERR_BAD_FORMAT;
    240a:	201a      	movs	r0, #26
    240c:	e7ba      	b.n	2384 <eeprom_emulator_init+0x34>
    240e:	201a      	movs	r0, #26
    2410:	e7b8      	b.n	2384 <eeprom_emulator_init+0x34>
    2412:	201a      	movs	r0, #26
    2414:	e7b6      	b.n	2384 <eeprom_emulator_init+0x34>
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	41004000 	.word	0x41004000
    241c:	00000409 	.word	0x00000409
    2420:	000006f1 	.word	0x000006f1
    2424:	20000128 	.word	0x20000128
    2428:	0000217d 	.word	0x0000217d
    242c:	00004804 	.word	0x00004804
    2430:	000022c9 	.word	0x000022c9

00002434 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    2434:	b570      	push	{r4, r5, r6, lr}
    2436:	b094      	sub	sp, #80	; 0x50
	_eeprom_instance.spare_row = 0;
    2438:	4c2f      	ldr	r4, [pc, #188]	; (24f8 <eeprom_emulator_erase_memory+0xc4>)
    243a:	2200      	movs	r2, #0
    243c:	2387      	movs	r3, #135	; 0x87
    243e:	54e2      	strb	r2, [r4, r3]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    2440:	2000      	movs	r0, #0
    2442:	4b2e      	ldr	r3, [pc, #184]	; (24fc <eeprom_emulator_erase_memory+0xc8>)
    2444:	4798      	blx	r3
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    2446:	8925      	ldrh	r5, [r4, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    2448:	2d04      	cmp	r5, #4
    244a:	d925      	bls.n	2498 <eeprom_emulator_erase_memory+0x64>
    244c:	2600      	movs	r6, #0
    244e:	2404      	movs	r4, #4
    2450:	e019      	b.n	2486 <eeprom_emulator_erase_memory+0x52>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    2452:	08a0      	lsrs	r0, r4, #2
    2454:	b2c0      	uxtb	r0, r0
    2456:	4b29      	ldr	r3, [pc, #164]	; (24fc <eeprom_emulator_erase_memory+0xc8>)
    2458:	4798      	blx	r3
			memset(&data, 0xFF, sizeof(data));
    245a:	ad04      	add	r5, sp, #16
    245c:	2240      	movs	r2, #64	; 0x40
    245e:	21ff      	movs	r1, #255	; 0xff
    2460:	0028      	movs	r0, r5
    2462:	4b27      	ldr	r3, [pc, #156]	; (2500 <eeprom_emulator_erase_memory+0xcc>)
    2464:	4798      	blx	r3
			data.header.logical_page = logical_page;
    2466:	702e      	strb	r6, [r5, #0]
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    2468:	0029      	movs	r1, r5
    246a:	0020      	movs	r0, r4
    246c:	4b25      	ldr	r3, [pc, #148]	; (2504 <eeprom_emulator_erase_memory+0xd0>)
    246e:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
    2470:	0020      	movs	r0, r4
    2472:	4b25      	ldr	r3, [pc, #148]	; (2508 <eeprom_emulator_erase_memory+0xd4>)
    2474:	4798      	blx	r3
			logical_page++;
    2476:	3601      	adds	r6, #1
    2478:	b2b6      	uxth	r6, r6
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    247a:	3401      	adds	r4, #1
    247c:	b2a4      	uxth	r4, r4
    247e:	4b1e      	ldr	r3, [pc, #120]	; (24f8 <eeprom_emulator_erase_memory+0xc4>)
    2480:	891d      	ldrh	r5, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    2482:	42a5      	cmp	r5, r4
    2484:	d908      	bls.n	2498 <eeprom_emulator_erase_memory+0x64>
		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    2486:	3d01      	subs	r5, #1
    2488:	42ac      	cmp	r4, r5
    248a:	d0f6      	beq.n	247a <eeprom_emulator_erase_memory+0x46>
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    248c:	2303      	movs	r3, #3
    248e:	4023      	ands	r3, r4
    2490:	d0df      	beq.n	2452 <eeprom_emulator_erase_memory+0x1e>
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    2492:	2b01      	cmp	r3, #1
    2494:	d8f1      	bhi.n	247a <eeprom_emulator_erase_memory+0x46>
    2496:	e7e0      	b.n	245a <eeprom_emulator_erase_memory+0x26>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    2498:	ae01      	add	r6, sp, #4
    249a:	4b1c      	ldr	r3, [pc, #112]	; (250c <eeprom_emulator_erase_memory+0xd8>)
    249c:	0032      	movs	r2, r6
    249e:	cb13      	ldmia	r3!, {r0, r1, r4}
    24a0:	c213      	stmia	r2!, {r0, r1, r4}
	memset(&master_page, 0xFF, sizeof(master_page));
    24a2:	ac04      	add	r4, sp, #16
    24a4:	2240      	movs	r2, #64	; 0x40
    24a6:	21ff      	movs	r1, #255	; 0xff
    24a8:	0020      	movs	r0, r4
    24aa:	4b15      	ldr	r3, [pc, #84]	; (2500 <eeprom_emulator_erase_memory+0xcc>)
    24ac:	4798      	blx	r3
		master_page.magic_key[c] = magic_key[c];
    24ae:	9b01      	ldr	r3, [sp, #4]
    24b0:	9304      	str	r3, [sp, #16]
    24b2:	6873      	ldr	r3, [r6, #4]
    24b4:	6063      	str	r3, [r4, #4]
    24b6:	68b3      	ldr	r3, [r6, #8]
    24b8:	60a3      	str	r3, [r4, #8]
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    24ba:	2301      	movs	r3, #1
    24bc:	73e3      	strb	r3, [r4, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    24be:	7323      	strb	r3, [r4, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    24c0:	2300      	movs	r3, #0
    24c2:	7363      	strb	r3, [r4, #13]
	master_page.revision      = EEPROM_REVISION;
    24c4:	73a3      	strb	r3, [r4, #14]
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    24c6:	3d01      	subs	r5, #1
    24c8:	17eb      	asrs	r3, r5, #31
    24ca:	2003      	movs	r0, #3
    24cc:	4018      	ands	r0, r3
    24ce:	1945      	adds	r5, r0, r5
    24d0:	10ad      	asrs	r5, r5, #2
	_eeprom_emulator_nvm_erase_row(
    24d2:	b2e8      	uxtb	r0, r5
    24d4:	4b09      	ldr	r3, [pc, #36]	; (24fc <eeprom_emulator_erase_memory+0xc8>)
    24d6:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    24d8:	4d07      	ldr	r5, [pc, #28]	; (24f8 <eeprom_emulator_erase_memory+0xc4>)
    24da:	8928      	ldrh	r0, [r5, #8]
    24dc:	3801      	subs	r0, #1
    24de:	b280      	uxth	r0, r0
    24e0:	0021      	movs	r1, r4
    24e2:	4b08      	ldr	r3, [pc, #32]	; (2504 <eeprom_emulator_erase_memory+0xd0>)
    24e4:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    24e6:	8928      	ldrh	r0, [r5, #8]
    24e8:	3801      	subs	r0, #1
    24ea:	b280      	uxth	r0, r0
    24ec:	4b06      	ldr	r3, [pc, #24]	; (2508 <eeprom_emulator_erase_memory+0xd4>)
    24ee:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    24f0:	4b07      	ldr	r3, [pc, #28]	; (2510 <eeprom_emulator_erase_memory+0xdc>)
    24f2:	4798      	blx	r3
}
    24f4:	b014      	add	sp, #80	; 0x50
    24f6:	bd70      	pop	{r4, r5, r6, pc}
    24f8:	20000128 	.word	0x20000128
    24fc:	00002161 	.word	0x00002161
    2500:	0000315f 	.word	0x0000315f
    2504:	000022ed 	.word	0x000022ed
    2508:	00002311 	.word	0x00002311
    250c:	00004804 	.word	0x00004804
    2510:	0000217d 	.word	0x0000217d

00002514 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    2514:	b510      	push	{r4, lr}
    2516:	b090      	sub	sp, #64	; 0x40
    2518:	000c      	movs	r4, r1
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    251a:	4b15      	ldr	r3, [pc, #84]	; (2570 <eeprom_emulator_read_page+0x5c>)
    251c:	781a      	ldrb	r2, [r3, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    251e:	231f      	movs	r3, #31
	if (_eeprom_instance.initialized == false) {
    2520:	2a00      	cmp	r2, #0
    2522:	d102      	bne.n	252a <eeprom_emulator_read_page+0x16>
		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
	}

	return STATUS_OK;
}
    2524:	0018      	movs	r0, r3
    2526:	b010      	add	sp, #64	; 0x40
    2528:	bd10      	pop	{r4, pc}
	if (logical_page >= _eeprom_instance.logical_pages) {
    252a:	4b11      	ldr	r3, [pc, #68]	; (2570 <eeprom_emulator_read_page+0x5c>)
    252c:	7a9a      	ldrb	r2, [r3, #10]
		return STATUS_ERR_BAD_ADDRESS;
    252e:	2318      	movs	r3, #24
	if (logical_page >= _eeprom_instance.logical_pages) {
    2530:	4282      	cmp	r2, r0
    2532:	d9f7      	bls.n	2524 <eeprom_emulator_read_page+0x10>
	if ((_eeprom_instance.cache_active == true) &&
    2534:	33b0      	adds	r3, #176	; 0xb0
    2536:	4a0e      	ldr	r2, [pc, #56]	; (2570 <eeprom_emulator_read_page+0x5c>)
    2538:	5cd3      	ldrb	r3, [r2, r3]
    253a:	2b00      	cmp	r3, #0
    253c:	d003      	beq.n	2546 <eeprom_emulator_read_page+0x32>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    253e:	2388      	movs	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    2540:	5cd3      	ldrb	r3, [r2, r3]
    2542:	4283      	cmp	r3, r0
    2544:	d00c      	beq.n	2560 <eeprom_emulator_read_page+0x4c>
				_eeprom_instance.page_map[logical_page], &temp);
    2546:	4b0a      	ldr	r3, [pc, #40]	; (2570 <eeprom_emulator_read_page+0x5c>)
    2548:	1818      	adds	r0, r3, r0
		_eeprom_emulator_nvm_read_page(
    254a:	7ac0      	ldrb	r0, [r0, #11]
    254c:	4669      	mov	r1, sp
    254e:	4b09      	ldr	r3, [pc, #36]	; (2574 <eeprom_emulator_read_page+0x60>)
    2550:	4798      	blx	r3
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    2552:	223c      	movs	r2, #60	; 0x3c
    2554:	a901      	add	r1, sp, #4
    2556:	0020      	movs	r0, r4
    2558:	4b07      	ldr	r3, [pc, #28]	; (2578 <eeprom_emulator_read_page+0x64>)
    255a:	4798      	blx	r3
	return STATUS_OK;
    255c:	2300      	movs	r3, #0
    255e:	e7e1      	b.n	2524 <eeprom_emulator_read_page+0x10>
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    2560:	223c      	movs	r2, #60	; 0x3c
    2562:	4903      	ldr	r1, [pc, #12]	; (2570 <eeprom_emulator_read_page+0x5c>)
    2564:	318c      	adds	r1, #140	; 0x8c
    2566:	0020      	movs	r0, r4
    2568:	4b03      	ldr	r3, [pc, #12]	; (2578 <eeprom_emulator_read_page+0x64>)
    256a:	4798      	blx	r3
	return STATUS_OK;
    256c:	2300      	movs	r3, #0
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    256e:	e7d9      	b.n	2524 <eeprom_emulator_read_page+0x10>
    2570:	20000128 	.word	0x20000128
    2574:	000022c9 	.word	0x000022c9
    2578:	0000314d 	.word	0x0000314d

0000257c <eeprom_emulator_read_buffer>:
 */
enum status_code eeprom_emulator_read_buffer(
		const uint16_t offset,
		uint8_t *const data,
		const uint16_t length)
{
    257c:	b5f0      	push	{r4, r5, r6, r7, lr}
    257e:	46de      	mov	lr, fp
    2580:	4657      	mov	r7, sl
    2582:	464e      	mov	r6, r9
    2584:	4645      	mov	r5, r8
    2586:	b5e0      	push	{r5, r6, r7, lr}
    2588:	b093      	sub	sp, #76	; 0x4c
    258a:	0005      	movs	r5, r0
    258c:	4689      	mov	r9, r1
    258e:	0017      	movs	r7, r2
	enum status_code error_code;
	uint8_t buffer[EEPROM_PAGE_SIZE];
	uint8_t logical_page = offset / EEPROM_PAGE_SIZE;
    2590:	213c      	movs	r1, #60	; 0x3c
    2592:	4b23      	ldr	r3, [pc, #140]	; (2620 <eeprom_emulator_read_buffer+0xa4>)
    2594:	4798      	blx	r3
    2596:	b2c3      	uxtb	r3, r0
    2598:	9300      	str	r3, [sp, #0]
	uint16_t c = offset;

	/** Perform the initial page read  */
	error_code = eeprom_emulator_read_page(logical_page, buffer);
    259a:	a903      	add	r1, sp, #12
    259c:	0018      	movs	r0, r3
    259e:	4b21      	ldr	r3, [pc, #132]	; (2624 <eeprom_emulator_read_buffer+0xa8>)
    25a0:	4798      	blx	r3
    25a2:	9001      	str	r0, [sp, #4]
	if (error_code != STATUS_OK) {
    25a4:	2800      	cmp	r0, #0
    25a6:	d132      	bne.n	260e <eeprom_emulator_read_buffer+0x92>
		return error_code;
	}

	/* To avoid entering into the initial if in the loop the first time */
	if ((offset % EEPROM_PAGE_SIZE) == 0) {
    25a8:	213c      	movs	r1, #60	; 0x3c
    25aa:	0028      	movs	r0, r5
    25ac:	4b1e      	ldr	r3, [pc, #120]	; (2628 <eeprom_emulator_read_buffer+0xac>)
    25ae:	4798      	blx	r3
    25b0:	b289      	uxth	r1, r1
	uint16_t c = offset;
    25b2:	002c      	movs	r4, r5
	if ((offset % EEPROM_PAGE_SIZE) == 0) {
    25b4:	2900      	cmp	r1, #0
    25b6:	d105      	bne.n	25c4 <eeprom_emulator_read_buffer+0x48>
		data[0] = buffer[0];
    25b8:	ab03      	add	r3, sp, #12
    25ba:	781b      	ldrb	r3, [r3, #0]
    25bc:	464a      	mov	r2, r9
    25be:	7013      	strb	r3, [r2, #0]
		c=c+1;
    25c0:	1c6c      	adds	r4, r5, #1
    25c2:	b2a4      	uxth	r4, r4
	}

	/* Read in the specified data from the emulated EEPROM memory space */
	for (; c < (length + offset); c++) {
    25c4:	0026      	movs	r6, r4
    25c6:	46ab      	mov	fp, r5
    25c8:	46b8      	mov	r8, r7
    25ca:	44a8      	add	r8, r5
    25cc:	4544      	cmp	r4, r8
    25ce:	da1e      	bge.n	260e <eeprom_emulator_read_buffer+0x92>
		/* Check if we have read up to a new EEPROM page boundary */
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    25d0:	4b15      	ldr	r3, [pc, #84]	; (2628 <eeprom_emulator_read_buffer+0xac>)
    25d2:	469a      	mov	sl, r3
			/* Increment the page number we are looking at */
			logical_page++;

			/* Read the next page from non-volatile memory into the temporary
			 * buffer */
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    25d4:	af03      	add	r7, sp, #12
    25d6:	e009      	b.n	25ec <eeprom_emulator_read_buffer+0x70>
			}
		}

		/* Copy the next byte of data from the temporary buffer to the user's
		 * buffer */
		data[c - offset] = buffer[c % EEPROM_PAGE_SIZE];
    25d8:	465b      	mov	r3, fp
    25da:	1af6      	subs	r6, r6, r3
    25dc:	5d7b      	ldrb	r3, [r7, r5]
    25de:	464a      	mov	r2, r9
    25e0:	5593      	strb	r3, [r2, r6]
	for (; c < (length + offset); c++) {
    25e2:	3401      	adds	r4, #1
    25e4:	b2a4      	uxth	r4, r4
    25e6:	0026      	movs	r6, r4
    25e8:	4544      	cmp	r4, r8
    25ea:	da10      	bge.n	260e <eeprom_emulator_read_buffer+0x92>
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    25ec:	213c      	movs	r1, #60	; 0x3c
    25ee:	0020      	movs	r0, r4
    25f0:	47d0      	blx	sl
    25f2:	b28d      	uxth	r5, r1
    25f4:	2d00      	cmp	r5, #0
    25f6:	d1ef      	bne.n	25d8 <eeprom_emulator_read_buffer+0x5c>
			logical_page++;
    25f8:	9b00      	ldr	r3, [sp, #0]
    25fa:	3301      	adds	r3, #1
    25fc:	b2db      	uxtb	r3, r3
    25fe:	9300      	str	r3, [sp, #0]
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    2600:	0039      	movs	r1, r7
    2602:	0018      	movs	r0, r3
    2604:	4b07      	ldr	r3, [pc, #28]	; (2624 <eeprom_emulator_read_buffer+0xa8>)
    2606:	4798      	blx	r3
			if (error_code != STATUS_OK) {
    2608:	2800      	cmp	r0, #0
    260a:	d0e5      	beq.n	25d8 <eeprom_emulator_read_buffer+0x5c>
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    260c:	9001      	str	r0, [sp, #4]
	}

	return error_code;
}
    260e:	9801      	ldr	r0, [sp, #4]
    2610:	b013      	add	sp, #76	; 0x4c
    2612:	bc3c      	pop	{r2, r3, r4, r5}
    2614:	4690      	mov	r8, r2
    2616:	4699      	mov	r9, r3
    2618:	46a2      	mov	sl, r4
    261a:	46ab      	mov	fp, r5
    261c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	00002f99 	.word	0x00002f99
    2624:	00002515 	.word	0x00002515
    2628:	000030a5 	.word	0x000030a5

0000262c <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
    262c:	b510      	push	{r4, lr}
	enum status_code error_code = STATUS_OK;

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    262e:	23c8      	movs	r3, #200	; 0xc8
    2630:	4a08      	ldr	r2, [pc, #32]	; (2654 <eeprom_emulator_commit_page_buffer+0x28>)
    2632:	5cd3      	ldrb	r3, [r2, r3]
    2634:	2b00      	cmp	r3, #0
    2636:	d101      	bne.n	263c <eeprom_emulator_commit_page_buffer+0x10>

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;

	return error_code;
}
    2638:	2000      	movs	r0, #0
    263a:	bd10      	pop	{r4, pc}
			_eeprom_instance.page_map[cached_logical_page]);
    263c:	0014      	movs	r4, r2
	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    263e:	2388      	movs	r3, #136	; 0x88
			_eeprom_instance.page_map[cached_logical_page]);
    2640:	5cd3      	ldrb	r3, [r2, r3]
    2642:	18d3      	adds	r3, r2, r3
	_eeprom_emulator_nvm_commit_cache(
    2644:	7ad8      	ldrb	r0, [r3, #11]
    2646:	4b04      	ldr	r3, [pc, #16]	; (2658 <eeprom_emulator_commit_page_buffer+0x2c>)
    2648:	4798      	blx	r3
	_eeprom_instance.cache_active = false;
    264a:	2200      	movs	r2, #0
    264c:	23c8      	movs	r3, #200	; 0xc8
    264e:	54e2      	strb	r2, [r4, r3]
	return error_code;
    2650:	e7f2      	b.n	2638 <eeprom_emulator_commit_page_buffer+0xc>
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	20000128 	.word	0x20000128
    2658:	00002311 	.word	0x00002311

0000265c <eeprom_emulator_write_page>:
{
    265c:	b5f0      	push	{r4, r5, r6, r7, lr}
    265e:	46de      	mov	lr, fp
    2660:	4657      	mov	r7, sl
    2662:	464e      	mov	r6, r9
    2664:	4645      	mov	r5, r8
    2666:	b5e0      	push	{r5, r6, r7, lr}
    2668:	b087      	sub	sp, #28
    266a:	0004      	movs	r4, r0
    266c:	9100      	str	r1, [sp, #0]
	if (_eeprom_instance.initialized == false) {
    266e:	4b5a      	ldr	r3, [pc, #360]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    2670:	781b      	ldrb	r3, [r3, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    2672:	201f      	movs	r0, #31
	if (_eeprom_instance.initialized == false) {
    2674:	2b00      	cmp	r3, #0
    2676:	d106      	bne.n	2686 <eeprom_emulator_write_page+0x2a>
}
    2678:	b007      	add	sp, #28
    267a:	bc3c      	pop	{r2, r3, r4, r5}
    267c:	4690      	mov	r8, r2
    267e:	4699      	mov	r9, r3
    2680:	46a2      	mov	sl, r4
    2682:	46ab      	mov	fp, r5
    2684:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (logical_page >= _eeprom_instance.logical_pages) {
    2686:	4b54      	ldr	r3, [pc, #336]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    2688:	7a9b      	ldrb	r3, [r3, #10]
		return STATUS_ERR_BAD_ADDRESS;
    268a:	3807      	subs	r0, #7
	if (logical_page >= _eeprom_instance.logical_pages) {
    268c:	42a3      	cmp	r3, r4
    268e:	d9f3      	bls.n	2678 <eeprom_emulator_write_page+0x1c>
	if ((_eeprom_instance.cache_active == true) &&
    2690:	23c8      	movs	r3, #200	; 0xc8
    2692:	4a51      	ldr	r2, [pc, #324]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    2694:	5cd3      	ldrb	r3, [r2, r3]
    2696:	2b00      	cmp	r3, #0
    2698:	d005      	beq.n	26a6 <eeprom_emulator_write_page+0x4a>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    269a:	2388      	movs	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    269c:	5cd3      	ldrb	r3, [r2, r3]
    269e:	42a3      	cmp	r3, r4
    26a0:	d001      	beq.n	26a6 <eeprom_emulator_write_page+0x4a>
		eeprom_emulator_commit_page_buffer();
    26a2:	4b4e      	ldr	r3, [pc, #312]	; (27dc <eeprom_emulator_write_page+0x180>)
    26a4:	4798      	blx	r3
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    26a6:	4b4c      	ldr	r3, [pc, #304]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    26a8:	191b      	adds	r3, r3, r4
    26aa:	7ade      	ldrb	r6, [r3, #11]
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    26ac:	2303      	movs	r3, #3
    26ae:	0031      	movs	r1, r6
    26b0:	4399      	bics	r1, r3
		if (_eeprom_instance.flash[page].header.logical_page ==
    26b2:	4b49      	ldr	r3, [pc, #292]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    26b4:	6858      	ldr	r0, [r3, #4]
    26b6:	01b3      	lsls	r3, r6, #6
    26b8:	5c1b      	ldrb	r3, [r3, r0]
    26ba:	2bff      	cmp	r3, #255	; 0xff
    26bc:	d047      	beq.n	274e <eeprom_emulator_write_page+0xf2>
    26be:	1c75      	adds	r5, r6, #1
    26c0:	b2ed      	uxtb	r5, r5
    26c2:	3104      	adds	r1, #4
    26c4:	b2c9      	uxtb	r1, r1
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    26c6:	42a9      	cmp	r1, r5
    26c8:	d057      	beq.n	277a <eeprom_emulator_write_page+0x11e>
    26ca:	1c6b      	adds	r3, r5, #1
    26cc:	b2db      	uxtb	r3, r3
		if (_eeprom_instance.flash[page].header.logical_page ==
    26ce:	01aa      	lsls	r2, r5, #6
    26d0:	5c12      	ldrb	r2, [r2, r0]
    26d2:	2aff      	cmp	r2, #255	; 0xff
    26d4:	d03c      	beq.n	2750 <eeprom_emulator_write_page+0xf4>
    26d6:	001d      	movs	r5, r3
    26d8:	e7f5      	b.n	26c6 <eeprom_emulator_write_page+0x6a>
				page_trans[c].physical_page =
    26da:	aa05      	add	r2, sp, #20
    26dc:	18d2      	adds	r2, r2, r3
    26de:	7056      	strb	r6, [r2, #1]
    26e0:	e069      	b.n	27b6 <eeprom_emulator_write_page+0x15a>
    26e2:	af05      	add	r7, sp, #20
    26e4:	18ff      	adds	r7, r7, r3
    26e6:	707d      	strb	r5, [r7, #1]
    26e8:	e063      	b.n	27b2 <eeprom_emulator_write_page+0x156>
			_eeprom_emulator_nvm_read_page(
    26ea:	7870      	ldrb	r0, [r6, #1]
    26ec:	9902      	ldr	r1, [sp, #8]
    26ee:	4b3c      	ldr	r3, [pc, #240]	; (27e0 <eeprom_emulator_write_page+0x184>)
    26f0:	4798      	blx	r3
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    26f2:	4c39      	ldr	r4, [pc, #228]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    26f4:	0021      	movs	r1, r4
    26f6:	3188      	adds	r1, #136	; 0x88
    26f8:	b2a8      	uxth	r0, r5
    26fa:	4b3a      	ldr	r3, [pc, #232]	; (27e4 <eeprom_emulator_write_page+0x188>)
    26fc:	4798      	blx	r3
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    26fe:	464b      	mov	r3, r9
    2700:	781b      	ldrb	r3, [r3, #0]
    2702:	18e3      	adds	r3, r4, r3
    2704:	72dd      	strb	r5, [r3, #11]
		_eeprom_instance.cache_active = true;
    2706:	2201      	movs	r2, #1
    2708:	23c8      	movs	r3, #200	; 0xc8
    270a:	54e2      	strb	r2, [r4, r3]
    270c:	3701      	adds	r7, #1
    270e:	3602      	adds	r6, #2
	for (uint8_t c = 0; c < 2; c++) {
    2710:	2f02      	cmp	r7, #2
    2712:	d013      	beq.n	273c <eeprom_emulator_write_page+0xe0>
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    2714:	2387      	movs	r3, #135	; 0x87
    2716:	465a      	mov	r2, fp
    2718:	5cd5      	ldrb	r5, [r2, r3]
    271a:	00ad      	lsls	r5, r5, #2
    271c:	19ed      	adds	r5, r5, r7
		eeprom_emulator_commit_page_buffer();
    271e:	47d0      	blx	sl
    2720:	46b1      	mov	r9, r6
		if (logical_page == page_trans[c].logical_page) {
    2722:	7833      	ldrb	r3, [r6, #0]
    2724:	9901      	ldr	r1, [sp, #4]
    2726:	428b      	cmp	r3, r1
    2728:	d1df      	bne.n	26ea <eeprom_emulator_write_page+0x8e>
			_eeprom_instance.cache.header.logical_page = logical_page;
    272a:	2388      	movs	r3, #136	; 0x88
    272c:	4a2a      	ldr	r2, [pc, #168]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    272e:	54d1      	strb	r1, [r2, r3]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    2730:	223c      	movs	r2, #60	; 0x3c
    2732:	9900      	ldr	r1, [sp, #0]
    2734:	9803      	ldr	r0, [sp, #12]
    2736:	4b2c      	ldr	r3, [pc, #176]	; (27e8 <eeprom_emulator_write_page+0x18c>)
    2738:	4798      	blx	r3
    273a:	e7da      	b.n	26f2 <eeprom_emulator_write_page+0x96>
	_eeprom_emulator_nvm_erase_row(row_number);
    273c:	4644      	mov	r4, r8
    273e:	4640      	mov	r0, r8
    2740:	4b2a      	ldr	r3, [pc, #168]	; (27ec <eeprom_emulator_write_page+0x190>)
    2742:	4798      	blx	r3
	_eeprom_instance.spare_row = row_number;
    2744:	2387      	movs	r3, #135	; 0x87
    2746:	4a24      	ldr	r2, [pc, #144]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    2748:	54d4      	strb	r4, [r2, r3]
		return STATUS_OK;
    274a:	2000      	movs	r0, #0
    274c:	e794      	b.n	2678 <eeprom_emulator_write_page+0x1c>
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    274e:	0035      	movs	r5, r6
	_eeprom_instance.cache.header.logical_page = logical_page;
    2750:	4e21      	ldr	r6, [pc, #132]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    2752:	2388      	movs	r3, #136	; 0x88
    2754:	54f4      	strb	r4, [r6, r3]
	memcpy(&_eeprom_instance.cache.data,
    2756:	0030      	movs	r0, r6
    2758:	308c      	adds	r0, #140	; 0x8c
    275a:	223c      	movs	r2, #60	; 0x3c
    275c:	9900      	ldr	r1, [sp, #0]
    275e:	4b22      	ldr	r3, [pc, #136]	; (27e8 <eeprom_emulator_write_page+0x18c>)
    2760:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    2762:	0031      	movs	r1, r6
    2764:	3188      	adds	r1, #136	; 0x88
    2766:	b2a8      	uxth	r0, r5
    2768:	4b1e      	ldr	r3, [pc, #120]	; (27e4 <eeprom_emulator_write_page+0x188>)
    276a:	4798      	blx	r3
	_eeprom_instance.page_map[logical_page] = new_page;
    276c:	1934      	adds	r4, r6, r4
    276e:	72e5      	strb	r5, [r4, #11]
	_eeprom_instance.cache_active           = true;
    2770:	2201      	movs	r2, #1
    2772:	23c8      	movs	r3, #200	; 0xc8
    2774:	54f2      	strb	r2, [r6, r3]
	return STATUS_OK;
    2776:	2000      	movs	r0, #0
    2778:	e77e      	b.n	2678 <eeprom_emulator_write_page+0x1c>
		_eeprom_emulator_move_data_to_spare(
    277a:	08b3      	lsrs	r3, r6, #2
    277c:	4698      	mov	r8, r3
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    277e:	021b      	lsls	r3, r3, #8
	const struct _eeprom_page *row_data =
    2780:	4a15      	ldr	r2, [pc, #84]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    2782:	6852      	ldr	r2, [r2, #4]
    2784:	18d3      	adds	r3, r2, r3
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    2786:	aa05      	add	r2, sp, #20
    2788:	7819      	ldrb	r1, [r3, #0]
    278a:	7011      	strb	r1, [r2, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    278c:	2103      	movs	r1, #3
    278e:	438e      	bics	r6, r1
    2790:	7056      	strb	r6, [r2, #1]
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    2792:	313d      	adds	r1, #61	; 0x3d
    2794:	5c59      	ldrb	r1, [r3, r1]
    2796:	7091      	strb	r1, [r2, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    2798:	1c71      	adds	r1, r6, #1
    279a:	70d1      	strb	r1, [r2, #3]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    279c:	2280      	movs	r2, #128	; 0x80
    279e:	5c98      	ldrb	r0, [r3, r2]
    27a0:	3240      	adds	r2, #64	; 0x40
    27a2:	5c99      	ldrb	r1, [r3, r2]
    27a4:	2300      	movs	r3, #0
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    27a6:	1cb5      	adds	r5, r6, #2
    27a8:	3603      	adds	r6, #3
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    27aa:	aa05      	add	r2, sp, #20
    27ac:	5cd2      	ldrb	r2, [r2, r3]
    27ae:	4290      	cmp	r0, r2
    27b0:	d097      	beq.n	26e2 <eeprom_emulator_write_page+0x86>
    27b2:	428a      	cmp	r2, r1
    27b4:	d091      	beq.n	26da <eeprom_emulator_write_page+0x7e>
    27b6:	3302      	adds	r3, #2
	for (uint8_t c = 0; c < 2; c++) {
    27b8:	2b04      	cmp	r3, #4
    27ba:	d1f6      	bne.n	27aa <eeprom_emulator_write_page+0x14e>
    27bc:	ae05      	add	r6, sp, #20
    27be:	2700      	movs	r7, #0
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    27c0:	4b05      	ldr	r3, [pc, #20]	; (27d8 <eeprom_emulator_write_page+0x17c>)
    27c2:	469b      	mov	fp, r3
		eeprom_emulator_commit_page_buffer();
    27c4:	4b05      	ldr	r3, [pc, #20]	; (27dc <eeprom_emulator_write_page+0x180>)
    27c6:	469a      	mov	sl, r3
			_eeprom_emulator_nvm_read_page(
    27c8:	465b      	mov	r3, fp
    27ca:	3388      	adds	r3, #136	; 0x88
    27cc:	9302      	str	r3, [sp, #8]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    27ce:	3304      	adds	r3, #4
    27d0:	9303      	str	r3, [sp, #12]
    27d2:	9401      	str	r4, [sp, #4]
    27d4:	e79e      	b.n	2714 <eeprom_emulator_write_page+0xb8>
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	20000128 	.word	0x20000128
    27dc:	0000262d 	.word	0x0000262d
    27e0:	000022c9 	.word	0x000022c9
    27e4:	000022ed 	.word	0x000022ed
    27e8:	0000314d 	.word	0x0000314d
    27ec:	00002161 	.word	0x00002161

000027f0 <eeprom_emulator_write_buffer>:
{
    27f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27f2:	46de      	mov	lr, fp
    27f4:	4657      	mov	r7, sl
    27f6:	464e      	mov	r6, r9
    27f8:	4645      	mov	r5, r8
    27fa:	b5e0      	push	{r5, r6, r7, lr}
    27fc:	b091      	sub	sp, #68	; 0x44
    27fe:	0005      	movs	r5, r0
    2800:	4689      	mov	r9, r1
    2802:	4690      	mov	r8, r2
	uint8_t logical_page = offset / EEPROM_PAGE_SIZE;
    2804:	213c      	movs	r1, #60	; 0x3c
    2806:	4b2d      	ldr	r3, [pc, #180]	; (28bc <eeprom_emulator_write_buffer+0xcc>)
    2808:	4798      	blx	r3
    280a:	b2c7      	uxtb	r7, r0
	if ((offset % EEPROM_PAGE_SIZE) || length < EEPROM_PAGE_SIZE) {
    280c:	213c      	movs	r1, #60	; 0x3c
    280e:	0028      	movs	r0, r5
    2810:	4b2b      	ldr	r3, [pc, #172]	; (28c0 <eeprom_emulator_write_buffer+0xd0>)
    2812:	4798      	blx	r3
    2814:	b289      	uxth	r1, r1
    2816:	2900      	cmp	r1, #0
    2818:	d135      	bne.n	2886 <eeprom_emulator_write_buffer+0x96>
    281a:	4643      	mov	r3, r8
    281c:	2b3b      	cmp	r3, #59	; 0x3b
    281e:	d93f      	bls.n	28a0 <eeprom_emulator_write_buffer+0xb0>
		buffer[c % EEPROM_PAGE_SIZE] = data[c - offset];
    2820:	464b      	mov	r3, r9
    2822:	781a      	ldrb	r2, [r3, #0]
    2824:	ab01      	add	r3, sp, #4
    2826:	701a      	strb	r2, [r3, #0]
		c=c+1;
    2828:	1c6c      	adds	r4, r5, #1
    282a:	b2a4      	uxth	r4, r4
	for (; c < (length + offset); c++) {
    282c:	0026      	movs	r6, r4
    282e:	46ab      	mov	fp, r5
    2830:	44a8      	add	r8, r5
    2832:	45a0      	cmp	r8, r4
    2834:	dd22      	ble.n	287c <eeprom_emulator_write_buffer+0x8c>
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    2836:	4b22      	ldr	r3, [pc, #136]	; (28c0 <eeprom_emulator_write_buffer+0xd0>)
    2838:	469a      	mov	sl, r3
    283a:	e00a      	b.n	2852 <eeprom_emulator_write_buffer+0x62>
		buffer[c % EEPROM_PAGE_SIZE] = data[c - offset];
    283c:	465b      	mov	r3, fp
    283e:	1af6      	subs	r6, r6, r3
    2840:	464b      	mov	r3, r9
    2842:	5d9a      	ldrb	r2, [r3, r6]
    2844:	ab01      	add	r3, sp, #4
    2846:	555a      	strb	r2, [r3, r5]
	for (; c < (length + offset); c++) {
    2848:	3401      	adds	r4, #1
    284a:	b2a4      	uxth	r4, r4
    284c:	0026      	movs	r6, r4
    284e:	4544      	cmp	r4, r8
    2850:	da14      	bge.n	287c <eeprom_emulator_write_buffer+0x8c>
		if ((c % EEPROM_PAGE_SIZE) == 0) {
    2852:	213c      	movs	r1, #60	; 0x3c
    2854:	0020      	movs	r0, r4
    2856:	47d0      	blx	sl
    2858:	b28d      	uxth	r5, r1
    285a:	2d00      	cmp	r5, #0
    285c:	d1ee      	bne.n	283c <eeprom_emulator_write_buffer+0x4c>
			error_code = eeprom_emulator_write_page(logical_page, buffer);
    285e:	a901      	add	r1, sp, #4
    2860:	0038      	movs	r0, r7
    2862:	4b18      	ldr	r3, [pc, #96]	; (28c4 <eeprom_emulator_write_buffer+0xd4>)
    2864:	4798      	blx	r3
			if (error_code != STATUS_OK) {
    2866:	2800      	cmp	r0, #0
    2868:	d113      	bne.n	2892 <eeprom_emulator_write_buffer+0xa2>
			logical_page++;
    286a:	3701      	adds	r7, #1
    286c:	b2ff      	uxtb	r7, r7
			error_code = eeprom_emulator_read_page(logical_page, buffer);
    286e:	a901      	add	r1, sp, #4
    2870:	0038      	movs	r0, r7
    2872:	4b15      	ldr	r3, [pc, #84]	; (28c8 <eeprom_emulator_write_buffer+0xd8>)
    2874:	4798      	blx	r3
			if (error_code != STATUS_OK) {
    2876:	2800      	cmp	r0, #0
    2878:	d0e0      	beq.n	283c <eeprom_emulator_write_buffer+0x4c>
    287a:	e00a      	b.n	2892 <eeprom_emulator_write_buffer+0xa2>
		error_code = eeprom_emulator_write_page(logical_page, buffer);
    287c:	a901      	add	r1, sp, #4
    287e:	0038      	movs	r0, r7
    2880:	4b10      	ldr	r3, [pc, #64]	; (28c4 <eeprom_emulator_write_buffer+0xd4>)
    2882:	4798      	blx	r3
    2884:	e005      	b.n	2892 <eeprom_emulator_write_buffer+0xa2>
		error_code = eeprom_emulator_read_page(logical_page, buffer);
    2886:	a901      	add	r1, sp, #4
    2888:	0038      	movs	r0, r7
    288a:	4b0f      	ldr	r3, [pc, #60]	; (28c8 <eeprom_emulator_write_buffer+0xd8>)
    288c:	4798      	blx	r3
		if (error_code != STATUS_OK) {
    288e:	2800      	cmp	r0, #0
    2890:	d00d      	beq.n	28ae <eeprom_emulator_write_buffer+0xbe>
}
    2892:	b011      	add	sp, #68	; 0x44
    2894:	bc3c      	pop	{r2, r3, r4, r5}
    2896:	4690      	mov	r8, r2
    2898:	4699      	mov	r9, r3
    289a:	46a2      	mov	sl, r4
    289c:	46ab      	mov	fp, r5
    289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		error_code = eeprom_emulator_read_page(logical_page, buffer);
    28a0:	a901      	add	r1, sp, #4
    28a2:	0038      	movs	r0, r7
    28a4:	4b08      	ldr	r3, [pc, #32]	; (28c8 <eeprom_emulator_write_buffer+0xd8>)
    28a6:	4798      	blx	r3
		if (error_code != STATUS_OK) {
    28a8:	2800      	cmp	r0, #0
    28aa:	d0b9      	beq.n	2820 <eeprom_emulator_write_buffer+0x30>
    28ac:	e7f1      	b.n	2892 <eeprom_emulator_write_buffer+0xa2>
	for (; c < (length + offset); c++) {
    28ae:	002e      	movs	r6, r5
    28b0:	46ab      	mov	fp, r5
    28b2:	44a8      	add	r8, r5
    28b4:	45a8      	cmp	r8, r5
    28b6:	ddec      	ble.n	2892 <eeprom_emulator_write_buffer+0xa2>
	uint16_t c = offset;
    28b8:	002c      	movs	r4, r5
    28ba:	e7bc      	b.n	2836 <eeprom_emulator_write_buffer+0x46>
    28bc:	00002f99 	.word	0x00002f99
    28c0:	000030a5 	.word	0x000030a5
    28c4:	0000265d 	.word	0x0000265d
    28c8:	00002515 	.word	0x00002515

000028cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    28cc:	e7fe      	b.n	28cc <Dummy_Handler>
	...

000028d0 <Reset_Handler>:
{
    28d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    28d2:	4a2a      	ldr	r2, [pc, #168]	; (297c <Reset_Handler+0xac>)
    28d4:	4b2a      	ldr	r3, [pc, #168]	; (2980 <Reset_Handler+0xb0>)
    28d6:	429a      	cmp	r2, r3
    28d8:	d011      	beq.n	28fe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    28da:	001a      	movs	r2, r3
    28dc:	4b29      	ldr	r3, [pc, #164]	; (2984 <Reset_Handler+0xb4>)
    28de:	429a      	cmp	r2, r3
    28e0:	d20d      	bcs.n	28fe <Reset_Handler+0x2e>
    28e2:	4a29      	ldr	r2, [pc, #164]	; (2988 <Reset_Handler+0xb8>)
    28e4:	3303      	adds	r3, #3
    28e6:	1a9b      	subs	r3, r3, r2
    28e8:	089b      	lsrs	r3, r3, #2
    28ea:	3301      	adds	r3, #1
    28ec:	009b      	lsls	r3, r3, #2
    28ee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    28f0:	4823      	ldr	r0, [pc, #140]	; (2980 <Reset_Handler+0xb0>)
    28f2:	4922      	ldr	r1, [pc, #136]	; (297c <Reset_Handler+0xac>)
    28f4:	588c      	ldr	r4, [r1, r2]
    28f6:	5084      	str	r4, [r0, r2]
    28f8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    28fa:	429a      	cmp	r2, r3
    28fc:	d1fa      	bne.n	28f4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    28fe:	4a23      	ldr	r2, [pc, #140]	; (298c <Reset_Handler+0xbc>)
    2900:	4b23      	ldr	r3, [pc, #140]	; (2990 <Reset_Handler+0xc0>)
    2902:	429a      	cmp	r2, r3
    2904:	d20a      	bcs.n	291c <Reset_Handler+0x4c>
    2906:	43d3      	mvns	r3, r2
    2908:	4921      	ldr	r1, [pc, #132]	; (2990 <Reset_Handler+0xc0>)
    290a:	185b      	adds	r3, r3, r1
    290c:	2103      	movs	r1, #3
    290e:	438b      	bics	r3, r1
    2910:	3304      	adds	r3, #4
    2912:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2914:	2100      	movs	r1, #0
    2916:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2918:	4293      	cmp	r3, r2
    291a:	d1fc      	bne.n	2916 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    291c:	4a1d      	ldr	r2, [pc, #116]	; (2994 <Reset_Handler+0xc4>)
    291e:	21ff      	movs	r1, #255	; 0xff
    2920:	4b1d      	ldr	r3, [pc, #116]	; (2998 <Reset_Handler+0xc8>)
    2922:	438b      	bics	r3, r1
    2924:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2926:	39fd      	subs	r1, #253	; 0xfd
    2928:	2390      	movs	r3, #144	; 0x90
    292a:	005b      	lsls	r3, r3, #1
    292c:	4a1b      	ldr	r2, [pc, #108]	; (299c <Reset_Handler+0xcc>)
    292e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2930:	4a1b      	ldr	r2, [pc, #108]	; (29a0 <Reset_Handler+0xd0>)
    2932:	78d3      	ldrb	r3, [r2, #3]
    2934:	2503      	movs	r5, #3
    2936:	43ab      	bics	r3, r5
    2938:	2402      	movs	r4, #2
    293a:	4323      	orrs	r3, r4
    293c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    293e:	78d3      	ldrb	r3, [r2, #3]
    2940:	270c      	movs	r7, #12
    2942:	43bb      	bics	r3, r7
    2944:	2608      	movs	r6, #8
    2946:	4333      	orrs	r3, r6
    2948:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    294a:	4b16      	ldr	r3, [pc, #88]	; (29a4 <Reset_Handler+0xd4>)
    294c:	7b98      	ldrb	r0, [r3, #14]
    294e:	2230      	movs	r2, #48	; 0x30
    2950:	4390      	bics	r0, r2
    2952:	2220      	movs	r2, #32
    2954:	4310      	orrs	r0, r2
    2956:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2958:	7b99      	ldrb	r1, [r3, #14]
    295a:	43b9      	bics	r1, r7
    295c:	4331      	orrs	r1, r6
    295e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2960:	7b9a      	ldrb	r2, [r3, #14]
    2962:	43aa      	bics	r2, r5
    2964:	4322      	orrs	r2, r4
    2966:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2968:	4a0f      	ldr	r2, [pc, #60]	; (29a8 <Reset_Handler+0xd8>)
    296a:	6853      	ldr	r3, [r2, #4]
    296c:	2180      	movs	r1, #128	; 0x80
    296e:	430b      	orrs	r3, r1
    2970:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2972:	4b0e      	ldr	r3, [pc, #56]	; (29ac <Reset_Handler+0xdc>)
    2974:	4798      	blx	r3
        main();
    2976:	4b0e      	ldr	r3, [pc, #56]	; (29b0 <Reset_Handler+0xe0>)
    2978:	4798      	blx	r3
    297a:	e7fe      	b.n	297a <Reset_Handler+0xaa>
    297c:	00004b9c 	.word	0x00004b9c
    2980:	20000000 	.word	0x20000000
    2984:	20000068 	.word	0x20000068
    2988:	20000004 	.word	0x20000004
    298c:	20000068 	.word	0x20000068
    2990:	20000304 	.word	0x20000304
    2994:	e000ed00 	.word	0xe000ed00
    2998:	00000000 	.word	0x00000000
    299c:	41007000 	.word	0x41007000
    29a0:	41005000 	.word	0x41005000
    29a4:	41004800 	.word	0x41004800
    29a8:	41004000 	.word	0x41004000
    29ac:	00003105 	.word	0x00003105
    29b0:	00002dd5 	.word	0x00002dd5

000029b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    29b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29b6:	46c6      	mov	lr, r8
    29b8:	b500      	push	{lr}
    29ba:	000c      	movs	r4, r1
    29bc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    29be:	2800      	cmp	r0, #0
    29c0:	d10f      	bne.n	29e2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    29c2:	2a00      	cmp	r2, #0
    29c4:	dd11      	ble.n	29ea <_read+0x36>
    29c6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    29c8:	4e09      	ldr	r6, [pc, #36]	; (29f0 <_read+0x3c>)
    29ca:	4d0a      	ldr	r5, [pc, #40]	; (29f4 <_read+0x40>)
    29cc:	6830      	ldr	r0, [r6, #0]
    29ce:	0021      	movs	r1, r4
    29d0:	682b      	ldr	r3, [r5, #0]
    29d2:	4798      	blx	r3
		ptr++;
    29d4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    29d6:	42bc      	cmp	r4, r7
    29d8:	d1f8      	bne.n	29cc <_read+0x18>
		nChars++;
	}
	return nChars;
}
    29da:	4640      	mov	r0, r8
    29dc:	bc04      	pop	{r2}
    29de:	4690      	mov	r8, r2
    29e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    29e2:	2301      	movs	r3, #1
    29e4:	425b      	negs	r3, r3
    29e6:	4698      	mov	r8, r3
    29e8:	e7f7      	b.n	29da <_read+0x26>
	for (; len > 0; --len) {
    29ea:	4680      	mov	r8, r0
    29ec:	e7f5      	b.n	29da <_read+0x26>
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	20000220 	.word	0x20000220
    29f4:	20000218 	.word	0x20000218

000029f8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    29f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29fa:	46c6      	mov	lr, r8
    29fc:	b500      	push	{lr}
    29fe:	000e      	movs	r6, r1
    2a00:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2a02:	3801      	subs	r0, #1
    2a04:	2802      	cmp	r0, #2
    2a06:	d810      	bhi.n	2a2a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2a08:	2a00      	cmp	r2, #0
    2a0a:	d011      	beq.n	2a30 <_write+0x38>
    2a0c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2a0e:	4b0c      	ldr	r3, [pc, #48]	; (2a40 <_write+0x48>)
    2a10:	4698      	mov	r8, r3
    2a12:	4f0c      	ldr	r7, [pc, #48]	; (2a44 <_write+0x4c>)
    2a14:	4643      	mov	r3, r8
    2a16:	6818      	ldr	r0, [r3, #0]
    2a18:	5d31      	ldrb	r1, [r6, r4]
    2a1a:	683b      	ldr	r3, [r7, #0]
    2a1c:	4798      	blx	r3
    2a1e:	2800      	cmp	r0, #0
    2a20:	db08      	blt.n	2a34 <_write+0x3c>
			return -1;
		}
		++nChars;
    2a22:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2a24:	42a5      	cmp	r5, r4
    2a26:	d1f5      	bne.n	2a14 <_write+0x1c>
    2a28:	e006      	b.n	2a38 <_write+0x40>
		return -1;
    2a2a:	2401      	movs	r4, #1
    2a2c:	4264      	negs	r4, r4
    2a2e:	e003      	b.n	2a38 <_write+0x40>
	for (; len != 0; --len) {
    2a30:	0014      	movs	r4, r2
    2a32:	e001      	b.n	2a38 <_write+0x40>
			return -1;
    2a34:	2401      	movs	r4, #1
    2a36:	4264      	negs	r4, r4
	}
	return nChars;
}
    2a38:	0020      	movs	r0, r4
    2a3a:	bc04      	pop	{r2}
    2a3c:	4690      	mov	r8, r2
    2a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a40:	20000220 	.word	0x20000220
    2a44:	2000021c 	.word	0x2000021c

00002a48 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2a48:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2a4a:	4a06      	ldr	r2, [pc, #24]	; (2a64 <_sbrk+0x1c>)
    2a4c:	6812      	ldr	r2, [r2, #0]
    2a4e:	2a00      	cmp	r2, #0
    2a50:	d004      	beq.n	2a5c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2a52:	4a04      	ldr	r2, [pc, #16]	; (2a64 <_sbrk+0x1c>)
    2a54:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2a56:	18c3      	adds	r3, r0, r3
    2a58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2a5a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2a5c:	4902      	ldr	r1, [pc, #8]	; (2a68 <_sbrk+0x20>)
    2a5e:	4a01      	ldr	r2, [pc, #4]	; (2a64 <_sbrk+0x1c>)
    2a60:	6011      	str	r1, [r2, #0]
    2a62:	e7f6      	b.n	2a52 <_sbrk+0xa>
    2a64:	200001f4 	.word	0x200001f4
    2a68:	20002308 	.word	0x20002308

00002a6c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2a6c:	2001      	movs	r0, #1
    2a6e:	4240      	negs	r0, r0
    2a70:	4770      	bx	lr

00002a72 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2a72:	2380      	movs	r3, #128	; 0x80
    2a74:	019b      	lsls	r3, r3, #6
    2a76:	604b      	str	r3, [r1, #4]

	return 0;
}
    2a78:	2000      	movs	r0, #0
    2a7a:	4770      	bx	lr

00002a7c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2a7c:	2001      	movs	r0, #1
    2a7e:	4770      	bx	lr

00002a80 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2a80:	2000      	movs	r0, #0
    2a82:	4770      	bx	lr

00002a84 <setup_eeprom_buffer_read_write_test>:
 * appropriate values.
 *
 * \param test Current test case.
 */
static void setup_eeprom_buffer_read_write_test(const struct test_case *test)
{
    2a84:	b530      	push	{r4, r5, lr}
    2a86:	2201      	movs	r2, #1
    2a88:	2300      	movs	r3, #0
	/* Initialize buffers */
	for (i = 0; i < TEST_BUFFER_SIZE; i++) {
		test_buffer[i] = i + 1;
    2a8a:	4d07      	ldr	r5, [pc, #28]	; (2aa8 <setup_eeprom_buffer_read_write_test+0x24>)
		verify_buffer[i] = 0;
    2a8c:	4c07      	ldr	r4, [pc, #28]	; (2aac <setup_eeprom_buffer_read_write_test+0x28>)
    2a8e:	2000      	movs	r0, #0
		test_buffer[i] = i + 1;
    2a90:	54ea      	strb	r2, [r5, r3]
		verify_buffer[i] = 0;
    2a92:	1919      	adds	r1, r3, r4
    2a94:	7008      	strb	r0, [r1, #0]
    2a96:	3301      	adds	r3, #1
    2a98:	3201      	adds	r2, #1
    2a9a:	b292      	uxth	r2, r2
	for (i = 0; i < TEST_BUFFER_SIZE; i++) {
    2a9c:	2b13      	cmp	r3, #19
    2a9e:	d1f7      	bne.n	2a90 <setup_eeprom_buffer_read_write_test+0xc>
    2aa0:	2213      	movs	r2, #19
    2aa2:	4b03      	ldr	r3, [pc, #12]	; (2ab0 <setup_eeprom_buffer_read_write_test+0x2c>)
    2aa4:	801a      	strh	r2, [r3, #0]
	}
}
    2aa6:	bd30      	pop	{r4, r5, pc}
    2aa8:	20000258 	.word	0x20000258
    2aac:	200002ac 	.word	0x200002ac
    2ab0:	200002a8 	.word	0x200002a8

00002ab4 <setup_eeprom_page_read_write_test>:
 * with appropriate values.
 *
 * \param test Current test case.
 */
static void setup_eeprom_page_read_write_test(const struct test_case *test)
{
    2ab4:	b530      	push	{r4, r5, lr}
    2ab6:	2201      	movs	r2, #1
    2ab8:	2300      	movs	r3, #0
	/* Initialize data arrays */
	for (i = 0; i < EEPROM_PAGE_SIZE; i++) {
		test_page[i] = i + 1;
    2aba:	4d07      	ldr	r5, [pc, #28]	; (2ad8 <setup_eeprom_page_read_write_test+0x24>)
		verify_page[i] = 0;
    2abc:	4c07      	ldr	r4, [pc, #28]	; (2adc <setup_eeprom_page_read_write_test+0x28>)
    2abe:	2000      	movs	r0, #0
		test_page[i] = i + 1;
    2ac0:	54ea      	strb	r2, [r5, r3]
		verify_page[i] = 0;
    2ac2:	1919      	adds	r1, r3, r4
    2ac4:	7008      	strb	r0, [r1, #0]
    2ac6:	3301      	adds	r3, #1
    2ac8:	3201      	adds	r2, #1
    2aca:	b292      	uxth	r2, r2
	for (i = 0; i < EEPROM_PAGE_SIZE; i++) {
    2acc:	2b3c      	cmp	r3, #60	; 0x3c
    2ace:	d1f7      	bne.n	2ac0 <setup_eeprom_page_read_write_test+0xc>
    2ad0:	223c      	movs	r2, #60	; 0x3c
    2ad2:	4b03      	ldr	r3, [pc, #12]	; (2ae0 <setup_eeprom_page_read_write_test+0x2c>)
    2ad4:	801a      	strh	r2, [r3, #0]
	}
}
    2ad6:	bd30      	pop	{r4, r5, pc}
    2ad8:	2000026c 	.word	0x2000026c
    2adc:	200002c0 	.word	0x200002c0
    2ae0:	200002a8 	.word	0x200002a8

00002ae4 <run_eeprom_page_read_write_test>:
 * It then reads back the page and verifies.
 *
 * \param test Current test case.
 */
static void run_eeprom_page_read_write_test(const struct test_case *test)
{
    2ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ae6:	b087      	sub	sp, #28
    2ae8:	0004      	movs	r4, r0
	volatile enum status_code status;

	/* Skip test if initialization failed */
	test_assert_true(test, init_success,
    2aea:	4b2c      	ldr	r3, [pc, #176]	; (2b9c <run_eeprom_page_read_write_test+0xb8>)
    2aec:	781b      	ldrb	r3, [r3, #0]
    2aee:	2b00      	cmp	r3, #0
    2af0:	d01c      	beq.n	2b2c <run_eeprom_page_read_write_test+0x48>
			"Skipping test due to failed initialization");

	/* Write page test */
	status = eeprom_emulator_write_page(TEST_EEPROM_PAGE, test_page);
    2af2:	492b      	ldr	r1, [pc, #172]	; (2ba0 <run_eeprom_page_read_write_test+0xbc>)
    2af4:	2001      	movs	r0, #1
    2af6:	4b2b      	ldr	r3, [pc, #172]	; (2ba4 <run_eeprom_page_read_write_test+0xc0>)
    2af8:	4798      	blx	r3
    2afa:	2317      	movs	r3, #23
    2afc:	446b      	add	r3, sp
    2afe:	7018      	strb	r0, [r3, #0]
	test_assert_true(test, status == STATUS_OK,
    2b00:	781b      	ldrb	r3, [r3, #0]
    2b02:	2b00      	cmp	r3, #0
    2b04:	d11b      	bne.n	2b3e <run_eeprom_page_read_write_test+0x5a>
			"EEPROM write page failed");

	/* Write back to physical NVM memory */
	eeprom_emulator_commit_page_buffer();
    2b06:	4b28      	ldr	r3, [pc, #160]	; (2ba8 <run_eeprom_page_read_write_test+0xc4>)
    2b08:	4798      	blx	r3

	/* Read page test */
	status = eeprom_emulator_read_page(TEST_EEPROM_PAGE, verify_page);
    2b0a:	4928      	ldr	r1, [pc, #160]	; (2bac <run_eeprom_page_read_write_test+0xc8>)
    2b0c:	2001      	movs	r0, #1
    2b0e:	4b28      	ldr	r3, [pc, #160]	; (2bb0 <run_eeprom_page_read_write_test+0xcc>)
    2b10:	4798      	blx	r3
    2b12:	2317      	movs	r3, #23
    2b14:	446b      	add	r3, sp
    2b16:	7018      	strb	r0, [r3, #0]
	test_assert_true(test, status == STATUS_OK,
    2b18:	781b      	ldrb	r3, [r3, #0]
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d119      	bne.n	2b52 <run_eeprom_page_read_write_test+0x6e>
			"EEPROM read page failed");

	/* Verify page test */
	for (i = 0; i < EEPROM_PAGE_SIZE; i++) {
    2b1e:	2200      	movs	r2, #0
    2b20:	4b24      	ldr	r3, [pc, #144]	; (2bb4 <run_eeprom_page_read_write_test+0xd0>)
    2b22:	801a      	strh	r2, [r3, #0]
    2b24:	2300      	movs	r3, #0
		test_assert_true(test, test_page[i] == verify_page[i],
    2b26:	4e1e      	ldr	r6, [pc, #120]	; (2ba0 <run_eeprom_page_read_write_test+0xbc>)
    2b28:	4d20      	ldr	r5, [pc, #128]	; (2bac <run_eeprom_page_read_write_test+0xc8>)
    2b2a:	e023      	b.n	2b74 <run_eeprom_page_read_write_test+0x90>
	test_assert_true(test, init_success,
    2b2c:	4b22      	ldr	r3, [pc, #136]	; (2bb8 <run_eeprom_page_read_write_test+0xd4>)
    2b2e:	9300      	str	r3, [sp, #0]
    2b30:	239c      	movs	r3, #156	; 0x9c
    2b32:	005b      	lsls	r3, r3, #1
    2b34:	4a21      	ldr	r2, [pc, #132]	; (2bbc <run_eeprom_page_read_write_test+0xd8>)
    2b36:	2101      	movs	r1, #1
    2b38:	4d21      	ldr	r5, [pc, #132]	; (2bc0 <run_eeprom_page_read_write_test+0xdc>)
    2b3a:	47a8      	blx	r5
    2b3c:	e7d9      	b.n	2af2 <run_eeprom_page_read_write_test+0xe>
	test_assert_true(test, status == STATUS_OK,
    2b3e:	4b21      	ldr	r3, [pc, #132]	; (2bc4 <run_eeprom_page_read_write_test+0xe0>)
    2b40:	9300      	str	r3, [sp, #0]
    2b42:	233e      	movs	r3, #62	; 0x3e
    2b44:	33ff      	adds	r3, #255	; 0xff
    2b46:	4a1d      	ldr	r2, [pc, #116]	; (2bbc <run_eeprom_page_read_write_test+0xd8>)
    2b48:	2101      	movs	r1, #1
    2b4a:	0020      	movs	r0, r4
    2b4c:	4d1c      	ldr	r5, [pc, #112]	; (2bc0 <run_eeprom_page_read_write_test+0xdc>)
    2b4e:	47a8      	blx	r5
    2b50:	e7d9      	b.n	2b06 <run_eeprom_page_read_write_test+0x22>
	test_assert_true(test, status == STATUS_OK,
    2b52:	4b1d      	ldr	r3, [pc, #116]	; (2bc8 <run_eeprom_page_read_write_test+0xe4>)
    2b54:	9300      	str	r3, [sp, #0]
    2b56:	2346      	movs	r3, #70	; 0x46
    2b58:	33ff      	adds	r3, #255	; 0xff
    2b5a:	4a18      	ldr	r2, [pc, #96]	; (2bbc <run_eeprom_page_read_write_test+0xd8>)
    2b5c:	2101      	movs	r1, #1
    2b5e:	0020      	movs	r0, r4
    2b60:	4d17      	ldr	r5, [pc, #92]	; (2bc0 <run_eeprom_page_read_write_test+0xdc>)
    2b62:	47a8      	blx	r5
    2b64:	e7db      	b.n	2b1e <run_eeprom_page_read_write_test+0x3a>
	for (i = 0; i < EEPROM_PAGE_SIZE; i++) {
    2b66:	4a13      	ldr	r2, [pc, #76]	; (2bb4 <run_eeprom_page_read_write_test+0xd0>)
    2b68:	8813      	ldrh	r3, [r2, #0]
    2b6a:	3301      	adds	r3, #1
    2b6c:	b29b      	uxth	r3, r3
    2b6e:	8013      	strh	r3, [r2, #0]
    2b70:	2b3b      	cmp	r3, #59	; 0x3b
    2b72:	d810      	bhi.n	2b96 <run_eeprom_page_read_write_test+0xb2>
		test_assert_true(test, test_page[i] == verify_page[i],
    2b74:	5cf2      	ldrb	r2, [r6, r3]
    2b76:	5ce9      	ldrb	r1, [r5, r3]
    2b78:	428a      	cmp	r2, r1
    2b7a:	d0f4      	beq.n	2b66 <run_eeprom_page_read_write_test+0x82>
    2b7c:	9103      	str	r1, [sp, #12]
    2b7e:	9202      	str	r2, [sp, #8]
    2b80:	9301      	str	r3, [sp, #4]
    2b82:	4b12      	ldr	r3, [pc, #72]	; (2bcc <run_eeprom_page_read_write_test+0xe8>)
    2b84:	9300      	str	r3, [sp, #0]
    2b86:	23a6      	movs	r3, #166	; 0xa6
    2b88:	005b      	lsls	r3, r3, #1
    2b8a:	4a0c      	ldr	r2, [pc, #48]	; (2bbc <run_eeprom_page_read_write_test+0xd8>)
    2b8c:	2101      	movs	r1, #1
    2b8e:	0020      	movs	r0, r4
    2b90:	4f0b      	ldr	r7, [pc, #44]	; (2bc0 <run_eeprom_page_read_write_test+0xdc>)
    2b92:	47b8      	blx	r7
    2b94:	e7e7      	b.n	2b66 <run_eeprom_page_read_write_test+0x82>
				"Page data incorrect at index %d: "
				"Expected %d - Read %d", i, test_page[i],
				verify_page[i]);
	}
}
    2b96:	b007      	add	sp, #28
    2b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	200002aa 	.word	0x200002aa
    2ba0:	2000026c 	.word	0x2000026c
    2ba4:	0000265d 	.word	0x0000265d
    2ba8:	0000262d 	.word	0x0000262d
    2bac:	200002c0 	.word	0x200002c0
    2bb0:	00002515 	.word	0x00002515
    2bb4:	200002a8 	.word	0x200002a8
    2bb8:	00004a4c 	.word	0x00004a4c
    2bbc:	00004a38 	.word	0x00004a38
    2bc0:	00000211 	.word	0x00000211
    2bc4:	00004a78 	.word	0x00004a78
    2bc8:	00004a94 	.word	0x00004a94
    2bcc:	00004aac 	.word	0x00004aac

00002bd0 <run_eeprom_buffer_read_write_test>:
{
    2bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bd2:	b087      	sub	sp, #28
    2bd4:	0004      	movs	r4, r0
	test_assert_true(test, init_success,
    2bd6:	4b2c      	ldr	r3, [pc, #176]	; (2c88 <run_eeprom_buffer_read_write_test+0xb8>)
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d01e      	beq.n	2c1c <run_eeprom_buffer_read_write_test+0x4c>
	status = eeprom_emulator_write_buffer(TEST_BUFFER_OFFSET,
    2bde:	2213      	movs	r2, #19
    2be0:	492a      	ldr	r1, [pc, #168]	; (2c8c <run_eeprom_buffer_read_write_test+0xbc>)
    2be2:	207b      	movs	r0, #123	; 0x7b
    2be4:	4b2a      	ldr	r3, [pc, #168]	; (2c90 <run_eeprom_buffer_read_write_test+0xc0>)
    2be6:	4798      	blx	r3
    2be8:	2317      	movs	r3, #23
    2bea:	446b      	add	r3, sp
    2bec:	7018      	strb	r0, [r3, #0]
	test_assert_true(test, status == STATUS_OK,
    2bee:	781b      	ldrb	r3, [r3, #0]
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d11b      	bne.n	2c2c <run_eeprom_buffer_read_write_test+0x5c>
	eeprom_emulator_commit_page_buffer();
    2bf4:	4b27      	ldr	r3, [pc, #156]	; (2c94 <run_eeprom_buffer_read_write_test+0xc4>)
    2bf6:	4798      	blx	r3
	status = eeprom_emulator_read_buffer(TEST_BUFFER_OFFSET,
    2bf8:	2213      	movs	r2, #19
    2bfa:	4927      	ldr	r1, [pc, #156]	; (2c98 <run_eeprom_buffer_read_write_test+0xc8>)
    2bfc:	207b      	movs	r0, #123	; 0x7b
    2bfe:	4b27      	ldr	r3, [pc, #156]	; (2c9c <run_eeprom_buffer_read_write_test+0xcc>)
    2c00:	4798      	blx	r3
    2c02:	2317      	movs	r3, #23
    2c04:	446b      	add	r3, sp
    2c06:	7018      	strb	r0, [r3, #0]
	test_assert_true(test, status == STATUS_OK,
    2c08:	781b      	ldrb	r3, [r3, #0]
    2c0a:	2b00      	cmp	r3, #0
    2c0c:	d118      	bne.n	2c40 <run_eeprom_buffer_read_write_test+0x70>
	for (i = 0; i < TEST_BUFFER_SIZE; i++) {
    2c0e:	2200      	movs	r2, #0
    2c10:	4b23      	ldr	r3, [pc, #140]	; (2ca0 <run_eeprom_buffer_read_write_test+0xd0>)
    2c12:	801a      	strh	r2, [r3, #0]
    2c14:	2300      	movs	r3, #0
		test_assert_true(test, test_buffer[i] == verify_buffer[i],
    2c16:	4e1d      	ldr	r6, [pc, #116]	; (2c8c <run_eeprom_buffer_read_write_test+0xbc>)
    2c18:	4d1f      	ldr	r5, [pc, #124]	; (2c98 <run_eeprom_buffer_read_write_test+0xc8>)
    2c1a:	e022      	b.n	2c62 <run_eeprom_buffer_read_write_test+0x92>
	test_assert_true(test, init_success,
    2c1c:	4b21      	ldr	r3, [pc, #132]	; (2ca4 <run_eeprom_buffer_read_write_test+0xd4>)
    2c1e:	9300      	str	r3, [sp, #0]
    2c20:	23fd      	movs	r3, #253	; 0xfd
    2c22:	4a21      	ldr	r2, [pc, #132]	; (2ca8 <run_eeprom_buffer_read_write_test+0xd8>)
    2c24:	2101      	movs	r1, #1
    2c26:	4d21      	ldr	r5, [pc, #132]	; (2cac <run_eeprom_buffer_read_write_test+0xdc>)
    2c28:	47a8      	blx	r5
    2c2a:	e7d8      	b.n	2bde <run_eeprom_buffer_read_write_test+0xe>
	test_assert_true(test, status == STATUS_OK,
    2c2c:	4b20      	ldr	r3, [pc, #128]	; (2cb0 <run_eeprom_buffer_read_write_test+0xe0>)
    2c2e:	9300      	str	r3, [sp, #0]
    2c30:	2304      	movs	r3, #4
    2c32:	33ff      	adds	r3, #255	; 0xff
    2c34:	4a1c      	ldr	r2, [pc, #112]	; (2ca8 <run_eeprom_buffer_read_write_test+0xd8>)
    2c36:	2101      	movs	r1, #1
    2c38:	0020      	movs	r0, r4
    2c3a:	4d1c      	ldr	r5, [pc, #112]	; (2cac <run_eeprom_buffer_read_write_test+0xdc>)
    2c3c:	47a8      	blx	r5
    2c3e:	e7d9      	b.n	2bf4 <run_eeprom_buffer_read_write_test+0x24>
	test_assert_true(test, status == STATUS_OK,
    2c40:	4b1c      	ldr	r3, [pc, #112]	; (2cb4 <run_eeprom_buffer_read_write_test+0xe4>)
    2c42:	9300      	str	r3, [sp, #0]
    2c44:	2386      	movs	r3, #134	; 0x86
    2c46:	005b      	lsls	r3, r3, #1
    2c48:	4a17      	ldr	r2, [pc, #92]	; (2ca8 <run_eeprom_buffer_read_write_test+0xd8>)
    2c4a:	2101      	movs	r1, #1
    2c4c:	0020      	movs	r0, r4
    2c4e:	4d17      	ldr	r5, [pc, #92]	; (2cac <run_eeprom_buffer_read_write_test+0xdc>)
    2c50:	47a8      	blx	r5
    2c52:	e7dc      	b.n	2c0e <run_eeprom_buffer_read_write_test+0x3e>
	for (i = 0; i < TEST_BUFFER_SIZE; i++) {
    2c54:	4a12      	ldr	r2, [pc, #72]	; (2ca0 <run_eeprom_buffer_read_write_test+0xd0>)
    2c56:	8813      	ldrh	r3, [r2, #0]
    2c58:	3301      	adds	r3, #1
    2c5a:	b29b      	uxth	r3, r3
    2c5c:	8013      	strh	r3, [r2, #0]
    2c5e:	2b12      	cmp	r3, #18
    2c60:	d810      	bhi.n	2c84 <run_eeprom_buffer_read_write_test+0xb4>
		test_assert_true(test, test_buffer[i] == verify_buffer[i],
    2c62:	5cf2      	ldrb	r2, [r6, r3]
    2c64:	5ce9      	ldrb	r1, [r5, r3]
    2c66:	428a      	cmp	r2, r1
    2c68:	d0f4      	beq.n	2c54 <run_eeprom_buffer_read_write_test+0x84>
    2c6a:	9103      	str	r1, [sp, #12]
    2c6c:	9202      	str	r2, [sp, #8]
    2c6e:	9301      	str	r3, [sp, #4]
    2c70:	4b11      	ldr	r3, [pc, #68]	; (2cb8 <run_eeprom_buffer_read_write_test+0xe8>)
    2c72:	9300      	str	r3, [sp, #0]
    2c74:	2314      	movs	r3, #20
    2c76:	33ff      	adds	r3, #255	; 0xff
    2c78:	4a0b      	ldr	r2, [pc, #44]	; (2ca8 <run_eeprom_buffer_read_write_test+0xd8>)
    2c7a:	2101      	movs	r1, #1
    2c7c:	0020      	movs	r0, r4
    2c7e:	4f0b      	ldr	r7, [pc, #44]	; (2cac <run_eeprom_buffer_read_write_test+0xdc>)
    2c80:	47b8      	blx	r7
    2c82:	e7e7      	b.n	2c54 <run_eeprom_buffer_read_write_test+0x84>
}
    2c84:	b007      	add	sp, #28
    2c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c88:	200002aa 	.word	0x200002aa
    2c8c:	20000258 	.word	0x20000258
    2c90:	000027f1 	.word	0x000027f1
    2c94:	0000262d 	.word	0x0000262d
    2c98:	200002ac 	.word	0x200002ac
    2c9c:	0000257d 	.word	0x0000257d
    2ca0:	200002a8 	.word	0x200002a8
    2ca4:	00004a4c 	.word	0x00004a4c
    2ca8:	00004a38 	.word	0x00004a38
    2cac:	00000211 	.word	0x00000211
    2cb0:	000048fc 	.word	0x000048fc
    2cb4:	00004918 	.word	0x00004918
    2cb8:	00004934 	.word	0x00004934

00002cbc <run_eeprom_init_test>:
{
    2cbc:	b570      	push	{r4, r5, r6, lr}
    2cbe:	b084      	sub	sp, #16
    2cc0:	0005      	movs	r5, r0
	init_success = true;
    2cc2:	2201      	movs	r2, #1
    2cc4:	4b27      	ldr	r3, [pc, #156]	; (2d64 <run_eeprom_init_test+0xa8>)
    2cc6:	701a      	strb	r2, [r3, #0]
	status = eeprom_emulator_init();
    2cc8:	4b27      	ldr	r3, [pc, #156]	; (2d68 <run_eeprom_init_test+0xac>)
    2cca:	4798      	blx	r3
    2ccc:	0004      	movs	r4, r0
	if (status == STATUS_ERR_NO_MEMORY) {
    2cce:	2816      	cmp	r0, #22
    2cd0:	d026      	beq.n	2d20 <run_eeprom_init_test+0x64>
	test_assert_true(test, init_success,
    2cd2:	4b24      	ldr	r3, [pc, #144]	; (2d64 <run_eeprom_init_test+0xa8>)
    2cd4:	781b      	ldrb	r3, [r3, #0]
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d03a      	beq.n	2d50 <run_eeprom_init_test+0x94>
	if (status != STATUS_OK) {
    2cda:	2c00      	cmp	r4, #0
    2cdc:	d126      	bne.n	2d2c <run_eeprom_init_test+0x70>
	status = eeprom_emulator_get_parameters(&ee_params);
    2cde:	4823      	ldr	r0, [pc, #140]	; (2d6c <run_eeprom_init_test+0xb0>)
    2ce0:	4b23      	ldr	r3, [pc, #140]	; (2d70 <run_eeprom_init_test+0xb4>)
    2ce2:	4798      	blx	r3
	if (status != STATUS_OK) {
    2ce4:	2800      	cmp	r0, #0
    2ce6:	d00a      	beq.n	2cfe <run_eeprom_init_test+0x42>
		init_success = false;
    2ce8:	2200      	movs	r2, #0
    2cea:	4b1e      	ldr	r3, [pc, #120]	; (2d64 <run_eeprom_init_test+0xa8>)
    2cec:	701a      	strb	r2, [r3, #0]
	test_assert_true(test, status == STATUS_OK,
    2cee:	4b21      	ldr	r3, [pc, #132]	; (2d74 <run_eeprom_init_test+0xb8>)
    2cf0:	9300      	str	r3, [sp, #0]
    2cf2:	23d5      	movs	r3, #213	; 0xd5
    2cf4:	4a20      	ldr	r2, [pc, #128]	; (2d78 <run_eeprom_init_test+0xbc>)
    2cf6:	2101      	movs	r1, #1
    2cf8:	0028      	movs	r0, r5
    2cfa:	4c20      	ldr	r4, [pc, #128]	; (2d7c <run_eeprom_init_test+0xc0>)
    2cfc:	47a0      	blx	r4
	test_assert_true(test, ee_params.page_size == EEPROM_PAGE_SIZE,
    2cfe:	4b1b      	ldr	r3, [pc, #108]	; (2d6c <run_eeprom_init_test+0xb0>)
    2d00:	781b      	ldrb	r3, [r3, #0]
    2d02:	2b3c      	cmp	r3, #60	; 0x3c
    2d04:	d00a      	beq.n	2d1c <run_eeprom_init_test+0x60>
    2d06:	9302      	str	r3, [sp, #8]
    2d08:	233c      	movs	r3, #60	; 0x3c
    2d0a:	9301      	str	r3, [sp, #4]
    2d0c:	4b1c      	ldr	r3, [pc, #112]	; (2d80 <run_eeprom_init_test+0xc4>)
    2d0e:	9300      	str	r3, [sp, #0]
    2d10:	23d9      	movs	r3, #217	; 0xd9
    2d12:	4a19      	ldr	r2, [pc, #100]	; (2d78 <run_eeprom_init_test+0xbc>)
    2d14:	2101      	movs	r1, #1
    2d16:	0028      	movs	r0, r5
    2d18:	4c18      	ldr	r4, [pc, #96]	; (2d7c <run_eeprom_init_test+0xc0>)
    2d1a:	47a0      	blx	r4
}
    2d1c:	b004      	add	sp, #16
    2d1e:	bd70      	pop	{r4, r5, r6, pc}
		init_success = false;
    2d20:	4b10      	ldr	r3, [pc, #64]	; (2d64 <run_eeprom_init_test+0xa8>)
    2d22:	2200      	movs	r2, #0
    2d24:	701a      	strb	r2, [r3, #0]
	test_assert_true(test, init_success,
    2d26:	781b      	ldrb	r3, [r3, #0]
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d011      	beq.n	2d50 <run_eeprom_init_test+0x94>
		eeprom_emulator_erase_memory();
    2d2c:	4b15      	ldr	r3, [pc, #84]	; (2d84 <run_eeprom_init_test+0xc8>)
    2d2e:	4798      	blx	r3
		status = eeprom_emulator_init();
    2d30:	4b0d      	ldr	r3, [pc, #52]	; (2d68 <run_eeprom_init_test+0xac>)
    2d32:	4798      	blx	r3
		if (status != STATUS_OK) {
    2d34:	2800      	cmp	r0, #0
    2d36:	d0d2      	beq.n	2cde <run_eeprom_init_test+0x22>
			init_success = false;
    2d38:	2200      	movs	r2, #0
    2d3a:	4b0a      	ldr	r3, [pc, #40]	; (2d64 <run_eeprom_init_test+0xa8>)
    2d3c:	701a      	strb	r2, [r3, #0]
	test_assert_true(test, status == STATUS_OK,
    2d3e:	4b12      	ldr	r3, [pc, #72]	; (2d88 <run_eeprom_init_test+0xcc>)
    2d40:	9300      	str	r3, [sp, #0]
    2d42:	23cc      	movs	r3, #204	; 0xcc
    2d44:	4a0c      	ldr	r2, [pc, #48]	; (2d78 <run_eeprom_init_test+0xbc>)
    2d46:	2101      	movs	r1, #1
    2d48:	0028      	movs	r0, r5
    2d4a:	4c0c      	ldr	r4, [pc, #48]	; (2d7c <run_eeprom_init_test+0xc0>)
    2d4c:	47a0      	blx	r4
    2d4e:	e7c6      	b.n	2cde <run_eeprom_init_test+0x22>
	test_assert_true(test, init_success,
    2d50:	4b0e      	ldr	r3, [pc, #56]	; (2d8c <run_eeprom_init_test+0xd0>)
    2d52:	9300      	str	r3, [sp, #0]
    2d54:	23c0      	movs	r3, #192	; 0xc0
    2d56:	4a08      	ldr	r2, [pc, #32]	; (2d78 <run_eeprom_init_test+0xbc>)
    2d58:	2101      	movs	r1, #1
    2d5a:	0028      	movs	r0, r5
    2d5c:	4e07      	ldr	r6, [pc, #28]	; (2d7c <run_eeprom_init_test+0xc0>)
    2d5e:	47b0      	blx	r6
    2d60:	e7bb      	b.n	2cda <run_eeprom_init_test+0x1e>
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	200002aa 	.word	0x200002aa
    2d68:	00002351 	.word	0x00002351
    2d6c:	200002fc 	.word	0x200002fc
    2d70:	00002331 	.word	0x00002331
    2d74:	000049d4 	.word	0x000049d4
    2d78:	00004a38 	.word	0x00004a38
    2d7c:	00000211 	.word	0x00000211
    2d80:	000049f8 	.word	0x000049f8
    2d84:	00002435 	.word	0x00002435
    2d88:	000049ac 	.word	0x000049ac
    2d8c:	00004970 	.word	0x00004970

00002d90 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2d90:	b570      	push	{r4, r5, r6, lr}
    2d92:	b082      	sub	sp, #8
    2d94:	0005      	movs	r5, r0
    2d96:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2d98:	2200      	movs	r2, #0
    2d9a:	466b      	mov	r3, sp
    2d9c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2d9e:	4c06      	ldr	r4, [pc, #24]	; (2db8 <usart_serial_getchar+0x28>)
    2da0:	466b      	mov	r3, sp
    2da2:	1d99      	adds	r1, r3, #6
    2da4:	0028      	movs	r0, r5
    2da6:	47a0      	blx	r4
    2da8:	2800      	cmp	r0, #0
    2daa:	d1f9      	bne.n	2da0 <usart_serial_getchar+0x10>

	*c = temp;
    2dac:	466b      	mov	r3, sp
    2dae:	3306      	adds	r3, #6
    2db0:	881b      	ldrh	r3, [r3, #0]
    2db2:	7033      	strb	r3, [r6, #0]
}
    2db4:	b002      	add	sp, #8
    2db6:	bd70      	pop	{r4, r5, r6, pc}
    2db8:	0000155d 	.word	0x0000155d

00002dbc <usart_serial_putchar>:
{
    2dbc:	b570      	push	{r4, r5, r6, lr}
    2dbe:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2dc0:	b28c      	uxth	r4, r1
    2dc2:	4e03      	ldr	r6, [pc, #12]	; (2dd0 <usart_serial_putchar+0x14>)
    2dc4:	0021      	movs	r1, r4
    2dc6:	0028      	movs	r0, r5
    2dc8:	47b0      	blx	r6
    2dca:	2800      	cmp	r0, #0
    2dcc:	d1fa      	bne.n	2dc4 <usart_serial_putchar+0x8>
}
    2dce:	bd70      	pop	{r4, r5, r6, pc}
    2dd0:	000013d9 	.word	0x000013d9

00002dd4 <main>:
 *
 * Initializes the system and serial output, then sets up the
 * EEPROM emulator unit test suite and runs it.
 */
int main(void)
{
    2dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dd6:	46ce      	mov	lr, r9
    2dd8:	4647      	mov	r7, r8
    2dda:	b580      	push	{r7, lr}
    2ddc:	b099      	sub	sp, #100	; 0x64
	system_init();
    2dde:	4b54      	ldr	r3, [pc, #336]	; (2f30 <main+0x15c>)
    2de0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2de2:	aa02      	add	r2, sp, #8
    2de4:	2380      	movs	r3, #128	; 0x80
    2de6:	05db      	lsls	r3, r3, #23
    2de8:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2dea:	2300      	movs	r3, #0
    2dec:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    2dee:	21ff      	movs	r1, #255	; 0xff
    2df0:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    2df2:	2100      	movs	r1, #0
    2df4:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2df6:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2df8:	2001      	movs	r0, #1
    2dfa:	2424      	movs	r4, #36	; 0x24
    2dfc:	5510      	strb	r0, [r2, r4]
	config->transmitter_enable = true;
    2dfe:	3401      	adds	r4, #1
    2e00:	5510      	strb	r0, [r2, r4]
	config->clock_polarity_inverted = false;
    2e02:	3025      	adds	r0, #37	; 0x25
    2e04:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    2e06:	3001      	adds	r0, #1
    2e08:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    2e0a:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2e0c:	3005      	adds	r0, #5
    2e0e:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    2e10:	3001      	adds	r0, #1
    2e12:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2e14:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2e16:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2e18:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2e1a:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2e1c:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2e1e:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    2e20:	2313      	movs	r3, #19
    2e22:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2e24:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    2e26:	2380      	movs	r3, #128	; 0x80
    2e28:	035b      	lsls	r3, r3, #13
    2e2a:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    2e2c:	4b41      	ldr	r3, [pc, #260]	; (2f34 <main+0x160>)
    2e2e:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    2e30:	4b41      	ldr	r3, [pc, #260]	; (2f38 <main+0x164>)
    2e32:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    2e34:	2301      	movs	r3, #1
    2e36:	425b      	negs	r3, r3
    2e38:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    2e3a:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    2e3c:	2396      	movs	r3, #150	; 0x96
    2e3e:	021b      	lsls	r3, r3, #8
    2e40:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2e42:	483e      	ldr	r0, [pc, #248]	; (2f3c <main+0x168>)
    2e44:	4b3e      	ldr	r3, [pc, #248]	; (2f40 <main+0x16c>)
    2e46:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2e48:	493e      	ldr	r1, [pc, #248]	; (2f44 <main+0x170>)
    2e4a:	4b3f      	ldr	r3, [pc, #252]	; (2f48 <main+0x174>)
    2e4c:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2e4e:	493f      	ldr	r1, [pc, #252]	; (2f4c <main+0x178>)
    2e50:	4b3f      	ldr	r3, [pc, #252]	; (2f50 <main+0x17c>)
    2e52:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2e54:	493f      	ldr	r1, [pc, #252]	; (2f54 <main+0x180>)
    2e56:	4b40      	ldr	r3, [pc, #256]	; (2f58 <main+0x184>)
    2e58:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2e5a:	4d40      	ldr	r5, [pc, #256]	; (2f5c <main+0x188>)
    2e5c:	682b      	ldr	r3, [r5, #0]
    2e5e:	6898      	ldr	r0, [r3, #8]
    2e60:	2100      	movs	r1, #0
    2e62:	4c3f      	ldr	r4, [pc, #252]	; (2f60 <main+0x18c>)
    2e64:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2e66:	682b      	ldr	r3, [r5, #0]
    2e68:	6858      	ldr	r0, [r3, #4]
    2e6a:	2100      	movs	r1, #0
    2e6c:	47a0      	blx	r4
    2e6e:	4b3d      	ldr	r3, [pc, #244]	; (2f64 <main+0x190>)
    2e70:	6818      	ldr	r0, [r3, #0]
static inline void usart_enable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2e72:	2800      	cmp	r0, #0
    2e74:	d01c      	beq.n	2eb0 <main+0xdc>
    2e76:	4b31      	ldr	r3, [pc, #196]	; (2f3c <main+0x168>)
    2e78:	681b      	ldr	r3, [r3, #0]
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d00e      	beq.n	2e9c <main+0xc8>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e7e:	4b2f      	ldr	r3, [pc, #188]	; (2f3c <main+0x168>)
    2e80:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2e82:	0020      	movs	r0, r4
    2e84:	4b38      	ldr	r3, [pc, #224]	; (2f68 <main+0x194>)
    2e86:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2e88:	231f      	movs	r3, #31
    2e8a:	4018      	ands	r0, r3
    2e8c:	3b1e      	subs	r3, #30
    2e8e:	4083      	lsls	r3, r0
    2e90:	4a36      	ldr	r2, [pc, #216]	; (2f6c <main+0x198>)
    2e92:	6013      	str	r3, [r2, #0]
    2e94:	4f33      	ldr	r7, [pc, #204]	; (2f64 <main+0x190>)
	Assert(module->hw);
    2e96:	4e29      	ldr	r6, [pc, #164]	; (2f3c <main+0x168>)
    2e98:	46b1      	mov	r9, r6
    2e9a:	e01c      	b.n	2ed6 <main+0x102>
	Assert(module->hw);
    2e9c:	4b34      	ldr	r3, [pc, #208]	; (2f70 <main+0x19c>)
    2e9e:	9301      	str	r3, [sp, #4]
    2ea0:	4b34      	ldr	r3, [pc, #208]	; (2f74 <main+0x1a0>)
    2ea2:	9300      	str	r3, [sp, #0]
    2ea4:	4b34      	ldr	r3, [pc, #208]	; (2f78 <main+0x1a4>)
    2ea6:	4a35      	ldr	r2, [pc, #212]	; (2f7c <main+0x1a8>)
    2ea8:	2101      	movs	r1, #1
    2eaa:	4c35      	ldr	r4, [pc, #212]	; (2f80 <main+0x1ac>)
    2eac:	47a0      	blx	r4
    2eae:	e7e6      	b.n	2e7e <main+0xaa>
    2eb0:	4b22      	ldr	r3, [pc, #136]	; (2f3c <main+0x168>)
    2eb2:	681b      	ldr	r3, [r3, #0]
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	d1e2      	bne.n	2e7e <main+0xaa>
    2eb8:	4b2f      	ldr	r3, [pc, #188]	; (2f78 <main+0x1a4>)
    2eba:	4a30      	ldr	r2, [pc, #192]	; (2f7c <main+0x1a8>)
    2ebc:	492c      	ldr	r1, [pc, #176]	; (2f70 <main+0x19c>)
    2ebe:	4831      	ldr	r0, [pc, #196]	; (2f84 <main+0x1b0>)
    2ec0:	4c31      	ldr	r4, [pc, #196]	; (2f88 <main+0x1b4>)
    2ec2:	47a0      	blx	r4
    2ec4:	e7fe      	b.n	2ec4 <main+0xf0>
	Assert(module->hw);
    2ec6:	6833      	ldr	r3, [r6, #0]
    2ec8:	2b00      	cmp	r3, #0
    2eca:	d016      	beq.n	2efa <main+0x126>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ecc:	4b1b      	ldr	r3, [pc, #108]	; (2f3c <main+0x168>)
    2ece:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2ed0:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d019      	beq.n	2f0a <main+0x136>
    2ed6:	6838      	ldr	r0, [r7, #0]
	Assert(module->hw);
    2ed8:	2800      	cmp	r0, #0
    2eda:	d0f4      	beq.n	2ec6 <main+0xf2>
    2edc:	464b      	mov	r3, r9
    2ede:	681b      	ldr	r3, [r3, #0]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d1f3      	bne.n	2ecc <main+0xf8>
    2ee4:	4b22      	ldr	r3, [pc, #136]	; (2f70 <main+0x19c>)
    2ee6:	9301      	str	r3, [sp, #4]
    2ee8:	4b22      	ldr	r3, [pc, #136]	; (2f74 <main+0x1a0>)
    2eea:	9300      	str	r3, [sp, #0]
    2eec:	23fd      	movs	r3, #253	; 0xfd
    2eee:	009b      	lsls	r3, r3, #2
    2ef0:	4a22      	ldr	r2, [pc, #136]	; (2f7c <main+0x1a8>)
    2ef2:	2101      	movs	r1, #1
    2ef4:	4d22      	ldr	r5, [pc, #136]	; (2f80 <main+0x1ac>)
    2ef6:	47a8      	blx	r5
    2ef8:	e7e8      	b.n	2ecc <main+0xf8>
    2efa:	23fd      	movs	r3, #253	; 0xfd
    2efc:	009b      	lsls	r3, r3, #2
    2efe:	4a1f      	ldr	r2, [pc, #124]	; (2f7c <main+0x1a8>)
    2f00:	491b      	ldr	r1, [pc, #108]	; (2f70 <main+0x19c>)
    2f02:	4820      	ldr	r0, [pc, #128]	; (2f84 <main+0x1b0>)
    2f04:	4c20      	ldr	r4, [pc, #128]	; (2f88 <main+0x1b4>)
    2f06:	47a0      	blx	r4
    2f08:	e7fe      	b.n	2f08 <main+0x134>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2f0a:	6823      	ldr	r3, [r4, #0]
    2f0c:	2202      	movs	r2, #2
    2f0e:	4313      	orrs	r3, r2
    2f10:	6023      	str	r3, [r4, #0]
			setup_eeprom_page_read_write_test,
			run_eeprom_page_read_write_test, NULL,
			"Testing EEPROM page read/write functionality");

	/* Put test case addresses in an array */
	DEFINE_TEST_ARRAY(eeprom_tests) = {
    2f12:	ab15      	add	r3, sp, #84	; 0x54
    2f14:	4a1d      	ldr	r2, [pc, #116]	; (2f8c <main+0x1b8>)
    2f16:	0019      	movs	r1, r3
    2f18:	ca31      	ldmia	r2!, {r0, r4, r5}
    2f1a:	c131      	stmia	r1!, {r0, r4, r5}
		&eeprom_buffer_read_write_test,
		&eeprom_page_read_write_test,
	};

	/* Define the test suite */
	DEFINE_TEST_SUITE(eeprom_test_suite, eeprom_tests,
    2f1c:	2203      	movs	r2, #3
    2f1e:	9212      	str	r2, [sp, #72]	; 0x48
    2f20:	9313      	str	r3, [sp, #76]	; 0x4c
    2f22:	4b1b      	ldr	r3, [pc, #108]	; (2f90 <main+0x1bc>)
    2f24:	9314      	str	r3, [sp, #80]	; 0x50
			"SAM EEPROM emulator service test suite");

	/* Run all tests in the suite*/
	test_suite_run(&eeprom_test_suite);
    2f26:	a812      	add	r0, sp, #72	; 0x48
    2f28:	4b1a      	ldr	r3, [pc, #104]	; (2f94 <main+0x1c0>)
    2f2a:	4798      	blx	r3
    2f2c:	e7fe      	b.n	2f2c <main+0x158>
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	00002135 	.word	0x00002135
    2f34:	00160002 	.word	0x00160002
    2f38:	00170002 	.word	0x00170002
    2f3c:	20000224 	.word	0x20000224
    2f40:	20000220 	.word	0x20000220
    2f44:	00002dbd 	.word	0x00002dbd
    2f48:	2000021c 	.word	0x2000021c
    2f4c:	00002d91 	.word	0x00002d91
    2f50:	20000218 	.word	0x20000218
    2f54:	42001400 	.word	0x42001400
    2f58:	00000d2d 	.word	0x00000d2d
    2f5c:	20000004 	.word	0x20000004
    2f60:	00003825 	.word	0x00003825
    2f64:	2000008c 	.word	0x2000008c
    2f68:	00000c9d 	.word	0x00000c9d
    2f6c:	e000e100 	.word	0xe000e100
    2f70:	00004630 	.word	0x00004630
    2f74:	000042d0 	.word	0x000042d0
    2f78:	00000475 	.word	0x00000475
    2f7c:	0000463c 	.word	0x0000463c
    2f80:	00000211 	.word	0x00000211
    2f84:	000042e8 	.word	0x000042e8
    2f88:	0000371d 	.word	0x0000371d
    2f8c:	00004810 	.word	0x00004810
    2f90:	000048a4 	.word	0x000048a4
    2f94:	000002a1 	.word	0x000002a1

00002f98 <__udivsi3>:
    2f98:	2200      	movs	r2, #0
    2f9a:	0843      	lsrs	r3, r0, #1
    2f9c:	428b      	cmp	r3, r1
    2f9e:	d374      	bcc.n	308a <__udivsi3+0xf2>
    2fa0:	0903      	lsrs	r3, r0, #4
    2fa2:	428b      	cmp	r3, r1
    2fa4:	d35f      	bcc.n	3066 <__udivsi3+0xce>
    2fa6:	0a03      	lsrs	r3, r0, #8
    2fa8:	428b      	cmp	r3, r1
    2faa:	d344      	bcc.n	3036 <__udivsi3+0x9e>
    2fac:	0b03      	lsrs	r3, r0, #12
    2fae:	428b      	cmp	r3, r1
    2fb0:	d328      	bcc.n	3004 <__udivsi3+0x6c>
    2fb2:	0c03      	lsrs	r3, r0, #16
    2fb4:	428b      	cmp	r3, r1
    2fb6:	d30d      	bcc.n	2fd4 <__udivsi3+0x3c>
    2fb8:	22ff      	movs	r2, #255	; 0xff
    2fba:	0209      	lsls	r1, r1, #8
    2fbc:	ba12      	rev	r2, r2
    2fbe:	0c03      	lsrs	r3, r0, #16
    2fc0:	428b      	cmp	r3, r1
    2fc2:	d302      	bcc.n	2fca <__udivsi3+0x32>
    2fc4:	1212      	asrs	r2, r2, #8
    2fc6:	0209      	lsls	r1, r1, #8
    2fc8:	d065      	beq.n	3096 <__udivsi3+0xfe>
    2fca:	0b03      	lsrs	r3, r0, #12
    2fcc:	428b      	cmp	r3, r1
    2fce:	d319      	bcc.n	3004 <__udivsi3+0x6c>
    2fd0:	e000      	b.n	2fd4 <__udivsi3+0x3c>
    2fd2:	0a09      	lsrs	r1, r1, #8
    2fd4:	0bc3      	lsrs	r3, r0, #15
    2fd6:	428b      	cmp	r3, r1
    2fd8:	d301      	bcc.n	2fde <__udivsi3+0x46>
    2fda:	03cb      	lsls	r3, r1, #15
    2fdc:	1ac0      	subs	r0, r0, r3
    2fde:	4152      	adcs	r2, r2
    2fe0:	0b83      	lsrs	r3, r0, #14
    2fe2:	428b      	cmp	r3, r1
    2fe4:	d301      	bcc.n	2fea <__udivsi3+0x52>
    2fe6:	038b      	lsls	r3, r1, #14
    2fe8:	1ac0      	subs	r0, r0, r3
    2fea:	4152      	adcs	r2, r2
    2fec:	0b43      	lsrs	r3, r0, #13
    2fee:	428b      	cmp	r3, r1
    2ff0:	d301      	bcc.n	2ff6 <__udivsi3+0x5e>
    2ff2:	034b      	lsls	r3, r1, #13
    2ff4:	1ac0      	subs	r0, r0, r3
    2ff6:	4152      	adcs	r2, r2
    2ff8:	0b03      	lsrs	r3, r0, #12
    2ffa:	428b      	cmp	r3, r1
    2ffc:	d301      	bcc.n	3002 <__udivsi3+0x6a>
    2ffe:	030b      	lsls	r3, r1, #12
    3000:	1ac0      	subs	r0, r0, r3
    3002:	4152      	adcs	r2, r2
    3004:	0ac3      	lsrs	r3, r0, #11
    3006:	428b      	cmp	r3, r1
    3008:	d301      	bcc.n	300e <__udivsi3+0x76>
    300a:	02cb      	lsls	r3, r1, #11
    300c:	1ac0      	subs	r0, r0, r3
    300e:	4152      	adcs	r2, r2
    3010:	0a83      	lsrs	r3, r0, #10
    3012:	428b      	cmp	r3, r1
    3014:	d301      	bcc.n	301a <__udivsi3+0x82>
    3016:	028b      	lsls	r3, r1, #10
    3018:	1ac0      	subs	r0, r0, r3
    301a:	4152      	adcs	r2, r2
    301c:	0a43      	lsrs	r3, r0, #9
    301e:	428b      	cmp	r3, r1
    3020:	d301      	bcc.n	3026 <__udivsi3+0x8e>
    3022:	024b      	lsls	r3, r1, #9
    3024:	1ac0      	subs	r0, r0, r3
    3026:	4152      	adcs	r2, r2
    3028:	0a03      	lsrs	r3, r0, #8
    302a:	428b      	cmp	r3, r1
    302c:	d301      	bcc.n	3032 <__udivsi3+0x9a>
    302e:	020b      	lsls	r3, r1, #8
    3030:	1ac0      	subs	r0, r0, r3
    3032:	4152      	adcs	r2, r2
    3034:	d2cd      	bcs.n	2fd2 <__udivsi3+0x3a>
    3036:	09c3      	lsrs	r3, r0, #7
    3038:	428b      	cmp	r3, r1
    303a:	d301      	bcc.n	3040 <__udivsi3+0xa8>
    303c:	01cb      	lsls	r3, r1, #7
    303e:	1ac0      	subs	r0, r0, r3
    3040:	4152      	adcs	r2, r2
    3042:	0983      	lsrs	r3, r0, #6
    3044:	428b      	cmp	r3, r1
    3046:	d301      	bcc.n	304c <__udivsi3+0xb4>
    3048:	018b      	lsls	r3, r1, #6
    304a:	1ac0      	subs	r0, r0, r3
    304c:	4152      	adcs	r2, r2
    304e:	0943      	lsrs	r3, r0, #5
    3050:	428b      	cmp	r3, r1
    3052:	d301      	bcc.n	3058 <__udivsi3+0xc0>
    3054:	014b      	lsls	r3, r1, #5
    3056:	1ac0      	subs	r0, r0, r3
    3058:	4152      	adcs	r2, r2
    305a:	0903      	lsrs	r3, r0, #4
    305c:	428b      	cmp	r3, r1
    305e:	d301      	bcc.n	3064 <__udivsi3+0xcc>
    3060:	010b      	lsls	r3, r1, #4
    3062:	1ac0      	subs	r0, r0, r3
    3064:	4152      	adcs	r2, r2
    3066:	08c3      	lsrs	r3, r0, #3
    3068:	428b      	cmp	r3, r1
    306a:	d301      	bcc.n	3070 <__udivsi3+0xd8>
    306c:	00cb      	lsls	r3, r1, #3
    306e:	1ac0      	subs	r0, r0, r3
    3070:	4152      	adcs	r2, r2
    3072:	0883      	lsrs	r3, r0, #2
    3074:	428b      	cmp	r3, r1
    3076:	d301      	bcc.n	307c <__udivsi3+0xe4>
    3078:	008b      	lsls	r3, r1, #2
    307a:	1ac0      	subs	r0, r0, r3
    307c:	4152      	adcs	r2, r2
    307e:	0843      	lsrs	r3, r0, #1
    3080:	428b      	cmp	r3, r1
    3082:	d301      	bcc.n	3088 <__udivsi3+0xf0>
    3084:	004b      	lsls	r3, r1, #1
    3086:	1ac0      	subs	r0, r0, r3
    3088:	4152      	adcs	r2, r2
    308a:	1a41      	subs	r1, r0, r1
    308c:	d200      	bcs.n	3090 <__udivsi3+0xf8>
    308e:	4601      	mov	r1, r0
    3090:	4152      	adcs	r2, r2
    3092:	4610      	mov	r0, r2
    3094:	4770      	bx	lr
    3096:	e7ff      	b.n	3098 <__udivsi3+0x100>
    3098:	b501      	push	{r0, lr}
    309a:	2000      	movs	r0, #0
    309c:	f000 f806 	bl	30ac <__aeabi_idiv0>
    30a0:	bd02      	pop	{r1, pc}
    30a2:	46c0      	nop			; (mov r8, r8)

000030a4 <__aeabi_uidivmod>:
    30a4:	2900      	cmp	r1, #0
    30a6:	d0f7      	beq.n	3098 <__udivsi3+0x100>
    30a8:	e776      	b.n	2f98 <__udivsi3>
    30aa:	4770      	bx	lr

000030ac <__aeabi_idiv0>:
    30ac:	4770      	bx	lr
    30ae:	46c0      	nop			; (mov r8, r8)

000030b0 <__aeabi_lmul>:
    30b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30b2:	46ce      	mov	lr, r9
    30b4:	4647      	mov	r7, r8
    30b6:	0415      	lsls	r5, r2, #16
    30b8:	0c2d      	lsrs	r5, r5, #16
    30ba:	002e      	movs	r6, r5
    30bc:	b580      	push	{r7, lr}
    30be:	0407      	lsls	r7, r0, #16
    30c0:	0c14      	lsrs	r4, r2, #16
    30c2:	0c3f      	lsrs	r7, r7, #16
    30c4:	4699      	mov	r9, r3
    30c6:	0c03      	lsrs	r3, r0, #16
    30c8:	437e      	muls	r6, r7
    30ca:	435d      	muls	r5, r3
    30cc:	4367      	muls	r7, r4
    30ce:	4363      	muls	r3, r4
    30d0:	197f      	adds	r7, r7, r5
    30d2:	0c34      	lsrs	r4, r6, #16
    30d4:	19e4      	adds	r4, r4, r7
    30d6:	469c      	mov	ip, r3
    30d8:	42a5      	cmp	r5, r4
    30da:	d903      	bls.n	30e4 <__aeabi_lmul+0x34>
    30dc:	2380      	movs	r3, #128	; 0x80
    30de:	025b      	lsls	r3, r3, #9
    30e0:	4698      	mov	r8, r3
    30e2:	44c4      	add	ip, r8
    30e4:	464b      	mov	r3, r9
    30e6:	4351      	muls	r1, r2
    30e8:	4343      	muls	r3, r0
    30ea:	0436      	lsls	r6, r6, #16
    30ec:	0c36      	lsrs	r6, r6, #16
    30ee:	0c25      	lsrs	r5, r4, #16
    30f0:	0424      	lsls	r4, r4, #16
    30f2:	4465      	add	r5, ip
    30f4:	19a4      	adds	r4, r4, r6
    30f6:	1859      	adds	r1, r3, r1
    30f8:	1949      	adds	r1, r1, r5
    30fa:	0020      	movs	r0, r4
    30fc:	bc0c      	pop	{r2, r3}
    30fe:	4690      	mov	r8, r2
    3100:	4699      	mov	r9, r3
    3102:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003104 <__libc_init_array>:
    3104:	b570      	push	{r4, r5, r6, lr}
    3106:	2600      	movs	r6, #0
    3108:	4d0c      	ldr	r5, [pc, #48]	; (313c <__libc_init_array+0x38>)
    310a:	4c0d      	ldr	r4, [pc, #52]	; (3140 <__libc_init_array+0x3c>)
    310c:	1b64      	subs	r4, r4, r5
    310e:	10a4      	asrs	r4, r4, #2
    3110:	42a6      	cmp	r6, r4
    3112:	d109      	bne.n	3128 <__libc_init_array+0x24>
    3114:	2600      	movs	r6, #0
    3116:	f001 fd31 	bl	4b7c <_init>
    311a:	4d0a      	ldr	r5, [pc, #40]	; (3144 <__libc_init_array+0x40>)
    311c:	4c0a      	ldr	r4, [pc, #40]	; (3148 <__libc_init_array+0x44>)
    311e:	1b64      	subs	r4, r4, r5
    3120:	10a4      	asrs	r4, r4, #2
    3122:	42a6      	cmp	r6, r4
    3124:	d105      	bne.n	3132 <__libc_init_array+0x2e>
    3126:	bd70      	pop	{r4, r5, r6, pc}
    3128:	00b3      	lsls	r3, r6, #2
    312a:	58eb      	ldr	r3, [r5, r3]
    312c:	4798      	blx	r3
    312e:	3601      	adds	r6, #1
    3130:	e7ee      	b.n	3110 <__libc_init_array+0xc>
    3132:	00b3      	lsls	r3, r6, #2
    3134:	58eb      	ldr	r3, [r5, r3]
    3136:	4798      	blx	r3
    3138:	3601      	adds	r6, #1
    313a:	e7f2      	b.n	3122 <__libc_init_array+0x1e>
    313c:	00004b88 	.word	0x00004b88
    3140:	00004b88 	.word	0x00004b88
    3144:	00004b88 	.word	0x00004b88
    3148:	00004b8c 	.word	0x00004b8c

0000314c <memcpy>:
    314c:	2300      	movs	r3, #0
    314e:	b510      	push	{r4, lr}
    3150:	429a      	cmp	r2, r3
    3152:	d100      	bne.n	3156 <memcpy+0xa>
    3154:	bd10      	pop	{r4, pc}
    3156:	5ccc      	ldrb	r4, [r1, r3]
    3158:	54c4      	strb	r4, [r0, r3]
    315a:	3301      	adds	r3, #1
    315c:	e7f8      	b.n	3150 <memcpy+0x4>

0000315e <memset>:
    315e:	0003      	movs	r3, r0
    3160:	1882      	adds	r2, r0, r2
    3162:	4293      	cmp	r3, r2
    3164:	d100      	bne.n	3168 <memset+0xa>
    3166:	4770      	bx	lr
    3168:	7019      	strb	r1, [r3, #0]
    316a:	3301      	adds	r3, #1
    316c:	e7f9      	b.n	3162 <memset+0x4>

0000316e <__sfputc_r>:
    316e:	6893      	ldr	r3, [r2, #8]
    3170:	b510      	push	{r4, lr}
    3172:	3b01      	subs	r3, #1
    3174:	6093      	str	r3, [r2, #8]
    3176:	2b00      	cmp	r3, #0
    3178:	da05      	bge.n	3186 <__sfputc_r+0x18>
    317a:	6994      	ldr	r4, [r2, #24]
    317c:	42a3      	cmp	r3, r4
    317e:	db08      	blt.n	3192 <__sfputc_r+0x24>
    3180:	b2cb      	uxtb	r3, r1
    3182:	2b0a      	cmp	r3, #10
    3184:	d005      	beq.n	3192 <__sfputc_r+0x24>
    3186:	6813      	ldr	r3, [r2, #0]
    3188:	1c58      	adds	r0, r3, #1
    318a:	6010      	str	r0, [r2, #0]
    318c:	7019      	strb	r1, [r3, #0]
    318e:	b2c8      	uxtb	r0, r1
    3190:	bd10      	pop	{r4, pc}
    3192:	f000 fc17 	bl	39c4 <__swbuf_r>
    3196:	e7fb      	b.n	3190 <__sfputc_r+0x22>

00003198 <__sfputs_r>:
    3198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    319a:	0006      	movs	r6, r0
    319c:	000f      	movs	r7, r1
    319e:	0014      	movs	r4, r2
    31a0:	18d5      	adds	r5, r2, r3
    31a2:	42ac      	cmp	r4, r5
    31a4:	d101      	bne.n	31aa <__sfputs_r+0x12>
    31a6:	2000      	movs	r0, #0
    31a8:	e007      	b.n	31ba <__sfputs_r+0x22>
    31aa:	7821      	ldrb	r1, [r4, #0]
    31ac:	003a      	movs	r2, r7
    31ae:	0030      	movs	r0, r6
    31b0:	f7ff ffdd 	bl	316e <__sfputc_r>
    31b4:	3401      	adds	r4, #1
    31b6:	1c43      	adds	r3, r0, #1
    31b8:	d1f3      	bne.n	31a2 <__sfputs_r+0xa>
    31ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000031bc <_vfiprintf_r>:
    31bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31be:	b09f      	sub	sp, #124	; 0x7c
    31c0:	0006      	movs	r6, r0
    31c2:	000f      	movs	r7, r1
    31c4:	0014      	movs	r4, r2
    31c6:	9305      	str	r3, [sp, #20]
    31c8:	2800      	cmp	r0, #0
    31ca:	d004      	beq.n	31d6 <_vfiprintf_r+0x1a>
    31cc:	6983      	ldr	r3, [r0, #24]
    31ce:	2b00      	cmp	r3, #0
    31d0:	d101      	bne.n	31d6 <_vfiprintf_r+0x1a>
    31d2:	f000 fdbb 	bl	3d4c <__sinit>
    31d6:	4b7f      	ldr	r3, [pc, #508]	; (33d4 <_vfiprintf_r+0x218>)
    31d8:	429f      	cmp	r7, r3
    31da:	d15c      	bne.n	3296 <_vfiprintf_r+0xda>
    31dc:	6877      	ldr	r7, [r6, #4]
    31de:	89bb      	ldrh	r3, [r7, #12]
    31e0:	071b      	lsls	r3, r3, #28
    31e2:	d562      	bpl.n	32aa <_vfiprintf_r+0xee>
    31e4:	693b      	ldr	r3, [r7, #16]
    31e6:	2b00      	cmp	r3, #0
    31e8:	d05f      	beq.n	32aa <_vfiprintf_r+0xee>
    31ea:	2300      	movs	r3, #0
    31ec:	ad06      	add	r5, sp, #24
    31ee:	616b      	str	r3, [r5, #20]
    31f0:	3320      	adds	r3, #32
    31f2:	766b      	strb	r3, [r5, #25]
    31f4:	3310      	adds	r3, #16
    31f6:	76ab      	strb	r3, [r5, #26]
    31f8:	9402      	str	r4, [sp, #8]
    31fa:	9c02      	ldr	r4, [sp, #8]
    31fc:	7823      	ldrb	r3, [r4, #0]
    31fe:	2b00      	cmp	r3, #0
    3200:	d15d      	bne.n	32be <_vfiprintf_r+0x102>
    3202:	9b02      	ldr	r3, [sp, #8]
    3204:	1ae3      	subs	r3, r4, r3
    3206:	9304      	str	r3, [sp, #16]
    3208:	d00d      	beq.n	3226 <_vfiprintf_r+0x6a>
    320a:	9b04      	ldr	r3, [sp, #16]
    320c:	9a02      	ldr	r2, [sp, #8]
    320e:	0039      	movs	r1, r7
    3210:	0030      	movs	r0, r6
    3212:	f7ff ffc1 	bl	3198 <__sfputs_r>
    3216:	1c43      	adds	r3, r0, #1
    3218:	d100      	bne.n	321c <_vfiprintf_r+0x60>
    321a:	e0cc      	b.n	33b6 <_vfiprintf_r+0x1fa>
    321c:	696a      	ldr	r2, [r5, #20]
    321e:	9b04      	ldr	r3, [sp, #16]
    3220:	4694      	mov	ip, r2
    3222:	4463      	add	r3, ip
    3224:	616b      	str	r3, [r5, #20]
    3226:	7823      	ldrb	r3, [r4, #0]
    3228:	2b00      	cmp	r3, #0
    322a:	d100      	bne.n	322e <_vfiprintf_r+0x72>
    322c:	e0c3      	b.n	33b6 <_vfiprintf_r+0x1fa>
    322e:	2201      	movs	r2, #1
    3230:	2300      	movs	r3, #0
    3232:	4252      	negs	r2, r2
    3234:	606a      	str	r2, [r5, #4]
    3236:	a902      	add	r1, sp, #8
    3238:	3254      	adds	r2, #84	; 0x54
    323a:	1852      	adds	r2, r2, r1
    323c:	3401      	adds	r4, #1
    323e:	602b      	str	r3, [r5, #0]
    3240:	60eb      	str	r3, [r5, #12]
    3242:	60ab      	str	r3, [r5, #8]
    3244:	7013      	strb	r3, [r2, #0]
    3246:	65ab      	str	r3, [r5, #88]	; 0x58
    3248:	7821      	ldrb	r1, [r4, #0]
    324a:	2205      	movs	r2, #5
    324c:	4862      	ldr	r0, [pc, #392]	; (33d8 <_vfiprintf_r+0x21c>)
    324e:	f000 fe89 	bl	3f64 <memchr>
    3252:	1c63      	adds	r3, r4, #1
    3254:	469c      	mov	ip, r3
    3256:	2800      	cmp	r0, #0
    3258:	d135      	bne.n	32c6 <_vfiprintf_r+0x10a>
    325a:	6829      	ldr	r1, [r5, #0]
    325c:	06cb      	lsls	r3, r1, #27
    325e:	d504      	bpl.n	326a <_vfiprintf_r+0xae>
    3260:	2353      	movs	r3, #83	; 0x53
    3262:	aa02      	add	r2, sp, #8
    3264:	3020      	adds	r0, #32
    3266:	189b      	adds	r3, r3, r2
    3268:	7018      	strb	r0, [r3, #0]
    326a:	070b      	lsls	r3, r1, #28
    326c:	d504      	bpl.n	3278 <_vfiprintf_r+0xbc>
    326e:	2353      	movs	r3, #83	; 0x53
    3270:	202b      	movs	r0, #43	; 0x2b
    3272:	aa02      	add	r2, sp, #8
    3274:	189b      	adds	r3, r3, r2
    3276:	7018      	strb	r0, [r3, #0]
    3278:	7823      	ldrb	r3, [r4, #0]
    327a:	2b2a      	cmp	r3, #42	; 0x2a
    327c:	d02c      	beq.n	32d8 <_vfiprintf_r+0x11c>
    327e:	2000      	movs	r0, #0
    3280:	210a      	movs	r1, #10
    3282:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3284:	7822      	ldrb	r2, [r4, #0]
    3286:	3a30      	subs	r2, #48	; 0x30
    3288:	2a09      	cmp	r2, #9
    328a:	d800      	bhi.n	328e <_vfiprintf_r+0xd2>
    328c:	e06b      	b.n	3366 <_vfiprintf_r+0x1aa>
    328e:	2800      	cmp	r0, #0
    3290:	d02a      	beq.n	32e8 <_vfiprintf_r+0x12c>
    3292:	9309      	str	r3, [sp, #36]	; 0x24
    3294:	e028      	b.n	32e8 <_vfiprintf_r+0x12c>
    3296:	4b51      	ldr	r3, [pc, #324]	; (33dc <_vfiprintf_r+0x220>)
    3298:	429f      	cmp	r7, r3
    329a:	d101      	bne.n	32a0 <_vfiprintf_r+0xe4>
    329c:	68b7      	ldr	r7, [r6, #8]
    329e:	e79e      	b.n	31de <_vfiprintf_r+0x22>
    32a0:	4b4f      	ldr	r3, [pc, #316]	; (33e0 <_vfiprintf_r+0x224>)
    32a2:	429f      	cmp	r7, r3
    32a4:	d19b      	bne.n	31de <_vfiprintf_r+0x22>
    32a6:	68f7      	ldr	r7, [r6, #12]
    32a8:	e799      	b.n	31de <_vfiprintf_r+0x22>
    32aa:	0039      	movs	r1, r7
    32ac:	0030      	movs	r0, r6
    32ae:	f000 fbdf 	bl	3a70 <__swsetup_r>
    32b2:	2800      	cmp	r0, #0
    32b4:	d099      	beq.n	31ea <_vfiprintf_r+0x2e>
    32b6:	2001      	movs	r0, #1
    32b8:	4240      	negs	r0, r0
    32ba:	b01f      	add	sp, #124	; 0x7c
    32bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32be:	2b25      	cmp	r3, #37	; 0x25
    32c0:	d09f      	beq.n	3202 <_vfiprintf_r+0x46>
    32c2:	3401      	adds	r4, #1
    32c4:	e79a      	b.n	31fc <_vfiprintf_r+0x40>
    32c6:	4b44      	ldr	r3, [pc, #272]	; (33d8 <_vfiprintf_r+0x21c>)
    32c8:	6829      	ldr	r1, [r5, #0]
    32ca:	1ac0      	subs	r0, r0, r3
    32cc:	2301      	movs	r3, #1
    32ce:	4083      	lsls	r3, r0
    32d0:	430b      	orrs	r3, r1
    32d2:	602b      	str	r3, [r5, #0]
    32d4:	4664      	mov	r4, ip
    32d6:	e7b7      	b.n	3248 <_vfiprintf_r+0x8c>
    32d8:	9b05      	ldr	r3, [sp, #20]
    32da:	1d18      	adds	r0, r3, #4
    32dc:	681b      	ldr	r3, [r3, #0]
    32de:	9005      	str	r0, [sp, #20]
    32e0:	2b00      	cmp	r3, #0
    32e2:	db3a      	blt.n	335a <_vfiprintf_r+0x19e>
    32e4:	9309      	str	r3, [sp, #36]	; 0x24
    32e6:	4664      	mov	r4, ip
    32e8:	7823      	ldrb	r3, [r4, #0]
    32ea:	2b2e      	cmp	r3, #46	; 0x2e
    32ec:	d10b      	bne.n	3306 <_vfiprintf_r+0x14a>
    32ee:	7863      	ldrb	r3, [r4, #1]
    32f0:	1c62      	adds	r2, r4, #1
    32f2:	2b2a      	cmp	r3, #42	; 0x2a
    32f4:	d13f      	bne.n	3376 <_vfiprintf_r+0x1ba>
    32f6:	9b05      	ldr	r3, [sp, #20]
    32f8:	3402      	adds	r4, #2
    32fa:	1d1a      	adds	r2, r3, #4
    32fc:	681b      	ldr	r3, [r3, #0]
    32fe:	9205      	str	r2, [sp, #20]
    3300:	2b00      	cmp	r3, #0
    3302:	db35      	blt.n	3370 <_vfiprintf_r+0x1b4>
    3304:	9307      	str	r3, [sp, #28]
    3306:	7821      	ldrb	r1, [r4, #0]
    3308:	2203      	movs	r2, #3
    330a:	4836      	ldr	r0, [pc, #216]	; (33e4 <_vfiprintf_r+0x228>)
    330c:	f000 fe2a 	bl	3f64 <memchr>
    3310:	2800      	cmp	r0, #0
    3312:	d007      	beq.n	3324 <_vfiprintf_r+0x168>
    3314:	4b33      	ldr	r3, [pc, #204]	; (33e4 <_vfiprintf_r+0x228>)
    3316:	682a      	ldr	r2, [r5, #0]
    3318:	1ac0      	subs	r0, r0, r3
    331a:	2340      	movs	r3, #64	; 0x40
    331c:	4083      	lsls	r3, r0
    331e:	4313      	orrs	r3, r2
    3320:	602b      	str	r3, [r5, #0]
    3322:	3401      	adds	r4, #1
    3324:	7821      	ldrb	r1, [r4, #0]
    3326:	1c63      	adds	r3, r4, #1
    3328:	2206      	movs	r2, #6
    332a:	482f      	ldr	r0, [pc, #188]	; (33e8 <_vfiprintf_r+0x22c>)
    332c:	9302      	str	r3, [sp, #8]
    332e:	7629      	strb	r1, [r5, #24]
    3330:	f000 fe18 	bl	3f64 <memchr>
    3334:	2800      	cmp	r0, #0
    3336:	d044      	beq.n	33c2 <_vfiprintf_r+0x206>
    3338:	4b2c      	ldr	r3, [pc, #176]	; (33ec <_vfiprintf_r+0x230>)
    333a:	2b00      	cmp	r3, #0
    333c:	d12f      	bne.n	339e <_vfiprintf_r+0x1e2>
    333e:	6829      	ldr	r1, [r5, #0]
    3340:	9b05      	ldr	r3, [sp, #20]
    3342:	2207      	movs	r2, #7
    3344:	05c9      	lsls	r1, r1, #23
    3346:	d528      	bpl.n	339a <_vfiprintf_r+0x1de>
    3348:	189b      	adds	r3, r3, r2
    334a:	4393      	bics	r3, r2
    334c:	3308      	adds	r3, #8
    334e:	9305      	str	r3, [sp, #20]
    3350:	696b      	ldr	r3, [r5, #20]
    3352:	9a03      	ldr	r2, [sp, #12]
    3354:	189b      	adds	r3, r3, r2
    3356:	616b      	str	r3, [r5, #20]
    3358:	e74f      	b.n	31fa <_vfiprintf_r+0x3e>
    335a:	425b      	negs	r3, r3
    335c:	60eb      	str	r3, [r5, #12]
    335e:	2302      	movs	r3, #2
    3360:	430b      	orrs	r3, r1
    3362:	602b      	str	r3, [r5, #0]
    3364:	e7bf      	b.n	32e6 <_vfiprintf_r+0x12a>
    3366:	434b      	muls	r3, r1
    3368:	3401      	adds	r4, #1
    336a:	189b      	adds	r3, r3, r2
    336c:	2001      	movs	r0, #1
    336e:	e789      	b.n	3284 <_vfiprintf_r+0xc8>
    3370:	2301      	movs	r3, #1
    3372:	425b      	negs	r3, r3
    3374:	e7c6      	b.n	3304 <_vfiprintf_r+0x148>
    3376:	2300      	movs	r3, #0
    3378:	0014      	movs	r4, r2
    337a:	200a      	movs	r0, #10
    337c:	001a      	movs	r2, r3
    337e:	606b      	str	r3, [r5, #4]
    3380:	7821      	ldrb	r1, [r4, #0]
    3382:	3930      	subs	r1, #48	; 0x30
    3384:	2909      	cmp	r1, #9
    3386:	d903      	bls.n	3390 <_vfiprintf_r+0x1d4>
    3388:	2b00      	cmp	r3, #0
    338a:	d0bc      	beq.n	3306 <_vfiprintf_r+0x14a>
    338c:	9207      	str	r2, [sp, #28]
    338e:	e7ba      	b.n	3306 <_vfiprintf_r+0x14a>
    3390:	4342      	muls	r2, r0
    3392:	3401      	adds	r4, #1
    3394:	1852      	adds	r2, r2, r1
    3396:	2301      	movs	r3, #1
    3398:	e7f2      	b.n	3380 <_vfiprintf_r+0x1c4>
    339a:	3307      	adds	r3, #7
    339c:	e7d5      	b.n	334a <_vfiprintf_r+0x18e>
    339e:	ab05      	add	r3, sp, #20
    33a0:	9300      	str	r3, [sp, #0]
    33a2:	003a      	movs	r2, r7
    33a4:	4b12      	ldr	r3, [pc, #72]	; (33f0 <_vfiprintf_r+0x234>)
    33a6:	0029      	movs	r1, r5
    33a8:	0030      	movs	r0, r6
    33aa:	e000      	b.n	33ae <_vfiprintf_r+0x1f2>
    33ac:	bf00      	nop
    33ae:	9003      	str	r0, [sp, #12]
    33b0:	9b03      	ldr	r3, [sp, #12]
    33b2:	3301      	adds	r3, #1
    33b4:	d1cc      	bne.n	3350 <_vfiprintf_r+0x194>
    33b6:	89bb      	ldrh	r3, [r7, #12]
    33b8:	065b      	lsls	r3, r3, #25
    33ba:	d500      	bpl.n	33be <_vfiprintf_r+0x202>
    33bc:	e77b      	b.n	32b6 <_vfiprintf_r+0xfa>
    33be:	980b      	ldr	r0, [sp, #44]	; 0x2c
    33c0:	e77b      	b.n	32ba <_vfiprintf_r+0xfe>
    33c2:	ab05      	add	r3, sp, #20
    33c4:	9300      	str	r3, [sp, #0]
    33c6:	003a      	movs	r2, r7
    33c8:	4b09      	ldr	r3, [pc, #36]	; (33f0 <_vfiprintf_r+0x234>)
    33ca:	0029      	movs	r1, r5
    33cc:	0030      	movs	r0, r6
    33ce:	f000 f88b 	bl	34e8 <_printf_i>
    33d2:	e7ec      	b.n	33ae <_vfiprintf_r+0x1f2>
    33d4:	00004b3c 	.word	0x00004b3c
    33d8:	00004ae8 	.word	0x00004ae8
    33dc:	00004b5c 	.word	0x00004b5c
    33e0:	00004b1c 	.word	0x00004b1c
    33e4:	00004aee 	.word	0x00004aee
    33e8:	00004af2 	.word	0x00004af2
    33ec:	00000000 	.word	0x00000000
    33f0:	00003199 	.word	0x00003199

000033f4 <vfiprintf>:
    33f4:	b510      	push	{r4, lr}
    33f6:	0013      	movs	r3, r2
    33f8:	000a      	movs	r2, r1
    33fa:	0001      	movs	r1, r0
    33fc:	4802      	ldr	r0, [pc, #8]	; (3408 <vfiprintf+0x14>)
    33fe:	6800      	ldr	r0, [r0, #0]
    3400:	f7ff fedc 	bl	31bc <_vfiprintf_r>
    3404:	bd10      	pop	{r4, pc}
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	20000004 	.word	0x20000004

0000340c <_printf_common>:
    340c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    340e:	0015      	movs	r5, r2
    3410:	9301      	str	r3, [sp, #4]
    3412:	688a      	ldr	r2, [r1, #8]
    3414:	690b      	ldr	r3, [r1, #16]
    3416:	9000      	str	r0, [sp, #0]
    3418:	000c      	movs	r4, r1
    341a:	4293      	cmp	r3, r2
    341c:	da00      	bge.n	3420 <_printf_common+0x14>
    341e:	0013      	movs	r3, r2
    3420:	0022      	movs	r2, r4
    3422:	602b      	str	r3, [r5, #0]
    3424:	3243      	adds	r2, #67	; 0x43
    3426:	7812      	ldrb	r2, [r2, #0]
    3428:	2a00      	cmp	r2, #0
    342a:	d001      	beq.n	3430 <_printf_common+0x24>
    342c:	3301      	adds	r3, #1
    342e:	602b      	str	r3, [r5, #0]
    3430:	6823      	ldr	r3, [r4, #0]
    3432:	069b      	lsls	r3, r3, #26
    3434:	d502      	bpl.n	343c <_printf_common+0x30>
    3436:	682b      	ldr	r3, [r5, #0]
    3438:	3302      	adds	r3, #2
    343a:	602b      	str	r3, [r5, #0]
    343c:	2706      	movs	r7, #6
    343e:	6823      	ldr	r3, [r4, #0]
    3440:	401f      	ands	r7, r3
    3442:	d027      	beq.n	3494 <_printf_common+0x88>
    3444:	0023      	movs	r3, r4
    3446:	3343      	adds	r3, #67	; 0x43
    3448:	781b      	ldrb	r3, [r3, #0]
    344a:	1e5a      	subs	r2, r3, #1
    344c:	4193      	sbcs	r3, r2
    344e:	6822      	ldr	r2, [r4, #0]
    3450:	0692      	lsls	r2, r2, #26
    3452:	d430      	bmi.n	34b6 <_printf_common+0xaa>
    3454:	0022      	movs	r2, r4
    3456:	9901      	ldr	r1, [sp, #4]
    3458:	3243      	adds	r2, #67	; 0x43
    345a:	9800      	ldr	r0, [sp, #0]
    345c:	9e08      	ldr	r6, [sp, #32]
    345e:	47b0      	blx	r6
    3460:	1c43      	adds	r3, r0, #1
    3462:	d025      	beq.n	34b0 <_printf_common+0xa4>
    3464:	2306      	movs	r3, #6
    3466:	6820      	ldr	r0, [r4, #0]
    3468:	682a      	ldr	r2, [r5, #0]
    346a:	68e1      	ldr	r1, [r4, #12]
    346c:	4003      	ands	r3, r0
    346e:	2500      	movs	r5, #0
    3470:	2b04      	cmp	r3, #4
    3472:	d103      	bne.n	347c <_printf_common+0x70>
    3474:	1a8d      	subs	r5, r1, r2
    3476:	43eb      	mvns	r3, r5
    3478:	17db      	asrs	r3, r3, #31
    347a:	401d      	ands	r5, r3
    347c:	68a3      	ldr	r3, [r4, #8]
    347e:	6922      	ldr	r2, [r4, #16]
    3480:	4293      	cmp	r3, r2
    3482:	dd01      	ble.n	3488 <_printf_common+0x7c>
    3484:	1a9b      	subs	r3, r3, r2
    3486:	18ed      	adds	r5, r5, r3
    3488:	2700      	movs	r7, #0
    348a:	42bd      	cmp	r5, r7
    348c:	d120      	bne.n	34d0 <_printf_common+0xc4>
    348e:	2000      	movs	r0, #0
    3490:	e010      	b.n	34b4 <_printf_common+0xa8>
    3492:	3701      	adds	r7, #1
    3494:	68e3      	ldr	r3, [r4, #12]
    3496:	682a      	ldr	r2, [r5, #0]
    3498:	1a9b      	subs	r3, r3, r2
    349a:	429f      	cmp	r7, r3
    349c:	dad2      	bge.n	3444 <_printf_common+0x38>
    349e:	0022      	movs	r2, r4
    34a0:	2301      	movs	r3, #1
    34a2:	3219      	adds	r2, #25
    34a4:	9901      	ldr	r1, [sp, #4]
    34a6:	9800      	ldr	r0, [sp, #0]
    34a8:	9e08      	ldr	r6, [sp, #32]
    34aa:	47b0      	blx	r6
    34ac:	1c43      	adds	r3, r0, #1
    34ae:	d1f0      	bne.n	3492 <_printf_common+0x86>
    34b0:	2001      	movs	r0, #1
    34b2:	4240      	negs	r0, r0
    34b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    34b6:	2030      	movs	r0, #48	; 0x30
    34b8:	18e1      	adds	r1, r4, r3
    34ba:	3143      	adds	r1, #67	; 0x43
    34bc:	7008      	strb	r0, [r1, #0]
    34be:	0021      	movs	r1, r4
    34c0:	1c5a      	adds	r2, r3, #1
    34c2:	3145      	adds	r1, #69	; 0x45
    34c4:	7809      	ldrb	r1, [r1, #0]
    34c6:	18a2      	adds	r2, r4, r2
    34c8:	3243      	adds	r2, #67	; 0x43
    34ca:	3302      	adds	r3, #2
    34cc:	7011      	strb	r1, [r2, #0]
    34ce:	e7c1      	b.n	3454 <_printf_common+0x48>
    34d0:	0022      	movs	r2, r4
    34d2:	2301      	movs	r3, #1
    34d4:	321a      	adds	r2, #26
    34d6:	9901      	ldr	r1, [sp, #4]
    34d8:	9800      	ldr	r0, [sp, #0]
    34da:	9e08      	ldr	r6, [sp, #32]
    34dc:	47b0      	blx	r6
    34de:	1c43      	adds	r3, r0, #1
    34e0:	d0e6      	beq.n	34b0 <_printf_common+0xa4>
    34e2:	3701      	adds	r7, #1
    34e4:	e7d1      	b.n	348a <_printf_common+0x7e>
	...

000034e8 <_printf_i>:
    34e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ea:	b08b      	sub	sp, #44	; 0x2c
    34ec:	9206      	str	r2, [sp, #24]
    34ee:	000a      	movs	r2, r1
    34f0:	3243      	adds	r2, #67	; 0x43
    34f2:	9307      	str	r3, [sp, #28]
    34f4:	9005      	str	r0, [sp, #20]
    34f6:	9204      	str	r2, [sp, #16]
    34f8:	7e0a      	ldrb	r2, [r1, #24]
    34fa:	000c      	movs	r4, r1
    34fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34fe:	2a6e      	cmp	r2, #110	; 0x6e
    3500:	d100      	bne.n	3504 <_printf_i+0x1c>
    3502:	e08f      	b.n	3624 <_printf_i+0x13c>
    3504:	d817      	bhi.n	3536 <_printf_i+0x4e>
    3506:	2a63      	cmp	r2, #99	; 0x63
    3508:	d02c      	beq.n	3564 <_printf_i+0x7c>
    350a:	d808      	bhi.n	351e <_printf_i+0x36>
    350c:	2a00      	cmp	r2, #0
    350e:	d100      	bne.n	3512 <_printf_i+0x2a>
    3510:	e099      	b.n	3646 <_printf_i+0x15e>
    3512:	2a58      	cmp	r2, #88	; 0x58
    3514:	d054      	beq.n	35c0 <_printf_i+0xd8>
    3516:	0026      	movs	r6, r4
    3518:	3642      	adds	r6, #66	; 0x42
    351a:	7032      	strb	r2, [r6, #0]
    351c:	e029      	b.n	3572 <_printf_i+0x8a>
    351e:	2a64      	cmp	r2, #100	; 0x64
    3520:	d001      	beq.n	3526 <_printf_i+0x3e>
    3522:	2a69      	cmp	r2, #105	; 0x69
    3524:	d1f7      	bne.n	3516 <_printf_i+0x2e>
    3526:	6821      	ldr	r1, [r4, #0]
    3528:	681a      	ldr	r2, [r3, #0]
    352a:	0608      	lsls	r0, r1, #24
    352c:	d523      	bpl.n	3576 <_printf_i+0x8e>
    352e:	1d11      	adds	r1, r2, #4
    3530:	6019      	str	r1, [r3, #0]
    3532:	6815      	ldr	r5, [r2, #0]
    3534:	e025      	b.n	3582 <_printf_i+0x9a>
    3536:	2a73      	cmp	r2, #115	; 0x73
    3538:	d100      	bne.n	353c <_printf_i+0x54>
    353a:	e088      	b.n	364e <_printf_i+0x166>
    353c:	d808      	bhi.n	3550 <_printf_i+0x68>
    353e:	2a6f      	cmp	r2, #111	; 0x6f
    3540:	d029      	beq.n	3596 <_printf_i+0xae>
    3542:	2a70      	cmp	r2, #112	; 0x70
    3544:	d1e7      	bne.n	3516 <_printf_i+0x2e>
    3546:	2220      	movs	r2, #32
    3548:	6809      	ldr	r1, [r1, #0]
    354a:	430a      	orrs	r2, r1
    354c:	6022      	str	r2, [r4, #0]
    354e:	e003      	b.n	3558 <_printf_i+0x70>
    3550:	2a75      	cmp	r2, #117	; 0x75
    3552:	d020      	beq.n	3596 <_printf_i+0xae>
    3554:	2a78      	cmp	r2, #120	; 0x78
    3556:	d1de      	bne.n	3516 <_printf_i+0x2e>
    3558:	0022      	movs	r2, r4
    355a:	2178      	movs	r1, #120	; 0x78
    355c:	3245      	adds	r2, #69	; 0x45
    355e:	7011      	strb	r1, [r2, #0]
    3560:	4a6c      	ldr	r2, [pc, #432]	; (3714 <_printf_i+0x22c>)
    3562:	e030      	b.n	35c6 <_printf_i+0xde>
    3564:	000e      	movs	r6, r1
    3566:	681a      	ldr	r2, [r3, #0]
    3568:	3642      	adds	r6, #66	; 0x42
    356a:	1d11      	adds	r1, r2, #4
    356c:	6019      	str	r1, [r3, #0]
    356e:	6813      	ldr	r3, [r2, #0]
    3570:	7033      	strb	r3, [r6, #0]
    3572:	2301      	movs	r3, #1
    3574:	e079      	b.n	366a <_printf_i+0x182>
    3576:	0649      	lsls	r1, r1, #25
    3578:	d5d9      	bpl.n	352e <_printf_i+0x46>
    357a:	1d11      	adds	r1, r2, #4
    357c:	6019      	str	r1, [r3, #0]
    357e:	2300      	movs	r3, #0
    3580:	5ed5      	ldrsh	r5, [r2, r3]
    3582:	2d00      	cmp	r5, #0
    3584:	da03      	bge.n	358e <_printf_i+0xa6>
    3586:	232d      	movs	r3, #45	; 0x2d
    3588:	9a04      	ldr	r2, [sp, #16]
    358a:	426d      	negs	r5, r5
    358c:	7013      	strb	r3, [r2, #0]
    358e:	4b62      	ldr	r3, [pc, #392]	; (3718 <_printf_i+0x230>)
    3590:	270a      	movs	r7, #10
    3592:	9303      	str	r3, [sp, #12]
    3594:	e02f      	b.n	35f6 <_printf_i+0x10e>
    3596:	6820      	ldr	r0, [r4, #0]
    3598:	6819      	ldr	r1, [r3, #0]
    359a:	0605      	lsls	r5, r0, #24
    359c:	d503      	bpl.n	35a6 <_printf_i+0xbe>
    359e:	1d08      	adds	r0, r1, #4
    35a0:	6018      	str	r0, [r3, #0]
    35a2:	680d      	ldr	r5, [r1, #0]
    35a4:	e005      	b.n	35b2 <_printf_i+0xca>
    35a6:	0640      	lsls	r0, r0, #25
    35a8:	d5f9      	bpl.n	359e <_printf_i+0xb6>
    35aa:	680d      	ldr	r5, [r1, #0]
    35ac:	1d08      	adds	r0, r1, #4
    35ae:	6018      	str	r0, [r3, #0]
    35b0:	b2ad      	uxth	r5, r5
    35b2:	4b59      	ldr	r3, [pc, #356]	; (3718 <_printf_i+0x230>)
    35b4:	2708      	movs	r7, #8
    35b6:	9303      	str	r3, [sp, #12]
    35b8:	2a6f      	cmp	r2, #111	; 0x6f
    35ba:	d018      	beq.n	35ee <_printf_i+0x106>
    35bc:	270a      	movs	r7, #10
    35be:	e016      	b.n	35ee <_printf_i+0x106>
    35c0:	3145      	adds	r1, #69	; 0x45
    35c2:	700a      	strb	r2, [r1, #0]
    35c4:	4a54      	ldr	r2, [pc, #336]	; (3718 <_printf_i+0x230>)
    35c6:	9203      	str	r2, [sp, #12]
    35c8:	681a      	ldr	r2, [r3, #0]
    35ca:	6821      	ldr	r1, [r4, #0]
    35cc:	1d10      	adds	r0, r2, #4
    35ce:	6018      	str	r0, [r3, #0]
    35d0:	6815      	ldr	r5, [r2, #0]
    35d2:	0608      	lsls	r0, r1, #24
    35d4:	d522      	bpl.n	361c <_printf_i+0x134>
    35d6:	07cb      	lsls	r3, r1, #31
    35d8:	d502      	bpl.n	35e0 <_printf_i+0xf8>
    35da:	2320      	movs	r3, #32
    35dc:	4319      	orrs	r1, r3
    35de:	6021      	str	r1, [r4, #0]
    35e0:	2710      	movs	r7, #16
    35e2:	2d00      	cmp	r5, #0
    35e4:	d103      	bne.n	35ee <_printf_i+0x106>
    35e6:	2320      	movs	r3, #32
    35e8:	6822      	ldr	r2, [r4, #0]
    35ea:	439a      	bics	r2, r3
    35ec:	6022      	str	r2, [r4, #0]
    35ee:	0023      	movs	r3, r4
    35f0:	2200      	movs	r2, #0
    35f2:	3343      	adds	r3, #67	; 0x43
    35f4:	701a      	strb	r2, [r3, #0]
    35f6:	6863      	ldr	r3, [r4, #4]
    35f8:	60a3      	str	r3, [r4, #8]
    35fa:	2b00      	cmp	r3, #0
    35fc:	db5c      	blt.n	36b8 <_printf_i+0x1d0>
    35fe:	2204      	movs	r2, #4
    3600:	6821      	ldr	r1, [r4, #0]
    3602:	4391      	bics	r1, r2
    3604:	6021      	str	r1, [r4, #0]
    3606:	2d00      	cmp	r5, #0
    3608:	d158      	bne.n	36bc <_printf_i+0x1d4>
    360a:	9e04      	ldr	r6, [sp, #16]
    360c:	2b00      	cmp	r3, #0
    360e:	d064      	beq.n	36da <_printf_i+0x1f2>
    3610:	0026      	movs	r6, r4
    3612:	9b03      	ldr	r3, [sp, #12]
    3614:	3642      	adds	r6, #66	; 0x42
    3616:	781b      	ldrb	r3, [r3, #0]
    3618:	7033      	strb	r3, [r6, #0]
    361a:	e05e      	b.n	36da <_printf_i+0x1f2>
    361c:	0648      	lsls	r0, r1, #25
    361e:	d5da      	bpl.n	35d6 <_printf_i+0xee>
    3620:	b2ad      	uxth	r5, r5
    3622:	e7d8      	b.n	35d6 <_printf_i+0xee>
    3624:	6809      	ldr	r1, [r1, #0]
    3626:	681a      	ldr	r2, [r3, #0]
    3628:	0608      	lsls	r0, r1, #24
    362a:	d505      	bpl.n	3638 <_printf_i+0x150>
    362c:	1d11      	adds	r1, r2, #4
    362e:	6019      	str	r1, [r3, #0]
    3630:	6813      	ldr	r3, [r2, #0]
    3632:	6962      	ldr	r2, [r4, #20]
    3634:	601a      	str	r2, [r3, #0]
    3636:	e006      	b.n	3646 <_printf_i+0x15e>
    3638:	0649      	lsls	r1, r1, #25
    363a:	d5f7      	bpl.n	362c <_printf_i+0x144>
    363c:	1d11      	adds	r1, r2, #4
    363e:	6019      	str	r1, [r3, #0]
    3640:	6813      	ldr	r3, [r2, #0]
    3642:	8aa2      	ldrh	r2, [r4, #20]
    3644:	801a      	strh	r2, [r3, #0]
    3646:	2300      	movs	r3, #0
    3648:	9e04      	ldr	r6, [sp, #16]
    364a:	6123      	str	r3, [r4, #16]
    364c:	e054      	b.n	36f8 <_printf_i+0x210>
    364e:	681a      	ldr	r2, [r3, #0]
    3650:	1d11      	adds	r1, r2, #4
    3652:	6019      	str	r1, [r3, #0]
    3654:	6816      	ldr	r6, [r2, #0]
    3656:	2100      	movs	r1, #0
    3658:	6862      	ldr	r2, [r4, #4]
    365a:	0030      	movs	r0, r6
    365c:	f000 fc82 	bl	3f64 <memchr>
    3660:	2800      	cmp	r0, #0
    3662:	d001      	beq.n	3668 <_printf_i+0x180>
    3664:	1b80      	subs	r0, r0, r6
    3666:	6060      	str	r0, [r4, #4]
    3668:	6863      	ldr	r3, [r4, #4]
    366a:	6123      	str	r3, [r4, #16]
    366c:	2300      	movs	r3, #0
    366e:	9a04      	ldr	r2, [sp, #16]
    3670:	7013      	strb	r3, [r2, #0]
    3672:	e041      	b.n	36f8 <_printf_i+0x210>
    3674:	6923      	ldr	r3, [r4, #16]
    3676:	0032      	movs	r2, r6
    3678:	9906      	ldr	r1, [sp, #24]
    367a:	9805      	ldr	r0, [sp, #20]
    367c:	9d07      	ldr	r5, [sp, #28]
    367e:	47a8      	blx	r5
    3680:	1c43      	adds	r3, r0, #1
    3682:	d043      	beq.n	370c <_printf_i+0x224>
    3684:	6823      	ldr	r3, [r4, #0]
    3686:	2500      	movs	r5, #0
    3688:	079b      	lsls	r3, r3, #30
    368a:	d40f      	bmi.n	36ac <_printf_i+0x1c4>
    368c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    368e:	68e0      	ldr	r0, [r4, #12]
    3690:	4298      	cmp	r0, r3
    3692:	da3d      	bge.n	3710 <_printf_i+0x228>
    3694:	0018      	movs	r0, r3
    3696:	e03b      	b.n	3710 <_printf_i+0x228>
    3698:	0022      	movs	r2, r4
    369a:	2301      	movs	r3, #1
    369c:	3219      	adds	r2, #25
    369e:	9906      	ldr	r1, [sp, #24]
    36a0:	9805      	ldr	r0, [sp, #20]
    36a2:	9e07      	ldr	r6, [sp, #28]
    36a4:	47b0      	blx	r6
    36a6:	1c43      	adds	r3, r0, #1
    36a8:	d030      	beq.n	370c <_printf_i+0x224>
    36aa:	3501      	adds	r5, #1
    36ac:	68e3      	ldr	r3, [r4, #12]
    36ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    36b0:	1a9b      	subs	r3, r3, r2
    36b2:	429d      	cmp	r5, r3
    36b4:	dbf0      	blt.n	3698 <_printf_i+0x1b0>
    36b6:	e7e9      	b.n	368c <_printf_i+0x1a4>
    36b8:	2d00      	cmp	r5, #0
    36ba:	d0a9      	beq.n	3610 <_printf_i+0x128>
    36bc:	9e04      	ldr	r6, [sp, #16]
    36be:	0028      	movs	r0, r5
    36c0:	0039      	movs	r1, r7
    36c2:	f7ff fcef 	bl	30a4 <__aeabi_uidivmod>
    36c6:	9b03      	ldr	r3, [sp, #12]
    36c8:	3e01      	subs	r6, #1
    36ca:	5c5b      	ldrb	r3, [r3, r1]
    36cc:	0028      	movs	r0, r5
    36ce:	7033      	strb	r3, [r6, #0]
    36d0:	0039      	movs	r1, r7
    36d2:	f7ff fc61 	bl	2f98 <__udivsi3>
    36d6:	1e05      	subs	r5, r0, #0
    36d8:	d1f1      	bne.n	36be <_printf_i+0x1d6>
    36da:	2f08      	cmp	r7, #8
    36dc:	d109      	bne.n	36f2 <_printf_i+0x20a>
    36de:	6823      	ldr	r3, [r4, #0]
    36e0:	07db      	lsls	r3, r3, #31
    36e2:	d506      	bpl.n	36f2 <_printf_i+0x20a>
    36e4:	6863      	ldr	r3, [r4, #4]
    36e6:	6922      	ldr	r2, [r4, #16]
    36e8:	4293      	cmp	r3, r2
    36ea:	dc02      	bgt.n	36f2 <_printf_i+0x20a>
    36ec:	2330      	movs	r3, #48	; 0x30
    36ee:	3e01      	subs	r6, #1
    36f0:	7033      	strb	r3, [r6, #0]
    36f2:	9b04      	ldr	r3, [sp, #16]
    36f4:	1b9b      	subs	r3, r3, r6
    36f6:	6123      	str	r3, [r4, #16]
    36f8:	9b07      	ldr	r3, [sp, #28]
    36fa:	aa09      	add	r2, sp, #36	; 0x24
    36fc:	9300      	str	r3, [sp, #0]
    36fe:	0021      	movs	r1, r4
    3700:	9b06      	ldr	r3, [sp, #24]
    3702:	9805      	ldr	r0, [sp, #20]
    3704:	f7ff fe82 	bl	340c <_printf_common>
    3708:	1c43      	adds	r3, r0, #1
    370a:	d1b3      	bne.n	3674 <_printf_i+0x18c>
    370c:	2001      	movs	r0, #1
    370e:	4240      	negs	r0, r0
    3710:	b00b      	add	sp, #44	; 0x2c
    3712:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3714:	00004b0a 	.word	0x00004b0a
    3718:	00004af9 	.word	0x00004af9

0000371c <iprintf>:
    371c:	b40f      	push	{r0, r1, r2, r3}
    371e:	4b0b      	ldr	r3, [pc, #44]	; (374c <iprintf+0x30>)
    3720:	b513      	push	{r0, r1, r4, lr}
    3722:	681c      	ldr	r4, [r3, #0]
    3724:	2c00      	cmp	r4, #0
    3726:	d005      	beq.n	3734 <iprintf+0x18>
    3728:	69a3      	ldr	r3, [r4, #24]
    372a:	2b00      	cmp	r3, #0
    372c:	d102      	bne.n	3734 <iprintf+0x18>
    372e:	0020      	movs	r0, r4
    3730:	f000 fb0c 	bl	3d4c <__sinit>
    3734:	ab05      	add	r3, sp, #20
    3736:	9a04      	ldr	r2, [sp, #16]
    3738:	68a1      	ldr	r1, [r4, #8]
    373a:	0020      	movs	r0, r4
    373c:	9301      	str	r3, [sp, #4]
    373e:	f7ff fd3d 	bl	31bc <_vfiprintf_r>
    3742:	bc16      	pop	{r1, r2, r4}
    3744:	bc08      	pop	{r3}
    3746:	b004      	add	sp, #16
    3748:	4718      	bx	r3
    374a:	46c0      	nop			; (mov r8, r8)
    374c:	20000004 	.word	0x20000004

00003750 <_puts_r>:
    3750:	b570      	push	{r4, r5, r6, lr}
    3752:	0005      	movs	r5, r0
    3754:	000e      	movs	r6, r1
    3756:	2800      	cmp	r0, #0
    3758:	d004      	beq.n	3764 <_puts_r+0x14>
    375a:	6983      	ldr	r3, [r0, #24]
    375c:	2b00      	cmp	r3, #0
    375e:	d101      	bne.n	3764 <_puts_r+0x14>
    3760:	f000 faf4 	bl	3d4c <__sinit>
    3764:	69ab      	ldr	r3, [r5, #24]
    3766:	68ac      	ldr	r4, [r5, #8]
    3768:	2b00      	cmp	r3, #0
    376a:	d102      	bne.n	3772 <_puts_r+0x22>
    376c:	0028      	movs	r0, r5
    376e:	f000 faed 	bl	3d4c <__sinit>
    3772:	4b24      	ldr	r3, [pc, #144]	; (3804 <_puts_r+0xb4>)
    3774:	429c      	cmp	r4, r3
    3776:	d10f      	bne.n	3798 <_puts_r+0x48>
    3778:	686c      	ldr	r4, [r5, #4]
    377a:	89a3      	ldrh	r3, [r4, #12]
    377c:	071b      	lsls	r3, r3, #28
    377e:	d502      	bpl.n	3786 <_puts_r+0x36>
    3780:	6923      	ldr	r3, [r4, #16]
    3782:	2b00      	cmp	r3, #0
    3784:	d120      	bne.n	37c8 <_puts_r+0x78>
    3786:	0021      	movs	r1, r4
    3788:	0028      	movs	r0, r5
    378a:	f000 f971 	bl	3a70 <__swsetup_r>
    378e:	2800      	cmp	r0, #0
    3790:	d01a      	beq.n	37c8 <_puts_r+0x78>
    3792:	2001      	movs	r0, #1
    3794:	4240      	negs	r0, r0
    3796:	bd70      	pop	{r4, r5, r6, pc}
    3798:	4b1b      	ldr	r3, [pc, #108]	; (3808 <_puts_r+0xb8>)
    379a:	429c      	cmp	r4, r3
    379c:	d101      	bne.n	37a2 <_puts_r+0x52>
    379e:	68ac      	ldr	r4, [r5, #8]
    37a0:	e7eb      	b.n	377a <_puts_r+0x2a>
    37a2:	4b1a      	ldr	r3, [pc, #104]	; (380c <_puts_r+0xbc>)
    37a4:	429c      	cmp	r4, r3
    37a6:	d1e8      	bne.n	377a <_puts_r+0x2a>
    37a8:	68ec      	ldr	r4, [r5, #12]
    37aa:	e7e6      	b.n	377a <_puts_r+0x2a>
    37ac:	3b01      	subs	r3, #1
    37ae:	3601      	adds	r6, #1
    37b0:	60a3      	str	r3, [r4, #8]
    37b2:	2b00      	cmp	r3, #0
    37b4:	da04      	bge.n	37c0 <_puts_r+0x70>
    37b6:	69a2      	ldr	r2, [r4, #24]
    37b8:	4293      	cmp	r3, r2
    37ba:	db16      	blt.n	37ea <_puts_r+0x9a>
    37bc:	290a      	cmp	r1, #10
    37be:	d014      	beq.n	37ea <_puts_r+0x9a>
    37c0:	6823      	ldr	r3, [r4, #0]
    37c2:	1c5a      	adds	r2, r3, #1
    37c4:	6022      	str	r2, [r4, #0]
    37c6:	7019      	strb	r1, [r3, #0]
    37c8:	7831      	ldrb	r1, [r6, #0]
    37ca:	68a3      	ldr	r3, [r4, #8]
    37cc:	2900      	cmp	r1, #0
    37ce:	d1ed      	bne.n	37ac <_puts_r+0x5c>
    37d0:	3b01      	subs	r3, #1
    37d2:	60a3      	str	r3, [r4, #8]
    37d4:	2b00      	cmp	r3, #0
    37d6:	da0f      	bge.n	37f8 <_puts_r+0xa8>
    37d8:	0022      	movs	r2, r4
    37da:	310a      	adds	r1, #10
    37dc:	0028      	movs	r0, r5
    37de:	f000 f8f1 	bl	39c4 <__swbuf_r>
    37e2:	1c43      	adds	r3, r0, #1
    37e4:	d0d5      	beq.n	3792 <_puts_r+0x42>
    37e6:	200a      	movs	r0, #10
    37e8:	e7d5      	b.n	3796 <_puts_r+0x46>
    37ea:	0022      	movs	r2, r4
    37ec:	0028      	movs	r0, r5
    37ee:	f000 f8e9 	bl	39c4 <__swbuf_r>
    37f2:	1c43      	adds	r3, r0, #1
    37f4:	d1e8      	bne.n	37c8 <_puts_r+0x78>
    37f6:	e7cc      	b.n	3792 <_puts_r+0x42>
    37f8:	200a      	movs	r0, #10
    37fa:	6823      	ldr	r3, [r4, #0]
    37fc:	1c5a      	adds	r2, r3, #1
    37fe:	6022      	str	r2, [r4, #0]
    3800:	7018      	strb	r0, [r3, #0]
    3802:	e7c8      	b.n	3796 <_puts_r+0x46>
    3804:	00004b3c 	.word	0x00004b3c
    3808:	00004b5c 	.word	0x00004b5c
    380c:	00004b1c 	.word	0x00004b1c

00003810 <puts>:
    3810:	b510      	push	{r4, lr}
    3812:	4b03      	ldr	r3, [pc, #12]	; (3820 <puts+0x10>)
    3814:	0001      	movs	r1, r0
    3816:	6818      	ldr	r0, [r3, #0]
    3818:	f7ff ff9a 	bl	3750 <_puts_r>
    381c:	bd10      	pop	{r4, pc}
    381e:	46c0      	nop			; (mov r8, r8)
    3820:	20000004 	.word	0x20000004

00003824 <setbuf>:
    3824:	424a      	negs	r2, r1
    3826:	414a      	adcs	r2, r1
    3828:	2380      	movs	r3, #128	; 0x80
    382a:	b510      	push	{r4, lr}
    382c:	0052      	lsls	r2, r2, #1
    382e:	00db      	lsls	r3, r3, #3
    3830:	f000 f81c 	bl	386c <setvbuf>
    3834:	bd10      	pop	{r4, pc}

00003836 <setjmp>:
    3836:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    3838:	4641      	mov	r1, r8
    383a:	464a      	mov	r2, r9
    383c:	4653      	mov	r3, sl
    383e:	465c      	mov	r4, fp
    3840:	466d      	mov	r5, sp
    3842:	4676      	mov	r6, lr
    3844:	c07e      	stmia	r0!, {r1, r2, r3, r4, r5, r6}
    3846:	3828      	subs	r0, #40	; 0x28
    3848:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    384a:	2000      	movs	r0, #0
    384c:	4770      	bx	lr

0000384e <longjmp>:
    384e:	3010      	adds	r0, #16
    3850:	c87c      	ldmia	r0!, {r2, r3, r4, r5, r6}
    3852:	4690      	mov	r8, r2
    3854:	4699      	mov	r9, r3
    3856:	46a2      	mov	sl, r4
    3858:	46ab      	mov	fp, r5
    385a:	46b5      	mov	sp, r6
    385c:	c808      	ldmia	r0!, {r3}
    385e:	3828      	subs	r0, #40	; 0x28
    3860:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    3862:	1c08      	adds	r0, r1, #0
    3864:	d100      	bne.n	3868 <longjmp+0x1a>
    3866:	2001      	movs	r0, #1
    3868:	4718      	bx	r3
	...

0000386c <setvbuf>:
    386c:	b5f0      	push	{r4, r5, r6, r7, lr}
    386e:	001d      	movs	r5, r3
    3870:	4b4f      	ldr	r3, [pc, #316]	; (39b0 <setvbuf+0x144>)
    3872:	b085      	sub	sp, #20
    3874:	681e      	ldr	r6, [r3, #0]
    3876:	0004      	movs	r4, r0
    3878:	000f      	movs	r7, r1
    387a:	9200      	str	r2, [sp, #0]
    387c:	2e00      	cmp	r6, #0
    387e:	d005      	beq.n	388c <setvbuf+0x20>
    3880:	69b3      	ldr	r3, [r6, #24]
    3882:	2b00      	cmp	r3, #0
    3884:	d102      	bne.n	388c <setvbuf+0x20>
    3886:	0030      	movs	r0, r6
    3888:	f000 fa60 	bl	3d4c <__sinit>
    388c:	4b49      	ldr	r3, [pc, #292]	; (39b4 <setvbuf+0x148>)
    388e:	429c      	cmp	r4, r3
    3890:	d150      	bne.n	3934 <setvbuf+0xc8>
    3892:	6874      	ldr	r4, [r6, #4]
    3894:	9b00      	ldr	r3, [sp, #0]
    3896:	2b02      	cmp	r3, #2
    3898:	d005      	beq.n	38a6 <setvbuf+0x3a>
    389a:	2b01      	cmp	r3, #1
    389c:	d900      	bls.n	38a0 <setvbuf+0x34>
    389e:	e084      	b.n	39aa <setvbuf+0x13e>
    38a0:	2d00      	cmp	r5, #0
    38a2:	da00      	bge.n	38a6 <setvbuf+0x3a>
    38a4:	e081      	b.n	39aa <setvbuf+0x13e>
    38a6:	0021      	movs	r1, r4
    38a8:	0030      	movs	r0, r6
    38aa:	f000 f9e1 	bl	3c70 <_fflush_r>
    38ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    38b0:	2900      	cmp	r1, #0
    38b2:	d008      	beq.n	38c6 <setvbuf+0x5a>
    38b4:	0023      	movs	r3, r4
    38b6:	3344      	adds	r3, #68	; 0x44
    38b8:	4299      	cmp	r1, r3
    38ba:	d002      	beq.n	38c2 <setvbuf+0x56>
    38bc:	0030      	movs	r0, r6
    38be:	f000 fb5d 	bl	3f7c <_free_r>
    38c2:	2300      	movs	r3, #0
    38c4:	6363      	str	r3, [r4, #52]	; 0x34
    38c6:	2300      	movs	r3, #0
    38c8:	61a3      	str	r3, [r4, #24]
    38ca:	6063      	str	r3, [r4, #4]
    38cc:	89a3      	ldrh	r3, [r4, #12]
    38ce:	061b      	lsls	r3, r3, #24
    38d0:	d503      	bpl.n	38da <setvbuf+0x6e>
    38d2:	6921      	ldr	r1, [r4, #16]
    38d4:	0030      	movs	r0, r6
    38d6:	f000 fb51 	bl	3f7c <_free_r>
    38da:	89a3      	ldrh	r3, [r4, #12]
    38dc:	4a36      	ldr	r2, [pc, #216]	; (39b8 <setvbuf+0x14c>)
    38de:	4013      	ands	r3, r2
    38e0:	81a3      	strh	r3, [r4, #12]
    38e2:	9b00      	ldr	r3, [sp, #0]
    38e4:	2b02      	cmp	r3, #2
    38e6:	d05a      	beq.n	399e <setvbuf+0x132>
    38e8:	ab03      	add	r3, sp, #12
    38ea:	aa02      	add	r2, sp, #8
    38ec:	0021      	movs	r1, r4
    38ee:	0030      	movs	r0, r6
    38f0:	f000 fac2 	bl	3e78 <__swhatbuf_r>
    38f4:	89a3      	ldrh	r3, [r4, #12]
    38f6:	4318      	orrs	r0, r3
    38f8:	81a0      	strh	r0, [r4, #12]
    38fa:	2d00      	cmp	r5, #0
    38fc:	d124      	bne.n	3948 <setvbuf+0xdc>
    38fe:	9d02      	ldr	r5, [sp, #8]
    3900:	0028      	movs	r0, r5
    3902:	f000 fb25 	bl	3f50 <malloc>
    3906:	9501      	str	r5, [sp, #4]
    3908:	1e07      	subs	r7, r0, #0
    390a:	d142      	bne.n	3992 <setvbuf+0x126>
    390c:	9b02      	ldr	r3, [sp, #8]
    390e:	9301      	str	r3, [sp, #4]
    3910:	42ab      	cmp	r3, r5
    3912:	d139      	bne.n	3988 <setvbuf+0x11c>
    3914:	2001      	movs	r0, #1
    3916:	4240      	negs	r0, r0
    3918:	2302      	movs	r3, #2
    391a:	89a2      	ldrh	r2, [r4, #12]
    391c:	4313      	orrs	r3, r2
    391e:	81a3      	strh	r3, [r4, #12]
    3920:	2300      	movs	r3, #0
    3922:	60a3      	str	r3, [r4, #8]
    3924:	0023      	movs	r3, r4
    3926:	3347      	adds	r3, #71	; 0x47
    3928:	6023      	str	r3, [r4, #0]
    392a:	6123      	str	r3, [r4, #16]
    392c:	2301      	movs	r3, #1
    392e:	6163      	str	r3, [r4, #20]
    3930:	b005      	add	sp, #20
    3932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3934:	4b21      	ldr	r3, [pc, #132]	; (39bc <setvbuf+0x150>)
    3936:	429c      	cmp	r4, r3
    3938:	d101      	bne.n	393e <setvbuf+0xd2>
    393a:	68b4      	ldr	r4, [r6, #8]
    393c:	e7aa      	b.n	3894 <setvbuf+0x28>
    393e:	4b20      	ldr	r3, [pc, #128]	; (39c0 <setvbuf+0x154>)
    3940:	429c      	cmp	r4, r3
    3942:	d1a7      	bne.n	3894 <setvbuf+0x28>
    3944:	68f4      	ldr	r4, [r6, #12]
    3946:	e7a5      	b.n	3894 <setvbuf+0x28>
    3948:	2f00      	cmp	r7, #0
    394a:	d0d9      	beq.n	3900 <setvbuf+0x94>
    394c:	69b3      	ldr	r3, [r6, #24]
    394e:	2b00      	cmp	r3, #0
    3950:	d102      	bne.n	3958 <setvbuf+0xec>
    3952:	0030      	movs	r0, r6
    3954:	f000 f9fa 	bl	3d4c <__sinit>
    3958:	9b00      	ldr	r3, [sp, #0]
    395a:	2b01      	cmp	r3, #1
    395c:	d103      	bne.n	3966 <setvbuf+0xfa>
    395e:	89a3      	ldrh	r3, [r4, #12]
    3960:	9a00      	ldr	r2, [sp, #0]
    3962:	431a      	orrs	r2, r3
    3964:	81a2      	strh	r2, [r4, #12]
    3966:	2008      	movs	r0, #8
    3968:	89a3      	ldrh	r3, [r4, #12]
    396a:	6027      	str	r7, [r4, #0]
    396c:	6127      	str	r7, [r4, #16]
    396e:	6165      	str	r5, [r4, #20]
    3970:	4018      	ands	r0, r3
    3972:	d018      	beq.n	39a6 <setvbuf+0x13a>
    3974:	2001      	movs	r0, #1
    3976:	4018      	ands	r0, r3
    3978:	2300      	movs	r3, #0
    397a:	4298      	cmp	r0, r3
    397c:	d011      	beq.n	39a2 <setvbuf+0x136>
    397e:	426d      	negs	r5, r5
    3980:	60a3      	str	r3, [r4, #8]
    3982:	61a5      	str	r5, [r4, #24]
    3984:	0018      	movs	r0, r3
    3986:	e7d3      	b.n	3930 <setvbuf+0xc4>
    3988:	9801      	ldr	r0, [sp, #4]
    398a:	f000 fae1 	bl	3f50 <malloc>
    398e:	1e07      	subs	r7, r0, #0
    3990:	d0c0      	beq.n	3914 <setvbuf+0xa8>
    3992:	2380      	movs	r3, #128	; 0x80
    3994:	89a2      	ldrh	r2, [r4, #12]
    3996:	9d01      	ldr	r5, [sp, #4]
    3998:	4313      	orrs	r3, r2
    399a:	81a3      	strh	r3, [r4, #12]
    399c:	e7d6      	b.n	394c <setvbuf+0xe0>
    399e:	2000      	movs	r0, #0
    39a0:	e7ba      	b.n	3918 <setvbuf+0xac>
    39a2:	60a5      	str	r5, [r4, #8]
    39a4:	e7c4      	b.n	3930 <setvbuf+0xc4>
    39a6:	60a0      	str	r0, [r4, #8]
    39a8:	e7c2      	b.n	3930 <setvbuf+0xc4>
    39aa:	2001      	movs	r0, #1
    39ac:	4240      	negs	r0, r0
    39ae:	e7bf      	b.n	3930 <setvbuf+0xc4>
    39b0:	20000004 	.word	0x20000004
    39b4:	00004b3c 	.word	0x00004b3c
    39b8:	fffff35c 	.word	0xfffff35c
    39bc:	00004b5c 	.word	0x00004b5c
    39c0:	00004b1c 	.word	0x00004b1c

000039c4 <__swbuf_r>:
    39c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39c6:	0005      	movs	r5, r0
    39c8:	000e      	movs	r6, r1
    39ca:	0014      	movs	r4, r2
    39cc:	2800      	cmp	r0, #0
    39ce:	d004      	beq.n	39da <__swbuf_r+0x16>
    39d0:	6983      	ldr	r3, [r0, #24]
    39d2:	2b00      	cmp	r3, #0
    39d4:	d101      	bne.n	39da <__swbuf_r+0x16>
    39d6:	f000 f9b9 	bl	3d4c <__sinit>
    39da:	4b22      	ldr	r3, [pc, #136]	; (3a64 <__swbuf_r+0xa0>)
    39dc:	429c      	cmp	r4, r3
    39de:	d12d      	bne.n	3a3c <__swbuf_r+0x78>
    39e0:	686c      	ldr	r4, [r5, #4]
    39e2:	69a3      	ldr	r3, [r4, #24]
    39e4:	60a3      	str	r3, [r4, #8]
    39e6:	89a3      	ldrh	r3, [r4, #12]
    39e8:	071b      	lsls	r3, r3, #28
    39ea:	d531      	bpl.n	3a50 <__swbuf_r+0x8c>
    39ec:	6923      	ldr	r3, [r4, #16]
    39ee:	2b00      	cmp	r3, #0
    39f0:	d02e      	beq.n	3a50 <__swbuf_r+0x8c>
    39f2:	6823      	ldr	r3, [r4, #0]
    39f4:	6922      	ldr	r2, [r4, #16]
    39f6:	b2f7      	uxtb	r7, r6
    39f8:	1a98      	subs	r0, r3, r2
    39fa:	6963      	ldr	r3, [r4, #20]
    39fc:	b2f6      	uxtb	r6, r6
    39fe:	4298      	cmp	r0, r3
    3a00:	db05      	blt.n	3a0e <__swbuf_r+0x4a>
    3a02:	0021      	movs	r1, r4
    3a04:	0028      	movs	r0, r5
    3a06:	f000 f933 	bl	3c70 <_fflush_r>
    3a0a:	2800      	cmp	r0, #0
    3a0c:	d126      	bne.n	3a5c <__swbuf_r+0x98>
    3a0e:	68a3      	ldr	r3, [r4, #8]
    3a10:	3001      	adds	r0, #1
    3a12:	3b01      	subs	r3, #1
    3a14:	60a3      	str	r3, [r4, #8]
    3a16:	6823      	ldr	r3, [r4, #0]
    3a18:	1c5a      	adds	r2, r3, #1
    3a1a:	6022      	str	r2, [r4, #0]
    3a1c:	701f      	strb	r7, [r3, #0]
    3a1e:	6963      	ldr	r3, [r4, #20]
    3a20:	4298      	cmp	r0, r3
    3a22:	d004      	beq.n	3a2e <__swbuf_r+0x6a>
    3a24:	89a3      	ldrh	r3, [r4, #12]
    3a26:	07db      	lsls	r3, r3, #31
    3a28:	d51a      	bpl.n	3a60 <__swbuf_r+0x9c>
    3a2a:	2e0a      	cmp	r6, #10
    3a2c:	d118      	bne.n	3a60 <__swbuf_r+0x9c>
    3a2e:	0021      	movs	r1, r4
    3a30:	0028      	movs	r0, r5
    3a32:	f000 f91d 	bl	3c70 <_fflush_r>
    3a36:	2800      	cmp	r0, #0
    3a38:	d012      	beq.n	3a60 <__swbuf_r+0x9c>
    3a3a:	e00f      	b.n	3a5c <__swbuf_r+0x98>
    3a3c:	4b0a      	ldr	r3, [pc, #40]	; (3a68 <__swbuf_r+0xa4>)
    3a3e:	429c      	cmp	r4, r3
    3a40:	d101      	bne.n	3a46 <__swbuf_r+0x82>
    3a42:	68ac      	ldr	r4, [r5, #8]
    3a44:	e7cd      	b.n	39e2 <__swbuf_r+0x1e>
    3a46:	4b09      	ldr	r3, [pc, #36]	; (3a6c <__swbuf_r+0xa8>)
    3a48:	429c      	cmp	r4, r3
    3a4a:	d1ca      	bne.n	39e2 <__swbuf_r+0x1e>
    3a4c:	68ec      	ldr	r4, [r5, #12]
    3a4e:	e7c8      	b.n	39e2 <__swbuf_r+0x1e>
    3a50:	0021      	movs	r1, r4
    3a52:	0028      	movs	r0, r5
    3a54:	f000 f80c 	bl	3a70 <__swsetup_r>
    3a58:	2800      	cmp	r0, #0
    3a5a:	d0ca      	beq.n	39f2 <__swbuf_r+0x2e>
    3a5c:	2601      	movs	r6, #1
    3a5e:	4276      	negs	r6, r6
    3a60:	0030      	movs	r0, r6
    3a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a64:	00004b3c 	.word	0x00004b3c
    3a68:	00004b5c 	.word	0x00004b5c
    3a6c:	00004b1c 	.word	0x00004b1c

00003a70 <__swsetup_r>:
    3a70:	4b36      	ldr	r3, [pc, #216]	; (3b4c <__swsetup_r+0xdc>)
    3a72:	b570      	push	{r4, r5, r6, lr}
    3a74:	681d      	ldr	r5, [r3, #0]
    3a76:	0006      	movs	r6, r0
    3a78:	000c      	movs	r4, r1
    3a7a:	2d00      	cmp	r5, #0
    3a7c:	d005      	beq.n	3a8a <__swsetup_r+0x1a>
    3a7e:	69ab      	ldr	r3, [r5, #24]
    3a80:	2b00      	cmp	r3, #0
    3a82:	d102      	bne.n	3a8a <__swsetup_r+0x1a>
    3a84:	0028      	movs	r0, r5
    3a86:	f000 f961 	bl	3d4c <__sinit>
    3a8a:	4b31      	ldr	r3, [pc, #196]	; (3b50 <__swsetup_r+0xe0>)
    3a8c:	429c      	cmp	r4, r3
    3a8e:	d10f      	bne.n	3ab0 <__swsetup_r+0x40>
    3a90:	686c      	ldr	r4, [r5, #4]
    3a92:	230c      	movs	r3, #12
    3a94:	5ee2      	ldrsh	r2, [r4, r3]
    3a96:	b293      	uxth	r3, r2
    3a98:	0719      	lsls	r1, r3, #28
    3a9a:	d42d      	bmi.n	3af8 <__swsetup_r+0x88>
    3a9c:	06d9      	lsls	r1, r3, #27
    3a9e:	d411      	bmi.n	3ac4 <__swsetup_r+0x54>
    3aa0:	2309      	movs	r3, #9
    3aa2:	2001      	movs	r0, #1
    3aa4:	6033      	str	r3, [r6, #0]
    3aa6:	3337      	adds	r3, #55	; 0x37
    3aa8:	4313      	orrs	r3, r2
    3aaa:	81a3      	strh	r3, [r4, #12]
    3aac:	4240      	negs	r0, r0
    3aae:	bd70      	pop	{r4, r5, r6, pc}
    3ab0:	4b28      	ldr	r3, [pc, #160]	; (3b54 <__swsetup_r+0xe4>)
    3ab2:	429c      	cmp	r4, r3
    3ab4:	d101      	bne.n	3aba <__swsetup_r+0x4a>
    3ab6:	68ac      	ldr	r4, [r5, #8]
    3ab8:	e7eb      	b.n	3a92 <__swsetup_r+0x22>
    3aba:	4b27      	ldr	r3, [pc, #156]	; (3b58 <__swsetup_r+0xe8>)
    3abc:	429c      	cmp	r4, r3
    3abe:	d1e8      	bne.n	3a92 <__swsetup_r+0x22>
    3ac0:	68ec      	ldr	r4, [r5, #12]
    3ac2:	e7e6      	b.n	3a92 <__swsetup_r+0x22>
    3ac4:	075b      	lsls	r3, r3, #29
    3ac6:	d513      	bpl.n	3af0 <__swsetup_r+0x80>
    3ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3aca:	2900      	cmp	r1, #0
    3acc:	d008      	beq.n	3ae0 <__swsetup_r+0x70>
    3ace:	0023      	movs	r3, r4
    3ad0:	3344      	adds	r3, #68	; 0x44
    3ad2:	4299      	cmp	r1, r3
    3ad4:	d002      	beq.n	3adc <__swsetup_r+0x6c>
    3ad6:	0030      	movs	r0, r6
    3ad8:	f000 fa50 	bl	3f7c <_free_r>
    3adc:	2300      	movs	r3, #0
    3ade:	6363      	str	r3, [r4, #52]	; 0x34
    3ae0:	2224      	movs	r2, #36	; 0x24
    3ae2:	89a3      	ldrh	r3, [r4, #12]
    3ae4:	4393      	bics	r3, r2
    3ae6:	81a3      	strh	r3, [r4, #12]
    3ae8:	2300      	movs	r3, #0
    3aea:	6063      	str	r3, [r4, #4]
    3aec:	6923      	ldr	r3, [r4, #16]
    3aee:	6023      	str	r3, [r4, #0]
    3af0:	2308      	movs	r3, #8
    3af2:	89a2      	ldrh	r2, [r4, #12]
    3af4:	4313      	orrs	r3, r2
    3af6:	81a3      	strh	r3, [r4, #12]
    3af8:	6923      	ldr	r3, [r4, #16]
    3afa:	2b00      	cmp	r3, #0
    3afc:	d10b      	bne.n	3b16 <__swsetup_r+0xa6>
    3afe:	21a0      	movs	r1, #160	; 0xa0
    3b00:	2280      	movs	r2, #128	; 0x80
    3b02:	89a3      	ldrh	r3, [r4, #12]
    3b04:	0089      	lsls	r1, r1, #2
    3b06:	0092      	lsls	r2, r2, #2
    3b08:	400b      	ands	r3, r1
    3b0a:	4293      	cmp	r3, r2
    3b0c:	d003      	beq.n	3b16 <__swsetup_r+0xa6>
    3b0e:	0021      	movs	r1, r4
    3b10:	0030      	movs	r0, r6
    3b12:	f000 f9d9 	bl	3ec8 <__smakebuf_r>
    3b16:	2301      	movs	r3, #1
    3b18:	89a2      	ldrh	r2, [r4, #12]
    3b1a:	4013      	ands	r3, r2
    3b1c:	d011      	beq.n	3b42 <__swsetup_r+0xd2>
    3b1e:	2300      	movs	r3, #0
    3b20:	60a3      	str	r3, [r4, #8]
    3b22:	6963      	ldr	r3, [r4, #20]
    3b24:	425b      	negs	r3, r3
    3b26:	61a3      	str	r3, [r4, #24]
    3b28:	2000      	movs	r0, #0
    3b2a:	6923      	ldr	r3, [r4, #16]
    3b2c:	4283      	cmp	r3, r0
    3b2e:	d1be      	bne.n	3aae <__swsetup_r+0x3e>
    3b30:	230c      	movs	r3, #12
    3b32:	5ee2      	ldrsh	r2, [r4, r3]
    3b34:	0613      	lsls	r3, r2, #24
    3b36:	d5ba      	bpl.n	3aae <__swsetup_r+0x3e>
    3b38:	2340      	movs	r3, #64	; 0x40
    3b3a:	4313      	orrs	r3, r2
    3b3c:	81a3      	strh	r3, [r4, #12]
    3b3e:	3801      	subs	r0, #1
    3b40:	e7b5      	b.n	3aae <__swsetup_r+0x3e>
    3b42:	0792      	lsls	r2, r2, #30
    3b44:	d400      	bmi.n	3b48 <__swsetup_r+0xd8>
    3b46:	6963      	ldr	r3, [r4, #20]
    3b48:	60a3      	str	r3, [r4, #8]
    3b4a:	e7ed      	b.n	3b28 <__swsetup_r+0xb8>
    3b4c:	20000004 	.word	0x20000004
    3b50:	00004b3c 	.word	0x00004b3c
    3b54:	00004b5c 	.word	0x00004b5c
    3b58:	00004b1c 	.word	0x00004b1c

00003b5c <__sflush_r>:
    3b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b5e:	898a      	ldrh	r2, [r1, #12]
    3b60:	0005      	movs	r5, r0
    3b62:	000c      	movs	r4, r1
    3b64:	0713      	lsls	r3, r2, #28
    3b66:	d460      	bmi.n	3c2a <__sflush_r+0xce>
    3b68:	684b      	ldr	r3, [r1, #4]
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	dc04      	bgt.n	3b78 <__sflush_r+0x1c>
    3b6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3b70:	2b00      	cmp	r3, #0
    3b72:	dc01      	bgt.n	3b78 <__sflush_r+0x1c>
    3b74:	2000      	movs	r0, #0
    3b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b78:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3b7a:	2f00      	cmp	r7, #0
    3b7c:	d0fa      	beq.n	3b74 <__sflush_r+0x18>
    3b7e:	2300      	movs	r3, #0
    3b80:	682e      	ldr	r6, [r5, #0]
    3b82:	602b      	str	r3, [r5, #0]
    3b84:	2380      	movs	r3, #128	; 0x80
    3b86:	015b      	lsls	r3, r3, #5
    3b88:	401a      	ands	r2, r3
    3b8a:	d034      	beq.n	3bf6 <__sflush_r+0x9a>
    3b8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3b8e:	89a3      	ldrh	r3, [r4, #12]
    3b90:	075b      	lsls	r3, r3, #29
    3b92:	d506      	bpl.n	3ba2 <__sflush_r+0x46>
    3b94:	6863      	ldr	r3, [r4, #4]
    3b96:	1ac0      	subs	r0, r0, r3
    3b98:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d001      	beq.n	3ba2 <__sflush_r+0x46>
    3b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3ba0:	1ac0      	subs	r0, r0, r3
    3ba2:	0002      	movs	r2, r0
    3ba4:	6a21      	ldr	r1, [r4, #32]
    3ba6:	2300      	movs	r3, #0
    3ba8:	0028      	movs	r0, r5
    3baa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3bac:	47b8      	blx	r7
    3bae:	89a1      	ldrh	r1, [r4, #12]
    3bb0:	1c43      	adds	r3, r0, #1
    3bb2:	d106      	bne.n	3bc2 <__sflush_r+0x66>
    3bb4:	682b      	ldr	r3, [r5, #0]
    3bb6:	2b1d      	cmp	r3, #29
    3bb8:	d831      	bhi.n	3c1e <__sflush_r+0xc2>
    3bba:	4a2c      	ldr	r2, [pc, #176]	; (3c6c <__sflush_r+0x110>)
    3bbc:	40da      	lsrs	r2, r3
    3bbe:	07d3      	lsls	r3, r2, #31
    3bc0:	d52d      	bpl.n	3c1e <__sflush_r+0xc2>
    3bc2:	2300      	movs	r3, #0
    3bc4:	6063      	str	r3, [r4, #4]
    3bc6:	6923      	ldr	r3, [r4, #16]
    3bc8:	6023      	str	r3, [r4, #0]
    3bca:	04cb      	lsls	r3, r1, #19
    3bcc:	d505      	bpl.n	3bda <__sflush_r+0x7e>
    3bce:	1c43      	adds	r3, r0, #1
    3bd0:	d102      	bne.n	3bd8 <__sflush_r+0x7c>
    3bd2:	682b      	ldr	r3, [r5, #0]
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d100      	bne.n	3bda <__sflush_r+0x7e>
    3bd8:	6560      	str	r0, [r4, #84]	; 0x54
    3bda:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3bdc:	602e      	str	r6, [r5, #0]
    3bde:	2900      	cmp	r1, #0
    3be0:	d0c8      	beq.n	3b74 <__sflush_r+0x18>
    3be2:	0023      	movs	r3, r4
    3be4:	3344      	adds	r3, #68	; 0x44
    3be6:	4299      	cmp	r1, r3
    3be8:	d002      	beq.n	3bf0 <__sflush_r+0x94>
    3bea:	0028      	movs	r0, r5
    3bec:	f000 f9c6 	bl	3f7c <_free_r>
    3bf0:	2000      	movs	r0, #0
    3bf2:	6360      	str	r0, [r4, #52]	; 0x34
    3bf4:	e7bf      	b.n	3b76 <__sflush_r+0x1a>
    3bf6:	2301      	movs	r3, #1
    3bf8:	6a21      	ldr	r1, [r4, #32]
    3bfa:	0028      	movs	r0, r5
    3bfc:	47b8      	blx	r7
    3bfe:	1c43      	adds	r3, r0, #1
    3c00:	d1c5      	bne.n	3b8e <__sflush_r+0x32>
    3c02:	682b      	ldr	r3, [r5, #0]
    3c04:	2b00      	cmp	r3, #0
    3c06:	d0c2      	beq.n	3b8e <__sflush_r+0x32>
    3c08:	2b1d      	cmp	r3, #29
    3c0a:	d001      	beq.n	3c10 <__sflush_r+0xb4>
    3c0c:	2b16      	cmp	r3, #22
    3c0e:	d101      	bne.n	3c14 <__sflush_r+0xb8>
    3c10:	602e      	str	r6, [r5, #0]
    3c12:	e7af      	b.n	3b74 <__sflush_r+0x18>
    3c14:	2340      	movs	r3, #64	; 0x40
    3c16:	89a2      	ldrh	r2, [r4, #12]
    3c18:	4313      	orrs	r3, r2
    3c1a:	81a3      	strh	r3, [r4, #12]
    3c1c:	e7ab      	b.n	3b76 <__sflush_r+0x1a>
    3c1e:	2340      	movs	r3, #64	; 0x40
    3c20:	430b      	orrs	r3, r1
    3c22:	2001      	movs	r0, #1
    3c24:	81a3      	strh	r3, [r4, #12]
    3c26:	4240      	negs	r0, r0
    3c28:	e7a5      	b.n	3b76 <__sflush_r+0x1a>
    3c2a:	690f      	ldr	r7, [r1, #16]
    3c2c:	2f00      	cmp	r7, #0
    3c2e:	d0a1      	beq.n	3b74 <__sflush_r+0x18>
    3c30:	680b      	ldr	r3, [r1, #0]
    3c32:	600f      	str	r7, [r1, #0]
    3c34:	1bdb      	subs	r3, r3, r7
    3c36:	9301      	str	r3, [sp, #4]
    3c38:	2300      	movs	r3, #0
    3c3a:	0792      	lsls	r2, r2, #30
    3c3c:	d100      	bne.n	3c40 <__sflush_r+0xe4>
    3c3e:	694b      	ldr	r3, [r1, #20]
    3c40:	60a3      	str	r3, [r4, #8]
    3c42:	9b01      	ldr	r3, [sp, #4]
    3c44:	2b00      	cmp	r3, #0
    3c46:	dc00      	bgt.n	3c4a <__sflush_r+0xee>
    3c48:	e794      	b.n	3b74 <__sflush_r+0x18>
    3c4a:	9b01      	ldr	r3, [sp, #4]
    3c4c:	003a      	movs	r2, r7
    3c4e:	6a21      	ldr	r1, [r4, #32]
    3c50:	0028      	movs	r0, r5
    3c52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3c54:	47b0      	blx	r6
    3c56:	2800      	cmp	r0, #0
    3c58:	dc03      	bgt.n	3c62 <__sflush_r+0x106>
    3c5a:	2340      	movs	r3, #64	; 0x40
    3c5c:	89a2      	ldrh	r2, [r4, #12]
    3c5e:	4313      	orrs	r3, r2
    3c60:	e7df      	b.n	3c22 <__sflush_r+0xc6>
    3c62:	9b01      	ldr	r3, [sp, #4]
    3c64:	183f      	adds	r7, r7, r0
    3c66:	1a1b      	subs	r3, r3, r0
    3c68:	9301      	str	r3, [sp, #4]
    3c6a:	e7ea      	b.n	3c42 <__sflush_r+0xe6>
    3c6c:	20400001 	.word	0x20400001

00003c70 <_fflush_r>:
    3c70:	690b      	ldr	r3, [r1, #16]
    3c72:	b570      	push	{r4, r5, r6, lr}
    3c74:	0005      	movs	r5, r0
    3c76:	000c      	movs	r4, r1
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d101      	bne.n	3c80 <_fflush_r+0x10>
    3c7c:	2000      	movs	r0, #0
    3c7e:	bd70      	pop	{r4, r5, r6, pc}
    3c80:	2800      	cmp	r0, #0
    3c82:	d004      	beq.n	3c8e <_fflush_r+0x1e>
    3c84:	6983      	ldr	r3, [r0, #24]
    3c86:	2b00      	cmp	r3, #0
    3c88:	d101      	bne.n	3c8e <_fflush_r+0x1e>
    3c8a:	f000 f85f 	bl	3d4c <__sinit>
    3c8e:	4b0b      	ldr	r3, [pc, #44]	; (3cbc <_fflush_r+0x4c>)
    3c90:	429c      	cmp	r4, r3
    3c92:	d109      	bne.n	3ca8 <_fflush_r+0x38>
    3c94:	686c      	ldr	r4, [r5, #4]
    3c96:	220c      	movs	r2, #12
    3c98:	5ea3      	ldrsh	r3, [r4, r2]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d0ee      	beq.n	3c7c <_fflush_r+0xc>
    3c9e:	0021      	movs	r1, r4
    3ca0:	0028      	movs	r0, r5
    3ca2:	f7ff ff5b 	bl	3b5c <__sflush_r>
    3ca6:	e7ea      	b.n	3c7e <_fflush_r+0xe>
    3ca8:	4b05      	ldr	r3, [pc, #20]	; (3cc0 <_fflush_r+0x50>)
    3caa:	429c      	cmp	r4, r3
    3cac:	d101      	bne.n	3cb2 <_fflush_r+0x42>
    3cae:	68ac      	ldr	r4, [r5, #8]
    3cb0:	e7f1      	b.n	3c96 <_fflush_r+0x26>
    3cb2:	4b04      	ldr	r3, [pc, #16]	; (3cc4 <_fflush_r+0x54>)
    3cb4:	429c      	cmp	r4, r3
    3cb6:	d1ee      	bne.n	3c96 <_fflush_r+0x26>
    3cb8:	68ec      	ldr	r4, [r5, #12]
    3cba:	e7ec      	b.n	3c96 <_fflush_r+0x26>
    3cbc:	00004b3c 	.word	0x00004b3c
    3cc0:	00004b5c 	.word	0x00004b5c
    3cc4:	00004b1c 	.word	0x00004b1c

00003cc8 <_cleanup_r>:
    3cc8:	b510      	push	{r4, lr}
    3cca:	4902      	ldr	r1, [pc, #8]	; (3cd4 <_cleanup_r+0xc>)
    3ccc:	f000 f8b2 	bl	3e34 <_fwalk_reent>
    3cd0:	bd10      	pop	{r4, pc}
    3cd2:	46c0      	nop			; (mov r8, r8)
    3cd4:	00003c71 	.word	0x00003c71

00003cd8 <std.isra.0>:
    3cd8:	2300      	movs	r3, #0
    3cda:	b510      	push	{r4, lr}
    3cdc:	0004      	movs	r4, r0
    3cde:	6003      	str	r3, [r0, #0]
    3ce0:	6043      	str	r3, [r0, #4]
    3ce2:	6083      	str	r3, [r0, #8]
    3ce4:	8181      	strh	r1, [r0, #12]
    3ce6:	6643      	str	r3, [r0, #100]	; 0x64
    3ce8:	81c2      	strh	r2, [r0, #14]
    3cea:	6103      	str	r3, [r0, #16]
    3cec:	6143      	str	r3, [r0, #20]
    3cee:	6183      	str	r3, [r0, #24]
    3cf0:	0019      	movs	r1, r3
    3cf2:	2208      	movs	r2, #8
    3cf4:	305c      	adds	r0, #92	; 0x5c
    3cf6:	f7ff fa32 	bl	315e <memset>
    3cfa:	4b05      	ldr	r3, [pc, #20]	; (3d10 <std.isra.0+0x38>)
    3cfc:	6224      	str	r4, [r4, #32]
    3cfe:	6263      	str	r3, [r4, #36]	; 0x24
    3d00:	4b04      	ldr	r3, [pc, #16]	; (3d14 <std.isra.0+0x3c>)
    3d02:	62a3      	str	r3, [r4, #40]	; 0x28
    3d04:	4b04      	ldr	r3, [pc, #16]	; (3d18 <std.isra.0+0x40>)
    3d06:	62e3      	str	r3, [r4, #44]	; 0x2c
    3d08:	4b04      	ldr	r3, [pc, #16]	; (3d1c <std.isra.0+0x44>)
    3d0a:	6323      	str	r3, [r4, #48]	; 0x30
    3d0c:	bd10      	pop	{r4, pc}
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	000040f1 	.word	0x000040f1
    3d14:	00004119 	.word	0x00004119
    3d18:	00004151 	.word	0x00004151
    3d1c:	0000417d 	.word	0x0000417d

00003d20 <__sfmoreglue>:
    3d20:	b570      	push	{r4, r5, r6, lr}
    3d22:	2568      	movs	r5, #104	; 0x68
    3d24:	1e4a      	subs	r2, r1, #1
    3d26:	4355      	muls	r5, r2
    3d28:	000e      	movs	r6, r1
    3d2a:	0029      	movs	r1, r5
    3d2c:	3174      	adds	r1, #116	; 0x74
    3d2e:	f000 f96f 	bl	4010 <_malloc_r>
    3d32:	1e04      	subs	r4, r0, #0
    3d34:	d008      	beq.n	3d48 <__sfmoreglue+0x28>
    3d36:	2100      	movs	r1, #0
    3d38:	002a      	movs	r2, r5
    3d3a:	6001      	str	r1, [r0, #0]
    3d3c:	6046      	str	r6, [r0, #4]
    3d3e:	300c      	adds	r0, #12
    3d40:	60a0      	str	r0, [r4, #8]
    3d42:	3268      	adds	r2, #104	; 0x68
    3d44:	f7ff fa0b 	bl	315e <memset>
    3d48:	0020      	movs	r0, r4
    3d4a:	bd70      	pop	{r4, r5, r6, pc}

00003d4c <__sinit>:
    3d4c:	6983      	ldr	r3, [r0, #24]
    3d4e:	b513      	push	{r0, r1, r4, lr}
    3d50:	0004      	movs	r4, r0
    3d52:	2b00      	cmp	r3, #0
    3d54:	d128      	bne.n	3da8 <__sinit+0x5c>
    3d56:	6483      	str	r3, [r0, #72]	; 0x48
    3d58:	64c3      	str	r3, [r0, #76]	; 0x4c
    3d5a:	6503      	str	r3, [r0, #80]	; 0x50
    3d5c:	4b13      	ldr	r3, [pc, #76]	; (3dac <__sinit+0x60>)
    3d5e:	4a14      	ldr	r2, [pc, #80]	; (3db0 <__sinit+0x64>)
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	6282      	str	r2, [r0, #40]	; 0x28
    3d64:	9301      	str	r3, [sp, #4]
    3d66:	4298      	cmp	r0, r3
    3d68:	d101      	bne.n	3d6e <__sinit+0x22>
    3d6a:	2301      	movs	r3, #1
    3d6c:	6183      	str	r3, [r0, #24]
    3d6e:	0020      	movs	r0, r4
    3d70:	f000 f820 	bl	3db4 <__sfp>
    3d74:	6060      	str	r0, [r4, #4]
    3d76:	0020      	movs	r0, r4
    3d78:	f000 f81c 	bl	3db4 <__sfp>
    3d7c:	60a0      	str	r0, [r4, #8]
    3d7e:	0020      	movs	r0, r4
    3d80:	f000 f818 	bl	3db4 <__sfp>
    3d84:	2200      	movs	r2, #0
    3d86:	60e0      	str	r0, [r4, #12]
    3d88:	2104      	movs	r1, #4
    3d8a:	6860      	ldr	r0, [r4, #4]
    3d8c:	f7ff ffa4 	bl	3cd8 <std.isra.0>
    3d90:	2201      	movs	r2, #1
    3d92:	2109      	movs	r1, #9
    3d94:	68a0      	ldr	r0, [r4, #8]
    3d96:	f7ff ff9f 	bl	3cd8 <std.isra.0>
    3d9a:	2202      	movs	r2, #2
    3d9c:	2112      	movs	r1, #18
    3d9e:	68e0      	ldr	r0, [r4, #12]
    3da0:	f7ff ff9a 	bl	3cd8 <std.isra.0>
    3da4:	2301      	movs	r3, #1
    3da6:	61a3      	str	r3, [r4, #24]
    3da8:	bd13      	pop	{r0, r1, r4, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	00004ae4 	.word	0x00004ae4
    3db0:	00003cc9 	.word	0x00003cc9

00003db4 <__sfp>:
    3db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3db6:	4b1e      	ldr	r3, [pc, #120]	; (3e30 <__sfp+0x7c>)
    3db8:	0007      	movs	r7, r0
    3dba:	681e      	ldr	r6, [r3, #0]
    3dbc:	69b3      	ldr	r3, [r6, #24]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d102      	bne.n	3dc8 <__sfp+0x14>
    3dc2:	0030      	movs	r0, r6
    3dc4:	f7ff ffc2 	bl	3d4c <__sinit>
    3dc8:	3648      	adds	r6, #72	; 0x48
    3dca:	68b4      	ldr	r4, [r6, #8]
    3dcc:	6873      	ldr	r3, [r6, #4]
    3dce:	3b01      	subs	r3, #1
    3dd0:	d504      	bpl.n	3ddc <__sfp+0x28>
    3dd2:	6833      	ldr	r3, [r6, #0]
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	d007      	beq.n	3de8 <__sfp+0x34>
    3dd8:	6836      	ldr	r6, [r6, #0]
    3dda:	e7f6      	b.n	3dca <__sfp+0x16>
    3ddc:	220c      	movs	r2, #12
    3dde:	5ea5      	ldrsh	r5, [r4, r2]
    3de0:	2d00      	cmp	r5, #0
    3de2:	d00d      	beq.n	3e00 <__sfp+0x4c>
    3de4:	3468      	adds	r4, #104	; 0x68
    3de6:	e7f2      	b.n	3dce <__sfp+0x1a>
    3de8:	2104      	movs	r1, #4
    3dea:	0038      	movs	r0, r7
    3dec:	f7ff ff98 	bl	3d20 <__sfmoreglue>
    3df0:	6030      	str	r0, [r6, #0]
    3df2:	2800      	cmp	r0, #0
    3df4:	d1f0      	bne.n	3dd8 <__sfp+0x24>
    3df6:	230c      	movs	r3, #12
    3df8:	0004      	movs	r4, r0
    3dfa:	603b      	str	r3, [r7, #0]
    3dfc:	0020      	movs	r0, r4
    3dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e00:	2301      	movs	r3, #1
    3e02:	0020      	movs	r0, r4
    3e04:	425b      	negs	r3, r3
    3e06:	81e3      	strh	r3, [r4, #14]
    3e08:	3302      	adds	r3, #2
    3e0a:	81a3      	strh	r3, [r4, #12]
    3e0c:	6665      	str	r5, [r4, #100]	; 0x64
    3e0e:	6025      	str	r5, [r4, #0]
    3e10:	60a5      	str	r5, [r4, #8]
    3e12:	6065      	str	r5, [r4, #4]
    3e14:	6125      	str	r5, [r4, #16]
    3e16:	6165      	str	r5, [r4, #20]
    3e18:	61a5      	str	r5, [r4, #24]
    3e1a:	2208      	movs	r2, #8
    3e1c:	0029      	movs	r1, r5
    3e1e:	305c      	adds	r0, #92	; 0x5c
    3e20:	f7ff f99d 	bl	315e <memset>
    3e24:	6365      	str	r5, [r4, #52]	; 0x34
    3e26:	63a5      	str	r5, [r4, #56]	; 0x38
    3e28:	64a5      	str	r5, [r4, #72]	; 0x48
    3e2a:	64e5      	str	r5, [r4, #76]	; 0x4c
    3e2c:	e7e6      	b.n	3dfc <__sfp+0x48>
    3e2e:	46c0      	nop			; (mov r8, r8)
    3e30:	00004ae4 	.word	0x00004ae4

00003e34 <_fwalk_reent>:
    3e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e36:	0004      	movs	r4, r0
    3e38:	0007      	movs	r7, r0
    3e3a:	2600      	movs	r6, #0
    3e3c:	9101      	str	r1, [sp, #4]
    3e3e:	3448      	adds	r4, #72	; 0x48
    3e40:	2c00      	cmp	r4, #0
    3e42:	d101      	bne.n	3e48 <_fwalk_reent+0x14>
    3e44:	0030      	movs	r0, r6
    3e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3e48:	6863      	ldr	r3, [r4, #4]
    3e4a:	68a5      	ldr	r5, [r4, #8]
    3e4c:	9300      	str	r3, [sp, #0]
    3e4e:	9b00      	ldr	r3, [sp, #0]
    3e50:	3b01      	subs	r3, #1
    3e52:	9300      	str	r3, [sp, #0]
    3e54:	d501      	bpl.n	3e5a <_fwalk_reent+0x26>
    3e56:	6824      	ldr	r4, [r4, #0]
    3e58:	e7f2      	b.n	3e40 <_fwalk_reent+0xc>
    3e5a:	89ab      	ldrh	r3, [r5, #12]
    3e5c:	2b01      	cmp	r3, #1
    3e5e:	d908      	bls.n	3e72 <_fwalk_reent+0x3e>
    3e60:	220e      	movs	r2, #14
    3e62:	5eab      	ldrsh	r3, [r5, r2]
    3e64:	3301      	adds	r3, #1
    3e66:	d004      	beq.n	3e72 <_fwalk_reent+0x3e>
    3e68:	0029      	movs	r1, r5
    3e6a:	0038      	movs	r0, r7
    3e6c:	9b01      	ldr	r3, [sp, #4]
    3e6e:	4798      	blx	r3
    3e70:	4306      	orrs	r6, r0
    3e72:	3568      	adds	r5, #104	; 0x68
    3e74:	e7eb      	b.n	3e4e <_fwalk_reent+0x1a>
	...

00003e78 <__swhatbuf_r>:
    3e78:	b570      	push	{r4, r5, r6, lr}
    3e7a:	000e      	movs	r6, r1
    3e7c:	001d      	movs	r5, r3
    3e7e:	230e      	movs	r3, #14
    3e80:	5ec9      	ldrsh	r1, [r1, r3]
    3e82:	b090      	sub	sp, #64	; 0x40
    3e84:	0014      	movs	r4, r2
    3e86:	2900      	cmp	r1, #0
    3e88:	da07      	bge.n	3e9a <__swhatbuf_r+0x22>
    3e8a:	2300      	movs	r3, #0
    3e8c:	602b      	str	r3, [r5, #0]
    3e8e:	89b3      	ldrh	r3, [r6, #12]
    3e90:	061b      	lsls	r3, r3, #24
    3e92:	d411      	bmi.n	3eb8 <__swhatbuf_r+0x40>
    3e94:	2380      	movs	r3, #128	; 0x80
    3e96:	00db      	lsls	r3, r3, #3
    3e98:	e00f      	b.n	3eba <__swhatbuf_r+0x42>
    3e9a:	aa01      	add	r2, sp, #4
    3e9c:	f000 f99a 	bl	41d4 <_fstat_r>
    3ea0:	2800      	cmp	r0, #0
    3ea2:	dbf2      	blt.n	3e8a <__swhatbuf_r+0x12>
    3ea4:	22f0      	movs	r2, #240	; 0xf0
    3ea6:	9b02      	ldr	r3, [sp, #8]
    3ea8:	0212      	lsls	r2, r2, #8
    3eaa:	4013      	ands	r3, r2
    3eac:	4a05      	ldr	r2, [pc, #20]	; (3ec4 <__swhatbuf_r+0x4c>)
    3eae:	189b      	adds	r3, r3, r2
    3eb0:	425a      	negs	r2, r3
    3eb2:	4153      	adcs	r3, r2
    3eb4:	602b      	str	r3, [r5, #0]
    3eb6:	e7ed      	b.n	3e94 <__swhatbuf_r+0x1c>
    3eb8:	2340      	movs	r3, #64	; 0x40
    3eba:	2000      	movs	r0, #0
    3ebc:	6023      	str	r3, [r4, #0]
    3ebe:	b010      	add	sp, #64	; 0x40
    3ec0:	bd70      	pop	{r4, r5, r6, pc}
    3ec2:	46c0      	nop			; (mov r8, r8)
    3ec4:	ffffe000 	.word	0xffffe000

00003ec8 <__smakebuf_r>:
    3ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3eca:	2602      	movs	r6, #2
    3ecc:	898b      	ldrh	r3, [r1, #12]
    3ece:	0005      	movs	r5, r0
    3ed0:	000c      	movs	r4, r1
    3ed2:	4233      	tst	r3, r6
    3ed4:	d006      	beq.n	3ee4 <__smakebuf_r+0x1c>
    3ed6:	0023      	movs	r3, r4
    3ed8:	3347      	adds	r3, #71	; 0x47
    3eda:	6023      	str	r3, [r4, #0]
    3edc:	6123      	str	r3, [r4, #16]
    3ede:	2301      	movs	r3, #1
    3ee0:	6163      	str	r3, [r4, #20]
    3ee2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3ee4:	ab01      	add	r3, sp, #4
    3ee6:	466a      	mov	r2, sp
    3ee8:	f7ff ffc6 	bl	3e78 <__swhatbuf_r>
    3eec:	9900      	ldr	r1, [sp, #0]
    3eee:	0007      	movs	r7, r0
    3ef0:	0028      	movs	r0, r5
    3ef2:	f000 f88d 	bl	4010 <_malloc_r>
    3ef6:	2800      	cmp	r0, #0
    3ef8:	d108      	bne.n	3f0c <__smakebuf_r+0x44>
    3efa:	220c      	movs	r2, #12
    3efc:	5ea3      	ldrsh	r3, [r4, r2]
    3efe:	059a      	lsls	r2, r3, #22
    3f00:	d4ef      	bmi.n	3ee2 <__smakebuf_r+0x1a>
    3f02:	2203      	movs	r2, #3
    3f04:	4393      	bics	r3, r2
    3f06:	431e      	orrs	r6, r3
    3f08:	81a6      	strh	r6, [r4, #12]
    3f0a:	e7e4      	b.n	3ed6 <__smakebuf_r+0xe>
    3f0c:	4b0f      	ldr	r3, [pc, #60]	; (3f4c <__smakebuf_r+0x84>)
    3f0e:	62ab      	str	r3, [r5, #40]	; 0x28
    3f10:	2380      	movs	r3, #128	; 0x80
    3f12:	89a2      	ldrh	r2, [r4, #12]
    3f14:	6020      	str	r0, [r4, #0]
    3f16:	4313      	orrs	r3, r2
    3f18:	81a3      	strh	r3, [r4, #12]
    3f1a:	9b00      	ldr	r3, [sp, #0]
    3f1c:	6120      	str	r0, [r4, #16]
    3f1e:	6163      	str	r3, [r4, #20]
    3f20:	9b01      	ldr	r3, [sp, #4]
    3f22:	2b00      	cmp	r3, #0
    3f24:	d00d      	beq.n	3f42 <__smakebuf_r+0x7a>
    3f26:	230e      	movs	r3, #14
    3f28:	5ee1      	ldrsh	r1, [r4, r3]
    3f2a:	0028      	movs	r0, r5
    3f2c:	f000 f964 	bl	41f8 <_isatty_r>
    3f30:	2800      	cmp	r0, #0
    3f32:	d006      	beq.n	3f42 <__smakebuf_r+0x7a>
    3f34:	2203      	movs	r2, #3
    3f36:	89a3      	ldrh	r3, [r4, #12]
    3f38:	4393      	bics	r3, r2
    3f3a:	001a      	movs	r2, r3
    3f3c:	2301      	movs	r3, #1
    3f3e:	4313      	orrs	r3, r2
    3f40:	81a3      	strh	r3, [r4, #12]
    3f42:	89a0      	ldrh	r0, [r4, #12]
    3f44:	4338      	orrs	r0, r7
    3f46:	81a0      	strh	r0, [r4, #12]
    3f48:	e7cb      	b.n	3ee2 <__smakebuf_r+0x1a>
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	00003cc9 	.word	0x00003cc9

00003f50 <malloc>:
    3f50:	b510      	push	{r4, lr}
    3f52:	4b03      	ldr	r3, [pc, #12]	; (3f60 <malloc+0x10>)
    3f54:	0001      	movs	r1, r0
    3f56:	6818      	ldr	r0, [r3, #0]
    3f58:	f000 f85a 	bl	4010 <_malloc_r>
    3f5c:	bd10      	pop	{r4, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	20000004 	.word	0x20000004

00003f64 <memchr>:
    3f64:	b2c9      	uxtb	r1, r1
    3f66:	1882      	adds	r2, r0, r2
    3f68:	4290      	cmp	r0, r2
    3f6a:	d101      	bne.n	3f70 <memchr+0xc>
    3f6c:	2000      	movs	r0, #0
    3f6e:	4770      	bx	lr
    3f70:	7803      	ldrb	r3, [r0, #0]
    3f72:	428b      	cmp	r3, r1
    3f74:	d0fb      	beq.n	3f6e <memchr+0xa>
    3f76:	3001      	adds	r0, #1
    3f78:	e7f6      	b.n	3f68 <memchr+0x4>
	...

00003f7c <_free_r>:
    3f7c:	b570      	push	{r4, r5, r6, lr}
    3f7e:	0005      	movs	r5, r0
    3f80:	2900      	cmp	r1, #0
    3f82:	d010      	beq.n	3fa6 <_free_r+0x2a>
    3f84:	1f0c      	subs	r4, r1, #4
    3f86:	6823      	ldr	r3, [r4, #0]
    3f88:	2b00      	cmp	r3, #0
    3f8a:	da00      	bge.n	3f8e <_free_r+0x12>
    3f8c:	18e4      	adds	r4, r4, r3
    3f8e:	0028      	movs	r0, r5
    3f90:	f000 f958 	bl	4244 <__malloc_lock>
    3f94:	4a1d      	ldr	r2, [pc, #116]	; (400c <_free_r+0x90>)
    3f96:	6813      	ldr	r3, [r2, #0]
    3f98:	2b00      	cmp	r3, #0
    3f9a:	d105      	bne.n	3fa8 <_free_r+0x2c>
    3f9c:	6063      	str	r3, [r4, #4]
    3f9e:	6014      	str	r4, [r2, #0]
    3fa0:	0028      	movs	r0, r5
    3fa2:	f000 f950 	bl	4246 <__malloc_unlock>
    3fa6:	bd70      	pop	{r4, r5, r6, pc}
    3fa8:	42a3      	cmp	r3, r4
    3faa:	d909      	bls.n	3fc0 <_free_r+0x44>
    3fac:	6821      	ldr	r1, [r4, #0]
    3fae:	1860      	adds	r0, r4, r1
    3fb0:	4283      	cmp	r3, r0
    3fb2:	d1f3      	bne.n	3f9c <_free_r+0x20>
    3fb4:	6818      	ldr	r0, [r3, #0]
    3fb6:	685b      	ldr	r3, [r3, #4]
    3fb8:	1841      	adds	r1, r0, r1
    3fba:	6021      	str	r1, [r4, #0]
    3fbc:	e7ee      	b.n	3f9c <_free_r+0x20>
    3fbe:	0013      	movs	r3, r2
    3fc0:	685a      	ldr	r2, [r3, #4]
    3fc2:	2a00      	cmp	r2, #0
    3fc4:	d001      	beq.n	3fca <_free_r+0x4e>
    3fc6:	42a2      	cmp	r2, r4
    3fc8:	d9f9      	bls.n	3fbe <_free_r+0x42>
    3fca:	6819      	ldr	r1, [r3, #0]
    3fcc:	1858      	adds	r0, r3, r1
    3fce:	42a0      	cmp	r0, r4
    3fd0:	d10b      	bne.n	3fea <_free_r+0x6e>
    3fd2:	6820      	ldr	r0, [r4, #0]
    3fd4:	1809      	adds	r1, r1, r0
    3fd6:	1858      	adds	r0, r3, r1
    3fd8:	6019      	str	r1, [r3, #0]
    3fda:	4282      	cmp	r2, r0
    3fdc:	d1e0      	bne.n	3fa0 <_free_r+0x24>
    3fde:	6810      	ldr	r0, [r2, #0]
    3fe0:	6852      	ldr	r2, [r2, #4]
    3fe2:	1841      	adds	r1, r0, r1
    3fe4:	6019      	str	r1, [r3, #0]
    3fe6:	605a      	str	r2, [r3, #4]
    3fe8:	e7da      	b.n	3fa0 <_free_r+0x24>
    3fea:	42a0      	cmp	r0, r4
    3fec:	d902      	bls.n	3ff4 <_free_r+0x78>
    3fee:	230c      	movs	r3, #12
    3ff0:	602b      	str	r3, [r5, #0]
    3ff2:	e7d5      	b.n	3fa0 <_free_r+0x24>
    3ff4:	6821      	ldr	r1, [r4, #0]
    3ff6:	1860      	adds	r0, r4, r1
    3ff8:	4282      	cmp	r2, r0
    3ffa:	d103      	bne.n	4004 <_free_r+0x88>
    3ffc:	6810      	ldr	r0, [r2, #0]
    3ffe:	6852      	ldr	r2, [r2, #4]
    4000:	1841      	adds	r1, r0, r1
    4002:	6021      	str	r1, [r4, #0]
    4004:	6062      	str	r2, [r4, #4]
    4006:	605c      	str	r4, [r3, #4]
    4008:	e7ca      	b.n	3fa0 <_free_r+0x24>
    400a:	46c0      	nop			; (mov r8, r8)
    400c:	200001f8 	.word	0x200001f8

00004010 <_malloc_r>:
    4010:	2303      	movs	r3, #3
    4012:	b570      	push	{r4, r5, r6, lr}
    4014:	1ccd      	adds	r5, r1, #3
    4016:	439d      	bics	r5, r3
    4018:	3508      	adds	r5, #8
    401a:	0006      	movs	r6, r0
    401c:	2d0c      	cmp	r5, #12
    401e:	d21e      	bcs.n	405e <_malloc_r+0x4e>
    4020:	250c      	movs	r5, #12
    4022:	42a9      	cmp	r1, r5
    4024:	d81d      	bhi.n	4062 <_malloc_r+0x52>
    4026:	0030      	movs	r0, r6
    4028:	f000 f90c 	bl	4244 <__malloc_lock>
    402c:	4a25      	ldr	r2, [pc, #148]	; (40c4 <_malloc_r+0xb4>)
    402e:	6814      	ldr	r4, [r2, #0]
    4030:	0021      	movs	r1, r4
    4032:	2900      	cmp	r1, #0
    4034:	d119      	bne.n	406a <_malloc_r+0x5a>
    4036:	4c24      	ldr	r4, [pc, #144]	; (40c8 <_malloc_r+0xb8>)
    4038:	6823      	ldr	r3, [r4, #0]
    403a:	2b00      	cmp	r3, #0
    403c:	d103      	bne.n	4046 <_malloc_r+0x36>
    403e:	0030      	movs	r0, r6
    4040:	f000 f844 	bl	40cc <_sbrk_r>
    4044:	6020      	str	r0, [r4, #0]
    4046:	0029      	movs	r1, r5
    4048:	0030      	movs	r0, r6
    404a:	f000 f83f 	bl	40cc <_sbrk_r>
    404e:	1c43      	adds	r3, r0, #1
    4050:	d12c      	bne.n	40ac <_malloc_r+0x9c>
    4052:	230c      	movs	r3, #12
    4054:	0030      	movs	r0, r6
    4056:	6033      	str	r3, [r6, #0]
    4058:	f000 f8f5 	bl	4246 <__malloc_unlock>
    405c:	e003      	b.n	4066 <_malloc_r+0x56>
    405e:	2d00      	cmp	r5, #0
    4060:	dadf      	bge.n	4022 <_malloc_r+0x12>
    4062:	230c      	movs	r3, #12
    4064:	6033      	str	r3, [r6, #0]
    4066:	2000      	movs	r0, #0
    4068:	bd70      	pop	{r4, r5, r6, pc}
    406a:	680b      	ldr	r3, [r1, #0]
    406c:	1b5b      	subs	r3, r3, r5
    406e:	d41a      	bmi.n	40a6 <_malloc_r+0x96>
    4070:	2b0b      	cmp	r3, #11
    4072:	d903      	bls.n	407c <_malloc_r+0x6c>
    4074:	600b      	str	r3, [r1, #0]
    4076:	18cc      	adds	r4, r1, r3
    4078:	6025      	str	r5, [r4, #0]
    407a:	e003      	b.n	4084 <_malloc_r+0x74>
    407c:	428c      	cmp	r4, r1
    407e:	d10e      	bne.n	409e <_malloc_r+0x8e>
    4080:	6863      	ldr	r3, [r4, #4]
    4082:	6013      	str	r3, [r2, #0]
    4084:	0030      	movs	r0, r6
    4086:	f000 f8de 	bl	4246 <__malloc_unlock>
    408a:	0020      	movs	r0, r4
    408c:	2207      	movs	r2, #7
    408e:	300b      	adds	r0, #11
    4090:	1d23      	adds	r3, r4, #4
    4092:	4390      	bics	r0, r2
    4094:	1ac3      	subs	r3, r0, r3
    4096:	d0e7      	beq.n	4068 <_malloc_r+0x58>
    4098:	425a      	negs	r2, r3
    409a:	50e2      	str	r2, [r4, r3]
    409c:	e7e4      	b.n	4068 <_malloc_r+0x58>
    409e:	684b      	ldr	r3, [r1, #4]
    40a0:	6063      	str	r3, [r4, #4]
    40a2:	000c      	movs	r4, r1
    40a4:	e7ee      	b.n	4084 <_malloc_r+0x74>
    40a6:	000c      	movs	r4, r1
    40a8:	6849      	ldr	r1, [r1, #4]
    40aa:	e7c2      	b.n	4032 <_malloc_r+0x22>
    40ac:	2303      	movs	r3, #3
    40ae:	1cc4      	adds	r4, r0, #3
    40b0:	439c      	bics	r4, r3
    40b2:	42a0      	cmp	r0, r4
    40b4:	d0e0      	beq.n	4078 <_malloc_r+0x68>
    40b6:	1a21      	subs	r1, r4, r0
    40b8:	0030      	movs	r0, r6
    40ba:	f000 f807 	bl	40cc <_sbrk_r>
    40be:	1c43      	adds	r3, r0, #1
    40c0:	d1da      	bne.n	4078 <_malloc_r+0x68>
    40c2:	e7c6      	b.n	4052 <_malloc_r+0x42>
    40c4:	200001f8 	.word	0x200001f8
    40c8:	200001fc 	.word	0x200001fc

000040cc <_sbrk_r>:
    40cc:	2300      	movs	r3, #0
    40ce:	b570      	push	{r4, r5, r6, lr}
    40d0:	4c06      	ldr	r4, [pc, #24]	; (40ec <_sbrk_r+0x20>)
    40d2:	0005      	movs	r5, r0
    40d4:	0008      	movs	r0, r1
    40d6:	6023      	str	r3, [r4, #0]
    40d8:	f7fe fcb6 	bl	2a48 <_sbrk>
    40dc:	1c43      	adds	r3, r0, #1
    40de:	d103      	bne.n	40e8 <_sbrk_r+0x1c>
    40e0:	6823      	ldr	r3, [r4, #0]
    40e2:	2b00      	cmp	r3, #0
    40e4:	d000      	beq.n	40e8 <_sbrk_r+0x1c>
    40e6:	602b      	str	r3, [r5, #0]
    40e8:	bd70      	pop	{r4, r5, r6, pc}
    40ea:	46c0      	nop			; (mov r8, r8)
    40ec:	20000300 	.word	0x20000300

000040f0 <__sread>:
    40f0:	b570      	push	{r4, r5, r6, lr}
    40f2:	000c      	movs	r4, r1
    40f4:	250e      	movs	r5, #14
    40f6:	5f49      	ldrsh	r1, [r1, r5]
    40f8:	f000 f8a6 	bl	4248 <_read_r>
    40fc:	2800      	cmp	r0, #0
    40fe:	db03      	blt.n	4108 <__sread+0x18>
    4100:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4102:	181b      	adds	r3, r3, r0
    4104:	6563      	str	r3, [r4, #84]	; 0x54
    4106:	bd70      	pop	{r4, r5, r6, pc}
    4108:	89a3      	ldrh	r3, [r4, #12]
    410a:	4a02      	ldr	r2, [pc, #8]	; (4114 <__sread+0x24>)
    410c:	4013      	ands	r3, r2
    410e:	81a3      	strh	r3, [r4, #12]
    4110:	e7f9      	b.n	4106 <__sread+0x16>
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	ffffefff 	.word	0xffffefff

00004118 <__swrite>:
    4118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    411a:	001f      	movs	r7, r3
    411c:	898b      	ldrh	r3, [r1, #12]
    411e:	0005      	movs	r5, r0
    4120:	000c      	movs	r4, r1
    4122:	0016      	movs	r6, r2
    4124:	05db      	lsls	r3, r3, #23
    4126:	d505      	bpl.n	4134 <__swrite+0x1c>
    4128:	230e      	movs	r3, #14
    412a:	5ec9      	ldrsh	r1, [r1, r3]
    412c:	2200      	movs	r2, #0
    412e:	2302      	movs	r3, #2
    4130:	f000 f874 	bl	421c <_lseek_r>
    4134:	89a3      	ldrh	r3, [r4, #12]
    4136:	4a05      	ldr	r2, [pc, #20]	; (414c <__swrite+0x34>)
    4138:	0028      	movs	r0, r5
    413a:	4013      	ands	r3, r2
    413c:	81a3      	strh	r3, [r4, #12]
    413e:	0032      	movs	r2, r6
    4140:	230e      	movs	r3, #14
    4142:	5ee1      	ldrsh	r1, [r4, r3]
    4144:	003b      	movs	r3, r7
    4146:	f000 f81f 	bl	4188 <_write_r>
    414a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    414c:	ffffefff 	.word	0xffffefff

00004150 <__sseek>:
    4150:	b570      	push	{r4, r5, r6, lr}
    4152:	000c      	movs	r4, r1
    4154:	250e      	movs	r5, #14
    4156:	5f49      	ldrsh	r1, [r1, r5]
    4158:	f000 f860 	bl	421c <_lseek_r>
    415c:	89a3      	ldrh	r3, [r4, #12]
    415e:	1c42      	adds	r2, r0, #1
    4160:	d103      	bne.n	416a <__sseek+0x1a>
    4162:	4a05      	ldr	r2, [pc, #20]	; (4178 <__sseek+0x28>)
    4164:	4013      	ands	r3, r2
    4166:	81a3      	strh	r3, [r4, #12]
    4168:	bd70      	pop	{r4, r5, r6, pc}
    416a:	2280      	movs	r2, #128	; 0x80
    416c:	0152      	lsls	r2, r2, #5
    416e:	4313      	orrs	r3, r2
    4170:	81a3      	strh	r3, [r4, #12]
    4172:	6560      	str	r0, [r4, #84]	; 0x54
    4174:	e7f8      	b.n	4168 <__sseek+0x18>
    4176:	46c0      	nop			; (mov r8, r8)
    4178:	ffffefff 	.word	0xffffefff

0000417c <__sclose>:
    417c:	b510      	push	{r4, lr}
    417e:	230e      	movs	r3, #14
    4180:	5ec9      	ldrsh	r1, [r1, r3]
    4182:	f000 f815 	bl	41b0 <_close_r>
    4186:	bd10      	pop	{r4, pc}

00004188 <_write_r>:
    4188:	b570      	push	{r4, r5, r6, lr}
    418a:	0005      	movs	r5, r0
    418c:	0008      	movs	r0, r1
    418e:	0011      	movs	r1, r2
    4190:	2200      	movs	r2, #0
    4192:	4c06      	ldr	r4, [pc, #24]	; (41ac <_write_r+0x24>)
    4194:	6022      	str	r2, [r4, #0]
    4196:	001a      	movs	r2, r3
    4198:	f7fe fc2e 	bl	29f8 <_write>
    419c:	1c43      	adds	r3, r0, #1
    419e:	d103      	bne.n	41a8 <_write_r+0x20>
    41a0:	6823      	ldr	r3, [r4, #0]
    41a2:	2b00      	cmp	r3, #0
    41a4:	d000      	beq.n	41a8 <_write_r+0x20>
    41a6:	602b      	str	r3, [r5, #0]
    41a8:	bd70      	pop	{r4, r5, r6, pc}
    41aa:	46c0      	nop			; (mov r8, r8)
    41ac:	20000300 	.word	0x20000300

000041b0 <_close_r>:
    41b0:	2300      	movs	r3, #0
    41b2:	b570      	push	{r4, r5, r6, lr}
    41b4:	4c06      	ldr	r4, [pc, #24]	; (41d0 <_close_r+0x20>)
    41b6:	0005      	movs	r5, r0
    41b8:	0008      	movs	r0, r1
    41ba:	6023      	str	r3, [r4, #0]
    41bc:	f7fe fc56 	bl	2a6c <_close>
    41c0:	1c43      	adds	r3, r0, #1
    41c2:	d103      	bne.n	41cc <_close_r+0x1c>
    41c4:	6823      	ldr	r3, [r4, #0]
    41c6:	2b00      	cmp	r3, #0
    41c8:	d000      	beq.n	41cc <_close_r+0x1c>
    41ca:	602b      	str	r3, [r5, #0]
    41cc:	bd70      	pop	{r4, r5, r6, pc}
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	20000300 	.word	0x20000300

000041d4 <_fstat_r>:
    41d4:	2300      	movs	r3, #0
    41d6:	b570      	push	{r4, r5, r6, lr}
    41d8:	4c06      	ldr	r4, [pc, #24]	; (41f4 <_fstat_r+0x20>)
    41da:	0005      	movs	r5, r0
    41dc:	0008      	movs	r0, r1
    41de:	0011      	movs	r1, r2
    41e0:	6023      	str	r3, [r4, #0]
    41e2:	f7fe fc46 	bl	2a72 <_fstat>
    41e6:	1c43      	adds	r3, r0, #1
    41e8:	d103      	bne.n	41f2 <_fstat_r+0x1e>
    41ea:	6823      	ldr	r3, [r4, #0]
    41ec:	2b00      	cmp	r3, #0
    41ee:	d000      	beq.n	41f2 <_fstat_r+0x1e>
    41f0:	602b      	str	r3, [r5, #0]
    41f2:	bd70      	pop	{r4, r5, r6, pc}
    41f4:	20000300 	.word	0x20000300

000041f8 <_isatty_r>:
    41f8:	2300      	movs	r3, #0
    41fa:	b570      	push	{r4, r5, r6, lr}
    41fc:	4c06      	ldr	r4, [pc, #24]	; (4218 <_isatty_r+0x20>)
    41fe:	0005      	movs	r5, r0
    4200:	0008      	movs	r0, r1
    4202:	6023      	str	r3, [r4, #0]
    4204:	f7fe fc3a 	bl	2a7c <_isatty>
    4208:	1c43      	adds	r3, r0, #1
    420a:	d103      	bne.n	4214 <_isatty_r+0x1c>
    420c:	6823      	ldr	r3, [r4, #0]
    420e:	2b00      	cmp	r3, #0
    4210:	d000      	beq.n	4214 <_isatty_r+0x1c>
    4212:	602b      	str	r3, [r5, #0]
    4214:	bd70      	pop	{r4, r5, r6, pc}
    4216:	46c0      	nop			; (mov r8, r8)
    4218:	20000300 	.word	0x20000300

0000421c <_lseek_r>:
    421c:	b570      	push	{r4, r5, r6, lr}
    421e:	0005      	movs	r5, r0
    4220:	0008      	movs	r0, r1
    4222:	0011      	movs	r1, r2
    4224:	2200      	movs	r2, #0
    4226:	4c06      	ldr	r4, [pc, #24]	; (4240 <_lseek_r+0x24>)
    4228:	6022      	str	r2, [r4, #0]
    422a:	001a      	movs	r2, r3
    422c:	f7fe fc28 	bl	2a80 <_lseek>
    4230:	1c43      	adds	r3, r0, #1
    4232:	d103      	bne.n	423c <_lseek_r+0x20>
    4234:	6823      	ldr	r3, [r4, #0]
    4236:	2b00      	cmp	r3, #0
    4238:	d000      	beq.n	423c <_lseek_r+0x20>
    423a:	602b      	str	r3, [r5, #0]
    423c:	bd70      	pop	{r4, r5, r6, pc}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	20000300 	.word	0x20000300

00004244 <__malloc_lock>:
    4244:	4770      	bx	lr

00004246 <__malloc_unlock>:
    4246:	4770      	bx	lr

00004248 <_read_r>:
    4248:	b570      	push	{r4, r5, r6, lr}
    424a:	0005      	movs	r5, r0
    424c:	0008      	movs	r0, r1
    424e:	0011      	movs	r1, r2
    4250:	2200      	movs	r2, #0
    4252:	4c06      	ldr	r4, [pc, #24]	; (426c <_read_r+0x24>)
    4254:	6022      	str	r2, [r4, #0]
    4256:	001a      	movs	r2, r3
    4258:	f7fe fbac 	bl	29b4 <_read>
    425c:	1c43      	adds	r3, r0, #1
    425e:	d103      	bne.n	4268 <_read_r+0x20>
    4260:	6823      	ldr	r3, [r4, #0]
    4262:	2b00      	cmp	r3, #0
    4264:	d000      	beq.n	4268 <_read_r+0x20>
    4266:	602b      	str	r3, [r5, #0]
    4268:	bd70      	pop	{r4, r5, r6, pc}
    426a:	46c0      	nop			; (mov r8, r8)
    426c:	20000300 	.word	0x20000300
    4270:	732f2e2e 	.word	0x732f2e2e
    4274:	412f6372 	.word	0x412f6372
    4278:	632f4653 	.word	0x632f4653
    427c:	6f6d6d6f 	.word	0x6f6d6d6f
    4280:	74752f6e 	.word	0x74752f6e
    4284:	2f736c69 	.word	0x2f736c69
    4288:	65746e69 	.word	0x65746e69
    428c:	70757272 	.word	0x70757272
    4290:	6e692f74 	.word	0x6e692f74
    4294:	72726574 	.word	0x72726574
    4298:	5f747075 	.word	0x5f747075
    429c:	5f6d6173 	.word	0x5f6d6173
    42a0:	6369766e 	.word	0x6369766e
    42a4:	0000632e 	.word	0x0000632e
    42a8:	5f757063 	.word	0x5f757063
    42ac:	5f717269 	.word	0x5f717269
    42b0:	74697263 	.word	0x74697263
    42b4:	6c616369 	.word	0x6c616369
    42b8:	6365735f 	.word	0x6365735f
    42bc:	6e6f6974 	.word	0x6e6f6974
    42c0:	756f635f 	.word	0x756f635f
    42c4:	7265746e 	.word	0x7265746e
    42c8:	30203e20 	.word	0x30203e20
    42cc:	00000000 	.word	0x00000000
    42d0:	65737341 	.word	0x65737341
    42d4:	6f697472 	.word	0x6f697472
    42d8:	6166206e 	.word	0x6166206e
    42dc:	64656c69 	.word	0x64656c69
    42e0:	7325203a 	.word	0x7325203a
    42e4:	00000000 	.word	0x00000000
    42e8:	65737341 	.word	0x65737341
    42ec:	6f697472 	.word	0x6f697472
    42f0:	2527206e 	.word	0x2527206e
    42f4:	66202773 	.word	0x66202773
    42f8:	656c6961 	.word	0x656c6961
    42fc:	74612064 	.word	0x74612064
    4300:	3a732520 	.word	0x3a732520
    4304:	0a0d6425 	.word	0x0a0d6425
    4308:	00000000 	.word	0x00000000
    430c:	74736554 	.word	0x74736554
    4310:	73252720 	.word	0x73252720
    4314:	61662027 	.word	0x61662027
    4318:	64656c69 	.word	0x64656c69
    431c:	20746120 	.word	0x20746120
    4320:	253a7325 	.word	0x253a7325
    4324:	0a0d3a75 	.word	0x0a0d3a75
    4328:	00000009 	.word	0x00000009
    432c:	6e6e7552 	.word	0x6e6e7552
    4330:	20676e69 	.word	0x20676e69
    4334:	74736574 	.word	0x74736574
    4338:	69757320 	.word	0x69757320
    433c:	27206574 	.word	0x27206574
    4340:	2e277325 	.word	0x2e277325
    4344:	0a0d2e2e 	.word	0x0a0d2e2e
    4348:	00000000 	.word	0x00000000
    434c:	6e6e7552 	.word	0x6e6e7552
    4350:	20676e69 	.word	0x20676e69
    4354:	74736574 	.word	0x74736574
    4358:	7325203a 	.word	0x7325203a
    435c:	00000a0d 	.word	0x00000a0d
    4360:	74746553 	.word	0x74746553
    4364:	20676e69 	.word	0x20676e69
    4368:	66207075 	.word	0x66207075
    436c:	75747869 	.word	0x75747869
    4370:	000d6572 	.word	0x000d6572
    4374:	75746573 	.word	0x75746573
    4378:	00000070 	.word	0x00000070
    437c:	74736554 	.word	0x74736554
    4380:	73252720 	.word	0x73252720
    4384:	61662027 	.word	0x61662027
    4388:	64656c69 	.word	0x64656c69
    438c:	72756420 	.word	0x72756420
    4390:	20676e69 	.word	0x20676e69
    4394:	27732527 	.word	0x27732527
    4398:	6425203a 	.word	0x6425203a
    439c:	00000a0d 	.word	0x00000a0d
    43a0:	74736574 	.word	0x74736574
    43a4:	00000000 	.word	0x00000000
    43a8:	61656c43 	.word	0x61656c43
    43ac:	676e696e 	.word	0x676e696e
    43b0:	20707520 	.word	0x20707520
    43b4:	74786966 	.word	0x74786966
    43b8:	0d657275 	.word	0x0d657275
    43bc:	00000000 	.word	0x00000000
    43c0:	61656c63 	.word	0x61656c63
    43c4:	0070756e 	.word	0x0070756e
    43c8:	74736554 	.word	0x74736554
    43cc:	69757320 	.word	0x69757320
    43d0:	27206574 	.word	0x27206574
    43d4:	20277325 	.word	0x20277325
    43d8:	706d6f63 	.word	0x706d6f63
    43dc:	6574656c 	.word	0x6574656c
    43e0:	7525203a 	.word	0x7525203a
    43e4:	73657420 	.word	0x73657420
    43e8:	202c7374 	.word	0x202c7374
    43ec:	66207525 	.word	0x66207525
    43f0:	756c6961 	.word	0x756c6961
    43f4:	2c736572 	.word	0x2c736572
    43f8:	20752520 	.word	0x20752520
    43fc:	6f727265 	.word	0x6f727265
    4400:	0a0d7372 	.word	0x0a0d7372
    4404:	00000a0d 	.word	0x00000a0d
    4408:	00000568 	.word	0x00000568
    440c:	00000568 	.word	0x00000568
    4410:	00000544 	.word	0x00000544
    4414:	00000568 	.word	0x00000568
    4418:	00000544 	.word	0x00000544
    441c:	0000052a 	.word	0x0000052a
    4420:	0000052a 	.word	0x0000052a
    4424:	00000568 	.word	0x00000568
    4428:	00000568 	.word	0x00000568
    442c:	00000568 	.word	0x00000568
    4430:	00000568 	.word	0x00000568
    4434:	00000568 	.word	0x00000568
    4438:	00000568 	.word	0x00000568
    443c:	00000568 	.word	0x00000568
    4440:	00000568 	.word	0x00000568
    4444:	00000568 	.word	0x00000568
    4448:	00000568 	.word	0x00000568
    444c:	00000568 	.word	0x00000568
    4450:	00000568 	.word	0x00000568
    4454:	00000568 	.word	0x00000568
    4458:	00000568 	.word	0x00000568
    445c:	00000568 	.word	0x00000568
    4460:	00000568 	.word	0x00000568
    4464:	00000568 	.word	0x00000568
    4468:	00000568 	.word	0x00000568
    446c:	00000568 	.word	0x00000568
    4470:	00000568 	.word	0x00000568
    4474:	00000568 	.word	0x00000568
    4478:	00000568 	.word	0x00000568
    447c:	00000568 	.word	0x00000568
    4480:	00000568 	.word	0x00000568
    4484:	00000568 	.word	0x00000568
    4488:	00000568 	.word	0x00000568
    448c:	00000568 	.word	0x00000568
    4490:	00000568 	.word	0x00000568
    4494:	00000568 	.word	0x00000568
    4498:	00000568 	.word	0x00000568
    449c:	00000568 	.word	0x00000568
    44a0:	00000568 	.word	0x00000568
    44a4:	00000568 	.word	0x00000568
    44a8:	00000568 	.word	0x00000568
    44ac:	00000568 	.word	0x00000568
    44b0:	00000568 	.word	0x00000568
    44b4:	00000568 	.word	0x00000568
    44b8:	00000568 	.word	0x00000568
    44bc:	00000568 	.word	0x00000568
    44c0:	00000568 	.word	0x00000568
    44c4:	00000568 	.word	0x00000568
    44c8:	00000568 	.word	0x00000568
    44cc:	00000568 	.word	0x00000568
    44d0:	00000568 	.word	0x00000568
    44d4:	00000568 	.word	0x00000568
    44d8:	00000568 	.word	0x00000568
    44dc:	00000568 	.word	0x00000568
    44e0:	00000568 	.word	0x00000568
    44e4:	00000568 	.word	0x00000568
    44e8:	00000568 	.word	0x00000568
    44ec:	00000568 	.word	0x00000568
    44f0:	00000568 	.word	0x00000568
    44f4:	00000568 	.word	0x00000568
    44f8:	00000568 	.word	0x00000568
    44fc:	00000568 	.word	0x00000568
    4500:	00000568 	.word	0x00000568
    4504:	00000568 	.word	0x00000568
    4508:	00000544 	.word	0x00000544
    450c:	00000544 	.word	0x00000544
    4510:	0000054c 	.word	0x0000054c
    4514:	0000054c 	.word	0x0000054c
    4518:	0000054c 	.word	0x0000054c
    451c:	0000054c 	.word	0x0000054c
    4520:	61726170 	.word	0x61726170
    4524:	6574656d 	.word	0x6574656d
    4528:	00007372 	.word	0x00007372
    452c:	732f2e2e 	.word	0x732f2e2e
    4530:	412f6372 	.word	0x412f6372
    4534:	732f4653 	.word	0x732f4653
    4538:	2f306d61 	.word	0x2f306d61
    453c:	76697264 	.word	0x76697264
    4540:	2f737265 	.word	0x2f737265
    4544:	2f6d766e 	.word	0x2f6d766e
    4548:	2e6d766e 	.word	0x2e6d766e
    454c:	00000063 	.word	0x00000063
    4550:	666e6f63 	.word	0x666e6f63
    4554:	00006769 	.word	0x00006769
    4558:	732f2e2e 	.word	0x732f2e2e
    455c:	412f6372 	.word	0x412f6372
    4560:	732f4653 	.word	0x732f4653
    4564:	2f306d61 	.word	0x2f306d61
    4568:	76697264 	.word	0x76697264
    456c:	2f737265 	.word	0x2f737265
    4570:	74726f70 	.word	0x74726f70
    4574:	726f702f 	.word	0x726f702f
    4578:	00632e74 	.word	0x00632e74
    457c:	42000800 	.word	0x42000800
    4580:	42000c00 	.word	0x42000c00
    4584:	42001000 	.word	0x42001000
    4588:	42001400 	.word	0x42001400
    458c:	42001800 	.word	0x42001800
    4590:	42001c00 	.word	0x42001c00
    4594:	732f2e2e 	.word	0x732f2e2e
    4598:	412f6372 	.word	0x412f6372
    459c:	732f4653 	.word	0x732f4653
    45a0:	2f306d61 	.word	0x2f306d61
    45a4:	76697264 	.word	0x76697264
    45a8:	2f737265 	.word	0x2f737265
    45ac:	63726573 	.word	0x63726573
    45b0:	732f6d6f 	.word	0x732f6d6f
    45b4:	6f637265 	.word	0x6f637265
    45b8:	00632e6d 	.word	0x00632e6d
    45bc:	736c6166 	.word	0x736c6166
    45c0:	00000065 	.word	0x00000065
    45c4:	732f2e2e 	.word	0x732f2e2e
    45c8:	412f6372 	.word	0x412f6372
    45cc:	732f4653 	.word	0x732f4653
    45d0:	2f306d61 	.word	0x2f306d61
    45d4:	76697264 	.word	0x76697264
    45d8:	2f737265 	.word	0x2f737265
    45dc:	63726573 	.word	0x63726573
    45e0:	732f6d6f 	.word	0x732f6d6f
    45e4:	6f637265 	.word	0x6f637265
    45e8:	6e695f6d 	.word	0x6e695f6d
    45ec:	72726574 	.word	0x72726574
    45f0:	2e747075 	.word	0x2e747075
    45f4:	00000063 	.word	0x00000063
    45f8:	732f2e2e 	.word	0x732f2e2e
    45fc:	412f6372 	.word	0x412f6372
    4600:	732f4653 	.word	0x732f4653
    4604:	2f306d61 	.word	0x2f306d61
    4608:	76697264 	.word	0x76697264
    460c:	2f737265 	.word	0x2f737265
    4610:	63726573 	.word	0x63726573
    4614:	752f6d6f 	.word	0x752f6d6f
    4618:	74726173 	.word	0x74726173
    461c:	6173752f 	.word	0x6173752f
    4620:	632e7472 	.word	0x632e7472
    4624:	00000000 	.word	0x00000000
    4628:	75646f6d 	.word	0x75646f6d
    462c:	0000656c 	.word	0x0000656c
    4630:	75646f6d 	.word	0x75646f6d
    4634:	3e2d656c 	.word	0x3e2d656c
    4638:	00007768 	.word	0x00007768
    463c:	732f2e2e 	.word	0x732f2e2e
    4640:	412f6372 	.word	0x412f6372
    4644:	732f4653 	.word	0x732f4653
    4648:	2f306d61 	.word	0x2f306d61
    464c:	76697264 	.word	0x76697264
    4650:	2f737265 	.word	0x2f737265
    4654:	63726573 	.word	0x63726573
    4658:	752f6d6f 	.word	0x752f6d6f
    465c:	74726173 	.word	0x74726173
    4660:	6173752f 	.word	0x6173752f
    4664:	682e7472 	.word	0x682e7472
    4668:	00000000 	.word	0x00000000
    466c:	732f2e2e 	.word	0x732f2e2e
    4670:	412f6372 	.word	0x412f6372
    4674:	732f4653 	.word	0x732f4653
    4678:	2f306d61 	.word	0x2f306d61
    467c:	76697264 	.word	0x76697264
    4680:	2f737265 	.word	0x2f737265
    4684:	63726573 	.word	0x63726573
    4688:	752f6d6f 	.word	0x752f6d6f
    468c:	74726173 	.word	0x74726173
    4690:	6173752f 	.word	0x6173752f
    4694:	695f7472 	.word	0x695f7472
    4698:	7265746e 	.word	0x7265746e
    469c:	74707572 	.word	0x74707572
    46a0:	0000632e 	.word	0x0000632e
    46a4:	645f7874 	.word	0x645f7874
    46a8:	00617461 	.word	0x00617461
    46ac:	0000199a 	.word	0x0000199a
    46b0:	00001996 	.word	0x00001996
    46b4:	00001996 	.word	0x00001996
    46b8:	000019f8 	.word	0x000019f8
    46bc:	000019f8 	.word	0x000019f8
    46c0:	000019ae 	.word	0x000019ae
    46c4:	000019a0 	.word	0x000019a0
    46c8:	000019b4 	.word	0x000019b4
    46cc:	000019e6 	.word	0x000019e6
    46d0:	00001a82 	.word	0x00001a82
    46d4:	00001aee 	.word	0x00001aee
    46d8:	00001aee 	.word	0x00001aee
    46dc:	00001b1a 	.word	0x00001b1a
    46e0:	00001a74 	.word	0x00001a74
    46e4:	00001a90 	.word	0x00001a90
    46e8:	00001a64 	.word	0x00001a64
    46ec:	00001a9e 	.word	0x00001a9e
    46f0:	00001ade 	.word	0x00001ade
    46f4:	732f2e2e 	.word	0x732f2e2e
    46f8:	412f6372 	.word	0x412f6372
    46fc:	732f4653 	.word	0x732f4653
    4700:	2f306d61 	.word	0x2f306d61
    4704:	76697264 	.word	0x76697264
    4708:	2f737265 	.word	0x2f737265
    470c:	74737973 	.word	0x74737973
    4710:	632f6d65 	.word	0x632f6d65
    4714:	6b636f6c 	.word	0x6b636f6c
    4718:	6f6c632f 	.word	0x6f6c632f
    471c:	735f6b63 	.word	0x735f6b63
    4720:	32646d61 	.word	0x32646d61
    4724:	32725f31 	.word	0x32725f31
    4728:	61645f31 	.word	0x61645f31
    472c:	3161685f 	.word	0x3161685f
    4730:	6f6c632f 	.word	0x6f6c632f
    4734:	632e6b63 	.word	0x632e6b63
    4738:	00000000 	.word	0x00000000
    473c:	4c434721 	.word	0x4c434721
    4740:	433e2d4b 	.word	0x433e2d4b
    4744:	54434b4c 	.word	0x54434b4c
    4748:	622e4c52 	.word	0x622e4c52
    474c:	572e7469 	.word	0x572e7469
    4750:	4f4c5452 	.word	0x4f4c5452
    4754:	00004b43 	.word	0x00004b43
    4758:	732f2e2e 	.word	0x732f2e2e
    475c:	412f6372 	.word	0x412f6372
    4760:	732f4653 	.word	0x732f4653
    4764:	2f306d61 	.word	0x2f306d61
    4768:	76697264 	.word	0x76697264
    476c:	2f737265 	.word	0x2f737265
    4770:	74737973 	.word	0x74737973
    4774:	632f6d65 	.word	0x632f6d65
    4778:	6b636f6c 	.word	0x6b636f6c
    477c:	6f6c632f 	.word	0x6f6c632f
    4780:	735f6b63 	.word	0x735f6b63
    4784:	32646d61 	.word	0x32646d61
    4788:	32725f31 	.word	0x32725f31
    478c:	61645f31 	.word	0x61645f31
    4790:	3161685f 	.word	0x3161685f
    4794:	6c63672f 	.word	0x6c63672f
    4798:	00632e6b 	.word	0x00632e6b
    479c:	732f2e2e 	.word	0x732f2e2e
    47a0:	412f6372 	.word	0x412f6372
    47a4:	732f4653 	.word	0x732f4653
    47a8:	2f306d61 	.word	0x2f306d61
    47ac:	76697264 	.word	0x76697264
    47b0:	2f737265 	.word	0x2f737265
    47b4:	74737973 	.word	0x74737973
    47b8:	702f6d65 	.word	0x702f6d65
    47bc:	756d6e69 	.word	0x756d6e69
    47c0:	69702f78 	.word	0x69702f78
    47c4:	78756d6e 	.word	0x78756d6e
    47c8:	0000632e 	.word	0x0000632e
    47cc:	74726f70 	.word	0x74726f70
    47d0:	00000000 	.word	0x00000000
    47d4:	732f2e2e 	.word	0x732f2e2e
    47d8:	412f6372 	.word	0x412f6372
    47dc:	732f4653 	.word	0x732f4653
    47e0:	2f306d61 	.word	0x2f306d61
    47e4:	76697264 	.word	0x76697264
    47e8:	2f737265 	.word	0x2f737265
    47ec:	74737973 	.word	0x74737973
    47f0:	702f6d65 	.word	0x702f6d65
    47f4:	756d6e69 	.word	0x756d6e69
    47f8:	69702f78 	.word	0x69702f78
    47fc:	78756d6e 	.word	0x78756d6e
    4800:	0000682e 	.word	0x0000682e
    4804:	41744545 	.word	0x41744545
    4808:	50524f4d 	.word	0x50524f4d
    480c:	456d752e 	.word	0x456d752e
    4810:	000048dc 	.word	0x000048dc
    4814:	000048cc 	.word	0x000048cc
    4818:	000048ec 	.word	0x000048ec

0000481c <_test_str_eeprom_buffer_read_write_test.12938>:
    481c:	74736554 20676e69 52504545 62204d4f     Testing EEPROM b
    482c:	65666675 65722072 772f6461 65746972     uffer read/write
    483c:	6e756620 6f697463 696c616e 00007974      functionality..

0000484c <_test_str_eeprom_init_test.12936>:
    484c:	74736554 20676e69 52504545 65204d4f     Testing EEPROM e
    485c:	616c756d 20726f74 74696e69 696c6169     mulator initiali
    486c:	6974617a 00006e6f                       zation..

00004874 <_test_str_eeprom_page_read_write_test.12940>:
    4874:	74736554 20676e69 52504545 70204d4f     Testing EEPROM p
    4884:	20656761 64616572 6972772f 66206574     age read/write f
    4894:	74636e75 616e6f69 7974696c 00000000     unctionality....

000048a4 <_test_str_eeprom_test_suite.12943>:
    48a4:	204d4153 52504545 65204d4f 616c756d     SAM EEPROM emula
    48b4:	20726f74 76726573 20656369 74736574     tor service test
    48c4:	69757320 00006574                        suite..

000048cc <eeprom_buffer_read_write_test.12939>:
    48cc:	00002a85 00002bd1 00000000 0000481c     .*...+.......H..

000048dc <eeprom_init_test.12937>:
    48dc:	00000000 00002cbd 00000000 0000484c     .....,......LH..

000048ec <eeprom_page_read_write_test.12941>:
    48ec:	00002ab5 00002ae5 00000000 00004874     .*...*......tH..
    48fc:	52504545 77204d4f 65746972 66756220     EEPROM write buf
    490c:	20726566 6c696166 00006465 52504545     fer failed..EEPR
    491c:	72204d4f 20646165 66667562 66207265     OM read buffer f
    492c:	656c6961 00000064 66667542 64207265     ailed...Buffer d
    493c:	20617461 6f636e69 63657272 74612074     ata incorrect at
    494c:	646e6920 25207865 45203a64 63657078      index %d: Expec
    495c:	20646574 2d206425 61655220 64252064     ted %d - Read %d
    496c:	00000000 45206f4e 4f525045 656d204d     ....No EEPROM me
    497c:	79726f6d 63657320 6e6f6974 73616820     mory section has
    498c:	65656220 6573206e 6e692074 65687420      been set in the
    499c:	76656420 27656369 75662073 00736573      device's fuses.
    49ac:	52504545 65204d4f 616c756d 20726f74     EEPROM emulator 
    49bc:	74696e69 696c6169 6974617a 66206e6f     initialization f
    49cc:	656c6961 00000064 52504545 70204d4f     ailed...EEPROM p
    49dc:	6d617261 72657465 74657220 76656972     arameter retriev
    49ec:	61662065 64656c69 00000000 20746547     e failed....Get 
    49fc:	61726170 6574656d 65722072 6e727574     parameter return
    4a0c:	77206465 676e6f72 67617020 69732065     ed wrong page si
    4a1c:	7845657a 74636570 25206465 202d2064     zeExpected %d - 
    4a2c:	75746552 64656e72 00642520 732f2e2e     Returned %d.../s
    4a3c:	752f6372 5f74696e 74736574 0000632e     rc/unit_test.c..
    4a4c:	70696b53 676e6970 73657420 75642074     Skipping test du
    4a5c:	6f742065 69616620 2064656c 74696e69     e to failed init
    4a6c:	696c6169 6974617a 00006e6f 52504545     ialization..EEPR
    4a7c:	77204d4f 65746972 67617020 61662065     OM write page fa
    4a8c:	64656c69 00000000 52504545 72204d4f     iled....EEPROM r
    4a9c:	20646165 65676170 69616620 0064656c     ead page failed.
    4aac:	65676150 74616420 6e692061 72726f63     Page data incorr
    4abc:	20746365 69207461 7865646e 3a642520     ect at index %d:
    4acc:	70784520 65746365 64252064 52202d20      Expected %d - R
    4adc:	20646165 00006425                       ead %d..

00004ae4 <_global_impure_ptr>:
    4ae4:	20000008 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    4af4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    4b04:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    4b14:	64636261 00006665                       abcdef..

00004b1c <__sf_fake_stderr>:
	...

00004b3c <__sf_fake_stdin>:
	...

00004b5c <__sf_fake_stdout>:
	...

00004b7c <_init>:
    4b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b7e:	46c0      	nop			; (mov r8, r8)
    4b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b82:	bc08      	pop	{r3}
    4b84:	469e      	mov	lr, r3
    4b86:	4770      	bx	lr

00004b88 <__init_array_start>:
    4b88:	000000dd 	.word	0x000000dd

00004b8c <_fini>:
    4b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b8e:	46c0      	nop			; (mov r8, r8)
    4b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b92:	bc08      	pop	{r3}
    4b94:	469e      	mov	lr, r3
    4b96:	4770      	bx	lr

00004b98 <__fini_array_start>:
    4b98:	000000b5 	.word	0x000000b5
