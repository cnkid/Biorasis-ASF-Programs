
I2C_QUICK_START_MASTER_INTERRUPT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c8c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00003c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  2000000c  00003c98  0002000c  2**2
                  ALLOC
  3 .stack        00002004  200000f4  00003d80  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   000284d1  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003629  00000000  00000000  0004855e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005696  00000000  00000000  0004bb87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000500  00000000  00000000  0005121d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005a0  00000000  00000000  0005171d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a533  00000000  00000000  00051cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b479  00000000  00000000  0006c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d496  00000000  00000000  00077669  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000eac  00000000  00000000  00104b00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 20 00 20 bd 1b 00 00 b9 1b 00 00 b9 1b 00 00     . . ............
	...
      2c:	b9 1b 00 00 00 00 00 00 00 00 00 00 b9 1b 00 00     ................
      3c:	b9 1b 00 00 b9 1b 00 00 b9 1b 00 00 b9 1b 00 00     ................
      4c:	b9 1b 00 00 b9 1b 00 00 b9 1b 00 00 b9 1b 00 00     ................
      5c:	b9 1b 00 00 b9 1b 00 00 a5 15 00 00 b5 15 00 00     ................
      6c:	c5 15 00 00 d5 15 00 00 e5 15 00 00 f5 15 00 00     ................
      7c:	b9 1b 00 00 b9 1b 00 00 b9 1b 00 00 b9 1b 00 00     ................
      8c:	b9 1b 00 00 b9 1b 00 00 b9 1b 00 00 b9 1b 00 00     ................
      9c:	b9 1b 00 00 b9 1b 00 00 b9 1b 00 00 b9 1b 00 00     ................
      ac:	b9 1b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00003c8c 	.word	0x00003c8c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00003c8c 	.word	0x00003c8c
     10c:	00003c8c 	.word	0x00003c8c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001949 	.word	0x00001949
     140:	00001ffd 	.word	0x00001ffd
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     180:	b5f0      	push	{r4, r5, r6, r7, lr}
     182:	46de      	mov	lr, fp
     184:	4657      	mov	r7, sl
     186:	464e      	mov	r6, r9
     188:	4645      	mov	r5, r8
     18a:	b5e0      	push	{r5, r6, r7, lr}
     18c:	b091      	sub	sp, #68	; 0x44
     18e:	0005      	movs	r5, r0
     190:	000c      	movs	r4, r1
     192:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     194:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     196:	0008      	movs	r0, r1
     198:	4bbc      	ldr	r3, [pc, #752]	; (48c <usart_init+0x30c>)
     19a:	4798      	blx	r3
     19c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     19e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     1a0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     1a2:	07db      	lsls	r3, r3, #31
     1a4:	d506      	bpl.n	1b4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     1a6:	b011      	add	sp, #68	; 0x44
     1a8:	bc3c      	pop	{r2, r3, r4, r5}
     1aa:	4690      	mov	r8, r2
     1ac:	4699      	mov	r9, r3
     1ae:	46a2      	mov	sl, r4
     1b0:	46ab      	mov	fp, r5
     1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     1b4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     1b6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     1b8:	079b      	lsls	r3, r3, #30
     1ba:	d4f4      	bmi.n	1a6 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1bc:	49b4      	ldr	r1, [pc, #720]	; (490 <usart_init+0x310>)
     1be:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     1c0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     1c2:	2301      	movs	r3, #1
     1c4:	40bb      	lsls	r3, r7
     1c6:	4303      	orrs	r3, r0
     1c8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     1ca:	a90f      	add	r1, sp, #60	; 0x3c
     1cc:	272d      	movs	r7, #45	; 0x2d
     1ce:	5df3      	ldrb	r3, [r6, r7]
     1d0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     1d2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1d4:	b2d3      	uxtb	r3, r2
     1d6:	9302      	str	r3, [sp, #8]
     1d8:	0018      	movs	r0, r3
     1da:	4bae      	ldr	r3, [pc, #696]	; (494 <usart_init+0x314>)
     1dc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     1de:	9802      	ldr	r0, [sp, #8]
     1e0:	4bad      	ldr	r3, [pc, #692]	; (498 <usart_init+0x318>)
     1e2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     1e4:	5df0      	ldrb	r0, [r6, r7]
     1e6:	2100      	movs	r1, #0
     1e8:	4bac      	ldr	r3, [pc, #688]	; (49c <usart_init+0x31c>)
     1ea:	4798      	blx	r3
	module->character_size = config->character_size;
     1ec:	7af3      	ldrb	r3, [r6, #11]
     1ee:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     1f0:	2324      	movs	r3, #36	; 0x24
     1f2:	5cf3      	ldrb	r3, [r6, r3]
     1f4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     1f6:	2325      	movs	r3, #37	; 0x25
     1f8:	5cf3      	ldrb	r3, [r6, r3]
     1fa:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     1fc:	7ef3      	ldrb	r3, [r6, #27]
     1fe:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     200:	7f33      	ldrb	r3, [r6, #28]
     202:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     204:	682b      	ldr	r3, [r5, #0]
     206:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     208:	0018      	movs	r0, r3
     20a:	4ba0      	ldr	r3, [pc, #640]	; (48c <usart_init+0x30c>)
     20c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     20e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     210:	2200      	movs	r2, #0
     212:	230e      	movs	r3, #14
     214:	a906      	add	r1, sp, #24
     216:	468c      	mov	ip, r1
     218:	4463      	add	r3, ip
     21a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     21c:	8a32      	ldrh	r2, [r6, #16]
     21e:	9202      	str	r2, [sp, #8]
     220:	2380      	movs	r3, #128	; 0x80
     222:	01db      	lsls	r3, r3, #7
     224:	429a      	cmp	r2, r3
     226:	d100      	bne.n	22a <usart_init+0xaa>
     228:	e09e      	b.n	368 <usart_init+0x1e8>
     22a:	d90f      	bls.n	24c <usart_init+0xcc>
     22c:	23c0      	movs	r3, #192	; 0xc0
     22e:	01db      	lsls	r3, r3, #7
     230:	9a02      	ldr	r2, [sp, #8]
     232:	429a      	cmp	r2, r3
     234:	d100      	bne.n	238 <usart_init+0xb8>
     236:	e092      	b.n	35e <usart_init+0x1de>
     238:	2380      	movs	r3, #128	; 0x80
     23a:	021b      	lsls	r3, r3, #8
     23c:	429a      	cmp	r2, r3
     23e:	d000      	beq.n	242 <usart_init+0xc2>
     240:	e11f      	b.n	482 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     242:	2303      	movs	r3, #3
     244:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     246:	2300      	movs	r3, #0
     248:	9307      	str	r3, [sp, #28]
     24a:	e008      	b.n	25e <usart_init+0xde>
	switch (config->sample_rate) {
     24c:	2380      	movs	r3, #128	; 0x80
     24e:	019b      	lsls	r3, r3, #6
     250:	429a      	cmp	r2, r3
     252:	d000      	beq.n	256 <usart_init+0xd6>
     254:	e115      	b.n	482 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     256:	2310      	movs	r3, #16
     258:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     25a:	3b0f      	subs	r3, #15
     25c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     25e:	6833      	ldr	r3, [r6, #0]
     260:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     262:	68f3      	ldr	r3, [r6, #12]
     264:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     266:	6973      	ldr	r3, [r6, #20]
     268:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     26a:	7e33      	ldrb	r3, [r6, #24]
     26c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     26e:	2326      	movs	r3, #38	; 0x26
     270:	5cf3      	ldrb	r3, [r6, r3]
     272:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     274:	6873      	ldr	r3, [r6, #4]
     276:	4699      	mov	r9, r3
	switch (transfer_mode)
     278:	2b00      	cmp	r3, #0
     27a:	d100      	bne.n	27e <usart_init+0xfe>
     27c:	e0a0      	b.n	3c0 <usart_init+0x240>
     27e:	2380      	movs	r3, #128	; 0x80
     280:	055b      	lsls	r3, r3, #21
     282:	4599      	cmp	r9, r3
     284:	d100      	bne.n	288 <usart_init+0x108>
     286:	e084      	b.n	392 <usart_init+0x212>
	if(config->encoding_format_enable) {
     288:	7e73      	ldrb	r3, [r6, #25]
     28a:	2b00      	cmp	r3, #0
     28c:	d002      	beq.n	294 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     28e:	7eb3      	ldrb	r3, [r6, #26]
     290:	4642      	mov	r2, r8
     292:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     294:	682a      	ldr	r2, [r5, #0]
     296:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     298:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     29a:	2b00      	cmp	r3, #0
     29c:	d1fc      	bne.n	298 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     29e:	330e      	adds	r3, #14
     2a0:	aa06      	add	r2, sp, #24
     2a2:	4694      	mov	ip, r2
     2a4:	4463      	add	r3, ip
     2a6:	881b      	ldrh	r3, [r3, #0]
     2a8:	4642      	mov	r2, r8
     2aa:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     2ac:	9b05      	ldr	r3, [sp, #20]
     2ae:	9a03      	ldr	r2, [sp, #12]
     2b0:	4313      	orrs	r3, r2
     2b2:	9a04      	ldr	r2, [sp, #16]
     2b4:	4313      	orrs	r3, r2
     2b6:	464a      	mov	r2, r9
     2b8:	4313      	orrs	r3, r2
     2ba:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     2bc:	465b      	mov	r3, fp
     2be:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     2c0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     2c2:	4653      	mov	r3, sl
     2c4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     2c6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     2c8:	2327      	movs	r3, #39	; 0x27
     2ca:	5cf3      	ldrb	r3, [r6, r3]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d101      	bne.n	2d4 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     2d0:	3304      	adds	r3, #4
     2d2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     2d4:	7e73      	ldrb	r3, [r6, #25]
     2d6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     2d8:	7f32      	ldrb	r2, [r6, #28]
     2da:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     2dc:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     2de:	7f72      	ldrb	r2, [r6, #29]
     2e0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     2e2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     2e4:	2224      	movs	r2, #36	; 0x24
     2e6:	5cb2      	ldrb	r2, [r6, r2]
     2e8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     2ea:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     2ec:	2225      	movs	r2, #37	; 0x25
     2ee:	5cb2      	ldrb	r2, [r6, r2]
     2f0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     2f2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     2f4:	7ab1      	ldrb	r1, [r6, #10]
     2f6:	7af2      	ldrb	r2, [r6, #11]
     2f8:	4311      	orrs	r1, r2
     2fa:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     2fc:	8933      	ldrh	r3, [r6, #8]
     2fe:	2bff      	cmp	r3, #255	; 0xff
     300:	d100      	bne.n	304 <usart_init+0x184>
     302:	e081      	b.n	408 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     304:	2280      	movs	r2, #128	; 0x80
     306:	0452      	lsls	r2, r2, #17
     308:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     30a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     30c:	232c      	movs	r3, #44	; 0x2c
     30e:	5cf3      	ldrb	r3, [r6, r3]
     310:	2b00      	cmp	r3, #0
     312:	d103      	bne.n	31c <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     314:	4b62      	ldr	r3, [pc, #392]	; (4a0 <usart_init+0x320>)
     316:	789b      	ldrb	r3, [r3, #2]
     318:	079b      	lsls	r3, r3, #30
     31a:	d501      	bpl.n	320 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     31c:	2380      	movs	r3, #128	; 0x80
     31e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     320:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     322:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     324:	2b00      	cmp	r3, #0
     326:	d1fc      	bne.n	322 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     328:	4643      	mov	r3, r8
     32a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     32c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     32e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     330:	2b00      	cmp	r3, #0
     332:	d1fc      	bne.n	32e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     334:	4643      	mov	r3, r8
     336:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     338:	ab0e      	add	r3, sp, #56	; 0x38
     33a:	2280      	movs	r2, #128	; 0x80
     33c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     33e:	2200      	movs	r2, #0
     340:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     342:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     344:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     346:	6b33      	ldr	r3, [r6, #48]	; 0x30
     348:	930a      	str	r3, [sp, #40]	; 0x28
     34a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     34c:	930b      	str	r3, [sp, #44]	; 0x2c
     34e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     350:	930c      	str	r3, [sp, #48]	; 0x30
     352:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     354:	9302      	str	r3, [sp, #8]
     356:	930d      	str	r3, [sp, #52]	; 0x34
     358:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     35a:	ae0a      	add	r6, sp, #40	; 0x28
     35c:	e063      	b.n	426 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     35e:	2308      	movs	r3, #8
     360:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     362:	3b07      	subs	r3, #7
     364:	9307      	str	r3, [sp, #28]
     366:	e77a      	b.n	25e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     368:	6833      	ldr	r3, [r6, #0]
     36a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     36c:	68f3      	ldr	r3, [r6, #12]
     36e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     370:	6973      	ldr	r3, [r6, #20]
     372:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     374:	7e33      	ldrb	r3, [r6, #24]
     376:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     378:	2326      	movs	r3, #38	; 0x26
     37a:	5cf3      	ldrb	r3, [r6, r3]
     37c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     37e:	6873      	ldr	r3, [r6, #4]
     380:	4699      	mov	r9, r3
	switch (transfer_mode)
     382:	2b00      	cmp	r3, #0
     384:	d018      	beq.n	3b8 <usart_init+0x238>
     386:	2380      	movs	r3, #128	; 0x80
     388:	055b      	lsls	r3, r3, #21
     38a:	4599      	cmp	r9, r3
     38c:	d001      	beq.n	392 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     38e:	2000      	movs	r0, #0
     390:	e025      	b.n	3de <usart_init+0x25e>
			if (!config->use_external_clock) {
     392:	2327      	movs	r3, #39	; 0x27
     394:	5cf3      	ldrb	r3, [r6, r3]
     396:	2b00      	cmp	r3, #0
     398:	d000      	beq.n	39c <usart_init+0x21c>
     39a:	e775      	b.n	288 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     39c:	6a33      	ldr	r3, [r6, #32]
     39e:	001f      	movs	r7, r3
     3a0:	b2c0      	uxtb	r0, r0
     3a2:	4b40      	ldr	r3, [pc, #256]	; (4a4 <usart_init+0x324>)
     3a4:	4798      	blx	r3
     3a6:	0001      	movs	r1, r0
     3a8:	220e      	movs	r2, #14
     3aa:	ab06      	add	r3, sp, #24
     3ac:	469c      	mov	ip, r3
     3ae:	4462      	add	r2, ip
     3b0:	0038      	movs	r0, r7
     3b2:	4b3d      	ldr	r3, [pc, #244]	; (4a8 <usart_init+0x328>)
     3b4:	4798      	blx	r3
     3b6:	e012      	b.n	3de <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     3b8:	2308      	movs	r3, #8
     3ba:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     3bc:	2300      	movs	r3, #0
     3be:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     3c0:	2327      	movs	r3, #39	; 0x27
     3c2:	5cf3      	ldrb	r3, [r6, r3]
     3c4:	2b00      	cmp	r3, #0
     3c6:	d00e      	beq.n	3e6 <usart_init+0x266>
				status_code =
     3c8:	9b06      	ldr	r3, [sp, #24]
     3ca:	9300      	str	r3, [sp, #0]
     3cc:	9b07      	ldr	r3, [sp, #28]
     3ce:	220e      	movs	r2, #14
     3d0:	a906      	add	r1, sp, #24
     3d2:	468c      	mov	ip, r1
     3d4:	4462      	add	r2, ip
     3d6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     3d8:	6a30      	ldr	r0, [r6, #32]
     3da:	4f34      	ldr	r7, [pc, #208]	; (4ac <usart_init+0x32c>)
     3dc:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     3de:	2800      	cmp	r0, #0
     3e0:	d000      	beq.n	3e4 <usart_init+0x264>
     3e2:	e6e0      	b.n	1a6 <usart_init+0x26>
     3e4:	e750      	b.n	288 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     3e6:	6a33      	ldr	r3, [r6, #32]
     3e8:	001f      	movs	r7, r3
     3ea:	b2c0      	uxtb	r0, r0
     3ec:	4b2d      	ldr	r3, [pc, #180]	; (4a4 <usart_init+0x324>)
     3ee:	4798      	blx	r3
     3f0:	0001      	movs	r1, r0
				status_code =
     3f2:	9b06      	ldr	r3, [sp, #24]
     3f4:	9300      	str	r3, [sp, #0]
     3f6:	9b07      	ldr	r3, [sp, #28]
     3f8:	220e      	movs	r2, #14
     3fa:	a806      	add	r0, sp, #24
     3fc:	4684      	mov	ip, r0
     3fe:	4462      	add	r2, ip
     400:	0038      	movs	r0, r7
     402:	4f2a      	ldr	r7, [pc, #168]	; (4ac <usart_init+0x32c>)
     404:	47b8      	blx	r7
     406:	e7ea      	b.n	3de <usart_init+0x25e>
		if(config->lin_slave_enable) {
     408:	7ef3      	ldrb	r3, [r6, #27]
     40a:	2b00      	cmp	r3, #0
     40c:	d100      	bne.n	410 <usart_init+0x290>
     40e:	e77d      	b.n	30c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     410:	2380      	movs	r3, #128	; 0x80
     412:	04db      	lsls	r3, r3, #19
     414:	431f      	orrs	r7, r3
     416:	e779      	b.n	30c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     418:	0020      	movs	r0, r4
     41a:	4b25      	ldr	r3, [pc, #148]	; (4b0 <usart_init+0x330>)
     41c:	4798      	blx	r3
     41e:	e007      	b.n	430 <usart_init+0x2b0>
     420:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     422:	2f04      	cmp	r7, #4
     424:	d00d      	beq.n	442 <usart_init+0x2c2>
     426:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     428:	00bb      	lsls	r3, r7, #2
     42a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     42c:	2800      	cmp	r0, #0
     42e:	d0f3      	beq.n	418 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     430:	1c43      	adds	r3, r0, #1
     432:	d0f5      	beq.n	420 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     434:	a90e      	add	r1, sp, #56	; 0x38
     436:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     438:	0c00      	lsrs	r0, r0, #16
     43a:	b2c0      	uxtb	r0, r0
     43c:	4b1d      	ldr	r3, [pc, #116]	; (4b4 <usart_init+0x334>)
     43e:	4798      	blx	r3
     440:	e7ee      	b.n	420 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     442:	2300      	movs	r3, #0
     444:	60eb      	str	r3, [r5, #12]
     446:	612b      	str	r3, [r5, #16]
     448:	616b      	str	r3, [r5, #20]
     44a:	61ab      	str	r3, [r5, #24]
     44c:	61eb      	str	r3, [r5, #28]
     44e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     450:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     452:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     454:	2200      	movs	r2, #0
     456:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     458:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     45a:	3330      	adds	r3, #48	; 0x30
     45c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     45e:	3301      	adds	r3, #1
     460:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     462:	3301      	adds	r3, #1
     464:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     466:	3301      	adds	r3, #1
     468:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     46a:	6828      	ldr	r0, [r5, #0]
     46c:	4b07      	ldr	r3, [pc, #28]	; (48c <usart_init+0x30c>)
     46e:	4798      	blx	r3
     470:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     472:	4911      	ldr	r1, [pc, #68]	; (4b8 <usart_init+0x338>)
     474:	4b11      	ldr	r3, [pc, #68]	; (4bc <usart_init+0x33c>)
     476:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     478:	00a4      	lsls	r4, r4, #2
     47a:	4b11      	ldr	r3, [pc, #68]	; (4c0 <usart_init+0x340>)
     47c:	50e5      	str	r5, [r4, r3]
	return status_code;
     47e:	2000      	movs	r0, #0
     480:	e691      	b.n	1a6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     482:	2310      	movs	r3, #16
     484:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     486:	2300      	movs	r3, #0
     488:	9307      	str	r3, [sp, #28]
     48a:	e6e8      	b.n	25e <usart_init+0xde>
     48c:	000014fd 	.word	0x000014fd
     490:	40000400 	.word	0x40000400
     494:	00001a61 	.word	0x00001a61
     498:	000019d5 	.word	0x000019d5
     49c:	00001339 	.word	0x00001339
     4a0:	41002000 	.word	0x41002000
     4a4:	00001a7d 	.word	0x00001a7d
     4a8:	0000127b 	.word	0x0000127b
     4ac:	000012a5 	.word	0x000012a5
     4b0:	00001385 	.word	0x00001385
     4b4:	00001b59 	.word	0x00001b59
     4b8:	00000625 	.word	0x00000625
     4bc:	00001539 	.word	0x00001539
     4c0:	20000070 	.word	0x20000070

000004c4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     4c4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     4c6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     4c8:	2a00      	cmp	r2, #0
     4ca:	d101      	bne.n	4d0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     4cc:	0018      	movs	r0, r3
     4ce:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     4d0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     4d2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     4d4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     4d6:	2a00      	cmp	r2, #0
     4d8:	d1f8      	bne.n	4cc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     4da:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     4dc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     4de:	2a00      	cmp	r2, #0
     4e0:	d1fc      	bne.n	4dc <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     4e2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     4e4:	2102      	movs	r1, #2
     4e6:	7e1a      	ldrb	r2, [r3, #24]
     4e8:	420a      	tst	r2, r1
     4ea:	d0fc      	beq.n	4e6 <usart_write_wait+0x22>
	return STATUS_OK;
     4ec:	2300      	movs	r3, #0
     4ee:	e7ed      	b.n	4cc <usart_write_wait+0x8>

000004f0 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f2:	46ce      	mov	lr, r9
     4f4:	4647      	mov	r7, r8
     4f6:	b580      	push	{r7, lr}
     4f8:	b083      	sub	sp, #12
     4fa:	0005      	movs	r5, r0
     4fc:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     4fe:	2017      	movs	r0, #23
	if (length == 0) {
     500:	2a00      	cmp	r2, #0
     502:	d104      	bne.n	50e <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     504:	b003      	add	sp, #12
     506:	bc0c      	pop	{r2, r3}
     508:	4690      	mov	r8, r2
     50a:	4699      	mov	r9, r3
     50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     50e:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     510:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     512:	2b00      	cmp	r3, #0
     514:	d0f6      	beq.n	504 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     516:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     518:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     51a:	2b00      	cmp	r3, #0
     51c:	d1fc      	bne.n	518 <usart_write_buffer_wait+0x28>
	while (length--) {
     51e:	3a01      	subs	r2, #1
     520:	b293      	uxth	r3, r2
     522:	4699      	mov	r9, r3
     524:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     526:	2701      	movs	r7, #1
	while (length--) {
     528:	4b1f      	ldr	r3, [pc, #124]	; (5a8 <usart_write_buffer_wait+0xb8>)
     52a:	4698      	mov	r8, r3
     52c:	e011      	b.n	552 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     52e:	1c73      	adds	r3, r6, #1
     530:	b29b      	uxth	r3, r3
     532:	9a01      	ldr	r2, [sp, #4]
     534:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     536:	796a      	ldrb	r2, [r5, #5]
     538:	2a01      	cmp	r2, #1
     53a:	d017      	beq.n	56c <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     53c:	b289      	uxth	r1, r1
     53e:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     540:	0028      	movs	r0, r5
     542:	4b1a      	ldr	r3, [pc, #104]	; (5ac <usart_write_buffer_wait+0xbc>)
     544:	4798      	blx	r3
	while (length--) {
     546:	464b      	mov	r3, r9
     548:	3b01      	subs	r3, #1
     54a:	b29b      	uxth	r3, r3
     54c:	4699      	mov	r9, r3
     54e:	4543      	cmp	r3, r8
     550:	d013      	beq.n	57a <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     552:	7e23      	ldrb	r3, [r4, #24]
     554:	423b      	tst	r3, r7
     556:	d1ea      	bne.n	52e <usart_write_buffer_wait+0x3e>
     558:	4b13      	ldr	r3, [pc, #76]	; (5a8 <usart_write_buffer_wait+0xb8>)
     55a:	7e22      	ldrb	r2, [r4, #24]
     55c:	423a      	tst	r2, r7
     55e:	d1e6      	bne.n	52e <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     560:	2b01      	cmp	r3, #1
     562:	d019      	beq.n	598 <usart_write_buffer_wait+0xa8>
     564:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     566:	2b00      	cmp	r3, #0
     568:	d1f7      	bne.n	55a <usart_write_buffer_wait+0x6a>
     56a:	e7e0      	b.n	52e <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     56c:	3602      	adds	r6, #2
     56e:	b2b6      	uxth	r6, r6
     570:	9a01      	ldr	r2, [sp, #4]
     572:	5cd3      	ldrb	r3, [r2, r3]
     574:	021b      	lsls	r3, r3, #8
     576:	4319      	orrs	r1, r3
     578:	e7e2      	b.n	540 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     57a:	7e23      	ldrb	r3, [r4, #24]
     57c:	079b      	lsls	r3, r3, #30
     57e:	d40d      	bmi.n	59c <usart_write_buffer_wait+0xac>
     580:	4b09      	ldr	r3, [pc, #36]	; (5a8 <usart_write_buffer_wait+0xb8>)
     582:	2102      	movs	r1, #2
     584:	7e22      	ldrb	r2, [r4, #24]
     586:	420a      	tst	r2, r1
     588:	d10a      	bne.n	5a0 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     58a:	2b01      	cmp	r3, #1
     58c:	d00a      	beq.n	5a4 <usart_write_buffer_wait+0xb4>
     58e:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     590:	2b00      	cmp	r3, #0
     592:	d1f7      	bne.n	584 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     594:	2000      	movs	r0, #0
     596:	e7b5      	b.n	504 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     598:	2012      	movs	r0, #18
     59a:	e7b3      	b.n	504 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     59c:	2000      	movs	r0, #0
     59e:	e7b1      	b.n	504 <usart_write_buffer_wait+0x14>
     5a0:	2000      	movs	r0, #0
     5a2:	e7af      	b.n	504 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     5a4:	2012      	movs	r0, #18
     5a6:	e7ad      	b.n	504 <usart_write_buffer_wait+0x14>
     5a8:	0000ffff 	.word	0x0000ffff
     5ac:	000004c5 	.word	0x000004c5

000005b0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5b2:	0006      	movs	r6, r0
     5b4:	000c      	movs	r4, r1
     5b6:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     5b8:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     5ba:	4b0a      	ldr	r3, [pc, #40]	; (5e4 <_usart_write_buffer+0x34>)
     5bc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     5be:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     5c0:	b29b      	uxth	r3, r3
     5c2:	2b00      	cmp	r3, #0
     5c4:	d003      	beq.n	5ce <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     5c6:	4b08      	ldr	r3, [pc, #32]	; (5e8 <_usart_write_buffer+0x38>)
     5c8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     5ca:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     5ce:	85f5      	strh	r5, [r6, #46]	; 0x2e
     5d0:	4b05      	ldr	r3, [pc, #20]	; (5e8 <_usart_write_buffer+0x38>)
     5d2:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     5d4:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     5d6:	2205      	movs	r2, #5
     5d8:	2333      	movs	r3, #51	; 0x33
     5da:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     5dc:	3b32      	subs	r3, #50	; 0x32
     5de:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     5e0:	2000      	movs	r0, #0
     5e2:	e7f3      	b.n	5cc <_usart_write_buffer+0x1c>
     5e4:	000007b9 	.word	0x000007b9
     5e8:	000007f9 	.word	0x000007f9

000005ec <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     5ec:	1c93      	adds	r3, r2, #2
     5ee:	009b      	lsls	r3, r3, #2
     5f0:	18c3      	adds	r3, r0, r3
     5f2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     5f4:	2130      	movs	r1, #48	; 0x30
     5f6:	2301      	movs	r3, #1
     5f8:	4093      	lsls	r3, r2
     5fa:	001a      	movs	r2, r3
     5fc:	5c43      	ldrb	r3, [r0, r1]
     5fe:	4313      	orrs	r3, r2
     600:	5443      	strb	r3, [r0, r1]
}
     602:	4770      	bx	lr

00000604 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     604:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     606:	2317      	movs	r3, #23
	if (length == 0) {
     608:	2a00      	cmp	r2, #0
     60a:	d101      	bne.n	610 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     60c:	0018      	movs	r0, r3
     60e:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     610:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     612:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     614:	2c00      	cmp	r4, #0
     616:	d0f9      	beq.n	60c <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     618:	4b01      	ldr	r3, [pc, #4]	; (620 <usart_write_buffer_job+0x1c>)
     61a:	4798      	blx	r3
     61c:	0003      	movs	r3, r0
     61e:	e7f5      	b.n	60c <usart_write_buffer_job+0x8>
     620:	000005b1 	.word	0x000005b1

00000624 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     626:	0080      	lsls	r0, r0, #2
     628:	4b62      	ldr	r3, [pc, #392]	; (7b4 <_usart_interrupt_handler+0x190>)
     62a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     62c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     62e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     630:	2b00      	cmp	r3, #0
     632:	d1fc      	bne.n	62e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     634:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     636:	7da6      	ldrb	r6, [r4, #22]
     638:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     63a:	2330      	movs	r3, #48	; 0x30
     63c:	5ceb      	ldrb	r3, [r5, r3]
     63e:	2231      	movs	r2, #49	; 0x31
     640:	5caf      	ldrb	r7, [r5, r2]
     642:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     644:	07f3      	lsls	r3, r6, #31
     646:	d522      	bpl.n	68e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     648:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     64a:	b29b      	uxth	r3, r3
     64c:	2b00      	cmp	r3, #0
     64e:	d01c      	beq.n	68a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     650:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     652:	7813      	ldrb	r3, [r2, #0]
     654:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     656:	1c51      	adds	r1, r2, #1
     658:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     65a:	7969      	ldrb	r1, [r5, #5]
     65c:	2901      	cmp	r1, #1
     65e:	d00e      	beq.n	67e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     660:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     662:	05db      	lsls	r3, r3, #23
     664:	0ddb      	lsrs	r3, r3, #23
     666:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     668:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     66a:	3b01      	subs	r3, #1
     66c:	b29b      	uxth	r3, r3
     66e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     670:	2b00      	cmp	r3, #0
     672:	d10c      	bne.n	68e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     674:	3301      	adds	r3, #1
     676:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     678:	3301      	adds	r3, #1
     67a:	75a3      	strb	r3, [r4, #22]
     67c:	e007      	b.n	68e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     67e:	7851      	ldrb	r1, [r2, #1]
     680:	0209      	lsls	r1, r1, #8
     682:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     684:	3202      	adds	r2, #2
     686:	62aa      	str	r2, [r5, #40]	; 0x28
     688:	e7eb      	b.n	662 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     68a:	2301      	movs	r3, #1
     68c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     68e:	07b3      	lsls	r3, r6, #30
     690:	d506      	bpl.n	6a0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     692:	2302      	movs	r3, #2
     694:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     696:	2200      	movs	r2, #0
     698:	3331      	adds	r3, #49	; 0x31
     69a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     69c:	07fb      	lsls	r3, r7, #31
     69e:	d41a      	bmi.n	6d6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     6a0:	0773      	lsls	r3, r6, #29
     6a2:	d565      	bpl.n	770 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     6a4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     6a6:	b29b      	uxth	r3, r3
     6a8:	2b00      	cmp	r3, #0
     6aa:	d05f      	beq.n	76c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     6ac:	8b63      	ldrh	r3, [r4, #26]
     6ae:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     6b0:	071a      	lsls	r2, r3, #28
     6b2:	d414      	bmi.n	6de <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     6b4:	223f      	movs	r2, #63	; 0x3f
     6b6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     6b8:	2b00      	cmp	r3, #0
     6ba:	d034      	beq.n	726 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     6bc:	079a      	lsls	r2, r3, #30
     6be:	d511      	bpl.n	6e4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     6c0:	221a      	movs	r2, #26
     6c2:	2332      	movs	r3, #50	; 0x32
     6c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     6c6:	3b30      	subs	r3, #48	; 0x30
     6c8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     6ca:	077b      	lsls	r3, r7, #29
     6cc:	d550      	bpl.n	770 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     6ce:	0028      	movs	r0, r5
     6d0:	696b      	ldr	r3, [r5, #20]
     6d2:	4798      	blx	r3
     6d4:	e04c      	b.n	770 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     6d6:	0028      	movs	r0, r5
     6d8:	68eb      	ldr	r3, [r5, #12]
     6da:	4798      	blx	r3
     6dc:	e7e0      	b.n	6a0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     6de:	2237      	movs	r2, #55	; 0x37
     6e0:	4013      	ands	r3, r2
     6e2:	e7e9      	b.n	6b8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     6e4:	075a      	lsls	r2, r3, #29
     6e6:	d505      	bpl.n	6f4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     6e8:	221e      	movs	r2, #30
     6ea:	2332      	movs	r3, #50	; 0x32
     6ec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     6ee:	3b2e      	subs	r3, #46	; 0x2e
     6f0:	8363      	strh	r3, [r4, #26]
     6f2:	e7ea      	b.n	6ca <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     6f4:	07da      	lsls	r2, r3, #31
     6f6:	d505      	bpl.n	704 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     6f8:	2213      	movs	r2, #19
     6fa:	2332      	movs	r3, #50	; 0x32
     6fc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     6fe:	3b31      	subs	r3, #49	; 0x31
     700:	8363      	strh	r3, [r4, #26]
     702:	e7e2      	b.n	6ca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     704:	06da      	lsls	r2, r3, #27
     706:	d505      	bpl.n	714 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     708:	2242      	movs	r2, #66	; 0x42
     70a:	2332      	movs	r3, #50	; 0x32
     70c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     70e:	3b22      	subs	r3, #34	; 0x22
     710:	8363      	strh	r3, [r4, #26]
     712:	e7da      	b.n	6ca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     714:	2220      	movs	r2, #32
     716:	421a      	tst	r2, r3
     718:	d0d7      	beq.n	6ca <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     71a:	3221      	adds	r2, #33	; 0x21
     71c:	2332      	movs	r3, #50	; 0x32
     71e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     720:	3b12      	subs	r3, #18
     722:	8363      	strh	r3, [r4, #26]
     724:	e7d1      	b.n	6ca <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     726:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     728:	05db      	lsls	r3, r3, #23
     72a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     72c:	b2da      	uxtb	r2, r3
     72e:	6a69      	ldr	r1, [r5, #36]	; 0x24
     730:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     732:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     734:	1c51      	adds	r1, r2, #1
     736:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     738:	7969      	ldrb	r1, [r5, #5]
     73a:	2901      	cmp	r1, #1
     73c:	d010      	beq.n	760 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     73e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     740:	3b01      	subs	r3, #1
     742:	b29b      	uxth	r3, r3
     744:	85ab      	strh	r3, [r5, #44]	; 0x2c
     746:	2b00      	cmp	r3, #0
     748:	d112      	bne.n	770 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     74a:	3304      	adds	r3, #4
     74c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     74e:	2200      	movs	r2, #0
     750:	332e      	adds	r3, #46	; 0x2e
     752:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     754:	07bb      	lsls	r3, r7, #30
     756:	d50b      	bpl.n	770 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     758:	0028      	movs	r0, r5
     75a:	692b      	ldr	r3, [r5, #16]
     75c:	4798      	blx	r3
     75e:	e007      	b.n	770 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     760:	0a1b      	lsrs	r3, r3, #8
     762:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     764:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     766:	3301      	adds	r3, #1
     768:	626b      	str	r3, [r5, #36]	; 0x24
     76a:	e7e8      	b.n	73e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     76c:	2304      	movs	r3, #4
     76e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     770:	06f3      	lsls	r3, r6, #27
     772:	d504      	bpl.n	77e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     774:	2310      	movs	r3, #16
     776:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     778:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     77a:	06fb      	lsls	r3, r7, #27
     77c:	d40e      	bmi.n	79c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     77e:	06b3      	lsls	r3, r6, #26
     780:	d504      	bpl.n	78c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     782:	2320      	movs	r3, #32
     784:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     786:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     788:	073b      	lsls	r3, r7, #28
     78a:	d40b      	bmi.n	7a4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     78c:	0733      	lsls	r3, r6, #28
     78e:	d504      	bpl.n	79a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     790:	2308      	movs	r3, #8
     792:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     794:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     796:	06bb      	lsls	r3, r7, #26
     798:	d408      	bmi.n	7ac <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     79c:	0028      	movs	r0, r5
     79e:	69eb      	ldr	r3, [r5, #28]
     7a0:	4798      	blx	r3
     7a2:	e7ec      	b.n	77e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     7a4:	0028      	movs	r0, r5
     7a6:	69ab      	ldr	r3, [r5, #24]
     7a8:	4798      	blx	r3
     7aa:	e7ef      	b.n	78c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     7ac:	6a2b      	ldr	r3, [r5, #32]
     7ae:	0028      	movs	r0, r5
     7b0:	4798      	blx	r3
}
     7b2:	e7f2      	b.n	79a <_usart_interrupt_handler+0x176>
     7b4:	20000070 	.word	0x20000070

000007b8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     7b8:	4b0c      	ldr	r3, [pc, #48]	; (7ec <cpu_irq_enter_critical+0x34>)
     7ba:	681b      	ldr	r3, [r3, #0]
     7bc:	2b00      	cmp	r3, #0
     7be:	d106      	bne.n	7ce <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     7c0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     7c4:	2b00      	cmp	r3, #0
     7c6:	d007      	beq.n	7d8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     7c8:	2200      	movs	r2, #0
     7ca:	4b09      	ldr	r3, [pc, #36]	; (7f0 <cpu_irq_enter_critical+0x38>)
     7cc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     7ce:	4a07      	ldr	r2, [pc, #28]	; (7ec <cpu_irq_enter_critical+0x34>)
     7d0:	6813      	ldr	r3, [r2, #0]
     7d2:	3301      	adds	r3, #1
     7d4:	6013      	str	r3, [r2, #0]
}
     7d6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     7d8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     7da:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     7de:	2200      	movs	r2, #0
     7e0:	4b04      	ldr	r3, [pc, #16]	; (7f4 <cpu_irq_enter_critical+0x3c>)
     7e2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     7e4:	3201      	adds	r2, #1
     7e6:	4b02      	ldr	r3, [pc, #8]	; (7f0 <cpu_irq_enter_critical+0x38>)
     7e8:	701a      	strb	r2, [r3, #0]
     7ea:	e7f0      	b.n	7ce <cpu_irq_enter_critical+0x16>
     7ec:	20000028 	.word	0x20000028
     7f0:	2000002c 	.word	0x2000002c
     7f4:	20000008 	.word	0x20000008

000007f8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     7f8:	4b08      	ldr	r3, [pc, #32]	; (81c <cpu_irq_leave_critical+0x24>)
     7fa:	681a      	ldr	r2, [r3, #0]
     7fc:	3a01      	subs	r2, #1
     7fe:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     800:	681b      	ldr	r3, [r3, #0]
     802:	2b00      	cmp	r3, #0
     804:	d109      	bne.n	81a <cpu_irq_leave_critical+0x22>
     806:	4b06      	ldr	r3, [pc, #24]	; (820 <cpu_irq_leave_critical+0x28>)
     808:	781b      	ldrb	r3, [r3, #0]
     80a:	2b00      	cmp	r3, #0
     80c:	d005      	beq.n	81a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     80e:	2201      	movs	r2, #1
     810:	4b04      	ldr	r3, [pc, #16]	; (824 <cpu_irq_leave_critical+0x2c>)
     812:	701a      	strb	r2, [r3, #0]
     814:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     818:	b662      	cpsie	i
	}
}
     81a:	4770      	bx	lr
     81c:	20000028 	.word	0x20000028
     820:	2000002c 	.word	0x2000002c
     824:	20000008 	.word	0x20000008

00000828 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     82c:	ac01      	add	r4, sp, #4
     82e:	2501      	movs	r5, #1
     830:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     832:	2700      	movs	r7, #0
     834:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     836:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     838:	0021      	movs	r1, r4
     83a:	203e      	movs	r0, #62	; 0x3e
     83c:	4e06      	ldr	r6, [pc, #24]	; (858 <system_board_init+0x30>)
     83e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     840:	2280      	movs	r2, #128	; 0x80
     842:	05d2      	lsls	r2, r2, #23
     844:	4b05      	ldr	r3, [pc, #20]	; (85c <system_board_init+0x34>)
     846:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     848:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     84a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     84c:	0021      	movs	r1, r4
     84e:	200f      	movs	r0, #15
     850:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     852:	b003      	add	sp, #12
     854:	bdf0      	pop	{r4, r5, r6, r7, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	00000861 	.word	0x00000861
     85c:	41004480 	.word	0x41004480

00000860 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     860:	b500      	push	{lr}
     862:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     864:	ab01      	add	r3, sp, #4
     866:	2280      	movs	r2, #128	; 0x80
     868:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     86a:	780a      	ldrb	r2, [r1, #0]
     86c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     86e:	784a      	ldrb	r2, [r1, #1]
     870:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     872:	788a      	ldrb	r2, [r1, #2]
     874:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     876:	0019      	movs	r1, r3
     878:	4b01      	ldr	r3, [pc, #4]	; (880 <port_pin_set_config+0x20>)
     87a:	4798      	blx	r3
}
     87c:	b003      	add	sp, #12
     87e:	bd00      	pop	{pc}
     880:	00001b59 	.word	0x00001b59

00000884 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     884:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     886:	2207      	movs	r2, #7
     888:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     88a:	421a      	tst	r2, r3
     88c:	d1fc      	bne.n	888 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     88e:	4770      	bx	lr

00000890 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     890:	b5f0      	push	{r4, r5, r6, r7, lr}
     892:	46d6      	mov	lr, sl
     894:	464f      	mov	r7, r9
     896:	4646      	mov	r6, r8
     898:	b5c0      	push	{r6, r7, lr}
     89a:	b08a      	sub	sp, #40	; 0x28
     89c:	0006      	movs	r6, r0
     89e:	000f      	movs	r7, r1
     8a0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     8a2:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8a4:	0008      	movs	r0, r1
     8a6:	4ba0      	ldr	r3, [pc, #640]	; (b28 <i2c_master_init+0x298>)
     8a8:	4798      	blx	r3
     8aa:	4aa0      	ldr	r2, [pc, #640]	; (b2c <i2c_master_init+0x29c>)
     8ac:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     8ae:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     8b0:	2301      	movs	r3, #1
     8b2:	40ab      	lsls	r3, r5
     8b4:	430b      	orrs	r3, r1
     8b6:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     8b8:	a909      	add	r1, sp, #36	; 0x24
     8ba:	7b23      	ldrb	r3, [r4, #12]
     8bc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8be:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     8c0:	b2c5      	uxtb	r5, r0
     8c2:	0028      	movs	r0, r5
     8c4:	4b9a      	ldr	r3, [pc, #616]	; (b30 <i2c_master_init+0x2a0>)
     8c6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     8c8:	0028      	movs	r0, r5
     8ca:	4b9a      	ldr	r3, [pc, #616]	; (b34 <i2c_master_init+0x2a4>)
     8cc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     8ce:	7b20      	ldrb	r0, [r4, #12]
     8d0:	2100      	movs	r1, #0
     8d2:	4b99      	ldr	r3, [pc, #612]	; (b38 <i2c_master_init+0x2a8>)
     8d4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     8d6:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     8d8:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     8da:	079b      	lsls	r3, r3, #30
     8dc:	d505      	bpl.n	8ea <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     8de:	b00a      	add	sp, #40	; 0x28
     8e0:	bc1c      	pop	{r2, r3, r4}
     8e2:	4690      	mov	r8, r2
     8e4:	4699      	mov	r9, r3
     8e6:	46a2      	mov	sl, r4
     8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     8ea:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     8ec:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     8ee:	07db      	lsls	r3, r3, #31
     8f0:	d4f5      	bmi.n	8de <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     8f2:	6830      	ldr	r0, [r6, #0]
     8f4:	4b8c      	ldr	r3, [pc, #560]	; (b28 <i2c_master_init+0x298>)
     8f6:	4699      	mov	r9, r3
     8f8:	4798      	blx	r3
     8fa:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     8fc:	498f      	ldr	r1, [pc, #572]	; (b3c <i2c_master_init+0x2ac>)
     8fe:	4b90      	ldr	r3, [pc, #576]	; (b40 <i2c_master_init+0x2b0>)
     900:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     902:	00ad      	lsls	r5, r5, #2
     904:	4b8f      	ldr	r3, [pc, #572]	; (b44 <i2c_master_init+0x2b4>)
     906:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     908:	2300      	movs	r3, #0
     90a:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     90c:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     90e:	2500      	movs	r5, #0
     910:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     912:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     914:	2225      	movs	r2, #37	; 0x25
     916:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     918:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     91a:	3314      	adds	r3, #20
     91c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     91e:	6833      	ldr	r3, [r6, #0]
     920:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     922:	0018      	movs	r0, r3
     924:	47c8      	blx	r9
     926:	4681      	mov	r9, r0
     928:	2380      	movs	r3, #128	; 0x80
     92a:	aa08      	add	r2, sp, #32
     92c:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     92e:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     930:	2301      	movs	r3, #1
     932:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     934:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     936:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     938:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     93a:	2800      	cmp	r0, #0
     93c:	d100      	bne.n	940 <i2c_master_init+0xb0>
     93e:	e0af      	b.n	aa0 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     940:	ab08      	add	r3, sp, #32
     942:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     944:	2302      	movs	r3, #2
     946:	aa08      	add	r2, sp, #32
     948:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     94a:	0c00      	lsrs	r0, r0, #16
     94c:	b2c0      	uxtb	r0, r0
     94e:	0011      	movs	r1, r2
     950:	4b7d      	ldr	r3, [pc, #500]	; (b48 <i2c_master_init+0x2b8>)
     952:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     954:	2f00      	cmp	r7, #0
     956:	d100      	bne.n	95a <i2c_master_init+0xca>
     958:	e0a7      	b.n	aaa <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     95a:	ab08      	add	r3, sp, #32
     95c:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     95e:	2302      	movs	r3, #2
     960:	aa08      	add	r2, sp, #32
     962:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     964:	0c3f      	lsrs	r7, r7, #16
     966:	b2f8      	uxtb	r0, r7
     968:	0011      	movs	r1, r2
     96a:	4b77      	ldr	r3, [pc, #476]	; (b48 <i2c_master_init+0x2b8>)
     96c:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     96e:	8aa3      	ldrh	r3, [r4, #20]
     970:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     972:	8ae3      	ldrh	r3, [r4, #22]
     974:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     976:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     978:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     97a:	2b00      	cmp	r3, #0
     97c:	d104      	bne.n	988 <i2c_master_init+0xf8>
     97e:	4b73      	ldr	r3, [pc, #460]	; (b4c <i2c_master_init+0x2bc>)
     980:	789b      	ldrb	r3, [r3, #2]
     982:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     984:	0fdb      	lsrs	r3, r3, #31
     986:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     988:	68a1      	ldr	r1, [r4, #8]
     98a:	6923      	ldr	r3, [r4, #16]
     98c:	430b      	orrs	r3, r1
     98e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     990:	2224      	movs	r2, #36	; 0x24
     992:	5ca2      	ldrb	r2, [r4, r2]
     994:	2a00      	cmp	r2, #0
     996:	d002      	beq.n	99e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     998:	2280      	movs	r2, #128	; 0x80
     99a:	05d2      	lsls	r2, r2, #23
     99c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     99e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     9a0:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     9a2:	222c      	movs	r2, #44	; 0x2c
     9a4:	5ca2      	ldrb	r2, [r4, r2]
     9a6:	2a00      	cmp	r2, #0
     9a8:	d103      	bne.n	9b2 <i2c_master_init+0x122>
     9aa:	2280      	movs	r2, #128	; 0x80
     9ac:	0492      	lsls	r2, r2, #18
     9ae:	4291      	cmp	r1, r2
     9b0:	d102      	bne.n	9b8 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     9b2:	2280      	movs	r2, #128	; 0x80
     9b4:	0512      	lsls	r2, r2, #20
     9b6:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     9b8:	222d      	movs	r2, #45	; 0x2d
     9ba:	5ca2      	ldrb	r2, [r4, r2]
     9bc:	2a00      	cmp	r2, #0
     9be:	d002      	beq.n	9c6 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     9c0:	2280      	movs	r2, #128	; 0x80
     9c2:	0412      	lsls	r2, r2, #16
     9c4:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     9c6:	222e      	movs	r2, #46	; 0x2e
     9c8:	5ca2      	ldrb	r2, [r4, r2]
     9ca:	2a00      	cmp	r2, #0
     9cc:	d002      	beq.n	9d4 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     9ce:	2280      	movs	r2, #128	; 0x80
     9d0:	03d2      	lsls	r2, r2, #15
     9d2:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     9d4:	4642      	mov	r2, r8
     9d6:	6812      	ldr	r2, [r2, #0]
     9d8:	4313      	orrs	r3, r2
     9da:	4642      	mov	r2, r8
     9dc:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     9de:	2380      	movs	r3, #128	; 0x80
     9e0:	005b      	lsls	r3, r3, #1
     9e2:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     9e4:	4648      	mov	r0, r9
     9e6:	3014      	adds	r0, #20
     9e8:	b2c0      	uxtb	r0, r0
     9ea:	4b59      	ldr	r3, [pc, #356]	; (b50 <i2c_master_init+0x2c0>)
     9ec:	4798      	blx	r3
     9ee:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     9f0:	23fa      	movs	r3, #250	; 0xfa
     9f2:	009b      	lsls	r3, r3, #2
     9f4:	6822      	ldr	r2, [r4, #0]
     9f6:	435a      	muls	r2, r3
     9f8:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     9fa:	6863      	ldr	r3, [r4, #4]
     9fc:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     9fe:	4d55      	ldr	r5, [pc, #340]	; (b54 <i2c_master_init+0x2c4>)
     a00:	47a8      	blx	r5
     a02:	9000      	str	r0, [sp, #0]
     a04:	9101      	str	r1, [sp, #4]
     a06:	464b      	mov	r3, r9
     a08:	0058      	lsls	r0, r3, #1
     a0a:	47a8      	blx	r5
     a0c:	9002      	str	r0, [sp, #8]
     a0e:	9103      	str	r1, [sp, #12]
     a10:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     a12:	47a8      	blx	r5
     a14:	9004      	str	r0, [sp, #16]
     a16:	9105      	str	r1, [sp, #20]
     a18:	4f4f      	ldr	r7, [pc, #316]	; (b58 <i2c_master_init+0x2c8>)
     a1a:	4a50      	ldr	r2, [pc, #320]	; (b5c <i2c_master_init+0x2cc>)
     a1c:	4b50      	ldr	r3, [pc, #320]	; (b60 <i2c_master_init+0x2d0>)
     a1e:	9800      	ldr	r0, [sp, #0]
     a20:	9901      	ldr	r1, [sp, #4]
     a22:	47b8      	blx	r7
     a24:	0002      	movs	r2, r0
     a26:	000b      	movs	r3, r1
     a28:	9804      	ldr	r0, [sp, #16]
     a2a:	9905      	ldr	r1, [sp, #20]
     a2c:	47b8      	blx	r7
     a2e:	4e4d      	ldr	r6, [pc, #308]	; (b64 <i2c_master_init+0x2d4>)
     a30:	2200      	movs	r2, #0
     a32:	4b4d      	ldr	r3, [pc, #308]	; (b68 <i2c_master_init+0x2d8>)
     a34:	47b0      	blx	r6
     a36:	9004      	str	r0, [sp, #16]
     a38:	9105      	str	r1, [sp, #20]
     a3a:	4648      	mov	r0, r9
     a3c:	47a8      	blx	r5
     a3e:	0002      	movs	r2, r0
     a40:	000b      	movs	r3, r1
     a42:	9804      	ldr	r0, [sp, #16]
     a44:	9905      	ldr	r1, [sp, #20]
     a46:	47b8      	blx	r7
     a48:	0002      	movs	r2, r0
     a4a:	000b      	movs	r3, r1
     a4c:	4d47      	ldr	r5, [pc, #284]	; (b6c <i2c_master_init+0x2dc>)
     a4e:	9800      	ldr	r0, [sp, #0]
     a50:	9901      	ldr	r1, [sp, #4]
     a52:	47a8      	blx	r5
     a54:	9a02      	ldr	r2, [sp, #8]
     a56:	9b03      	ldr	r3, [sp, #12]
     a58:	47b0      	blx	r6
     a5a:	2200      	movs	r2, #0
     a5c:	4b44      	ldr	r3, [pc, #272]	; (b70 <i2c_master_init+0x2e0>)
     a5e:	47a8      	blx	r5
     a60:	9a02      	ldr	r2, [sp, #8]
     a62:	9b03      	ldr	r3, [sp, #12]
     a64:	4d43      	ldr	r5, [pc, #268]	; (b74 <i2c_master_init+0x2e4>)
     a66:	47a8      	blx	r5
     a68:	4b43      	ldr	r3, [pc, #268]	; (b78 <i2c_master_init+0x2e8>)
     a6a:	4798      	blx	r3
     a6c:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     a6e:	2380      	movs	r3, #128	; 0x80
     a70:	049b      	lsls	r3, r3, #18
     a72:	68a2      	ldr	r2, [r4, #8]
     a74:	429a      	cmp	r2, r3
     a76:	d01e      	beq.n	ab6 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     a78:	0003      	movs	r3, r0
     a7a:	2040      	movs	r0, #64	; 0x40
     a7c:	2dff      	cmp	r5, #255	; 0xff
     a7e:	d900      	bls.n	a82 <i2c_master_init+0x1f2>
     a80:	e72d      	b.n	8de <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     a82:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     a84:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     a86:	25ff      	movs	r5, #255	; 0xff
     a88:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     a8a:	0624      	lsls	r4, r4, #24
     a8c:	4325      	orrs	r5, r4
     a8e:	0400      	lsls	r0, r0, #16
     a90:	23ff      	movs	r3, #255	; 0xff
     a92:	041b      	lsls	r3, r3, #16
     a94:	4018      	ands	r0, r3
     a96:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     a98:	4643      	mov	r3, r8
     a9a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     a9c:	2000      	movs	r0, #0
     a9e:	e71e      	b.n	8de <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     aa0:	2100      	movs	r1, #0
     aa2:	4640      	mov	r0, r8
     aa4:	4b35      	ldr	r3, [pc, #212]	; (b7c <i2c_master_init+0x2ec>)
     aa6:	4798      	blx	r3
     aa8:	e74a      	b.n	940 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     aaa:	2101      	movs	r1, #1
     aac:	4640      	mov	r0, r8
     aae:	4b33      	ldr	r3, [pc, #204]	; (b7c <i2c_master_init+0x2ec>)
     ab0:	4798      	blx	r3
     ab2:	0007      	movs	r7, r0
     ab4:	e751      	b.n	95a <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     ab6:	26fa      	movs	r6, #250	; 0xfa
     ab8:	00b6      	lsls	r6, r6, #2
     aba:	4653      	mov	r3, sl
     abc:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     abe:	9800      	ldr	r0, [sp, #0]
     ac0:	9901      	ldr	r1, [sp, #4]
     ac2:	0002      	movs	r2, r0
     ac4:	000b      	movs	r3, r1
     ac6:	4c27      	ldr	r4, [pc, #156]	; (b64 <i2c_master_init+0x2d4>)
     ac8:	47a0      	blx	r4
     aca:	9000      	str	r0, [sp, #0]
     acc:	9101      	str	r1, [sp, #4]
     ace:	0030      	movs	r0, r6
     ad0:	4b20      	ldr	r3, [pc, #128]	; (b54 <i2c_master_init+0x2c4>)
     ad2:	4798      	blx	r3
     ad4:	2200      	movs	r2, #0
     ad6:	4b2a      	ldr	r3, [pc, #168]	; (b80 <i2c_master_init+0x2f0>)
     ad8:	47b8      	blx	r7
     ada:	0002      	movs	r2, r0
     adc:	000b      	movs	r3, r1
     ade:	9800      	ldr	r0, [sp, #0]
     ae0:	9901      	ldr	r1, [sp, #4]
     ae2:	4c24      	ldr	r4, [pc, #144]	; (b74 <i2c_master_init+0x2e4>)
     ae4:	47a0      	blx	r4
     ae6:	2200      	movs	r2, #0
     ae8:	4b21      	ldr	r3, [pc, #132]	; (b70 <i2c_master_init+0x2e0>)
     aea:	4c20      	ldr	r4, [pc, #128]	; (b6c <i2c_master_init+0x2dc>)
     aec:	47a0      	blx	r4
     aee:	4b22      	ldr	r3, [pc, #136]	; (b78 <i2c_master_init+0x2e8>)
     af0:	4798      	blx	r3
     af2:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     af4:	d00c      	beq.n	b10 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     af6:	0031      	movs	r1, r6
     af8:	9807      	ldr	r0, [sp, #28]
     afa:	4b22      	ldr	r3, [pc, #136]	; (b84 <i2c_master_init+0x2f4>)
     afc:	4798      	blx	r3
     afe:	3802      	subs	r0, #2
     b00:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     b02:	002b      	movs	r3, r5
     b04:	2dff      	cmp	r5, #255	; 0xff
     b06:	d80c      	bhi.n	b22 <i2c_master_init+0x292>
     b08:	28ff      	cmp	r0, #255	; 0xff
     b0a:	d9bc      	bls.n	a86 <i2c_master_init+0x1f6>
     b0c:	2040      	movs	r0, #64	; 0x40
     b0e:	e6e6      	b.n	8de <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     b10:	0071      	lsls	r1, r6, #1
     b12:	1e48      	subs	r0, r1, #1
     b14:	9b07      	ldr	r3, [sp, #28]
     b16:	469c      	mov	ip, r3
     b18:	4460      	add	r0, ip
     b1a:	4b1a      	ldr	r3, [pc, #104]	; (b84 <i2c_master_init+0x2f4>)
     b1c:	4798      	blx	r3
     b1e:	3801      	subs	r0, #1
     b20:	e7ef      	b.n	b02 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     b22:	2040      	movs	r0, #64	; 0x40
     b24:	e6db      	b.n	8de <i2c_master_init+0x4e>
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	000014fd 	.word	0x000014fd
     b2c:	40000400 	.word	0x40000400
     b30:	00001a61 	.word	0x00001a61
     b34:	000019d5 	.word	0x000019d5
     b38:	00001339 	.word	0x00001339
     b3c:	00000fd5 	.word	0x00000fd5
     b40:	00001539 	.word	0x00001539
     b44:	20000070 	.word	0x20000070
     b48:	00001b59 	.word	0x00001b59
     b4c:	41002000 	.word	0x41002000
     b50:	00001a7d 	.word	0x00001a7d
     b54:	00003985 	.word	0x00003985
     b58:	00002df1 	.word	0x00002df1
     b5c:	e826d695 	.word	0xe826d695
     b60:	3e112e0b 	.word	0x3e112e0b
     b64:	00002169 	.word	0x00002169
     b68:	40240000 	.word	0x40240000
     b6c:	000032f1 	.word	0x000032f1
     b70:	3ff00000 	.word	0x3ff00000
     b74:	00002789 	.word	0x00002789
     b78:	0000391d 	.word	0x0000391d
     b7c:	00001385 	.word	0x00001385
     b80:	40080000 	.word	0x40080000
     b84:	00001ffd 	.word	0x00001ffd

00000b88 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b88:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     b8a:	7e1a      	ldrb	r2, [r3, #24]
     b8c:	0792      	lsls	r2, r2, #30
     b8e:	d507      	bpl.n	ba0 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     b90:	2202      	movs	r2, #2
     b92:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     b94:	8b5b      	ldrh	r3, [r3, #26]
     b96:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     b98:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     b9a:	17db      	asrs	r3, r3, #31
     b9c:	4018      	ands	r0, r3
}
     b9e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     ba0:	8b5a      	ldrh	r2, [r3, #26]
     ba2:	0752      	lsls	r2, r2, #29
     ba4:	d506      	bpl.n	bb4 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ba6:	6859      	ldr	r1, [r3, #4]
     ba8:	22c0      	movs	r2, #192	; 0xc0
     baa:	0292      	lsls	r2, r2, #10
     bac:	430a      	orrs	r2, r1
     bae:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     bb0:	2018      	movs	r0, #24
     bb2:	e7f4      	b.n	b9e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     bb4:	2000      	movs	r0, #0
     bb6:	e7f2      	b.n	b9e <_i2c_master_address_response+0x16>

00000bb8 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     bb8:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     bba:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     bbc:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     bbe:	2401      	movs	r4, #1
     bc0:	2502      	movs	r5, #2
     bc2:	7e11      	ldrb	r1, [r2, #24]
     bc4:	4221      	tst	r1, r4
     bc6:	d10b      	bne.n	be0 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     bc8:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     bca:	4229      	tst	r1, r5
     bcc:	d106      	bne.n	bdc <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     bce:	3301      	adds	r3, #1
     bd0:	b29b      	uxth	r3, r3
     bd2:	8901      	ldrh	r1, [r0, #8]
     bd4:	4299      	cmp	r1, r3
     bd6:	d8f4      	bhi.n	bc2 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     bd8:	2012      	movs	r0, #18
     bda:	e002      	b.n	be2 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     bdc:	2000      	movs	r0, #0
     bde:	e000      	b.n	be2 <_i2c_master_wait_for_bus+0x2a>
     be0:	2000      	movs	r0, #0
}
     be2:	bd30      	pop	{r4, r5, pc}

00000be4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     be4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     be6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     be8:	6862      	ldr	r2, [r4, #4]
     bea:	2380      	movs	r3, #128	; 0x80
     bec:	02db      	lsls	r3, r3, #11
     bee:	4313      	orrs	r3, r2
     bf0:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     bf2:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     bf4:	4b02      	ldr	r3, [pc, #8]	; (c00 <_i2c_master_send_hs_master_code+0x1c>)
     bf6:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     bf8:	2301      	movs	r3, #1
     bfa:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     bfc:	bd10      	pop	{r4, pc}
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	00000bb9 	.word	0x00000bb9

00000c04 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c04:	b5f0      	push	{r4, r5, r6, r7, lr}
     c06:	46de      	mov	lr, fp
     c08:	4657      	mov	r7, sl
     c0a:	464e      	mov	r6, r9
     c0c:	4645      	mov	r5, r8
     c0e:	b5e0      	push	{r5, r6, r7, lr}
     c10:	b083      	sub	sp, #12
     c12:	0006      	movs	r6, r0
     c14:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c16:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     c18:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c1a:	682b      	ldr	r3, [r5, #0]
     c1c:	011b      	lsls	r3, r3, #4
     c1e:	0fdb      	lsrs	r3, r3, #31
     c20:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     c22:	7a4b      	ldrb	r3, [r1, #9]
     c24:	2b00      	cmp	r3, #0
     c26:	d12b      	bne.n	c80 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c28:	686b      	ldr	r3, [r5, #4]
     c2a:	4a58      	ldr	r2, [pc, #352]	; (d8c <_i2c_master_read_packet+0x188>)
     c2c:	4013      	ands	r3, r2
     c2e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     c30:	464b      	mov	r3, r9
     c32:	7a1b      	ldrb	r3, [r3, #8]
     c34:	2b00      	cmp	r3, #0
     c36:	d127      	bne.n	c88 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c38:	464b      	mov	r3, r9
     c3a:	881b      	ldrh	r3, [r3, #0]
     c3c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     c3e:	464a      	mov	r2, r9
     c40:	7a52      	ldrb	r2, [r2, #9]
     c42:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c44:	4313      	orrs	r3, r2
     c46:	2201      	movs	r2, #1
     c48:	4313      	orrs	r3, r2
     c4a:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     c4c:	0030      	movs	r0, r6
     c4e:	4b50      	ldr	r3, [pc, #320]	; (d90 <_i2c_master_read_packet+0x18c>)
     c50:	4798      	blx	r3
     c52:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     c54:	4653      	mov	r3, sl
     c56:	2b00      	cmp	r3, #0
     c58:	d003      	beq.n	c62 <_i2c_master_read_packet+0x5e>
     c5a:	464b      	mov	r3, r9
     c5c:	885b      	ldrh	r3, [r3, #2]
     c5e:	2b01      	cmp	r3, #1
     c60:	d03b      	beq.n	cda <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     c62:	686b      	ldr	r3, [r5, #4]
     c64:	4a49      	ldr	r2, [pc, #292]	; (d8c <_i2c_master_read_packet+0x188>)
     c66:	4013      	ands	r3, r2
     c68:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     c6a:	9b01      	ldr	r3, [sp, #4]
     c6c:	2b00      	cmp	r3, #0
     c6e:	d03a      	beq.n	ce6 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     c70:	9801      	ldr	r0, [sp, #4]
     c72:	b003      	add	sp, #12
     c74:	bc3c      	pop	{r2, r3, r4, r5}
     c76:	4690      	mov	r8, r2
     c78:	4699      	mov	r9, r3
     c7a:	46a2      	mov	sl, r4
     c7c:	46ab      	mov	fp, r5
     c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     c80:	7a89      	ldrb	r1, [r1, #10]
     c82:	4b44      	ldr	r3, [pc, #272]	; (d94 <_i2c_master_read_packet+0x190>)
     c84:	4798      	blx	r3
     c86:	e7cf      	b.n	c28 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     c88:	464b      	mov	r3, r9
     c8a:	881b      	ldrh	r3, [r3, #0]
     c8c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c8e:	464a      	mov	r2, r9
     c90:	7a52      	ldrb	r2, [r2, #9]
     c92:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     c94:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c96:	2280      	movs	r2, #128	; 0x80
     c98:	0212      	lsls	r2, r2, #8
     c9a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     c9c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     c9e:	0030      	movs	r0, r6
     ca0:	4b3b      	ldr	r3, [pc, #236]	; (d90 <_i2c_master_read_packet+0x18c>)
     ca2:	4798      	blx	r3
     ca4:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     ca6:	686b      	ldr	r3, [r5, #4]
     ca8:	4a38      	ldr	r2, [pc, #224]	; (d8c <_i2c_master_read_packet+0x188>)
     caa:	4013      	ands	r3, r2
     cac:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     cae:	2800      	cmp	r0, #0
     cb0:	d1de      	bne.n	c70 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     cb2:	0030      	movs	r0, r6
     cb4:	4b38      	ldr	r3, [pc, #224]	; (d98 <_i2c_master_read_packet+0x194>)
     cb6:	4798      	blx	r3
     cb8:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     cba:	2800      	cmp	r0, #0
     cbc:	d1d8      	bne.n	c70 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     cbe:	464b      	mov	r3, r9
     cc0:	881b      	ldrh	r3, [r3, #0]
     cc2:	0a1b      	lsrs	r3, r3, #8
     cc4:	2278      	movs	r2, #120	; 0x78
     cc6:	4313      	orrs	r3, r2
     cc8:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     cca:	464a      	mov	r2, r9
     ccc:	7a52      	ldrb	r2, [r2, #9]
     cce:	0392      	lsls	r2, r2, #14
     cd0:	2101      	movs	r1, #1
     cd2:	430a      	orrs	r2, r1
     cd4:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     cd6:	626b      	str	r3, [r5, #36]	; 0x24
     cd8:	e7b8      	b.n	c4c <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cda:	686a      	ldr	r2, [r5, #4]
     cdc:	2380      	movs	r3, #128	; 0x80
     cde:	02db      	lsls	r3, r3, #11
     ce0:	4313      	orrs	r3, r2
     ce2:	606b      	str	r3, [r5, #4]
     ce4:	e7c1      	b.n	c6a <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     ce6:	0030      	movs	r0, r6
     ce8:	4b2b      	ldr	r3, [pc, #172]	; (d98 <_i2c_master_read_packet+0x194>)
     cea:	4798      	blx	r3
     cec:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     cee:	2800      	cmp	r0, #0
     cf0:	d1be      	bne.n	c70 <_i2c_master_read_packet+0x6c>
     cf2:	3c01      	subs	r4, #1
     cf4:	b2a4      	uxth	r4, r4
     cf6:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     cf8:	4b28      	ldr	r3, [pc, #160]	; (d9c <_i2c_master_read_packet+0x198>)
     cfa:	469b      	mov	fp, r3
     cfc:	e015      	b.n	d2a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     cfe:	2c01      	cmp	r4, #1
     d00:	d020      	beq.n	d44 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     d02:	0030      	movs	r0, r6
     d04:	4b26      	ldr	r3, [pc, #152]	; (da0 <_i2c_master_read_packet+0x19c>)
     d06:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     d08:	4643      	mov	r3, r8
     d0a:	1c5f      	adds	r7, r3, #1
     d0c:	b2bf      	uxth	r7, r7
     d0e:	2328      	movs	r3, #40	; 0x28
     d10:	5ceb      	ldrb	r3, [r5, r3]
     d12:	464a      	mov	r2, r9
     d14:	6852      	ldr	r2, [r2, #4]
     d16:	4641      	mov	r1, r8
     d18:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     d1a:	0030      	movs	r0, r6
     d1c:	4b1c      	ldr	r3, [pc, #112]	; (d90 <_i2c_master_read_packet+0x18c>)
     d1e:	4798      	blx	r3
     d20:	3c01      	subs	r4, #1
     d22:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     d24:	2800      	cmp	r0, #0
     d26:	d115      	bne.n	d54 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     d28:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     d2a:	455c      	cmp	r4, fp
     d2c:	d014      	beq.n	d58 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     d2e:	8b6b      	ldrh	r3, [r5, #26]
     d30:	069b      	lsls	r3, r3, #26
     d32:	d527      	bpl.n	d84 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     d34:	7af3      	ldrb	r3, [r6, #11]
     d36:	2b00      	cmp	r3, #0
     d38:	d0e3      	beq.n	d02 <_i2c_master_read_packet+0xfe>
     d3a:	4653      	mov	r3, sl
     d3c:	2b00      	cmp	r3, #0
     d3e:	d1de      	bne.n	cfe <_i2c_master_read_packet+0xfa>
     d40:	2c00      	cmp	r4, #0
     d42:	d1de      	bne.n	d02 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d44:	686a      	ldr	r2, [r5, #4]
     d46:	2380      	movs	r3, #128	; 0x80
     d48:	02db      	lsls	r3, r3, #11
     d4a:	4313      	orrs	r3, r2
     d4c:	606b      	str	r3, [r5, #4]
     d4e:	3c01      	subs	r4, #1
     d50:	b2a4      	uxth	r4, r4
     d52:	e7ea      	b.n	d2a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     d54:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     d56:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     d58:	7ab3      	ldrb	r3, [r6, #10]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d109      	bne.n	d72 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     d5e:	0030      	movs	r0, r6
     d60:	4b0f      	ldr	r3, [pc, #60]	; (da0 <_i2c_master_read_packet+0x19c>)
     d62:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     d64:	2328      	movs	r3, #40	; 0x28
     d66:	5cea      	ldrb	r2, [r5, r3]
     d68:	464b      	mov	r3, r9
     d6a:	685b      	ldr	r3, [r3, #4]
     d6c:	4641      	mov	r1, r8
     d6e:	545a      	strb	r2, [r3, r1]
     d70:	e77e      	b.n	c70 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     d72:	0030      	movs	r0, r6
     d74:	4b0a      	ldr	r3, [pc, #40]	; (da0 <_i2c_master_read_packet+0x19c>)
     d76:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d78:	686a      	ldr	r2, [r5, #4]
     d7a:	23c0      	movs	r3, #192	; 0xc0
     d7c:	029b      	lsls	r3, r3, #10
     d7e:	4313      	orrs	r3, r2
     d80:	606b      	str	r3, [r5, #4]
     d82:	e7ec      	b.n	d5e <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     d84:	2341      	movs	r3, #65	; 0x41
     d86:	9301      	str	r3, [sp, #4]
     d88:	e772      	b.n	c70 <_i2c_master_read_packet+0x6c>
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	fffbffff 	.word	0xfffbffff
     d90:	00000bb9 	.word	0x00000bb9
     d94:	00000be5 	.word	0x00000be5
     d98:	00000b89 	.word	0x00000b89
     d9c:	0000ffff 	.word	0x0000ffff
     da0:	00000885 	.word	0x00000885

00000da4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     da4:	b5f0      	push	{r4, r5, r6, r7, lr}
     da6:	46de      	mov	lr, fp
     da8:	4657      	mov	r7, sl
     daa:	464e      	mov	r6, r9
     dac:	4645      	mov	r5, r8
     dae:	b5e0      	push	{r5, r6, r7, lr}
     db0:	b083      	sub	sp, #12
     db2:	0006      	movs	r6, r0
     db4:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     db6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     db8:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     dba:	4b32      	ldr	r3, [pc, #200]	; (e84 <_i2c_master_write_packet+0xe0>)
     dbc:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     dbe:	7a7b      	ldrb	r3, [r7, #9]
     dc0:	2b00      	cmp	r3, #0
     dc2:	d11d      	bne.n	e00 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     dc4:	686b      	ldr	r3, [r5, #4]
     dc6:	4a30      	ldr	r2, [pc, #192]	; (e88 <_i2c_master_write_packet+0xe4>)
     dc8:	4013      	ands	r3, r2
     dca:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     dcc:	7a3b      	ldrb	r3, [r7, #8]
     dce:	2b00      	cmp	r3, #0
     dd0:	d01b      	beq.n	e0a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     dd2:	883b      	ldrh	r3, [r7, #0]
     dd4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     dd6:	7a7a      	ldrb	r2, [r7, #9]
     dd8:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     dda:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     ddc:	2280      	movs	r2, #128	; 0x80
     dde:	0212      	lsls	r2, r2, #8
     de0:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     de2:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     de4:	0030      	movs	r0, r6
     de6:	4b29      	ldr	r3, [pc, #164]	; (e8c <_i2c_master_write_packet+0xe8>)
     de8:	4798      	blx	r3
     dea:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     dec:	2800      	cmp	r0, #0
     dee:	d013      	beq.n	e18 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     df0:	9801      	ldr	r0, [sp, #4]
     df2:	b003      	add	sp, #12
     df4:	bc3c      	pop	{r2, r3, r4, r5}
     df6:	4690      	mov	r8, r2
     df8:	4699      	mov	r9, r3
     dfa:	46a2      	mov	sl, r4
     dfc:	46ab      	mov	fp, r5
     dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     e00:	7ab9      	ldrb	r1, [r7, #10]
     e02:	0030      	movs	r0, r6
     e04:	4b22      	ldr	r3, [pc, #136]	; (e90 <_i2c_master_write_packet+0xec>)
     e06:	4798      	blx	r3
     e08:	e7dc      	b.n	dc4 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e0a:	883b      	ldrh	r3, [r7, #0]
     e0c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     e0e:	7a7a      	ldrb	r2, [r7, #9]
     e10:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e12:	4313      	orrs	r3, r2
     e14:	626b      	str	r3, [r5, #36]	; 0x24
     e16:	e7e5      	b.n	de4 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     e18:	0030      	movs	r0, r6
     e1a:	4b1e      	ldr	r3, [pc, #120]	; (e94 <_i2c_master_write_packet+0xf0>)
     e1c:	4798      	blx	r3
     e1e:	1e03      	subs	r3, r0, #0
     e20:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     e22:	d1e5      	bne.n	df0 <_i2c_master_write_packet+0x4c>
     e24:	46a0      	mov	r8, r4
     e26:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     e28:	3320      	adds	r3, #32
     e2a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     e2c:	4b15      	ldr	r3, [pc, #84]	; (e84 <_i2c_master_write_packet+0xe0>)
     e2e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     e30:	4b16      	ldr	r3, [pc, #88]	; (e8c <_i2c_master_write_packet+0xe8>)
     e32:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     e34:	4544      	cmp	r4, r8
     e36:	d015      	beq.n	e64 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     e38:	8b6b      	ldrh	r3, [r5, #26]
     e3a:	464a      	mov	r2, r9
     e3c:	4213      	tst	r3, r2
     e3e:	d01d      	beq.n	e7c <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     e40:	0030      	movs	r0, r6
     e42:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	5d1a      	ldrb	r2, [r3, r4]
     e48:	2328      	movs	r3, #40	; 0x28
     e4a:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     e4c:	0030      	movs	r0, r6
     e4e:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     e50:	2800      	cmp	r0, #0
     e52:	d106      	bne.n	e62 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     e54:	8b6b      	ldrh	r3, [r5, #26]
     e56:	3401      	adds	r4, #1
     e58:	075b      	lsls	r3, r3, #29
     e5a:	d5eb      	bpl.n	e34 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     e5c:	231e      	movs	r3, #30
     e5e:	9301      	str	r3, [sp, #4]
     e60:	e000      	b.n	e64 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     e62:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     e64:	7ab3      	ldrb	r3, [r6, #10]
     e66:	2b00      	cmp	r3, #0
     e68:	d0c2      	beq.n	df0 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     e6a:	0030      	movs	r0, r6
     e6c:	4b05      	ldr	r3, [pc, #20]	; (e84 <_i2c_master_write_packet+0xe0>)
     e6e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e70:	686a      	ldr	r2, [r5, #4]
     e72:	23c0      	movs	r3, #192	; 0xc0
     e74:	029b      	lsls	r3, r3, #10
     e76:	4313      	orrs	r3, r2
     e78:	606b      	str	r3, [r5, #4]
     e7a:	e7b9      	b.n	df0 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     e7c:	2341      	movs	r3, #65	; 0x41
     e7e:	9301      	str	r3, [sp, #4]
     e80:	e7b6      	b.n	df0 <_i2c_master_write_packet+0x4c>
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	00000885 	.word	0x00000885
     e88:	fffbffff 	.word	0xfffbffff
     e8c:	00000bb9 	.word	0x00000bb9
     e90:	00000be5 	.word	0x00000be5
     e94:	00000b89 	.word	0x00000b89

00000e98 <i2c_master_read_packet_wait>:
{
     e98:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     e9a:	8b83      	ldrh	r3, [r0, #28]
     e9c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     e9e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     ea0:	2b00      	cmp	r3, #0
     ea2:	d001      	beq.n	ea8 <i2c_master_read_packet_wait+0x10>
}
     ea4:	0010      	movs	r0, r2
     ea6:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     ea8:	3301      	adds	r3, #1
     eaa:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     eac:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     eae:	4b02      	ldr	r3, [pc, #8]	; (eb8 <i2c_master_read_packet_wait+0x20>)
     eb0:	4798      	blx	r3
     eb2:	0002      	movs	r2, r0
     eb4:	e7f6      	b.n	ea4 <i2c_master_read_packet_wait+0xc>
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00000c05 	.word	0x00000c05

00000ebc <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ebc:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     ebe:	8b83      	ldrh	r3, [r0, #28]
     ec0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     ec2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     ec4:	2b00      	cmp	r3, #0
     ec6:	d001      	beq.n	ecc <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     ec8:	0010      	movs	r0, r2
     eca:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     ecc:	3301      	adds	r3, #1
     ece:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     ed0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     ed2:	4b02      	ldr	r3, [pc, #8]	; (edc <i2c_master_write_packet_wait+0x20>)
     ed4:	4798      	blx	r3
     ed6:	0002      	movs	r2, r0
     ed8:	e7f6      	b.n	ec8 <i2c_master_write_packet_wait+0xc>
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	00000da5 	.word	0x00000da5

00000ee0 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ee0:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     ee2:	8b83      	ldrh	r3, [r0, #28]
     ee4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     ee6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     ee8:	2b00      	cmp	r3, #0
     eea:	d001      	beq.n	ef0 <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     eec:	0010      	movs	r0, r2
     eee:	bd10      	pop	{r4, pc}
	module->send_stop = false;
     ef0:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     ef2:	3301      	adds	r3, #1
     ef4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     ef6:	4b02      	ldr	r3, [pc, #8]	; (f00 <i2c_master_write_packet_wait_no_stop+0x20>)
     ef8:	4798      	blx	r3
     efa:	0002      	movs	r2, r0
     efc:	e7f6      	b.n	eec <i2c_master_write_packet_wait_no_stop+0xc>
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	00000da5 	.word	0x00000da5

00000f04 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     f04:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     f06:	2207      	movs	r2, #7
     f08:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     f0a:	421a      	tst	r2, r3
     f0c:	d1fc      	bne.n	f08 <_i2c_master_wait_for_sync+0x4>
}
     f0e:	4770      	bx	lr

00000f10 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     f10:	b570      	push	{r4, r5, r6, lr}
     f12:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f14:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     f16:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     f18:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     f1a:	8b83      	ldrh	r3, [r0, #28]
     f1c:	1aed      	subs	r5, r5, r3
     f1e:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     f20:	8b83      	ldrh	r3, [r0, #28]
     f22:	3b01      	subs	r3, #1
     f24:	b29b      	uxth	r3, r3
     f26:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     f28:	0113      	lsls	r3, r2, #4
     f2a:	d51d      	bpl.n	f68 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     f2c:	7ac3      	ldrb	r3, [r0, #11]
     f2e:	2b00      	cmp	r3, #0
     f30:	d003      	beq.n	f3a <_i2c_master_read+0x2a>
     f32:	8b83      	ldrh	r3, [r0, #28]
     f34:	b29b      	uxth	r3, r3
     f36:	2b01      	cmp	r3, #1
     f38:	d010      	beq.n	f5c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     f3a:	8ba3      	ldrh	r3, [r4, #28]
     f3c:	b29b      	uxth	r3, r3
     f3e:	2b00      	cmp	r3, #0
     f40:	d102      	bne.n	f48 <_i2c_master_read+0x38>
		if (module->send_stop) {
     f42:	7aa3      	ldrb	r3, [r4, #10]
     f44:	2b00      	cmp	r3, #0
     f46:	d11c      	bne.n	f82 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     f48:	0020      	movs	r0, r4
     f4a:	4b12      	ldr	r3, [pc, #72]	; (f94 <_i2c_master_read+0x84>)
     f4c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     f4e:	6a23      	ldr	r3, [r4, #32]
     f50:	195d      	adds	r5, r3, r5
     f52:	2328      	movs	r3, #40	; 0x28
     f54:	5cf3      	ldrb	r3, [r6, r3]
     f56:	b2db      	uxtb	r3, r3
     f58:	702b      	strb	r3, [r5, #0]
}
     f5a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f5c:	6872      	ldr	r2, [r6, #4]
     f5e:	2380      	movs	r3, #128	; 0x80
     f60:	02db      	lsls	r3, r3, #11
     f62:	4313      	orrs	r3, r2
     f64:	6073      	str	r3, [r6, #4]
     f66:	e7e8      	b.n	f3a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     f68:	7ac3      	ldrb	r3, [r0, #11]
     f6a:	2b00      	cmp	r3, #0
     f6c:	d0e5      	beq.n	f3a <_i2c_master_read+0x2a>
     f6e:	8b83      	ldrh	r3, [r0, #28]
     f70:	b29b      	uxth	r3, r3
     f72:	2b00      	cmp	r3, #0
     f74:	d1e1      	bne.n	f3a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f76:	6872      	ldr	r2, [r6, #4]
     f78:	2380      	movs	r3, #128	; 0x80
     f7a:	02db      	lsls	r3, r3, #11
     f7c:	4313      	orrs	r3, r2
     f7e:	6073      	str	r3, [r6, #4]
     f80:	e7db      	b.n	f3a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     f82:	0020      	movs	r0, r4
     f84:	4b03      	ldr	r3, [pc, #12]	; (f94 <_i2c_master_read+0x84>)
     f86:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f88:	6872      	ldr	r2, [r6, #4]
     f8a:	23c0      	movs	r3, #192	; 0xc0
     f8c:	029b      	lsls	r3, r3, #10
     f8e:	4313      	orrs	r3, r2
     f90:	6073      	str	r3, [r6, #4]
     f92:	e7d9      	b.n	f48 <_i2c_master_read+0x38>
     f94:	00000f05 	.word	0x00000f05

00000f98 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     f98:	b570      	push	{r4, r5, r6, lr}
     f9a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f9c:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     f9e:	8b6b      	ldrh	r3, [r5, #26]
     fa0:	075b      	lsls	r3, r3, #29
     fa2:	d503      	bpl.n	fac <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     fa4:	221e      	movs	r2, #30
     fa6:	2325      	movs	r3, #37	; 0x25
     fa8:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     faa:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     fac:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     fae:	8b83      	ldrh	r3, [r0, #28]
     fb0:	1af6      	subs	r6, r6, r3
     fb2:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     fb4:	8b83      	ldrh	r3, [r0, #28]
     fb6:	3b01      	subs	r3, #1
     fb8:	b29b      	uxth	r3, r3
     fba:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <_i2c_master_write+0x38>)
     fbe:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     fc0:	6a23      	ldr	r3, [r4, #32]
     fc2:	199e      	adds	r6, r3, r6
     fc4:	7833      	ldrb	r3, [r6, #0]
     fc6:	b2db      	uxtb	r3, r3
     fc8:	2228      	movs	r2, #40	; 0x28
     fca:	54ab      	strb	r3, [r5, r2]
     fcc:	e7ed      	b.n	faa <_i2c_master_write+0x12>
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	00000f05 	.word	0x00000f05

00000fd4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     fd4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     fd6:	0080      	lsls	r0, r0, #2
     fd8:	4b75      	ldr	r3, [pc, #468]	; (11b0 <_i2c_master_interrupt_handler+0x1dc>)
     fda:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     fdc:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     fde:	682b      	ldr	r3, [r5, #0]
     fe0:	011b      	lsls	r3, r3, #4
     fe2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     fe4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     fe6:	7e26      	ldrb	r6, [r4, #24]
     fe8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     fea:	8b63      	ldrh	r3, [r4, #26]
     fec:	b29b      	uxth	r3, r3
     fee:	2b00      	cmp	r3, #0
     ff0:	d103      	bne.n	ffa <_i2c_master_interrupt_handler+0x26>
     ff2:	8ba3      	ldrh	r3, [r4, #28]
     ff4:	b29b      	uxth	r3, r3
     ff6:	2b00      	cmp	r3, #0
     ff8:	d123      	bne.n	1042 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     ffa:	8b63      	ldrh	r3, [r4, #26]
     ffc:	b29b      	uxth	r3, r3
     ffe:	2b00      	cmp	r3, #0
    1000:	d008      	beq.n	1014 <_i2c_master_interrupt_handler+0x40>
    1002:	8ba3      	ldrh	r3, [r4, #28]
    1004:	b29b      	uxth	r3, r3
    1006:	2b00      	cmp	r3, #0
    1008:	d104      	bne.n	1014 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    100a:	3325      	adds	r3, #37	; 0x25
    100c:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    100e:	2b05      	cmp	r3, #5
    1010:	d100      	bne.n	1014 <_i2c_master_interrupt_handler+0x40>
    1012:	e06d      	b.n	10f0 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1014:	8b63      	ldrh	r3, [r4, #26]
    1016:	b29b      	uxth	r3, r3
    1018:	2b00      	cmp	r3, #0
    101a:	d024      	beq.n	1066 <_i2c_master_interrupt_handler+0x92>
    101c:	8ba3      	ldrh	r3, [r4, #28]
    101e:	b29b      	uxth	r3, r3
    1020:	2b00      	cmp	r3, #0
    1022:	d020      	beq.n	1066 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1024:	8b6b      	ldrh	r3, [r5, #26]
    1026:	069b      	lsls	r3, r3, #26
    1028:	d500      	bpl.n	102c <_i2c_master_interrupt_handler+0x58>
    102a:	e081      	b.n	1130 <_i2c_master_interrupt_handler+0x15c>
    102c:	2a00      	cmp	r2, #0
    102e:	d004      	beq.n	103a <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1030:	8ba3      	ldrh	r3, [r4, #28]
    1032:	b29b      	uxth	r3, r3
    1034:	2b01      	cmp	r3, #1
    1036:	d100      	bne.n	103a <_i2c_master_interrupt_handler+0x66>
    1038:	e07a      	b.n	1130 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    103a:	2241      	movs	r2, #65	; 0x41
    103c:	2325      	movs	r3, #37	; 0x25
    103e:	54e2      	strb	r2, [r4, r3]
    1040:	e011      	b.n	1066 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1042:	7e2b      	ldrb	r3, [r5, #24]
    1044:	07db      	lsls	r3, r3, #31
    1046:	d507      	bpl.n	1058 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1048:	2301      	movs	r3, #1
    104a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    104c:	8b6b      	ldrh	r3, [r5, #26]
    104e:	079b      	lsls	r3, r3, #30
    1050:	d52e      	bpl.n	10b0 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1052:	2241      	movs	r2, #65	; 0x41
    1054:	2325      	movs	r3, #37	; 0x25
    1056:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    1058:	8ba3      	ldrh	r3, [r4, #28]
    105a:	b29b      	uxth	r3, r3
    105c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    105e:	2325      	movs	r3, #37	; 0x25
    1060:	5ce3      	ldrb	r3, [r4, r3]
    1062:	2b05      	cmp	r3, #5
    1064:	d038      	beq.n	10d8 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1066:	8b63      	ldrh	r3, [r4, #26]
    1068:	b29b      	uxth	r3, r3
    106a:	2b00      	cmp	r3, #0
    106c:	d007      	beq.n	107e <_i2c_master_interrupt_handler+0xaa>
    106e:	8ba3      	ldrh	r3, [r4, #28]
    1070:	b29b      	uxth	r3, r3
    1072:	2b00      	cmp	r3, #0
    1074:	d103      	bne.n	107e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    1076:	3325      	adds	r3, #37	; 0x25
    1078:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    107a:	2b05      	cmp	r3, #5
    107c:	d064      	beq.n	1148 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    107e:	2325      	movs	r3, #37	; 0x25
    1080:	5ce3      	ldrb	r3, [r4, r3]
    1082:	2b05      	cmp	r3, #5
    1084:	d013      	beq.n	10ae <_i2c_master_interrupt_handler+0xda>
    1086:	2325      	movs	r3, #37	; 0x25
    1088:	5ce3      	ldrb	r3, [r4, r3]
    108a:	2b00      	cmp	r3, #0
    108c:	d00f      	beq.n	10ae <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    108e:	2303      	movs	r3, #3
    1090:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1092:	2300      	movs	r3, #0
    1094:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    1096:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1098:	3325      	adds	r3, #37	; 0x25
    109a:	5ce3      	ldrb	r3, [r4, r3]
    109c:	2b41      	cmp	r3, #65	; 0x41
    109e:	d003      	beq.n	10a8 <_i2c_master_interrupt_handler+0xd4>
    10a0:	7aa3      	ldrb	r3, [r4, #10]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d000      	beq.n	10a8 <_i2c_master_interrupt_handler+0xd4>
    10a6:	e075      	b.n	1194 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    10a8:	0773      	lsls	r3, r6, #29
    10aa:	d500      	bpl.n	10ae <_i2c_master_interrupt_handler+0xda>
    10ac:	e07b      	b.n	11a6 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    10ae:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    10b0:	8b6b      	ldrh	r3, [r5, #26]
    10b2:	075b      	lsls	r3, r3, #29
    10b4:	d5d0      	bpl.n	1058 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    10b6:	2218      	movs	r2, #24
    10b8:	2325      	movs	r3, #37	; 0x25
    10ba:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    10bc:	2300      	movs	r3, #0
    10be:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    10c0:	7aa3      	ldrb	r3, [r4, #10]
    10c2:	2b00      	cmp	r3, #0
    10c4:	d0c8      	beq.n	1058 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    10c6:	0020      	movs	r0, r4
    10c8:	4b3a      	ldr	r3, [pc, #232]	; (11b4 <_i2c_master_interrupt_handler+0x1e0>)
    10ca:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    10cc:	686a      	ldr	r2, [r5, #4]
    10ce:	23c0      	movs	r3, #192	; 0xc0
    10d0:	029b      	lsls	r3, r3, #10
    10d2:	4313      	orrs	r3, r2
    10d4:	606b      	str	r3, [r5, #4]
    10d6:	e7bf      	b.n	1058 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    10d8:	331f      	adds	r3, #31
    10da:	5ce3      	ldrb	r3, [r4, r3]
    10dc:	2b00      	cmp	r3, #0
    10de:	d003      	beq.n	10e8 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    10e0:	0020      	movs	r0, r4
    10e2:	4b35      	ldr	r3, [pc, #212]	; (11b8 <_i2c_master_interrupt_handler+0x1e4>)
    10e4:	4798      	blx	r3
    10e6:	e7be      	b.n	1066 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    10e8:	0020      	movs	r0, r4
    10ea:	4b34      	ldr	r3, [pc, #208]	; (11bc <_i2c_master_interrupt_handler+0x1e8>)
    10ec:	4798      	blx	r3
    10ee:	e7ba      	b.n	1066 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    10f0:	331f      	adds	r3, #31
    10f2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    10f4:	2b00      	cmp	r3, #0
    10f6:	d000      	beq.n	10fa <_i2c_master_interrupt_handler+0x126>
    10f8:	e78c      	b.n	1014 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    10fa:	3303      	adds	r3, #3
    10fc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    10fe:	2300      	movs	r3, #0
    1100:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1102:	3325      	adds	r3, #37	; 0x25
    1104:	2200      	movs	r2, #0
    1106:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    1108:	7aa3      	ldrb	r3, [r4, #10]
    110a:	2b00      	cmp	r3, #0
    110c:	d107      	bne.n	111e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    110e:	2301      	movs	r3, #1
    1110:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1112:	07f3      	lsls	r3, r6, #31
    1114:	d5a7      	bpl.n	1066 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1116:	68e3      	ldr	r3, [r4, #12]
    1118:	0020      	movs	r0, r4
    111a:	4798      	blx	r3
    111c:	e7a3      	b.n	1066 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    111e:	0020      	movs	r0, r4
    1120:	4b24      	ldr	r3, [pc, #144]	; (11b4 <_i2c_master_interrupt_handler+0x1e0>)
    1122:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1124:	686a      	ldr	r2, [r5, #4]
    1126:	23c0      	movs	r3, #192	; 0xc0
    1128:	029b      	lsls	r3, r3, #10
    112a:	4313      	orrs	r3, r2
    112c:	606b      	str	r3, [r5, #4]
    112e:	e7f0      	b.n	1112 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1130:	2324      	movs	r3, #36	; 0x24
    1132:	5ce3      	ldrb	r3, [r4, r3]
    1134:	2b00      	cmp	r3, #0
    1136:	d103      	bne.n	1140 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    1138:	0020      	movs	r0, r4
    113a:	4b20      	ldr	r3, [pc, #128]	; (11bc <_i2c_master_interrupt_handler+0x1e8>)
    113c:	4798      	blx	r3
    113e:	e792      	b.n	1066 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    1140:	0020      	movs	r0, r4
    1142:	4b1d      	ldr	r3, [pc, #116]	; (11b8 <_i2c_master_interrupt_handler+0x1e4>)
    1144:	4798      	blx	r3
    1146:	e78e      	b.n	1066 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1148:	331f      	adds	r3, #31
    114a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    114c:	2b01      	cmp	r3, #1
    114e:	d196      	bne.n	107e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1150:	7e2b      	ldrb	r3, [r5, #24]
    1152:	079b      	lsls	r3, r3, #30
    1154:	d501      	bpl.n	115a <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1156:	2302      	movs	r3, #2
    1158:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    115a:	2303      	movs	r3, #3
    115c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    115e:	2300      	movs	r3, #0
    1160:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1162:	3325      	adds	r3, #37	; 0x25
    1164:	2200      	movs	r2, #0
    1166:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1168:	07b3      	lsls	r3, r6, #30
    116a:	d503      	bpl.n	1174 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    116c:	2324      	movs	r3, #36	; 0x24
    116e:	5ce3      	ldrb	r3, [r4, r3]
    1170:	2b01      	cmp	r3, #1
    1172:	d00b      	beq.n	118c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1174:	07f3      	lsls	r3, r6, #31
    1176:	d400      	bmi.n	117a <_i2c_master_interrupt_handler+0x1a6>
    1178:	e781      	b.n	107e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    117a:	2324      	movs	r3, #36	; 0x24
    117c:	5ce3      	ldrb	r3, [r4, r3]
    117e:	2b00      	cmp	r3, #0
    1180:	d000      	beq.n	1184 <_i2c_master_interrupt_handler+0x1b0>
    1182:	e77c      	b.n	107e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1184:	68e3      	ldr	r3, [r4, #12]
    1186:	0020      	movs	r0, r4
    1188:	4798      	blx	r3
    118a:	e778      	b.n	107e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    118c:	6923      	ldr	r3, [r4, #16]
    118e:	0020      	movs	r0, r4
    1190:	4798      	blx	r3
    1192:	e774      	b.n	107e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1194:	0020      	movs	r0, r4
    1196:	4b07      	ldr	r3, [pc, #28]	; (11b4 <_i2c_master_interrupt_handler+0x1e0>)
    1198:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    119a:	686a      	ldr	r2, [r5, #4]
    119c:	23e0      	movs	r3, #224	; 0xe0
    119e:	02db      	lsls	r3, r3, #11
    11a0:	4313      	orrs	r3, r2
    11a2:	606b      	str	r3, [r5, #4]
    11a4:	e780      	b.n	10a8 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    11a6:	6963      	ldr	r3, [r4, #20]
    11a8:	0020      	movs	r0, r4
    11aa:	4798      	blx	r3
}
    11ac:	e77f      	b.n	10ae <_i2c_master_interrupt_handler+0xda>
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	20000070 	.word	0x20000070
    11b4:	00000f05 	.word	0x00000f05
    11b8:	00000f11 	.word	0x00000f11
    11bc:	00000f99 	.word	0x00000f99

000011c0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    11c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11c2:	46de      	mov	lr, fp
    11c4:	4657      	mov	r7, sl
    11c6:	464e      	mov	r6, r9
    11c8:	4645      	mov	r5, r8
    11ca:	b5e0      	push	{r5, r6, r7, lr}
    11cc:	b087      	sub	sp, #28
    11ce:	4680      	mov	r8, r0
    11d0:	9104      	str	r1, [sp, #16]
    11d2:	0016      	movs	r6, r2
    11d4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    11d6:	2200      	movs	r2, #0
    11d8:	2300      	movs	r3, #0
    11da:	2100      	movs	r1, #0
    11dc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    11de:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    11e0:	2001      	movs	r0, #1
    11e2:	0021      	movs	r1, r4
    11e4:	9600      	str	r6, [sp, #0]
    11e6:	9701      	str	r7, [sp, #4]
    11e8:	465c      	mov	r4, fp
    11ea:	9403      	str	r4, [sp, #12]
    11ec:	4644      	mov	r4, r8
    11ee:	9405      	str	r4, [sp, #20]
    11f0:	e013      	b.n	121a <long_division+0x5a>
    11f2:	2420      	movs	r4, #32
    11f4:	1a64      	subs	r4, r4, r1
    11f6:	0005      	movs	r5, r0
    11f8:	40e5      	lsrs	r5, r4
    11fa:	46a8      	mov	r8, r5
    11fc:	e014      	b.n	1228 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    11fe:	9c00      	ldr	r4, [sp, #0]
    1200:	9d01      	ldr	r5, [sp, #4]
    1202:	1b12      	subs	r2, r2, r4
    1204:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1206:	465c      	mov	r4, fp
    1208:	464d      	mov	r5, r9
    120a:	432c      	orrs	r4, r5
    120c:	46a3      	mov	fp, r4
    120e:	9c03      	ldr	r4, [sp, #12]
    1210:	4645      	mov	r5, r8
    1212:	432c      	orrs	r4, r5
    1214:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1216:	3901      	subs	r1, #1
    1218:	d325      	bcc.n	1266 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    121a:	2420      	movs	r4, #32
    121c:	4264      	negs	r4, r4
    121e:	190c      	adds	r4, r1, r4
    1220:	d4e7      	bmi.n	11f2 <long_division+0x32>
    1222:	0005      	movs	r5, r0
    1224:	40a5      	lsls	r5, r4
    1226:	46a8      	mov	r8, r5
    1228:	0004      	movs	r4, r0
    122a:	408c      	lsls	r4, r1
    122c:	46a1      	mov	r9, r4
		r = r << 1;
    122e:	1892      	adds	r2, r2, r2
    1230:	415b      	adcs	r3, r3
    1232:	0014      	movs	r4, r2
    1234:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1236:	9e05      	ldr	r6, [sp, #20]
    1238:	464f      	mov	r7, r9
    123a:	403e      	ands	r6, r7
    123c:	46b4      	mov	ip, r6
    123e:	9e04      	ldr	r6, [sp, #16]
    1240:	4647      	mov	r7, r8
    1242:	403e      	ands	r6, r7
    1244:	46b2      	mov	sl, r6
    1246:	4666      	mov	r6, ip
    1248:	4657      	mov	r7, sl
    124a:	433e      	orrs	r6, r7
    124c:	d003      	beq.n	1256 <long_division+0x96>
			r |= 0x01;
    124e:	0006      	movs	r6, r0
    1250:	4326      	orrs	r6, r4
    1252:	0032      	movs	r2, r6
    1254:	002b      	movs	r3, r5
		if (r >= d) {
    1256:	9c00      	ldr	r4, [sp, #0]
    1258:	9d01      	ldr	r5, [sp, #4]
    125a:	429d      	cmp	r5, r3
    125c:	d8db      	bhi.n	1216 <long_division+0x56>
    125e:	d1ce      	bne.n	11fe <long_division+0x3e>
    1260:	4294      	cmp	r4, r2
    1262:	d8d8      	bhi.n	1216 <long_division+0x56>
    1264:	e7cb      	b.n	11fe <long_division+0x3e>
    1266:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1268:	4658      	mov	r0, fp
    126a:	0019      	movs	r1, r3
    126c:	b007      	add	sp, #28
    126e:	bc3c      	pop	{r2, r3, r4, r5}
    1270:	4690      	mov	r8, r2
    1272:	4699      	mov	r9, r3
    1274:	46a2      	mov	sl, r4
    1276:	46ab      	mov	fp, r5
    1278:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000127a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    127a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    127c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    127e:	2340      	movs	r3, #64	; 0x40
    1280:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1282:	4281      	cmp	r1, r0
    1284:	d202      	bcs.n	128c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1286:	0018      	movs	r0, r3
    1288:	bd10      	pop	{r4, pc}
		baud_calculated++;
    128a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    128c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    128e:	1c63      	adds	r3, r4, #1
    1290:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1292:	4288      	cmp	r0, r1
    1294:	d9f9      	bls.n	128a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1296:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1298:	2cff      	cmp	r4, #255	; 0xff
    129a:	d8f4      	bhi.n	1286 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    129c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    129e:	2300      	movs	r3, #0
    12a0:	e7f1      	b.n	1286 <_sercom_get_sync_baud_val+0xc>
	...

000012a4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    12a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12a6:	b083      	sub	sp, #12
    12a8:	000f      	movs	r7, r1
    12aa:	0016      	movs	r6, r2
    12ac:	aa08      	add	r2, sp, #32
    12ae:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    12b0:	0004      	movs	r4, r0
    12b2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    12b4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    12b6:	42bc      	cmp	r4, r7
    12b8:	d902      	bls.n	12c0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    12ba:	0010      	movs	r0, r2
    12bc:	b003      	add	sp, #12
    12be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    12c0:	2b00      	cmp	r3, #0
    12c2:	d114      	bne.n	12ee <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    12c4:	0002      	movs	r2, r0
    12c6:	0008      	movs	r0, r1
    12c8:	2100      	movs	r1, #0
    12ca:	4c19      	ldr	r4, [pc, #100]	; (1330 <_sercom_get_async_baud_val+0x8c>)
    12cc:	47a0      	blx	r4
    12ce:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    12d0:	003a      	movs	r2, r7
    12d2:	2300      	movs	r3, #0
    12d4:	2000      	movs	r0, #0
    12d6:	4c17      	ldr	r4, [pc, #92]	; (1334 <_sercom_get_async_baud_val+0x90>)
    12d8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    12da:	2200      	movs	r2, #0
    12dc:	2301      	movs	r3, #1
    12de:	1a12      	subs	r2, r2, r0
    12e0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    12e2:	0c12      	lsrs	r2, r2, #16
    12e4:	041b      	lsls	r3, r3, #16
    12e6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    12e8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    12ea:	2200      	movs	r2, #0
    12ec:	e7e5      	b.n	12ba <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    12ee:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    12f0:	2b01      	cmp	r3, #1
    12f2:	d1f9      	bne.n	12e8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    12f4:	000a      	movs	r2, r1
    12f6:	2300      	movs	r3, #0
    12f8:	2100      	movs	r1, #0
    12fa:	4c0d      	ldr	r4, [pc, #52]	; (1330 <_sercom_get_async_baud_val+0x8c>)
    12fc:	47a0      	blx	r4
    12fe:	0002      	movs	r2, r0
    1300:	000b      	movs	r3, r1
    1302:	9200      	str	r2, [sp, #0]
    1304:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1306:	0038      	movs	r0, r7
    1308:	2100      	movs	r1, #0
    130a:	4c0a      	ldr	r4, [pc, #40]	; (1334 <_sercom_get_async_baud_val+0x90>)
    130c:	47a0      	blx	r4
    130e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1310:	2380      	movs	r3, #128	; 0x80
    1312:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1314:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1316:	4298      	cmp	r0, r3
    1318:	d8cf      	bhi.n	12ba <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    131a:	0f79      	lsrs	r1, r7, #29
    131c:	00f8      	lsls	r0, r7, #3
    131e:	9a00      	ldr	r2, [sp, #0]
    1320:	9b01      	ldr	r3, [sp, #4]
    1322:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1324:	00ea      	lsls	r2, r5, #3
    1326:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1328:	b2d2      	uxtb	r2, r2
    132a:	0352      	lsls	r2, r2, #13
    132c:	432a      	orrs	r2, r5
    132e:	e7db      	b.n	12e8 <_sercom_get_async_baud_val+0x44>
    1330:	00002115 	.word	0x00002115
    1334:	000011c1 	.word	0x000011c1

00001338 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1338:	b510      	push	{r4, lr}
    133a:	b082      	sub	sp, #8
    133c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    133e:	4b0e      	ldr	r3, [pc, #56]	; (1378 <sercom_set_gclk_generator+0x40>)
    1340:	781b      	ldrb	r3, [r3, #0]
    1342:	2b00      	cmp	r3, #0
    1344:	d007      	beq.n	1356 <sercom_set_gclk_generator+0x1e>
    1346:	2900      	cmp	r1, #0
    1348:	d105      	bne.n	1356 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    134a:	4b0b      	ldr	r3, [pc, #44]	; (1378 <sercom_set_gclk_generator+0x40>)
    134c:	785b      	ldrb	r3, [r3, #1]
    134e:	4283      	cmp	r3, r0
    1350:	d010      	beq.n	1374 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1352:	201d      	movs	r0, #29
    1354:	e00c      	b.n	1370 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1356:	a901      	add	r1, sp, #4
    1358:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    135a:	2013      	movs	r0, #19
    135c:	4b07      	ldr	r3, [pc, #28]	; (137c <sercom_set_gclk_generator+0x44>)
    135e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1360:	2013      	movs	r0, #19
    1362:	4b07      	ldr	r3, [pc, #28]	; (1380 <sercom_set_gclk_generator+0x48>)
    1364:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1366:	4b04      	ldr	r3, [pc, #16]	; (1378 <sercom_set_gclk_generator+0x40>)
    1368:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    136a:	2201      	movs	r2, #1
    136c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    136e:	2000      	movs	r0, #0
}
    1370:	b002      	add	sp, #8
    1372:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1374:	2000      	movs	r0, #0
    1376:	e7fb      	b.n	1370 <sercom_set_gclk_generator+0x38>
    1378:	20000030 	.word	0x20000030
    137c:	00001a61 	.word	0x00001a61
    1380:	000019d5 	.word	0x000019d5

00001384 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1384:	4b40      	ldr	r3, [pc, #256]	; (1488 <_sercom_get_default_pad+0x104>)
    1386:	4298      	cmp	r0, r3
    1388:	d031      	beq.n	13ee <_sercom_get_default_pad+0x6a>
    138a:	d90a      	bls.n	13a2 <_sercom_get_default_pad+0x1e>
    138c:	4b3f      	ldr	r3, [pc, #252]	; (148c <_sercom_get_default_pad+0x108>)
    138e:	4298      	cmp	r0, r3
    1390:	d04d      	beq.n	142e <_sercom_get_default_pad+0xaa>
    1392:	4b3f      	ldr	r3, [pc, #252]	; (1490 <_sercom_get_default_pad+0x10c>)
    1394:	4298      	cmp	r0, r3
    1396:	d05a      	beq.n	144e <_sercom_get_default_pad+0xca>
    1398:	4b3e      	ldr	r3, [pc, #248]	; (1494 <_sercom_get_default_pad+0x110>)
    139a:	4298      	cmp	r0, r3
    139c:	d037      	beq.n	140e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    139e:	2000      	movs	r0, #0
}
    13a0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    13a2:	4b3d      	ldr	r3, [pc, #244]	; (1498 <_sercom_get_default_pad+0x114>)
    13a4:	4298      	cmp	r0, r3
    13a6:	d00c      	beq.n	13c2 <_sercom_get_default_pad+0x3e>
    13a8:	4b3c      	ldr	r3, [pc, #240]	; (149c <_sercom_get_default_pad+0x118>)
    13aa:	4298      	cmp	r0, r3
    13ac:	d1f7      	bne.n	139e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13ae:	2901      	cmp	r1, #1
    13b0:	d017      	beq.n	13e2 <_sercom_get_default_pad+0x5e>
    13b2:	2900      	cmp	r1, #0
    13b4:	d05d      	beq.n	1472 <_sercom_get_default_pad+0xee>
    13b6:	2902      	cmp	r1, #2
    13b8:	d015      	beq.n	13e6 <_sercom_get_default_pad+0x62>
    13ba:	2903      	cmp	r1, #3
    13bc:	d015      	beq.n	13ea <_sercom_get_default_pad+0x66>
	return 0;
    13be:	2000      	movs	r0, #0
    13c0:	e7ee      	b.n	13a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13c2:	2901      	cmp	r1, #1
    13c4:	d007      	beq.n	13d6 <_sercom_get_default_pad+0x52>
    13c6:	2900      	cmp	r1, #0
    13c8:	d051      	beq.n	146e <_sercom_get_default_pad+0xea>
    13ca:	2902      	cmp	r1, #2
    13cc:	d005      	beq.n	13da <_sercom_get_default_pad+0x56>
    13ce:	2903      	cmp	r1, #3
    13d0:	d005      	beq.n	13de <_sercom_get_default_pad+0x5a>
	return 0;
    13d2:	2000      	movs	r0, #0
    13d4:	e7e4      	b.n	13a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13d6:	4832      	ldr	r0, [pc, #200]	; (14a0 <_sercom_get_default_pad+0x11c>)
    13d8:	e7e2      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    13da:	4832      	ldr	r0, [pc, #200]	; (14a4 <_sercom_get_default_pad+0x120>)
    13dc:	e7e0      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    13de:	4832      	ldr	r0, [pc, #200]	; (14a8 <_sercom_get_default_pad+0x124>)
    13e0:	e7de      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    13e2:	4832      	ldr	r0, [pc, #200]	; (14ac <_sercom_get_default_pad+0x128>)
    13e4:	e7dc      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    13e6:	4832      	ldr	r0, [pc, #200]	; (14b0 <_sercom_get_default_pad+0x12c>)
    13e8:	e7da      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    13ea:	4832      	ldr	r0, [pc, #200]	; (14b4 <_sercom_get_default_pad+0x130>)
    13ec:	e7d8      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    13ee:	2901      	cmp	r1, #1
    13f0:	d007      	beq.n	1402 <_sercom_get_default_pad+0x7e>
    13f2:	2900      	cmp	r1, #0
    13f4:	d03f      	beq.n	1476 <_sercom_get_default_pad+0xf2>
    13f6:	2902      	cmp	r1, #2
    13f8:	d005      	beq.n	1406 <_sercom_get_default_pad+0x82>
    13fa:	2903      	cmp	r1, #3
    13fc:	d005      	beq.n	140a <_sercom_get_default_pad+0x86>
	return 0;
    13fe:	2000      	movs	r0, #0
    1400:	e7ce      	b.n	13a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1402:	482d      	ldr	r0, [pc, #180]	; (14b8 <_sercom_get_default_pad+0x134>)
    1404:	e7cc      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    1406:	482d      	ldr	r0, [pc, #180]	; (14bc <_sercom_get_default_pad+0x138>)
    1408:	e7ca      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    140a:	482d      	ldr	r0, [pc, #180]	; (14c0 <_sercom_get_default_pad+0x13c>)
    140c:	e7c8      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    140e:	2901      	cmp	r1, #1
    1410:	d007      	beq.n	1422 <_sercom_get_default_pad+0x9e>
    1412:	2900      	cmp	r1, #0
    1414:	d031      	beq.n	147a <_sercom_get_default_pad+0xf6>
    1416:	2902      	cmp	r1, #2
    1418:	d005      	beq.n	1426 <_sercom_get_default_pad+0xa2>
    141a:	2903      	cmp	r1, #3
    141c:	d005      	beq.n	142a <_sercom_get_default_pad+0xa6>
	return 0;
    141e:	2000      	movs	r0, #0
    1420:	e7be      	b.n	13a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1422:	4828      	ldr	r0, [pc, #160]	; (14c4 <_sercom_get_default_pad+0x140>)
    1424:	e7bc      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    1426:	4828      	ldr	r0, [pc, #160]	; (14c8 <_sercom_get_default_pad+0x144>)
    1428:	e7ba      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    142a:	4828      	ldr	r0, [pc, #160]	; (14cc <_sercom_get_default_pad+0x148>)
    142c:	e7b8      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    142e:	2901      	cmp	r1, #1
    1430:	d007      	beq.n	1442 <_sercom_get_default_pad+0xbe>
    1432:	2900      	cmp	r1, #0
    1434:	d023      	beq.n	147e <_sercom_get_default_pad+0xfa>
    1436:	2902      	cmp	r1, #2
    1438:	d005      	beq.n	1446 <_sercom_get_default_pad+0xc2>
    143a:	2903      	cmp	r1, #3
    143c:	d005      	beq.n	144a <_sercom_get_default_pad+0xc6>
	return 0;
    143e:	2000      	movs	r0, #0
    1440:	e7ae      	b.n	13a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1442:	4823      	ldr	r0, [pc, #140]	; (14d0 <_sercom_get_default_pad+0x14c>)
    1444:	e7ac      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    1446:	4823      	ldr	r0, [pc, #140]	; (14d4 <_sercom_get_default_pad+0x150>)
    1448:	e7aa      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    144a:	4823      	ldr	r0, [pc, #140]	; (14d8 <_sercom_get_default_pad+0x154>)
    144c:	e7a8      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    144e:	2901      	cmp	r1, #1
    1450:	d007      	beq.n	1462 <_sercom_get_default_pad+0xde>
    1452:	2900      	cmp	r1, #0
    1454:	d015      	beq.n	1482 <_sercom_get_default_pad+0xfe>
    1456:	2902      	cmp	r1, #2
    1458:	d005      	beq.n	1466 <_sercom_get_default_pad+0xe2>
    145a:	2903      	cmp	r1, #3
    145c:	d005      	beq.n	146a <_sercom_get_default_pad+0xe6>
	return 0;
    145e:	2000      	movs	r0, #0
    1460:	e79e      	b.n	13a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1462:	481e      	ldr	r0, [pc, #120]	; (14dc <_sercom_get_default_pad+0x158>)
    1464:	e79c      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    1466:	481e      	ldr	r0, [pc, #120]	; (14e0 <_sercom_get_default_pad+0x15c>)
    1468:	e79a      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    146a:	481e      	ldr	r0, [pc, #120]	; (14e4 <_sercom_get_default_pad+0x160>)
    146c:	e798      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    146e:	481e      	ldr	r0, [pc, #120]	; (14e8 <_sercom_get_default_pad+0x164>)
    1470:	e796      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    1472:	2003      	movs	r0, #3
    1474:	e794      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    1476:	481d      	ldr	r0, [pc, #116]	; (14ec <_sercom_get_default_pad+0x168>)
    1478:	e792      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    147a:	481d      	ldr	r0, [pc, #116]	; (14f0 <_sercom_get_default_pad+0x16c>)
    147c:	e790      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    147e:	481d      	ldr	r0, [pc, #116]	; (14f4 <_sercom_get_default_pad+0x170>)
    1480:	e78e      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    1482:	481d      	ldr	r0, [pc, #116]	; (14f8 <_sercom_get_default_pad+0x174>)
    1484:	e78c      	b.n	13a0 <_sercom_get_default_pad+0x1c>
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	42001000 	.word	0x42001000
    148c:	42001800 	.word	0x42001800
    1490:	42001c00 	.word	0x42001c00
    1494:	42001400 	.word	0x42001400
    1498:	42000800 	.word	0x42000800
    149c:	42000c00 	.word	0x42000c00
    14a0:	00050003 	.word	0x00050003
    14a4:	00060003 	.word	0x00060003
    14a8:	00070003 	.word	0x00070003
    14ac:	00010003 	.word	0x00010003
    14b0:	001e0003 	.word	0x001e0003
    14b4:	001f0003 	.word	0x001f0003
    14b8:	00090003 	.word	0x00090003
    14bc:	000a0003 	.word	0x000a0003
    14c0:	000b0003 	.word	0x000b0003
    14c4:	00110003 	.word	0x00110003
    14c8:	00120003 	.word	0x00120003
    14cc:	00130003 	.word	0x00130003
    14d0:	000d0003 	.word	0x000d0003
    14d4:	000e0003 	.word	0x000e0003
    14d8:	000f0003 	.word	0x000f0003
    14dc:	00170003 	.word	0x00170003
    14e0:	00180003 	.word	0x00180003
    14e4:	00190003 	.word	0x00190003
    14e8:	00040003 	.word	0x00040003
    14ec:	00080003 	.word	0x00080003
    14f0:	00100003 	.word	0x00100003
    14f4:	000c0003 	.word	0x000c0003
    14f8:	00160003 	.word	0x00160003

000014fc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    14fc:	b530      	push	{r4, r5, lr}
    14fe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1500:	4b0b      	ldr	r3, [pc, #44]	; (1530 <_sercom_get_sercom_inst_index+0x34>)
    1502:	466a      	mov	r2, sp
    1504:	cb32      	ldmia	r3!, {r1, r4, r5}
    1506:	c232      	stmia	r2!, {r1, r4, r5}
    1508:	cb32      	ldmia	r3!, {r1, r4, r5}
    150a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    150c:	9b00      	ldr	r3, [sp, #0]
    150e:	4283      	cmp	r3, r0
    1510:	d00b      	beq.n	152a <_sercom_get_sercom_inst_index+0x2e>
    1512:	2301      	movs	r3, #1
    1514:	009a      	lsls	r2, r3, #2
    1516:	4669      	mov	r1, sp
    1518:	5852      	ldr	r2, [r2, r1]
    151a:	4282      	cmp	r2, r0
    151c:	d006      	beq.n	152c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    151e:	3301      	adds	r3, #1
    1520:	2b06      	cmp	r3, #6
    1522:	d1f7      	bne.n	1514 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1524:	2000      	movs	r0, #0
}
    1526:	b007      	add	sp, #28
    1528:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    152a:	2300      	movs	r3, #0
			return i;
    152c:	b2d8      	uxtb	r0, r3
    152e:	e7fa      	b.n	1526 <_sercom_get_sercom_inst_index+0x2a>
    1530:	00003b44 	.word	0x00003b44

00001534 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1534:	4770      	bx	lr
	...

00001538 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1538:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    153a:	4b0a      	ldr	r3, [pc, #40]	; (1564 <_sercom_set_handler+0x2c>)
    153c:	781b      	ldrb	r3, [r3, #0]
    153e:	2b00      	cmp	r3, #0
    1540:	d10c      	bne.n	155c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1542:	4f09      	ldr	r7, [pc, #36]	; (1568 <_sercom_set_handler+0x30>)
    1544:	4e09      	ldr	r6, [pc, #36]	; (156c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1546:	4d0a      	ldr	r5, [pc, #40]	; (1570 <_sercom_set_handler+0x38>)
    1548:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    154a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    154c:	195a      	adds	r2, r3, r5
    154e:	6014      	str	r4, [r2, #0]
    1550:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1552:	2b18      	cmp	r3, #24
    1554:	d1f9      	bne.n	154a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1556:	2201      	movs	r2, #1
    1558:	4b02      	ldr	r3, [pc, #8]	; (1564 <_sercom_set_handler+0x2c>)
    155a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    155c:	0080      	lsls	r0, r0, #2
    155e:	4b02      	ldr	r3, [pc, #8]	; (1568 <_sercom_set_handler+0x30>)
    1560:	50c1      	str	r1, [r0, r3]
}
    1562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1564:	20000032 	.word	0x20000032
    1568:	20000034 	.word	0x20000034
    156c:	00001535 	.word	0x00001535
    1570:	20000070 	.word	0x20000070

00001574 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1574:	b500      	push	{lr}
    1576:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1578:	2309      	movs	r3, #9
    157a:	466a      	mov	r2, sp
    157c:	7013      	strb	r3, [r2, #0]
    157e:	3301      	adds	r3, #1
    1580:	7053      	strb	r3, [r2, #1]
    1582:	3301      	adds	r3, #1
    1584:	7093      	strb	r3, [r2, #2]
    1586:	3301      	adds	r3, #1
    1588:	70d3      	strb	r3, [r2, #3]
    158a:	3301      	adds	r3, #1
    158c:	7113      	strb	r3, [r2, #4]
    158e:	3301      	adds	r3, #1
    1590:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1592:	4b03      	ldr	r3, [pc, #12]	; (15a0 <_sercom_get_interrupt_vector+0x2c>)
    1594:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1596:	466b      	mov	r3, sp
    1598:	5618      	ldrsb	r0, [r3, r0]
}
    159a:	b003      	add	sp, #12
    159c:	bd00      	pop	{pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	000014fd 	.word	0x000014fd

000015a4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    15a4:	b510      	push	{r4, lr}
    15a6:	4b02      	ldr	r3, [pc, #8]	; (15b0 <SERCOM0_Handler+0xc>)
    15a8:	681b      	ldr	r3, [r3, #0]
    15aa:	2000      	movs	r0, #0
    15ac:	4798      	blx	r3
    15ae:	bd10      	pop	{r4, pc}
    15b0:	20000034 	.word	0x20000034

000015b4 <SERCOM1_Handler>:
    15b4:	b510      	push	{r4, lr}
    15b6:	4b02      	ldr	r3, [pc, #8]	; (15c0 <SERCOM1_Handler+0xc>)
    15b8:	685b      	ldr	r3, [r3, #4]
    15ba:	2001      	movs	r0, #1
    15bc:	4798      	blx	r3
    15be:	bd10      	pop	{r4, pc}
    15c0:	20000034 	.word	0x20000034

000015c4 <SERCOM2_Handler>:
    15c4:	b510      	push	{r4, lr}
    15c6:	4b02      	ldr	r3, [pc, #8]	; (15d0 <SERCOM2_Handler+0xc>)
    15c8:	689b      	ldr	r3, [r3, #8]
    15ca:	2002      	movs	r0, #2
    15cc:	4798      	blx	r3
    15ce:	bd10      	pop	{r4, pc}
    15d0:	20000034 	.word	0x20000034

000015d4 <SERCOM3_Handler>:
    15d4:	b510      	push	{r4, lr}
    15d6:	4b02      	ldr	r3, [pc, #8]	; (15e0 <SERCOM3_Handler+0xc>)
    15d8:	68db      	ldr	r3, [r3, #12]
    15da:	2003      	movs	r0, #3
    15dc:	4798      	blx	r3
    15de:	bd10      	pop	{r4, pc}
    15e0:	20000034 	.word	0x20000034

000015e4 <SERCOM4_Handler>:
    15e4:	b510      	push	{r4, lr}
    15e6:	4b02      	ldr	r3, [pc, #8]	; (15f0 <SERCOM4_Handler+0xc>)
    15e8:	691b      	ldr	r3, [r3, #16]
    15ea:	2004      	movs	r0, #4
    15ec:	4798      	blx	r3
    15ee:	bd10      	pop	{r4, pc}
    15f0:	20000034 	.word	0x20000034

000015f4 <SERCOM5_Handler>:
    15f4:	b510      	push	{r4, lr}
    15f6:	4b02      	ldr	r3, [pc, #8]	; (1600 <SERCOM5_Handler+0xc>)
    15f8:	695b      	ldr	r3, [r3, #20]
    15fa:	2005      	movs	r0, #5
    15fc:	4798      	blx	r3
    15fe:	bd10      	pop	{r4, pc}
    1600:	20000034 	.word	0x20000034

00001604 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1604:	b510      	push	{r4, lr}
	switch (clock_source) {
    1606:	2808      	cmp	r0, #8
    1608:	d803      	bhi.n	1612 <system_clock_source_get_hz+0xe>
    160a:	0080      	lsls	r0, r0, #2
    160c:	4b1b      	ldr	r3, [pc, #108]	; (167c <system_clock_source_get_hz+0x78>)
    160e:	581b      	ldr	r3, [r3, r0]
    1610:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1612:	2000      	movs	r0, #0
    1614:	e030      	b.n	1678 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1616:	4b1a      	ldr	r3, [pc, #104]	; (1680 <system_clock_source_get_hz+0x7c>)
    1618:	6918      	ldr	r0, [r3, #16]
    161a:	e02d      	b.n	1678 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    161c:	4b19      	ldr	r3, [pc, #100]	; (1684 <system_clock_source_get_hz+0x80>)
    161e:	6a1b      	ldr	r3, [r3, #32]
    1620:	059b      	lsls	r3, r3, #22
    1622:	0f9b      	lsrs	r3, r3, #30
    1624:	4818      	ldr	r0, [pc, #96]	; (1688 <system_clock_source_get_hz+0x84>)
    1626:	40d8      	lsrs	r0, r3
    1628:	e026      	b.n	1678 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    162a:	4b15      	ldr	r3, [pc, #84]	; (1680 <system_clock_source_get_hz+0x7c>)
    162c:	6958      	ldr	r0, [r3, #20]
    162e:	e023      	b.n	1678 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1630:	4b13      	ldr	r3, [pc, #76]	; (1680 <system_clock_source_get_hz+0x7c>)
    1632:	681b      	ldr	r3, [r3, #0]
			return 0;
    1634:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1636:	079b      	lsls	r3, r3, #30
    1638:	d51e      	bpl.n	1678 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    163a:	4912      	ldr	r1, [pc, #72]	; (1684 <system_clock_source_get_hz+0x80>)
    163c:	2210      	movs	r2, #16
    163e:	68cb      	ldr	r3, [r1, #12]
    1640:	421a      	tst	r2, r3
    1642:	d0fc      	beq.n	163e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1644:	4b0e      	ldr	r3, [pc, #56]	; (1680 <system_clock_source_get_hz+0x7c>)
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	075b      	lsls	r3, r3, #29
    164a:	d401      	bmi.n	1650 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    164c:	480f      	ldr	r0, [pc, #60]	; (168c <system_clock_source_get_hz+0x88>)
    164e:	e013      	b.n	1678 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1650:	2000      	movs	r0, #0
    1652:	4b0f      	ldr	r3, [pc, #60]	; (1690 <system_clock_source_get_hz+0x8c>)
    1654:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1656:	4b0a      	ldr	r3, [pc, #40]	; (1680 <system_clock_source_get_hz+0x7c>)
    1658:	689b      	ldr	r3, [r3, #8]
    165a:	041b      	lsls	r3, r3, #16
    165c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    165e:	4358      	muls	r0, r3
    1660:	e00a      	b.n	1678 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1662:	2350      	movs	r3, #80	; 0x50
    1664:	4a07      	ldr	r2, [pc, #28]	; (1684 <system_clock_source_get_hz+0x80>)
    1666:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1668:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    166a:	075b      	lsls	r3, r3, #29
    166c:	d504      	bpl.n	1678 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    166e:	4b04      	ldr	r3, [pc, #16]	; (1680 <system_clock_source_get_hz+0x7c>)
    1670:	68d8      	ldr	r0, [r3, #12]
    1672:	e001      	b.n	1678 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1674:	2080      	movs	r0, #128	; 0x80
    1676:	0200      	lsls	r0, r0, #8
	}
}
    1678:	bd10      	pop	{r4, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	00003b5c 	.word	0x00003b5c
    1680:	2000004c 	.word	0x2000004c
    1684:	40000800 	.word	0x40000800
    1688:	007a1200 	.word	0x007a1200
    168c:	02dc6c00 	.word	0x02dc6c00
    1690:	00001a7d 	.word	0x00001a7d

00001694 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1694:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1696:	490c      	ldr	r1, [pc, #48]	; (16c8 <system_clock_source_osc8m_set_config+0x34>)
    1698:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    169a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    169c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    169e:	7840      	ldrb	r0, [r0, #1]
    16a0:	2201      	movs	r2, #1
    16a2:	4010      	ands	r0, r2
    16a4:	0180      	lsls	r0, r0, #6
    16a6:	2640      	movs	r6, #64	; 0x40
    16a8:	43b3      	bics	r3, r6
    16aa:	4303      	orrs	r3, r0
    16ac:	402a      	ands	r2, r5
    16ae:	01d2      	lsls	r2, r2, #7
    16b0:	2080      	movs	r0, #128	; 0x80
    16b2:	4383      	bics	r3, r0
    16b4:	4313      	orrs	r3, r2
    16b6:	2203      	movs	r2, #3
    16b8:	4022      	ands	r2, r4
    16ba:	0212      	lsls	r2, r2, #8
    16bc:	4803      	ldr	r0, [pc, #12]	; (16cc <system_clock_source_osc8m_set_config+0x38>)
    16be:	4003      	ands	r3, r0
    16c0:	4313      	orrs	r3, r2
    16c2:	620b      	str	r3, [r1, #32]
}
    16c4:	bd70      	pop	{r4, r5, r6, pc}
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	40000800 	.word	0x40000800
    16cc:	fffffcff 	.word	0xfffffcff

000016d0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    16d0:	2808      	cmp	r0, #8
    16d2:	d803      	bhi.n	16dc <system_clock_source_enable+0xc>
    16d4:	0080      	lsls	r0, r0, #2
    16d6:	4b25      	ldr	r3, [pc, #148]	; (176c <system_clock_source_enable+0x9c>)
    16d8:	581b      	ldr	r3, [r3, r0]
    16da:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    16dc:	2017      	movs	r0, #23
    16de:	e044      	b.n	176a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    16e0:	4a23      	ldr	r2, [pc, #140]	; (1770 <system_clock_source_enable+0xa0>)
    16e2:	6a13      	ldr	r3, [r2, #32]
    16e4:	2102      	movs	r1, #2
    16e6:	430b      	orrs	r3, r1
    16e8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    16ea:	2000      	movs	r0, #0
    16ec:	e03d      	b.n	176a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    16ee:	4a20      	ldr	r2, [pc, #128]	; (1770 <system_clock_source_enable+0xa0>)
    16f0:	6993      	ldr	r3, [r2, #24]
    16f2:	2102      	movs	r1, #2
    16f4:	430b      	orrs	r3, r1
    16f6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    16f8:	2000      	movs	r0, #0
		break;
    16fa:	e036      	b.n	176a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    16fc:	4a1c      	ldr	r2, [pc, #112]	; (1770 <system_clock_source_enable+0xa0>)
    16fe:	8a13      	ldrh	r3, [r2, #16]
    1700:	2102      	movs	r1, #2
    1702:	430b      	orrs	r3, r1
    1704:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1706:	2000      	movs	r0, #0
		break;
    1708:	e02f      	b.n	176a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    170a:	4a19      	ldr	r2, [pc, #100]	; (1770 <system_clock_source_enable+0xa0>)
    170c:	8a93      	ldrh	r3, [r2, #20]
    170e:	2102      	movs	r1, #2
    1710:	430b      	orrs	r3, r1
    1712:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1714:	2000      	movs	r0, #0
		break;
    1716:	e028      	b.n	176a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1718:	4916      	ldr	r1, [pc, #88]	; (1774 <system_clock_source_enable+0xa4>)
    171a:	680b      	ldr	r3, [r1, #0]
    171c:	2202      	movs	r2, #2
    171e:	4313      	orrs	r3, r2
    1720:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1722:	4b13      	ldr	r3, [pc, #76]	; (1770 <system_clock_source_enable+0xa0>)
    1724:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1726:	0019      	movs	r1, r3
    1728:	320e      	adds	r2, #14
    172a:	68cb      	ldr	r3, [r1, #12]
    172c:	421a      	tst	r2, r3
    172e:	d0fc      	beq.n	172a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1730:	4a10      	ldr	r2, [pc, #64]	; (1774 <system_clock_source_enable+0xa4>)
    1732:	6891      	ldr	r1, [r2, #8]
    1734:	4b0e      	ldr	r3, [pc, #56]	; (1770 <system_clock_source_enable+0xa0>)
    1736:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1738:	6852      	ldr	r2, [r2, #4]
    173a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    173c:	2200      	movs	r2, #0
    173e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1740:	0019      	movs	r1, r3
    1742:	3210      	adds	r2, #16
    1744:	68cb      	ldr	r3, [r1, #12]
    1746:	421a      	tst	r2, r3
    1748:	d0fc      	beq.n	1744 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    174a:	4b0a      	ldr	r3, [pc, #40]	; (1774 <system_clock_source_enable+0xa4>)
    174c:	681b      	ldr	r3, [r3, #0]
    174e:	b29b      	uxth	r3, r3
    1750:	4a07      	ldr	r2, [pc, #28]	; (1770 <system_clock_source_enable+0xa0>)
    1752:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1754:	2000      	movs	r0, #0
    1756:	e008      	b.n	176a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1758:	4905      	ldr	r1, [pc, #20]	; (1770 <system_clock_source_enable+0xa0>)
    175a:	2244      	movs	r2, #68	; 0x44
    175c:	5c8b      	ldrb	r3, [r1, r2]
    175e:	2002      	movs	r0, #2
    1760:	4303      	orrs	r3, r0
    1762:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1764:	2000      	movs	r0, #0
		break;
    1766:	e000      	b.n	176a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1768:	2000      	movs	r0, #0
}
    176a:	4770      	bx	lr
    176c:	00003b80 	.word	0x00003b80
    1770:	40000800 	.word	0x40000800
    1774:	2000004c 	.word	0x2000004c

00001778 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1778:	b5f0      	push	{r4, r5, r6, r7, lr}
    177a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    177c:	22c2      	movs	r2, #194	; 0xc2
    177e:	00d2      	lsls	r2, r2, #3
    1780:	4b20      	ldr	r3, [pc, #128]	; (1804 <system_clock_init+0x8c>)
    1782:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1784:	4a20      	ldr	r2, [pc, #128]	; (1808 <system_clock_init+0x90>)
    1786:	6853      	ldr	r3, [r2, #4]
    1788:	211e      	movs	r1, #30
    178a:	438b      	bics	r3, r1
    178c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    178e:	2302      	movs	r3, #2
    1790:	466a      	mov	r2, sp
    1792:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1794:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1796:	4d1d      	ldr	r5, [pc, #116]	; (180c <system_clock_init+0x94>)
    1798:	b2e0      	uxtb	r0, r4
    179a:	4669      	mov	r1, sp
    179c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    179e:	3401      	adds	r4, #1
    17a0:	2c25      	cmp	r4, #37	; 0x25
    17a2:	d1f9      	bne.n	1798 <system_clock_init+0x20>
	config->run_in_standby  = false;
    17a4:	a803      	add	r0, sp, #12
    17a6:	2400      	movs	r4, #0
    17a8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    17aa:	2501      	movs	r5, #1
    17ac:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    17ae:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    17b0:	4b17      	ldr	r3, [pc, #92]	; (1810 <system_clock_init+0x98>)
    17b2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    17b4:	2006      	movs	r0, #6
    17b6:	4b17      	ldr	r3, [pc, #92]	; (1814 <system_clock_init+0x9c>)
    17b8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    17ba:	4b17      	ldr	r3, [pc, #92]	; (1818 <system_clock_init+0xa0>)
    17bc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    17be:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    17c0:	466b      	mov	r3, sp
    17c2:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    17c4:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    17c6:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    17c8:	2304      	movs	r3, #4
    17ca:	466a      	mov	r2, sp
    17cc:	7013      	strb	r3, [r2, #0]
    17ce:	4669      	mov	r1, sp
    17d0:	2001      	movs	r0, #1
    17d2:	4f12      	ldr	r7, [pc, #72]	; (181c <system_clock_init+0xa4>)
    17d4:	47b8      	blx	r7
    17d6:	2001      	movs	r0, #1
    17d8:	4e11      	ldr	r6, [pc, #68]	; (1820 <system_clock_init+0xa8>)
    17da:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    17dc:	4b11      	ldr	r3, [pc, #68]	; (1824 <system_clock_init+0xac>)
    17de:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    17e0:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    17e2:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    17e4:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    17e6:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    17e8:	466b      	mov	r3, sp
    17ea:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    17ec:	2306      	movs	r3, #6
    17ee:	466a      	mov	r2, sp
    17f0:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    17f2:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    17f4:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    17f6:	4669      	mov	r1, sp
    17f8:	2000      	movs	r0, #0
    17fa:	47b8      	blx	r7
    17fc:	2000      	movs	r0, #0
    17fe:	47b0      	blx	r6
#endif
}
    1800:	b005      	add	sp, #20
    1802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1804:	40000800 	.word	0x40000800
    1808:	41004000 	.word	0x41004000
    180c:	00001a61 	.word	0x00001a61
    1810:	00001695 	.word	0x00001695
    1814:	000016d1 	.word	0x000016d1
    1818:	00001829 	.word	0x00001829
    181c:	0000184d 	.word	0x0000184d
    1820:	00001905 	.word	0x00001905
    1824:	40000400 	.word	0x40000400

00001828 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1828:	4a06      	ldr	r2, [pc, #24]	; (1844 <system_gclk_init+0x1c>)
    182a:	6993      	ldr	r3, [r2, #24]
    182c:	2108      	movs	r1, #8
    182e:	430b      	orrs	r3, r1
    1830:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1832:	2201      	movs	r2, #1
    1834:	4b04      	ldr	r3, [pc, #16]	; (1848 <system_gclk_init+0x20>)
    1836:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1838:	0019      	movs	r1, r3
    183a:	780b      	ldrb	r3, [r1, #0]
    183c:	4213      	tst	r3, r2
    183e:	d1fc      	bne.n	183a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1840:	4770      	bx	lr
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	40000400 	.word	0x40000400
    1848:	40000c00 	.word	0x40000c00

0000184c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    184c:	b570      	push	{r4, r5, r6, lr}
    184e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1850:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1852:	780d      	ldrb	r5, [r1, #0]
    1854:	022d      	lsls	r5, r5, #8
    1856:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1858:	784b      	ldrb	r3, [r1, #1]
    185a:	2b00      	cmp	r3, #0
    185c:	d002      	beq.n	1864 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    185e:	2380      	movs	r3, #128	; 0x80
    1860:	02db      	lsls	r3, r3, #11
    1862:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1864:	7a4b      	ldrb	r3, [r1, #9]
    1866:	2b00      	cmp	r3, #0
    1868:	d002      	beq.n	1870 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    186a:	2380      	movs	r3, #128	; 0x80
    186c:	031b      	lsls	r3, r3, #12
    186e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1870:	6848      	ldr	r0, [r1, #4]
    1872:	2801      	cmp	r0, #1
    1874:	d910      	bls.n	1898 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1876:	1e43      	subs	r3, r0, #1
    1878:	4218      	tst	r0, r3
    187a:	d134      	bne.n	18e6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    187c:	2802      	cmp	r0, #2
    187e:	d930      	bls.n	18e2 <system_gclk_gen_set_config+0x96>
    1880:	2302      	movs	r3, #2
    1882:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1884:	3201      	adds	r2, #1
						mask <<= 1) {
    1886:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1888:	4298      	cmp	r0, r3
    188a:	d8fb      	bhi.n	1884 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    188c:	0212      	lsls	r2, r2, #8
    188e:	4332      	orrs	r2, r6
    1890:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1892:	2380      	movs	r3, #128	; 0x80
    1894:	035b      	lsls	r3, r3, #13
    1896:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1898:	7a0b      	ldrb	r3, [r1, #8]
    189a:	2b00      	cmp	r3, #0
    189c:	d002      	beq.n	18a4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    189e:	2380      	movs	r3, #128	; 0x80
    18a0:	039b      	lsls	r3, r3, #14
    18a2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18a4:	4a13      	ldr	r2, [pc, #76]	; (18f4 <system_gclk_gen_set_config+0xa8>)
    18a6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    18a8:	b25b      	sxtb	r3, r3
    18aa:	2b00      	cmp	r3, #0
    18ac:	dbfb      	blt.n	18a6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    18ae:	4b12      	ldr	r3, [pc, #72]	; (18f8 <system_gclk_gen_set_config+0xac>)
    18b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18b2:	4b12      	ldr	r3, [pc, #72]	; (18fc <system_gclk_gen_set_config+0xb0>)
    18b4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18b6:	4a0f      	ldr	r2, [pc, #60]	; (18f4 <system_gclk_gen_set_config+0xa8>)
    18b8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    18ba:	b25b      	sxtb	r3, r3
    18bc:	2b00      	cmp	r3, #0
    18be:	dbfb      	blt.n	18b8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    18c0:	4b0c      	ldr	r3, [pc, #48]	; (18f4 <system_gclk_gen_set_config+0xa8>)
    18c2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18c4:	001a      	movs	r2, r3
    18c6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    18c8:	b25b      	sxtb	r3, r3
    18ca:	2b00      	cmp	r3, #0
    18cc:	dbfb      	blt.n	18c6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    18ce:	4a09      	ldr	r2, [pc, #36]	; (18f4 <system_gclk_gen_set_config+0xa8>)
    18d0:	6853      	ldr	r3, [r2, #4]
    18d2:	2180      	movs	r1, #128	; 0x80
    18d4:	0249      	lsls	r1, r1, #9
    18d6:	400b      	ands	r3, r1
    18d8:	431d      	orrs	r5, r3
    18da:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    18dc:	4b08      	ldr	r3, [pc, #32]	; (1900 <system_gclk_gen_set_config+0xb4>)
    18de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18e0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    18e2:	2200      	movs	r2, #0
    18e4:	e7d2      	b.n	188c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    18e6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    18e8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    18ea:	2380      	movs	r3, #128	; 0x80
    18ec:	029b      	lsls	r3, r3, #10
    18ee:	431d      	orrs	r5, r3
    18f0:	e7d2      	b.n	1898 <system_gclk_gen_set_config+0x4c>
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	40000c00 	.word	0x40000c00
    18f8:	000007b9 	.word	0x000007b9
    18fc:	40000c08 	.word	0x40000c08
    1900:	000007f9 	.word	0x000007f9

00001904 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1904:	b510      	push	{r4, lr}
    1906:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1908:	4a0b      	ldr	r2, [pc, #44]	; (1938 <system_gclk_gen_enable+0x34>)
    190a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    190c:	b25b      	sxtb	r3, r3
    190e:	2b00      	cmp	r3, #0
    1910:	dbfb      	blt.n	190a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1912:	4b0a      	ldr	r3, [pc, #40]	; (193c <system_gclk_gen_enable+0x38>)
    1914:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1916:	4b0a      	ldr	r3, [pc, #40]	; (1940 <system_gclk_gen_enable+0x3c>)
    1918:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    191a:	4a07      	ldr	r2, [pc, #28]	; (1938 <system_gclk_gen_enable+0x34>)
    191c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    191e:	b25b      	sxtb	r3, r3
    1920:	2b00      	cmp	r3, #0
    1922:	dbfb      	blt.n	191c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1924:	4a04      	ldr	r2, [pc, #16]	; (1938 <system_gclk_gen_enable+0x34>)
    1926:	6851      	ldr	r1, [r2, #4]
    1928:	2380      	movs	r3, #128	; 0x80
    192a:	025b      	lsls	r3, r3, #9
    192c:	430b      	orrs	r3, r1
    192e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1930:	4b04      	ldr	r3, [pc, #16]	; (1944 <system_gclk_gen_enable+0x40>)
    1932:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1934:	bd10      	pop	{r4, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	40000c00 	.word	0x40000c00
    193c:	000007b9 	.word	0x000007b9
    1940:	40000c04 	.word	0x40000c04
    1944:	000007f9 	.word	0x000007f9

00001948 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1948:	b570      	push	{r4, r5, r6, lr}
    194a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    194c:	4a1a      	ldr	r2, [pc, #104]	; (19b8 <system_gclk_gen_get_hz+0x70>)
    194e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1950:	b25b      	sxtb	r3, r3
    1952:	2b00      	cmp	r3, #0
    1954:	dbfb      	blt.n	194e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1956:	4b19      	ldr	r3, [pc, #100]	; (19bc <system_gclk_gen_get_hz+0x74>)
    1958:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    195a:	4b19      	ldr	r3, [pc, #100]	; (19c0 <system_gclk_gen_get_hz+0x78>)
    195c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    195e:	4a16      	ldr	r2, [pc, #88]	; (19b8 <system_gclk_gen_get_hz+0x70>)
    1960:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1962:	b25b      	sxtb	r3, r3
    1964:	2b00      	cmp	r3, #0
    1966:	dbfb      	blt.n	1960 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1968:	4e13      	ldr	r6, [pc, #76]	; (19b8 <system_gclk_gen_get_hz+0x70>)
    196a:	6870      	ldr	r0, [r6, #4]
    196c:	04c0      	lsls	r0, r0, #19
    196e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1970:	4b14      	ldr	r3, [pc, #80]	; (19c4 <system_gclk_gen_get_hz+0x7c>)
    1972:	4798      	blx	r3
    1974:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1976:	4b12      	ldr	r3, [pc, #72]	; (19c0 <system_gclk_gen_get_hz+0x78>)
    1978:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    197a:	6876      	ldr	r6, [r6, #4]
    197c:	02f6      	lsls	r6, r6, #11
    197e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1980:	4b11      	ldr	r3, [pc, #68]	; (19c8 <system_gclk_gen_get_hz+0x80>)
    1982:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1984:	4a0c      	ldr	r2, [pc, #48]	; (19b8 <system_gclk_gen_get_hz+0x70>)
    1986:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1988:	b25b      	sxtb	r3, r3
    198a:	2b00      	cmp	r3, #0
    198c:	dbfb      	blt.n	1986 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    198e:	4b0a      	ldr	r3, [pc, #40]	; (19b8 <system_gclk_gen_get_hz+0x70>)
    1990:	689c      	ldr	r4, [r3, #8]
    1992:	0224      	lsls	r4, r4, #8
    1994:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1996:	4b0d      	ldr	r3, [pc, #52]	; (19cc <system_gclk_gen_get_hz+0x84>)
    1998:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    199a:	2e00      	cmp	r6, #0
    199c:	d107      	bne.n	19ae <system_gclk_gen_get_hz+0x66>
    199e:	2c01      	cmp	r4, #1
    19a0:	d907      	bls.n	19b2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    19a2:	0021      	movs	r1, r4
    19a4:	0028      	movs	r0, r5
    19a6:	4b0a      	ldr	r3, [pc, #40]	; (19d0 <system_gclk_gen_get_hz+0x88>)
    19a8:	4798      	blx	r3
    19aa:	0005      	movs	r5, r0
    19ac:	e001      	b.n	19b2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    19ae:	3401      	adds	r4, #1
    19b0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    19b2:	0028      	movs	r0, r5
    19b4:	bd70      	pop	{r4, r5, r6, pc}
    19b6:	46c0      	nop			; (mov r8, r8)
    19b8:	40000c00 	.word	0x40000c00
    19bc:	000007b9 	.word	0x000007b9
    19c0:	40000c04 	.word	0x40000c04
    19c4:	00001605 	.word	0x00001605
    19c8:	40000c08 	.word	0x40000c08
    19cc:	000007f9 	.word	0x000007f9
    19d0:	00001ffd 	.word	0x00001ffd

000019d4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    19d4:	b510      	push	{r4, lr}
    19d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19d8:	4b06      	ldr	r3, [pc, #24]	; (19f4 <system_gclk_chan_enable+0x20>)
    19da:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19dc:	4b06      	ldr	r3, [pc, #24]	; (19f8 <system_gclk_chan_enable+0x24>)
    19de:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    19e0:	4a06      	ldr	r2, [pc, #24]	; (19fc <system_gclk_chan_enable+0x28>)
    19e2:	8853      	ldrh	r3, [r2, #2]
    19e4:	2180      	movs	r1, #128	; 0x80
    19e6:	01c9      	lsls	r1, r1, #7
    19e8:	430b      	orrs	r3, r1
    19ea:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    19ec:	4b04      	ldr	r3, [pc, #16]	; (1a00 <system_gclk_chan_enable+0x2c>)
    19ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19f0:	bd10      	pop	{r4, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	000007b9 	.word	0x000007b9
    19f8:	40000c02 	.word	0x40000c02
    19fc:	40000c00 	.word	0x40000c00
    1a00:	000007f9 	.word	0x000007f9

00001a04 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a04:	b510      	push	{r4, lr}
    1a06:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a08:	4b0f      	ldr	r3, [pc, #60]	; (1a48 <system_gclk_chan_disable+0x44>)
    1a0a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a0c:	4b0f      	ldr	r3, [pc, #60]	; (1a4c <system_gclk_chan_disable+0x48>)
    1a0e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a10:	4a0f      	ldr	r2, [pc, #60]	; (1a50 <system_gclk_chan_disable+0x4c>)
    1a12:	8853      	ldrh	r3, [r2, #2]
    1a14:	051b      	lsls	r3, r3, #20
    1a16:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1a18:	8853      	ldrh	r3, [r2, #2]
    1a1a:	490e      	ldr	r1, [pc, #56]	; (1a54 <system_gclk_chan_disable+0x50>)
    1a1c:	400b      	ands	r3, r1
    1a1e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a20:	8853      	ldrh	r3, [r2, #2]
    1a22:	490d      	ldr	r1, [pc, #52]	; (1a58 <system_gclk_chan_disable+0x54>)
    1a24:	400b      	ands	r3, r1
    1a26:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1a28:	0011      	movs	r1, r2
    1a2a:	2280      	movs	r2, #128	; 0x80
    1a2c:	01d2      	lsls	r2, r2, #7
    1a2e:	884b      	ldrh	r3, [r1, #2]
    1a30:	4213      	tst	r3, r2
    1a32:	d1fc      	bne.n	1a2e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1a34:	4906      	ldr	r1, [pc, #24]	; (1a50 <system_gclk_chan_disable+0x4c>)
    1a36:	884a      	ldrh	r2, [r1, #2]
    1a38:	0203      	lsls	r3, r0, #8
    1a3a:	4806      	ldr	r0, [pc, #24]	; (1a54 <system_gclk_chan_disable+0x50>)
    1a3c:	4002      	ands	r2, r0
    1a3e:	4313      	orrs	r3, r2
    1a40:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1a42:	4b06      	ldr	r3, [pc, #24]	; (1a5c <system_gclk_chan_disable+0x58>)
    1a44:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a46:	bd10      	pop	{r4, pc}
    1a48:	000007b9 	.word	0x000007b9
    1a4c:	40000c02 	.word	0x40000c02
    1a50:	40000c00 	.word	0x40000c00
    1a54:	fffff0ff 	.word	0xfffff0ff
    1a58:	ffffbfff 	.word	0xffffbfff
    1a5c:	000007f9 	.word	0x000007f9

00001a60 <system_gclk_chan_set_config>:
{
    1a60:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a62:	780c      	ldrb	r4, [r1, #0]
    1a64:	0224      	lsls	r4, r4, #8
    1a66:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a68:	4b02      	ldr	r3, [pc, #8]	; (1a74 <system_gclk_chan_set_config+0x14>)
    1a6a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a6c:	b2a4      	uxth	r4, r4
    1a6e:	4b02      	ldr	r3, [pc, #8]	; (1a78 <system_gclk_chan_set_config+0x18>)
    1a70:	805c      	strh	r4, [r3, #2]
}
    1a72:	bd10      	pop	{r4, pc}
    1a74:	00001a05 	.word	0x00001a05
    1a78:	40000c00 	.word	0x40000c00

00001a7c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a7c:	b510      	push	{r4, lr}
    1a7e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a80:	4b06      	ldr	r3, [pc, #24]	; (1a9c <system_gclk_chan_get_hz+0x20>)
    1a82:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a84:	4b06      	ldr	r3, [pc, #24]	; (1aa0 <system_gclk_chan_get_hz+0x24>)
    1a86:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1a88:	4b06      	ldr	r3, [pc, #24]	; (1aa4 <system_gclk_chan_get_hz+0x28>)
    1a8a:	885c      	ldrh	r4, [r3, #2]
    1a8c:	0524      	lsls	r4, r4, #20
    1a8e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1a90:	4b05      	ldr	r3, [pc, #20]	; (1aa8 <system_gclk_chan_get_hz+0x2c>)
    1a92:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a94:	0020      	movs	r0, r4
    1a96:	4b05      	ldr	r3, [pc, #20]	; (1aac <system_gclk_chan_get_hz+0x30>)
    1a98:	4798      	blx	r3
}
    1a9a:	bd10      	pop	{r4, pc}
    1a9c:	000007b9 	.word	0x000007b9
    1aa0:	40000c02 	.word	0x40000c02
    1aa4:	40000c00 	.word	0x40000c00
    1aa8:	000007f9 	.word	0x000007f9
    1aac:	00001949 	.word	0x00001949

00001ab0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1ab0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1ab2:	78d3      	ldrb	r3, [r2, #3]
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d135      	bne.n	1b24 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ab8:	7813      	ldrb	r3, [r2, #0]
    1aba:	2b80      	cmp	r3, #128	; 0x80
    1abc:	d029      	beq.n	1b12 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1abe:	061b      	lsls	r3, r3, #24
    1ac0:	2480      	movs	r4, #128	; 0x80
    1ac2:	0264      	lsls	r4, r4, #9
    1ac4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ac6:	7854      	ldrb	r4, [r2, #1]
    1ac8:	2502      	movs	r5, #2
    1aca:	43ac      	bics	r4, r5
    1acc:	d106      	bne.n	1adc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1ace:	7894      	ldrb	r4, [r2, #2]
    1ad0:	2c00      	cmp	r4, #0
    1ad2:	d120      	bne.n	1b16 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ad4:	2480      	movs	r4, #128	; 0x80
    1ad6:	02a4      	lsls	r4, r4, #10
    1ad8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1ada:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1adc:	7854      	ldrb	r4, [r2, #1]
    1ade:	3c01      	subs	r4, #1
    1ae0:	2c01      	cmp	r4, #1
    1ae2:	d91c      	bls.n	1b1e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ae4:	040d      	lsls	r5, r1, #16
    1ae6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ae8:	24a0      	movs	r4, #160	; 0xa0
    1aea:	05e4      	lsls	r4, r4, #23
    1aec:	432c      	orrs	r4, r5
    1aee:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1af0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1af2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1af4:	24d0      	movs	r4, #208	; 0xd0
    1af6:	0624      	lsls	r4, r4, #24
    1af8:	432c      	orrs	r4, r5
    1afa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1afc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1afe:	78d4      	ldrb	r4, [r2, #3]
    1b00:	2c00      	cmp	r4, #0
    1b02:	d122      	bne.n	1b4a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b04:	035b      	lsls	r3, r3, #13
    1b06:	d51c      	bpl.n	1b42 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b08:	7893      	ldrb	r3, [r2, #2]
    1b0a:	2b01      	cmp	r3, #1
    1b0c:	d01e      	beq.n	1b4c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1b0e:	6141      	str	r1, [r0, #20]
    1b10:	e017      	b.n	1b42 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1b12:	2300      	movs	r3, #0
    1b14:	e7d7      	b.n	1ac6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b16:	24c0      	movs	r4, #192	; 0xc0
    1b18:	02e4      	lsls	r4, r4, #11
    1b1a:	4323      	orrs	r3, r4
    1b1c:	e7dd      	b.n	1ada <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b1e:	4c0d      	ldr	r4, [pc, #52]	; (1b54 <_system_pinmux_config+0xa4>)
    1b20:	4023      	ands	r3, r4
    1b22:	e7df      	b.n	1ae4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1b24:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b26:	040c      	lsls	r4, r1, #16
    1b28:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b2a:	23a0      	movs	r3, #160	; 0xa0
    1b2c:	05db      	lsls	r3, r3, #23
    1b2e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b30:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b32:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b34:	23d0      	movs	r3, #208	; 0xd0
    1b36:	061b      	lsls	r3, r3, #24
    1b38:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b3a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1b3c:	78d3      	ldrb	r3, [r2, #3]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d103      	bne.n	1b4a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b42:	7853      	ldrb	r3, [r2, #1]
    1b44:	3b01      	subs	r3, #1
    1b46:	2b01      	cmp	r3, #1
    1b48:	d902      	bls.n	1b50 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1b4a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1b4c:	6181      	str	r1, [r0, #24]
    1b4e:	e7f8      	b.n	1b42 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1b50:	6081      	str	r1, [r0, #8]
}
    1b52:	e7fa      	b.n	1b4a <_system_pinmux_config+0x9a>
    1b54:	fffbffff 	.word	0xfffbffff

00001b58 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b58:	b510      	push	{r4, lr}
    1b5a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b5c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b5e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b60:	2900      	cmp	r1, #0
    1b62:	d104      	bne.n	1b6e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1b64:	0943      	lsrs	r3, r0, #5
    1b66:	01db      	lsls	r3, r3, #7
    1b68:	4905      	ldr	r1, [pc, #20]	; (1b80 <system_pinmux_pin_set_config+0x28>)
    1b6a:	468c      	mov	ip, r1
    1b6c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1b6e:	241f      	movs	r4, #31
    1b70:	4020      	ands	r0, r4
    1b72:	2101      	movs	r1, #1
    1b74:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1b76:	0018      	movs	r0, r3
    1b78:	4b02      	ldr	r3, [pc, #8]	; (1b84 <system_pinmux_pin_set_config+0x2c>)
    1b7a:	4798      	blx	r3
}
    1b7c:	bd10      	pop	{r4, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	41004400 	.word	0x41004400
    1b84:	00001ab1 	.word	0x00001ab1

00001b88 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1b88:	4770      	bx	lr
	...

00001b8c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1b8c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1b8e:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <system_init+0x18>)
    1b90:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1b92:	4b05      	ldr	r3, [pc, #20]	; (1ba8 <system_init+0x1c>)
    1b94:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1b96:	4b05      	ldr	r3, [pc, #20]	; (1bac <system_init+0x20>)
    1b98:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1b9a:	4b05      	ldr	r3, [pc, #20]	; (1bb0 <system_init+0x24>)
    1b9c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1b9e:	4b05      	ldr	r3, [pc, #20]	; (1bb4 <system_init+0x28>)
    1ba0:	4798      	blx	r3
}
    1ba2:	bd10      	pop	{r4, pc}
    1ba4:	00001779 	.word	0x00001779
    1ba8:	00000829 	.word	0x00000829
    1bac:	00001b89 	.word	0x00001b89
    1bb0:	00001b89 	.word	0x00001b89
    1bb4:	00001b89 	.word	0x00001b89

00001bb8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1bb8:	e7fe      	b.n	1bb8 <Dummy_Handler>
	...

00001bbc <Reset_Handler>:
{
    1bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1bbe:	4a2a      	ldr	r2, [pc, #168]	; (1c68 <Reset_Handler+0xac>)
    1bc0:	4b2a      	ldr	r3, [pc, #168]	; (1c6c <Reset_Handler+0xb0>)
    1bc2:	429a      	cmp	r2, r3
    1bc4:	d011      	beq.n	1bea <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1bc6:	001a      	movs	r2, r3
    1bc8:	4b29      	ldr	r3, [pc, #164]	; (1c70 <Reset_Handler+0xb4>)
    1bca:	429a      	cmp	r2, r3
    1bcc:	d20d      	bcs.n	1bea <Reset_Handler+0x2e>
    1bce:	4a29      	ldr	r2, [pc, #164]	; (1c74 <Reset_Handler+0xb8>)
    1bd0:	3303      	adds	r3, #3
    1bd2:	1a9b      	subs	r3, r3, r2
    1bd4:	089b      	lsrs	r3, r3, #2
    1bd6:	3301      	adds	r3, #1
    1bd8:	009b      	lsls	r3, r3, #2
    1bda:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1bdc:	4823      	ldr	r0, [pc, #140]	; (1c6c <Reset_Handler+0xb0>)
    1bde:	4922      	ldr	r1, [pc, #136]	; (1c68 <Reset_Handler+0xac>)
    1be0:	588c      	ldr	r4, [r1, r2]
    1be2:	5084      	str	r4, [r0, r2]
    1be4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1be6:	429a      	cmp	r2, r3
    1be8:	d1fa      	bne.n	1be0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1bea:	4a23      	ldr	r2, [pc, #140]	; (1c78 <Reset_Handler+0xbc>)
    1bec:	4b23      	ldr	r3, [pc, #140]	; (1c7c <Reset_Handler+0xc0>)
    1bee:	429a      	cmp	r2, r3
    1bf0:	d20a      	bcs.n	1c08 <Reset_Handler+0x4c>
    1bf2:	43d3      	mvns	r3, r2
    1bf4:	4921      	ldr	r1, [pc, #132]	; (1c7c <Reset_Handler+0xc0>)
    1bf6:	185b      	adds	r3, r3, r1
    1bf8:	2103      	movs	r1, #3
    1bfa:	438b      	bics	r3, r1
    1bfc:	3304      	adds	r3, #4
    1bfe:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1c00:	2100      	movs	r1, #0
    1c02:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1c04:	4293      	cmp	r3, r2
    1c06:	d1fc      	bne.n	1c02 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c08:	4a1d      	ldr	r2, [pc, #116]	; (1c80 <Reset_Handler+0xc4>)
    1c0a:	21ff      	movs	r1, #255	; 0xff
    1c0c:	4b1d      	ldr	r3, [pc, #116]	; (1c84 <Reset_Handler+0xc8>)
    1c0e:	438b      	bics	r3, r1
    1c10:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c12:	39fd      	subs	r1, #253	; 0xfd
    1c14:	2390      	movs	r3, #144	; 0x90
    1c16:	005b      	lsls	r3, r3, #1
    1c18:	4a1b      	ldr	r2, [pc, #108]	; (1c88 <Reset_Handler+0xcc>)
    1c1a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1c1c:	4a1b      	ldr	r2, [pc, #108]	; (1c8c <Reset_Handler+0xd0>)
    1c1e:	78d3      	ldrb	r3, [r2, #3]
    1c20:	2503      	movs	r5, #3
    1c22:	43ab      	bics	r3, r5
    1c24:	2402      	movs	r4, #2
    1c26:	4323      	orrs	r3, r4
    1c28:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1c2a:	78d3      	ldrb	r3, [r2, #3]
    1c2c:	270c      	movs	r7, #12
    1c2e:	43bb      	bics	r3, r7
    1c30:	2608      	movs	r6, #8
    1c32:	4333      	orrs	r3, r6
    1c34:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1c36:	4b16      	ldr	r3, [pc, #88]	; (1c90 <Reset_Handler+0xd4>)
    1c38:	7b98      	ldrb	r0, [r3, #14]
    1c3a:	2230      	movs	r2, #48	; 0x30
    1c3c:	4390      	bics	r0, r2
    1c3e:	2220      	movs	r2, #32
    1c40:	4310      	orrs	r0, r2
    1c42:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1c44:	7b99      	ldrb	r1, [r3, #14]
    1c46:	43b9      	bics	r1, r7
    1c48:	4331      	orrs	r1, r6
    1c4a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1c4c:	7b9a      	ldrb	r2, [r3, #14]
    1c4e:	43aa      	bics	r2, r5
    1c50:	4322      	orrs	r2, r4
    1c52:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c54:	4a0f      	ldr	r2, [pc, #60]	; (1c94 <Reset_Handler+0xd8>)
    1c56:	6853      	ldr	r3, [r2, #4]
    1c58:	2180      	movs	r1, #128	; 0x80
    1c5a:	430b      	orrs	r3, r1
    1c5c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1c5e:	4b0e      	ldr	r3, [pc, #56]	; (1c98 <Reset_Handler+0xdc>)
    1c60:	4798      	blx	r3
        main();
    1c62:	4b0e      	ldr	r3, [pc, #56]	; (1c9c <Reset_Handler+0xe0>)
    1c64:	4798      	blx	r3
    1c66:	e7fe      	b.n	1c66 <Reset_Handler+0xaa>
    1c68:	00003c8c 	.word	0x00003c8c
    1c6c:	20000000 	.word	0x20000000
    1c70:	2000000c 	.word	0x2000000c
    1c74:	20000004 	.word	0x20000004
    1c78:	2000000c 	.word	0x2000000c
    1c7c:	200000f4 	.word	0x200000f4
    1c80:	e000ed00 	.word	0xe000ed00
    1c84:	00000000 	.word	0x00000000
    1c88:	41007000 	.word	0x41007000
    1c8c:	41005000 	.word	0x41005000
    1c90:	41004800 	.word	0x41004800
    1c94:	41004000 	.word	0x41004000
    1c98:	00003a31 	.word	0x00003a31
    1c9c:	00001e8d 	.word	0x00001e8d

00001ca0 <usart_write_callback>:
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
void usart_write_callback(struct usart_module *const usart_module)
{
	
}
    1ca0:	4770      	bx	lr
	...

00001ca4 <usart_read_callback>:
{
    1ca4:	b510      	push	{r4, lr}
	usart_write_buffer_job(&usart_instance,
    1ca6:	2205      	movs	r2, #5
    1ca8:	4902      	ldr	r1, [pc, #8]	; (1cb4 <usart_read_callback+0x10>)
    1caa:	4803      	ldr	r0, [pc, #12]	; (1cb8 <usart_read_callback+0x14>)
    1cac:	4b03      	ldr	r3, [pc, #12]	; (1cbc <usart_read_callback+0x18>)
    1cae:	4798      	blx	r3
}
    1cb0:	bd10      	pop	{r4, pc}
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	200000bc 	.word	0x200000bc
    1cb8:	20000088 	.word	0x20000088
    1cbc:	00000605 	.word	0x00000605

00001cc0 <configure_port_pins>:
{
    1cc0:	b570      	push	{r4, r5, r6, lr}
    1cc2:	b082      	sub	sp, #8
	config->direction  = PORT_PIN_DIR_INPUT;
    1cc4:	ac01      	add	r4, sp, #4
    1cc6:	2300      	movs	r3, #0
    1cc8:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1cca:	2601      	movs	r6, #1
    1ccc:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    1cce:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(BUTTON_0_PIN, &config_port_pin);
    1cd0:	0021      	movs	r1, r4
    1cd2:	200f      	movs	r0, #15
    1cd4:	4d03      	ldr	r5, [pc, #12]	; (1ce4 <configure_port_pins+0x24>)
    1cd6:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1cd8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    1cda:	0021      	movs	r1, r4
    1cdc:	203e      	movs	r0, #62	; 0x3e
    1cde:	47a8      	blx	r5
}
    1ce0:	b002      	add	sp, #8
    1ce2:	bd70      	pop	{r4, r5, r6, pc}
    1ce4:	00000861 	.word	0x00000861

00001ce8 <configure_i2c_master>:
{
    1ce8:	b530      	push	{r4, r5, lr}
    1cea:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1cec:	aa01      	add	r2, sp, #4
    1cee:	2364      	movs	r3, #100	; 0x64
    1cf0:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1cf2:	4b21      	ldr	r3, [pc, #132]	; (1d78 <configure_i2c_master+0x90>)
    1cf4:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1cf6:	2300      	movs	r3, #0
    1cf8:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1cfa:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    1cfc:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1cfe:	2180      	movs	r1, #128	; 0x80
    1d00:	0389      	lsls	r1, r1, #14
    1d02:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1d04:	2101      	movs	r1, #1
    1d06:	4249      	negs	r1, r1
    1d08:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1d0a:	3125      	adds	r1, #37	; 0x25
    1d0c:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1d0e:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1d10:	3108      	adds	r1, #8
    1d12:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1d14:	3101      	adds	r1, #1
    1d16:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    1d18:	3101      	adds	r1, #1
    1d1a:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1d1c:	33d7      	adds	r3, #215	; 0xd7
    1d1e:	8613      	strh	r3, [r2, #48]	; 0x30
	config_i2c_master.buffer_timeout = 10000;
    1d20:	4b16      	ldr	r3, [pc, #88]	; (1d7c <configure_i2c_master+0x94>)
    1d22:	82d3      	strh	r3, [r2, #22]
	config_i2c_master.pinmux_pad0 = EXT2_I2C_SERCOM_PINMUX_PAD0;
    1d24:	4b16      	ldr	r3, [pc, #88]	; (1d80 <configure_i2c_master+0x98>)
    1d26:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = EXT2_I2C_SERCOM_PINMUX_PAD1;
    1d28:	4b16      	ldr	r3, [pc, #88]	; (1d84 <configure_i2c_master+0x9c>)
    1d2a:	6213      	str	r3, [r2, #32]
	i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master);
    1d2c:	4c16      	ldr	r4, [pc, #88]	; (1d88 <configure_i2c_master+0xa0>)
    1d2e:	4917      	ldr	r1, [pc, #92]	; (1d8c <configure_i2c_master+0xa4>)
    1d30:	0020      	movs	r0, r4
    1d32:	4b17      	ldr	r3, [pc, #92]	; (1d90 <configure_i2c_master+0xa8>)
    1d34:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1d36:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1d38:	2207      	movs	r2, #7
    1d3a:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    1d3c:	421a      	tst	r2, r3
    1d3e:	d1fc      	bne.n	1d3a <configure_i2c_master+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1d40:	6823      	ldr	r3, [r4, #0]
    1d42:	2202      	movs	r2, #2
    1d44:	4313      	orrs	r3, r2
    1d46:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1d48:	4d0f      	ldr	r5, [pc, #60]	; (1d88 <configure_i2c_master+0xa0>)
    1d4a:	6828      	ldr	r0, [r5, #0]
    1d4c:	4b11      	ldr	r3, [pc, #68]	; (1d94 <configure_i2c_master+0xac>)
    1d4e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1d50:	231f      	movs	r3, #31
    1d52:	4018      	ands	r0, r3
    1d54:	3b1e      	subs	r3, #30
    1d56:	4083      	lsls	r3, r0
    1d58:	4a0f      	ldr	r2, [pc, #60]	; (1d98 <configure_i2c_master+0xb0>)
    1d5a:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1d5c:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1d5e:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1d60:	2110      	movs	r1, #16
    1d62:	8b62      	ldrh	r2, [r4, #26]
    1d64:	420a      	tst	r2, r1
    1d66:	d104      	bne.n	1d72 <configure_i2c_master+0x8a>
		timeout_counter++;
    1d68:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1d6a:	4283      	cmp	r3, r0
    1d6c:	d3f9      	bcc.n	1d62 <configure_i2c_master+0x7a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1d6e:	2310      	movs	r3, #16
    1d70:	8363      	strh	r3, [r4, #26]
}
    1d72:	b00f      	add	sp, #60	; 0x3c
    1d74:	bd30      	pop	{r4, r5, pc}
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	00000d48 	.word	0x00000d48
    1d7c:	00002710 	.word	0x00002710
    1d80:	00080003 	.word	0x00080003
    1d84:	00090003 	.word	0x00090003
    1d88:	200000c4 	.word	0x200000c4
    1d8c:	42001000 	.word	0x42001000
    1d90:	00000891 	.word	0x00000891
    1d94:	00001575 	.word	0x00001575
    1d98:	e000e100 	.word	0xe000e100

00001d9c <configure_usart>:
void configure_usart(void)
{
    1d9c:	b530      	push	{r4, r5, lr}
    1d9e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1da0:	2380      	movs	r3, #128	; 0x80
    1da2:	05db      	lsls	r3, r3, #23
    1da4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1da6:	2300      	movs	r3, #0
    1da8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1daa:	22ff      	movs	r2, #255	; 0xff
    1dac:	4669      	mov	r1, sp
    1dae:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1db0:	2200      	movs	r2, #0
    1db2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1db4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1db6:	2196      	movs	r1, #150	; 0x96
    1db8:	0189      	lsls	r1, r1, #6
    1dba:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1dbc:	2101      	movs	r1, #1
    1dbe:	2024      	movs	r0, #36	; 0x24
    1dc0:	466c      	mov	r4, sp
    1dc2:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1dc4:	3001      	adds	r0, #1
    1dc6:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1dc8:	3125      	adds	r1, #37	; 0x25
    1dca:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1dcc:	3101      	adds	r1, #1
    1dce:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1dd0:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1dd2:	3105      	adds	r1, #5
    1dd4:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1dd6:	3101      	adds	r1, #1
    1dd8:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1dda:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1ddc:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1dde:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1de0:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1de2:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1de4:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1de6:	2313      	movs	r3, #19
    1de8:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1dea:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = 9600;
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1dec:	2380      	movs	r3, #128	; 0x80
    1dee:	035b      	lsls	r3, r3, #13
    1df0:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1df2:	4b12      	ldr	r3, [pc, #72]	; (1e3c <configure_usart+0xa0>)
    1df4:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1df6:	4b12      	ldr	r3, [pc, #72]	; (1e40 <configure_usart+0xa4>)
    1df8:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1dfa:	2301      	movs	r3, #1
    1dfc:	425b      	negs	r3, r3
    1dfe:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1e00:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    1e02:	4d10      	ldr	r5, [pc, #64]	; (1e44 <configure_usart+0xa8>)
    1e04:	4c10      	ldr	r4, [pc, #64]	; (1e48 <configure_usart+0xac>)
    1e06:	466a      	mov	r2, sp
    1e08:	4910      	ldr	r1, [pc, #64]	; (1e4c <configure_usart+0xb0>)
    1e0a:	0028      	movs	r0, r5
    1e0c:	47a0      	blx	r4
    1e0e:	2800      	cmp	r0, #0
    1e10:	d1f9      	bne.n	1e06 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e12:	4d0c      	ldr	r5, [pc, #48]	; (1e44 <configure_usart+0xa8>)
    1e14:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1e16:	0020      	movs	r0, r4
    1e18:	4b0d      	ldr	r3, [pc, #52]	; (1e50 <configure_usart+0xb4>)
    1e1a:	4798      	blx	r3
    1e1c:	231f      	movs	r3, #31
    1e1e:	4018      	ands	r0, r3
    1e20:	3b1e      	subs	r3, #30
    1e22:	4083      	lsls	r3, r0
    1e24:	4a0b      	ldr	r2, [pc, #44]	; (1e54 <configure_usart+0xb8>)
    1e26:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e28:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e2a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d1fc      	bne.n	1e2a <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1e30:	6823      	ldr	r3, [r4, #0]
    1e32:	2202      	movs	r2, #2
    1e34:	4313      	orrs	r3, r2
    1e36:	6023      	str	r3, [r4, #0]
	EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	}
	usart_enable(&usart_instance);
}
    1e38:	b011      	add	sp, #68	; 0x44
    1e3a:	bd30      	pop	{r4, r5, pc}
    1e3c:	00160002 	.word	0x00160002
    1e40:	00170002 	.word	0x00170002
    1e44:	20000088 	.word	0x20000088
    1e48:	00000181 	.word	0x00000181
    1e4c:	42001400 	.word	0x42001400
    1e50:	00001575 	.word	0x00001575
    1e54:	e000e100 	.word	0xe000e100

00001e58 <configure_usart_callbacks>:
void configure_usart_callbacks(void)
{
    1e58:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance,
    1e5a:	4c08      	ldr	r4, [pc, #32]	; (1e7c <configure_usart_callbacks+0x24>)
    1e5c:	2200      	movs	r2, #0
    1e5e:	4908      	ldr	r1, [pc, #32]	; (1e80 <configure_usart_callbacks+0x28>)
    1e60:	0020      	movs	r0, r4
    1e62:	4d08      	ldr	r5, [pc, #32]	; (1e84 <configure_usart_callbacks+0x2c>)
    1e64:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    1e66:	2201      	movs	r2, #1
    1e68:	4907      	ldr	r1, [pc, #28]	; (1e88 <configure_usart_callbacks+0x30>)
    1e6a:	0020      	movs	r0, r4
    1e6c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1e6e:	2231      	movs	r2, #49	; 0x31
    1e70:	5ca3      	ldrb	r3, [r4, r2]
    1e72:	2103      	movs	r1, #3
    1e74:	430b      	orrs	r3, r1
    1e76:	54a3      	strb	r3, [r4, r2]
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    1e78:	bd70      	pop	{r4, r5, r6, pc}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	20000088 	.word	0x20000088
    1e80:	00001ca1 	.word	0x00001ca1
    1e84:	000005ed 	.word	0x000005ed
    1e88:	00001ca5 	.word	0x00001ca5

00001e8c <main>:


int main (void)
{
    1e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e8e:	b089      	sub	sp, #36	; 0x24
	system_init();
    1e90:	4b3d      	ldr	r3, [pc, #244]	; (1f88 <main+0xfc>)
    1e92:	4798      	blx	r3
	configure_i2c_master();
    1e94:	4b3d      	ldr	r3, [pc, #244]	; (1f8c <main+0x100>)
    1e96:	4798      	blx	r3
	configure_port_pins();
    1e98:	4b3d      	ldr	r3, [pc, #244]	; (1f90 <main+0x104>)
    1e9a:	4798      	blx	r3
	delay_init();
    1e9c:	4b3d      	ldr	r3, [pc, #244]	; (1f94 <main+0x108>)
    1e9e:	4798      	blx	r3
	configure_usart();
    1ea0:	4b3d      	ldr	r3, [pc, #244]	; (1f98 <main+0x10c>)
    1ea2:	4798      	blx	r3
	configure_usart_callbacks();
    1ea4:	4b3d      	ldr	r3, [pc, #244]	; (1f9c <main+0x110>)
    1ea6:	4798      	blx	r3
	cpu_irq_enable();
    1ea8:	2201      	movs	r2, #1
    1eaa:	4b3d      	ldr	r3, [pc, #244]	; (1fa0 <main+0x114>)
    1eac:	701a      	strb	r2, [r3, #0]
    1eae:	f3bf 8f5f 	dmb	sy
    1eb2:	b662      	cpsie	i
	system_interrupt_enable_global();
	uint8_t string[] = "Hello World!\r\n";
    1eb4:	a904      	add	r1, sp, #16
    1eb6:	4b3b      	ldr	r3, [pc, #236]	; (1fa4 <main+0x118>)
    1eb8:	000a      	movs	r2, r1
    1eba:	cb31      	ldmia	r3!, {r0, r4, r5}
    1ebc:	c231      	stmia	r2!, {r0, r4, r5}
    1ebe:	8818      	ldrh	r0, [r3, #0]
    1ec0:	8010      	strh	r0, [r2, #0]
    1ec2:	789b      	ldrb	r3, [r3, #2]
    1ec4:	7093      	strb	r3, [r2, #2]
	usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    1ec6:	220f      	movs	r2, #15
    1ec8:	4837      	ldr	r0, [pc, #220]	; (1fa8 <main+0x11c>)
    1eca:	4b38      	ldr	r3, [pc, #224]	; (1fac <main+0x120>)
    1ecc:	4798      	blx	r3
		.data        = write_buffer,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	struct i2c_master_packet packet_random = {
    1ece:	aa01      	add	r2, sp, #4
    1ed0:	4b37      	ldr	r3, [pc, #220]	; (1fb0 <main+0x124>)
    1ed2:	cb13      	ldmia	r3!, {r0, r1, r4}
    1ed4:	c213      	stmia	r2!, {r0, r1, r4}
	uint16_t timeout = 0;
    1ed6:	2500      	movs	r5, #0
			delay_s(1);
			
			*/
			
			while(1){
			tempstatus = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet_random);
    1ed8:	4f36      	ldr	r7, [pc, #216]	; (1fb4 <main+0x128>)
    1eda:	e02d      	b.n	1f38 <main+0xac>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1edc:	2280      	movs	r2, #128	; 0x80
    1ede:	05d2      	lsls	r2, r2, #23
    1ee0:	4b35      	ldr	r3, [pc, #212]	; (1fb8 <main+0x12c>)
    1ee2:	615a      	str	r2, [r3, #20]
				if (timeout++ == TIMEOUT) {
					port_pin_set_output_level(LED_0_PIN, false);
					break;
				}
			}
			delay_ms(1);
    1ee4:	2001      	movs	r0, #1
    1ee6:	4b35      	ldr	r3, [pc, #212]	; (1fbc <main+0x130>)
    1ee8:	4798      	blx	r3
			
		    packet_random.data = read_buffer;
    1eea:	4b35      	ldr	r3, [pc, #212]	; (1fc0 <main+0x134>)
    1eec:	9302      	str	r3, [sp, #8]
			tempstatus = i2c_master_read_packet_wait(&i2c_master_instance, &packet_random);
    1eee:	a901      	add	r1, sp, #4
    1ef0:	4834      	ldr	r0, [pc, #208]	; (1fc4 <main+0x138>)
    1ef2:	4b35      	ldr	r3, [pc, #212]	; (1fc8 <main+0x13c>)
    1ef4:	4798      	blx	r3
    1ef6:	4a35      	ldr	r2, [pc, #212]	; (1fcc <main+0x140>)
    1ef8:	7010      	strb	r0, [r2, #0]
		    while (tempstatus != STATUS_OK) {
    1efa:	2800      	cmp	r0, #0
    1efc:	d02f      	beq.n	1f5e <main+0xd2>
			    if (timeout++ == 10000) {
    1efe:	4b34      	ldr	r3, [pc, #208]	; (1fd0 <main+0x144>)
    1f00:	4a34      	ldr	r2, [pc, #208]	; (1fd4 <main+0x148>)
    1f02:	3301      	adds	r3, #1
    1f04:	b29b      	uxth	r3, r3
    1f06:	4293      	cmp	r3, r2
    1f08:	d1fb      	bne.n	1f02 <main+0x76>
    1f0a:	2180      	movs	r1, #128	; 0x80
    1f0c:	05c9      	lsls	r1, r1, #23
    1f0e:	4a2a      	ldr	r2, [pc, #168]	; (1fb8 <main+0x12c>)
    1f10:	6151      	str	r1, [r2, #20]
    1f12:	001d      	movs	r5, r3
					port_pin_set_output_level(LED_0_PIN, false);
				    break;
			    }
		    }

			itoa(tempstatus,snum,16);
    1f14:	4e30      	ldr	r6, [pc, #192]	; (1fd8 <main+0x14c>)
    1f16:	2210      	movs	r2, #16
    1f18:	0031      	movs	r1, r6
    1f1a:	4b30      	ldr	r3, [pc, #192]	; (1fdc <main+0x150>)
    1f1c:	4798      	blx	r3
			strcat(snum,"\n");
    1f1e:	0030      	movs	r0, r6
    1f20:	4b2f      	ldr	r3, [pc, #188]	; (1fe0 <main+0x154>)
    1f22:	4798      	blx	r3
    1f24:	1980      	adds	r0, r0, r6
    1f26:	2202      	movs	r2, #2
    1f28:	492e      	ldr	r1, [pc, #184]	; (1fe4 <main+0x158>)
    1f2a:	4b2f      	ldr	r3, [pc, #188]	; (1fe8 <main+0x15c>)
    1f2c:	4798      	blx	r3
			usart_write_buffer_wait(&usart_instance, snum, sizeof(snum));
    1f2e:	2205      	movs	r2, #5
    1f30:	0031      	movs	r1, r6
    1f32:	481d      	ldr	r0, [pc, #116]	; (1fa8 <main+0x11c>)
    1f34:	4b1d      	ldr	r3, [pc, #116]	; (1fac <main+0x120>)
    1f36:	4798      	blx	r3
			tempstatus = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet_random);
    1f38:	a901      	add	r1, sp, #4
    1f3a:	4822      	ldr	r0, [pc, #136]	; (1fc4 <main+0x138>)
    1f3c:	47b8      	blx	r7
    1f3e:	4b23      	ldr	r3, [pc, #140]	; (1fcc <main+0x140>)
    1f40:	7018      	strb	r0, [r3, #0]
			while (i2c_master_write_packet_wait(&i2c_master_instance, &packet_random) != STATUS_OK) {
    1f42:	4e20      	ldr	r6, [pc, #128]	; (1fc4 <main+0x138>)
    1f44:	4c29      	ldr	r4, [pc, #164]	; (1fec <main+0x160>)
    1f46:	a901      	add	r1, sp, #4
    1f48:	0030      	movs	r0, r6
    1f4a:	47a0      	blx	r4
    1f4c:	2800      	cmp	r0, #0
    1f4e:	d008      	beq.n	1f62 <main+0xd6>
				if (timeout++ == TIMEOUT) {
    1f50:	1c6b      	adds	r3, r5, #1
    1f52:	b29b      	uxth	r3, r3
    1f54:	4a26      	ldr	r2, [pc, #152]	; (1ff0 <main+0x164>)
    1f56:	4295      	cmp	r5, r2
    1f58:	d0c0      	beq.n	1edc <main+0x50>
    1f5a:	001d      	movs	r5, r3
    1f5c:	e7f3      	b.n	1f46 <main+0xba>
    1f5e:	4d25      	ldr	r5, [pc, #148]	; (1ff4 <main+0x168>)
    1f60:	e7d8      	b.n	1f14 <main+0x88>
			delay_ms(1);
    1f62:	3001      	adds	r0, #1
    1f64:	4b15      	ldr	r3, [pc, #84]	; (1fbc <main+0x130>)
    1f66:	4798      	blx	r3
		    packet_random.data = read_buffer;
    1f68:	4b15      	ldr	r3, [pc, #84]	; (1fc0 <main+0x134>)
    1f6a:	9302      	str	r3, [sp, #8]
			tempstatus = i2c_master_read_packet_wait(&i2c_master_instance, &packet_random);
    1f6c:	a901      	add	r1, sp, #4
    1f6e:	4815      	ldr	r0, [pc, #84]	; (1fc4 <main+0x138>)
    1f70:	4b15      	ldr	r3, [pc, #84]	; (1fc8 <main+0x13c>)
    1f72:	4798      	blx	r3
    1f74:	4a15      	ldr	r2, [pc, #84]	; (1fcc <main+0x140>)
    1f76:	7010      	strb	r0, [r2, #0]
		    while (tempstatus != STATUS_OK) {
    1f78:	2800      	cmp	r0, #0
    1f7a:	d0cb      	beq.n	1f14 <main+0x88>
			    if (timeout++ == 10000) {
    1f7c:	1c6b      	adds	r3, r5, #1
    1f7e:	b29b      	uxth	r3, r3
    1f80:	4a1d      	ldr	r2, [pc, #116]	; (1ff8 <main+0x16c>)
    1f82:	4295      	cmp	r5, r2
    1f84:	d1bc      	bne.n	1f00 <main+0x74>
    1f86:	e7c0      	b.n	1f0a <main+0x7e>
    1f88:	00001b8d 	.word	0x00001b8d
    1f8c:	00001ce9 	.word	0x00001ce9
    1f90:	00001cc1 	.word	0x00001cc1
    1f94:	00000115 	.word	0x00000115
    1f98:	00001d9d 	.word	0x00001d9d
    1f9c:	00001e59 	.word	0x00001e59
    1fa0:	20000008 	.word	0x20000008
    1fa4:	00003bb4 	.word	0x00003bb4
    1fa8:	20000088 	.word	0x20000088
    1fac:	000004f1 	.word	0x000004f1
    1fb0:	00003ba4 	.word	0x00003ba4
    1fb4:	00000ee1 	.word	0x00000ee1
    1fb8:	41004480 	.word	0x41004480
    1fbc:	00000155 	.word	0x00000155
    1fc0:	20000064 	.word	0x20000064
    1fc4:	200000c4 	.word	0x200000c4
    1fc8:	00000e99 	.word	0x00000e99
    1fcc:	20000068 	.word	0x20000068
    1fd0:	00000bba 	.word	0x00000bba
    1fd4:	00002711 	.word	0x00002711
    1fd8:	200000ec 	.word	0x200000ec
    1fdc:	00003aa9 	.word	0x00003aa9
    1fe0:	00003ac3 	.word	0x00003ac3
    1fe4:	00003bb0 	.word	0x00003bb0
    1fe8:	00003ab1 	.word	0x00003ab1
    1fec:	00000ebd 	.word	0x00000ebd
    1ff0:	00000bb8 	.word	0x00000bb8
    1ff4:	00000bb9 	.word	0x00000bb9
    1ff8:	00002710 	.word	0x00002710

00001ffc <__udivsi3>:
    1ffc:	2200      	movs	r2, #0
    1ffe:	0843      	lsrs	r3, r0, #1
    2000:	428b      	cmp	r3, r1
    2002:	d374      	bcc.n	20ee <STACK_SIZE+0xee>
    2004:	0903      	lsrs	r3, r0, #4
    2006:	428b      	cmp	r3, r1
    2008:	d35f      	bcc.n	20ca <STACK_SIZE+0xca>
    200a:	0a03      	lsrs	r3, r0, #8
    200c:	428b      	cmp	r3, r1
    200e:	d344      	bcc.n	209a <STACK_SIZE+0x9a>
    2010:	0b03      	lsrs	r3, r0, #12
    2012:	428b      	cmp	r3, r1
    2014:	d328      	bcc.n	2068 <STACK_SIZE+0x68>
    2016:	0c03      	lsrs	r3, r0, #16
    2018:	428b      	cmp	r3, r1
    201a:	d30d      	bcc.n	2038 <STACK_SIZE+0x38>
    201c:	22ff      	movs	r2, #255	; 0xff
    201e:	0209      	lsls	r1, r1, #8
    2020:	ba12      	rev	r2, r2
    2022:	0c03      	lsrs	r3, r0, #16
    2024:	428b      	cmp	r3, r1
    2026:	d302      	bcc.n	202e <STACK_SIZE+0x2e>
    2028:	1212      	asrs	r2, r2, #8
    202a:	0209      	lsls	r1, r1, #8
    202c:	d065      	beq.n	20fa <STACK_SIZE+0xfa>
    202e:	0b03      	lsrs	r3, r0, #12
    2030:	428b      	cmp	r3, r1
    2032:	d319      	bcc.n	2068 <STACK_SIZE+0x68>
    2034:	e000      	b.n	2038 <STACK_SIZE+0x38>
    2036:	0a09      	lsrs	r1, r1, #8
    2038:	0bc3      	lsrs	r3, r0, #15
    203a:	428b      	cmp	r3, r1
    203c:	d301      	bcc.n	2042 <STACK_SIZE+0x42>
    203e:	03cb      	lsls	r3, r1, #15
    2040:	1ac0      	subs	r0, r0, r3
    2042:	4152      	adcs	r2, r2
    2044:	0b83      	lsrs	r3, r0, #14
    2046:	428b      	cmp	r3, r1
    2048:	d301      	bcc.n	204e <STACK_SIZE+0x4e>
    204a:	038b      	lsls	r3, r1, #14
    204c:	1ac0      	subs	r0, r0, r3
    204e:	4152      	adcs	r2, r2
    2050:	0b43      	lsrs	r3, r0, #13
    2052:	428b      	cmp	r3, r1
    2054:	d301      	bcc.n	205a <STACK_SIZE+0x5a>
    2056:	034b      	lsls	r3, r1, #13
    2058:	1ac0      	subs	r0, r0, r3
    205a:	4152      	adcs	r2, r2
    205c:	0b03      	lsrs	r3, r0, #12
    205e:	428b      	cmp	r3, r1
    2060:	d301      	bcc.n	2066 <STACK_SIZE+0x66>
    2062:	030b      	lsls	r3, r1, #12
    2064:	1ac0      	subs	r0, r0, r3
    2066:	4152      	adcs	r2, r2
    2068:	0ac3      	lsrs	r3, r0, #11
    206a:	428b      	cmp	r3, r1
    206c:	d301      	bcc.n	2072 <STACK_SIZE+0x72>
    206e:	02cb      	lsls	r3, r1, #11
    2070:	1ac0      	subs	r0, r0, r3
    2072:	4152      	adcs	r2, r2
    2074:	0a83      	lsrs	r3, r0, #10
    2076:	428b      	cmp	r3, r1
    2078:	d301      	bcc.n	207e <STACK_SIZE+0x7e>
    207a:	028b      	lsls	r3, r1, #10
    207c:	1ac0      	subs	r0, r0, r3
    207e:	4152      	adcs	r2, r2
    2080:	0a43      	lsrs	r3, r0, #9
    2082:	428b      	cmp	r3, r1
    2084:	d301      	bcc.n	208a <STACK_SIZE+0x8a>
    2086:	024b      	lsls	r3, r1, #9
    2088:	1ac0      	subs	r0, r0, r3
    208a:	4152      	adcs	r2, r2
    208c:	0a03      	lsrs	r3, r0, #8
    208e:	428b      	cmp	r3, r1
    2090:	d301      	bcc.n	2096 <STACK_SIZE+0x96>
    2092:	020b      	lsls	r3, r1, #8
    2094:	1ac0      	subs	r0, r0, r3
    2096:	4152      	adcs	r2, r2
    2098:	d2cd      	bcs.n	2036 <STACK_SIZE+0x36>
    209a:	09c3      	lsrs	r3, r0, #7
    209c:	428b      	cmp	r3, r1
    209e:	d301      	bcc.n	20a4 <STACK_SIZE+0xa4>
    20a0:	01cb      	lsls	r3, r1, #7
    20a2:	1ac0      	subs	r0, r0, r3
    20a4:	4152      	adcs	r2, r2
    20a6:	0983      	lsrs	r3, r0, #6
    20a8:	428b      	cmp	r3, r1
    20aa:	d301      	bcc.n	20b0 <STACK_SIZE+0xb0>
    20ac:	018b      	lsls	r3, r1, #6
    20ae:	1ac0      	subs	r0, r0, r3
    20b0:	4152      	adcs	r2, r2
    20b2:	0943      	lsrs	r3, r0, #5
    20b4:	428b      	cmp	r3, r1
    20b6:	d301      	bcc.n	20bc <STACK_SIZE+0xbc>
    20b8:	014b      	lsls	r3, r1, #5
    20ba:	1ac0      	subs	r0, r0, r3
    20bc:	4152      	adcs	r2, r2
    20be:	0903      	lsrs	r3, r0, #4
    20c0:	428b      	cmp	r3, r1
    20c2:	d301      	bcc.n	20c8 <STACK_SIZE+0xc8>
    20c4:	010b      	lsls	r3, r1, #4
    20c6:	1ac0      	subs	r0, r0, r3
    20c8:	4152      	adcs	r2, r2
    20ca:	08c3      	lsrs	r3, r0, #3
    20cc:	428b      	cmp	r3, r1
    20ce:	d301      	bcc.n	20d4 <STACK_SIZE+0xd4>
    20d0:	00cb      	lsls	r3, r1, #3
    20d2:	1ac0      	subs	r0, r0, r3
    20d4:	4152      	adcs	r2, r2
    20d6:	0883      	lsrs	r3, r0, #2
    20d8:	428b      	cmp	r3, r1
    20da:	d301      	bcc.n	20e0 <STACK_SIZE+0xe0>
    20dc:	008b      	lsls	r3, r1, #2
    20de:	1ac0      	subs	r0, r0, r3
    20e0:	4152      	adcs	r2, r2
    20e2:	0843      	lsrs	r3, r0, #1
    20e4:	428b      	cmp	r3, r1
    20e6:	d301      	bcc.n	20ec <STACK_SIZE+0xec>
    20e8:	004b      	lsls	r3, r1, #1
    20ea:	1ac0      	subs	r0, r0, r3
    20ec:	4152      	adcs	r2, r2
    20ee:	1a41      	subs	r1, r0, r1
    20f0:	d200      	bcs.n	20f4 <STACK_SIZE+0xf4>
    20f2:	4601      	mov	r1, r0
    20f4:	4152      	adcs	r2, r2
    20f6:	4610      	mov	r0, r2
    20f8:	4770      	bx	lr
    20fa:	e7ff      	b.n	20fc <STACK_SIZE+0xfc>
    20fc:	b501      	push	{r0, lr}
    20fe:	2000      	movs	r0, #0
    2100:	f000 f806 	bl	2110 <__aeabi_idiv0>
    2104:	bd02      	pop	{r1, pc}
    2106:	46c0      	nop			; (mov r8, r8)

00002108 <__aeabi_uidivmod>:
    2108:	2900      	cmp	r1, #0
    210a:	d0f7      	beq.n	20fc <STACK_SIZE+0xfc>
    210c:	e776      	b.n	1ffc <__udivsi3>
    210e:	4770      	bx	lr

00002110 <__aeabi_idiv0>:
    2110:	4770      	bx	lr
    2112:	46c0      	nop			; (mov r8, r8)

00002114 <__aeabi_lmul>:
    2114:	b5f0      	push	{r4, r5, r6, r7, lr}
    2116:	46ce      	mov	lr, r9
    2118:	4647      	mov	r7, r8
    211a:	0415      	lsls	r5, r2, #16
    211c:	0c2d      	lsrs	r5, r5, #16
    211e:	002e      	movs	r6, r5
    2120:	b580      	push	{r7, lr}
    2122:	0407      	lsls	r7, r0, #16
    2124:	0c14      	lsrs	r4, r2, #16
    2126:	0c3f      	lsrs	r7, r7, #16
    2128:	4699      	mov	r9, r3
    212a:	0c03      	lsrs	r3, r0, #16
    212c:	437e      	muls	r6, r7
    212e:	435d      	muls	r5, r3
    2130:	4367      	muls	r7, r4
    2132:	4363      	muls	r3, r4
    2134:	197f      	adds	r7, r7, r5
    2136:	0c34      	lsrs	r4, r6, #16
    2138:	19e4      	adds	r4, r4, r7
    213a:	469c      	mov	ip, r3
    213c:	42a5      	cmp	r5, r4
    213e:	d903      	bls.n	2148 <__aeabi_lmul+0x34>
    2140:	2380      	movs	r3, #128	; 0x80
    2142:	025b      	lsls	r3, r3, #9
    2144:	4698      	mov	r8, r3
    2146:	44c4      	add	ip, r8
    2148:	464b      	mov	r3, r9
    214a:	4351      	muls	r1, r2
    214c:	4343      	muls	r3, r0
    214e:	0436      	lsls	r6, r6, #16
    2150:	0c36      	lsrs	r6, r6, #16
    2152:	0c25      	lsrs	r5, r4, #16
    2154:	0424      	lsls	r4, r4, #16
    2156:	4465      	add	r5, ip
    2158:	19a4      	adds	r4, r4, r6
    215a:	1859      	adds	r1, r3, r1
    215c:	1949      	adds	r1, r1, r5
    215e:	0020      	movs	r0, r4
    2160:	bc0c      	pop	{r2, r3}
    2162:	4690      	mov	r8, r2
    2164:	4699      	mov	r9, r3
    2166:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002168 <__aeabi_dadd>:
    2168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    216a:	4645      	mov	r5, r8
    216c:	46de      	mov	lr, fp
    216e:	4657      	mov	r7, sl
    2170:	464e      	mov	r6, r9
    2172:	030c      	lsls	r4, r1, #12
    2174:	b5e0      	push	{r5, r6, r7, lr}
    2176:	004e      	lsls	r6, r1, #1
    2178:	0fc9      	lsrs	r1, r1, #31
    217a:	4688      	mov	r8, r1
    217c:	000d      	movs	r5, r1
    217e:	0a61      	lsrs	r1, r4, #9
    2180:	0f44      	lsrs	r4, r0, #29
    2182:	430c      	orrs	r4, r1
    2184:	00c7      	lsls	r7, r0, #3
    2186:	0319      	lsls	r1, r3, #12
    2188:	0058      	lsls	r0, r3, #1
    218a:	0fdb      	lsrs	r3, r3, #31
    218c:	469b      	mov	fp, r3
    218e:	0a4b      	lsrs	r3, r1, #9
    2190:	0f51      	lsrs	r1, r2, #29
    2192:	430b      	orrs	r3, r1
    2194:	0d76      	lsrs	r6, r6, #21
    2196:	0d40      	lsrs	r0, r0, #21
    2198:	0019      	movs	r1, r3
    219a:	00d2      	lsls	r2, r2, #3
    219c:	45d8      	cmp	r8, fp
    219e:	d100      	bne.n	21a2 <__aeabi_dadd+0x3a>
    21a0:	e0ae      	b.n	2300 <__aeabi_dadd+0x198>
    21a2:	1a35      	subs	r5, r6, r0
    21a4:	2d00      	cmp	r5, #0
    21a6:	dc00      	bgt.n	21aa <__aeabi_dadd+0x42>
    21a8:	e0f6      	b.n	2398 <__aeabi_dadd+0x230>
    21aa:	2800      	cmp	r0, #0
    21ac:	d10f      	bne.n	21ce <__aeabi_dadd+0x66>
    21ae:	4313      	orrs	r3, r2
    21b0:	d100      	bne.n	21b4 <__aeabi_dadd+0x4c>
    21b2:	e0db      	b.n	236c <__aeabi_dadd+0x204>
    21b4:	1e6b      	subs	r3, r5, #1
    21b6:	2b00      	cmp	r3, #0
    21b8:	d000      	beq.n	21bc <__aeabi_dadd+0x54>
    21ba:	e137      	b.n	242c <__aeabi_dadd+0x2c4>
    21bc:	1aba      	subs	r2, r7, r2
    21be:	4297      	cmp	r7, r2
    21c0:	41bf      	sbcs	r7, r7
    21c2:	1a64      	subs	r4, r4, r1
    21c4:	427f      	negs	r7, r7
    21c6:	1be4      	subs	r4, r4, r7
    21c8:	2601      	movs	r6, #1
    21ca:	0017      	movs	r7, r2
    21cc:	e024      	b.n	2218 <__aeabi_dadd+0xb0>
    21ce:	4bc6      	ldr	r3, [pc, #792]	; (24e8 <__aeabi_dadd+0x380>)
    21d0:	429e      	cmp	r6, r3
    21d2:	d04d      	beq.n	2270 <__aeabi_dadd+0x108>
    21d4:	2380      	movs	r3, #128	; 0x80
    21d6:	041b      	lsls	r3, r3, #16
    21d8:	4319      	orrs	r1, r3
    21da:	2d38      	cmp	r5, #56	; 0x38
    21dc:	dd00      	ble.n	21e0 <__aeabi_dadd+0x78>
    21de:	e107      	b.n	23f0 <__aeabi_dadd+0x288>
    21e0:	2d1f      	cmp	r5, #31
    21e2:	dd00      	ble.n	21e6 <__aeabi_dadd+0x7e>
    21e4:	e138      	b.n	2458 <__aeabi_dadd+0x2f0>
    21e6:	2020      	movs	r0, #32
    21e8:	1b43      	subs	r3, r0, r5
    21ea:	469a      	mov	sl, r3
    21ec:	000b      	movs	r3, r1
    21ee:	4650      	mov	r0, sl
    21f0:	4083      	lsls	r3, r0
    21f2:	4699      	mov	r9, r3
    21f4:	0013      	movs	r3, r2
    21f6:	4648      	mov	r0, r9
    21f8:	40eb      	lsrs	r3, r5
    21fa:	4318      	orrs	r0, r3
    21fc:	0003      	movs	r3, r0
    21fe:	4650      	mov	r0, sl
    2200:	4082      	lsls	r2, r0
    2202:	1e50      	subs	r0, r2, #1
    2204:	4182      	sbcs	r2, r0
    2206:	40e9      	lsrs	r1, r5
    2208:	431a      	orrs	r2, r3
    220a:	1aba      	subs	r2, r7, r2
    220c:	1a61      	subs	r1, r4, r1
    220e:	4297      	cmp	r7, r2
    2210:	41a4      	sbcs	r4, r4
    2212:	0017      	movs	r7, r2
    2214:	4264      	negs	r4, r4
    2216:	1b0c      	subs	r4, r1, r4
    2218:	0223      	lsls	r3, r4, #8
    221a:	d562      	bpl.n	22e2 <__aeabi_dadd+0x17a>
    221c:	0264      	lsls	r4, r4, #9
    221e:	0a65      	lsrs	r5, r4, #9
    2220:	2d00      	cmp	r5, #0
    2222:	d100      	bne.n	2226 <__aeabi_dadd+0xbe>
    2224:	e0df      	b.n	23e6 <__aeabi_dadd+0x27e>
    2226:	0028      	movs	r0, r5
    2228:	f001 fbe4 	bl	39f4 <__clzsi2>
    222c:	0003      	movs	r3, r0
    222e:	3b08      	subs	r3, #8
    2230:	2b1f      	cmp	r3, #31
    2232:	dd00      	ble.n	2236 <__aeabi_dadd+0xce>
    2234:	e0d2      	b.n	23dc <__aeabi_dadd+0x274>
    2236:	2220      	movs	r2, #32
    2238:	003c      	movs	r4, r7
    223a:	1ad2      	subs	r2, r2, r3
    223c:	409d      	lsls	r5, r3
    223e:	40d4      	lsrs	r4, r2
    2240:	409f      	lsls	r7, r3
    2242:	4325      	orrs	r5, r4
    2244:	429e      	cmp	r6, r3
    2246:	dd00      	ble.n	224a <__aeabi_dadd+0xe2>
    2248:	e0c4      	b.n	23d4 <__aeabi_dadd+0x26c>
    224a:	1b9e      	subs	r6, r3, r6
    224c:	1c73      	adds	r3, r6, #1
    224e:	2b1f      	cmp	r3, #31
    2250:	dd00      	ble.n	2254 <__aeabi_dadd+0xec>
    2252:	e0f1      	b.n	2438 <__aeabi_dadd+0x2d0>
    2254:	2220      	movs	r2, #32
    2256:	0038      	movs	r0, r7
    2258:	0029      	movs	r1, r5
    225a:	1ad2      	subs	r2, r2, r3
    225c:	40d8      	lsrs	r0, r3
    225e:	4091      	lsls	r1, r2
    2260:	4097      	lsls	r7, r2
    2262:	002c      	movs	r4, r5
    2264:	4301      	orrs	r1, r0
    2266:	1e78      	subs	r0, r7, #1
    2268:	4187      	sbcs	r7, r0
    226a:	40dc      	lsrs	r4, r3
    226c:	2600      	movs	r6, #0
    226e:	430f      	orrs	r7, r1
    2270:	077b      	lsls	r3, r7, #29
    2272:	d009      	beq.n	2288 <__aeabi_dadd+0x120>
    2274:	230f      	movs	r3, #15
    2276:	403b      	ands	r3, r7
    2278:	2b04      	cmp	r3, #4
    227a:	d005      	beq.n	2288 <__aeabi_dadd+0x120>
    227c:	1d3b      	adds	r3, r7, #4
    227e:	42bb      	cmp	r3, r7
    2280:	41bf      	sbcs	r7, r7
    2282:	427f      	negs	r7, r7
    2284:	19e4      	adds	r4, r4, r7
    2286:	001f      	movs	r7, r3
    2288:	0223      	lsls	r3, r4, #8
    228a:	d52c      	bpl.n	22e6 <__aeabi_dadd+0x17e>
    228c:	4b96      	ldr	r3, [pc, #600]	; (24e8 <__aeabi_dadd+0x380>)
    228e:	3601      	adds	r6, #1
    2290:	429e      	cmp	r6, r3
    2292:	d100      	bne.n	2296 <__aeabi_dadd+0x12e>
    2294:	e09a      	b.n	23cc <__aeabi_dadd+0x264>
    2296:	4645      	mov	r5, r8
    2298:	4b94      	ldr	r3, [pc, #592]	; (24ec <__aeabi_dadd+0x384>)
    229a:	08ff      	lsrs	r7, r7, #3
    229c:	401c      	ands	r4, r3
    229e:	0760      	lsls	r0, r4, #29
    22a0:	0576      	lsls	r6, r6, #21
    22a2:	0264      	lsls	r4, r4, #9
    22a4:	4307      	orrs	r7, r0
    22a6:	0b24      	lsrs	r4, r4, #12
    22a8:	0d76      	lsrs	r6, r6, #21
    22aa:	2100      	movs	r1, #0
    22ac:	0324      	lsls	r4, r4, #12
    22ae:	0b23      	lsrs	r3, r4, #12
    22b0:	0d0c      	lsrs	r4, r1, #20
    22b2:	4a8f      	ldr	r2, [pc, #572]	; (24f0 <__aeabi_dadd+0x388>)
    22b4:	0524      	lsls	r4, r4, #20
    22b6:	431c      	orrs	r4, r3
    22b8:	4014      	ands	r4, r2
    22ba:	0533      	lsls	r3, r6, #20
    22bc:	4323      	orrs	r3, r4
    22be:	005b      	lsls	r3, r3, #1
    22c0:	07ed      	lsls	r5, r5, #31
    22c2:	085b      	lsrs	r3, r3, #1
    22c4:	432b      	orrs	r3, r5
    22c6:	0038      	movs	r0, r7
    22c8:	0019      	movs	r1, r3
    22ca:	bc3c      	pop	{r2, r3, r4, r5}
    22cc:	4690      	mov	r8, r2
    22ce:	4699      	mov	r9, r3
    22d0:	46a2      	mov	sl, r4
    22d2:	46ab      	mov	fp, r5
    22d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22d6:	4664      	mov	r4, ip
    22d8:	4304      	orrs	r4, r0
    22da:	d100      	bne.n	22de <__aeabi_dadd+0x176>
    22dc:	e211      	b.n	2702 <__aeabi_dadd+0x59a>
    22de:	0004      	movs	r4, r0
    22e0:	4667      	mov	r7, ip
    22e2:	077b      	lsls	r3, r7, #29
    22e4:	d1c6      	bne.n	2274 <__aeabi_dadd+0x10c>
    22e6:	4645      	mov	r5, r8
    22e8:	0760      	lsls	r0, r4, #29
    22ea:	08ff      	lsrs	r7, r7, #3
    22ec:	4307      	orrs	r7, r0
    22ee:	08e4      	lsrs	r4, r4, #3
    22f0:	4b7d      	ldr	r3, [pc, #500]	; (24e8 <__aeabi_dadd+0x380>)
    22f2:	429e      	cmp	r6, r3
    22f4:	d030      	beq.n	2358 <__aeabi_dadd+0x1f0>
    22f6:	0324      	lsls	r4, r4, #12
    22f8:	0576      	lsls	r6, r6, #21
    22fa:	0b24      	lsrs	r4, r4, #12
    22fc:	0d76      	lsrs	r6, r6, #21
    22fe:	e7d4      	b.n	22aa <__aeabi_dadd+0x142>
    2300:	1a33      	subs	r3, r6, r0
    2302:	469a      	mov	sl, r3
    2304:	2b00      	cmp	r3, #0
    2306:	dd78      	ble.n	23fa <__aeabi_dadd+0x292>
    2308:	2800      	cmp	r0, #0
    230a:	d031      	beq.n	2370 <__aeabi_dadd+0x208>
    230c:	4876      	ldr	r0, [pc, #472]	; (24e8 <__aeabi_dadd+0x380>)
    230e:	4286      	cmp	r6, r0
    2310:	d0ae      	beq.n	2270 <__aeabi_dadd+0x108>
    2312:	2080      	movs	r0, #128	; 0x80
    2314:	0400      	lsls	r0, r0, #16
    2316:	4301      	orrs	r1, r0
    2318:	4653      	mov	r3, sl
    231a:	2b38      	cmp	r3, #56	; 0x38
    231c:	dc00      	bgt.n	2320 <__aeabi_dadd+0x1b8>
    231e:	e0e9      	b.n	24f4 <__aeabi_dadd+0x38c>
    2320:	430a      	orrs	r2, r1
    2322:	1e51      	subs	r1, r2, #1
    2324:	418a      	sbcs	r2, r1
    2326:	2100      	movs	r1, #0
    2328:	19d2      	adds	r2, r2, r7
    232a:	42ba      	cmp	r2, r7
    232c:	41bf      	sbcs	r7, r7
    232e:	1909      	adds	r1, r1, r4
    2330:	427c      	negs	r4, r7
    2332:	0017      	movs	r7, r2
    2334:	190c      	adds	r4, r1, r4
    2336:	0223      	lsls	r3, r4, #8
    2338:	d5d3      	bpl.n	22e2 <__aeabi_dadd+0x17a>
    233a:	4b6b      	ldr	r3, [pc, #428]	; (24e8 <__aeabi_dadd+0x380>)
    233c:	3601      	adds	r6, #1
    233e:	429e      	cmp	r6, r3
    2340:	d100      	bne.n	2344 <__aeabi_dadd+0x1dc>
    2342:	e13a      	b.n	25ba <__aeabi_dadd+0x452>
    2344:	2001      	movs	r0, #1
    2346:	4b69      	ldr	r3, [pc, #420]	; (24ec <__aeabi_dadd+0x384>)
    2348:	401c      	ands	r4, r3
    234a:	087b      	lsrs	r3, r7, #1
    234c:	4007      	ands	r7, r0
    234e:	431f      	orrs	r7, r3
    2350:	07e0      	lsls	r0, r4, #31
    2352:	4307      	orrs	r7, r0
    2354:	0864      	lsrs	r4, r4, #1
    2356:	e78b      	b.n	2270 <__aeabi_dadd+0x108>
    2358:	0023      	movs	r3, r4
    235a:	433b      	orrs	r3, r7
    235c:	d100      	bne.n	2360 <__aeabi_dadd+0x1f8>
    235e:	e1cb      	b.n	26f8 <__aeabi_dadd+0x590>
    2360:	2280      	movs	r2, #128	; 0x80
    2362:	0312      	lsls	r2, r2, #12
    2364:	4314      	orrs	r4, r2
    2366:	0324      	lsls	r4, r4, #12
    2368:	0b24      	lsrs	r4, r4, #12
    236a:	e79e      	b.n	22aa <__aeabi_dadd+0x142>
    236c:	002e      	movs	r6, r5
    236e:	e77f      	b.n	2270 <__aeabi_dadd+0x108>
    2370:	0008      	movs	r0, r1
    2372:	4310      	orrs	r0, r2
    2374:	d100      	bne.n	2378 <__aeabi_dadd+0x210>
    2376:	e0b4      	b.n	24e2 <__aeabi_dadd+0x37a>
    2378:	1e58      	subs	r0, r3, #1
    237a:	2800      	cmp	r0, #0
    237c:	d000      	beq.n	2380 <__aeabi_dadd+0x218>
    237e:	e0de      	b.n	253e <__aeabi_dadd+0x3d6>
    2380:	18ba      	adds	r2, r7, r2
    2382:	42ba      	cmp	r2, r7
    2384:	419b      	sbcs	r3, r3
    2386:	1864      	adds	r4, r4, r1
    2388:	425b      	negs	r3, r3
    238a:	18e4      	adds	r4, r4, r3
    238c:	0017      	movs	r7, r2
    238e:	2601      	movs	r6, #1
    2390:	0223      	lsls	r3, r4, #8
    2392:	d5a6      	bpl.n	22e2 <__aeabi_dadd+0x17a>
    2394:	2602      	movs	r6, #2
    2396:	e7d5      	b.n	2344 <__aeabi_dadd+0x1dc>
    2398:	2d00      	cmp	r5, #0
    239a:	d16e      	bne.n	247a <__aeabi_dadd+0x312>
    239c:	1c70      	adds	r0, r6, #1
    239e:	0540      	lsls	r0, r0, #21
    23a0:	0d40      	lsrs	r0, r0, #21
    23a2:	2801      	cmp	r0, #1
    23a4:	dc00      	bgt.n	23a8 <__aeabi_dadd+0x240>
    23a6:	e0f9      	b.n	259c <__aeabi_dadd+0x434>
    23a8:	1ab8      	subs	r0, r7, r2
    23aa:	4684      	mov	ip, r0
    23ac:	4287      	cmp	r7, r0
    23ae:	4180      	sbcs	r0, r0
    23b0:	1ae5      	subs	r5, r4, r3
    23b2:	4240      	negs	r0, r0
    23b4:	1a2d      	subs	r5, r5, r0
    23b6:	0228      	lsls	r0, r5, #8
    23b8:	d400      	bmi.n	23bc <__aeabi_dadd+0x254>
    23ba:	e089      	b.n	24d0 <__aeabi_dadd+0x368>
    23bc:	1bd7      	subs	r7, r2, r7
    23be:	42ba      	cmp	r2, r7
    23c0:	4192      	sbcs	r2, r2
    23c2:	1b1c      	subs	r4, r3, r4
    23c4:	4252      	negs	r2, r2
    23c6:	1aa5      	subs	r5, r4, r2
    23c8:	46d8      	mov	r8, fp
    23ca:	e729      	b.n	2220 <__aeabi_dadd+0xb8>
    23cc:	4645      	mov	r5, r8
    23ce:	2400      	movs	r4, #0
    23d0:	2700      	movs	r7, #0
    23d2:	e76a      	b.n	22aa <__aeabi_dadd+0x142>
    23d4:	4c45      	ldr	r4, [pc, #276]	; (24ec <__aeabi_dadd+0x384>)
    23d6:	1af6      	subs	r6, r6, r3
    23d8:	402c      	ands	r4, r5
    23da:	e749      	b.n	2270 <__aeabi_dadd+0x108>
    23dc:	003d      	movs	r5, r7
    23de:	3828      	subs	r0, #40	; 0x28
    23e0:	4085      	lsls	r5, r0
    23e2:	2700      	movs	r7, #0
    23e4:	e72e      	b.n	2244 <__aeabi_dadd+0xdc>
    23e6:	0038      	movs	r0, r7
    23e8:	f001 fb04 	bl	39f4 <__clzsi2>
    23ec:	3020      	adds	r0, #32
    23ee:	e71d      	b.n	222c <__aeabi_dadd+0xc4>
    23f0:	430a      	orrs	r2, r1
    23f2:	1e51      	subs	r1, r2, #1
    23f4:	418a      	sbcs	r2, r1
    23f6:	2100      	movs	r1, #0
    23f8:	e707      	b.n	220a <__aeabi_dadd+0xa2>
    23fa:	2b00      	cmp	r3, #0
    23fc:	d000      	beq.n	2400 <__aeabi_dadd+0x298>
    23fe:	e0f3      	b.n	25e8 <__aeabi_dadd+0x480>
    2400:	1c70      	adds	r0, r6, #1
    2402:	0543      	lsls	r3, r0, #21
    2404:	0d5b      	lsrs	r3, r3, #21
    2406:	2b01      	cmp	r3, #1
    2408:	dc00      	bgt.n	240c <__aeabi_dadd+0x2a4>
    240a:	e0ad      	b.n	2568 <__aeabi_dadd+0x400>
    240c:	4b36      	ldr	r3, [pc, #216]	; (24e8 <__aeabi_dadd+0x380>)
    240e:	4298      	cmp	r0, r3
    2410:	d100      	bne.n	2414 <__aeabi_dadd+0x2ac>
    2412:	e0d1      	b.n	25b8 <__aeabi_dadd+0x450>
    2414:	18ba      	adds	r2, r7, r2
    2416:	42ba      	cmp	r2, r7
    2418:	41bf      	sbcs	r7, r7
    241a:	1864      	adds	r4, r4, r1
    241c:	427f      	negs	r7, r7
    241e:	19e4      	adds	r4, r4, r7
    2420:	07e7      	lsls	r7, r4, #31
    2422:	0852      	lsrs	r2, r2, #1
    2424:	4317      	orrs	r7, r2
    2426:	0864      	lsrs	r4, r4, #1
    2428:	0006      	movs	r6, r0
    242a:	e721      	b.n	2270 <__aeabi_dadd+0x108>
    242c:	482e      	ldr	r0, [pc, #184]	; (24e8 <__aeabi_dadd+0x380>)
    242e:	4285      	cmp	r5, r0
    2430:	d100      	bne.n	2434 <__aeabi_dadd+0x2cc>
    2432:	e093      	b.n	255c <__aeabi_dadd+0x3f4>
    2434:	001d      	movs	r5, r3
    2436:	e6d0      	b.n	21da <__aeabi_dadd+0x72>
    2438:	0029      	movs	r1, r5
    243a:	3e1f      	subs	r6, #31
    243c:	40f1      	lsrs	r1, r6
    243e:	2b20      	cmp	r3, #32
    2440:	d100      	bne.n	2444 <__aeabi_dadd+0x2dc>
    2442:	e08d      	b.n	2560 <__aeabi_dadd+0x3f8>
    2444:	2240      	movs	r2, #64	; 0x40
    2446:	1ad3      	subs	r3, r2, r3
    2448:	409d      	lsls	r5, r3
    244a:	432f      	orrs	r7, r5
    244c:	1e7d      	subs	r5, r7, #1
    244e:	41af      	sbcs	r7, r5
    2450:	2400      	movs	r4, #0
    2452:	430f      	orrs	r7, r1
    2454:	2600      	movs	r6, #0
    2456:	e744      	b.n	22e2 <__aeabi_dadd+0x17a>
    2458:	002b      	movs	r3, r5
    245a:	0008      	movs	r0, r1
    245c:	3b20      	subs	r3, #32
    245e:	40d8      	lsrs	r0, r3
    2460:	0003      	movs	r3, r0
    2462:	2d20      	cmp	r5, #32
    2464:	d100      	bne.n	2468 <__aeabi_dadd+0x300>
    2466:	e07d      	b.n	2564 <__aeabi_dadd+0x3fc>
    2468:	2040      	movs	r0, #64	; 0x40
    246a:	1b45      	subs	r5, r0, r5
    246c:	40a9      	lsls	r1, r5
    246e:	430a      	orrs	r2, r1
    2470:	1e51      	subs	r1, r2, #1
    2472:	418a      	sbcs	r2, r1
    2474:	2100      	movs	r1, #0
    2476:	431a      	orrs	r2, r3
    2478:	e6c7      	b.n	220a <__aeabi_dadd+0xa2>
    247a:	2e00      	cmp	r6, #0
    247c:	d050      	beq.n	2520 <__aeabi_dadd+0x3b8>
    247e:	4e1a      	ldr	r6, [pc, #104]	; (24e8 <__aeabi_dadd+0x380>)
    2480:	42b0      	cmp	r0, r6
    2482:	d057      	beq.n	2534 <__aeabi_dadd+0x3cc>
    2484:	2680      	movs	r6, #128	; 0x80
    2486:	426b      	negs	r3, r5
    2488:	4699      	mov	r9, r3
    248a:	0436      	lsls	r6, r6, #16
    248c:	4334      	orrs	r4, r6
    248e:	464b      	mov	r3, r9
    2490:	2b38      	cmp	r3, #56	; 0x38
    2492:	dd00      	ble.n	2496 <__aeabi_dadd+0x32e>
    2494:	e0d6      	b.n	2644 <__aeabi_dadd+0x4dc>
    2496:	2b1f      	cmp	r3, #31
    2498:	dd00      	ble.n	249c <__aeabi_dadd+0x334>
    249a:	e135      	b.n	2708 <__aeabi_dadd+0x5a0>
    249c:	2620      	movs	r6, #32
    249e:	1af5      	subs	r5, r6, r3
    24a0:	0026      	movs	r6, r4
    24a2:	40ae      	lsls	r6, r5
    24a4:	46b2      	mov	sl, r6
    24a6:	003e      	movs	r6, r7
    24a8:	40de      	lsrs	r6, r3
    24aa:	46ac      	mov	ip, r5
    24ac:	0035      	movs	r5, r6
    24ae:	4656      	mov	r6, sl
    24b0:	432e      	orrs	r6, r5
    24b2:	4665      	mov	r5, ip
    24b4:	40af      	lsls	r7, r5
    24b6:	1e7d      	subs	r5, r7, #1
    24b8:	41af      	sbcs	r7, r5
    24ba:	40dc      	lsrs	r4, r3
    24bc:	4337      	orrs	r7, r6
    24be:	1bd7      	subs	r7, r2, r7
    24c0:	42ba      	cmp	r2, r7
    24c2:	4192      	sbcs	r2, r2
    24c4:	1b0c      	subs	r4, r1, r4
    24c6:	4252      	negs	r2, r2
    24c8:	1aa4      	subs	r4, r4, r2
    24ca:	0006      	movs	r6, r0
    24cc:	46d8      	mov	r8, fp
    24ce:	e6a3      	b.n	2218 <__aeabi_dadd+0xb0>
    24d0:	4664      	mov	r4, ip
    24d2:	4667      	mov	r7, ip
    24d4:	432c      	orrs	r4, r5
    24d6:	d000      	beq.n	24da <__aeabi_dadd+0x372>
    24d8:	e6a2      	b.n	2220 <__aeabi_dadd+0xb8>
    24da:	2500      	movs	r5, #0
    24dc:	2600      	movs	r6, #0
    24de:	2700      	movs	r7, #0
    24e0:	e706      	b.n	22f0 <__aeabi_dadd+0x188>
    24e2:	001e      	movs	r6, r3
    24e4:	e6c4      	b.n	2270 <__aeabi_dadd+0x108>
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	000007ff 	.word	0x000007ff
    24ec:	ff7fffff 	.word	0xff7fffff
    24f0:	800fffff 	.word	0x800fffff
    24f4:	2b1f      	cmp	r3, #31
    24f6:	dc63      	bgt.n	25c0 <__aeabi_dadd+0x458>
    24f8:	2020      	movs	r0, #32
    24fa:	1ac3      	subs	r3, r0, r3
    24fc:	0008      	movs	r0, r1
    24fe:	4098      	lsls	r0, r3
    2500:	469c      	mov	ip, r3
    2502:	4683      	mov	fp, r0
    2504:	4653      	mov	r3, sl
    2506:	0010      	movs	r0, r2
    2508:	40d8      	lsrs	r0, r3
    250a:	0003      	movs	r3, r0
    250c:	4658      	mov	r0, fp
    250e:	4318      	orrs	r0, r3
    2510:	4663      	mov	r3, ip
    2512:	409a      	lsls	r2, r3
    2514:	1e53      	subs	r3, r2, #1
    2516:	419a      	sbcs	r2, r3
    2518:	4653      	mov	r3, sl
    251a:	4302      	orrs	r2, r0
    251c:	40d9      	lsrs	r1, r3
    251e:	e703      	b.n	2328 <__aeabi_dadd+0x1c0>
    2520:	0026      	movs	r6, r4
    2522:	433e      	orrs	r6, r7
    2524:	d006      	beq.n	2534 <__aeabi_dadd+0x3cc>
    2526:	43eb      	mvns	r3, r5
    2528:	4699      	mov	r9, r3
    252a:	2b00      	cmp	r3, #0
    252c:	d0c7      	beq.n	24be <__aeabi_dadd+0x356>
    252e:	4e94      	ldr	r6, [pc, #592]	; (2780 <__aeabi_dadd+0x618>)
    2530:	42b0      	cmp	r0, r6
    2532:	d1ac      	bne.n	248e <__aeabi_dadd+0x326>
    2534:	000c      	movs	r4, r1
    2536:	0017      	movs	r7, r2
    2538:	0006      	movs	r6, r0
    253a:	46d8      	mov	r8, fp
    253c:	e698      	b.n	2270 <__aeabi_dadd+0x108>
    253e:	4b90      	ldr	r3, [pc, #576]	; (2780 <__aeabi_dadd+0x618>)
    2540:	459a      	cmp	sl, r3
    2542:	d00b      	beq.n	255c <__aeabi_dadd+0x3f4>
    2544:	4682      	mov	sl, r0
    2546:	e6e7      	b.n	2318 <__aeabi_dadd+0x1b0>
    2548:	2800      	cmp	r0, #0
    254a:	d000      	beq.n	254e <__aeabi_dadd+0x3e6>
    254c:	e09e      	b.n	268c <__aeabi_dadd+0x524>
    254e:	0018      	movs	r0, r3
    2550:	4310      	orrs	r0, r2
    2552:	d100      	bne.n	2556 <__aeabi_dadd+0x3ee>
    2554:	e0e9      	b.n	272a <__aeabi_dadd+0x5c2>
    2556:	001c      	movs	r4, r3
    2558:	0017      	movs	r7, r2
    255a:	46d8      	mov	r8, fp
    255c:	4e88      	ldr	r6, [pc, #544]	; (2780 <__aeabi_dadd+0x618>)
    255e:	e687      	b.n	2270 <__aeabi_dadd+0x108>
    2560:	2500      	movs	r5, #0
    2562:	e772      	b.n	244a <__aeabi_dadd+0x2e2>
    2564:	2100      	movs	r1, #0
    2566:	e782      	b.n	246e <__aeabi_dadd+0x306>
    2568:	0023      	movs	r3, r4
    256a:	433b      	orrs	r3, r7
    256c:	2e00      	cmp	r6, #0
    256e:	d000      	beq.n	2572 <__aeabi_dadd+0x40a>
    2570:	e0ab      	b.n	26ca <__aeabi_dadd+0x562>
    2572:	2b00      	cmp	r3, #0
    2574:	d100      	bne.n	2578 <__aeabi_dadd+0x410>
    2576:	e0e7      	b.n	2748 <__aeabi_dadd+0x5e0>
    2578:	000b      	movs	r3, r1
    257a:	4313      	orrs	r3, r2
    257c:	d100      	bne.n	2580 <__aeabi_dadd+0x418>
    257e:	e677      	b.n	2270 <__aeabi_dadd+0x108>
    2580:	18ba      	adds	r2, r7, r2
    2582:	42ba      	cmp	r2, r7
    2584:	41bf      	sbcs	r7, r7
    2586:	1864      	adds	r4, r4, r1
    2588:	427f      	negs	r7, r7
    258a:	19e4      	adds	r4, r4, r7
    258c:	0223      	lsls	r3, r4, #8
    258e:	d400      	bmi.n	2592 <__aeabi_dadd+0x42a>
    2590:	e0f2      	b.n	2778 <__aeabi_dadd+0x610>
    2592:	4b7c      	ldr	r3, [pc, #496]	; (2784 <__aeabi_dadd+0x61c>)
    2594:	0017      	movs	r7, r2
    2596:	401c      	ands	r4, r3
    2598:	0006      	movs	r6, r0
    259a:	e669      	b.n	2270 <__aeabi_dadd+0x108>
    259c:	0020      	movs	r0, r4
    259e:	4338      	orrs	r0, r7
    25a0:	2e00      	cmp	r6, #0
    25a2:	d1d1      	bne.n	2548 <__aeabi_dadd+0x3e0>
    25a4:	2800      	cmp	r0, #0
    25a6:	d15b      	bne.n	2660 <__aeabi_dadd+0x4f8>
    25a8:	001c      	movs	r4, r3
    25aa:	4314      	orrs	r4, r2
    25ac:	d100      	bne.n	25b0 <__aeabi_dadd+0x448>
    25ae:	e0a8      	b.n	2702 <__aeabi_dadd+0x59a>
    25b0:	001c      	movs	r4, r3
    25b2:	0017      	movs	r7, r2
    25b4:	46d8      	mov	r8, fp
    25b6:	e65b      	b.n	2270 <__aeabi_dadd+0x108>
    25b8:	0006      	movs	r6, r0
    25ba:	2400      	movs	r4, #0
    25bc:	2700      	movs	r7, #0
    25be:	e697      	b.n	22f0 <__aeabi_dadd+0x188>
    25c0:	4650      	mov	r0, sl
    25c2:	000b      	movs	r3, r1
    25c4:	3820      	subs	r0, #32
    25c6:	40c3      	lsrs	r3, r0
    25c8:	4699      	mov	r9, r3
    25ca:	4653      	mov	r3, sl
    25cc:	2b20      	cmp	r3, #32
    25ce:	d100      	bne.n	25d2 <__aeabi_dadd+0x46a>
    25d0:	e095      	b.n	26fe <__aeabi_dadd+0x596>
    25d2:	2340      	movs	r3, #64	; 0x40
    25d4:	4650      	mov	r0, sl
    25d6:	1a1b      	subs	r3, r3, r0
    25d8:	4099      	lsls	r1, r3
    25da:	430a      	orrs	r2, r1
    25dc:	1e51      	subs	r1, r2, #1
    25de:	418a      	sbcs	r2, r1
    25e0:	464b      	mov	r3, r9
    25e2:	2100      	movs	r1, #0
    25e4:	431a      	orrs	r2, r3
    25e6:	e69f      	b.n	2328 <__aeabi_dadd+0x1c0>
    25e8:	2e00      	cmp	r6, #0
    25ea:	d130      	bne.n	264e <__aeabi_dadd+0x4e6>
    25ec:	0026      	movs	r6, r4
    25ee:	433e      	orrs	r6, r7
    25f0:	d067      	beq.n	26c2 <__aeabi_dadd+0x55a>
    25f2:	43db      	mvns	r3, r3
    25f4:	469a      	mov	sl, r3
    25f6:	2b00      	cmp	r3, #0
    25f8:	d01c      	beq.n	2634 <__aeabi_dadd+0x4cc>
    25fa:	4e61      	ldr	r6, [pc, #388]	; (2780 <__aeabi_dadd+0x618>)
    25fc:	42b0      	cmp	r0, r6
    25fe:	d060      	beq.n	26c2 <__aeabi_dadd+0x55a>
    2600:	4653      	mov	r3, sl
    2602:	2b38      	cmp	r3, #56	; 0x38
    2604:	dd00      	ble.n	2608 <__aeabi_dadd+0x4a0>
    2606:	e096      	b.n	2736 <__aeabi_dadd+0x5ce>
    2608:	2b1f      	cmp	r3, #31
    260a:	dd00      	ble.n	260e <__aeabi_dadd+0x4a6>
    260c:	e09f      	b.n	274e <__aeabi_dadd+0x5e6>
    260e:	2620      	movs	r6, #32
    2610:	1af3      	subs	r3, r6, r3
    2612:	0026      	movs	r6, r4
    2614:	409e      	lsls	r6, r3
    2616:	469c      	mov	ip, r3
    2618:	46b3      	mov	fp, r6
    261a:	4653      	mov	r3, sl
    261c:	003e      	movs	r6, r7
    261e:	40de      	lsrs	r6, r3
    2620:	0033      	movs	r3, r6
    2622:	465e      	mov	r6, fp
    2624:	431e      	orrs	r6, r3
    2626:	4663      	mov	r3, ip
    2628:	409f      	lsls	r7, r3
    262a:	1e7b      	subs	r3, r7, #1
    262c:	419f      	sbcs	r7, r3
    262e:	4653      	mov	r3, sl
    2630:	40dc      	lsrs	r4, r3
    2632:	4337      	orrs	r7, r6
    2634:	18bf      	adds	r7, r7, r2
    2636:	4297      	cmp	r7, r2
    2638:	4192      	sbcs	r2, r2
    263a:	1864      	adds	r4, r4, r1
    263c:	4252      	negs	r2, r2
    263e:	18a4      	adds	r4, r4, r2
    2640:	0006      	movs	r6, r0
    2642:	e678      	b.n	2336 <__aeabi_dadd+0x1ce>
    2644:	4327      	orrs	r7, r4
    2646:	1e7c      	subs	r4, r7, #1
    2648:	41a7      	sbcs	r7, r4
    264a:	2400      	movs	r4, #0
    264c:	e737      	b.n	24be <__aeabi_dadd+0x356>
    264e:	4e4c      	ldr	r6, [pc, #304]	; (2780 <__aeabi_dadd+0x618>)
    2650:	42b0      	cmp	r0, r6
    2652:	d036      	beq.n	26c2 <__aeabi_dadd+0x55a>
    2654:	2680      	movs	r6, #128	; 0x80
    2656:	425b      	negs	r3, r3
    2658:	0436      	lsls	r6, r6, #16
    265a:	469a      	mov	sl, r3
    265c:	4334      	orrs	r4, r6
    265e:	e7cf      	b.n	2600 <__aeabi_dadd+0x498>
    2660:	0018      	movs	r0, r3
    2662:	4310      	orrs	r0, r2
    2664:	d100      	bne.n	2668 <__aeabi_dadd+0x500>
    2666:	e603      	b.n	2270 <__aeabi_dadd+0x108>
    2668:	1ab8      	subs	r0, r7, r2
    266a:	4684      	mov	ip, r0
    266c:	4567      	cmp	r7, ip
    266e:	41ad      	sbcs	r5, r5
    2670:	1ae0      	subs	r0, r4, r3
    2672:	426d      	negs	r5, r5
    2674:	1b40      	subs	r0, r0, r5
    2676:	0205      	lsls	r5, r0, #8
    2678:	d400      	bmi.n	267c <__aeabi_dadd+0x514>
    267a:	e62c      	b.n	22d6 <__aeabi_dadd+0x16e>
    267c:	1bd7      	subs	r7, r2, r7
    267e:	42ba      	cmp	r2, r7
    2680:	4192      	sbcs	r2, r2
    2682:	1b1c      	subs	r4, r3, r4
    2684:	4252      	negs	r2, r2
    2686:	1aa4      	subs	r4, r4, r2
    2688:	46d8      	mov	r8, fp
    268a:	e5f1      	b.n	2270 <__aeabi_dadd+0x108>
    268c:	0018      	movs	r0, r3
    268e:	4310      	orrs	r0, r2
    2690:	d100      	bne.n	2694 <__aeabi_dadd+0x52c>
    2692:	e763      	b.n	255c <__aeabi_dadd+0x3f4>
    2694:	08f8      	lsrs	r0, r7, #3
    2696:	0767      	lsls	r7, r4, #29
    2698:	4307      	orrs	r7, r0
    269a:	2080      	movs	r0, #128	; 0x80
    269c:	08e4      	lsrs	r4, r4, #3
    269e:	0300      	lsls	r0, r0, #12
    26a0:	4204      	tst	r4, r0
    26a2:	d008      	beq.n	26b6 <__aeabi_dadd+0x54e>
    26a4:	08dd      	lsrs	r5, r3, #3
    26a6:	4205      	tst	r5, r0
    26a8:	d105      	bne.n	26b6 <__aeabi_dadd+0x54e>
    26aa:	08d2      	lsrs	r2, r2, #3
    26ac:	0759      	lsls	r1, r3, #29
    26ae:	4311      	orrs	r1, r2
    26b0:	000f      	movs	r7, r1
    26b2:	002c      	movs	r4, r5
    26b4:	46d8      	mov	r8, fp
    26b6:	0f7b      	lsrs	r3, r7, #29
    26b8:	00e4      	lsls	r4, r4, #3
    26ba:	431c      	orrs	r4, r3
    26bc:	00ff      	lsls	r7, r7, #3
    26be:	4e30      	ldr	r6, [pc, #192]	; (2780 <__aeabi_dadd+0x618>)
    26c0:	e5d6      	b.n	2270 <__aeabi_dadd+0x108>
    26c2:	000c      	movs	r4, r1
    26c4:	0017      	movs	r7, r2
    26c6:	0006      	movs	r6, r0
    26c8:	e5d2      	b.n	2270 <__aeabi_dadd+0x108>
    26ca:	2b00      	cmp	r3, #0
    26cc:	d038      	beq.n	2740 <__aeabi_dadd+0x5d8>
    26ce:	000b      	movs	r3, r1
    26d0:	4313      	orrs	r3, r2
    26d2:	d100      	bne.n	26d6 <__aeabi_dadd+0x56e>
    26d4:	e742      	b.n	255c <__aeabi_dadd+0x3f4>
    26d6:	08f8      	lsrs	r0, r7, #3
    26d8:	0767      	lsls	r7, r4, #29
    26da:	4307      	orrs	r7, r0
    26dc:	2080      	movs	r0, #128	; 0x80
    26de:	08e4      	lsrs	r4, r4, #3
    26e0:	0300      	lsls	r0, r0, #12
    26e2:	4204      	tst	r4, r0
    26e4:	d0e7      	beq.n	26b6 <__aeabi_dadd+0x54e>
    26e6:	08cb      	lsrs	r3, r1, #3
    26e8:	4203      	tst	r3, r0
    26ea:	d1e4      	bne.n	26b6 <__aeabi_dadd+0x54e>
    26ec:	08d2      	lsrs	r2, r2, #3
    26ee:	0749      	lsls	r1, r1, #29
    26f0:	4311      	orrs	r1, r2
    26f2:	000f      	movs	r7, r1
    26f4:	001c      	movs	r4, r3
    26f6:	e7de      	b.n	26b6 <__aeabi_dadd+0x54e>
    26f8:	2700      	movs	r7, #0
    26fa:	2400      	movs	r4, #0
    26fc:	e5d5      	b.n	22aa <__aeabi_dadd+0x142>
    26fe:	2100      	movs	r1, #0
    2700:	e76b      	b.n	25da <__aeabi_dadd+0x472>
    2702:	2500      	movs	r5, #0
    2704:	2700      	movs	r7, #0
    2706:	e5f3      	b.n	22f0 <__aeabi_dadd+0x188>
    2708:	464e      	mov	r6, r9
    270a:	0025      	movs	r5, r4
    270c:	3e20      	subs	r6, #32
    270e:	40f5      	lsrs	r5, r6
    2710:	464b      	mov	r3, r9
    2712:	002e      	movs	r6, r5
    2714:	2b20      	cmp	r3, #32
    2716:	d02d      	beq.n	2774 <__aeabi_dadd+0x60c>
    2718:	2540      	movs	r5, #64	; 0x40
    271a:	1aed      	subs	r5, r5, r3
    271c:	40ac      	lsls	r4, r5
    271e:	4327      	orrs	r7, r4
    2720:	1e7c      	subs	r4, r7, #1
    2722:	41a7      	sbcs	r7, r4
    2724:	2400      	movs	r4, #0
    2726:	4337      	orrs	r7, r6
    2728:	e6c9      	b.n	24be <__aeabi_dadd+0x356>
    272a:	2480      	movs	r4, #128	; 0x80
    272c:	2500      	movs	r5, #0
    272e:	0324      	lsls	r4, r4, #12
    2730:	4e13      	ldr	r6, [pc, #76]	; (2780 <__aeabi_dadd+0x618>)
    2732:	2700      	movs	r7, #0
    2734:	e5dc      	b.n	22f0 <__aeabi_dadd+0x188>
    2736:	4327      	orrs	r7, r4
    2738:	1e7c      	subs	r4, r7, #1
    273a:	41a7      	sbcs	r7, r4
    273c:	2400      	movs	r4, #0
    273e:	e779      	b.n	2634 <__aeabi_dadd+0x4cc>
    2740:	000c      	movs	r4, r1
    2742:	0017      	movs	r7, r2
    2744:	4e0e      	ldr	r6, [pc, #56]	; (2780 <__aeabi_dadd+0x618>)
    2746:	e593      	b.n	2270 <__aeabi_dadd+0x108>
    2748:	000c      	movs	r4, r1
    274a:	0017      	movs	r7, r2
    274c:	e590      	b.n	2270 <__aeabi_dadd+0x108>
    274e:	4656      	mov	r6, sl
    2750:	0023      	movs	r3, r4
    2752:	3e20      	subs	r6, #32
    2754:	40f3      	lsrs	r3, r6
    2756:	4699      	mov	r9, r3
    2758:	4653      	mov	r3, sl
    275a:	2b20      	cmp	r3, #32
    275c:	d00e      	beq.n	277c <__aeabi_dadd+0x614>
    275e:	2340      	movs	r3, #64	; 0x40
    2760:	4656      	mov	r6, sl
    2762:	1b9b      	subs	r3, r3, r6
    2764:	409c      	lsls	r4, r3
    2766:	4327      	orrs	r7, r4
    2768:	1e7c      	subs	r4, r7, #1
    276a:	41a7      	sbcs	r7, r4
    276c:	464b      	mov	r3, r9
    276e:	2400      	movs	r4, #0
    2770:	431f      	orrs	r7, r3
    2772:	e75f      	b.n	2634 <__aeabi_dadd+0x4cc>
    2774:	2400      	movs	r4, #0
    2776:	e7d2      	b.n	271e <__aeabi_dadd+0x5b6>
    2778:	0017      	movs	r7, r2
    277a:	e5b2      	b.n	22e2 <__aeabi_dadd+0x17a>
    277c:	2400      	movs	r4, #0
    277e:	e7f2      	b.n	2766 <__aeabi_dadd+0x5fe>
    2780:	000007ff 	.word	0x000007ff
    2784:	ff7fffff 	.word	0xff7fffff

00002788 <__aeabi_ddiv>:
    2788:	b5f0      	push	{r4, r5, r6, r7, lr}
    278a:	4657      	mov	r7, sl
    278c:	4645      	mov	r5, r8
    278e:	46de      	mov	lr, fp
    2790:	464e      	mov	r6, r9
    2792:	b5e0      	push	{r5, r6, r7, lr}
    2794:	004c      	lsls	r4, r1, #1
    2796:	030e      	lsls	r6, r1, #12
    2798:	b087      	sub	sp, #28
    279a:	4683      	mov	fp, r0
    279c:	4692      	mov	sl, r2
    279e:	001d      	movs	r5, r3
    27a0:	4680      	mov	r8, r0
    27a2:	0b36      	lsrs	r6, r6, #12
    27a4:	0d64      	lsrs	r4, r4, #21
    27a6:	0fcf      	lsrs	r7, r1, #31
    27a8:	2c00      	cmp	r4, #0
    27aa:	d04f      	beq.n	284c <__aeabi_ddiv+0xc4>
    27ac:	4b6f      	ldr	r3, [pc, #444]	; (296c <__aeabi_ddiv+0x1e4>)
    27ae:	429c      	cmp	r4, r3
    27b0:	d035      	beq.n	281e <__aeabi_ddiv+0x96>
    27b2:	2380      	movs	r3, #128	; 0x80
    27b4:	0f42      	lsrs	r2, r0, #29
    27b6:	041b      	lsls	r3, r3, #16
    27b8:	00f6      	lsls	r6, r6, #3
    27ba:	4313      	orrs	r3, r2
    27bc:	4333      	orrs	r3, r6
    27be:	4699      	mov	r9, r3
    27c0:	00c3      	lsls	r3, r0, #3
    27c2:	4698      	mov	r8, r3
    27c4:	4b6a      	ldr	r3, [pc, #424]	; (2970 <__aeabi_ddiv+0x1e8>)
    27c6:	2600      	movs	r6, #0
    27c8:	469c      	mov	ip, r3
    27ca:	2300      	movs	r3, #0
    27cc:	4464      	add	r4, ip
    27ce:	9303      	str	r3, [sp, #12]
    27d0:	032b      	lsls	r3, r5, #12
    27d2:	0b1b      	lsrs	r3, r3, #12
    27d4:	469b      	mov	fp, r3
    27d6:	006b      	lsls	r3, r5, #1
    27d8:	0fed      	lsrs	r5, r5, #31
    27da:	4650      	mov	r0, sl
    27dc:	0d5b      	lsrs	r3, r3, #21
    27de:	9501      	str	r5, [sp, #4]
    27e0:	d05e      	beq.n	28a0 <__aeabi_ddiv+0x118>
    27e2:	4a62      	ldr	r2, [pc, #392]	; (296c <__aeabi_ddiv+0x1e4>)
    27e4:	4293      	cmp	r3, r2
    27e6:	d053      	beq.n	2890 <__aeabi_ddiv+0x108>
    27e8:	465a      	mov	r2, fp
    27ea:	00d1      	lsls	r1, r2, #3
    27ec:	2280      	movs	r2, #128	; 0x80
    27ee:	0f40      	lsrs	r0, r0, #29
    27f0:	0412      	lsls	r2, r2, #16
    27f2:	4302      	orrs	r2, r0
    27f4:	430a      	orrs	r2, r1
    27f6:	4693      	mov	fp, r2
    27f8:	4652      	mov	r2, sl
    27fa:	00d1      	lsls	r1, r2, #3
    27fc:	4a5c      	ldr	r2, [pc, #368]	; (2970 <__aeabi_ddiv+0x1e8>)
    27fe:	4694      	mov	ip, r2
    2800:	2200      	movs	r2, #0
    2802:	4463      	add	r3, ip
    2804:	0038      	movs	r0, r7
    2806:	4068      	eors	r0, r5
    2808:	4684      	mov	ip, r0
    280a:	9002      	str	r0, [sp, #8]
    280c:	1ae4      	subs	r4, r4, r3
    280e:	4316      	orrs	r6, r2
    2810:	2e0f      	cmp	r6, #15
    2812:	d900      	bls.n	2816 <__aeabi_ddiv+0x8e>
    2814:	e0b4      	b.n	2980 <__aeabi_ddiv+0x1f8>
    2816:	4b57      	ldr	r3, [pc, #348]	; (2974 <__aeabi_ddiv+0x1ec>)
    2818:	00b6      	lsls	r6, r6, #2
    281a:	599b      	ldr	r3, [r3, r6]
    281c:	469f      	mov	pc, r3
    281e:	0003      	movs	r3, r0
    2820:	4333      	orrs	r3, r6
    2822:	4699      	mov	r9, r3
    2824:	d16c      	bne.n	2900 <__aeabi_ddiv+0x178>
    2826:	2300      	movs	r3, #0
    2828:	4698      	mov	r8, r3
    282a:	3302      	adds	r3, #2
    282c:	2608      	movs	r6, #8
    282e:	9303      	str	r3, [sp, #12]
    2830:	e7ce      	b.n	27d0 <__aeabi_ddiv+0x48>
    2832:	46cb      	mov	fp, r9
    2834:	4641      	mov	r1, r8
    2836:	9a03      	ldr	r2, [sp, #12]
    2838:	9701      	str	r7, [sp, #4]
    283a:	2a02      	cmp	r2, #2
    283c:	d165      	bne.n	290a <__aeabi_ddiv+0x182>
    283e:	9b01      	ldr	r3, [sp, #4]
    2840:	4c4a      	ldr	r4, [pc, #296]	; (296c <__aeabi_ddiv+0x1e4>)
    2842:	469c      	mov	ip, r3
    2844:	2300      	movs	r3, #0
    2846:	2200      	movs	r2, #0
    2848:	4698      	mov	r8, r3
    284a:	e06b      	b.n	2924 <__aeabi_ddiv+0x19c>
    284c:	0003      	movs	r3, r0
    284e:	4333      	orrs	r3, r6
    2850:	4699      	mov	r9, r3
    2852:	d04e      	beq.n	28f2 <__aeabi_ddiv+0x16a>
    2854:	2e00      	cmp	r6, #0
    2856:	d100      	bne.n	285a <__aeabi_ddiv+0xd2>
    2858:	e1bc      	b.n	2bd4 <__aeabi_ddiv+0x44c>
    285a:	0030      	movs	r0, r6
    285c:	f001 f8ca 	bl	39f4 <__clzsi2>
    2860:	0003      	movs	r3, r0
    2862:	3b0b      	subs	r3, #11
    2864:	2b1c      	cmp	r3, #28
    2866:	dd00      	ble.n	286a <__aeabi_ddiv+0xe2>
    2868:	e1ac      	b.n	2bc4 <__aeabi_ddiv+0x43c>
    286a:	221d      	movs	r2, #29
    286c:	1ad3      	subs	r3, r2, r3
    286e:	465a      	mov	r2, fp
    2870:	0001      	movs	r1, r0
    2872:	40da      	lsrs	r2, r3
    2874:	3908      	subs	r1, #8
    2876:	408e      	lsls	r6, r1
    2878:	0013      	movs	r3, r2
    287a:	4333      	orrs	r3, r6
    287c:	4699      	mov	r9, r3
    287e:	465b      	mov	r3, fp
    2880:	408b      	lsls	r3, r1
    2882:	4698      	mov	r8, r3
    2884:	2300      	movs	r3, #0
    2886:	4c3c      	ldr	r4, [pc, #240]	; (2978 <__aeabi_ddiv+0x1f0>)
    2888:	2600      	movs	r6, #0
    288a:	1a24      	subs	r4, r4, r0
    288c:	9303      	str	r3, [sp, #12]
    288e:	e79f      	b.n	27d0 <__aeabi_ddiv+0x48>
    2890:	4651      	mov	r1, sl
    2892:	465a      	mov	r2, fp
    2894:	4311      	orrs	r1, r2
    2896:	d129      	bne.n	28ec <__aeabi_ddiv+0x164>
    2898:	2200      	movs	r2, #0
    289a:	4693      	mov	fp, r2
    289c:	3202      	adds	r2, #2
    289e:	e7b1      	b.n	2804 <__aeabi_ddiv+0x7c>
    28a0:	4659      	mov	r1, fp
    28a2:	4301      	orrs	r1, r0
    28a4:	d01e      	beq.n	28e4 <__aeabi_ddiv+0x15c>
    28a6:	465b      	mov	r3, fp
    28a8:	2b00      	cmp	r3, #0
    28aa:	d100      	bne.n	28ae <__aeabi_ddiv+0x126>
    28ac:	e19e      	b.n	2bec <__aeabi_ddiv+0x464>
    28ae:	4658      	mov	r0, fp
    28b0:	f001 f8a0 	bl	39f4 <__clzsi2>
    28b4:	0003      	movs	r3, r0
    28b6:	3b0b      	subs	r3, #11
    28b8:	2b1c      	cmp	r3, #28
    28ba:	dd00      	ble.n	28be <__aeabi_ddiv+0x136>
    28bc:	e18f      	b.n	2bde <__aeabi_ddiv+0x456>
    28be:	0002      	movs	r2, r0
    28c0:	4659      	mov	r1, fp
    28c2:	3a08      	subs	r2, #8
    28c4:	4091      	lsls	r1, r2
    28c6:	468b      	mov	fp, r1
    28c8:	211d      	movs	r1, #29
    28ca:	1acb      	subs	r3, r1, r3
    28cc:	4651      	mov	r1, sl
    28ce:	40d9      	lsrs	r1, r3
    28d0:	000b      	movs	r3, r1
    28d2:	4659      	mov	r1, fp
    28d4:	430b      	orrs	r3, r1
    28d6:	4651      	mov	r1, sl
    28d8:	469b      	mov	fp, r3
    28da:	4091      	lsls	r1, r2
    28dc:	4b26      	ldr	r3, [pc, #152]	; (2978 <__aeabi_ddiv+0x1f0>)
    28de:	2200      	movs	r2, #0
    28e0:	1a1b      	subs	r3, r3, r0
    28e2:	e78f      	b.n	2804 <__aeabi_ddiv+0x7c>
    28e4:	2300      	movs	r3, #0
    28e6:	2201      	movs	r2, #1
    28e8:	469b      	mov	fp, r3
    28ea:	e78b      	b.n	2804 <__aeabi_ddiv+0x7c>
    28ec:	4651      	mov	r1, sl
    28ee:	2203      	movs	r2, #3
    28f0:	e788      	b.n	2804 <__aeabi_ddiv+0x7c>
    28f2:	2300      	movs	r3, #0
    28f4:	4698      	mov	r8, r3
    28f6:	3301      	adds	r3, #1
    28f8:	2604      	movs	r6, #4
    28fa:	2400      	movs	r4, #0
    28fc:	9303      	str	r3, [sp, #12]
    28fe:	e767      	b.n	27d0 <__aeabi_ddiv+0x48>
    2900:	2303      	movs	r3, #3
    2902:	46b1      	mov	r9, r6
    2904:	9303      	str	r3, [sp, #12]
    2906:	260c      	movs	r6, #12
    2908:	e762      	b.n	27d0 <__aeabi_ddiv+0x48>
    290a:	2a03      	cmp	r2, #3
    290c:	d100      	bne.n	2910 <__aeabi_ddiv+0x188>
    290e:	e25c      	b.n	2dca <__aeabi_ddiv+0x642>
    2910:	9b01      	ldr	r3, [sp, #4]
    2912:	2a01      	cmp	r2, #1
    2914:	d000      	beq.n	2918 <__aeabi_ddiv+0x190>
    2916:	e1e4      	b.n	2ce2 <__aeabi_ddiv+0x55a>
    2918:	4013      	ands	r3, r2
    291a:	469c      	mov	ip, r3
    291c:	2300      	movs	r3, #0
    291e:	2400      	movs	r4, #0
    2920:	2200      	movs	r2, #0
    2922:	4698      	mov	r8, r3
    2924:	2100      	movs	r1, #0
    2926:	0312      	lsls	r2, r2, #12
    2928:	0b13      	lsrs	r3, r2, #12
    292a:	0d0a      	lsrs	r2, r1, #20
    292c:	0512      	lsls	r2, r2, #20
    292e:	431a      	orrs	r2, r3
    2930:	0523      	lsls	r3, r4, #20
    2932:	4c12      	ldr	r4, [pc, #72]	; (297c <__aeabi_ddiv+0x1f4>)
    2934:	4640      	mov	r0, r8
    2936:	4022      	ands	r2, r4
    2938:	4313      	orrs	r3, r2
    293a:	4662      	mov	r2, ip
    293c:	005b      	lsls	r3, r3, #1
    293e:	07d2      	lsls	r2, r2, #31
    2940:	085b      	lsrs	r3, r3, #1
    2942:	4313      	orrs	r3, r2
    2944:	0019      	movs	r1, r3
    2946:	b007      	add	sp, #28
    2948:	bc3c      	pop	{r2, r3, r4, r5}
    294a:	4690      	mov	r8, r2
    294c:	4699      	mov	r9, r3
    294e:	46a2      	mov	sl, r4
    2950:	46ab      	mov	fp, r5
    2952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2954:	2300      	movs	r3, #0
    2956:	2280      	movs	r2, #128	; 0x80
    2958:	469c      	mov	ip, r3
    295a:	0312      	lsls	r2, r2, #12
    295c:	4698      	mov	r8, r3
    295e:	4c03      	ldr	r4, [pc, #12]	; (296c <__aeabi_ddiv+0x1e4>)
    2960:	e7e0      	b.n	2924 <__aeabi_ddiv+0x19c>
    2962:	2300      	movs	r3, #0
    2964:	4c01      	ldr	r4, [pc, #4]	; (296c <__aeabi_ddiv+0x1e4>)
    2966:	2200      	movs	r2, #0
    2968:	4698      	mov	r8, r3
    296a:	e7db      	b.n	2924 <__aeabi_ddiv+0x19c>
    296c:	000007ff 	.word	0x000007ff
    2970:	fffffc01 	.word	0xfffffc01
    2974:	00003bc4 	.word	0x00003bc4
    2978:	fffffc0d 	.word	0xfffffc0d
    297c:	800fffff 	.word	0x800fffff
    2980:	45d9      	cmp	r9, fp
    2982:	d900      	bls.n	2986 <__aeabi_ddiv+0x1fe>
    2984:	e139      	b.n	2bfa <__aeabi_ddiv+0x472>
    2986:	d100      	bne.n	298a <__aeabi_ddiv+0x202>
    2988:	e134      	b.n	2bf4 <__aeabi_ddiv+0x46c>
    298a:	2300      	movs	r3, #0
    298c:	4646      	mov	r6, r8
    298e:	464d      	mov	r5, r9
    2990:	469a      	mov	sl, r3
    2992:	3c01      	subs	r4, #1
    2994:	465b      	mov	r3, fp
    2996:	0e0a      	lsrs	r2, r1, #24
    2998:	021b      	lsls	r3, r3, #8
    299a:	431a      	orrs	r2, r3
    299c:	020b      	lsls	r3, r1, #8
    299e:	0c17      	lsrs	r7, r2, #16
    29a0:	9303      	str	r3, [sp, #12]
    29a2:	0413      	lsls	r3, r2, #16
    29a4:	0c1b      	lsrs	r3, r3, #16
    29a6:	0039      	movs	r1, r7
    29a8:	0028      	movs	r0, r5
    29aa:	4690      	mov	r8, r2
    29ac:	9301      	str	r3, [sp, #4]
    29ae:	f7ff fb25 	bl	1ffc <__udivsi3>
    29b2:	0002      	movs	r2, r0
    29b4:	9b01      	ldr	r3, [sp, #4]
    29b6:	4683      	mov	fp, r0
    29b8:	435a      	muls	r2, r3
    29ba:	0028      	movs	r0, r5
    29bc:	0039      	movs	r1, r7
    29be:	4691      	mov	r9, r2
    29c0:	f7ff fba2 	bl	2108 <__aeabi_uidivmod>
    29c4:	0c35      	lsrs	r5, r6, #16
    29c6:	0409      	lsls	r1, r1, #16
    29c8:	430d      	orrs	r5, r1
    29ca:	45a9      	cmp	r9, r5
    29cc:	d90d      	bls.n	29ea <__aeabi_ddiv+0x262>
    29ce:	465b      	mov	r3, fp
    29d0:	4445      	add	r5, r8
    29d2:	3b01      	subs	r3, #1
    29d4:	45a8      	cmp	r8, r5
    29d6:	d900      	bls.n	29da <__aeabi_ddiv+0x252>
    29d8:	e13a      	b.n	2c50 <__aeabi_ddiv+0x4c8>
    29da:	45a9      	cmp	r9, r5
    29dc:	d800      	bhi.n	29e0 <__aeabi_ddiv+0x258>
    29de:	e137      	b.n	2c50 <__aeabi_ddiv+0x4c8>
    29e0:	2302      	movs	r3, #2
    29e2:	425b      	negs	r3, r3
    29e4:	469c      	mov	ip, r3
    29e6:	4445      	add	r5, r8
    29e8:	44e3      	add	fp, ip
    29ea:	464b      	mov	r3, r9
    29ec:	1aeb      	subs	r3, r5, r3
    29ee:	0039      	movs	r1, r7
    29f0:	0018      	movs	r0, r3
    29f2:	9304      	str	r3, [sp, #16]
    29f4:	f7ff fb02 	bl	1ffc <__udivsi3>
    29f8:	9b01      	ldr	r3, [sp, #4]
    29fa:	0005      	movs	r5, r0
    29fc:	4343      	muls	r3, r0
    29fe:	0039      	movs	r1, r7
    2a00:	9804      	ldr	r0, [sp, #16]
    2a02:	4699      	mov	r9, r3
    2a04:	f7ff fb80 	bl	2108 <__aeabi_uidivmod>
    2a08:	0433      	lsls	r3, r6, #16
    2a0a:	0409      	lsls	r1, r1, #16
    2a0c:	0c1b      	lsrs	r3, r3, #16
    2a0e:	430b      	orrs	r3, r1
    2a10:	4599      	cmp	r9, r3
    2a12:	d909      	bls.n	2a28 <__aeabi_ddiv+0x2a0>
    2a14:	4443      	add	r3, r8
    2a16:	1e6a      	subs	r2, r5, #1
    2a18:	4598      	cmp	r8, r3
    2a1a:	d900      	bls.n	2a1e <__aeabi_ddiv+0x296>
    2a1c:	e11a      	b.n	2c54 <__aeabi_ddiv+0x4cc>
    2a1e:	4599      	cmp	r9, r3
    2a20:	d800      	bhi.n	2a24 <__aeabi_ddiv+0x29c>
    2a22:	e117      	b.n	2c54 <__aeabi_ddiv+0x4cc>
    2a24:	3d02      	subs	r5, #2
    2a26:	4443      	add	r3, r8
    2a28:	464a      	mov	r2, r9
    2a2a:	1a9b      	subs	r3, r3, r2
    2a2c:	465a      	mov	r2, fp
    2a2e:	0412      	lsls	r2, r2, #16
    2a30:	432a      	orrs	r2, r5
    2a32:	9903      	ldr	r1, [sp, #12]
    2a34:	4693      	mov	fp, r2
    2a36:	0c10      	lsrs	r0, r2, #16
    2a38:	0c0a      	lsrs	r2, r1, #16
    2a3a:	4691      	mov	r9, r2
    2a3c:	0409      	lsls	r1, r1, #16
    2a3e:	465a      	mov	r2, fp
    2a40:	0c09      	lsrs	r1, r1, #16
    2a42:	464e      	mov	r6, r9
    2a44:	000d      	movs	r5, r1
    2a46:	0412      	lsls	r2, r2, #16
    2a48:	0c12      	lsrs	r2, r2, #16
    2a4a:	4345      	muls	r5, r0
    2a4c:	9105      	str	r1, [sp, #20]
    2a4e:	4351      	muls	r1, r2
    2a50:	4372      	muls	r2, r6
    2a52:	4370      	muls	r0, r6
    2a54:	1952      	adds	r2, r2, r5
    2a56:	0c0e      	lsrs	r6, r1, #16
    2a58:	18b2      	adds	r2, r6, r2
    2a5a:	4295      	cmp	r5, r2
    2a5c:	d903      	bls.n	2a66 <__aeabi_ddiv+0x2de>
    2a5e:	2580      	movs	r5, #128	; 0x80
    2a60:	026d      	lsls	r5, r5, #9
    2a62:	46ac      	mov	ip, r5
    2a64:	4460      	add	r0, ip
    2a66:	0c15      	lsrs	r5, r2, #16
    2a68:	0409      	lsls	r1, r1, #16
    2a6a:	0412      	lsls	r2, r2, #16
    2a6c:	0c09      	lsrs	r1, r1, #16
    2a6e:	1828      	adds	r0, r5, r0
    2a70:	1852      	adds	r2, r2, r1
    2a72:	4283      	cmp	r3, r0
    2a74:	d200      	bcs.n	2a78 <__aeabi_ddiv+0x2f0>
    2a76:	e0ce      	b.n	2c16 <__aeabi_ddiv+0x48e>
    2a78:	d100      	bne.n	2a7c <__aeabi_ddiv+0x2f4>
    2a7a:	e0c8      	b.n	2c0e <__aeabi_ddiv+0x486>
    2a7c:	1a1d      	subs	r5, r3, r0
    2a7e:	4653      	mov	r3, sl
    2a80:	1a9e      	subs	r6, r3, r2
    2a82:	45b2      	cmp	sl, r6
    2a84:	4192      	sbcs	r2, r2
    2a86:	4252      	negs	r2, r2
    2a88:	1aab      	subs	r3, r5, r2
    2a8a:	469a      	mov	sl, r3
    2a8c:	4598      	cmp	r8, r3
    2a8e:	d100      	bne.n	2a92 <__aeabi_ddiv+0x30a>
    2a90:	e117      	b.n	2cc2 <__aeabi_ddiv+0x53a>
    2a92:	0039      	movs	r1, r7
    2a94:	0018      	movs	r0, r3
    2a96:	f7ff fab1 	bl	1ffc <__udivsi3>
    2a9a:	9b01      	ldr	r3, [sp, #4]
    2a9c:	0005      	movs	r5, r0
    2a9e:	4343      	muls	r3, r0
    2aa0:	0039      	movs	r1, r7
    2aa2:	4650      	mov	r0, sl
    2aa4:	9304      	str	r3, [sp, #16]
    2aa6:	f7ff fb2f 	bl	2108 <__aeabi_uidivmod>
    2aaa:	9804      	ldr	r0, [sp, #16]
    2aac:	040b      	lsls	r3, r1, #16
    2aae:	0c31      	lsrs	r1, r6, #16
    2ab0:	4319      	orrs	r1, r3
    2ab2:	4288      	cmp	r0, r1
    2ab4:	d909      	bls.n	2aca <__aeabi_ddiv+0x342>
    2ab6:	4441      	add	r1, r8
    2ab8:	1e6b      	subs	r3, r5, #1
    2aba:	4588      	cmp	r8, r1
    2abc:	d900      	bls.n	2ac0 <__aeabi_ddiv+0x338>
    2abe:	e107      	b.n	2cd0 <__aeabi_ddiv+0x548>
    2ac0:	4288      	cmp	r0, r1
    2ac2:	d800      	bhi.n	2ac6 <__aeabi_ddiv+0x33e>
    2ac4:	e104      	b.n	2cd0 <__aeabi_ddiv+0x548>
    2ac6:	3d02      	subs	r5, #2
    2ac8:	4441      	add	r1, r8
    2aca:	9b04      	ldr	r3, [sp, #16]
    2acc:	1acb      	subs	r3, r1, r3
    2ace:	0018      	movs	r0, r3
    2ad0:	0039      	movs	r1, r7
    2ad2:	9304      	str	r3, [sp, #16]
    2ad4:	f7ff fa92 	bl	1ffc <__udivsi3>
    2ad8:	9b01      	ldr	r3, [sp, #4]
    2ada:	4682      	mov	sl, r0
    2adc:	4343      	muls	r3, r0
    2ade:	0039      	movs	r1, r7
    2ae0:	9804      	ldr	r0, [sp, #16]
    2ae2:	9301      	str	r3, [sp, #4]
    2ae4:	f7ff fb10 	bl	2108 <__aeabi_uidivmod>
    2ae8:	9801      	ldr	r0, [sp, #4]
    2aea:	040b      	lsls	r3, r1, #16
    2aec:	0431      	lsls	r1, r6, #16
    2aee:	0c09      	lsrs	r1, r1, #16
    2af0:	4319      	orrs	r1, r3
    2af2:	4288      	cmp	r0, r1
    2af4:	d90d      	bls.n	2b12 <__aeabi_ddiv+0x38a>
    2af6:	4653      	mov	r3, sl
    2af8:	4441      	add	r1, r8
    2afa:	3b01      	subs	r3, #1
    2afc:	4588      	cmp	r8, r1
    2afe:	d900      	bls.n	2b02 <__aeabi_ddiv+0x37a>
    2b00:	e0e8      	b.n	2cd4 <__aeabi_ddiv+0x54c>
    2b02:	4288      	cmp	r0, r1
    2b04:	d800      	bhi.n	2b08 <__aeabi_ddiv+0x380>
    2b06:	e0e5      	b.n	2cd4 <__aeabi_ddiv+0x54c>
    2b08:	2302      	movs	r3, #2
    2b0a:	425b      	negs	r3, r3
    2b0c:	469c      	mov	ip, r3
    2b0e:	4441      	add	r1, r8
    2b10:	44e2      	add	sl, ip
    2b12:	9b01      	ldr	r3, [sp, #4]
    2b14:	042d      	lsls	r5, r5, #16
    2b16:	1ace      	subs	r6, r1, r3
    2b18:	4651      	mov	r1, sl
    2b1a:	4329      	orrs	r1, r5
    2b1c:	9d05      	ldr	r5, [sp, #20]
    2b1e:	464f      	mov	r7, r9
    2b20:	002a      	movs	r2, r5
    2b22:	040b      	lsls	r3, r1, #16
    2b24:	0c08      	lsrs	r0, r1, #16
    2b26:	0c1b      	lsrs	r3, r3, #16
    2b28:	435a      	muls	r2, r3
    2b2a:	4345      	muls	r5, r0
    2b2c:	437b      	muls	r3, r7
    2b2e:	4378      	muls	r0, r7
    2b30:	195b      	adds	r3, r3, r5
    2b32:	0c17      	lsrs	r7, r2, #16
    2b34:	18fb      	adds	r3, r7, r3
    2b36:	429d      	cmp	r5, r3
    2b38:	d903      	bls.n	2b42 <__aeabi_ddiv+0x3ba>
    2b3a:	2580      	movs	r5, #128	; 0x80
    2b3c:	026d      	lsls	r5, r5, #9
    2b3e:	46ac      	mov	ip, r5
    2b40:	4460      	add	r0, ip
    2b42:	0c1d      	lsrs	r5, r3, #16
    2b44:	0412      	lsls	r2, r2, #16
    2b46:	041b      	lsls	r3, r3, #16
    2b48:	0c12      	lsrs	r2, r2, #16
    2b4a:	1828      	adds	r0, r5, r0
    2b4c:	189b      	adds	r3, r3, r2
    2b4e:	4286      	cmp	r6, r0
    2b50:	d200      	bcs.n	2b54 <__aeabi_ddiv+0x3cc>
    2b52:	e093      	b.n	2c7c <__aeabi_ddiv+0x4f4>
    2b54:	d100      	bne.n	2b58 <__aeabi_ddiv+0x3d0>
    2b56:	e08e      	b.n	2c76 <__aeabi_ddiv+0x4ee>
    2b58:	2301      	movs	r3, #1
    2b5a:	4319      	orrs	r1, r3
    2b5c:	4ba0      	ldr	r3, [pc, #640]	; (2de0 <__aeabi_ddiv+0x658>)
    2b5e:	18e3      	adds	r3, r4, r3
    2b60:	2b00      	cmp	r3, #0
    2b62:	dc00      	bgt.n	2b66 <__aeabi_ddiv+0x3de>
    2b64:	e099      	b.n	2c9a <__aeabi_ddiv+0x512>
    2b66:	074a      	lsls	r2, r1, #29
    2b68:	d000      	beq.n	2b6c <__aeabi_ddiv+0x3e4>
    2b6a:	e09e      	b.n	2caa <__aeabi_ddiv+0x522>
    2b6c:	465a      	mov	r2, fp
    2b6e:	01d2      	lsls	r2, r2, #7
    2b70:	d506      	bpl.n	2b80 <__aeabi_ddiv+0x3f8>
    2b72:	465a      	mov	r2, fp
    2b74:	4b9b      	ldr	r3, [pc, #620]	; (2de4 <__aeabi_ddiv+0x65c>)
    2b76:	401a      	ands	r2, r3
    2b78:	2380      	movs	r3, #128	; 0x80
    2b7a:	4693      	mov	fp, r2
    2b7c:	00db      	lsls	r3, r3, #3
    2b7e:	18e3      	adds	r3, r4, r3
    2b80:	4a99      	ldr	r2, [pc, #612]	; (2de8 <__aeabi_ddiv+0x660>)
    2b82:	4293      	cmp	r3, r2
    2b84:	dd68      	ble.n	2c58 <__aeabi_ddiv+0x4d0>
    2b86:	2301      	movs	r3, #1
    2b88:	9a02      	ldr	r2, [sp, #8]
    2b8a:	4c98      	ldr	r4, [pc, #608]	; (2dec <__aeabi_ddiv+0x664>)
    2b8c:	401a      	ands	r2, r3
    2b8e:	2300      	movs	r3, #0
    2b90:	4694      	mov	ip, r2
    2b92:	4698      	mov	r8, r3
    2b94:	2200      	movs	r2, #0
    2b96:	e6c5      	b.n	2924 <__aeabi_ddiv+0x19c>
    2b98:	2280      	movs	r2, #128	; 0x80
    2b9a:	464b      	mov	r3, r9
    2b9c:	0312      	lsls	r2, r2, #12
    2b9e:	4213      	tst	r3, r2
    2ba0:	d00a      	beq.n	2bb8 <__aeabi_ddiv+0x430>
    2ba2:	465b      	mov	r3, fp
    2ba4:	4213      	tst	r3, r2
    2ba6:	d106      	bne.n	2bb6 <__aeabi_ddiv+0x42e>
    2ba8:	431a      	orrs	r2, r3
    2baa:	0312      	lsls	r2, r2, #12
    2bac:	0b12      	lsrs	r2, r2, #12
    2bae:	46ac      	mov	ip, r5
    2bb0:	4688      	mov	r8, r1
    2bb2:	4c8e      	ldr	r4, [pc, #568]	; (2dec <__aeabi_ddiv+0x664>)
    2bb4:	e6b6      	b.n	2924 <__aeabi_ddiv+0x19c>
    2bb6:	464b      	mov	r3, r9
    2bb8:	431a      	orrs	r2, r3
    2bba:	0312      	lsls	r2, r2, #12
    2bbc:	0b12      	lsrs	r2, r2, #12
    2bbe:	46bc      	mov	ip, r7
    2bc0:	4c8a      	ldr	r4, [pc, #552]	; (2dec <__aeabi_ddiv+0x664>)
    2bc2:	e6af      	b.n	2924 <__aeabi_ddiv+0x19c>
    2bc4:	0003      	movs	r3, r0
    2bc6:	465a      	mov	r2, fp
    2bc8:	3b28      	subs	r3, #40	; 0x28
    2bca:	409a      	lsls	r2, r3
    2bcc:	2300      	movs	r3, #0
    2bce:	4691      	mov	r9, r2
    2bd0:	4698      	mov	r8, r3
    2bd2:	e657      	b.n	2884 <__aeabi_ddiv+0xfc>
    2bd4:	4658      	mov	r0, fp
    2bd6:	f000 ff0d 	bl	39f4 <__clzsi2>
    2bda:	3020      	adds	r0, #32
    2bdc:	e640      	b.n	2860 <__aeabi_ddiv+0xd8>
    2bde:	0003      	movs	r3, r0
    2be0:	4652      	mov	r2, sl
    2be2:	3b28      	subs	r3, #40	; 0x28
    2be4:	409a      	lsls	r2, r3
    2be6:	2100      	movs	r1, #0
    2be8:	4693      	mov	fp, r2
    2bea:	e677      	b.n	28dc <__aeabi_ddiv+0x154>
    2bec:	f000 ff02 	bl	39f4 <__clzsi2>
    2bf0:	3020      	adds	r0, #32
    2bf2:	e65f      	b.n	28b4 <__aeabi_ddiv+0x12c>
    2bf4:	4588      	cmp	r8, r1
    2bf6:	d200      	bcs.n	2bfa <__aeabi_ddiv+0x472>
    2bf8:	e6c7      	b.n	298a <__aeabi_ddiv+0x202>
    2bfa:	464b      	mov	r3, r9
    2bfc:	07de      	lsls	r6, r3, #31
    2bfe:	085d      	lsrs	r5, r3, #1
    2c00:	4643      	mov	r3, r8
    2c02:	085b      	lsrs	r3, r3, #1
    2c04:	431e      	orrs	r6, r3
    2c06:	4643      	mov	r3, r8
    2c08:	07db      	lsls	r3, r3, #31
    2c0a:	469a      	mov	sl, r3
    2c0c:	e6c2      	b.n	2994 <__aeabi_ddiv+0x20c>
    2c0e:	2500      	movs	r5, #0
    2c10:	4592      	cmp	sl, r2
    2c12:	d300      	bcc.n	2c16 <__aeabi_ddiv+0x48e>
    2c14:	e733      	b.n	2a7e <__aeabi_ddiv+0x2f6>
    2c16:	9e03      	ldr	r6, [sp, #12]
    2c18:	4659      	mov	r1, fp
    2c1a:	46b4      	mov	ip, r6
    2c1c:	44e2      	add	sl, ip
    2c1e:	45b2      	cmp	sl, r6
    2c20:	41ad      	sbcs	r5, r5
    2c22:	426d      	negs	r5, r5
    2c24:	4445      	add	r5, r8
    2c26:	18eb      	adds	r3, r5, r3
    2c28:	3901      	subs	r1, #1
    2c2a:	4598      	cmp	r8, r3
    2c2c:	d207      	bcs.n	2c3e <__aeabi_ddiv+0x4b6>
    2c2e:	4298      	cmp	r0, r3
    2c30:	d900      	bls.n	2c34 <__aeabi_ddiv+0x4ac>
    2c32:	e07f      	b.n	2d34 <__aeabi_ddiv+0x5ac>
    2c34:	d100      	bne.n	2c38 <__aeabi_ddiv+0x4b0>
    2c36:	e0bc      	b.n	2db2 <__aeabi_ddiv+0x62a>
    2c38:	1a1d      	subs	r5, r3, r0
    2c3a:	468b      	mov	fp, r1
    2c3c:	e71f      	b.n	2a7e <__aeabi_ddiv+0x2f6>
    2c3e:	4598      	cmp	r8, r3
    2c40:	d1fa      	bne.n	2c38 <__aeabi_ddiv+0x4b0>
    2c42:	9d03      	ldr	r5, [sp, #12]
    2c44:	4555      	cmp	r5, sl
    2c46:	d9f2      	bls.n	2c2e <__aeabi_ddiv+0x4a6>
    2c48:	4643      	mov	r3, r8
    2c4a:	468b      	mov	fp, r1
    2c4c:	1a1d      	subs	r5, r3, r0
    2c4e:	e716      	b.n	2a7e <__aeabi_ddiv+0x2f6>
    2c50:	469b      	mov	fp, r3
    2c52:	e6ca      	b.n	29ea <__aeabi_ddiv+0x262>
    2c54:	0015      	movs	r5, r2
    2c56:	e6e7      	b.n	2a28 <__aeabi_ddiv+0x2a0>
    2c58:	465a      	mov	r2, fp
    2c5a:	08c9      	lsrs	r1, r1, #3
    2c5c:	0752      	lsls	r2, r2, #29
    2c5e:	430a      	orrs	r2, r1
    2c60:	055b      	lsls	r3, r3, #21
    2c62:	4690      	mov	r8, r2
    2c64:	0d5c      	lsrs	r4, r3, #21
    2c66:	465a      	mov	r2, fp
    2c68:	2301      	movs	r3, #1
    2c6a:	9902      	ldr	r1, [sp, #8]
    2c6c:	0252      	lsls	r2, r2, #9
    2c6e:	4019      	ands	r1, r3
    2c70:	0b12      	lsrs	r2, r2, #12
    2c72:	468c      	mov	ip, r1
    2c74:	e656      	b.n	2924 <__aeabi_ddiv+0x19c>
    2c76:	2b00      	cmp	r3, #0
    2c78:	d100      	bne.n	2c7c <__aeabi_ddiv+0x4f4>
    2c7a:	e76f      	b.n	2b5c <__aeabi_ddiv+0x3d4>
    2c7c:	4446      	add	r6, r8
    2c7e:	1e4a      	subs	r2, r1, #1
    2c80:	45b0      	cmp	r8, r6
    2c82:	d929      	bls.n	2cd8 <__aeabi_ddiv+0x550>
    2c84:	0011      	movs	r1, r2
    2c86:	4286      	cmp	r6, r0
    2c88:	d000      	beq.n	2c8c <__aeabi_ddiv+0x504>
    2c8a:	e765      	b.n	2b58 <__aeabi_ddiv+0x3d0>
    2c8c:	9a03      	ldr	r2, [sp, #12]
    2c8e:	4293      	cmp	r3, r2
    2c90:	d000      	beq.n	2c94 <__aeabi_ddiv+0x50c>
    2c92:	e761      	b.n	2b58 <__aeabi_ddiv+0x3d0>
    2c94:	e762      	b.n	2b5c <__aeabi_ddiv+0x3d4>
    2c96:	2101      	movs	r1, #1
    2c98:	4249      	negs	r1, r1
    2c9a:	2001      	movs	r0, #1
    2c9c:	1ac2      	subs	r2, r0, r3
    2c9e:	2a38      	cmp	r2, #56	; 0x38
    2ca0:	dd21      	ble.n	2ce6 <__aeabi_ddiv+0x55e>
    2ca2:	9b02      	ldr	r3, [sp, #8]
    2ca4:	4003      	ands	r3, r0
    2ca6:	469c      	mov	ip, r3
    2ca8:	e638      	b.n	291c <__aeabi_ddiv+0x194>
    2caa:	220f      	movs	r2, #15
    2cac:	400a      	ands	r2, r1
    2cae:	2a04      	cmp	r2, #4
    2cb0:	d100      	bne.n	2cb4 <__aeabi_ddiv+0x52c>
    2cb2:	e75b      	b.n	2b6c <__aeabi_ddiv+0x3e4>
    2cb4:	000a      	movs	r2, r1
    2cb6:	1d11      	adds	r1, r2, #4
    2cb8:	4291      	cmp	r1, r2
    2cba:	4192      	sbcs	r2, r2
    2cbc:	4252      	negs	r2, r2
    2cbe:	4493      	add	fp, r2
    2cc0:	e754      	b.n	2b6c <__aeabi_ddiv+0x3e4>
    2cc2:	4b47      	ldr	r3, [pc, #284]	; (2de0 <__aeabi_ddiv+0x658>)
    2cc4:	18e3      	adds	r3, r4, r3
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	dde5      	ble.n	2c96 <__aeabi_ddiv+0x50e>
    2cca:	2201      	movs	r2, #1
    2ccc:	4252      	negs	r2, r2
    2cce:	e7f2      	b.n	2cb6 <__aeabi_ddiv+0x52e>
    2cd0:	001d      	movs	r5, r3
    2cd2:	e6fa      	b.n	2aca <__aeabi_ddiv+0x342>
    2cd4:	469a      	mov	sl, r3
    2cd6:	e71c      	b.n	2b12 <__aeabi_ddiv+0x38a>
    2cd8:	42b0      	cmp	r0, r6
    2cda:	d839      	bhi.n	2d50 <__aeabi_ddiv+0x5c8>
    2cdc:	d06e      	beq.n	2dbc <__aeabi_ddiv+0x634>
    2cde:	0011      	movs	r1, r2
    2ce0:	e73a      	b.n	2b58 <__aeabi_ddiv+0x3d0>
    2ce2:	9302      	str	r3, [sp, #8]
    2ce4:	e73a      	b.n	2b5c <__aeabi_ddiv+0x3d4>
    2ce6:	2a1f      	cmp	r2, #31
    2ce8:	dc3c      	bgt.n	2d64 <__aeabi_ddiv+0x5dc>
    2cea:	2320      	movs	r3, #32
    2cec:	1a9b      	subs	r3, r3, r2
    2cee:	000c      	movs	r4, r1
    2cf0:	4658      	mov	r0, fp
    2cf2:	4099      	lsls	r1, r3
    2cf4:	4098      	lsls	r0, r3
    2cf6:	1e4b      	subs	r3, r1, #1
    2cf8:	4199      	sbcs	r1, r3
    2cfa:	465b      	mov	r3, fp
    2cfc:	40d4      	lsrs	r4, r2
    2cfe:	40d3      	lsrs	r3, r2
    2d00:	4320      	orrs	r0, r4
    2d02:	4308      	orrs	r0, r1
    2d04:	001a      	movs	r2, r3
    2d06:	0743      	lsls	r3, r0, #29
    2d08:	d009      	beq.n	2d1e <__aeabi_ddiv+0x596>
    2d0a:	230f      	movs	r3, #15
    2d0c:	4003      	ands	r3, r0
    2d0e:	2b04      	cmp	r3, #4
    2d10:	d005      	beq.n	2d1e <__aeabi_ddiv+0x596>
    2d12:	0001      	movs	r1, r0
    2d14:	1d08      	adds	r0, r1, #4
    2d16:	4288      	cmp	r0, r1
    2d18:	419b      	sbcs	r3, r3
    2d1a:	425b      	negs	r3, r3
    2d1c:	18d2      	adds	r2, r2, r3
    2d1e:	0213      	lsls	r3, r2, #8
    2d20:	d53a      	bpl.n	2d98 <__aeabi_ddiv+0x610>
    2d22:	2301      	movs	r3, #1
    2d24:	9a02      	ldr	r2, [sp, #8]
    2d26:	2401      	movs	r4, #1
    2d28:	401a      	ands	r2, r3
    2d2a:	2300      	movs	r3, #0
    2d2c:	4694      	mov	ip, r2
    2d2e:	4698      	mov	r8, r3
    2d30:	2200      	movs	r2, #0
    2d32:	e5f7      	b.n	2924 <__aeabi_ddiv+0x19c>
    2d34:	2102      	movs	r1, #2
    2d36:	4249      	negs	r1, r1
    2d38:	468c      	mov	ip, r1
    2d3a:	9d03      	ldr	r5, [sp, #12]
    2d3c:	44e3      	add	fp, ip
    2d3e:	46ac      	mov	ip, r5
    2d40:	44e2      	add	sl, ip
    2d42:	45aa      	cmp	sl, r5
    2d44:	41ad      	sbcs	r5, r5
    2d46:	426d      	negs	r5, r5
    2d48:	4445      	add	r5, r8
    2d4a:	18ed      	adds	r5, r5, r3
    2d4c:	1a2d      	subs	r5, r5, r0
    2d4e:	e696      	b.n	2a7e <__aeabi_ddiv+0x2f6>
    2d50:	1e8a      	subs	r2, r1, #2
    2d52:	9903      	ldr	r1, [sp, #12]
    2d54:	004d      	lsls	r5, r1, #1
    2d56:	428d      	cmp	r5, r1
    2d58:	4189      	sbcs	r1, r1
    2d5a:	4249      	negs	r1, r1
    2d5c:	4441      	add	r1, r8
    2d5e:	1876      	adds	r6, r6, r1
    2d60:	9503      	str	r5, [sp, #12]
    2d62:	e78f      	b.n	2c84 <__aeabi_ddiv+0x4fc>
    2d64:	201f      	movs	r0, #31
    2d66:	4240      	negs	r0, r0
    2d68:	1ac3      	subs	r3, r0, r3
    2d6a:	4658      	mov	r0, fp
    2d6c:	40d8      	lsrs	r0, r3
    2d6e:	0003      	movs	r3, r0
    2d70:	2a20      	cmp	r2, #32
    2d72:	d028      	beq.n	2dc6 <__aeabi_ddiv+0x63e>
    2d74:	2040      	movs	r0, #64	; 0x40
    2d76:	465d      	mov	r5, fp
    2d78:	1a82      	subs	r2, r0, r2
    2d7a:	4095      	lsls	r5, r2
    2d7c:	4329      	orrs	r1, r5
    2d7e:	1e4a      	subs	r2, r1, #1
    2d80:	4191      	sbcs	r1, r2
    2d82:	4319      	orrs	r1, r3
    2d84:	2307      	movs	r3, #7
    2d86:	2200      	movs	r2, #0
    2d88:	400b      	ands	r3, r1
    2d8a:	d009      	beq.n	2da0 <__aeabi_ddiv+0x618>
    2d8c:	230f      	movs	r3, #15
    2d8e:	2200      	movs	r2, #0
    2d90:	400b      	ands	r3, r1
    2d92:	0008      	movs	r0, r1
    2d94:	2b04      	cmp	r3, #4
    2d96:	d1bd      	bne.n	2d14 <__aeabi_ddiv+0x58c>
    2d98:	0001      	movs	r1, r0
    2d9a:	0753      	lsls	r3, r2, #29
    2d9c:	0252      	lsls	r2, r2, #9
    2d9e:	0b12      	lsrs	r2, r2, #12
    2da0:	08c9      	lsrs	r1, r1, #3
    2da2:	4319      	orrs	r1, r3
    2da4:	2301      	movs	r3, #1
    2da6:	4688      	mov	r8, r1
    2da8:	9902      	ldr	r1, [sp, #8]
    2daa:	2400      	movs	r4, #0
    2dac:	4019      	ands	r1, r3
    2dae:	468c      	mov	ip, r1
    2db0:	e5b8      	b.n	2924 <__aeabi_ddiv+0x19c>
    2db2:	4552      	cmp	r2, sl
    2db4:	d8be      	bhi.n	2d34 <__aeabi_ddiv+0x5ac>
    2db6:	468b      	mov	fp, r1
    2db8:	2500      	movs	r5, #0
    2dba:	e660      	b.n	2a7e <__aeabi_ddiv+0x2f6>
    2dbc:	9d03      	ldr	r5, [sp, #12]
    2dbe:	429d      	cmp	r5, r3
    2dc0:	d3c6      	bcc.n	2d50 <__aeabi_ddiv+0x5c8>
    2dc2:	0011      	movs	r1, r2
    2dc4:	e762      	b.n	2c8c <__aeabi_ddiv+0x504>
    2dc6:	2500      	movs	r5, #0
    2dc8:	e7d8      	b.n	2d7c <__aeabi_ddiv+0x5f4>
    2dca:	2280      	movs	r2, #128	; 0x80
    2dcc:	465b      	mov	r3, fp
    2dce:	0312      	lsls	r2, r2, #12
    2dd0:	431a      	orrs	r2, r3
    2dd2:	9b01      	ldr	r3, [sp, #4]
    2dd4:	0312      	lsls	r2, r2, #12
    2dd6:	0b12      	lsrs	r2, r2, #12
    2dd8:	469c      	mov	ip, r3
    2dda:	4688      	mov	r8, r1
    2ddc:	4c03      	ldr	r4, [pc, #12]	; (2dec <__aeabi_ddiv+0x664>)
    2dde:	e5a1      	b.n	2924 <__aeabi_ddiv+0x19c>
    2de0:	000003ff 	.word	0x000003ff
    2de4:	feffffff 	.word	0xfeffffff
    2de8:	000007fe 	.word	0x000007fe
    2dec:	000007ff 	.word	0x000007ff

00002df0 <__aeabi_dmul>:
    2df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2df2:	4657      	mov	r7, sl
    2df4:	4645      	mov	r5, r8
    2df6:	46de      	mov	lr, fp
    2df8:	464e      	mov	r6, r9
    2dfa:	b5e0      	push	{r5, r6, r7, lr}
    2dfc:	030c      	lsls	r4, r1, #12
    2dfe:	4698      	mov	r8, r3
    2e00:	004e      	lsls	r6, r1, #1
    2e02:	0b23      	lsrs	r3, r4, #12
    2e04:	b087      	sub	sp, #28
    2e06:	0007      	movs	r7, r0
    2e08:	4692      	mov	sl, r2
    2e0a:	469b      	mov	fp, r3
    2e0c:	0d76      	lsrs	r6, r6, #21
    2e0e:	0fcd      	lsrs	r5, r1, #31
    2e10:	2e00      	cmp	r6, #0
    2e12:	d06b      	beq.n	2eec <__aeabi_dmul+0xfc>
    2e14:	4b6d      	ldr	r3, [pc, #436]	; (2fcc <__aeabi_dmul+0x1dc>)
    2e16:	429e      	cmp	r6, r3
    2e18:	d035      	beq.n	2e86 <__aeabi_dmul+0x96>
    2e1a:	2480      	movs	r4, #128	; 0x80
    2e1c:	465b      	mov	r3, fp
    2e1e:	0f42      	lsrs	r2, r0, #29
    2e20:	0424      	lsls	r4, r4, #16
    2e22:	00db      	lsls	r3, r3, #3
    2e24:	4314      	orrs	r4, r2
    2e26:	431c      	orrs	r4, r3
    2e28:	00c3      	lsls	r3, r0, #3
    2e2a:	4699      	mov	r9, r3
    2e2c:	4b68      	ldr	r3, [pc, #416]	; (2fd0 <__aeabi_dmul+0x1e0>)
    2e2e:	46a3      	mov	fp, r4
    2e30:	469c      	mov	ip, r3
    2e32:	2300      	movs	r3, #0
    2e34:	2700      	movs	r7, #0
    2e36:	4466      	add	r6, ip
    2e38:	9302      	str	r3, [sp, #8]
    2e3a:	4643      	mov	r3, r8
    2e3c:	031c      	lsls	r4, r3, #12
    2e3e:	005a      	lsls	r2, r3, #1
    2e40:	0fdb      	lsrs	r3, r3, #31
    2e42:	4650      	mov	r0, sl
    2e44:	0b24      	lsrs	r4, r4, #12
    2e46:	0d52      	lsrs	r2, r2, #21
    2e48:	4698      	mov	r8, r3
    2e4a:	d100      	bne.n	2e4e <__aeabi_dmul+0x5e>
    2e4c:	e076      	b.n	2f3c <__aeabi_dmul+0x14c>
    2e4e:	4b5f      	ldr	r3, [pc, #380]	; (2fcc <__aeabi_dmul+0x1dc>)
    2e50:	429a      	cmp	r2, r3
    2e52:	d06d      	beq.n	2f30 <__aeabi_dmul+0x140>
    2e54:	2380      	movs	r3, #128	; 0x80
    2e56:	0f41      	lsrs	r1, r0, #29
    2e58:	041b      	lsls	r3, r3, #16
    2e5a:	430b      	orrs	r3, r1
    2e5c:	495c      	ldr	r1, [pc, #368]	; (2fd0 <__aeabi_dmul+0x1e0>)
    2e5e:	00e4      	lsls	r4, r4, #3
    2e60:	468c      	mov	ip, r1
    2e62:	431c      	orrs	r4, r3
    2e64:	00c3      	lsls	r3, r0, #3
    2e66:	2000      	movs	r0, #0
    2e68:	4462      	add	r2, ip
    2e6a:	4641      	mov	r1, r8
    2e6c:	18b6      	adds	r6, r6, r2
    2e6e:	4069      	eors	r1, r5
    2e70:	1c72      	adds	r2, r6, #1
    2e72:	9101      	str	r1, [sp, #4]
    2e74:	4694      	mov	ip, r2
    2e76:	4307      	orrs	r7, r0
    2e78:	2f0f      	cmp	r7, #15
    2e7a:	d900      	bls.n	2e7e <__aeabi_dmul+0x8e>
    2e7c:	e0b0      	b.n	2fe0 <__aeabi_dmul+0x1f0>
    2e7e:	4a55      	ldr	r2, [pc, #340]	; (2fd4 <__aeabi_dmul+0x1e4>)
    2e80:	00bf      	lsls	r7, r7, #2
    2e82:	59d2      	ldr	r2, [r2, r7]
    2e84:	4697      	mov	pc, r2
    2e86:	465b      	mov	r3, fp
    2e88:	4303      	orrs	r3, r0
    2e8a:	4699      	mov	r9, r3
    2e8c:	d000      	beq.n	2e90 <__aeabi_dmul+0xa0>
    2e8e:	e087      	b.n	2fa0 <__aeabi_dmul+0x1b0>
    2e90:	2300      	movs	r3, #0
    2e92:	469b      	mov	fp, r3
    2e94:	3302      	adds	r3, #2
    2e96:	2708      	movs	r7, #8
    2e98:	9302      	str	r3, [sp, #8]
    2e9a:	e7ce      	b.n	2e3a <__aeabi_dmul+0x4a>
    2e9c:	4642      	mov	r2, r8
    2e9e:	9201      	str	r2, [sp, #4]
    2ea0:	2802      	cmp	r0, #2
    2ea2:	d067      	beq.n	2f74 <__aeabi_dmul+0x184>
    2ea4:	2803      	cmp	r0, #3
    2ea6:	d100      	bne.n	2eaa <__aeabi_dmul+0xba>
    2ea8:	e20e      	b.n	32c8 <__aeabi_dmul+0x4d8>
    2eaa:	2801      	cmp	r0, #1
    2eac:	d000      	beq.n	2eb0 <__aeabi_dmul+0xc0>
    2eae:	e162      	b.n	3176 <__aeabi_dmul+0x386>
    2eb0:	2300      	movs	r3, #0
    2eb2:	2400      	movs	r4, #0
    2eb4:	2200      	movs	r2, #0
    2eb6:	4699      	mov	r9, r3
    2eb8:	9901      	ldr	r1, [sp, #4]
    2eba:	4001      	ands	r1, r0
    2ebc:	b2cd      	uxtb	r5, r1
    2ebe:	2100      	movs	r1, #0
    2ec0:	0312      	lsls	r2, r2, #12
    2ec2:	0d0b      	lsrs	r3, r1, #20
    2ec4:	0b12      	lsrs	r2, r2, #12
    2ec6:	051b      	lsls	r3, r3, #20
    2ec8:	4313      	orrs	r3, r2
    2eca:	4a43      	ldr	r2, [pc, #268]	; (2fd8 <__aeabi_dmul+0x1e8>)
    2ecc:	0524      	lsls	r4, r4, #20
    2ece:	4013      	ands	r3, r2
    2ed0:	431c      	orrs	r4, r3
    2ed2:	0064      	lsls	r4, r4, #1
    2ed4:	07ed      	lsls	r5, r5, #31
    2ed6:	0864      	lsrs	r4, r4, #1
    2ed8:	432c      	orrs	r4, r5
    2eda:	4648      	mov	r0, r9
    2edc:	0021      	movs	r1, r4
    2ede:	b007      	add	sp, #28
    2ee0:	bc3c      	pop	{r2, r3, r4, r5}
    2ee2:	4690      	mov	r8, r2
    2ee4:	4699      	mov	r9, r3
    2ee6:	46a2      	mov	sl, r4
    2ee8:	46ab      	mov	fp, r5
    2eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eec:	4303      	orrs	r3, r0
    2eee:	4699      	mov	r9, r3
    2ef0:	d04f      	beq.n	2f92 <__aeabi_dmul+0x1a2>
    2ef2:	465b      	mov	r3, fp
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	d100      	bne.n	2efa <__aeabi_dmul+0x10a>
    2ef8:	e189      	b.n	320e <__aeabi_dmul+0x41e>
    2efa:	4658      	mov	r0, fp
    2efc:	f000 fd7a 	bl	39f4 <__clzsi2>
    2f00:	0003      	movs	r3, r0
    2f02:	3b0b      	subs	r3, #11
    2f04:	2b1c      	cmp	r3, #28
    2f06:	dd00      	ble.n	2f0a <__aeabi_dmul+0x11a>
    2f08:	e17a      	b.n	3200 <__aeabi_dmul+0x410>
    2f0a:	221d      	movs	r2, #29
    2f0c:	1ad3      	subs	r3, r2, r3
    2f0e:	003a      	movs	r2, r7
    2f10:	0001      	movs	r1, r0
    2f12:	465c      	mov	r4, fp
    2f14:	40da      	lsrs	r2, r3
    2f16:	3908      	subs	r1, #8
    2f18:	408c      	lsls	r4, r1
    2f1a:	0013      	movs	r3, r2
    2f1c:	408f      	lsls	r7, r1
    2f1e:	4323      	orrs	r3, r4
    2f20:	469b      	mov	fp, r3
    2f22:	46b9      	mov	r9, r7
    2f24:	2300      	movs	r3, #0
    2f26:	4e2d      	ldr	r6, [pc, #180]	; (2fdc <__aeabi_dmul+0x1ec>)
    2f28:	2700      	movs	r7, #0
    2f2a:	1a36      	subs	r6, r6, r0
    2f2c:	9302      	str	r3, [sp, #8]
    2f2e:	e784      	b.n	2e3a <__aeabi_dmul+0x4a>
    2f30:	4653      	mov	r3, sl
    2f32:	4323      	orrs	r3, r4
    2f34:	d12a      	bne.n	2f8c <__aeabi_dmul+0x19c>
    2f36:	2400      	movs	r4, #0
    2f38:	2002      	movs	r0, #2
    2f3a:	e796      	b.n	2e6a <__aeabi_dmul+0x7a>
    2f3c:	4653      	mov	r3, sl
    2f3e:	4323      	orrs	r3, r4
    2f40:	d020      	beq.n	2f84 <__aeabi_dmul+0x194>
    2f42:	2c00      	cmp	r4, #0
    2f44:	d100      	bne.n	2f48 <__aeabi_dmul+0x158>
    2f46:	e157      	b.n	31f8 <__aeabi_dmul+0x408>
    2f48:	0020      	movs	r0, r4
    2f4a:	f000 fd53 	bl	39f4 <__clzsi2>
    2f4e:	0003      	movs	r3, r0
    2f50:	3b0b      	subs	r3, #11
    2f52:	2b1c      	cmp	r3, #28
    2f54:	dd00      	ble.n	2f58 <__aeabi_dmul+0x168>
    2f56:	e149      	b.n	31ec <__aeabi_dmul+0x3fc>
    2f58:	211d      	movs	r1, #29
    2f5a:	1acb      	subs	r3, r1, r3
    2f5c:	4651      	mov	r1, sl
    2f5e:	0002      	movs	r2, r0
    2f60:	40d9      	lsrs	r1, r3
    2f62:	4653      	mov	r3, sl
    2f64:	3a08      	subs	r2, #8
    2f66:	4094      	lsls	r4, r2
    2f68:	4093      	lsls	r3, r2
    2f6a:	430c      	orrs	r4, r1
    2f6c:	4a1b      	ldr	r2, [pc, #108]	; (2fdc <__aeabi_dmul+0x1ec>)
    2f6e:	1a12      	subs	r2, r2, r0
    2f70:	2000      	movs	r0, #0
    2f72:	e77a      	b.n	2e6a <__aeabi_dmul+0x7a>
    2f74:	2501      	movs	r5, #1
    2f76:	9b01      	ldr	r3, [sp, #4]
    2f78:	4c14      	ldr	r4, [pc, #80]	; (2fcc <__aeabi_dmul+0x1dc>)
    2f7a:	401d      	ands	r5, r3
    2f7c:	2300      	movs	r3, #0
    2f7e:	2200      	movs	r2, #0
    2f80:	4699      	mov	r9, r3
    2f82:	e79c      	b.n	2ebe <__aeabi_dmul+0xce>
    2f84:	2400      	movs	r4, #0
    2f86:	2200      	movs	r2, #0
    2f88:	2001      	movs	r0, #1
    2f8a:	e76e      	b.n	2e6a <__aeabi_dmul+0x7a>
    2f8c:	4653      	mov	r3, sl
    2f8e:	2003      	movs	r0, #3
    2f90:	e76b      	b.n	2e6a <__aeabi_dmul+0x7a>
    2f92:	2300      	movs	r3, #0
    2f94:	469b      	mov	fp, r3
    2f96:	3301      	adds	r3, #1
    2f98:	2704      	movs	r7, #4
    2f9a:	2600      	movs	r6, #0
    2f9c:	9302      	str	r3, [sp, #8]
    2f9e:	e74c      	b.n	2e3a <__aeabi_dmul+0x4a>
    2fa0:	2303      	movs	r3, #3
    2fa2:	4681      	mov	r9, r0
    2fa4:	270c      	movs	r7, #12
    2fa6:	9302      	str	r3, [sp, #8]
    2fa8:	e747      	b.n	2e3a <__aeabi_dmul+0x4a>
    2faa:	2280      	movs	r2, #128	; 0x80
    2fac:	2300      	movs	r3, #0
    2fae:	2500      	movs	r5, #0
    2fb0:	0312      	lsls	r2, r2, #12
    2fb2:	4699      	mov	r9, r3
    2fb4:	4c05      	ldr	r4, [pc, #20]	; (2fcc <__aeabi_dmul+0x1dc>)
    2fb6:	e782      	b.n	2ebe <__aeabi_dmul+0xce>
    2fb8:	465c      	mov	r4, fp
    2fba:	464b      	mov	r3, r9
    2fbc:	9802      	ldr	r0, [sp, #8]
    2fbe:	e76f      	b.n	2ea0 <__aeabi_dmul+0xb0>
    2fc0:	465c      	mov	r4, fp
    2fc2:	464b      	mov	r3, r9
    2fc4:	9501      	str	r5, [sp, #4]
    2fc6:	9802      	ldr	r0, [sp, #8]
    2fc8:	e76a      	b.n	2ea0 <__aeabi_dmul+0xb0>
    2fca:	46c0      	nop			; (mov r8, r8)
    2fcc:	000007ff 	.word	0x000007ff
    2fd0:	fffffc01 	.word	0xfffffc01
    2fd4:	00003c04 	.word	0x00003c04
    2fd8:	800fffff 	.word	0x800fffff
    2fdc:	fffffc0d 	.word	0xfffffc0d
    2fe0:	464a      	mov	r2, r9
    2fe2:	4649      	mov	r1, r9
    2fe4:	0c17      	lsrs	r7, r2, #16
    2fe6:	0c1a      	lsrs	r2, r3, #16
    2fe8:	041b      	lsls	r3, r3, #16
    2fea:	0c1b      	lsrs	r3, r3, #16
    2fec:	0408      	lsls	r0, r1, #16
    2fee:	0019      	movs	r1, r3
    2ff0:	0c00      	lsrs	r0, r0, #16
    2ff2:	4341      	muls	r1, r0
    2ff4:	0015      	movs	r5, r2
    2ff6:	4688      	mov	r8, r1
    2ff8:	0019      	movs	r1, r3
    2ffa:	437d      	muls	r5, r7
    2ffc:	4379      	muls	r1, r7
    2ffe:	9503      	str	r5, [sp, #12]
    3000:	4689      	mov	r9, r1
    3002:	0029      	movs	r1, r5
    3004:	0015      	movs	r5, r2
    3006:	4345      	muls	r5, r0
    3008:	444d      	add	r5, r9
    300a:	9502      	str	r5, [sp, #8]
    300c:	4645      	mov	r5, r8
    300e:	0c2d      	lsrs	r5, r5, #16
    3010:	46aa      	mov	sl, r5
    3012:	9d02      	ldr	r5, [sp, #8]
    3014:	4455      	add	r5, sl
    3016:	45a9      	cmp	r9, r5
    3018:	d906      	bls.n	3028 <__aeabi_dmul+0x238>
    301a:	468a      	mov	sl, r1
    301c:	2180      	movs	r1, #128	; 0x80
    301e:	0249      	lsls	r1, r1, #9
    3020:	4689      	mov	r9, r1
    3022:	44ca      	add	sl, r9
    3024:	4651      	mov	r1, sl
    3026:	9103      	str	r1, [sp, #12]
    3028:	0c29      	lsrs	r1, r5, #16
    302a:	9104      	str	r1, [sp, #16]
    302c:	4641      	mov	r1, r8
    302e:	0409      	lsls	r1, r1, #16
    3030:	042d      	lsls	r5, r5, #16
    3032:	0c09      	lsrs	r1, r1, #16
    3034:	4688      	mov	r8, r1
    3036:	0029      	movs	r1, r5
    3038:	0c25      	lsrs	r5, r4, #16
    303a:	0424      	lsls	r4, r4, #16
    303c:	4441      	add	r1, r8
    303e:	0c24      	lsrs	r4, r4, #16
    3040:	9105      	str	r1, [sp, #20]
    3042:	0021      	movs	r1, r4
    3044:	4341      	muls	r1, r0
    3046:	4688      	mov	r8, r1
    3048:	0021      	movs	r1, r4
    304a:	4379      	muls	r1, r7
    304c:	468a      	mov	sl, r1
    304e:	4368      	muls	r0, r5
    3050:	4641      	mov	r1, r8
    3052:	4450      	add	r0, sl
    3054:	4681      	mov	r9, r0
    3056:	0c08      	lsrs	r0, r1, #16
    3058:	4448      	add	r0, r9
    305a:	436f      	muls	r7, r5
    305c:	4582      	cmp	sl, r0
    305e:	d903      	bls.n	3068 <__aeabi_dmul+0x278>
    3060:	2180      	movs	r1, #128	; 0x80
    3062:	0249      	lsls	r1, r1, #9
    3064:	4689      	mov	r9, r1
    3066:	444f      	add	r7, r9
    3068:	0c01      	lsrs	r1, r0, #16
    306a:	4689      	mov	r9, r1
    306c:	0039      	movs	r1, r7
    306e:	4449      	add	r1, r9
    3070:	9102      	str	r1, [sp, #8]
    3072:	4641      	mov	r1, r8
    3074:	040f      	lsls	r7, r1, #16
    3076:	9904      	ldr	r1, [sp, #16]
    3078:	0c3f      	lsrs	r7, r7, #16
    307a:	4688      	mov	r8, r1
    307c:	0400      	lsls	r0, r0, #16
    307e:	19c0      	adds	r0, r0, r7
    3080:	4480      	add	r8, r0
    3082:	4641      	mov	r1, r8
    3084:	9104      	str	r1, [sp, #16]
    3086:	4659      	mov	r1, fp
    3088:	0c0f      	lsrs	r7, r1, #16
    308a:	0409      	lsls	r1, r1, #16
    308c:	0c09      	lsrs	r1, r1, #16
    308e:	4688      	mov	r8, r1
    3090:	4359      	muls	r1, r3
    3092:	468a      	mov	sl, r1
    3094:	0039      	movs	r1, r7
    3096:	4351      	muls	r1, r2
    3098:	4689      	mov	r9, r1
    309a:	4641      	mov	r1, r8
    309c:	434a      	muls	r2, r1
    309e:	4651      	mov	r1, sl
    30a0:	0c09      	lsrs	r1, r1, #16
    30a2:	468b      	mov	fp, r1
    30a4:	437b      	muls	r3, r7
    30a6:	18d2      	adds	r2, r2, r3
    30a8:	445a      	add	r2, fp
    30aa:	4293      	cmp	r3, r2
    30ac:	d903      	bls.n	30b6 <__aeabi_dmul+0x2c6>
    30ae:	2380      	movs	r3, #128	; 0x80
    30b0:	025b      	lsls	r3, r3, #9
    30b2:	469b      	mov	fp, r3
    30b4:	44d9      	add	r9, fp
    30b6:	4651      	mov	r1, sl
    30b8:	0409      	lsls	r1, r1, #16
    30ba:	0c09      	lsrs	r1, r1, #16
    30bc:	468a      	mov	sl, r1
    30be:	4641      	mov	r1, r8
    30c0:	4361      	muls	r1, r4
    30c2:	437c      	muls	r4, r7
    30c4:	0c13      	lsrs	r3, r2, #16
    30c6:	0412      	lsls	r2, r2, #16
    30c8:	444b      	add	r3, r9
    30ca:	4452      	add	r2, sl
    30cc:	46a1      	mov	r9, r4
    30ce:	468a      	mov	sl, r1
    30d0:	003c      	movs	r4, r7
    30d2:	4641      	mov	r1, r8
    30d4:	436c      	muls	r4, r5
    30d6:	434d      	muls	r5, r1
    30d8:	4651      	mov	r1, sl
    30da:	444d      	add	r5, r9
    30dc:	0c0f      	lsrs	r7, r1, #16
    30de:	197d      	adds	r5, r7, r5
    30e0:	45a9      	cmp	r9, r5
    30e2:	d903      	bls.n	30ec <__aeabi_dmul+0x2fc>
    30e4:	2180      	movs	r1, #128	; 0x80
    30e6:	0249      	lsls	r1, r1, #9
    30e8:	4688      	mov	r8, r1
    30ea:	4444      	add	r4, r8
    30ec:	9f04      	ldr	r7, [sp, #16]
    30ee:	9903      	ldr	r1, [sp, #12]
    30f0:	46b8      	mov	r8, r7
    30f2:	4441      	add	r1, r8
    30f4:	468b      	mov	fp, r1
    30f6:	4583      	cmp	fp, r0
    30f8:	4180      	sbcs	r0, r0
    30fa:	4241      	negs	r1, r0
    30fc:	4688      	mov	r8, r1
    30fe:	4651      	mov	r1, sl
    3100:	0408      	lsls	r0, r1, #16
    3102:	042f      	lsls	r7, r5, #16
    3104:	0c00      	lsrs	r0, r0, #16
    3106:	183f      	adds	r7, r7, r0
    3108:	4658      	mov	r0, fp
    310a:	9902      	ldr	r1, [sp, #8]
    310c:	1810      	adds	r0, r2, r0
    310e:	4689      	mov	r9, r1
    3110:	4290      	cmp	r0, r2
    3112:	4192      	sbcs	r2, r2
    3114:	444f      	add	r7, r9
    3116:	46ba      	mov	sl, r7
    3118:	4252      	negs	r2, r2
    311a:	4699      	mov	r9, r3
    311c:	4693      	mov	fp, r2
    311e:	44c2      	add	sl, r8
    3120:	44d1      	add	r9, sl
    3122:	44cb      	add	fp, r9
    3124:	428f      	cmp	r7, r1
    3126:	41bf      	sbcs	r7, r7
    3128:	45c2      	cmp	sl, r8
    312a:	4189      	sbcs	r1, r1
    312c:	4599      	cmp	r9, r3
    312e:	419b      	sbcs	r3, r3
    3130:	4593      	cmp	fp, r2
    3132:	4192      	sbcs	r2, r2
    3134:	427f      	negs	r7, r7
    3136:	4249      	negs	r1, r1
    3138:	0c2d      	lsrs	r5, r5, #16
    313a:	4252      	negs	r2, r2
    313c:	430f      	orrs	r7, r1
    313e:	425b      	negs	r3, r3
    3140:	4313      	orrs	r3, r2
    3142:	197f      	adds	r7, r7, r5
    3144:	18ff      	adds	r7, r7, r3
    3146:	465b      	mov	r3, fp
    3148:	193c      	adds	r4, r7, r4
    314a:	0ddb      	lsrs	r3, r3, #23
    314c:	9a05      	ldr	r2, [sp, #20]
    314e:	0264      	lsls	r4, r4, #9
    3150:	431c      	orrs	r4, r3
    3152:	0243      	lsls	r3, r0, #9
    3154:	4313      	orrs	r3, r2
    3156:	1e5d      	subs	r5, r3, #1
    3158:	41ab      	sbcs	r3, r5
    315a:	465a      	mov	r2, fp
    315c:	0dc0      	lsrs	r0, r0, #23
    315e:	4303      	orrs	r3, r0
    3160:	0252      	lsls	r2, r2, #9
    3162:	4313      	orrs	r3, r2
    3164:	01e2      	lsls	r2, r4, #7
    3166:	d556      	bpl.n	3216 <__aeabi_dmul+0x426>
    3168:	2001      	movs	r0, #1
    316a:	085a      	lsrs	r2, r3, #1
    316c:	4003      	ands	r3, r0
    316e:	4313      	orrs	r3, r2
    3170:	07e2      	lsls	r2, r4, #31
    3172:	4313      	orrs	r3, r2
    3174:	0864      	lsrs	r4, r4, #1
    3176:	485a      	ldr	r0, [pc, #360]	; (32e0 <__aeabi_dmul+0x4f0>)
    3178:	4460      	add	r0, ip
    317a:	2800      	cmp	r0, #0
    317c:	dd4d      	ble.n	321a <__aeabi_dmul+0x42a>
    317e:	075a      	lsls	r2, r3, #29
    3180:	d009      	beq.n	3196 <__aeabi_dmul+0x3a6>
    3182:	220f      	movs	r2, #15
    3184:	401a      	ands	r2, r3
    3186:	2a04      	cmp	r2, #4
    3188:	d005      	beq.n	3196 <__aeabi_dmul+0x3a6>
    318a:	1d1a      	adds	r2, r3, #4
    318c:	429a      	cmp	r2, r3
    318e:	419b      	sbcs	r3, r3
    3190:	425b      	negs	r3, r3
    3192:	18e4      	adds	r4, r4, r3
    3194:	0013      	movs	r3, r2
    3196:	01e2      	lsls	r2, r4, #7
    3198:	d504      	bpl.n	31a4 <__aeabi_dmul+0x3b4>
    319a:	2080      	movs	r0, #128	; 0x80
    319c:	4a51      	ldr	r2, [pc, #324]	; (32e4 <__aeabi_dmul+0x4f4>)
    319e:	00c0      	lsls	r0, r0, #3
    31a0:	4014      	ands	r4, r2
    31a2:	4460      	add	r0, ip
    31a4:	4a50      	ldr	r2, [pc, #320]	; (32e8 <__aeabi_dmul+0x4f8>)
    31a6:	4290      	cmp	r0, r2
    31a8:	dd00      	ble.n	31ac <__aeabi_dmul+0x3bc>
    31aa:	e6e3      	b.n	2f74 <__aeabi_dmul+0x184>
    31ac:	2501      	movs	r5, #1
    31ae:	08db      	lsrs	r3, r3, #3
    31b0:	0762      	lsls	r2, r4, #29
    31b2:	431a      	orrs	r2, r3
    31b4:	0264      	lsls	r4, r4, #9
    31b6:	9b01      	ldr	r3, [sp, #4]
    31b8:	4691      	mov	r9, r2
    31ba:	0b22      	lsrs	r2, r4, #12
    31bc:	0544      	lsls	r4, r0, #21
    31be:	0d64      	lsrs	r4, r4, #21
    31c0:	401d      	ands	r5, r3
    31c2:	e67c      	b.n	2ebe <__aeabi_dmul+0xce>
    31c4:	2280      	movs	r2, #128	; 0x80
    31c6:	4659      	mov	r1, fp
    31c8:	0312      	lsls	r2, r2, #12
    31ca:	4211      	tst	r1, r2
    31cc:	d008      	beq.n	31e0 <__aeabi_dmul+0x3f0>
    31ce:	4214      	tst	r4, r2
    31d0:	d106      	bne.n	31e0 <__aeabi_dmul+0x3f0>
    31d2:	4322      	orrs	r2, r4
    31d4:	0312      	lsls	r2, r2, #12
    31d6:	0b12      	lsrs	r2, r2, #12
    31d8:	4645      	mov	r5, r8
    31da:	4699      	mov	r9, r3
    31dc:	4c43      	ldr	r4, [pc, #268]	; (32ec <__aeabi_dmul+0x4fc>)
    31de:	e66e      	b.n	2ebe <__aeabi_dmul+0xce>
    31e0:	465b      	mov	r3, fp
    31e2:	431a      	orrs	r2, r3
    31e4:	0312      	lsls	r2, r2, #12
    31e6:	0b12      	lsrs	r2, r2, #12
    31e8:	4c40      	ldr	r4, [pc, #256]	; (32ec <__aeabi_dmul+0x4fc>)
    31ea:	e668      	b.n	2ebe <__aeabi_dmul+0xce>
    31ec:	0003      	movs	r3, r0
    31ee:	4654      	mov	r4, sl
    31f0:	3b28      	subs	r3, #40	; 0x28
    31f2:	409c      	lsls	r4, r3
    31f4:	2300      	movs	r3, #0
    31f6:	e6b9      	b.n	2f6c <__aeabi_dmul+0x17c>
    31f8:	f000 fbfc 	bl	39f4 <__clzsi2>
    31fc:	3020      	adds	r0, #32
    31fe:	e6a6      	b.n	2f4e <__aeabi_dmul+0x15e>
    3200:	0003      	movs	r3, r0
    3202:	3b28      	subs	r3, #40	; 0x28
    3204:	409f      	lsls	r7, r3
    3206:	2300      	movs	r3, #0
    3208:	46bb      	mov	fp, r7
    320a:	4699      	mov	r9, r3
    320c:	e68a      	b.n	2f24 <__aeabi_dmul+0x134>
    320e:	f000 fbf1 	bl	39f4 <__clzsi2>
    3212:	3020      	adds	r0, #32
    3214:	e674      	b.n	2f00 <__aeabi_dmul+0x110>
    3216:	46b4      	mov	ip, r6
    3218:	e7ad      	b.n	3176 <__aeabi_dmul+0x386>
    321a:	2501      	movs	r5, #1
    321c:	1a2a      	subs	r2, r5, r0
    321e:	2a38      	cmp	r2, #56	; 0x38
    3220:	dd06      	ble.n	3230 <__aeabi_dmul+0x440>
    3222:	9b01      	ldr	r3, [sp, #4]
    3224:	2400      	movs	r4, #0
    3226:	401d      	ands	r5, r3
    3228:	2300      	movs	r3, #0
    322a:	2200      	movs	r2, #0
    322c:	4699      	mov	r9, r3
    322e:	e646      	b.n	2ebe <__aeabi_dmul+0xce>
    3230:	2a1f      	cmp	r2, #31
    3232:	dc21      	bgt.n	3278 <__aeabi_dmul+0x488>
    3234:	2520      	movs	r5, #32
    3236:	0020      	movs	r0, r4
    3238:	1aad      	subs	r5, r5, r2
    323a:	001e      	movs	r6, r3
    323c:	40ab      	lsls	r3, r5
    323e:	40a8      	lsls	r0, r5
    3240:	40d6      	lsrs	r6, r2
    3242:	1e5d      	subs	r5, r3, #1
    3244:	41ab      	sbcs	r3, r5
    3246:	4330      	orrs	r0, r6
    3248:	4318      	orrs	r0, r3
    324a:	40d4      	lsrs	r4, r2
    324c:	0743      	lsls	r3, r0, #29
    324e:	d009      	beq.n	3264 <__aeabi_dmul+0x474>
    3250:	230f      	movs	r3, #15
    3252:	4003      	ands	r3, r0
    3254:	2b04      	cmp	r3, #4
    3256:	d005      	beq.n	3264 <__aeabi_dmul+0x474>
    3258:	0003      	movs	r3, r0
    325a:	1d18      	adds	r0, r3, #4
    325c:	4298      	cmp	r0, r3
    325e:	419b      	sbcs	r3, r3
    3260:	425b      	negs	r3, r3
    3262:	18e4      	adds	r4, r4, r3
    3264:	0223      	lsls	r3, r4, #8
    3266:	d521      	bpl.n	32ac <__aeabi_dmul+0x4bc>
    3268:	2501      	movs	r5, #1
    326a:	9b01      	ldr	r3, [sp, #4]
    326c:	2401      	movs	r4, #1
    326e:	401d      	ands	r5, r3
    3270:	2300      	movs	r3, #0
    3272:	2200      	movs	r2, #0
    3274:	4699      	mov	r9, r3
    3276:	e622      	b.n	2ebe <__aeabi_dmul+0xce>
    3278:	251f      	movs	r5, #31
    327a:	0021      	movs	r1, r4
    327c:	426d      	negs	r5, r5
    327e:	1a28      	subs	r0, r5, r0
    3280:	40c1      	lsrs	r1, r0
    3282:	0008      	movs	r0, r1
    3284:	2a20      	cmp	r2, #32
    3286:	d01d      	beq.n	32c4 <__aeabi_dmul+0x4d4>
    3288:	355f      	adds	r5, #95	; 0x5f
    328a:	1aaa      	subs	r2, r5, r2
    328c:	4094      	lsls	r4, r2
    328e:	4323      	orrs	r3, r4
    3290:	1e5c      	subs	r4, r3, #1
    3292:	41a3      	sbcs	r3, r4
    3294:	2507      	movs	r5, #7
    3296:	4303      	orrs	r3, r0
    3298:	401d      	ands	r5, r3
    329a:	2200      	movs	r2, #0
    329c:	2d00      	cmp	r5, #0
    329e:	d009      	beq.n	32b4 <__aeabi_dmul+0x4c4>
    32a0:	220f      	movs	r2, #15
    32a2:	2400      	movs	r4, #0
    32a4:	401a      	ands	r2, r3
    32a6:	0018      	movs	r0, r3
    32a8:	2a04      	cmp	r2, #4
    32aa:	d1d6      	bne.n	325a <__aeabi_dmul+0x46a>
    32ac:	0003      	movs	r3, r0
    32ae:	0765      	lsls	r5, r4, #29
    32b0:	0264      	lsls	r4, r4, #9
    32b2:	0b22      	lsrs	r2, r4, #12
    32b4:	08db      	lsrs	r3, r3, #3
    32b6:	432b      	orrs	r3, r5
    32b8:	2501      	movs	r5, #1
    32ba:	4699      	mov	r9, r3
    32bc:	9b01      	ldr	r3, [sp, #4]
    32be:	2400      	movs	r4, #0
    32c0:	401d      	ands	r5, r3
    32c2:	e5fc      	b.n	2ebe <__aeabi_dmul+0xce>
    32c4:	2400      	movs	r4, #0
    32c6:	e7e2      	b.n	328e <__aeabi_dmul+0x49e>
    32c8:	2280      	movs	r2, #128	; 0x80
    32ca:	2501      	movs	r5, #1
    32cc:	0312      	lsls	r2, r2, #12
    32ce:	4322      	orrs	r2, r4
    32d0:	9901      	ldr	r1, [sp, #4]
    32d2:	0312      	lsls	r2, r2, #12
    32d4:	0b12      	lsrs	r2, r2, #12
    32d6:	400d      	ands	r5, r1
    32d8:	4699      	mov	r9, r3
    32da:	4c04      	ldr	r4, [pc, #16]	; (32ec <__aeabi_dmul+0x4fc>)
    32dc:	e5ef      	b.n	2ebe <__aeabi_dmul+0xce>
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	000003ff 	.word	0x000003ff
    32e4:	feffffff 	.word	0xfeffffff
    32e8:	000007fe 	.word	0x000007fe
    32ec:	000007ff 	.word	0x000007ff

000032f0 <__aeabi_dsub>:
    32f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32f2:	4646      	mov	r6, r8
    32f4:	46d6      	mov	lr, sl
    32f6:	464f      	mov	r7, r9
    32f8:	030c      	lsls	r4, r1, #12
    32fa:	b5c0      	push	{r6, r7, lr}
    32fc:	0fcd      	lsrs	r5, r1, #31
    32fe:	004e      	lsls	r6, r1, #1
    3300:	0a61      	lsrs	r1, r4, #9
    3302:	0f44      	lsrs	r4, r0, #29
    3304:	430c      	orrs	r4, r1
    3306:	00c1      	lsls	r1, r0, #3
    3308:	0058      	lsls	r0, r3, #1
    330a:	0d40      	lsrs	r0, r0, #21
    330c:	4684      	mov	ip, r0
    330e:	468a      	mov	sl, r1
    3310:	000f      	movs	r7, r1
    3312:	0319      	lsls	r1, r3, #12
    3314:	0f50      	lsrs	r0, r2, #29
    3316:	0a49      	lsrs	r1, r1, #9
    3318:	4301      	orrs	r1, r0
    331a:	48c6      	ldr	r0, [pc, #792]	; (3634 <__aeabi_dsub+0x344>)
    331c:	0d76      	lsrs	r6, r6, #21
    331e:	46a8      	mov	r8, r5
    3320:	0fdb      	lsrs	r3, r3, #31
    3322:	00d2      	lsls	r2, r2, #3
    3324:	4584      	cmp	ip, r0
    3326:	d100      	bne.n	332a <__aeabi_dsub+0x3a>
    3328:	e0d8      	b.n	34dc <__aeabi_dsub+0x1ec>
    332a:	2001      	movs	r0, #1
    332c:	4043      	eors	r3, r0
    332e:	42ab      	cmp	r3, r5
    3330:	d100      	bne.n	3334 <__aeabi_dsub+0x44>
    3332:	e0a6      	b.n	3482 <__aeabi_dsub+0x192>
    3334:	4660      	mov	r0, ip
    3336:	1a35      	subs	r5, r6, r0
    3338:	2d00      	cmp	r5, #0
    333a:	dc00      	bgt.n	333e <__aeabi_dsub+0x4e>
    333c:	e105      	b.n	354a <__aeabi_dsub+0x25a>
    333e:	2800      	cmp	r0, #0
    3340:	d110      	bne.n	3364 <__aeabi_dsub+0x74>
    3342:	000b      	movs	r3, r1
    3344:	4313      	orrs	r3, r2
    3346:	d100      	bne.n	334a <__aeabi_dsub+0x5a>
    3348:	e0d7      	b.n	34fa <__aeabi_dsub+0x20a>
    334a:	1e6b      	subs	r3, r5, #1
    334c:	2b00      	cmp	r3, #0
    334e:	d000      	beq.n	3352 <__aeabi_dsub+0x62>
    3350:	e14b      	b.n	35ea <__aeabi_dsub+0x2fa>
    3352:	4653      	mov	r3, sl
    3354:	1a9f      	subs	r7, r3, r2
    3356:	45ba      	cmp	sl, r7
    3358:	4180      	sbcs	r0, r0
    335a:	1a64      	subs	r4, r4, r1
    335c:	4240      	negs	r0, r0
    335e:	1a24      	subs	r4, r4, r0
    3360:	2601      	movs	r6, #1
    3362:	e01e      	b.n	33a2 <__aeabi_dsub+0xb2>
    3364:	4bb3      	ldr	r3, [pc, #716]	; (3634 <__aeabi_dsub+0x344>)
    3366:	429e      	cmp	r6, r3
    3368:	d048      	beq.n	33fc <__aeabi_dsub+0x10c>
    336a:	2380      	movs	r3, #128	; 0x80
    336c:	041b      	lsls	r3, r3, #16
    336e:	4319      	orrs	r1, r3
    3370:	2d38      	cmp	r5, #56	; 0x38
    3372:	dd00      	ble.n	3376 <__aeabi_dsub+0x86>
    3374:	e119      	b.n	35aa <__aeabi_dsub+0x2ba>
    3376:	2d1f      	cmp	r5, #31
    3378:	dd00      	ble.n	337c <__aeabi_dsub+0x8c>
    337a:	e14c      	b.n	3616 <__aeabi_dsub+0x326>
    337c:	2320      	movs	r3, #32
    337e:	000f      	movs	r7, r1
    3380:	1b5b      	subs	r3, r3, r5
    3382:	0010      	movs	r0, r2
    3384:	409a      	lsls	r2, r3
    3386:	409f      	lsls	r7, r3
    3388:	40e8      	lsrs	r0, r5
    338a:	1e53      	subs	r3, r2, #1
    338c:	419a      	sbcs	r2, r3
    338e:	40e9      	lsrs	r1, r5
    3390:	4307      	orrs	r7, r0
    3392:	4317      	orrs	r7, r2
    3394:	4653      	mov	r3, sl
    3396:	1bdf      	subs	r7, r3, r7
    3398:	1a61      	subs	r1, r4, r1
    339a:	45ba      	cmp	sl, r7
    339c:	41a4      	sbcs	r4, r4
    339e:	4264      	negs	r4, r4
    33a0:	1b0c      	subs	r4, r1, r4
    33a2:	0223      	lsls	r3, r4, #8
    33a4:	d400      	bmi.n	33a8 <__aeabi_dsub+0xb8>
    33a6:	e0c5      	b.n	3534 <__aeabi_dsub+0x244>
    33a8:	0264      	lsls	r4, r4, #9
    33aa:	0a65      	lsrs	r5, r4, #9
    33ac:	2d00      	cmp	r5, #0
    33ae:	d100      	bne.n	33b2 <__aeabi_dsub+0xc2>
    33b0:	e0f6      	b.n	35a0 <__aeabi_dsub+0x2b0>
    33b2:	0028      	movs	r0, r5
    33b4:	f000 fb1e 	bl	39f4 <__clzsi2>
    33b8:	0003      	movs	r3, r0
    33ba:	3b08      	subs	r3, #8
    33bc:	2b1f      	cmp	r3, #31
    33be:	dd00      	ble.n	33c2 <__aeabi_dsub+0xd2>
    33c0:	e0e9      	b.n	3596 <__aeabi_dsub+0x2a6>
    33c2:	2220      	movs	r2, #32
    33c4:	003c      	movs	r4, r7
    33c6:	1ad2      	subs	r2, r2, r3
    33c8:	409d      	lsls	r5, r3
    33ca:	40d4      	lsrs	r4, r2
    33cc:	409f      	lsls	r7, r3
    33ce:	4325      	orrs	r5, r4
    33d0:	429e      	cmp	r6, r3
    33d2:	dd00      	ble.n	33d6 <__aeabi_dsub+0xe6>
    33d4:	e0db      	b.n	358e <__aeabi_dsub+0x29e>
    33d6:	1b9e      	subs	r6, r3, r6
    33d8:	1c73      	adds	r3, r6, #1
    33da:	2b1f      	cmp	r3, #31
    33dc:	dd00      	ble.n	33e0 <__aeabi_dsub+0xf0>
    33de:	e10a      	b.n	35f6 <__aeabi_dsub+0x306>
    33e0:	2220      	movs	r2, #32
    33e2:	0038      	movs	r0, r7
    33e4:	1ad2      	subs	r2, r2, r3
    33e6:	0029      	movs	r1, r5
    33e8:	4097      	lsls	r7, r2
    33ea:	002c      	movs	r4, r5
    33ec:	4091      	lsls	r1, r2
    33ee:	40d8      	lsrs	r0, r3
    33f0:	1e7a      	subs	r2, r7, #1
    33f2:	4197      	sbcs	r7, r2
    33f4:	40dc      	lsrs	r4, r3
    33f6:	2600      	movs	r6, #0
    33f8:	4301      	orrs	r1, r0
    33fa:	430f      	orrs	r7, r1
    33fc:	077b      	lsls	r3, r7, #29
    33fe:	d009      	beq.n	3414 <__aeabi_dsub+0x124>
    3400:	230f      	movs	r3, #15
    3402:	403b      	ands	r3, r7
    3404:	2b04      	cmp	r3, #4
    3406:	d005      	beq.n	3414 <__aeabi_dsub+0x124>
    3408:	1d3b      	adds	r3, r7, #4
    340a:	42bb      	cmp	r3, r7
    340c:	41bf      	sbcs	r7, r7
    340e:	427f      	negs	r7, r7
    3410:	19e4      	adds	r4, r4, r7
    3412:	001f      	movs	r7, r3
    3414:	0223      	lsls	r3, r4, #8
    3416:	d525      	bpl.n	3464 <__aeabi_dsub+0x174>
    3418:	4b86      	ldr	r3, [pc, #536]	; (3634 <__aeabi_dsub+0x344>)
    341a:	3601      	adds	r6, #1
    341c:	429e      	cmp	r6, r3
    341e:	d100      	bne.n	3422 <__aeabi_dsub+0x132>
    3420:	e0af      	b.n	3582 <__aeabi_dsub+0x292>
    3422:	4b85      	ldr	r3, [pc, #532]	; (3638 <__aeabi_dsub+0x348>)
    3424:	2501      	movs	r5, #1
    3426:	401c      	ands	r4, r3
    3428:	4643      	mov	r3, r8
    342a:	0762      	lsls	r2, r4, #29
    342c:	08ff      	lsrs	r7, r7, #3
    342e:	0264      	lsls	r4, r4, #9
    3430:	0576      	lsls	r6, r6, #21
    3432:	4317      	orrs	r7, r2
    3434:	0b24      	lsrs	r4, r4, #12
    3436:	0d76      	lsrs	r6, r6, #21
    3438:	401d      	ands	r5, r3
    343a:	2100      	movs	r1, #0
    343c:	0324      	lsls	r4, r4, #12
    343e:	0b23      	lsrs	r3, r4, #12
    3440:	0d0c      	lsrs	r4, r1, #20
    3442:	4a7e      	ldr	r2, [pc, #504]	; (363c <__aeabi_dsub+0x34c>)
    3444:	0524      	lsls	r4, r4, #20
    3446:	431c      	orrs	r4, r3
    3448:	4014      	ands	r4, r2
    344a:	0533      	lsls	r3, r6, #20
    344c:	4323      	orrs	r3, r4
    344e:	005b      	lsls	r3, r3, #1
    3450:	07ed      	lsls	r5, r5, #31
    3452:	085b      	lsrs	r3, r3, #1
    3454:	432b      	orrs	r3, r5
    3456:	0038      	movs	r0, r7
    3458:	0019      	movs	r1, r3
    345a:	bc1c      	pop	{r2, r3, r4}
    345c:	4690      	mov	r8, r2
    345e:	4699      	mov	r9, r3
    3460:	46a2      	mov	sl, r4
    3462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3464:	2501      	movs	r5, #1
    3466:	4643      	mov	r3, r8
    3468:	0762      	lsls	r2, r4, #29
    346a:	08ff      	lsrs	r7, r7, #3
    346c:	4317      	orrs	r7, r2
    346e:	08e4      	lsrs	r4, r4, #3
    3470:	401d      	ands	r5, r3
    3472:	4b70      	ldr	r3, [pc, #448]	; (3634 <__aeabi_dsub+0x344>)
    3474:	429e      	cmp	r6, r3
    3476:	d036      	beq.n	34e6 <__aeabi_dsub+0x1f6>
    3478:	0324      	lsls	r4, r4, #12
    347a:	0576      	lsls	r6, r6, #21
    347c:	0b24      	lsrs	r4, r4, #12
    347e:	0d76      	lsrs	r6, r6, #21
    3480:	e7db      	b.n	343a <__aeabi_dsub+0x14a>
    3482:	4663      	mov	r3, ip
    3484:	1af3      	subs	r3, r6, r3
    3486:	2b00      	cmp	r3, #0
    3488:	dc00      	bgt.n	348c <__aeabi_dsub+0x19c>
    348a:	e094      	b.n	35b6 <__aeabi_dsub+0x2c6>
    348c:	4660      	mov	r0, ip
    348e:	2800      	cmp	r0, #0
    3490:	d035      	beq.n	34fe <__aeabi_dsub+0x20e>
    3492:	4868      	ldr	r0, [pc, #416]	; (3634 <__aeabi_dsub+0x344>)
    3494:	4286      	cmp	r6, r0
    3496:	d0b1      	beq.n	33fc <__aeabi_dsub+0x10c>
    3498:	2780      	movs	r7, #128	; 0x80
    349a:	043f      	lsls	r7, r7, #16
    349c:	4339      	orrs	r1, r7
    349e:	2b38      	cmp	r3, #56	; 0x38
    34a0:	dc00      	bgt.n	34a4 <__aeabi_dsub+0x1b4>
    34a2:	e0fd      	b.n	36a0 <__aeabi_dsub+0x3b0>
    34a4:	430a      	orrs	r2, r1
    34a6:	0017      	movs	r7, r2
    34a8:	2100      	movs	r1, #0
    34aa:	1e7a      	subs	r2, r7, #1
    34ac:	4197      	sbcs	r7, r2
    34ae:	4457      	add	r7, sl
    34b0:	4557      	cmp	r7, sl
    34b2:	4180      	sbcs	r0, r0
    34b4:	1909      	adds	r1, r1, r4
    34b6:	4244      	negs	r4, r0
    34b8:	190c      	adds	r4, r1, r4
    34ba:	0223      	lsls	r3, r4, #8
    34bc:	d53a      	bpl.n	3534 <__aeabi_dsub+0x244>
    34be:	4b5d      	ldr	r3, [pc, #372]	; (3634 <__aeabi_dsub+0x344>)
    34c0:	3601      	adds	r6, #1
    34c2:	429e      	cmp	r6, r3
    34c4:	d100      	bne.n	34c8 <__aeabi_dsub+0x1d8>
    34c6:	e14b      	b.n	3760 <__aeabi_dsub+0x470>
    34c8:	2201      	movs	r2, #1
    34ca:	4b5b      	ldr	r3, [pc, #364]	; (3638 <__aeabi_dsub+0x348>)
    34cc:	401c      	ands	r4, r3
    34ce:	087b      	lsrs	r3, r7, #1
    34d0:	4017      	ands	r7, r2
    34d2:	431f      	orrs	r7, r3
    34d4:	07e2      	lsls	r2, r4, #31
    34d6:	4317      	orrs	r7, r2
    34d8:	0864      	lsrs	r4, r4, #1
    34da:	e78f      	b.n	33fc <__aeabi_dsub+0x10c>
    34dc:	0008      	movs	r0, r1
    34de:	4310      	orrs	r0, r2
    34e0:	d000      	beq.n	34e4 <__aeabi_dsub+0x1f4>
    34e2:	e724      	b.n	332e <__aeabi_dsub+0x3e>
    34e4:	e721      	b.n	332a <__aeabi_dsub+0x3a>
    34e6:	0023      	movs	r3, r4
    34e8:	433b      	orrs	r3, r7
    34ea:	d100      	bne.n	34ee <__aeabi_dsub+0x1fe>
    34ec:	e1b9      	b.n	3862 <__aeabi_dsub+0x572>
    34ee:	2280      	movs	r2, #128	; 0x80
    34f0:	0312      	lsls	r2, r2, #12
    34f2:	4314      	orrs	r4, r2
    34f4:	0324      	lsls	r4, r4, #12
    34f6:	0b24      	lsrs	r4, r4, #12
    34f8:	e79f      	b.n	343a <__aeabi_dsub+0x14a>
    34fa:	002e      	movs	r6, r5
    34fc:	e77e      	b.n	33fc <__aeabi_dsub+0x10c>
    34fe:	0008      	movs	r0, r1
    3500:	4310      	orrs	r0, r2
    3502:	d100      	bne.n	3506 <__aeabi_dsub+0x216>
    3504:	e0ca      	b.n	369c <__aeabi_dsub+0x3ac>
    3506:	1e58      	subs	r0, r3, #1
    3508:	4684      	mov	ip, r0
    350a:	2800      	cmp	r0, #0
    350c:	d000      	beq.n	3510 <__aeabi_dsub+0x220>
    350e:	e0e7      	b.n	36e0 <__aeabi_dsub+0x3f0>
    3510:	4452      	add	r2, sl
    3512:	4552      	cmp	r2, sl
    3514:	4180      	sbcs	r0, r0
    3516:	1864      	adds	r4, r4, r1
    3518:	4240      	negs	r0, r0
    351a:	1824      	adds	r4, r4, r0
    351c:	0017      	movs	r7, r2
    351e:	2601      	movs	r6, #1
    3520:	0223      	lsls	r3, r4, #8
    3522:	d507      	bpl.n	3534 <__aeabi_dsub+0x244>
    3524:	2602      	movs	r6, #2
    3526:	e7cf      	b.n	34c8 <__aeabi_dsub+0x1d8>
    3528:	4664      	mov	r4, ip
    352a:	432c      	orrs	r4, r5
    352c:	d100      	bne.n	3530 <__aeabi_dsub+0x240>
    352e:	e1b3      	b.n	3898 <__aeabi_dsub+0x5a8>
    3530:	002c      	movs	r4, r5
    3532:	4667      	mov	r7, ip
    3534:	077b      	lsls	r3, r7, #29
    3536:	d000      	beq.n	353a <__aeabi_dsub+0x24a>
    3538:	e762      	b.n	3400 <__aeabi_dsub+0x110>
    353a:	0763      	lsls	r3, r4, #29
    353c:	08ff      	lsrs	r7, r7, #3
    353e:	431f      	orrs	r7, r3
    3540:	2501      	movs	r5, #1
    3542:	4643      	mov	r3, r8
    3544:	08e4      	lsrs	r4, r4, #3
    3546:	401d      	ands	r5, r3
    3548:	e793      	b.n	3472 <__aeabi_dsub+0x182>
    354a:	2d00      	cmp	r5, #0
    354c:	d178      	bne.n	3640 <__aeabi_dsub+0x350>
    354e:	1c75      	adds	r5, r6, #1
    3550:	056d      	lsls	r5, r5, #21
    3552:	0d6d      	lsrs	r5, r5, #21
    3554:	2d01      	cmp	r5, #1
    3556:	dc00      	bgt.n	355a <__aeabi_dsub+0x26a>
    3558:	e0f2      	b.n	3740 <__aeabi_dsub+0x450>
    355a:	4650      	mov	r0, sl
    355c:	1a80      	subs	r0, r0, r2
    355e:	4582      	cmp	sl, r0
    3560:	41bf      	sbcs	r7, r7
    3562:	1a65      	subs	r5, r4, r1
    3564:	427f      	negs	r7, r7
    3566:	1bed      	subs	r5, r5, r7
    3568:	4684      	mov	ip, r0
    356a:	0228      	lsls	r0, r5, #8
    356c:	d400      	bmi.n	3570 <__aeabi_dsub+0x280>
    356e:	e08c      	b.n	368a <__aeabi_dsub+0x39a>
    3570:	4650      	mov	r0, sl
    3572:	1a17      	subs	r7, r2, r0
    3574:	42ba      	cmp	r2, r7
    3576:	4192      	sbcs	r2, r2
    3578:	1b0c      	subs	r4, r1, r4
    357a:	4255      	negs	r5, r2
    357c:	1b65      	subs	r5, r4, r5
    357e:	4698      	mov	r8, r3
    3580:	e714      	b.n	33ac <__aeabi_dsub+0xbc>
    3582:	2501      	movs	r5, #1
    3584:	4643      	mov	r3, r8
    3586:	2400      	movs	r4, #0
    3588:	401d      	ands	r5, r3
    358a:	2700      	movs	r7, #0
    358c:	e755      	b.n	343a <__aeabi_dsub+0x14a>
    358e:	4c2a      	ldr	r4, [pc, #168]	; (3638 <__aeabi_dsub+0x348>)
    3590:	1af6      	subs	r6, r6, r3
    3592:	402c      	ands	r4, r5
    3594:	e732      	b.n	33fc <__aeabi_dsub+0x10c>
    3596:	003d      	movs	r5, r7
    3598:	3828      	subs	r0, #40	; 0x28
    359a:	4085      	lsls	r5, r0
    359c:	2700      	movs	r7, #0
    359e:	e717      	b.n	33d0 <__aeabi_dsub+0xe0>
    35a0:	0038      	movs	r0, r7
    35a2:	f000 fa27 	bl	39f4 <__clzsi2>
    35a6:	3020      	adds	r0, #32
    35a8:	e706      	b.n	33b8 <__aeabi_dsub+0xc8>
    35aa:	430a      	orrs	r2, r1
    35ac:	0017      	movs	r7, r2
    35ae:	2100      	movs	r1, #0
    35b0:	1e7a      	subs	r2, r7, #1
    35b2:	4197      	sbcs	r7, r2
    35b4:	e6ee      	b.n	3394 <__aeabi_dsub+0xa4>
    35b6:	2b00      	cmp	r3, #0
    35b8:	d000      	beq.n	35bc <__aeabi_dsub+0x2cc>
    35ba:	e0e5      	b.n	3788 <__aeabi_dsub+0x498>
    35bc:	1c73      	adds	r3, r6, #1
    35be:	469c      	mov	ip, r3
    35c0:	055b      	lsls	r3, r3, #21
    35c2:	0d5b      	lsrs	r3, r3, #21
    35c4:	2b01      	cmp	r3, #1
    35c6:	dc00      	bgt.n	35ca <__aeabi_dsub+0x2da>
    35c8:	e09f      	b.n	370a <__aeabi_dsub+0x41a>
    35ca:	4b1a      	ldr	r3, [pc, #104]	; (3634 <__aeabi_dsub+0x344>)
    35cc:	459c      	cmp	ip, r3
    35ce:	d100      	bne.n	35d2 <__aeabi_dsub+0x2e2>
    35d0:	e0c5      	b.n	375e <__aeabi_dsub+0x46e>
    35d2:	4452      	add	r2, sl
    35d4:	4552      	cmp	r2, sl
    35d6:	4180      	sbcs	r0, r0
    35d8:	1864      	adds	r4, r4, r1
    35da:	4240      	negs	r0, r0
    35dc:	1824      	adds	r4, r4, r0
    35de:	07e7      	lsls	r7, r4, #31
    35e0:	0852      	lsrs	r2, r2, #1
    35e2:	4317      	orrs	r7, r2
    35e4:	0864      	lsrs	r4, r4, #1
    35e6:	4666      	mov	r6, ip
    35e8:	e708      	b.n	33fc <__aeabi_dsub+0x10c>
    35ea:	4812      	ldr	r0, [pc, #72]	; (3634 <__aeabi_dsub+0x344>)
    35ec:	4285      	cmp	r5, r0
    35ee:	d100      	bne.n	35f2 <__aeabi_dsub+0x302>
    35f0:	e085      	b.n	36fe <__aeabi_dsub+0x40e>
    35f2:	001d      	movs	r5, r3
    35f4:	e6bc      	b.n	3370 <__aeabi_dsub+0x80>
    35f6:	0029      	movs	r1, r5
    35f8:	3e1f      	subs	r6, #31
    35fa:	40f1      	lsrs	r1, r6
    35fc:	2b20      	cmp	r3, #32
    35fe:	d100      	bne.n	3602 <__aeabi_dsub+0x312>
    3600:	e07f      	b.n	3702 <__aeabi_dsub+0x412>
    3602:	2240      	movs	r2, #64	; 0x40
    3604:	1ad3      	subs	r3, r2, r3
    3606:	409d      	lsls	r5, r3
    3608:	432f      	orrs	r7, r5
    360a:	1e7d      	subs	r5, r7, #1
    360c:	41af      	sbcs	r7, r5
    360e:	2400      	movs	r4, #0
    3610:	430f      	orrs	r7, r1
    3612:	2600      	movs	r6, #0
    3614:	e78e      	b.n	3534 <__aeabi_dsub+0x244>
    3616:	002b      	movs	r3, r5
    3618:	000f      	movs	r7, r1
    361a:	3b20      	subs	r3, #32
    361c:	40df      	lsrs	r7, r3
    361e:	2d20      	cmp	r5, #32
    3620:	d071      	beq.n	3706 <__aeabi_dsub+0x416>
    3622:	2340      	movs	r3, #64	; 0x40
    3624:	1b5d      	subs	r5, r3, r5
    3626:	40a9      	lsls	r1, r5
    3628:	430a      	orrs	r2, r1
    362a:	1e51      	subs	r1, r2, #1
    362c:	418a      	sbcs	r2, r1
    362e:	2100      	movs	r1, #0
    3630:	4317      	orrs	r7, r2
    3632:	e6af      	b.n	3394 <__aeabi_dsub+0xa4>
    3634:	000007ff 	.word	0x000007ff
    3638:	ff7fffff 	.word	0xff7fffff
    363c:	800fffff 	.word	0x800fffff
    3640:	2e00      	cmp	r6, #0
    3642:	d03e      	beq.n	36c2 <__aeabi_dsub+0x3d2>
    3644:	4eb3      	ldr	r6, [pc, #716]	; (3914 <__aeabi_dsub+0x624>)
    3646:	45b4      	cmp	ip, r6
    3648:	d045      	beq.n	36d6 <__aeabi_dsub+0x3e6>
    364a:	2680      	movs	r6, #128	; 0x80
    364c:	0436      	lsls	r6, r6, #16
    364e:	426d      	negs	r5, r5
    3650:	4334      	orrs	r4, r6
    3652:	2d38      	cmp	r5, #56	; 0x38
    3654:	dd00      	ble.n	3658 <__aeabi_dsub+0x368>
    3656:	e0a8      	b.n	37aa <__aeabi_dsub+0x4ba>
    3658:	2d1f      	cmp	r5, #31
    365a:	dd00      	ble.n	365e <__aeabi_dsub+0x36e>
    365c:	e11f      	b.n	389e <__aeabi_dsub+0x5ae>
    365e:	2620      	movs	r6, #32
    3660:	0027      	movs	r7, r4
    3662:	4650      	mov	r0, sl
    3664:	1b76      	subs	r6, r6, r5
    3666:	40b7      	lsls	r7, r6
    3668:	40e8      	lsrs	r0, r5
    366a:	4307      	orrs	r7, r0
    366c:	4650      	mov	r0, sl
    366e:	40b0      	lsls	r0, r6
    3670:	1e46      	subs	r6, r0, #1
    3672:	41b0      	sbcs	r0, r6
    3674:	40ec      	lsrs	r4, r5
    3676:	4338      	orrs	r0, r7
    3678:	1a17      	subs	r7, r2, r0
    367a:	42ba      	cmp	r2, r7
    367c:	4192      	sbcs	r2, r2
    367e:	1b0c      	subs	r4, r1, r4
    3680:	4252      	negs	r2, r2
    3682:	1aa4      	subs	r4, r4, r2
    3684:	4666      	mov	r6, ip
    3686:	4698      	mov	r8, r3
    3688:	e68b      	b.n	33a2 <__aeabi_dsub+0xb2>
    368a:	4664      	mov	r4, ip
    368c:	4667      	mov	r7, ip
    368e:	432c      	orrs	r4, r5
    3690:	d000      	beq.n	3694 <__aeabi_dsub+0x3a4>
    3692:	e68b      	b.n	33ac <__aeabi_dsub+0xbc>
    3694:	2500      	movs	r5, #0
    3696:	2600      	movs	r6, #0
    3698:	2700      	movs	r7, #0
    369a:	e6ea      	b.n	3472 <__aeabi_dsub+0x182>
    369c:	001e      	movs	r6, r3
    369e:	e6ad      	b.n	33fc <__aeabi_dsub+0x10c>
    36a0:	2b1f      	cmp	r3, #31
    36a2:	dc60      	bgt.n	3766 <__aeabi_dsub+0x476>
    36a4:	2720      	movs	r7, #32
    36a6:	1af8      	subs	r0, r7, r3
    36a8:	000f      	movs	r7, r1
    36aa:	4684      	mov	ip, r0
    36ac:	4087      	lsls	r7, r0
    36ae:	0010      	movs	r0, r2
    36b0:	40d8      	lsrs	r0, r3
    36b2:	4307      	orrs	r7, r0
    36b4:	4660      	mov	r0, ip
    36b6:	4082      	lsls	r2, r0
    36b8:	1e50      	subs	r0, r2, #1
    36ba:	4182      	sbcs	r2, r0
    36bc:	40d9      	lsrs	r1, r3
    36be:	4317      	orrs	r7, r2
    36c0:	e6f5      	b.n	34ae <__aeabi_dsub+0x1be>
    36c2:	0026      	movs	r6, r4
    36c4:	4650      	mov	r0, sl
    36c6:	4306      	orrs	r6, r0
    36c8:	d005      	beq.n	36d6 <__aeabi_dsub+0x3e6>
    36ca:	43ed      	mvns	r5, r5
    36cc:	2d00      	cmp	r5, #0
    36ce:	d0d3      	beq.n	3678 <__aeabi_dsub+0x388>
    36d0:	4e90      	ldr	r6, [pc, #576]	; (3914 <__aeabi_dsub+0x624>)
    36d2:	45b4      	cmp	ip, r6
    36d4:	d1bd      	bne.n	3652 <__aeabi_dsub+0x362>
    36d6:	000c      	movs	r4, r1
    36d8:	0017      	movs	r7, r2
    36da:	4666      	mov	r6, ip
    36dc:	4698      	mov	r8, r3
    36de:	e68d      	b.n	33fc <__aeabi_dsub+0x10c>
    36e0:	488c      	ldr	r0, [pc, #560]	; (3914 <__aeabi_dsub+0x624>)
    36e2:	4283      	cmp	r3, r0
    36e4:	d00b      	beq.n	36fe <__aeabi_dsub+0x40e>
    36e6:	4663      	mov	r3, ip
    36e8:	e6d9      	b.n	349e <__aeabi_dsub+0x1ae>
    36ea:	2d00      	cmp	r5, #0
    36ec:	d000      	beq.n	36f0 <__aeabi_dsub+0x400>
    36ee:	e096      	b.n	381e <__aeabi_dsub+0x52e>
    36f0:	0008      	movs	r0, r1
    36f2:	4310      	orrs	r0, r2
    36f4:	d100      	bne.n	36f8 <__aeabi_dsub+0x408>
    36f6:	e0e2      	b.n	38be <__aeabi_dsub+0x5ce>
    36f8:	000c      	movs	r4, r1
    36fa:	0017      	movs	r7, r2
    36fc:	4698      	mov	r8, r3
    36fe:	4e85      	ldr	r6, [pc, #532]	; (3914 <__aeabi_dsub+0x624>)
    3700:	e67c      	b.n	33fc <__aeabi_dsub+0x10c>
    3702:	2500      	movs	r5, #0
    3704:	e780      	b.n	3608 <__aeabi_dsub+0x318>
    3706:	2100      	movs	r1, #0
    3708:	e78e      	b.n	3628 <__aeabi_dsub+0x338>
    370a:	0023      	movs	r3, r4
    370c:	4650      	mov	r0, sl
    370e:	4303      	orrs	r3, r0
    3710:	2e00      	cmp	r6, #0
    3712:	d000      	beq.n	3716 <__aeabi_dsub+0x426>
    3714:	e0a8      	b.n	3868 <__aeabi_dsub+0x578>
    3716:	2b00      	cmp	r3, #0
    3718:	d100      	bne.n	371c <__aeabi_dsub+0x42c>
    371a:	e0de      	b.n	38da <__aeabi_dsub+0x5ea>
    371c:	000b      	movs	r3, r1
    371e:	4313      	orrs	r3, r2
    3720:	d100      	bne.n	3724 <__aeabi_dsub+0x434>
    3722:	e66b      	b.n	33fc <__aeabi_dsub+0x10c>
    3724:	4452      	add	r2, sl
    3726:	4552      	cmp	r2, sl
    3728:	4180      	sbcs	r0, r0
    372a:	1864      	adds	r4, r4, r1
    372c:	4240      	negs	r0, r0
    372e:	1824      	adds	r4, r4, r0
    3730:	0017      	movs	r7, r2
    3732:	0223      	lsls	r3, r4, #8
    3734:	d400      	bmi.n	3738 <__aeabi_dsub+0x448>
    3736:	e6fd      	b.n	3534 <__aeabi_dsub+0x244>
    3738:	4b77      	ldr	r3, [pc, #476]	; (3918 <__aeabi_dsub+0x628>)
    373a:	4666      	mov	r6, ip
    373c:	401c      	ands	r4, r3
    373e:	e65d      	b.n	33fc <__aeabi_dsub+0x10c>
    3740:	0025      	movs	r5, r4
    3742:	4650      	mov	r0, sl
    3744:	4305      	orrs	r5, r0
    3746:	2e00      	cmp	r6, #0
    3748:	d1cf      	bne.n	36ea <__aeabi_dsub+0x3fa>
    374a:	2d00      	cmp	r5, #0
    374c:	d14f      	bne.n	37ee <__aeabi_dsub+0x4fe>
    374e:	000c      	movs	r4, r1
    3750:	4314      	orrs	r4, r2
    3752:	d100      	bne.n	3756 <__aeabi_dsub+0x466>
    3754:	e0a0      	b.n	3898 <__aeabi_dsub+0x5a8>
    3756:	000c      	movs	r4, r1
    3758:	0017      	movs	r7, r2
    375a:	4698      	mov	r8, r3
    375c:	e64e      	b.n	33fc <__aeabi_dsub+0x10c>
    375e:	4666      	mov	r6, ip
    3760:	2400      	movs	r4, #0
    3762:	2700      	movs	r7, #0
    3764:	e685      	b.n	3472 <__aeabi_dsub+0x182>
    3766:	001f      	movs	r7, r3
    3768:	0008      	movs	r0, r1
    376a:	3f20      	subs	r7, #32
    376c:	40f8      	lsrs	r0, r7
    376e:	0007      	movs	r7, r0
    3770:	2b20      	cmp	r3, #32
    3772:	d100      	bne.n	3776 <__aeabi_dsub+0x486>
    3774:	e08e      	b.n	3894 <__aeabi_dsub+0x5a4>
    3776:	2040      	movs	r0, #64	; 0x40
    3778:	1ac3      	subs	r3, r0, r3
    377a:	4099      	lsls	r1, r3
    377c:	430a      	orrs	r2, r1
    377e:	1e51      	subs	r1, r2, #1
    3780:	418a      	sbcs	r2, r1
    3782:	2100      	movs	r1, #0
    3784:	4317      	orrs	r7, r2
    3786:	e692      	b.n	34ae <__aeabi_dsub+0x1be>
    3788:	2e00      	cmp	r6, #0
    378a:	d114      	bne.n	37b6 <__aeabi_dsub+0x4c6>
    378c:	0026      	movs	r6, r4
    378e:	4650      	mov	r0, sl
    3790:	4306      	orrs	r6, r0
    3792:	d062      	beq.n	385a <__aeabi_dsub+0x56a>
    3794:	43db      	mvns	r3, r3
    3796:	2b00      	cmp	r3, #0
    3798:	d15c      	bne.n	3854 <__aeabi_dsub+0x564>
    379a:	1887      	adds	r7, r0, r2
    379c:	4297      	cmp	r7, r2
    379e:	4192      	sbcs	r2, r2
    37a0:	1864      	adds	r4, r4, r1
    37a2:	4252      	negs	r2, r2
    37a4:	18a4      	adds	r4, r4, r2
    37a6:	4666      	mov	r6, ip
    37a8:	e687      	b.n	34ba <__aeabi_dsub+0x1ca>
    37aa:	4650      	mov	r0, sl
    37ac:	4320      	orrs	r0, r4
    37ae:	1e44      	subs	r4, r0, #1
    37b0:	41a0      	sbcs	r0, r4
    37b2:	2400      	movs	r4, #0
    37b4:	e760      	b.n	3678 <__aeabi_dsub+0x388>
    37b6:	4e57      	ldr	r6, [pc, #348]	; (3914 <__aeabi_dsub+0x624>)
    37b8:	45b4      	cmp	ip, r6
    37ba:	d04e      	beq.n	385a <__aeabi_dsub+0x56a>
    37bc:	2680      	movs	r6, #128	; 0x80
    37be:	0436      	lsls	r6, r6, #16
    37c0:	425b      	negs	r3, r3
    37c2:	4334      	orrs	r4, r6
    37c4:	2b38      	cmp	r3, #56	; 0x38
    37c6:	dd00      	ble.n	37ca <__aeabi_dsub+0x4da>
    37c8:	e07f      	b.n	38ca <__aeabi_dsub+0x5da>
    37ca:	2b1f      	cmp	r3, #31
    37cc:	dd00      	ble.n	37d0 <__aeabi_dsub+0x4e0>
    37ce:	e08b      	b.n	38e8 <__aeabi_dsub+0x5f8>
    37d0:	2620      	movs	r6, #32
    37d2:	0027      	movs	r7, r4
    37d4:	4650      	mov	r0, sl
    37d6:	1af6      	subs	r6, r6, r3
    37d8:	40b7      	lsls	r7, r6
    37da:	40d8      	lsrs	r0, r3
    37dc:	4307      	orrs	r7, r0
    37de:	4650      	mov	r0, sl
    37e0:	40b0      	lsls	r0, r6
    37e2:	1e46      	subs	r6, r0, #1
    37e4:	41b0      	sbcs	r0, r6
    37e6:	4307      	orrs	r7, r0
    37e8:	40dc      	lsrs	r4, r3
    37ea:	18bf      	adds	r7, r7, r2
    37ec:	e7d6      	b.n	379c <__aeabi_dsub+0x4ac>
    37ee:	000d      	movs	r5, r1
    37f0:	4315      	orrs	r5, r2
    37f2:	d100      	bne.n	37f6 <__aeabi_dsub+0x506>
    37f4:	e602      	b.n	33fc <__aeabi_dsub+0x10c>
    37f6:	4650      	mov	r0, sl
    37f8:	1a80      	subs	r0, r0, r2
    37fa:	4582      	cmp	sl, r0
    37fc:	41bf      	sbcs	r7, r7
    37fe:	1a65      	subs	r5, r4, r1
    3800:	427f      	negs	r7, r7
    3802:	1bed      	subs	r5, r5, r7
    3804:	4684      	mov	ip, r0
    3806:	0228      	lsls	r0, r5, #8
    3808:	d400      	bmi.n	380c <__aeabi_dsub+0x51c>
    380a:	e68d      	b.n	3528 <__aeabi_dsub+0x238>
    380c:	4650      	mov	r0, sl
    380e:	1a17      	subs	r7, r2, r0
    3810:	42ba      	cmp	r2, r7
    3812:	4192      	sbcs	r2, r2
    3814:	1b0c      	subs	r4, r1, r4
    3816:	4252      	negs	r2, r2
    3818:	1aa4      	subs	r4, r4, r2
    381a:	4698      	mov	r8, r3
    381c:	e5ee      	b.n	33fc <__aeabi_dsub+0x10c>
    381e:	000d      	movs	r5, r1
    3820:	4315      	orrs	r5, r2
    3822:	d100      	bne.n	3826 <__aeabi_dsub+0x536>
    3824:	e76b      	b.n	36fe <__aeabi_dsub+0x40e>
    3826:	4650      	mov	r0, sl
    3828:	0767      	lsls	r7, r4, #29
    382a:	08c0      	lsrs	r0, r0, #3
    382c:	4307      	orrs	r7, r0
    382e:	2080      	movs	r0, #128	; 0x80
    3830:	08e4      	lsrs	r4, r4, #3
    3832:	0300      	lsls	r0, r0, #12
    3834:	4204      	tst	r4, r0
    3836:	d007      	beq.n	3848 <__aeabi_dsub+0x558>
    3838:	08cd      	lsrs	r5, r1, #3
    383a:	4205      	tst	r5, r0
    383c:	d104      	bne.n	3848 <__aeabi_dsub+0x558>
    383e:	002c      	movs	r4, r5
    3840:	4698      	mov	r8, r3
    3842:	08d7      	lsrs	r7, r2, #3
    3844:	0749      	lsls	r1, r1, #29
    3846:	430f      	orrs	r7, r1
    3848:	0f7b      	lsrs	r3, r7, #29
    384a:	00e4      	lsls	r4, r4, #3
    384c:	431c      	orrs	r4, r3
    384e:	00ff      	lsls	r7, r7, #3
    3850:	4e30      	ldr	r6, [pc, #192]	; (3914 <__aeabi_dsub+0x624>)
    3852:	e5d3      	b.n	33fc <__aeabi_dsub+0x10c>
    3854:	4e2f      	ldr	r6, [pc, #188]	; (3914 <__aeabi_dsub+0x624>)
    3856:	45b4      	cmp	ip, r6
    3858:	d1b4      	bne.n	37c4 <__aeabi_dsub+0x4d4>
    385a:	000c      	movs	r4, r1
    385c:	0017      	movs	r7, r2
    385e:	4666      	mov	r6, ip
    3860:	e5cc      	b.n	33fc <__aeabi_dsub+0x10c>
    3862:	2700      	movs	r7, #0
    3864:	2400      	movs	r4, #0
    3866:	e5e8      	b.n	343a <__aeabi_dsub+0x14a>
    3868:	2b00      	cmp	r3, #0
    386a:	d039      	beq.n	38e0 <__aeabi_dsub+0x5f0>
    386c:	000b      	movs	r3, r1
    386e:	4313      	orrs	r3, r2
    3870:	d100      	bne.n	3874 <__aeabi_dsub+0x584>
    3872:	e744      	b.n	36fe <__aeabi_dsub+0x40e>
    3874:	08c0      	lsrs	r0, r0, #3
    3876:	0767      	lsls	r7, r4, #29
    3878:	4307      	orrs	r7, r0
    387a:	2080      	movs	r0, #128	; 0x80
    387c:	08e4      	lsrs	r4, r4, #3
    387e:	0300      	lsls	r0, r0, #12
    3880:	4204      	tst	r4, r0
    3882:	d0e1      	beq.n	3848 <__aeabi_dsub+0x558>
    3884:	08cb      	lsrs	r3, r1, #3
    3886:	4203      	tst	r3, r0
    3888:	d1de      	bne.n	3848 <__aeabi_dsub+0x558>
    388a:	08d7      	lsrs	r7, r2, #3
    388c:	0749      	lsls	r1, r1, #29
    388e:	430f      	orrs	r7, r1
    3890:	001c      	movs	r4, r3
    3892:	e7d9      	b.n	3848 <__aeabi_dsub+0x558>
    3894:	2100      	movs	r1, #0
    3896:	e771      	b.n	377c <__aeabi_dsub+0x48c>
    3898:	2500      	movs	r5, #0
    389a:	2700      	movs	r7, #0
    389c:	e5e9      	b.n	3472 <__aeabi_dsub+0x182>
    389e:	002e      	movs	r6, r5
    38a0:	0027      	movs	r7, r4
    38a2:	3e20      	subs	r6, #32
    38a4:	40f7      	lsrs	r7, r6
    38a6:	2d20      	cmp	r5, #32
    38a8:	d02f      	beq.n	390a <__aeabi_dsub+0x61a>
    38aa:	2640      	movs	r6, #64	; 0x40
    38ac:	1b75      	subs	r5, r6, r5
    38ae:	40ac      	lsls	r4, r5
    38b0:	4650      	mov	r0, sl
    38b2:	4320      	orrs	r0, r4
    38b4:	1e44      	subs	r4, r0, #1
    38b6:	41a0      	sbcs	r0, r4
    38b8:	2400      	movs	r4, #0
    38ba:	4338      	orrs	r0, r7
    38bc:	e6dc      	b.n	3678 <__aeabi_dsub+0x388>
    38be:	2480      	movs	r4, #128	; 0x80
    38c0:	2500      	movs	r5, #0
    38c2:	0324      	lsls	r4, r4, #12
    38c4:	4e13      	ldr	r6, [pc, #76]	; (3914 <__aeabi_dsub+0x624>)
    38c6:	2700      	movs	r7, #0
    38c8:	e5d3      	b.n	3472 <__aeabi_dsub+0x182>
    38ca:	4650      	mov	r0, sl
    38cc:	4320      	orrs	r0, r4
    38ce:	0007      	movs	r7, r0
    38d0:	1e78      	subs	r0, r7, #1
    38d2:	4187      	sbcs	r7, r0
    38d4:	2400      	movs	r4, #0
    38d6:	18bf      	adds	r7, r7, r2
    38d8:	e760      	b.n	379c <__aeabi_dsub+0x4ac>
    38da:	000c      	movs	r4, r1
    38dc:	0017      	movs	r7, r2
    38de:	e58d      	b.n	33fc <__aeabi_dsub+0x10c>
    38e0:	000c      	movs	r4, r1
    38e2:	0017      	movs	r7, r2
    38e4:	4e0b      	ldr	r6, [pc, #44]	; (3914 <__aeabi_dsub+0x624>)
    38e6:	e589      	b.n	33fc <__aeabi_dsub+0x10c>
    38e8:	001e      	movs	r6, r3
    38ea:	0027      	movs	r7, r4
    38ec:	3e20      	subs	r6, #32
    38ee:	40f7      	lsrs	r7, r6
    38f0:	2b20      	cmp	r3, #32
    38f2:	d00c      	beq.n	390e <__aeabi_dsub+0x61e>
    38f4:	2640      	movs	r6, #64	; 0x40
    38f6:	1af3      	subs	r3, r6, r3
    38f8:	409c      	lsls	r4, r3
    38fa:	4650      	mov	r0, sl
    38fc:	4320      	orrs	r0, r4
    38fe:	1e44      	subs	r4, r0, #1
    3900:	41a0      	sbcs	r0, r4
    3902:	4307      	orrs	r7, r0
    3904:	2400      	movs	r4, #0
    3906:	18bf      	adds	r7, r7, r2
    3908:	e748      	b.n	379c <__aeabi_dsub+0x4ac>
    390a:	2400      	movs	r4, #0
    390c:	e7d0      	b.n	38b0 <__aeabi_dsub+0x5c0>
    390e:	2400      	movs	r4, #0
    3910:	e7f3      	b.n	38fa <__aeabi_dsub+0x60a>
    3912:	46c0      	nop			; (mov r8, r8)
    3914:	000007ff 	.word	0x000007ff
    3918:	ff7fffff 	.word	0xff7fffff

0000391c <__aeabi_d2iz>:
    391c:	b530      	push	{r4, r5, lr}
    391e:	4d13      	ldr	r5, [pc, #76]	; (396c <__aeabi_d2iz+0x50>)
    3920:	030a      	lsls	r2, r1, #12
    3922:	004b      	lsls	r3, r1, #1
    3924:	0b12      	lsrs	r2, r2, #12
    3926:	0d5b      	lsrs	r3, r3, #21
    3928:	0fc9      	lsrs	r1, r1, #31
    392a:	2400      	movs	r4, #0
    392c:	42ab      	cmp	r3, r5
    392e:	dd10      	ble.n	3952 <__aeabi_d2iz+0x36>
    3930:	4c0f      	ldr	r4, [pc, #60]	; (3970 <__aeabi_d2iz+0x54>)
    3932:	42a3      	cmp	r3, r4
    3934:	dc0f      	bgt.n	3956 <__aeabi_d2iz+0x3a>
    3936:	2480      	movs	r4, #128	; 0x80
    3938:	4d0e      	ldr	r5, [pc, #56]	; (3974 <__aeabi_d2iz+0x58>)
    393a:	0364      	lsls	r4, r4, #13
    393c:	4322      	orrs	r2, r4
    393e:	1aed      	subs	r5, r5, r3
    3940:	2d1f      	cmp	r5, #31
    3942:	dd0b      	ble.n	395c <__aeabi_d2iz+0x40>
    3944:	480c      	ldr	r0, [pc, #48]	; (3978 <__aeabi_d2iz+0x5c>)
    3946:	1ac3      	subs	r3, r0, r3
    3948:	40da      	lsrs	r2, r3
    394a:	4254      	negs	r4, r2
    394c:	2900      	cmp	r1, #0
    394e:	d100      	bne.n	3952 <__aeabi_d2iz+0x36>
    3950:	0014      	movs	r4, r2
    3952:	0020      	movs	r0, r4
    3954:	bd30      	pop	{r4, r5, pc}
    3956:	4b09      	ldr	r3, [pc, #36]	; (397c <__aeabi_d2iz+0x60>)
    3958:	18cc      	adds	r4, r1, r3
    395a:	e7fa      	b.n	3952 <__aeabi_d2iz+0x36>
    395c:	4c08      	ldr	r4, [pc, #32]	; (3980 <__aeabi_d2iz+0x64>)
    395e:	40e8      	lsrs	r0, r5
    3960:	46a4      	mov	ip, r4
    3962:	4463      	add	r3, ip
    3964:	409a      	lsls	r2, r3
    3966:	4302      	orrs	r2, r0
    3968:	e7ef      	b.n	394a <__aeabi_d2iz+0x2e>
    396a:	46c0      	nop			; (mov r8, r8)
    396c:	000003fe 	.word	0x000003fe
    3970:	0000041d 	.word	0x0000041d
    3974:	00000433 	.word	0x00000433
    3978:	00000413 	.word	0x00000413
    397c:	7fffffff 	.word	0x7fffffff
    3980:	fffffbed 	.word	0xfffffbed

00003984 <__aeabi_ui2d>:
    3984:	b510      	push	{r4, lr}
    3986:	1e04      	subs	r4, r0, #0
    3988:	d028      	beq.n	39dc <__aeabi_ui2d+0x58>
    398a:	f000 f833 	bl	39f4 <__clzsi2>
    398e:	4b15      	ldr	r3, [pc, #84]	; (39e4 <__aeabi_ui2d+0x60>)
    3990:	4a15      	ldr	r2, [pc, #84]	; (39e8 <__aeabi_ui2d+0x64>)
    3992:	1a1b      	subs	r3, r3, r0
    3994:	1ad2      	subs	r2, r2, r3
    3996:	2a1f      	cmp	r2, #31
    3998:	dd15      	ble.n	39c6 <__aeabi_ui2d+0x42>
    399a:	4a14      	ldr	r2, [pc, #80]	; (39ec <__aeabi_ui2d+0x68>)
    399c:	1ad2      	subs	r2, r2, r3
    399e:	4094      	lsls	r4, r2
    39a0:	2200      	movs	r2, #0
    39a2:	0324      	lsls	r4, r4, #12
    39a4:	055b      	lsls	r3, r3, #21
    39a6:	0b24      	lsrs	r4, r4, #12
    39a8:	0d5b      	lsrs	r3, r3, #21
    39aa:	2100      	movs	r1, #0
    39ac:	0010      	movs	r0, r2
    39ae:	0324      	lsls	r4, r4, #12
    39b0:	0d0a      	lsrs	r2, r1, #20
    39b2:	0b24      	lsrs	r4, r4, #12
    39b4:	0512      	lsls	r2, r2, #20
    39b6:	4322      	orrs	r2, r4
    39b8:	4c0d      	ldr	r4, [pc, #52]	; (39f0 <__aeabi_ui2d+0x6c>)
    39ba:	051b      	lsls	r3, r3, #20
    39bc:	4022      	ands	r2, r4
    39be:	4313      	orrs	r3, r2
    39c0:	005b      	lsls	r3, r3, #1
    39c2:	0859      	lsrs	r1, r3, #1
    39c4:	bd10      	pop	{r4, pc}
    39c6:	0021      	movs	r1, r4
    39c8:	4091      	lsls	r1, r2
    39ca:	000a      	movs	r2, r1
    39cc:	210b      	movs	r1, #11
    39ce:	1a08      	subs	r0, r1, r0
    39d0:	40c4      	lsrs	r4, r0
    39d2:	055b      	lsls	r3, r3, #21
    39d4:	0324      	lsls	r4, r4, #12
    39d6:	0b24      	lsrs	r4, r4, #12
    39d8:	0d5b      	lsrs	r3, r3, #21
    39da:	e7e6      	b.n	39aa <__aeabi_ui2d+0x26>
    39dc:	2300      	movs	r3, #0
    39de:	2400      	movs	r4, #0
    39e0:	2200      	movs	r2, #0
    39e2:	e7e2      	b.n	39aa <__aeabi_ui2d+0x26>
    39e4:	0000041e 	.word	0x0000041e
    39e8:	00000433 	.word	0x00000433
    39ec:	00000413 	.word	0x00000413
    39f0:	800fffff 	.word	0x800fffff

000039f4 <__clzsi2>:
    39f4:	211c      	movs	r1, #28
    39f6:	2301      	movs	r3, #1
    39f8:	041b      	lsls	r3, r3, #16
    39fa:	4298      	cmp	r0, r3
    39fc:	d301      	bcc.n	3a02 <__clzsi2+0xe>
    39fe:	0c00      	lsrs	r0, r0, #16
    3a00:	3910      	subs	r1, #16
    3a02:	0a1b      	lsrs	r3, r3, #8
    3a04:	4298      	cmp	r0, r3
    3a06:	d301      	bcc.n	3a0c <__clzsi2+0x18>
    3a08:	0a00      	lsrs	r0, r0, #8
    3a0a:	3908      	subs	r1, #8
    3a0c:	091b      	lsrs	r3, r3, #4
    3a0e:	4298      	cmp	r0, r3
    3a10:	d301      	bcc.n	3a16 <__clzsi2+0x22>
    3a12:	0900      	lsrs	r0, r0, #4
    3a14:	3904      	subs	r1, #4
    3a16:	a202      	add	r2, pc, #8	; (adr r2, 3a20 <__clzsi2+0x2c>)
    3a18:	5c10      	ldrb	r0, [r2, r0]
    3a1a:	1840      	adds	r0, r0, r1
    3a1c:	4770      	bx	lr
    3a1e:	46c0      	nop			; (mov r8, r8)
    3a20:	02020304 	.word	0x02020304
    3a24:	01010101 	.word	0x01010101
	...

00003a30 <__libc_init_array>:
    3a30:	b570      	push	{r4, r5, r6, lr}
    3a32:	2600      	movs	r6, #0
    3a34:	4d0c      	ldr	r5, [pc, #48]	; (3a68 <__libc_init_array+0x38>)
    3a36:	4c0d      	ldr	r4, [pc, #52]	; (3a6c <__libc_init_array+0x3c>)
    3a38:	1b64      	subs	r4, r4, r5
    3a3a:	10a4      	asrs	r4, r4, #2
    3a3c:	42a6      	cmp	r6, r4
    3a3e:	d109      	bne.n	3a54 <__libc_init_array+0x24>
    3a40:	2600      	movs	r6, #0
    3a42:	f000 f913 	bl	3c6c <_init>
    3a46:	4d0a      	ldr	r5, [pc, #40]	; (3a70 <__libc_init_array+0x40>)
    3a48:	4c0a      	ldr	r4, [pc, #40]	; (3a74 <__libc_init_array+0x44>)
    3a4a:	1b64      	subs	r4, r4, r5
    3a4c:	10a4      	asrs	r4, r4, #2
    3a4e:	42a6      	cmp	r6, r4
    3a50:	d105      	bne.n	3a5e <__libc_init_array+0x2e>
    3a52:	bd70      	pop	{r4, r5, r6, pc}
    3a54:	00b3      	lsls	r3, r6, #2
    3a56:	58eb      	ldr	r3, [r5, r3]
    3a58:	4798      	blx	r3
    3a5a:	3601      	adds	r6, #1
    3a5c:	e7ee      	b.n	3a3c <__libc_init_array+0xc>
    3a5e:	00b3      	lsls	r3, r6, #2
    3a60:	58eb      	ldr	r3, [r5, r3]
    3a62:	4798      	blx	r3
    3a64:	3601      	adds	r6, #1
    3a66:	e7f2      	b.n	3a4e <__libc_init_array+0x1e>
    3a68:	00003c78 	.word	0x00003c78
    3a6c:	00003c78 	.word	0x00003c78
    3a70:	00003c78 	.word	0x00003c78
    3a74:	00003c7c 	.word	0x00003c7c

00003a78 <__itoa>:
    3a78:	1e93      	subs	r3, r2, #2
    3a7a:	b510      	push	{r4, lr}
    3a7c:	000c      	movs	r4, r1
    3a7e:	2b22      	cmp	r3, #34	; 0x22
    3a80:	d904      	bls.n	3a8c <__itoa+0x14>
    3a82:	2300      	movs	r3, #0
    3a84:	001c      	movs	r4, r3
    3a86:	700b      	strb	r3, [r1, #0]
    3a88:	0020      	movs	r0, r4
    3a8a:	bd10      	pop	{r4, pc}
    3a8c:	2a0a      	cmp	r2, #10
    3a8e:	d109      	bne.n	3aa4 <__itoa+0x2c>
    3a90:	2800      	cmp	r0, #0
    3a92:	da07      	bge.n	3aa4 <__itoa+0x2c>
    3a94:	232d      	movs	r3, #45	; 0x2d
    3a96:	700b      	strb	r3, [r1, #0]
    3a98:	2101      	movs	r1, #1
    3a9a:	4240      	negs	r0, r0
    3a9c:	1861      	adds	r1, r4, r1
    3a9e:	f000 f817 	bl	3ad0 <__utoa>
    3aa2:	e7f1      	b.n	3a88 <__itoa+0x10>
    3aa4:	2100      	movs	r1, #0
    3aa6:	e7f9      	b.n	3a9c <__itoa+0x24>

00003aa8 <itoa>:
    3aa8:	b510      	push	{r4, lr}
    3aaa:	f7ff ffe5 	bl	3a78 <__itoa>
    3aae:	bd10      	pop	{r4, pc}

00003ab0 <memcpy>:
    3ab0:	2300      	movs	r3, #0
    3ab2:	b510      	push	{r4, lr}
    3ab4:	429a      	cmp	r2, r3
    3ab6:	d100      	bne.n	3aba <memcpy+0xa>
    3ab8:	bd10      	pop	{r4, pc}
    3aba:	5ccc      	ldrb	r4, [r1, r3]
    3abc:	54c4      	strb	r4, [r0, r3]
    3abe:	3301      	adds	r3, #1
    3ac0:	e7f8      	b.n	3ab4 <memcpy+0x4>

00003ac2 <strlen>:
    3ac2:	2300      	movs	r3, #0
    3ac4:	5cc2      	ldrb	r2, [r0, r3]
    3ac6:	3301      	adds	r3, #1
    3ac8:	2a00      	cmp	r2, #0
    3aca:	d1fb      	bne.n	3ac4 <strlen+0x2>
    3acc:	1e58      	subs	r0, r3, #1
    3ace:	4770      	bx	lr

00003ad0 <__utoa>:
    3ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ad2:	0017      	movs	r7, r2
    3ad4:	b08f      	sub	sp, #60	; 0x3c
    3ad6:	2225      	movs	r2, #37	; 0x25
    3ad8:	0006      	movs	r6, r0
    3ada:	000d      	movs	r5, r1
    3adc:	a804      	add	r0, sp, #16
    3ade:	4918      	ldr	r1, [pc, #96]	; (3b40 <__utoa+0x70>)
    3ae0:	f7ff ffe6 	bl	3ab0 <memcpy>
    3ae4:	aa04      	add	r2, sp, #16
    3ae6:	1ebb      	subs	r3, r7, #2
    3ae8:	2400      	movs	r4, #0
    3aea:	9203      	str	r2, [sp, #12]
    3aec:	2b22      	cmp	r3, #34	; 0x22
    3aee:	d905      	bls.n	3afc <__utoa+0x2c>
    3af0:	702c      	strb	r4, [r5, #0]
    3af2:	0025      	movs	r5, r4
    3af4:	0028      	movs	r0, r5
    3af6:	b00f      	add	sp, #60	; 0x3c
    3af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3afa:	9c01      	ldr	r4, [sp, #4]
    3afc:	1c63      	adds	r3, r4, #1
    3afe:	9301      	str	r3, [sp, #4]
    3b00:	18eb      	adds	r3, r5, r3
    3b02:	9300      	str	r3, [sp, #0]
    3b04:	0030      	movs	r0, r6
    3b06:	3b01      	subs	r3, #1
    3b08:	0039      	movs	r1, r7
    3b0a:	9302      	str	r3, [sp, #8]
    3b0c:	f7fe fafc 	bl	2108 <__aeabi_uidivmod>
    3b10:	9b03      	ldr	r3, [sp, #12]
    3b12:	9a02      	ldr	r2, [sp, #8]
    3b14:	5c5b      	ldrb	r3, [r3, r1]
    3b16:	0030      	movs	r0, r6
    3b18:	7013      	strb	r3, [r2, #0]
    3b1a:	0039      	movs	r1, r7
    3b1c:	f7fe fa6e 	bl	1ffc <__udivsi3>
    3b20:	1e06      	subs	r6, r0, #0
    3b22:	d1ea      	bne.n	3afa <__utoa+0x2a>
    3b24:	9b00      	ldr	r3, [sp, #0]
    3b26:	7018      	strb	r0, [r3, #0]
    3b28:	002b      	movs	r3, r5
    3b2a:	1b5a      	subs	r2, r3, r5
    3b2c:	4294      	cmp	r4, r2
    3b2e:	dde1      	ble.n	3af4 <__utoa+0x24>
    3b30:	781a      	ldrb	r2, [r3, #0]
    3b32:	5d29      	ldrb	r1, [r5, r4]
    3b34:	7019      	strb	r1, [r3, #0]
    3b36:	552a      	strb	r2, [r5, r4]
    3b38:	3301      	adds	r3, #1
    3b3a:	3c01      	subs	r4, #1
    3b3c:	e7f5      	b.n	3b2a <__utoa+0x5a>
    3b3e:	46c0      	nop			; (mov r8, r8)
    3b40:	00003c44 	.word	0x00003c44
    3b44:	42000800 	.word	0x42000800
    3b48:	42000c00 	.word	0x42000c00
    3b4c:	42001000 	.word	0x42001000
    3b50:	42001400 	.word	0x42001400
    3b54:	42001800 	.word	0x42001800
    3b58:	42001c00 	.word	0x42001c00
    3b5c:	00001616 	.word	0x00001616
    3b60:	00001612 	.word	0x00001612
    3b64:	00001612 	.word	0x00001612
    3b68:	00001674 	.word	0x00001674
    3b6c:	00001674 	.word	0x00001674
    3b70:	0000162a 	.word	0x0000162a
    3b74:	0000161c 	.word	0x0000161c
    3b78:	00001630 	.word	0x00001630
    3b7c:	00001662 	.word	0x00001662
    3b80:	000016fc 	.word	0x000016fc
    3b84:	000016dc 	.word	0x000016dc
    3b88:	000016dc 	.word	0x000016dc
    3b8c:	00001768 	.word	0x00001768
    3b90:	000016ee 	.word	0x000016ee
    3b94:	0000170a 	.word	0x0000170a
    3b98:	000016e0 	.word	0x000016e0
    3b9c:	00001718 	.word	0x00001718
    3ba0:	00001758 	.word	0x00001758
    3ba4:	00030057 	.word	0x00030057
    3ba8:	2000006c 	.word	0x2000006c
    3bac:	00000000 	.word	0x00000000
    3bb0:	0000000a 	.word	0x0000000a
    3bb4:	6c6c6548 	.word	0x6c6c6548
    3bb8:	6f57206f 	.word	0x6f57206f
    3bbc:	21646c72 	.word	0x21646c72
    3bc0:	00000a0d 	.word	0x00000a0d
    3bc4:	00002980 	.word	0x00002980
    3bc8:	00002962 	.word	0x00002962
    3bcc:	0000291c 	.word	0x0000291c
    3bd0:	0000283a 	.word	0x0000283a
    3bd4:	0000291c 	.word	0x0000291c
    3bd8:	00002954 	.word	0x00002954
    3bdc:	0000291c 	.word	0x0000291c
    3be0:	0000283a 	.word	0x0000283a
    3be4:	00002962 	.word	0x00002962
    3be8:	00002962 	.word	0x00002962
    3bec:	00002954 	.word	0x00002954
    3bf0:	0000283a 	.word	0x0000283a
    3bf4:	00002832 	.word	0x00002832
    3bf8:	00002832 	.word	0x00002832
    3bfc:	00002832 	.word	0x00002832
    3c00:	00002b98 	.word	0x00002b98
    3c04:	00002fe0 	.word	0x00002fe0
    3c08:	00002ea0 	.word	0x00002ea0
    3c0c:	00002ea0 	.word	0x00002ea0
    3c10:	00002e9c 	.word	0x00002e9c
    3c14:	00002fb8 	.word	0x00002fb8
    3c18:	00002fb8 	.word	0x00002fb8
    3c1c:	00002faa 	.word	0x00002faa
    3c20:	00002e9c 	.word	0x00002e9c
    3c24:	00002fb8 	.word	0x00002fb8
    3c28:	00002faa 	.word	0x00002faa
    3c2c:	00002fb8 	.word	0x00002fb8
    3c30:	00002e9c 	.word	0x00002e9c
    3c34:	00002fc0 	.word	0x00002fc0
    3c38:	00002fc0 	.word	0x00002fc0
    3c3c:	00002fc0 	.word	0x00002fc0
    3c40:	000031c4 	.word	0x000031c4
    3c44:	33323130 	.word	0x33323130
    3c48:	37363534 	.word	0x37363534
    3c4c:	62613938 	.word	0x62613938
    3c50:	66656463 	.word	0x66656463
    3c54:	6a696867 	.word	0x6a696867
    3c58:	6e6d6c6b 	.word	0x6e6d6c6b
    3c5c:	7271706f 	.word	0x7271706f
    3c60:	76757473 	.word	0x76757473
    3c64:	7a797877 	.word	0x7a797877
    3c68:	00000000 	.word	0x00000000

00003c6c <_init>:
    3c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c6e:	46c0      	nop			; (mov r8, r8)
    3c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c72:	bc08      	pop	{r3}
    3c74:	469e      	mov	lr, r3
    3c76:	4770      	bx	lr

00003c78 <__init_array_start>:
    3c78:	000000dd 	.word	0x000000dd

00003c7c <_fini>:
    3c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c82:	bc08      	pop	{r3}
    3c84:	469e      	mov	lr, r3
    3c86:	4770      	bx	lr

00003c88 <__fini_array_start>:
    3c88:	000000b5 	.word	0x000000b5
