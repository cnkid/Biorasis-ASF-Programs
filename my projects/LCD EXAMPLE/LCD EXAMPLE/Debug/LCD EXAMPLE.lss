
LCD EXAMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000352  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000352  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014c3  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b68  00000000  00000000  000019ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000835  00000000  00000000  00002557  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  00002d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061f  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a12  00000000  00000000  00003587  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003f99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e5       	ldi	r30, 0x52	; 82
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 31       	cpi	r26, 0x14	; 20
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  da:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <LDCPortConfig>:
	LcdCommandWrite(0x08);
}

void LCDvisible(void)		//Shows LCD
{
	LcdCommandWrite(0x0C);
  e2:	87 b1       	in	r24, 0x07	; 7
  e4:	8f 60       	ori	r24, 0x0F	; 15
  e6:	87 b9       	out	0x07, r24	; 7
  e8:	87 b1       	in	r24, 0x07	; 7
  ea:	80 63       	ori	r24, 0x30	; 48
  ec:	87 b9       	out	0x07, r24	; 7
  ee:	08 95       	ret

000000f0 <LcdCommandWrite_UpperNibble>:
  f0:	98 b1       	in	r25, 0x08	; 8
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	82 95       	swap	r24
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	89 2b       	or	r24, r25
  fa:	88 b9       	out	0x08, r24	; 8
  fc:	44 98       	cbi	0x08, 4	; 8
  fe:	45 9a       	sbi	0x08, 5	; 8
 100:	8f e9       	ldi	r24, 0x9F	; 159
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdCommandWrite_UpperNibble+0x14>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdCommandWrite_UpperNibble+0x1a>
 10a:	00 00       	nop
 10c:	45 98       	cbi	0x08, 5	; 8
 10e:	8f e9       	ldi	r24, 0x9F	; 159
 110:	9f e0       	ldi	r25, 0x0F	; 15
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LcdCommandWrite_UpperNibble+0x22>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LcdCommandWrite_UpperNibble+0x28>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <LcdCommandWrite>:
 11c:	98 b1       	in	r25, 0x08	; 8
 11e:	90 7f       	andi	r25, 0xF0	; 240
 120:	28 2f       	mov	r18, r24
 122:	22 95       	swap	r18
 124:	2f 70       	andi	r18, 0x0F	; 15
 126:	92 2b       	or	r25, r18
 128:	98 b9       	out	0x08, r25	; 8
 12a:	44 98       	cbi	0x08, 4	; 8
 12c:	45 9a       	sbi	0x08, 5	; 8
 12e:	ef e9       	ldi	r30, 0x9F	; 159
 130:	ff e0       	ldi	r31, 0x0F	; 15
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LcdCommandWrite+0x16>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LcdCommandWrite+0x1c>
 138:	00 00       	nop
 13a:	45 98       	cbi	0x08, 5	; 8
 13c:	ef e3       	ldi	r30, 0x3F	; 63
 13e:	ff e1       	ldi	r31, 0x1F	; 31
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LcdCommandWrite+0x24>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LcdCommandWrite+0x2a>
 146:	00 00       	nop
 148:	98 b1       	in	r25, 0x08	; 8
 14a:	90 7f       	andi	r25, 0xF0	; 240
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	89 2b       	or	r24, r25
 150:	88 b9       	out	0x08, r24	; 8
 152:	44 98       	cbi	0x08, 4	; 8
 154:	45 9a       	sbi	0x08, 5	; 8
 156:	8f e9       	ldi	r24, 0x9F	; 159
 158:	9f e0       	ldi	r25, 0x0F	; 15
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LcdCommandWrite+0x3e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LcdCommandWrite+0x44>
 160:	00 00       	nop
 162:	45 98       	cbi	0x08, 5	; 8
 164:	ef e3       	ldi	r30, 0x3F	; 63
 166:	ff e1       	ldi	r31, 0x1F	; 31
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LcdCommandWrite+0x4c>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LcdCommandWrite+0x52>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <LcdDataWrite>:
 172:	98 b1       	in	r25, 0x08	; 8
 174:	90 7f       	andi	r25, 0xF0	; 240
 176:	28 2f       	mov	r18, r24
 178:	22 95       	swap	r18
 17a:	2f 70       	andi	r18, 0x0F	; 15
 17c:	92 2b       	or	r25, r18
 17e:	98 b9       	out	0x08, r25	; 8
 180:	44 9a       	sbi	0x08, 4	; 8
 182:	45 9a       	sbi	0x08, 5	; 8
 184:	ef e9       	ldi	r30, 0x9F	; 159
 186:	ff e0       	ldi	r31, 0x0F	; 15
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LcdDataWrite+0x16>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LcdDataWrite+0x1c>
 18e:	00 00       	nop
 190:	45 98       	cbi	0x08, 5	; 8
 192:	ef e9       	ldi	r30, 0x9F	; 159
 194:	ff e0       	ldi	r31, 0x0F	; 15
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LcdDataWrite+0x24>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LcdDataWrite+0x2a>
 19c:	00 00       	nop
 19e:	98 b1       	in	r25, 0x08	; 8
 1a0:	90 7f       	andi	r25, 0xF0	; 240
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	89 2b       	or	r24, r25
 1a6:	88 b9       	out	0x08, r24	; 8
 1a8:	44 9a       	sbi	0x08, 4	; 8
 1aa:	45 9a       	sbi	0x08, 5	; 8
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LcdDataWrite+0x3e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LcdDataWrite+0x44>
 1b6:	00 00       	nop
 1b8:	45 98       	cbi	0x08, 5	; 8
 1ba:	ef e3       	ldi	r30, 0x3F	; 63
 1bc:	ff e1       	ldi	r31, 0x1F	; 31
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LcdDataWrite+0x4c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LcdDataWrite+0x52>
 1c4:	00 00       	nop
 1c6:	08 95       	ret

000001c8 <initialize_LCD>:
 1c8:	0e 94 71 00 	call	0xe2	; 0xe2 <LDCPortConfig>
 1cc:	80 e3       	ldi	r24, 0x30	; 48
 1ce:	0e 94 78 00 	call	0xf0	; 0xf0 <LcdCommandWrite_UpperNibble>
 1d2:	8f e0       	ldi	r24, 0x0F	; 15
 1d4:	90 e4       	ldi	r25, 0x40	; 64
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <initialize_LCD+0xe>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <initialize_LCD+0x14>
 1dc:	00 00       	nop
 1de:	80 e3       	ldi	r24, 0x30	; 48
 1e0:	0e 94 78 00 	call	0xf0	; 0xf0 <LcdCommandWrite_UpperNibble>
 1e4:	8f e8       	ldi	r24, 0x8F	; 143
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <initialize_LCD+0x20>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <initialize_LCD+0x26>
 1ee:	00 00       	nop
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	0e 94 78 00 	call	0xf0	; 0xf0 <LcdCommandWrite_UpperNibble>
 1f6:	80 e2       	ldi	r24, 0x20	; 32
 1f8:	0e 94 78 00 	call	0xf0	; 0xf0 <LcdCommandWrite_UpperNibble>
 1fc:	88 e2       	ldi	r24, 0x28	; 40
 1fe:	0e 94 8e 00 	call	0x11c	; 0x11c <LcdCommandWrite>
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	0e 94 8e 00 	call	0x11c	; 0x11c <LcdCommandWrite>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 8e 00 	call	0x11c	; 0x11c <LcdCommandWrite>
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 8e 00 	call	0x11c	; 0x11c <LcdCommandWrite>
 214:	8f e0       	ldi	r24, 0x0F	; 15
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <LcdCommandWrite>
 21a:	9f ef       	ldi	r25, 0xFF	; 255
 21c:	2b ed       	ldi	r18, 0xDB	; 219
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	91 50       	subi	r25, 0x01	; 1
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <initialize_LCD+0x58>
 228:	00 c0       	rjmp	.+0      	; 0x22a <initialize_LCD+0x62>
 22a:	00 00       	nop
 22c:	08 95       	ret

0000022e <LCDstring>:
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	81 f0       	breq	.+32     	; 0x25a <LCDstring+0x2c>
 23a:	66 23       	and	r22, r22
 23c:	71 f0       	breq	.+28     	; 0x25a <LCDstring+0x2c>
 23e:	ec 01       	movw	r28, r24
 240:	61 50       	subi	r22, 0x01	; 1
 242:	06 2f       	mov	r16, r22
 244:	10 e0       	ldi	r17, 0x00	; 0
 246:	0f 5f       	subi	r16, 0xFF	; 255
 248:	1f 4f       	sbci	r17, 0xFF	; 255
 24a:	08 0f       	add	r16, r24
 24c:	19 1f       	adc	r17, r25
 24e:	89 91       	ld	r24, Y+
 250:	0e 94 b9 00 	call	0x172	; 0x172 <LcdDataWrite>
 254:	c0 17       	cp	r28, r16
 256:	d1 07       	cpc	r29, r17
 258:	d1 f7       	brne	.-12     	; 0x24e <LCDstring+0x20>
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	08 95       	ret

00000264 <LCDGotoXY>:
 264:	61 30       	cpi	r22, 0x01	; 1
 266:	09 f4       	brne	.+2      	; 0x26a <LCDGotoXY+0x6>
 268:	80 5c       	subi	r24, 0xC0	; 192
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	0e 94 8e 00 	call	0x11c	; 0x11c <LcdCommandWrite>
 270:	08 95       	ret

00000272 <LCDcursorLeft>:
}

void LCDcursorLeft(uint8_t n)	//Moves cursor by n positions left
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
	for (uint8_t i=0;i<n;i++)
 276:	88 23       	and	r24, r24
 278:	41 f0       	breq	.+16     	; 0x28a <LCDcursorLeft+0x18>
 27a:	d8 2f       	mov	r29, r24
 27c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LcdCommandWrite(0x10);
 27e:	80 e1       	ldi	r24, 0x10	; 16
 280:	0e 94 8e 00 	call	0x11c	; 0x11c <LcdCommandWrite>
	LcdCommandWrite(0x0C);
}

void LCDcursorLeft(uint8_t n)	//Moves cursor by n positions left
{
	for (uint8_t i=0;i<n;i++)
 284:	cf 5f       	subi	r28, 0xFF	; 255
 286:	dc 13       	cpse	r29, r28
 288:	fa cf       	rjmp	.-12     	; 0x27e <LCDcursorLeft+0xc>
	{
		LcdCommandWrite(0x10);
	}
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <Backspace>:
#include <string.h>
#include <util/delay.h>
#include "lcd_lib.h"

void Backspace(void){
	LCDcursorLeft(1);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 39 01 	call	0x272	; 0x272 <LCDcursorLeft>
	LCDstring(" ", 1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 17 01 	call	0x22e	; 0x22e <LCDstring>
	LCDcursorLeft(1);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 39 01 	call	0x272	; 0x272 <LCDcursorLeft>
 2a6:	08 95       	ret

000002a8 <main>:
int main(void){
	uint8_t x = 0;
	uint8_t y = 0;
	uint8_t lock = 0;
	uint8_t reverse = 0;
	initialize_LCD();
 2a8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <initialize_LCD>
	LCDstring("LCD INITIALIZED",sizeof("LCD INITIALIZED"));
 2ac:	60 e1       	ldi	r22, 0x10	; 16
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 17 01 	call	0x22e	; 0x22e <LCDstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	87 ea       	ldi	r24, 0xA7	; 167
 2ba:	91 e6       	ldi	r25, 0x61	; 97
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x14>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x1e>
 2c6:	00 00       	nop
	_delay_ms(2000);
	LcdCommandWrite(0x01);
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 8e 00 	call	0x11c	; 0x11c <LcdCommandWrite>

int main(void){
	uint8_t x = 0;
	uint8_t y = 0;
	uint8_t lock = 0;
	uint8_t reverse = 0;
 2ce:	10 e0       	ldi	r17, 0x00	; 0
}

int main(void){
	uint8_t x = 0;
	uint8_t y = 0;
	uint8_t lock = 0;
 2d0:	90 e0       	ldi	r25, 0x00	; 0
	LCDcursorLeft(1);
}

int main(void){
	uint8_t x = 0;
	uint8_t y = 0;
 2d2:	f1 2c       	mov	r15, r1
	LCDstring(" ", 1);
	LCDcursorLeft(1);
}

int main(void){
	uint8_t x = 0;
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
				}
				lock = 1;
				x++;
			}
			else if (PINB & (1 << PINB7)){
				lock = 0;
 2d6:	00 e0       	ldi	r16, 0x00	; 0
	LCDstring("LCD INITIALIZED",sizeof("LCD INITIALIZED"));
	_delay_ms(2000);
	LcdCommandWrite(0x01);
	while(1){
			_delay_ms(10);
			if(!(PINB & (1 << PINB7)) & !lock){
 2d8:	c1 e0       	ldi	r28, 0x01	; 1
 2da:	ef e3       	ldi	r30, 0x3F	; 63
 2dc:	fc e9       	ldi	r31, 0x9C	; 156
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x36>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x3c>
 2e4:	00 00       	nop
 2e6:	1f 99       	sbic	0x03, 7	; 3
 2e8:	2e c0       	rjmp	.+92     	; 0x346 <main+0x9e>
 2ea:	8c 2f       	mov	r24, r28
 2ec:	91 11       	cpse	r25, r1
 2ee:	80 2f       	mov	r24, r16
 2f0:	88 23       	and	r24, r24
 2f2:	49 f1       	breq	.+82     	; 0x346 <main+0x9e>
				if(x==16){
 2f4:	d0 31       	cpi	r29, 0x10	; 16
 2f6:	d1 f4       	brne	.+52     	; 0x32c <main+0x84>
					y = !y;
 2f8:	6c 2f       	mov	r22, r28
 2fa:	f1 10       	cpse	r15, r1
 2fc:	60 2f       	mov	r22, r16
 2fe:	d6 2f       	mov	r29, r22
					x = 0;
					if(!y){
 300:	ff 20       	and	r15, r15
 302:	29 f0       	breq	.+10     	; 0x30e <main+0x66>
						reverse = !reverse;
 304:	8c 2f       	mov	r24, r28
 306:	11 11       	cpse	r17, r1
 308:	80 2f       	mov	r24, r16
 30a:	18 2f       	mov	r17, r24
 30c:	03 c0       	rjmp	.+6      	; 0x314 <main+0x6c>
					}
					else{
						LCDGotoXY(x,y);
 30e:	80 2f       	mov	r24, r16
 310:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
					}
					if(reverse & y){
 314:	81 2f       	mov	r24, r17
 316:	8d 23       	and	r24, r29
 318:	39 f0       	breq	.+14     	; 0x328 <main+0x80>
						LCDGotoXY(16,0);
 31a:	60 2f       	mov	r22, r16
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	0e 94 32 01 	call	0x264	; 0x264 <LCDGotoXY>
	LcdCommandWrite(0x01);
	while(1){
			_delay_ms(10);
			if(!(PINB & (1 << PINB7)) & !lock){
				if(x==16){
					y = !y;
 322:	fd 2e       	mov	r15, r29
					x = 0;
 324:	d0 e0       	ldi	r29, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <main+0x84>
	LcdCommandWrite(0x01);
	while(1){
			_delay_ms(10);
			if(!(PINB & (1 << PINB7)) & !lock){
				if(x==16){
					y = !y;
 328:	fd 2e       	mov	r15, r29
					x = 0;
 32a:	d0 e0       	ldi	r29, 0x00	; 0
					}
					if(reverse & y){
						LCDGotoXY(16,0);
					}
				}
				if(reverse){
 32c:	11 23       	and	r17, r17
 32e:	19 f0       	breq	.+6      	; 0x336 <main+0x8e>
					Backspace();
 330:	0e 94 48 01 	call	0x290	; 0x290 <Backspace>
 334:	05 c0       	rjmp	.+10     	; 0x340 <main+0x98>
				}
				else{
					LCDstring("*",1);
 336:	6c 2f       	mov	r22, r28
 338:	82 e1       	ldi	r24, 0x12	; 18
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 17 01 	call	0x22e	; 0x22e <LCDstring>
				}
				lock = 1;
				x++;
 340:	df 5f       	subi	r29, 0xFF	; 255
					Backspace();
				}
				else{
					LCDstring("*",1);
				}
				lock = 1;
 342:	9c 2f       	mov	r25, r28
 344:	ca cf       	rjmp	.-108    	; 0x2da <main+0x32>
				x++;
			}
			else if (PINB & (1 << PINB7)){
 346:	1f 9b       	sbis	0x03, 7	; 3
 348:	c8 cf       	rjmp	.-112    	; 0x2da <main+0x32>
				lock = 0;
 34a:	90 2f       	mov	r25, r16
 34c:	c6 cf       	rjmp	.-116    	; 0x2da <main+0x32>

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
