
RTC_QUICK_START_CALENDAR_INTERRUPT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a8c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00001a8c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  20000004  00001a90  00020004  2**2
                  ALLOC
  3 .stack        00002004  200000cc  00001b58  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00026073  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003231  00000000  00000000  000460f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000047b7  00000000  00000000  00049329  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000448  00000000  00000000  0004dae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004f8  00000000  00000000  0004df28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019ee3  00000000  00000000  0004e420  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a3cb  00000000  00000000  00068303  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008cec7  00000000  00000000  000726ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b24  00000000  00000000  000ff598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 20 00 20 6d 14 00 00 69 14 00 00 69 14 00 00     . . m...i...i...
	...
      2c:	69 14 00 00 00 00 00 00 00 00 00 00 69 14 00 00     i...........i...
      3c:	69 14 00 00 69 14 00 00 69 14 00 00 69 14 00 00     i...i...i...i...
      4c:	b9 0d 00 00 69 14 00 00 69 14 00 00 69 14 00 00     ....i...i...i...
      5c:	69 14 00 00 69 14 00 00 bd 0a 00 00 cd 0a 00 00     i...i...........
      6c:	dd 0a 00 00 ed 0a 00 00 fd 0a 00 00 0d 0b 00 00     ................
      7c:	69 14 00 00 69 14 00 00 69 14 00 00 69 14 00 00     i...i...i...i...
      8c:	69 14 00 00 69 14 00 00 69 14 00 00 69 14 00 00     i...i...i...i...
      9c:	69 14 00 00 69 14 00 00 69 14 00 00 69 14 00 00     i...i...i...i...
      ac:	69 14 00 00 00 00 00 00                             i.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	00001a8c 	.word	0x00001a8c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	00001a8c 	.word	0x00001a8c
     10c:	00001a8c 	.word	0x00001a8c
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	e013      	b.n	16e <long_division+0x5a>
     146:	2420      	movs	r4, #32
     148:	1a64      	subs	r4, r4, r1
     14a:	0005      	movs	r5, r0
     14c:	40e5      	lsrs	r5, r4
     14e:	46a8      	mov	r8, r5
     150:	e014      	b.n	17c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     152:	9c00      	ldr	r4, [sp, #0]
     154:	9d01      	ldr	r5, [sp, #4]
     156:	1b12      	subs	r2, r2, r4
     158:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     15a:	465c      	mov	r4, fp
     15c:	464d      	mov	r5, r9
     15e:	432c      	orrs	r4, r5
     160:	46a3      	mov	fp, r4
     162:	9c03      	ldr	r4, [sp, #12]
     164:	4645      	mov	r5, r8
     166:	432c      	orrs	r4, r5
     168:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     16a:	3901      	subs	r1, #1
     16c:	d325      	bcc.n	1ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     16e:	2420      	movs	r4, #32
     170:	4264      	negs	r4, r4
     172:	190c      	adds	r4, r1, r4
     174:	d4e7      	bmi.n	146 <long_division+0x32>
     176:	0005      	movs	r5, r0
     178:	40a5      	lsls	r5, r4
     17a:	46a8      	mov	r8, r5
     17c:	0004      	movs	r4, r0
     17e:	408c      	lsls	r4, r1
     180:	46a1      	mov	r9, r4
		r = r << 1;
     182:	1892      	adds	r2, r2, r2
     184:	415b      	adcs	r3, r3
     186:	0014      	movs	r4, r2
     188:	001d      	movs	r5, r3
		if (n & bit_shift) {
     18a:	9e05      	ldr	r6, [sp, #20]
     18c:	464f      	mov	r7, r9
     18e:	403e      	ands	r6, r7
     190:	46b4      	mov	ip, r6
     192:	9e04      	ldr	r6, [sp, #16]
     194:	4647      	mov	r7, r8
     196:	403e      	ands	r6, r7
     198:	46b2      	mov	sl, r6
     19a:	4666      	mov	r6, ip
     19c:	4657      	mov	r7, sl
     19e:	433e      	orrs	r6, r7
     1a0:	d003      	beq.n	1aa <long_division+0x96>
			r |= 0x01;
     1a2:	0006      	movs	r6, r0
     1a4:	4326      	orrs	r6, r4
     1a6:	0032      	movs	r2, r6
     1a8:	002b      	movs	r3, r5
		if (r >= d) {
     1aa:	9c00      	ldr	r4, [sp, #0]
     1ac:	9d01      	ldr	r5, [sp, #4]
     1ae:	429d      	cmp	r5, r3
     1b0:	d8db      	bhi.n	16a <long_division+0x56>
     1b2:	d1ce      	bne.n	152 <long_division+0x3e>
     1b4:	4294      	cmp	r4, r2
     1b6:	d8d8      	bhi.n	16a <long_division+0x56>
     1b8:	e7cb      	b.n	152 <long_division+0x3e>
     1ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d2:	2340      	movs	r3, #64	; 0x40
     1d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     1d6:	4281      	cmp	r1, r0
     1d8:	d202      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     1da:	0018      	movs	r0, r3
     1dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     1de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d8f4      	bhi.n	1da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
     1f4:	e7f1      	b.n	1da <_sercom_get_sync_baud_val+0xc>
	...

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d902      	bls.n	214 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     20e:	0010      	movs	r0, r2
     210:	b003      	add	sp, #12
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     214:	2b00      	cmp	r3, #0
     216:	d114      	bne.n	242 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     218:	0002      	movs	r2, r0
     21a:	0008      	movs	r0, r1
     21c:	2100      	movs	r1, #0
     21e:	4c19      	ldr	r4, [pc, #100]	; (284 <_sercom_get_async_baud_val+0x8c>)
     220:	47a0      	blx	r4
     222:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     224:	003a      	movs	r2, r7
     226:	2300      	movs	r3, #0
     228:	2000      	movs	r0, #0
     22a:	4c17      	ldr	r4, [pc, #92]	; (288 <_sercom_get_async_baud_val+0x90>)
     22c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     22e:	2200      	movs	r2, #0
     230:	2301      	movs	r3, #1
     232:	1a12      	subs	r2, r2, r0
     234:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     236:	0c12      	lsrs	r2, r2, #16
     238:	041b      	lsls	r3, r3, #16
     23a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     23c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     23e:	2200      	movs	r2, #0
     240:	e7e5      	b.n	20e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     242:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     244:	2b01      	cmp	r3, #1
     246:	d1f9      	bne.n	23c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     248:	000a      	movs	r2, r1
     24a:	2300      	movs	r3, #0
     24c:	2100      	movs	r1, #0
     24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <_sercom_get_async_baud_val+0x8c>)
     250:	47a0      	blx	r4
     252:	0002      	movs	r2, r0
     254:	000b      	movs	r3, r1
     256:	9200      	str	r2, [sp, #0]
     258:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     25a:	0038      	movs	r0, r7
     25c:	2100      	movs	r1, #0
     25e:	4c0a      	ldr	r4, [pc, #40]	; (288 <_sercom_get_async_baud_val+0x90>)
     260:	47a0      	blx	r4
     262:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     264:	2380      	movs	r3, #128	; 0x80
     266:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     268:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     26a:	4298      	cmp	r0, r3
     26c:	d8cf      	bhi.n	20e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     26e:	0f79      	lsrs	r1, r7, #29
     270:	00f8      	lsls	r0, r7, #3
     272:	9a00      	ldr	r2, [sp, #0]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     278:	00ea      	lsls	r2, r5, #3
     27a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     27c:	b2d2      	uxtb	r2, r2
     27e:	0352      	lsls	r2, r2, #13
     280:	432a      	orrs	r2, r5
     282:	e7db      	b.n	23c <_sercom_get_async_baud_val+0x44>
     284:	00001881 	.word	0x00001881
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d007      	beq.n	2aa <sercom_set_gclk_generator+0x1e>
     29a:	2900      	cmp	r1, #0
     29c:	d105      	bne.n	2aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <sercom_set_gclk_generator+0x40>)
     2a0:	785b      	ldrb	r3, [r3, #1]
     2a2:	4283      	cmp	r3, r0
     2a4:	d010      	beq.n	2c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2a6:	201d      	movs	r0, #29
     2a8:	e00c      	b.n	2c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2aa:	a901      	add	r1, sp, #4
     2ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2ae:	2013      	movs	r0, #19
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2b4:	2013      	movs	r0, #19
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     2c2:	2000      	movs	r0, #0
}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e7fb      	b.n	2c4 <sercom_set_gclk_generator+0x38>
     2cc:	20000020 	.word	0x20000020
     2d0:	00001311 	.word	0x00001311
     2d4:	00001285 	.word	0x00001285

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b40      	ldr	r3, [pc, #256]	; (3dc <_sercom_get_default_pad+0x104>)
     2da:	4298      	cmp	r0, r3
     2dc:	d031      	beq.n	342 <_sercom_get_default_pad+0x6a>
     2de:	d90a      	bls.n	2f6 <_sercom_get_default_pad+0x1e>
     2e0:	4b3f      	ldr	r3, [pc, #252]	; (3e0 <_sercom_get_default_pad+0x108>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d04d      	beq.n	382 <_sercom_get_default_pad+0xaa>
     2e6:	4b3f      	ldr	r3, [pc, #252]	; (3e4 <_sercom_get_default_pad+0x10c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d05a      	beq.n	3a2 <_sercom_get_default_pad+0xca>
     2ec:	4b3e      	ldr	r3, [pc, #248]	; (3e8 <_sercom_get_default_pad+0x110>)
     2ee:	4298      	cmp	r0, r3
     2f0:	d037      	beq.n	362 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     2f2:	2000      	movs	r0, #0
}
     2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     2f6:	4b3d      	ldr	r3, [pc, #244]	; (3ec <_sercom_get_default_pad+0x114>)
     2f8:	4298      	cmp	r0, r3
     2fa:	d00c      	beq.n	316 <_sercom_get_default_pad+0x3e>
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_sercom_get_default_pad+0x118>)
     2fe:	4298      	cmp	r0, r3
     300:	d1f7      	bne.n	2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d017      	beq.n	336 <_sercom_get_default_pad+0x5e>
     306:	2900      	cmp	r1, #0
     308:	d05d      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     30a:	2902      	cmp	r1, #2
     30c:	d015      	beq.n	33a <_sercom_get_default_pad+0x62>
     30e:	2903      	cmp	r1, #3
     310:	d015      	beq.n	33e <_sercom_get_default_pad+0x66>
	return 0;
     312:	2000      	movs	r0, #0
     314:	e7ee      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     316:	2901      	cmp	r1, #1
     318:	d007      	beq.n	32a <_sercom_get_default_pad+0x52>
     31a:	2900      	cmp	r1, #0
     31c:	d051      	beq.n	3c2 <_sercom_get_default_pad+0xea>
     31e:	2902      	cmp	r1, #2
     320:	d005      	beq.n	32e <_sercom_get_default_pad+0x56>
     322:	2903      	cmp	r1, #3
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x5a>
	return 0;
     326:	2000      	movs	r0, #0
     328:	e7e4      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     32a:	4832      	ldr	r0, [pc, #200]	; (3f4 <_sercom_get_default_pad+0x11c>)
     32c:	e7e2      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     32e:	4832      	ldr	r0, [pc, #200]	; (3f8 <_sercom_get_default_pad+0x120>)
     330:	e7e0      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     332:	4832      	ldr	r0, [pc, #200]	; (3fc <_sercom_get_default_pad+0x124>)
     334:	e7de      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     336:	4832      	ldr	r0, [pc, #200]	; (400 <_sercom_get_default_pad+0x128>)
     338:	e7dc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33a:	4832      	ldr	r0, [pc, #200]	; (404 <_sercom_get_default_pad+0x12c>)
     33c:	e7da      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33e:	4832      	ldr	r0, [pc, #200]	; (408 <_sercom_get_default_pad+0x130>)
     340:	e7d8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     342:	2901      	cmp	r1, #1
     344:	d007      	beq.n	356 <_sercom_get_default_pad+0x7e>
     346:	2900      	cmp	r1, #0
     348:	d03f      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     34a:	2902      	cmp	r1, #2
     34c:	d005      	beq.n	35a <_sercom_get_default_pad+0x82>
     34e:	2903      	cmp	r1, #3
     350:	d005      	beq.n	35e <_sercom_get_default_pad+0x86>
	return 0;
     352:	2000      	movs	r0, #0
     354:	e7ce      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     356:	482d      	ldr	r0, [pc, #180]	; (40c <_sercom_get_default_pad+0x134>)
     358:	e7cc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35a:	482d      	ldr	r0, [pc, #180]	; (410 <_sercom_get_default_pad+0x138>)
     35c:	e7ca      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35e:	482d      	ldr	r0, [pc, #180]	; (414 <_sercom_get_default_pad+0x13c>)
     360:	e7c8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     362:	2901      	cmp	r1, #1
     364:	d007      	beq.n	376 <_sercom_get_default_pad+0x9e>
     366:	2900      	cmp	r1, #0
     368:	d031      	beq.n	3ce <_sercom_get_default_pad+0xf6>
     36a:	2902      	cmp	r1, #2
     36c:	d005      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36e:	2903      	cmp	r1, #3
     370:	d005      	beq.n	37e <_sercom_get_default_pad+0xa6>
	return 0;
     372:	2000      	movs	r0, #0
     374:	e7be      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	4828      	ldr	r0, [pc, #160]	; (418 <_sercom_get_default_pad+0x140>)
     378:	e7bc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37a:	4828      	ldr	r0, [pc, #160]	; (41c <_sercom_get_default_pad+0x144>)
     37c:	e7ba      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37e:	4828      	ldr	r0, [pc, #160]	; (420 <_sercom_get_default_pad+0x148>)
     380:	e7b8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     382:	2901      	cmp	r1, #1
     384:	d007      	beq.n	396 <_sercom_get_default_pad+0xbe>
     386:	2900      	cmp	r1, #0
     388:	d023      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     38a:	2902      	cmp	r1, #2
     38c:	d005      	beq.n	39a <_sercom_get_default_pad+0xc2>
     38e:	2903      	cmp	r1, #3
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0xc6>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ae      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4823      	ldr	r0, [pc, #140]	; (424 <_sercom_get_default_pad+0x14c>)
     398:	e7ac      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39a:	4823      	ldr	r0, [pc, #140]	; (428 <_sercom_get_default_pad+0x150>)
     39c:	e7aa      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39e:	4823      	ldr	r0, [pc, #140]	; (42c <_sercom_get_default_pad+0x154>)
     3a0:	e7a8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3a2:	2901      	cmp	r1, #1
     3a4:	d007      	beq.n	3b6 <_sercom_get_default_pad+0xde>
     3a6:	2900      	cmp	r1, #0
     3a8:	d015      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     3aa:	2902      	cmp	r1, #2
     3ac:	d005      	beq.n	3ba <_sercom_get_default_pad+0xe2>
     3ae:	2903      	cmp	r1, #3
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xe6>
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e79e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	481e      	ldr	r0, [pc, #120]	; (430 <_sercom_get_default_pad+0x158>)
     3b8:	e79c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ba:	481e      	ldr	r0, [pc, #120]	; (434 <_sercom_get_default_pad+0x15c>)
     3bc:	e79a      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3be:	481e      	ldr	r0, [pc, #120]	; (438 <_sercom_get_default_pad+0x160>)
     3c0:	e798      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c2:	481e      	ldr	r0, [pc, #120]	; (43c <_sercom_get_default_pad+0x164>)
     3c4:	e796      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c6:	2003      	movs	r0, #3
     3c8:	e794      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ca:	481d      	ldr	r0, [pc, #116]	; (440 <_sercom_get_default_pad+0x168>)
     3cc:	e792      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ce:	481d      	ldr	r0, [pc, #116]	; (444 <_sercom_get_default_pad+0x16c>)
     3d0:	e790      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d2:	481d      	ldr	r0, [pc, #116]	; (448 <_sercom_get_default_pad+0x170>)
     3d4:	e78e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d6:	481d      	ldr	r0, [pc, #116]	; (44c <_sercom_get_default_pad+0x174>)
     3d8:	e78c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	42001000 	.word	0x42001000
     3e0:	42001800 	.word	0x42001800
     3e4:	42001c00 	.word	0x42001c00
     3e8:	42001400 	.word	0x42001400
     3ec:	42000800 	.word	0x42000800
     3f0:	42000c00 	.word	0x42000c00
     3f4:	00050003 	.word	0x00050003
     3f8:	00060003 	.word	0x00060003
     3fc:	00070003 	.word	0x00070003
     400:	00010003 	.word	0x00010003
     404:	001e0003 	.word	0x001e0003
     408:	001f0003 	.word	0x001f0003
     40c:	00090003 	.word	0x00090003
     410:	000a0003 	.word	0x000a0003
     414:	000b0003 	.word	0x000b0003
     418:	00110003 	.word	0x00110003
     41c:	00120003 	.word	0x00120003
     420:	00130003 	.word	0x00130003
     424:	000d0003 	.word	0x000d0003
     428:	000e0003 	.word	0x000e0003
     42c:	000f0003 	.word	0x000f0003
     430:	00170003 	.word	0x00170003
     434:	00180003 	.word	0x00180003
     438:	00190003 	.word	0x00190003
     43c:	00040003 	.word	0x00040003
     440:	00080003 	.word	0x00080003
     444:	00100003 	.word	0x00100003
     448:	000c0003 	.word	0x000c0003
     44c:	00160003 	.word	0x00160003

00000450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     450:	b530      	push	{r4, r5, lr}
     452:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_sercom_get_sercom_inst_index+0x34>)
     456:	466a      	mov	r2, sp
     458:	cb32      	ldmia	r3!, {r1, r4, r5}
     45a:	c232      	stmia	r2!, {r1, r4, r5}
     45c:	cb32      	ldmia	r3!, {r1, r4, r5}
     45e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     460:	9b00      	ldr	r3, [sp, #0]
     462:	4283      	cmp	r3, r0
     464:	d00b      	beq.n	47e <_sercom_get_sercom_inst_index+0x2e>
     466:	2301      	movs	r3, #1
     468:	009a      	lsls	r2, r3, #2
     46a:	4669      	mov	r1, sp
     46c:	5852      	ldr	r2, [r2, r1]
     46e:	4282      	cmp	r2, r0
     470:	d006      	beq.n	480 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     472:	3301      	adds	r3, #1
     474:	2b06      	cmp	r3, #6
     476:	d1f7      	bne.n	468 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
}
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
			return i;
     480:	b2d8      	uxtb	r0, r3
     482:	e7fa      	b.n	47a <_sercom_get_sercom_inst_index+0x2a>
     484:	000019dc 	.word	0x000019dc

00000488 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     488:	b5f0      	push	{r4, r5, r6, r7, lr}
     48a:	46de      	mov	lr, fp
     48c:	4657      	mov	r7, sl
     48e:	464e      	mov	r6, r9
     490:	4645      	mov	r5, r8
     492:	b5e0      	push	{r5, r6, r7, lr}
     494:	b091      	sub	sp, #68	; 0x44
     496:	0005      	movs	r5, r0
     498:	000c      	movs	r4, r1
     49a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     49c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     49e:	0008      	movs	r0, r1
     4a0:	4bbc      	ldr	r3, [pc, #752]	; (794 <usart_init+0x30c>)
     4a2:	4798      	blx	r3
     4a4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     4a6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     4a8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     4aa:	07db      	lsls	r3, r3, #31
     4ac:	d506      	bpl.n	4bc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     4ae:	b011      	add	sp, #68	; 0x44
     4b0:	bc3c      	pop	{r2, r3, r4, r5}
     4b2:	4690      	mov	r8, r2
     4b4:	4699      	mov	r9, r3
     4b6:	46a2      	mov	sl, r4
     4b8:	46ab      	mov	fp, r5
     4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     4bc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     4be:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     4c0:	079b      	lsls	r3, r3, #30
     4c2:	d4f4      	bmi.n	4ae <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4c4:	49b4      	ldr	r1, [pc, #720]	; (798 <usart_init+0x310>)
     4c6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     4c8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     4ca:	2301      	movs	r3, #1
     4cc:	40bb      	lsls	r3, r7
     4ce:	4303      	orrs	r3, r0
     4d0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     4d2:	a90f      	add	r1, sp, #60	; 0x3c
     4d4:	272d      	movs	r7, #45	; 0x2d
     4d6:	5df3      	ldrb	r3, [r6, r7]
     4d8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     4da:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     4dc:	b2d3      	uxtb	r3, r2
     4de:	9302      	str	r3, [sp, #8]
     4e0:	0018      	movs	r0, r3
     4e2:	4bae      	ldr	r3, [pc, #696]	; (79c <usart_init+0x314>)
     4e4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     4e6:	9802      	ldr	r0, [sp, #8]
     4e8:	4bad      	ldr	r3, [pc, #692]	; (7a0 <usart_init+0x318>)
     4ea:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     4ec:	5df0      	ldrb	r0, [r6, r7]
     4ee:	2100      	movs	r1, #0
     4f0:	4bac      	ldr	r3, [pc, #688]	; (7a4 <usart_init+0x31c>)
     4f2:	4798      	blx	r3
	module->character_size = config->character_size;
     4f4:	7af3      	ldrb	r3, [r6, #11]
     4f6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     4f8:	2324      	movs	r3, #36	; 0x24
     4fa:	5cf3      	ldrb	r3, [r6, r3]
     4fc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     4fe:	2325      	movs	r3, #37	; 0x25
     500:	5cf3      	ldrb	r3, [r6, r3]
     502:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     504:	7ef3      	ldrb	r3, [r6, #27]
     506:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     508:	7f33      	ldrb	r3, [r6, #28]
     50a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     50c:	682b      	ldr	r3, [r5, #0]
     50e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     510:	0018      	movs	r0, r3
     512:	4ba0      	ldr	r3, [pc, #640]	; (794 <usart_init+0x30c>)
     514:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     516:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     518:	2200      	movs	r2, #0
     51a:	230e      	movs	r3, #14
     51c:	a906      	add	r1, sp, #24
     51e:	468c      	mov	ip, r1
     520:	4463      	add	r3, ip
     522:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     524:	8a32      	ldrh	r2, [r6, #16]
     526:	9202      	str	r2, [sp, #8]
     528:	2380      	movs	r3, #128	; 0x80
     52a:	01db      	lsls	r3, r3, #7
     52c:	429a      	cmp	r2, r3
     52e:	d100      	bne.n	532 <usart_init+0xaa>
     530:	e09e      	b.n	670 <usart_init+0x1e8>
     532:	d90f      	bls.n	554 <usart_init+0xcc>
     534:	23c0      	movs	r3, #192	; 0xc0
     536:	01db      	lsls	r3, r3, #7
     538:	9a02      	ldr	r2, [sp, #8]
     53a:	429a      	cmp	r2, r3
     53c:	d100      	bne.n	540 <usart_init+0xb8>
     53e:	e092      	b.n	666 <usart_init+0x1de>
     540:	2380      	movs	r3, #128	; 0x80
     542:	021b      	lsls	r3, r3, #8
     544:	429a      	cmp	r2, r3
     546:	d000      	beq.n	54a <usart_init+0xc2>
     548:	e11f      	b.n	78a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     54a:	2303      	movs	r3, #3
     54c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     54e:	2300      	movs	r3, #0
     550:	9307      	str	r3, [sp, #28]
     552:	e008      	b.n	566 <usart_init+0xde>
	switch (config->sample_rate) {
     554:	2380      	movs	r3, #128	; 0x80
     556:	019b      	lsls	r3, r3, #6
     558:	429a      	cmp	r2, r3
     55a:	d000      	beq.n	55e <usart_init+0xd6>
     55c:	e115      	b.n	78a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     55e:	2310      	movs	r3, #16
     560:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     562:	3b0f      	subs	r3, #15
     564:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     566:	6833      	ldr	r3, [r6, #0]
     568:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     56a:	68f3      	ldr	r3, [r6, #12]
     56c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     56e:	6973      	ldr	r3, [r6, #20]
     570:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     572:	7e33      	ldrb	r3, [r6, #24]
     574:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     576:	2326      	movs	r3, #38	; 0x26
     578:	5cf3      	ldrb	r3, [r6, r3]
     57a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     57c:	6873      	ldr	r3, [r6, #4]
     57e:	4699      	mov	r9, r3
	switch (transfer_mode)
     580:	2b00      	cmp	r3, #0
     582:	d100      	bne.n	586 <usart_init+0xfe>
     584:	e0a0      	b.n	6c8 <usart_init+0x240>
     586:	2380      	movs	r3, #128	; 0x80
     588:	055b      	lsls	r3, r3, #21
     58a:	4599      	cmp	r9, r3
     58c:	d100      	bne.n	590 <usart_init+0x108>
     58e:	e084      	b.n	69a <usart_init+0x212>
	if(config->encoding_format_enable) {
     590:	7e73      	ldrb	r3, [r6, #25]
     592:	2b00      	cmp	r3, #0
     594:	d002      	beq.n	59c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     596:	7eb3      	ldrb	r3, [r6, #26]
     598:	4642      	mov	r2, r8
     59a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     59c:	682a      	ldr	r2, [r5, #0]
     59e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     5a0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     5a2:	2b00      	cmp	r3, #0
     5a4:	d1fc      	bne.n	5a0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     5a6:	330e      	adds	r3, #14
     5a8:	aa06      	add	r2, sp, #24
     5aa:	4694      	mov	ip, r2
     5ac:	4463      	add	r3, ip
     5ae:	881b      	ldrh	r3, [r3, #0]
     5b0:	4642      	mov	r2, r8
     5b2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     5b4:	9b05      	ldr	r3, [sp, #20]
     5b6:	9a03      	ldr	r2, [sp, #12]
     5b8:	4313      	orrs	r3, r2
     5ba:	9a04      	ldr	r2, [sp, #16]
     5bc:	4313      	orrs	r3, r2
     5be:	464a      	mov	r2, r9
     5c0:	4313      	orrs	r3, r2
     5c2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     5c4:	465b      	mov	r3, fp
     5c6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     5c8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     5ca:	4653      	mov	r3, sl
     5cc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     5ce:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     5d0:	2327      	movs	r3, #39	; 0x27
     5d2:	5cf3      	ldrb	r3, [r6, r3]
     5d4:	2b00      	cmp	r3, #0
     5d6:	d101      	bne.n	5dc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     5d8:	3304      	adds	r3, #4
     5da:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     5dc:	7e73      	ldrb	r3, [r6, #25]
     5de:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     5e0:	7f32      	ldrb	r2, [r6, #28]
     5e2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     5e4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     5e6:	7f72      	ldrb	r2, [r6, #29]
     5e8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     5ea:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     5ec:	2224      	movs	r2, #36	; 0x24
     5ee:	5cb2      	ldrb	r2, [r6, r2]
     5f0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     5f2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     5f4:	2225      	movs	r2, #37	; 0x25
     5f6:	5cb2      	ldrb	r2, [r6, r2]
     5f8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     5fa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     5fc:	7ab1      	ldrb	r1, [r6, #10]
     5fe:	7af2      	ldrb	r2, [r6, #11]
     600:	4311      	orrs	r1, r2
     602:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     604:	8933      	ldrh	r3, [r6, #8]
     606:	2bff      	cmp	r3, #255	; 0xff
     608:	d100      	bne.n	60c <usart_init+0x184>
     60a:	e081      	b.n	710 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     60c:	2280      	movs	r2, #128	; 0x80
     60e:	0452      	lsls	r2, r2, #17
     610:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     612:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     614:	232c      	movs	r3, #44	; 0x2c
     616:	5cf3      	ldrb	r3, [r6, r3]
     618:	2b00      	cmp	r3, #0
     61a:	d103      	bne.n	624 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     61c:	4b62      	ldr	r3, [pc, #392]	; (7a8 <usart_init+0x320>)
     61e:	789b      	ldrb	r3, [r3, #2]
     620:	079b      	lsls	r3, r3, #30
     622:	d501      	bpl.n	628 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     624:	2380      	movs	r3, #128	; 0x80
     626:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     628:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     62a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     62c:	2b00      	cmp	r3, #0
     62e:	d1fc      	bne.n	62a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     630:	4643      	mov	r3, r8
     632:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     634:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     636:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     638:	2b00      	cmp	r3, #0
     63a:	d1fc      	bne.n	636 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     63c:	4643      	mov	r3, r8
     63e:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     640:	ab0e      	add	r3, sp, #56	; 0x38
     642:	2280      	movs	r2, #128	; 0x80
     644:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     646:	2200      	movs	r2, #0
     648:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     64a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     64c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     64e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     650:	930a      	str	r3, [sp, #40]	; 0x28
     652:	6b73      	ldr	r3, [r6, #52]	; 0x34
     654:	930b      	str	r3, [sp, #44]	; 0x2c
     656:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     658:	930c      	str	r3, [sp, #48]	; 0x30
     65a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     65c:	9302      	str	r3, [sp, #8]
     65e:	930d      	str	r3, [sp, #52]	; 0x34
     660:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     662:	ae0a      	add	r6, sp, #40	; 0x28
     664:	e063      	b.n	72e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     666:	2308      	movs	r3, #8
     668:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     66a:	3b07      	subs	r3, #7
     66c:	9307      	str	r3, [sp, #28]
     66e:	e77a      	b.n	566 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     670:	6833      	ldr	r3, [r6, #0]
     672:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     674:	68f3      	ldr	r3, [r6, #12]
     676:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     678:	6973      	ldr	r3, [r6, #20]
     67a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     67c:	7e33      	ldrb	r3, [r6, #24]
     67e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     680:	2326      	movs	r3, #38	; 0x26
     682:	5cf3      	ldrb	r3, [r6, r3]
     684:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     686:	6873      	ldr	r3, [r6, #4]
     688:	4699      	mov	r9, r3
	switch (transfer_mode)
     68a:	2b00      	cmp	r3, #0
     68c:	d018      	beq.n	6c0 <usart_init+0x238>
     68e:	2380      	movs	r3, #128	; 0x80
     690:	055b      	lsls	r3, r3, #21
     692:	4599      	cmp	r9, r3
     694:	d001      	beq.n	69a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     696:	2000      	movs	r0, #0
     698:	e025      	b.n	6e6 <usart_init+0x25e>
			if (!config->use_external_clock) {
     69a:	2327      	movs	r3, #39	; 0x27
     69c:	5cf3      	ldrb	r3, [r6, r3]
     69e:	2b00      	cmp	r3, #0
     6a0:	d000      	beq.n	6a4 <usart_init+0x21c>
     6a2:	e775      	b.n	590 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     6a4:	6a33      	ldr	r3, [r6, #32]
     6a6:	001f      	movs	r7, r3
     6a8:	b2c0      	uxtb	r0, r0
     6aa:	4b40      	ldr	r3, [pc, #256]	; (7ac <usart_init+0x324>)
     6ac:	4798      	blx	r3
     6ae:	0001      	movs	r1, r0
     6b0:	220e      	movs	r2, #14
     6b2:	ab06      	add	r3, sp, #24
     6b4:	469c      	mov	ip, r3
     6b6:	4462      	add	r2, ip
     6b8:	0038      	movs	r0, r7
     6ba:	4b3d      	ldr	r3, [pc, #244]	; (7b0 <usart_init+0x328>)
     6bc:	4798      	blx	r3
     6be:	e012      	b.n	6e6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     6c0:	2308      	movs	r3, #8
     6c2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     6c4:	2300      	movs	r3, #0
     6c6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     6c8:	2327      	movs	r3, #39	; 0x27
     6ca:	5cf3      	ldrb	r3, [r6, r3]
     6cc:	2b00      	cmp	r3, #0
     6ce:	d00e      	beq.n	6ee <usart_init+0x266>
				status_code =
     6d0:	9b06      	ldr	r3, [sp, #24]
     6d2:	9300      	str	r3, [sp, #0]
     6d4:	9b07      	ldr	r3, [sp, #28]
     6d6:	220e      	movs	r2, #14
     6d8:	a906      	add	r1, sp, #24
     6da:	468c      	mov	ip, r1
     6dc:	4462      	add	r2, ip
     6de:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     6e0:	6a30      	ldr	r0, [r6, #32]
     6e2:	4f34      	ldr	r7, [pc, #208]	; (7b4 <usart_init+0x32c>)
     6e4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     6e6:	2800      	cmp	r0, #0
     6e8:	d000      	beq.n	6ec <usart_init+0x264>
     6ea:	e6e0      	b.n	4ae <usart_init+0x26>
     6ec:	e750      	b.n	590 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     6ee:	6a33      	ldr	r3, [r6, #32]
     6f0:	001f      	movs	r7, r3
     6f2:	b2c0      	uxtb	r0, r0
     6f4:	4b2d      	ldr	r3, [pc, #180]	; (7ac <usart_init+0x324>)
     6f6:	4798      	blx	r3
     6f8:	0001      	movs	r1, r0
				status_code =
     6fa:	9b06      	ldr	r3, [sp, #24]
     6fc:	9300      	str	r3, [sp, #0]
     6fe:	9b07      	ldr	r3, [sp, #28]
     700:	220e      	movs	r2, #14
     702:	a806      	add	r0, sp, #24
     704:	4684      	mov	ip, r0
     706:	4462      	add	r2, ip
     708:	0038      	movs	r0, r7
     70a:	4f2a      	ldr	r7, [pc, #168]	; (7b4 <usart_init+0x32c>)
     70c:	47b8      	blx	r7
     70e:	e7ea      	b.n	6e6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
     710:	7ef3      	ldrb	r3, [r6, #27]
     712:	2b00      	cmp	r3, #0
     714:	d100      	bne.n	718 <usart_init+0x290>
     716:	e77d      	b.n	614 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     718:	2380      	movs	r3, #128	; 0x80
     71a:	04db      	lsls	r3, r3, #19
     71c:	431f      	orrs	r7, r3
     71e:	e779      	b.n	614 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     720:	0020      	movs	r0, r4
     722:	4b25      	ldr	r3, [pc, #148]	; (7b8 <usart_init+0x330>)
     724:	4798      	blx	r3
     726:	e007      	b.n	738 <usart_init+0x2b0>
     728:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     72a:	2f04      	cmp	r7, #4
     72c:	d00d      	beq.n	74a <usart_init+0x2c2>
     72e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     730:	00bb      	lsls	r3, r7, #2
     732:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     734:	2800      	cmp	r0, #0
     736:	d0f3      	beq.n	720 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     738:	1c43      	adds	r3, r0, #1
     73a:	d0f5      	beq.n	728 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     73c:	a90e      	add	r1, sp, #56	; 0x38
     73e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     740:	0c00      	lsrs	r0, r0, #16
     742:	b2c0      	uxtb	r0, r0
     744:	4b1d      	ldr	r3, [pc, #116]	; (7bc <usart_init+0x334>)
     746:	4798      	blx	r3
     748:	e7ee      	b.n	728 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     74a:	2300      	movs	r3, #0
     74c:	60eb      	str	r3, [r5, #12]
     74e:	612b      	str	r3, [r5, #16]
     750:	616b      	str	r3, [r5, #20]
     752:	61ab      	str	r3, [r5, #24]
     754:	61eb      	str	r3, [r5, #28]
     756:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     758:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     75a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     75c:	2200      	movs	r2, #0
     75e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     760:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     762:	3330      	adds	r3, #48	; 0x30
     764:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     766:	3301      	adds	r3, #1
     768:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     76a:	3301      	adds	r3, #1
     76c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     76e:	3301      	adds	r3, #1
     770:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     772:	6828      	ldr	r0, [r5, #0]
     774:	4b07      	ldr	r3, [pc, #28]	; (794 <usart_init+0x30c>)
     776:	4798      	blx	r3
     778:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     77a:	4911      	ldr	r1, [pc, #68]	; (7c0 <usart_init+0x338>)
     77c:	4b11      	ldr	r3, [pc, #68]	; (7c4 <usart_init+0x33c>)
     77e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     780:	00a4      	lsls	r4, r4, #2
     782:	4b11      	ldr	r3, [pc, #68]	; (7c8 <usart_init+0x340>)
     784:	50e5      	str	r5, [r4, r3]
	return status_code;
     786:	2000      	movs	r0, #0
     788:	e691      	b.n	4ae <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     78a:	2310      	movs	r3, #16
     78c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     78e:	2300      	movs	r3, #0
     790:	9307      	str	r3, [sp, #28]
     792:	e6e8      	b.n	566 <usart_init+0xde>
     794:	00000451 	.word	0x00000451
     798:	40000400 	.word	0x40000400
     79c:	00001311 	.word	0x00001311
     7a0:	00001285 	.word	0x00001285
     7a4:	0000028d 	.word	0x0000028d
     7a8:	41002000 	.word	0x41002000
     7ac:	0000132d 	.word	0x0000132d
     7b0:	000001cf 	.word	0x000001cf
     7b4:	000001f9 	.word	0x000001f9
     7b8:	000002d9 	.word	0x000002d9
     7bc:	00001409 	.word	0x00001409
     7c0:	000008b9 	.word	0x000008b9
     7c4:	00000a51 	.word	0x00000a51
     7c8:	2000005c 	.word	0x2000005c

000007cc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     7cc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     7ce:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     7d0:	2a00      	cmp	r2, #0
     7d2:	d101      	bne.n	7d8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     7d4:	0018      	movs	r0, r3
     7d6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     7d8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     7da:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     7dc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     7de:	2a00      	cmp	r2, #0
     7e0:	d1f8      	bne.n	7d4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     7e2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     7e4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     7e6:	2a00      	cmp	r2, #0
     7e8:	d1fc      	bne.n	7e4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     7ea:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     7ec:	2102      	movs	r1, #2
     7ee:	7e1a      	ldrb	r2, [r3, #24]
     7f0:	420a      	tst	r2, r1
     7f2:	d0fc      	beq.n	7ee <usart_write_wait+0x22>
	return STATUS_OK;
     7f4:	2300      	movs	r3, #0
     7f6:	e7ed      	b.n	7d4 <usart_write_wait+0x8>

000007f8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7fa:	46ce      	mov	lr, r9
     7fc:	4647      	mov	r7, r8
     7fe:	b580      	push	{r7, lr}
     800:	b083      	sub	sp, #12
     802:	0005      	movs	r5, r0
     804:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     806:	2017      	movs	r0, #23
	if (length == 0) {
     808:	2a00      	cmp	r2, #0
     80a:	d104      	bne.n	816 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     80c:	b003      	add	sp, #12
     80e:	bc0c      	pop	{r2, r3}
     810:	4690      	mov	r8, r2
     812:	4699      	mov	r9, r3
     814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     816:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     818:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     81a:	2b00      	cmp	r3, #0
     81c:	d0f6      	beq.n	80c <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     81e:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     820:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     822:	2b00      	cmp	r3, #0
     824:	d1fc      	bne.n	820 <usart_write_buffer_wait+0x28>
	while (length--) {
     826:	3a01      	subs	r2, #1
     828:	b293      	uxth	r3, r2
     82a:	4699      	mov	r9, r3
     82c:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     82e:	2701      	movs	r7, #1
	while (length--) {
     830:	4b1f      	ldr	r3, [pc, #124]	; (8b0 <usart_write_buffer_wait+0xb8>)
     832:	4698      	mov	r8, r3
     834:	e011      	b.n	85a <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     836:	1c73      	adds	r3, r6, #1
     838:	b29b      	uxth	r3, r3
     83a:	9a01      	ldr	r2, [sp, #4]
     83c:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     83e:	796a      	ldrb	r2, [r5, #5]
     840:	2a01      	cmp	r2, #1
     842:	d017      	beq.n	874 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     844:	b289      	uxth	r1, r1
     846:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     848:	0028      	movs	r0, r5
     84a:	4b1a      	ldr	r3, [pc, #104]	; (8b4 <usart_write_buffer_wait+0xbc>)
     84c:	4798      	blx	r3
	while (length--) {
     84e:	464b      	mov	r3, r9
     850:	3b01      	subs	r3, #1
     852:	b29b      	uxth	r3, r3
     854:	4699      	mov	r9, r3
     856:	4543      	cmp	r3, r8
     858:	d013      	beq.n	882 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     85a:	7e23      	ldrb	r3, [r4, #24]
     85c:	423b      	tst	r3, r7
     85e:	d1ea      	bne.n	836 <usart_write_buffer_wait+0x3e>
     860:	4b13      	ldr	r3, [pc, #76]	; (8b0 <usart_write_buffer_wait+0xb8>)
     862:	7e22      	ldrb	r2, [r4, #24]
     864:	423a      	tst	r2, r7
     866:	d1e6      	bne.n	836 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     868:	2b01      	cmp	r3, #1
     86a:	d019      	beq.n	8a0 <usart_write_buffer_wait+0xa8>
     86c:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     86e:	2b00      	cmp	r3, #0
     870:	d1f7      	bne.n	862 <usart_write_buffer_wait+0x6a>
     872:	e7e0      	b.n	836 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     874:	3602      	adds	r6, #2
     876:	b2b6      	uxth	r6, r6
     878:	9a01      	ldr	r2, [sp, #4]
     87a:	5cd3      	ldrb	r3, [r2, r3]
     87c:	021b      	lsls	r3, r3, #8
     87e:	4319      	orrs	r1, r3
     880:	e7e2      	b.n	848 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     882:	7e23      	ldrb	r3, [r4, #24]
     884:	079b      	lsls	r3, r3, #30
     886:	d40d      	bmi.n	8a4 <usart_write_buffer_wait+0xac>
     888:	4b09      	ldr	r3, [pc, #36]	; (8b0 <usart_write_buffer_wait+0xb8>)
     88a:	2102      	movs	r1, #2
     88c:	7e22      	ldrb	r2, [r4, #24]
     88e:	420a      	tst	r2, r1
     890:	d10a      	bne.n	8a8 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     892:	2b01      	cmp	r3, #1
     894:	d00a      	beq.n	8ac <usart_write_buffer_wait+0xb4>
     896:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     898:	2b00      	cmp	r3, #0
     89a:	d1f7      	bne.n	88c <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     89c:	2000      	movs	r0, #0
     89e:	e7b5      	b.n	80c <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     8a0:	2012      	movs	r0, #18
     8a2:	e7b3      	b.n	80c <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     8a4:	2000      	movs	r0, #0
     8a6:	e7b1      	b.n	80c <usart_write_buffer_wait+0x14>
     8a8:	2000      	movs	r0, #0
     8aa:	e7af      	b.n	80c <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     8ac:	2012      	movs	r0, #18
     8ae:	e7ad      	b.n	80c <usart_write_buffer_wait+0x14>
     8b0:	0000ffff 	.word	0x0000ffff
     8b4:	000007cd 	.word	0x000007cd

000008b8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     8ba:	0080      	lsls	r0, r0, #2
     8bc:	4b62      	ldr	r3, [pc, #392]	; (a48 <_usart_interrupt_handler+0x190>)
     8be:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     8c0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     8c2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     8c4:	2b00      	cmp	r3, #0
     8c6:	d1fc      	bne.n	8c2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     8c8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     8ca:	7da6      	ldrb	r6, [r4, #22]
     8cc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     8ce:	2330      	movs	r3, #48	; 0x30
     8d0:	5ceb      	ldrb	r3, [r5, r3]
     8d2:	2231      	movs	r2, #49	; 0x31
     8d4:	5caf      	ldrb	r7, [r5, r2]
     8d6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     8d8:	07f3      	lsls	r3, r6, #31
     8da:	d522      	bpl.n	922 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     8dc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     8de:	b29b      	uxth	r3, r3
     8e0:	2b00      	cmp	r3, #0
     8e2:	d01c      	beq.n	91e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     8e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     8e6:	7813      	ldrb	r3, [r2, #0]
     8e8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     8ea:	1c51      	adds	r1, r2, #1
     8ec:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     8ee:	7969      	ldrb	r1, [r5, #5]
     8f0:	2901      	cmp	r1, #1
     8f2:	d00e      	beq.n	912 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     8f4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     8f6:	05db      	lsls	r3, r3, #23
     8f8:	0ddb      	lsrs	r3, r3, #23
     8fa:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     8fc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     8fe:	3b01      	subs	r3, #1
     900:	b29b      	uxth	r3, r3
     902:	85eb      	strh	r3, [r5, #46]	; 0x2e
     904:	2b00      	cmp	r3, #0
     906:	d10c      	bne.n	922 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     908:	3301      	adds	r3, #1
     90a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     90c:	3301      	adds	r3, #1
     90e:	75a3      	strb	r3, [r4, #22]
     910:	e007      	b.n	922 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     912:	7851      	ldrb	r1, [r2, #1]
     914:	0209      	lsls	r1, r1, #8
     916:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     918:	3202      	adds	r2, #2
     91a:	62aa      	str	r2, [r5, #40]	; 0x28
     91c:	e7eb      	b.n	8f6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     91e:	2301      	movs	r3, #1
     920:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     922:	07b3      	lsls	r3, r6, #30
     924:	d506      	bpl.n	934 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     926:	2302      	movs	r3, #2
     928:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     92a:	2200      	movs	r2, #0
     92c:	3331      	adds	r3, #49	; 0x31
     92e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     930:	07fb      	lsls	r3, r7, #31
     932:	d41a      	bmi.n	96a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     934:	0773      	lsls	r3, r6, #29
     936:	d565      	bpl.n	a04 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     938:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     93a:	b29b      	uxth	r3, r3
     93c:	2b00      	cmp	r3, #0
     93e:	d05f      	beq.n	a00 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     940:	8b63      	ldrh	r3, [r4, #26]
     942:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     944:	071a      	lsls	r2, r3, #28
     946:	d414      	bmi.n	972 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     948:	223f      	movs	r2, #63	; 0x3f
     94a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     94c:	2b00      	cmp	r3, #0
     94e:	d034      	beq.n	9ba <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     950:	079a      	lsls	r2, r3, #30
     952:	d511      	bpl.n	978 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     954:	221a      	movs	r2, #26
     956:	2332      	movs	r3, #50	; 0x32
     958:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     95a:	3b30      	subs	r3, #48	; 0x30
     95c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     95e:	077b      	lsls	r3, r7, #29
     960:	d550      	bpl.n	a04 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     962:	0028      	movs	r0, r5
     964:	696b      	ldr	r3, [r5, #20]
     966:	4798      	blx	r3
     968:	e04c      	b.n	a04 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     96a:	0028      	movs	r0, r5
     96c:	68eb      	ldr	r3, [r5, #12]
     96e:	4798      	blx	r3
     970:	e7e0      	b.n	934 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     972:	2237      	movs	r2, #55	; 0x37
     974:	4013      	ands	r3, r2
     976:	e7e9      	b.n	94c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     978:	075a      	lsls	r2, r3, #29
     97a:	d505      	bpl.n	988 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     97c:	221e      	movs	r2, #30
     97e:	2332      	movs	r3, #50	; 0x32
     980:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     982:	3b2e      	subs	r3, #46	; 0x2e
     984:	8363      	strh	r3, [r4, #26]
     986:	e7ea      	b.n	95e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     988:	07da      	lsls	r2, r3, #31
     98a:	d505      	bpl.n	998 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     98c:	2213      	movs	r2, #19
     98e:	2332      	movs	r3, #50	; 0x32
     990:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     992:	3b31      	subs	r3, #49	; 0x31
     994:	8363      	strh	r3, [r4, #26]
     996:	e7e2      	b.n	95e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     998:	06da      	lsls	r2, r3, #27
     99a:	d505      	bpl.n	9a8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     99c:	2242      	movs	r2, #66	; 0x42
     99e:	2332      	movs	r3, #50	; 0x32
     9a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     9a2:	3b22      	subs	r3, #34	; 0x22
     9a4:	8363      	strh	r3, [r4, #26]
     9a6:	e7da      	b.n	95e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     9a8:	2220      	movs	r2, #32
     9aa:	421a      	tst	r2, r3
     9ac:	d0d7      	beq.n	95e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     9ae:	3221      	adds	r2, #33	; 0x21
     9b0:	2332      	movs	r3, #50	; 0x32
     9b2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     9b4:	3b12      	subs	r3, #18
     9b6:	8363      	strh	r3, [r4, #26]
     9b8:	e7d1      	b.n	95e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     9ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     9bc:	05db      	lsls	r3, r3, #23
     9be:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     9c0:	b2da      	uxtb	r2, r3
     9c2:	6a69      	ldr	r1, [r5, #36]	; 0x24
     9c4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     9c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     9c8:	1c51      	adds	r1, r2, #1
     9ca:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9cc:	7969      	ldrb	r1, [r5, #5]
     9ce:	2901      	cmp	r1, #1
     9d0:	d010      	beq.n	9f4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     9d2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     9d4:	3b01      	subs	r3, #1
     9d6:	b29b      	uxth	r3, r3
     9d8:	85ab      	strh	r3, [r5, #44]	; 0x2c
     9da:	2b00      	cmp	r3, #0
     9dc:	d112      	bne.n	a04 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     9de:	3304      	adds	r3, #4
     9e0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     9e2:	2200      	movs	r2, #0
     9e4:	332e      	adds	r3, #46	; 0x2e
     9e6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     9e8:	07bb      	lsls	r3, r7, #30
     9ea:	d50b      	bpl.n	a04 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     9ec:	0028      	movs	r0, r5
     9ee:	692b      	ldr	r3, [r5, #16]
     9f0:	4798      	blx	r3
     9f2:	e007      	b.n	a04 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     9f4:	0a1b      	lsrs	r3, r3, #8
     9f6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     9f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     9fa:	3301      	adds	r3, #1
     9fc:	626b      	str	r3, [r5, #36]	; 0x24
     9fe:	e7e8      	b.n	9d2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a00:	2304      	movs	r3, #4
     a02:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     a04:	06f3      	lsls	r3, r6, #27
     a06:	d504      	bpl.n	a12 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     a08:	2310      	movs	r3, #16
     a0a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     a0c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     a0e:	06fb      	lsls	r3, r7, #27
     a10:	d40e      	bmi.n	a30 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     a12:	06b3      	lsls	r3, r6, #26
     a14:	d504      	bpl.n	a20 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     a16:	2320      	movs	r3, #32
     a18:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     a1a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     a1c:	073b      	lsls	r3, r7, #28
     a1e:	d40b      	bmi.n	a38 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     a20:	0733      	lsls	r3, r6, #28
     a22:	d504      	bpl.n	a2e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     a24:	2308      	movs	r3, #8
     a26:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     a28:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     a2a:	06bb      	lsls	r3, r7, #26
     a2c:	d408      	bmi.n	a40 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     a30:	0028      	movs	r0, r5
     a32:	69eb      	ldr	r3, [r5, #28]
     a34:	4798      	blx	r3
     a36:	e7ec      	b.n	a12 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     a38:	0028      	movs	r0, r5
     a3a:	69ab      	ldr	r3, [r5, #24]
     a3c:	4798      	blx	r3
     a3e:	e7ef      	b.n	a20 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     a40:	6a2b      	ldr	r3, [r5, #32]
     a42:	0028      	movs	r0, r5
     a44:	4798      	blx	r3
}
     a46:	e7f2      	b.n	a2e <_usart_interrupt_handler+0x176>
     a48:	2000005c 	.word	0x2000005c

00000a4c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     a4c:	4770      	bx	lr
	...

00000a50 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     a50:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     a52:	4b0a      	ldr	r3, [pc, #40]	; (a7c <_sercom_set_handler+0x2c>)
     a54:	781b      	ldrb	r3, [r3, #0]
     a56:	2b00      	cmp	r3, #0
     a58:	d10c      	bne.n	a74 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a5a:	4f09      	ldr	r7, [pc, #36]	; (a80 <_sercom_set_handler+0x30>)
     a5c:	4e09      	ldr	r6, [pc, #36]	; (a84 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     a5e:	4d0a      	ldr	r5, [pc, #40]	; (a88 <_sercom_set_handler+0x38>)
     a60:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a62:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     a64:	195a      	adds	r2, r3, r5
     a66:	6014      	str	r4, [r2, #0]
     a68:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a6a:	2b18      	cmp	r3, #24
     a6c:	d1f9      	bne.n	a62 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     a6e:	2201      	movs	r2, #1
     a70:	4b02      	ldr	r3, [pc, #8]	; (a7c <_sercom_set_handler+0x2c>)
     a72:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     a74:	0080      	lsls	r0, r0, #2
     a76:	4b02      	ldr	r3, [pc, #8]	; (a80 <_sercom_set_handler+0x30>)
     a78:	50c1      	str	r1, [r0, r3]
}
     a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a7c:	20000022 	.word	0x20000022
     a80:	20000024 	.word	0x20000024
     a84:	00000a4d 	.word	0x00000a4d
     a88:	2000005c 	.word	0x2000005c

00000a8c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     a8c:	b500      	push	{lr}
     a8e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     a90:	2309      	movs	r3, #9
     a92:	466a      	mov	r2, sp
     a94:	7013      	strb	r3, [r2, #0]
     a96:	3301      	adds	r3, #1
     a98:	7053      	strb	r3, [r2, #1]
     a9a:	3301      	adds	r3, #1
     a9c:	7093      	strb	r3, [r2, #2]
     a9e:	3301      	adds	r3, #1
     aa0:	70d3      	strb	r3, [r2, #3]
     aa2:	3301      	adds	r3, #1
     aa4:	7113      	strb	r3, [r2, #4]
     aa6:	3301      	adds	r3, #1
     aa8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     aaa:	4b03      	ldr	r3, [pc, #12]	; (ab8 <_sercom_get_interrupt_vector+0x2c>)
     aac:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     aae:	466b      	mov	r3, sp
     ab0:	5618      	ldrsb	r0, [r3, r0]
}
     ab2:	b003      	add	sp, #12
     ab4:	bd00      	pop	{pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	00000451 	.word	0x00000451

00000abc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     abc:	b510      	push	{r4, lr}
     abe:	4b02      	ldr	r3, [pc, #8]	; (ac8 <SERCOM0_Handler+0xc>)
     ac0:	681b      	ldr	r3, [r3, #0]
     ac2:	2000      	movs	r0, #0
     ac4:	4798      	blx	r3
     ac6:	bd10      	pop	{r4, pc}
     ac8:	20000024 	.word	0x20000024

00000acc <SERCOM1_Handler>:
     acc:	b510      	push	{r4, lr}
     ace:	4b02      	ldr	r3, [pc, #8]	; (ad8 <SERCOM1_Handler+0xc>)
     ad0:	685b      	ldr	r3, [r3, #4]
     ad2:	2001      	movs	r0, #1
     ad4:	4798      	blx	r3
     ad6:	bd10      	pop	{r4, pc}
     ad8:	20000024 	.word	0x20000024

00000adc <SERCOM2_Handler>:
     adc:	b510      	push	{r4, lr}
     ade:	4b02      	ldr	r3, [pc, #8]	; (ae8 <SERCOM2_Handler+0xc>)
     ae0:	689b      	ldr	r3, [r3, #8]
     ae2:	2002      	movs	r0, #2
     ae4:	4798      	blx	r3
     ae6:	bd10      	pop	{r4, pc}
     ae8:	20000024 	.word	0x20000024

00000aec <SERCOM3_Handler>:
     aec:	b510      	push	{r4, lr}
     aee:	4b02      	ldr	r3, [pc, #8]	; (af8 <SERCOM3_Handler+0xc>)
     af0:	68db      	ldr	r3, [r3, #12]
     af2:	2003      	movs	r0, #3
     af4:	4798      	blx	r3
     af6:	bd10      	pop	{r4, pc}
     af8:	20000024 	.word	0x20000024

00000afc <SERCOM4_Handler>:
     afc:	b510      	push	{r4, lr}
     afe:	4b02      	ldr	r3, [pc, #8]	; (b08 <SERCOM4_Handler+0xc>)
     b00:	691b      	ldr	r3, [r3, #16]
     b02:	2004      	movs	r0, #4
     b04:	4798      	blx	r3
     b06:	bd10      	pop	{r4, pc}
     b08:	20000024 	.word	0x20000024

00000b0c <SERCOM5_Handler>:
     b0c:	b510      	push	{r4, lr}
     b0e:	4b02      	ldr	r3, [pc, #8]	; (b18 <SERCOM5_Handler+0xc>)
     b10:	695b      	ldr	r3, [r3, #20]
     b12:	2005      	movs	r0, #5
     b14:	4798      	blx	r3
     b16:	bd10      	pop	{r4, pc}
     b18:	20000024 	.word	0x20000024

00000b1c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     b1c:	4b0c      	ldr	r3, [pc, #48]	; (b50 <cpu_irq_enter_critical+0x34>)
     b1e:	681b      	ldr	r3, [r3, #0]
     b20:	2b00      	cmp	r3, #0
     b22:	d106      	bne.n	b32 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     b24:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     b28:	2b00      	cmp	r3, #0
     b2a:	d007      	beq.n	b3c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     b2c:	2200      	movs	r2, #0
     b2e:	4b09      	ldr	r3, [pc, #36]	; (b54 <cpu_irq_enter_critical+0x38>)
     b30:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     b32:	4a07      	ldr	r2, [pc, #28]	; (b50 <cpu_irq_enter_critical+0x34>)
     b34:	6813      	ldr	r3, [r2, #0]
     b36:	3301      	adds	r3, #1
     b38:	6013      	str	r3, [r2, #0]
}
     b3a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     b3c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     b3e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     b42:	2200      	movs	r2, #0
     b44:	4b04      	ldr	r3, [pc, #16]	; (b58 <cpu_irq_enter_critical+0x3c>)
     b46:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     b48:	3201      	adds	r2, #1
     b4a:	4b02      	ldr	r3, [pc, #8]	; (b54 <cpu_irq_enter_critical+0x38>)
     b4c:	701a      	strb	r2, [r3, #0]
     b4e:	e7f0      	b.n	b32 <cpu_irq_enter_critical+0x16>
     b50:	2000003c 	.word	0x2000003c
     b54:	20000040 	.word	0x20000040
     b58:	20000000 	.word	0x20000000

00000b5c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     b5c:	4b08      	ldr	r3, [pc, #32]	; (b80 <cpu_irq_leave_critical+0x24>)
     b5e:	681a      	ldr	r2, [r3, #0]
     b60:	3a01      	subs	r2, #1
     b62:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     b64:	681b      	ldr	r3, [r3, #0]
     b66:	2b00      	cmp	r3, #0
     b68:	d109      	bne.n	b7e <cpu_irq_leave_critical+0x22>
     b6a:	4b06      	ldr	r3, [pc, #24]	; (b84 <cpu_irq_leave_critical+0x28>)
     b6c:	781b      	ldrb	r3, [r3, #0]
     b6e:	2b00      	cmp	r3, #0
     b70:	d005      	beq.n	b7e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     b72:	2201      	movs	r2, #1
     b74:	4b04      	ldr	r3, [pc, #16]	; (b88 <cpu_irq_leave_critical+0x2c>)
     b76:	701a      	strb	r2, [r3, #0]
     b78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     b7c:	b662      	cpsie	i
	}
}
     b7e:	4770      	bx	lr
     b80:	2000003c 	.word	0x2000003c
     b84:	20000040 	.word	0x20000040
     b88:	20000000 	.word	0x20000000

00000b8c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     b90:	ac01      	add	r4, sp, #4
     b92:	2501      	movs	r5, #1
     b94:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     b96:	2700      	movs	r7, #0
     b98:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     b9a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     b9c:	0021      	movs	r1, r4
     b9e:	203e      	movs	r0, #62	; 0x3e
     ba0:	4e06      	ldr	r6, [pc, #24]	; (bbc <system_board_init+0x30>)
     ba2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ba4:	2280      	movs	r2, #128	; 0x80
     ba6:	05d2      	lsls	r2, r2, #23
     ba8:	4b05      	ldr	r3, [pc, #20]	; (bc0 <system_board_init+0x34>)
     baa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     bac:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     bae:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     bb0:	0021      	movs	r1, r4
     bb2:	200f      	movs	r0, #15
     bb4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     bb6:	b003      	add	sp, #12
     bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	00000bc5 	.word	0x00000bc5
     bc0:	41004480 	.word	0x41004480

00000bc4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     bc4:	b500      	push	{lr}
     bc6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     bc8:	ab01      	add	r3, sp, #4
     bca:	2280      	movs	r2, #128	; 0x80
     bcc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     bce:	780a      	ldrb	r2, [r1, #0]
     bd0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     bd2:	784a      	ldrb	r2, [r1, #1]
     bd4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     bd6:	788a      	ldrb	r2, [r1, #2]
     bd8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     bda:	0019      	movs	r1, r3
     bdc:	4b01      	ldr	r3, [pc, #4]	; (be4 <port_pin_set_config+0x20>)
     bde:	4798      	blx	r3
}
     be0:	b003      	add	sp, #12
     be2:	bd00      	pop	{pc}
     be4:	00001409 	.word	0x00001409

00000be8 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     be8:	6801      	ldr	r1, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     bea:	2208      	movs	r2, #8
     bec:	4b05      	ldr	r3, [pc, #20]	; (c04 <rtc_calendar_enable+0x1c>)
     bee:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     bf0:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     bf2:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     bf4:	b25b      	sxtb	r3, r3
     bf6:	2b00      	cmp	r3, #0
     bf8:	dbfb      	blt.n	bf2 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     bfa:	880b      	ldrh	r3, [r1, #0]
     bfc:	2202      	movs	r2, #2
     bfe:	4313      	orrs	r3, r2
     c00:	800b      	strh	r3, [r1, #0]
}
     c02:	4770      	bx	lr
     c04:	e000e100 	.word	0xe000e100

00000c08 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
     c08:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     c0a:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c0c:	2408      	movs	r4, #8
     c0e:	2380      	movs	r3, #128	; 0x80
     c10:	4907      	ldr	r1, [pc, #28]	; (c30 <rtc_calendar_disable+0x28>)
     c12:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
     c14:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     c16:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     c18:	b25b      	sxtb	r3, r3
     c1a:	2b00      	cmp	r3, #0
     c1c:	dbfb      	blt.n	c16 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     c1e:	23c1      	movs	r3, #193	; 0xc1
     c20:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     c22:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     c24:	8813      	ldrh	r3, [r2, #0]
     c26:	2102      	movs	r1, #2
     c28:	438b      	bics	r3, r1
     c2a:	8013      	strh	r3, [r2, #0]
}
     c2c:	bd10      	pop	{r4, pc}
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	e000e100 	.word	0xe000e100

00000c34 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     c34:	b570      	push	{r4, r5, r6, lr}
     c36:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     c38:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     c3a:	4b07      	ldr	r3, [pc, #28]	; (c58 <rtc_calendar_reset+0x24>)
     c3c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
     c3e:	2300      	movs	r3, #0
     c40:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
     c42:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
     c44:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     c46:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
     c48:	b25b      	sxtb	r3, r3
     c4a:	2b00      	cmp	r3, #0
     c4c:	dbfb      	blt.n	c46 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     c4e:	882b      	ldrh	r3, [r5, #0]
     c50:	2201      	movs	r2, #1
     c52:	4313      	orrs	r3, r2
     c54:	802b      	strh	r3, [r5, #0]
}
     c56:	bd70      	pop	{r4, r5, r6, pc}
     c58:	00000c09 	.word	0x00000c09

00000c5c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     c5c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     c5e:	88cb      	ldrh	r3, [r1, #6]
     c60:	88c2      	ldrh	r2, [r0, #6]
     c62:	1a9a      	subs	r2, r3, r2
     c64:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     c66:	794b      	ldrb	r3, [r1, #5]
     c68:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     c6a:	790c      	ldrb	r4, [r1, #4]
     c6c:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     c6e:	4323      	orrs	r3, r4
     c70:	788c      	ldrb	r4, [r1, #2]
     c72:	0324      	lsls	r4, r4, #12
     c74:	4323      	orrs	r3, r4
     c76:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     c78:	7902      	ldrb	r2, [r0, #4]
     c7a:	2a00      	cmp	r2, #0
     c7c:	d105      	bne.n	c8a <rtc_calendar_time_to_register_value+0x2e>
     c7e:	78ca      	ldrb	r2, [r1, #3]
     c80:	2a00      	cmp	r2, #0
     c82:	d002      	beq.n	c8a <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     c84:	2280      	movs	r2, #128	; 0x80
     c86:	0252      	lsls	r2, r2, #9
     c88:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     c8a:	7848      	ldrb	r0, [r1, #1]
     c8c:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     c8e:	780a      	ldrb	r2, [r1, #0]
     c90:	4310      	orrs	r0, r2
     c92:	4318      	orrs	r0, r3

	return register_value;
}
     c94:	bd10      	pop	{r4, pc}
	...

00000c98 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     c98:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     c9a:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     c9c:	4b03      	ldr	r3, [pc, #12]	; (cac <rtc_calendar_set_time+0x14>)
     c9e:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     ca0:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
     ca2:	b25b      	sxtb	r3, r3
     ca4:	2b00      	cmp	r3, #0
     ca6:	dbfb      	blt.n	ca0 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     ca8:	6120      	str	r0, [r4, #16]
}
     caa:	bd10      	pop	{r4, pc}
     cac:	00000c5d 	.word	0x00000c5d

00000cb0 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     cb0:	b570      	push	{r4, r5, r6, lr}
     cb2:	000d      	movs	r5, r1
     cb4:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     cb6:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     cb8:	2a01      	cmp	r2, #1
     cba:	d901      	bls.n	cc0 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
     cbc:	0018      	movs	r0, r3
     cbe:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
     cc0:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     cc2:	4b06      	ldr	r3, [pc, #24]	; (cdc <rtc_calendar_set_alarm+0x2c>)
     cc4:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     cc6:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
     cc8:	b25b      	sxtb	r3, r3
     cca:	2b00      	cmp	r3, #0
     ccc:	dbfb      	blt.n	cc6 <rtc_calendar_set_alarm+0x16>
     cce:	00e4      	lsls	r4, r4, #3
     cd0:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     cd2:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     cd4:	7a2b      	ldrb	r3, [r5, #8]
     cd6:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
     cd8:	2300      	movs	r3, #0
     cda:	e7ef      	b.n	cbc <rtc_calendar_set_alarm+0xc>
     cdc:	00000c5d 	.word	0x00000c5d

00000ce0 <rtc_calendar_init>:
{
     ce0:	b530      	push	{r4, r5, lr}
     ce2:	b083      	sub	sp, #12
     ce4:	0005      	movs	r5, r0
     ce6:	0014      	movs	r4, r2
	module->hw = hw;
     ce8:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
     cea:	4a1c      	ldr	r2, [pc, #112]	; (d5c <rtc_calendar_init+0x7c>)
     cec:	6993      	ldr	r3, [r2, #24]
     cee:	2120      	movs	r1, #32
     cf0:	430b      	orrs	r3, r1
     cf2:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     cf4:	a901      	add	r1, sp, #4
     cf6:	2302      	movs	r3, #2
     cf8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     cfa:	2004      	movs	r0, #4
     cfc:	4b18      	ldr	r3, [pc, #96]	; (d60 <rtc_calendar_init+0x80>)
     cfe:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     d00:	2004      	movs	r0, #4
     d02:	4b18      	ldr	r3, [pc, #96]	; (d64 <rtc_calendar_init+0x84>)
     d04:	4798      	blx	r3
	rtc_calendar_reset(module);
     d06:	0028      	movs	r0, r5
     d08:	4b17      	ldr	r3, [pc, #92]	; (d68 <rtc_calendar_init+0x88>)
     d0a:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
     d0c:	7923      	ldrb	r3, [r4, #4]
     d0e:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
     d10:	78e3      	ldrb	r3, [r4, #3]
     d12:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
     d14:	88e3      	ldrh	r3, [r4, #6]
     d16:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
     d18:	4b14      	ldr	r3, [pc, #80]	; (d6c <rtc_calendar_init+0x8c>)
     d1a:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
     d1c:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     d1e:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
     d20:	7921      	ldrb	r1, [r4, #4]
     d22:	2900      	cmp	r1, #0
     d24:	d017      	beq.n	d56 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     d26:	2108      	movs	r1, #8
     d28:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
     d2a:	78a1      	ldrb	r1, [r4, #2]
     d2c:	2900      	cmp	r1, #0
     d2e:	d001      	beq.n	d34 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
     d30:	2180      	movs	r1, #128	; 0x80
     d32:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
     d34:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
     d36:	78e3      	ldrb	r3, [r4, #3]
     d38:	2b00      	cmp	r3, #0
     d3a:	d004      	beq.n	d46 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     d3c:	8853      	ldrh	r3, [r2, #2]
     d3e:	2180      	movs	r1, #128	; 0x80
     d40:	01c9      	lsls	r1, r1, #7
     d42:	430b      	orrs	r3, r1
     d44:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     d46:	0021      	movs	r1, r4
     d48:	3108      	adds	r1, #8
     d4a:	2200      	movs	r2, #0
     d4c:	0028      	movs	r0, r5
     d4e:	4b08      	ldr	r3, [pc, #32]	; (d70 <rtc_calendar_init+0x90>)
     d50:	4798      	blx	r3
}
     d52:	b003      	add	sp, #12
     d54:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     d56:	2148      	movs	r1, #72	; 0x48
     d58:	430b      	orrs	r3, r1
     d5a:	e7e6      	b.n	d2a <rtc_calendar_init+0x4a>
     d5c:	40000400 	.word	0x40000400
     d60:	00001311 	.word	0x00001311
     d64:	00001285 	.word	0x00001285
     d68:	00000c35 	.word	0x00000c35
     d6c:	20000074 	.word	0x20000074
     d70:	00000cb1 	.word	0x00000cb1

00000d74 <rtc_calendar_register_callback>:
	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
		status = STATUS_OK;
	} else if (callback_type > RTC_NUM_OF_ALARMS) {
     d74:	2a01      	cmp	r2, #1
     d76:	d901      	bls.n	d7c <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
     d78:	2017      	movs	r0, #23
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
     d7a:	4770      	bx	lr
		module->callbacks[callback_type] = callback;
     d7c:	1c93      	adds	r3, r2, #2
     d7e:	009b      	lsls	r3, r3, #2
     d80:	5019      	str	r1, [r3, r0]
		module->registered_callback |= (1 << callback_type);
     d82:	8a03      	ldrh	r3, [r0, #16]
     d84:	2101      	movs	r1, #1
     d86:	4091      	lsls	r1, r2
     d88:	430b      	orrs	r3, r1
     d8a:	b29b      	uxth	r3, r3
     d8c:	8203      	strh	r3, [r0, #16]
	enum status_code status = STATUS_OK;
     d8e:	2000      	movs	r0, #0
	return status;
     d90:	e7f3      	b.n	d7a <rtc_calendar_register_callback+0x6>

00000d92 <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
     d92:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d94:	6804      	ldr	r4, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
     d96:	2901      	cmp	r1, #1
     d98:	d00b      	beq.n	db2 <rtc_calendar_enable_callback+0x20>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
	} else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << callback_type);
     d9a:	2201      	movs	r2, #1
     d9c:	408a      	lsls	r2, r1
     d9e:	2301      	movs	r3, #1
     da0:	4013      	ands	r3, r2
     da2:	71e3      	strb	r3, [r4, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     da4:	8a43      	ldrh	r3, [r0, #18]
     da6:	2201      	movs	r2, #1
     da8:	408a      	lsls	r2, r1
     daa:	4313      	orrs	r3, r2
     dac:	b29b      	uxth	r3, r3
     dae:	8243      	strh	r3, [r0, #18]
}
     db0:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
     db2:	2380      	movs	r3, #128	; 0x80
     db4:	71e3      	strb	r3, [r4, #7]
     db6:	e7f5      	b.n	da4 <rtc_calendar_enable_callback+0x12>

00000db8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     db8:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     dba:	4b0f      	ldr	r3, [pc, #60]	; (df8 <RTC_Handler+0x40>)
     dbc:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     dbe:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     dc0:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
     dc2:	8a13      	ldrh	r3, [r2, #16]
     dc4:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     dc6:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     dc8:	79e3      	ldrb	r3, [r4, #7]
     dca:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     dcc:	b258      	sxtb	r0, r3
     dce:	2800      	cmp	r0, #0
     dd0:	db06      	blt.n	de0 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     dd2:	07db      	lsls	r3, r3, #31
     dd4:	d503      	bpl.n	dde <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     dd6:	07cb      	lsls	r3, r1, #31
     dd8:	d40a      	bmi.n	df0 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     dda:	2301      	movs	r3, #1
     ddc:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     dde:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     de0:	078b      	lsls	r3, r1, #30
     de2:	d402      	bmi.n	dea <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     de4:	2380      	movs	r3, #128	; 0x80
     de6:	7223      	strb	r3, [r4, #8]
     de8:	e7f9      	b.n	dde <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     dea:	68d3      	ldr	r3, [r2, #12]
     dec:	4798      	blx	r3
     dee:	e7f9      	b.n	de4 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     df0:	6893      	ldr	r3, [r2, #8]
     df2:	4798      	blx	r3
     df4:	e7f1      	b.n	dda <RTC_Handler+0x22>
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	20000074 	.word	0x20000074

00000dfc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     dfc:	b510      	push	{r4, lr}
	switch (clock_source) {
     dfe:	2808      	cmp	r0, #8
     e00:	d803      	bhi.n	e0a <system_clock_source_get_hz+0xe>
     e02:	0080      	lsls	r0, r0, #2
     e04:	4b1b      	ldr	r3, [pc, #108]	; (e74 <system_clock_source_get_hz+0x78>)
     e06:	581b      	ldr	r3, [r3, r0]
     e08:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     e0a:	2000      	movs	r0, #0
     e0c:	e030      	b.n	e70 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     e0e:	4b1a      	ldr	r3, [pc, #104]	; (e78 <system_clock_source_get_hz+0x7c>)
     e10:	6918      	ldr	r0, [r3, #16]
     e12:	e02d      	b.n	e70 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     e14:	4b19      	ldr	r3, [pc, #100]	; (e7c <system_clock_source_get_hz+0x80>)
     e16:	6a1b      	ldr	r3, [r3, #32]
     e18:	059b      	lsls	r3, r3, #22
     e1a:	0f9b      	lsrs	r3, r3, #30
     e1c:	4818      	ldr	r0, [pc, #96]	; (e80 <system_clock_source_get_hz+0x84>)
     e1e:	40d8      	lsrs	r0, r3
     e20:	e026      	b.n	e70 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     e22:	4b15      	ldr	r3, [pc, #84]	; (e78 <system_clock_source_get_hz+0x7c>)
     e24:	6958      	ldr	r0, [r3, #20]
     e26:	e023      	b.n	e70 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e28:	4b13      	ldr	r3, [pc, #76]	; (e78 <system_clock_source_get_hz+0x7c>)
     e2a:	681b      	ldr	r3, [r3, #0]
			return 0;
     e2c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e2e:	079b      	lsls	r3, r3, #30
     e30:	d51e      	bpl.n	e70 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e32:	4912      	ldr	r1, [pc, #72]	; (e7c <system_clock_source_get_hz+0x80>)
     e34:	2210      	movs	r2, #16
     e36:	68cb      	ldr	r3, [r1, #12]
     e38:	421a      	tst	r2, r3
     e3a:	d0fc      	beq.n	e36 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     e3c:	4b0e      	ldr	r3, [pc, #56]	; (e78 <system_clock_source_get_hz+0x7c>)
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	075b      	lsls	r3, r3, #29
     e42:	d401      	bmi.n	e48 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     e44:	480f      	ldr	r0, [pc, #60]	; (e84 <system_clock_source_get_hz+0x88>)
     e46:	e013      	b.n	e70 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e48:	2000      	movs	r0, #0
     e4a:	4b0f      	ldr	r3, [pc, #60]	; (e88 <system_clock_source_get_hz+0x8c>)
     e4c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     e4e:	4b0a      	ldr	r3, [pc, #40]	; (e78 <system_clock_source_get_hz+0x7c>)
     e50:	689b      	ldr	r3, [r3, #8]
     e52:	041b      	lsls	r3, r3, #16
     e54:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e56:	4358      	muls	r0, r3
     e58:	e00a      	b.n	e70 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e5a:	2350      	movs	r3, #80	; 0x50
     e5c:	4a07      	ldr	r2, [pc, #28]	; (e7c <system_clock_source_get_hz+0x80>)
     e5e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     e60:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e62:	075b      	lsls	r3, r3, #29
     e64:	d504      	bpl.n	e70 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     e66:	4b04      	ldr	r3, [pc, #16]	; (e78 <system_clock_source_get_hz+0x7c>)
     e68:	68d8      	ldr	r0, [r3, #12]
     e6a:	e001      	b.n	e70 <system_clock_source_get_hz+0x74>
		return 32768UL;
     e6c:	2080      	movs	r0, #128	; 0x80
     e6e:	0200      	lsls	r0, r0, #8
	}
}
     e70:	bd10      	pop	{r4, pc}
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	000019f4 	.word	0x000019f4
     e78:	20000044 	.word	0x20000044
     e7c:	40000800 	.word	0x40000800
     e80:	007a1200 	.word	0x007a1200
     e84:	02dc6c00 	.word	0x02dc6c00
     e88:	0000132d 	.word	0x0000132d

00000e8c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     e8c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     e8e:	490c      	ldr	r1, [pc, #48]	; (ec0 <system_clock_source_osc8m_set_config+0x34>)
     e90:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     e92:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e94:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     e96:	7840      	ldrb	r0, [r0, #1]
     e98:	2201      	movs	r2, #1
     e9a:	4010      	ands	r0, r2
     e9c:	0180      	lsls	r0, r0, #6
     e9e:	2640      	movs	r6, #64	; 0x40
     ea0:	43b3      	bics	r3, r6
     ea2:	4303      	orrs	r3, r0
     ea4:	402a      	ands	r2, r5
     ea6:	01d2      	lsls	r2, r2, #7
     ea8:	2080      	movs	r0, #128	; 0x80
     eaa:	4383      	bics	r3, r0
     eac:	4313      	orrs	r3, r2
     eae:	2203      	movs	r2, #3
     eb0:	4022      	ands	r2, r4
     eb2:	0212      	lsls	r2, r2, #8
     eb4:	4803      	ldr	r0, [pc, #12]	; (ec4 <system_clock_source_osc8m_set_config+0x38>)
     eb6:	4003      	ands	r3, r0
     eb8:	4313      	orrs	r3, r2
     eba:	620b      	str	r3, [r1, #32]
}
     ebc:	bd70      	pop	{r4, r5, r6, pc}
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	40000800 	.word	0x40000800
     ec4:	fffffcff 	.word	0xfffffcff

00000ec8 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eca:	46ce      	mov	lr, r9
     ecc:	4647      	mov	r7, r8
     ece:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     ed0:	4b19      	ldr	r3, [pc, #100]	; (f38 <system_clock_source_osc32k_set_config+0x70>)
     ed2:	4699      	mov	r9, r3
     ed4:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     ed6:	7841      	ldrb	r1, [r0, #1]
     ed8:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     eda:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     edc:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     ede:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     ee0:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
     ee2:	7880      	ldrb	r0, [r0, #2]
     ee4:	2101      	movs	r1, #1
     ee6:	4008      	ands	r0, r1
     ee8:	0080      	lsls	r0, r0, #2
     eea:	2204      	movs	r2, #4
     eec:	4393      	bics	r3, r2
     eee:	4303      	orrs	r3, r0
     ef0:	4660      	mov	r0, ip
     ef2:	4008      	ands	r0, r1
     ef4:	00c0      	lsls	r0, r0, #3
     ef6:	3204      	adds	r2, #4
     ef8:	4393      	bics	r3, r2
     efa:	4303      	orrs	r3, r0
     efc:	0038      	movs	r0, r7
     efe:	4008      	ands	r0, r1
     f00:	0180      	lsls	r0, r0, #6
     f02:	2740      	movs	r7, #64	; 0x40
     f04:	43bb      	bics	r3, r7
     f06:	4303      	orrs	r3, r0
     f08:	0030      	movs	r0, r6
     f0a:	4008      	ands	r0, r1
     f0c:	01c0      	lsls	r0, r0, #7
     f0e:	2680      	movs	r6, #128	; 0x80
     f10:	43b3      	bics	r3, r6
     f12:	4303      	orrs	r3, r0
     f14:	2007      	movs	r0, #7
     f16:	4005      	ands	r5, r0
     f18:	022d      	lsls	r5, r5, #8
     f1a:	4808      	ldr	r0, [pc, #32]	; (f3c <system_clock_source_osc32k_set_config+0x74>)
     f1c:	4003      	ands	r3, r0
     f1e:	432b      	orrs	r3, r5
     f20:	4021      	ands	r1, r4
     f22:	0309      	lsls	r1, r1, #12
     f24:	4806      	ldr	r0, [pc, #24]	; (f40 <system_clock_source_osc32k_set_config+0x78>)
     f26:	4003      	ands	r3, r0
     f28:	430b      	orrs	r3, r1
     f2a:	464a      	mov	r2, r9
     f2c:	6193      	str	r3, [r2, #24]
}
     f2e:	bc0c      	pop	{r2, r3}
     f30:	4690      	mov	r8, r2
     f32:	4699      	mov	r9, r3
     f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	40000800 	.word	0x40000800
     f3c:	fffff8ff 	.word	0xfffff8ff
     f40:	ffffefff 	.word	0xffffefff

00000f44 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     f44:	2808      	cmp	r0, #8
     f46:	d803      	bhi.n	f50 <system_clock_source_enable+0xc>
     f48:	0080      	lsls	r0, r0, #2
     f4a:	4b25      	ldr	r3, [pc, #148]	; (fe0 <system_clock_source_enable+0x9c>)
     f4c:	581b      	ldr	r3, [r3, r0]
     f4e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f50:	2017      	movs	r0, #23
     f52:	e044      	b.n	fde <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     f54:	4a23      	ldr	r2, [pc, #140]	; (fe4 <system_clock_source_enable+0xa0>)
     f56:	6a13      	ldr	r3, [r2, #32]
     f58:	2102      	movs	r1, #2
     f5a:	430b      	orrs	r3, r1
     f5c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     f5e:	2000      	movs	r0, #0
     f60:	e03d      	b.n	fde <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     f62:	4a20      	ldr	r2, [pc, #128]	; (fe4 <system_clock_source_enable+0xa0>)
     f64:	6993      	ldr	r3, [r2, #24]
     f66:	2102      	movs	r1, #2
     f68:	430b      	orrs	r3, r1
     f6a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     f6c:	2000      	movs	r0, #0
		break;
     f6e:	e036      	b.n	fde <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     f70:	4a1c      	ldr	r2, [pc, #112]	; (fe4 <system_clock_source_enable+0xa0>)
     f72:	8a13      	ldrh	r3, [r2, #16]
     f74:	2102      	movs	r1, #2
     f76:	430b      	orrs	r3, r1
     f78:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     f7a:	2000      	movs	r0, #0
		break;
     f7c:	e02f      	b.n	fde <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     f7e:	4a19      	ldr	r2, [pc, #100]	; (fe4 <system_clock_source_enable+0xa0>)
     f80:	8a93      	ldrh	r3, [r2, #20]
     f82:	2102      	movs	r1, #2
     f84:	430b      	orrs	r3, r1
     f86:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     f88:	2000      	movs	r0, #0
		break;
     f8a:	e028      	b.n	fde <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     f8c:	4916      	ldr	r1, [pc, #88]	; (fe8 <system_clock_source_enable+0xa4>)
     f8e:	680b      	ldr	r3, [r1, #0]
     f90:	2202      	movs	r2, #2
     f92:	4313      	orrs	r3, r2
     f94:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     f96:	4b13      	ldr	r3, [pc, #76]	; (fe4 <system_clock_source_enable+0xa0>)
     f98:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f9a:	0019      	movs	r1, r3
     f9c:	320e      	adds	r2, #14
     f9e:	68cb      	ldr	r3, [r1, #12]
     fa0:	421a      	tst	r2, r3
     fa2:	d0fc      	beq.n	f9e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     fa4:	4a10      	ldr	r2, [pc, #64]	; (fe8 <system_clock_source_enable+0xa4>)
     fa6:	6891      	ldr	r1, [r2, #8]
     fa8:	4b0e      	ldr	r3, [pc, #56]	; (fe4 <system_clock_source_enable+0xa0>)
     faa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     fac:	6852      	ldr	r2, [r2, #4]
     fae:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     fb0:	2200      	movs	r2, #0
     fb2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     fb4:	0019      	movs	r1, r3
     fb6:	3210      	adds	r2, #16
     fb8:	68cb      	ldr	r3, [r1, #12]
     fba:	421a      	tst	r2, r3
     fbc:	d0fc      	beq.n	fb8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     fbe:	4b0a      	ldr	r3, [pc, #40]	; (fe8 <system_clock_source_enable+0xa4>)
     fc0:	681b      	ldr	r3, [r3, #0]
     fc2:	b29b      	uxth	r3, r3
     fc4:	4a07      	ldr	r2, [pc, #28]	; (fe4 <system_clock_source_enable+0xa0>)
     fc6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     fc8:	2000      	movs	r0, #0
     fca:	e008      	b.n	fde <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     fcc:	4905      	ldr	r1, [pc, #20]	; (fe4 <system_clock_source_enable+0xa0>)
     fce:	2244      	movs	r2, #68	; 0x44
     fd0:	5c8b      	ldrb	r3, [r1, r2]
     fd2:	2002      	movs	r0, #2
     fd4:	4303      	orrs	r3, r0
     fd6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     fd8:	2000      	movs	r0, #0
		break;
     fda:	e000      	b.n	fde <system_clock_source_enable+0x9a>
		return STATUS_OK;
     fdc:	2000      	movs	r0, #0
}
     fde:	4770      	bx	lr
     fe0:	00001a18 	.word	0x00001a18
     fe4:	40000800 	.word	0x40000800
     fe8:	20000044 	.word	0x20000044

00000fec <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     fec:	b5f0      	push	{r4, r5, r6, r7, lr}
     fee:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ff0:	22c2      	movs	r2, #194	; 0xc2
     ff2:	00d2      	lsls	r2, r2, #3
     ff4:	4b2c      	ldr	r3, [pc, #176]	; (10a8 <system_clock_init+0xbc>)
     ff6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ff8:	4a2c      	ldr	r2, [pc, #176]	; (10ac <system_clock_init+0xc0>)
     ffa:	6853      	ldr	r3, [r2, #4]
     ffc:	211e      	movs	r1, #30
     ffe:	438b      	bics	r3, r1
    1000:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1002:	2301      	movs	r3, #1
    1004:	466a      	mov	r2, sp
    1006:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1008:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    100a:	4d29      	ldr	r5, [pc, #164]	; (10b0 <system_clock_init+0xc4>)
    100c:	b2e0      	uxtb	r0, r4
    100e:	4669      	mov	r1, sp
    1010:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1012:	3401      	adds	r4, #1
    1014:	2c25      	cmp	r4, #37	; 0x25
    1016:	d1f9      	bne.n	100c <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1018:	4b26      	ldr	r3, [pc, #152]	; (10b4 <system_clock_init+0xc8>)
    101a:	681b      	ldr	r3, [r3, #0]
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    101c:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    101e:	4922      	ldr	r1, [pc, #136]	; (10a8 <system_clock_init+0xbc>)
    1020:	698a      	ldr	r2, [r1, #24]
    1022:	0e5b      	lsrs	r3, r3, #25
    1024:	041b      	lsls	r3, r3, #16
    1026:	4824      	ldr	r0, [pc, #144]	; (10b8 <system_clock_init+0xcc>)
    1028:	4002      	ands	r2, r0
    102a:	4313      	orrs	r3, r2
    102c:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    102e:	a804      	add	r0, sp, #16
    1030:	2501      	movs	r5, #1
    1032:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    1034:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    1036:	2400      	movs	r4, #0
    1038:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    103a:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    103c:	2307      	movs	r3, #7
    103e:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    1040:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1042:	4b1e      	ldr	r3, [pc, #120]	; (10bc <system_clock_init+0xd0>)
    1044:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1046:	2004      	movs	r0, #4
    1048:	4e1d      	ldr	r6, [pc, #116]	; (10c0 <system_clock_init+0xd4>)
    104a:	47b0      	blx	r6
	config->run_in_standby  = false;
    104c:	a803      	add	r0, sp, #12
    104e:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1050:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1052:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1054:	4b1b      	ldr	r3, [pc, #108]	; (10c4 <system_clock_init+0xd8>)
    1056:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1058:	2006      	movs	r0, #6
    105a:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    105c:	4b1a      	ldr	r3, [pc, #104]	; (10c8 <system_clock_init+0xdc>)
    105e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1060:	466b      	mov	r3, sp
    1062:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1064:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1066:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1068:	2304      	movs	r3, #4
    106a:	466a      	mov	r2, sp
    106c:	7013      	strb	r3, [r2, #0]
    106e:	331c      	adds	r3, #28
    1070:	9301      	str	r3, [sp, #4]
    1072:	4669      	mov	r1, sp
    1074:	2002      	movs	r0, #2
    1076:	4f15      	ldr	r7, [pc, #84]	; (10cc <system_clock_init+0xe0>)
    1078:	47b8      	blx	r7
    107a:	2002      	movs	r0, #2
    107c:	4e14      	ldr	r6, [pc, #80]	; (10d0 <system_clock_init+0xe4>)
    107e:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    1080:	4b14      	ldr	r3, [pc, #80]	; (10d4 <system_clock_init+0xe8>)
    1082:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1084:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1086:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1088:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    108a:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    108c:	466b      	mov	r3, sp
    108e:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1090:	2306      	movs	r3, #6
    1092:	466a      	mov	r2, sp
    1094:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1096:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1098:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    109a:	4669      	mov	r1, sp
    109c:	2000      	movs	r0, #0
    109e:	47b8      	blx	r7
    10a0:	2000      	movs	r0, #0
    10a2:	47b0      	blx	r6
#endif
}
    10a4:	b007      	add	sp, #28
    10a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10a8:	40000800 	.word	0x40000800
    10ac:	41004000 	.word	0x41004000
    10b0:	00001311 	.word	0x00001311
    10b4:	00806024 	.word	0x00806024
    10b8:	ff80ffff 	.word	0xff80ffff
    10bc:	00000ec9 	.word	0x00000ec9
    10c0:	00000f45 	.word	0x00000f45
    10c4:	00000e8d 	.word	0x00000e8d
    10c8:	000010d9 	.word	0x000010d9
    10cc:	000010fd 	.word	0x000010fd
    10d0:	000011b5 	.word	0x000011b5
    10d4:	40000400 	.word	0x40000400

000010d8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    10d8:	4a06      	ldr	r2, [pc, #24]	; (10f4 <system_gclk_init+0x1c>)
    10da:	6993      	ldr	r3, [r2, #24]
    10dc:	2108      	movs	r1, #8
    10de:	430b      	orrs	r3, r1
    10e0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10e2:	2201      	movs	r2, #1
    10e4:	4b04      	ldr	r3, [pc, #16]	; (10f8 <system_gclk_init+0x20>)
    10e6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    10e8:	0019      	movs	r1, r3
    10ea:	780b      	ldrb	r3, [r1, #0]
    10ec:	4213      	tst	r3, r2
    10ee:	d1fc      	bne.n	10ea <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    10f0:	4770      	bx	lr
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	40000400 	.word	0x40000400
    10f8:	40000c00 	.word	0x40000c00

000010fc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    10fc:	b570      	push	{r4, r5, r6, lr}
    10fe:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1100:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1102:	780d      	ldrb	r5, [r1, #0]
    1104:	022d      	lsls	r5, r5, #8
    1106:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1108:	784b      	ldrb	r3, [r1, #1]
    110a:	2b00      	cmp	r3, #0
    110c:	d002      	beq.n	1114 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    110e:	2380      	movs	r3, #128	; 0x80
    1110:	02db      	lsls	r3, r3, #11
    1112:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1114:	7a4b      	ldrb	r3, [r1, #9]
    1116:	2b00      	cmp	r3, #0
    1118:	d002      	beq.n	1120 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    111a:	2380      	movs	r3, #128	; 0x80
    111c:	031b      	lsls	r3, r3, #12
    111e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1120:	6848      	ldr	r0, [r1, #4]
    1122:	2801      	cmp	r0, #1
    1124:	d910      	bls.n	1148 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1126:	1e43      	subs	r3, r0, #1
    1128:	4218      	tst	r0, r3
    112a:	d134      	bne.n	1196 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    112c:	2802      	cmp	r0, #2
    112e:	d930      	bls.n	1192 <system_gclk_gen_set_config+0x96>
    1130:	2302      	movs	r3, #2
    1132:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1134:	3201      	adds	r2, #1
						mask <<= 1) {
    1136:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1138:	4298      	cmp	r0, r3
    113a:	d8fb      	bhi.n	1134 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    113c:	0212      	lsls	r2, r2, #8
    113e:	4332      	orrs	r2, r6
    1140:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1142:	2380      	movs	r3, #128	; 0x80
    1144:	035b      	lsls	r3, r3, #13
    1146:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1148:	7a0b      	ldrb	r3, [r1, #8]
    114a:	2b00      	cmp	r3, #0
    114c:	d002      	beq.n	1154 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    114e:	2380      	movs	r3, #128	; 0x80
    1150:	039b      	lsls	r3, r3, #14
    1152:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1154:	4a13      	ldr	r2, [pc, #76]	; (11a4 <system_gclk_gen_set_config+0xa8>)
    1156:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1158:	b25b      	sxtb	r3, r3
    115a:	2b00      	cmp	r3, #0
    115c:	dbfb      	blt.n	1156 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    115e:	4b12      	ldr	r3, [pc, #72]	; (11a8 <system_gclk_gen_set_config+0xac>)
    1160:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1162:	4b12      	ldr	r3, [pc, #72]	; (11ac <system_gclk_gen_set_config+0xb0>)
    1164:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1166:	4a0f      	ldr	r2, [pc, #60]	; (11a4 <system_gclk_gen_set_config+0xa8>)
    1168:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    116a:	b25b      	sxtb	r3, r3
    116c:	2b00      	cmp	r3, #0
    116e:	dbfb      	blt.n	1168 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1170:	4b0c      	ldr	r3, [pc, #48]	; (11a4 <system_gclk_gen_set_config+0xa8>)
    1172:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1174:	001a      	movs	r2, r3
    1176:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1178:	b25b      	sxtb	r3, r3
    117a:	2b00      	cmp	r3, #0
    117c:	dbfb      	blt.n	1176 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    117e:	4a09      	ldr	r2, [pc, #36]	; (11a4 <system_gclk_gen_set_config+0xa8>)
    1180:	6853      	ldr	r3, [r2, #4]
    1182:	2180      	movs	r1, #128	; 0x80
    1184:	0249      	lsls	r1, r1, #9
    1186:	400b      	ands	r3, r1
    1188:	431d      	orrs	r5, r3
    118a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    118c:	4b08      	ldr	r3, [pc, #32]	; (11b0 <system_gclk_gen_set_config+0xb4>)
    118e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1190:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1192:	2200      	movs	r2, #0
    1194:	e7d2      	b.n	113c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1196:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1198:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    119a:	2380      	movs	r3, #128	; 0x80
    119c:	029b      	lsls	r3, r3, #10
    119e:	431d      	orrs	r5, r3
    11a0:	e7d2      	b.n	1148 <system_gclk_gen_set_config+0x4c>
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	40000c00 	.word	0x40000c00
    11a8:	00000b1d 	.word	0x00000b1d
    11ac:	40000c08 	.word	0x40000c08
    11b0:	00000b5d 	.word	0x00000b5d

000011b4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    11b4:	b510      	push	{r4, lr}
    11b6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11b8:	4a0b      	ldr	r2, [pc, #44]	; (11e8 <system_gclk_gen_enable+0x34>)
    11ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11bc:	b25b      	sxtb	r3, r3
    11be:	2b00      	cmp	r3, #0
    11c0:	dbfb      	blt.n	11ba <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    11c2:	4b0a      	ldr	r3, [pc, #40]	; (11ec <system_gclk_gen_enable+0x38>)
    11c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11c6:	4b0a      	ldr	r3, [pc, #40]	; (11f0 <system_gclk_gen_enable+0x3c>)
    11c8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11ca:	4a07      	ldr	r2, [pc, #28]	; (11e8 <system_gclk_gen_enable+0x34>)
    11cc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11ce:	b25b      	sxtb	r3, r3
    11d0:	2b00      	cmp	r3, #0
    11d2:	dbfb      	blt.n	11cc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    11d4:	4a04      	ldr	r2, [pc, #16]	; (11e8 <system_gclk_gen_enable+0x34>)
    11d6:	6851      	ldr	r1, [r2, #4]
    11d8:	2380      	movs	r3, #128	; 0x80
    11da:	025b      	lsls	r3, r3, #9
    11dc:	430b      	orrs	r3, r1
    11de:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    11e0:	4b04      	ldr	r3, [pc, #16]	; (11f4 <system_gclk_gen_enable+0x40>)
    11e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11e4:	bd10      	pop	{r4, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	40000c00 	.word	0x40000c00
    11ec:	00000b1d 	.word	0x00000b1d
    11f0:	40000c04 	.word	0x40000c04
    11f4:	00000b5d 	.word	0x00000b5d

000011f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    11f8:	b570      	push	{r4, r5, r6, lr}
    11fa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11fc:	4a1a      	ldr	r2, [pc, #104]	; (1268 <system_gclk_gen_get_hz+0x70>)
    11fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1200:	b25b      	sxtb	r3, r3
    1202:	2b00      	cmp	r3, #0
    1204:	dbfb      	blt.n	11fe <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1206:	4b19      	ldr	r3, [pc, #100]	; (126c <system_gclk_gen_get_hz+0x74>)
    1208:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    120a:	4b19      	ldr	r3, [pc, #100]	; (1270 <system_gclk_gen_get_hz+0x78>)
    120c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    120e:	4a16      	ldr	r2, [pc, #88]	; (1268 <system_gclk_gen_get_hz+0x70>)
    1210:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1212:	b25b      	sxtb	r3, r3
    1214:	2b00      	cmp	r3, #0
    1216:	dbfb      	blt.n	1210 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1218:	4e13      	ldr	r6, [pc, #76]	; (1268 <system_gclk_gen_get_hz+0x70>)
    121a:	6870      	ldr	r0, [r6, #4]
    121c:	04c0      	lsls	r0, r0, #19
    121e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1220:	4b14      	ldr	r3, [pc, #80]	; (1274 <system_gclk_gen_get_hz+0x7c>)
    1222:	4798      	blx	r3
    1224:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1226:	4b12      	ldr	r3, [pc, #72]	; (1270 <system_gclk_gen_get_hz+0x78>)
    1228:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    122a:	6876      	ldr	r6, [r6, #4]
    122c:	02f6      	lsls	r6, r6, #11
    122e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1230:	4b11      	ldr	r3, [pc, #68]	; (1278 <system_gclk_gen_get_hz+0x80>)
    1232:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1234:	4a0c      	ldr	r2, [pc, #48]	; (1268 <system_gclk_gen_get_hz+0x70>)
    1236:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1238:	b25b      	sxtb	r3, r3
    123a:	2b00      	cmp	r3, #0
    123c:	dbfb      	blt.n	1236 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    123e:	4b0a      	ldr	r3, [pc, #40]	; (1268 <system_gclk_gen_get_hz+0x70>)
    1240:	689c      	ldr	r4, [r3, #8]
    1242:	0224      	lsls	r4, r4, #8
    1244:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1246:	4b0d      	ldr	r3, [pc, #52]	; (127c <system_gclk_gen_get_hz+0x84>)
    1248:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    124a:	2e00      	cmp	r6, #0
    124c:	d107      	bne.n	125e <system_gclk_gen_get_hz+0x66>
    124e:	2c01      	cmp	r4, #1
    1250:	d907      	bls.n	1262 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1252:	0021      	movs	r1, r4
    1254:	0028      	movs	r0, r5
    1256:	4b0a      	ldr	r3, [pc, #40]	; (1280 <system_gclk_gen_get_hz+0x88>)
    1258:	4798      	blx	r3
    125a:	0005      	movs	r5, r0
    125c:	e001      	b.n	1262 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    125e:	3401      	adds	r4, #1
    1260:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1262:	0028      	movs	r0, r5
    1264:	bd70      	pop	{r4, r5, r6, pc}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	40000c00 	.word	0x40000c00
    126c:	00000b1d 	.word	0x00000b1d
    1270:	40000c04 	.word	0x40000c04
    1274:	00000dfd 	.word	0x00000dfd
    1278:	40000c08 	.word	0x40000c08
    127c:	00000b5d 	.word	0x00000b5d
    1280:	00001769 	.word	0x00001769

00001284 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1284:	b510      	push	{r4, lr}
    1286:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1288:	4b06      	ldr	r3, [pc, #24]	; (12a4 <system_gclk_chan_enable+0x20>)
    128a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    128c:	4b06      	ldr	r3, [pc, #24]	; (12a8 <system_gclk_chan_enable+0x24>)
    128e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1290:	4a06      	ldr	r2, [pc, #24]	; (12ac <system_gclk_chan_enable+0x28>)
    1292:	8853      	ldrh	r3, [r2, #2]
    1294:	2180      	movs	r1, #128	; 0x80
    1296:	01c9      	lsls	r1, r1, #7
    1298:	430b      	orrs	r3, r1
    129a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    129c:	4b04      	ldr	r3, [pc, #16]	; (12b0 <system_gclk_chan_enable+0x2c>)
    129e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12a0:	bd10      	pop	{r4, pc}
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	00000b1d 	.word	0x00000b1d
    12a8:	40000c02 	.word	0x40000c02
    12ac:	40000c00 	.word	0x40000c00
    12b0:	00000b5d 	.word	0x00000b5d

000012b4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    12b4:	b510      	push	{r4, lr}
    12b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    12b8:	4b0f      	ldr	r3, [pc, #60]	; (12f8 <system_gclk_chan_disable+0x44>)
    12ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12bc:	4b0f      	ldr	r3, [pc, #60]	; (12fc <system_gclk_chan_disable+0x48>)
    12be:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    12c0:	4a0f      	ldr	r2, [pc, #60]	; (1300 <system_gclk_chan_disable+0x4c>)
    12c2:	8853      	ldrh	r3, [r2, #2]
    12c4:	051b      	lsls	r3, r3, #20
    12c6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    12c8:	8853      	ldrh	r3, [r2, #2]
    12ca:	490e      	ldr	r1, [pc, #56]	; (1304 <system_gclk_chan_disable+0x50>)
    12cc:	400b      	ands	r3, r1
    12ce:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    12d0:	8853      	ldrh	r3, [r2, #2]
    12d2:	490d      	ldr	r1, [pc, #52]	; (1308 <system_gclk_chan_disable+0x54>)
    12d4:	400b      	ands	r3, r1
    12d6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    12d8:	0011      	movs	r1, r2
    12da:	2280      	movs	r2, #128	; 0x80
    12dc:	01d2      	lsls	r2, r2, #7
    12de:	884b      	ldrh	r3, [r1, #2]
    12e0:	4213      	tst	r3, r2
    12e2:	d1fc      	bne.n	12de <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    12e4:	4906      	ldr	r1, [pc, #24]	; (1300 <system_gclk_chan_disable+0x4c>)
    12e6:	884a      	ldrh	r2, [r1, #2]
    12e8:	0203      	lsls	r3, r0, #8
    12ea:	4806      	ldr	r0, [pc, #24]	; (1304 <system_gclk_chan_disable+0x50>)
    12ec:	4002      	ands	r2, r0
    12ee:	4313      	orrs	r3, r2
    12f0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    12f2:	4b06      	ldr	r3, [pc, #24]	; (130c <system_gclk_chan_disable+0x58>)
    12f4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12f6:	bd10      	pop	{r4, pc}
    12f8:	00000b1d 	.word	0x00000b1d
    12fc:	40000c02 	.word	0x40000c02
    1300:	40000c00 	.word	0x40000c00
    1304:	fffff0ff 	.word	0xfffff0ff
    1308:	ffffbfff 	.word	0xffffbfff
    130c:	00000b5d 	.word	0x00000b5d

00001310 <system_gclk_chan_set_config>:
{
    1310:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1312:	780c      	ldrb	r4, [r1, #0]
    1314:	0224      	lsls	r4, r4, #8
    1316:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1318:	4b02      	ldr	r3, [pc, #8]	; (1324 <system_gclk_chan_set_config+0x14>)
    131a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    131c:	b2a4      	uxth	r4, r4
    131e:	4b02      	ldr	r3, [pc, #8]	; (1328 <system_gclk_chan_set_config+0x18>)
    1320:	805c      	strh	r4, [r3, #2]
}
    1322:	bd10      	pop	{r4, pc}
    1324:	000012b5 	.word	0x000012b5
    1328:	40000c00 	.word	0x40000c00

0000132c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    132c:	b510      	push	{r4, lr}
    132e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1330:	4b06      	ldr	r3, [pc, #24]	; (134c <system_gclk_chan_get_hz+0x20>)
    1332:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1334:	4b06      	ldr	r3, [pc, #24]	; (1350 <system_gclk_chan_get_hz+0x24>)
    1336:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1338:	4b06      	ldr	r3, [pc, #24]	; (1354 <system_gclk_chan_get_hz+0x28>)
    133a:	885c      	ldrh	r4, [r3, #2]
    133c:	0524      	lsls	r4, r4, #20
    133e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1340:	4b05      	ldr	r3, [pc, #20]	; (1358 <system_gclk_chan_get_hz+0x2c>)
    1342:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1344:	0020      	movs	r0, r4
    1346:	4b05      	ldr	r3, [pc, #20]	; (135c <system_gclk_chan_get_hz+0x30>)
    1348:	4798      	blx	r3
}
    134a:	bd10      	pop	{r4, pc}
    134c:	00000b1d 	.word	0x00000b1d
    1350:	40000c02 	.word	0x40000c02
    1354:	40000c00 	.word	0x40000c00
    1358:	00000b5d 	.word	0x00000b5d
    135c:	000011f9 	.word	0x000011f9

00001360 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1360:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1362:	78d3      	ldrb	r3, [r2, #3]
    1364:	2b00      	cmp	r3, #0
    1366:	d135      	bne.n	13d4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1368:	7813      	ldrb	r3, [r2, #0]
    136a:	2b80      	cmp	r3, #128	; 0x80
    136c:	d029      	beq.n	13c2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    136e:	061b      	lsls	r3, r3, #24
    1370:	2480      	movs	r4, #128	; 0x80
    1372:	0264      	lsls	r4, r4, #9
    1374:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1376:	7854      	ldrb	r4, [r2, #1]
    1378:	2502      	movs	r5, #2
    137a:	43ac      	bics	r4, r5
    137c:	d106      	bne.n	138c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    137e:	7894      	ldrb	r4, [r2, #2]
    1380:	2c00      	cmp	r4, #0
    1382:	d120      	bne.n	13c6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1384:	2480      	movs	r4, #128	; 0x80
    1386:	02a4      	lsls	r4, r4, #10
    1388:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    138a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    138c:	7854      	ldrb	r4, [r2, #1]
    138e:	3c01      	subs	r4, #1
    1390:	2c01      	cmp	r4, #1
    1392:	d91c      	bls.n	13ce <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1394:	040d      	lsls	r5, r1, #16
    1396:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1398:	24a0      	movs	r4, #160	; 0xa0
    139a:	05e4      	lsls	r4, r4, #23
    139c:	432c      	orrs	r4, r5
    139e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13a0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    13a2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13a4:	24d0      	movs	r4, #208	; 0xd0
    13a6:	0624      	lsls	r4, r4, #24
    13a8:	432c      	orrs	r4, r5
    13aa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13ac:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    13ae:	78d4      	ldrb	r4, [r2, #3]
    13b0:	2c00      	cmp	r4, #0
    13b2:	d122      	bne.n	13fa <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    13b4:	035b      	lsls	r3, r3, #13
    13b6:	d51c      	bpl.n	13f2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    13b8:	7893      	ldrb	r3, [r2, #2]
    13ba:	2b01      	cmp	r3, #1
    13bc:	d01e      	beq.n	13fc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    13be:	6141      	str	r1, [r0, #20]
    13c0:	e017      	b.n	13f2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    13c2:	2300      	movs	r3, #0
    13c4:	e7d7      	b.n	1376 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    13c6:	24c0      	movs	r4, #192	; 0xc0
    13c8:	02e4      	lsls	r4, r4, #11
    13ca:	4323      	orrs	r3, r4
    13cc:	e7dd      	b.n	138a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    13ce:	4c0d      	ldr	r4, [pc, #52]	; (1404 <_system_pinmux_config+0xa4>)
    13d0:	4023      	ands	r3, r4
    13d2:	e7df      	b.n	1394 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    13d4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    13d6:	040c      	lsls	r4, r1, #16
    13d8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    13da:	23a0      	movs	r3, #160	; 0xa0
    13dc:	05db      	lsls	r3, r3, #23
    13de:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13e0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    13e2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13e4:	23d0      	movs	r3, #208	; 0xd0
    13e6:	061b      	lsls	r3, r3, #24
    13e8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13ea:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    13ec:	78d3      	ldrb	r3, [r2, #3]
    13ee:	2b00      	cmp	r3, #0
    13f0:	d103      	bne.n	13fa <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13f2:	7853      	ldrb	r3, [r2, #1]
    13f4:	3b01      	subs	r3, #1
    13f6:	2b01      	cmp	r3, #1
    13f8:	d902      	bls.n	1400 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    13fa:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    13fc:	6181      	str	r1, [r0, #24]
    13fe:	e7f8      	b.n	13f2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1400:	6081      	str	r1, [r0, #8]
}
    1402:	e7fa      	b.n	13fa <_system_pinmux_config+0x9a>
    1404:	fffbffff 	.word	0xfffbffff

00001408 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1408:	b510      	push	{r4, lr}
    140a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    140c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    140e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1410:	2900      	cmp	r1, #0
    1412:	d104      	bne.n	141e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1414:	0943      	lsrs	r3, r0, #5
    1416:	01db      	lsls	r3, r3, #7
    1418:	4905      	ldr	r1, [pc, #20]	; (1430 <system_pinmux_pin_set_config+0x28>)
    141a:	468c      	mov	ip, r1
    141c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    141e:	241f      	movs	r4, #31
    1420:	4020      	ands	r0, r4
    1422:	2101      	movs	r1, #1
    1424:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1426:	0018      	movs	r0, r3
    1428:	4b02      	ldr	r3, [pc, #8]	; (1434 <system_pinmux_pin_set_config+0x2c>)
    142a:	4798      	blx	r3
}
    142c:	bd10      	pop	{r4, pc}
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	41004400 	.word	0x41004400
    1434:	00001361 	.word	0x00001361

00001438 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1438:	4770      	bx	lr
	...

0000143c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    143c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    143e:	4b05      	ldr	r3, [pc, #20]	; (1454 <system_init+0x18>)
    1440:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1442:	4b05      	ldr	r3, [pc, #20]	; (1458 <system_init+0x1c>)
    1444:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1446:	4b05      	ldr	r3, [pc, #20]	; (145c <system_init+0x20>)
    1448:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    144a:	4b05      	ldr	r3, [pc, #20]	; (1460 <system_init+0x24>)
    144c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    144e:	4b05      	ldr	r3, [pc, #20]	; (1464 <system_init+0x28>)
    1450:	4798      	blx	r3
}
    1452:	bd10      	pop	{r4, pc}
    1454:	00000fed 	.word	0x00000fed
    1458:	00000b8d 	.word	0x00000b8d
    145c:	00001439 	.word	0x00001439
    1460:	00001439 	.word	0x00001439
    1464:	00001439 	.word	0x00001439

00001468 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1468:	e7fe      	b.n	1468 <Dummy_Handler>
	...

0000146c <Reset_Handler>:
{
    146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    146e:	4a2a      	ldr	r2, [pc, #168]	; (1518 <Reset_Handler+0xac>)
    1470:	4b2a      	ldr	r3, [pc, #168]	; (151c <Reset_Handler+0xb0>)
    1472:	429a      	cmp	r2, r3
    1474:	d011      	beq.n	149a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1476:	001a      	movs	r2, r3
    1478:	4b29      	ldr	r3, [pc, #164]	; (1520 <Reset_Handler+0xb4>)
    147a:	429a      	cmp	r2, r3
    147c:	d20d      	bcs.n	149a <Reset_Handler+0x2e>
    147e:	4a29      	ldr	r2, [pc, #164]	; (1524 <Reset_Handler+0xb8>)
    1480:	3303      	adds	r3, #3
    1482:	1a9b      	subs	r3, r3, r2
    1484:	089b      	lsrs	r3, r3, #2
    1486:	3301      	adds	r3, #1
    1488:	009b      	lsls	r3, r3, #2
    148a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    148c:	4823      	ldr	r0, [pc, #140]	; (151c <Reset_Handler+0xb0>)
    148e:	4922      	ldr	r1, [pc, #136]	; (1518 <Reset_Handler+0xac>)
    1490:	588c      	ldr	r4, [r1, r2]
    1492:	5084      	str	r4, [r0, r2]
    1494:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1496:	429a      	cmp	r2, r3
    1498:	d1fa      	bne.n	1490 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    149a:	4a23      	ldr	r2, [pc, #140]	; (1528 <Reset_Handler+0xbc>)
    149c:	4b23      	ldr	r3, [pc, #140]	; (152c <Reset_Handler+0xc0>)
    149e:	429a      	cmp	r2, r3
    14a0:	d20a      	bcs.n	14b8 <Reset_Handler+0x4c>
    14a2:	43d3      	mvns	r3, r2
    14a4:	4921      	ldr	r1, [pc, #132]	; (152c <Reset_Handler+0xc0>)
    14a6:	185b      	adds	r3, r3, r1
    14a8:	2103      	movs	r1, #3
    14aa:	438b      	bics	r3, r1
    14ac:	3304      	adds	r3, #4
    14ae:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    14b0:	2100      	movs	r1, #0
    14b2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    14b4:	4293      	cmp	r3, r2
    14b6:	d1fc      	bne.n	14b2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    14b8:	4a1d      	ldr	r2, [pc, #116]	; (1530 <Reset_Handler+0xc4>)
    14ba:	21ff      	movs	r1, #255	; 0xff
    14bc:	4b1d      	ldr	r3, [pc, #116]	; (1534 <Reset_Handler+0xc8>)
    14be:	438b      	bics	r3, r1
    14c0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14c2:	39fd      	subs	r1, #253	; 0xfd
    14c4:	2390      	movs	r3, #144	; 0x90
    14c6:	005b      	lsls	r3, r3, #1
    14c8:	4a1b      	ldr	r2, [pc, #108]	; (1538 <Reset_Handler+0xcc>)
    14ca:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    14cc:	4a1b      	ldr	r2, [pc, #108]	; (153c <Reset_Handler+0xd0>)
    14ce:	78d3      	ldrb	r3, [r2, #3]
    14d0:	2503      	movs	r5, #3
    14d2:	43ab      	bics	r3, r5
    14d4:	2402      	movs	r4, #2
    14d6:	4323      	orrs	r3, r4
    14d8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    14da:	78d3      	ldrb	r3, [r2, #3]
    14dc:	270c      	movs	r7, #12
    14de:	43bb      	bics	r3, r7
    14e0:	2608      	movs	r6, #8
    14e2:	4333      	orrs	r3, r6
    14e4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    14e6:	4b16      	ldr	r3, [pc, #88]	; (1540 <Reset_Handler+0xd4>)
    14e8:	7b98      	ldrb	r0, [r3, #14]
    14ea:	2230      	movs	r2, #48	; 0x30
    14ec:	4390      	bics	r0, r2
    14ee:	2220      	movs	r2, #32
    14f0:	4310      	orrs	r0, r2
    14f2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    14f4:	7b99      	ldrb	r1, [r3, #14]
    14f6:	43b9      	bics	r1, r7
    14f8:	4331      	orrs	r1, r6
    14fa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    14fc:	7b9a      	ldrb	r2, [r3, #14]
    14fe:	43aa      	bics	r2, r5
    1500:	4322      	orrs	r2, r4
    1502:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1504:	4a0f      	ldr	r2, [pc, #60]	; (1544 <Reset_Handler+0xd8>)
    1506:	6853      	ldr	r3, [r2, #4]
    1508:	2180      	movs	r1, #128	; 0x80
    150a:	430b      	orrs	r3, r1
    150c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    150e:	4b0e      	ldr	r3, [pc, #56]	; (1548 <Reset_Handler+0xdc>)
    1510:	4798      	blx	r3
        main();
    1512:	4b0e      	ldr	r3, [pc, #56]	; (154c <Reset_Handler+0xe0>)
    1514:	4798      	blx	r3
    1516:	e7fe      	b.n	1516 <Reset_Handler+0xaa>
    1518:	00001a8c 	.word	0x00001a8c
    151c:	20000000 	.word	0x20000000
    1520:	20000004 	.word	0x20000004
    1524:	20000004 	.word	0x20000004
    1528:	20000004 	.word	0x20000004
    152c:	200000cc 	.word	0x200000cc
    1530:	e000ed00 	.word	0xe000ed00
    1534:	00000000 	.word	0x00000000
    1538:	41007000 	.word	0x41007000
    153c:	41005000 	.word	0x41005000
    1540:	41004800 	.word	0x41004800
    1544:	41004000 	.word	0x41004000
    1548:	000018d5 	.word	0x000018d5
    154c:	00001711 	.word	0x00001711

00001550 <rtc_match_callback>:
	}
	usart_enable(&usart_instance);
}

void rtc_match_callback(void)
{
    1550:	b570      	push	{r4, r5, r6, lr}
    1552:	b082      	sub	sp, #8
	char snum[2];
	itoa(alarm.time.second, snum, 10);
    1554:	4c11      	ldr	r4, [pc, #68]	; (159c <rtc_match_callback+0x4c>)
    1556:	7820      	ldrb	r0, [r4, #0]
    1558:	220a      	movs	r2, #10
    155a:	a901      	add	r1, sp, #4
    155c:	4b10      	ldr	r3, [pc, #64]	; (15a0 <rtc_match_callback+0x50>)
    155e:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1560:	2280      	movs	r2, #128	; 0x80
    1562:	05d2      	lsls	r2, r2, #23
    1564:	4b0f      	ldr	r3, [pc, #60]	; (15a4 <rtc_match_callback+0x54>)
    1566:	61da      	str	r2, [r3, #28]
	port_pin_toggle_output_level(LED_0_PIN);
	usart_write_buffer_wait(&usart_instance, "\033[2J", sizeof("\033[2J"));
    1568:	4e0f      	ldr	r6, [pc, #60]	; (15a8 <rtc_match_callback+0x58>)
    156a:	2205      	movs	r2, #5
    156c:	490f      	ldr	r1, [pc, #60]	; (15ac <rtc_match_callback+0x5c>)
    156e:	0030      	movs	r0, r6
    1570:	4d0f      	ldr	r5, [pc, #60]	; (15b0 <rtc_match_callback+0x60>)
    1572:	47a8      	blx	r5
	usart_write_buffer_wait(&usart_instance, (snum), sizeof(snum));
    1574:	2202      	movs	r2, #2
    1576:	a901      	add	r1, sp, #4
    1578:	0030      	movs	r0, r6
    157a:	47a8      	blx	r5
	alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
    157c:	2301      	movs	r3, #1
    157e:	7223      	strb	r3, [r4, #8]
	alarm.time.second += 1;
    1580:	7820      	ldrb	r0, [r4, #0]
    1582:	3001      	adds	r0, #1
	alarm.time.second = alarm.time.second % 60;
    1584:	b2c0      	uxtb	r0, r0
    1586:	213c      	movs	r1, #60	; 0x3c
    1588:	4b0a      	ldr	r3, [pc, #40]	; (15b4 <rtc_match_callback+0x64>)
    158a:	4798      	blx	r3
    158c:	7021      	strb	r1, [r4, #0]
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
    158e:	2200      	movs	r2, #0
    1590:	0021      	movs	r1, r4
    1592:	4809      	ldr	r0, [pc, #36]	; (15b8 <rtc_match_callback+0x68>)
    1594:	4b09      	ldr	r3, [pc, #36]	; (15bc <rtc_match_callback+0x6c>)
    1596:	4798      	blx	r3
}
    1598:	b002      	add	sp, #8
    159a:	bd70      	pop	{r4, r5, r6, pc}
    159c:	200000c0 	.word	0x200000c0
    15a0:	0000194d 	.word	0x0000194d
    15a4:	41004480 	.word	0x41004480
    15a8:	2000008c 	.word	0x2000008c
    15ac:	00001a3c 	.word	0x00001a3c
    15b0:	000007f9 	.word	0x000007f9
    15b4:	00001875 	.word	0x00001875
    15b8:	20000078 	.word	0x20000078
    15bc:	00000cb1 	.word	0x00000cb1

000015c0 <configure_usart>:
{
    15c0:	b530      	push	{r4, r5, lr}
    15c2:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    15c4:	2380      	movs	r3, #128	; 0x80
    15c6:	05db      	lsls	r3, r3, #23
    15c8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    15ca:	2300      	movs	r3, #0
    15cc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    15ce:	22ff      	movs	r2, #255	; 0xff
    15d0:	4669      	mov	r1, sp
    15d2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    15d4:	2200      	movs	r2, #0
    15d6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    15d8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    15da:	2196      	movs	r1, #150	; 0x96
    15dc:	0189      	lsls	r1, r1, #6
    15de:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    15e0:	2101      	movs	r1, #1
    15e2:	2024      	movs	r0, #36	; 0x24
    15e4:	466c      	mov	r4, sp
    15e6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    15e8:	3001      	adds	r0, #1
    15ea:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    15ec:	3125      	adds	r1, #37	; 0x25
    15ee:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    15f0:	3101      	adds	r1, #1
    15f2:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    15f4:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    15f6:	3105      	adds	r1, #5
    15f8:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    15fa:	3101      	adds	r1, #1
    15fc:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    15fe:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1600:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1602:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1604:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1606:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1608:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    160a:	2313      	movs	r3, #19
    160c:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    160e:	7762      	strb	r2, [r4, #29]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1610:	2380      	movs	r3, #128	; 0x80
    1612:	035b      	lsls	r3, r3, #13
    1614:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1616:	4b12      	ldr	r3, [pc, #72]	; (1660 <configure_usart+0xa0>)
    1618:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    161a:	4b12      	ldr	r3, [pc, #72]	; (1664 <configure_usart+0xa4>)
    161c:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    161e:	2301      	movs	r3, #1
    1620:	425b      	negs	r3, r3
    1622:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1624:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    1626:	4d10      	ldr	r5, [pc, #64]	; (1668 <configure_usart+0xa8>)
    1628:	4c10      	ldr	r4, [pc, #64]	; (166c <configure_usart+0xac>)
    162a:	466a      	mov	r2, sp
    162c:	4910      	ldr	r1, [pc, #64]	; (1670 <configure_usart+0xb0>)
    162e:	0028      	movs	r0, r5
    1630:	47a0      	blx	r4
    1632:	2800      	cmp	r0, #0
    1634:	d1f9      	bne.n	162a <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1636:	4d0c      	ldr	r5, [pc, #48]	; (1668 <configure_usart+0xa8>)
    1638:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    163a:	0020      	movs	r0, r4
    163c:	4b0d      	ldr	r3, [pc, #52]	; (1674 <configure_usart+0xb4>)
    163e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1640:	231f      	movs	r3, #31
    1642:	4018      	ands	r0, r3
    1644:	3b1e      	subs	r3, #30
    1646:	4083      	lsls	r3, r0
    1648:	4a0b      	ldr	r2, [pc, #44]	; (1678 <configure_usart+0xb8>)
    164a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    164c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    164e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1650:	2b00      	cmp	r3, #0
    1652:	d1fc      	bne.n	164e <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1654:	6823      	ldr	r3, [r4, #0]
    1656:	2202      	movs	r2, #2
    1658:	4313      	orrs	r3, r2
    165a:	6023      	str	r3, [r4, #0]
}
    165c:	b011      	add	sp, #68	; 0x44
    165e:	bd30      	pop	{r4, r5, pc}
    1660:	00160002 	.word	0x00160002
    1664:	00170002 	.word	0x00170002
    1668:	2000008c 	.word	0x2000008c
    166c:	00000489 	.word	0x00000489
    1670:	42001400 	.word	0x42001400
    1674:	00000a8d 	.word	0x00000a8d
    1678:	e000e100 	.word	0xe000e100

0000167c <configure_rtc_callbacks>:

void configure_rtc_callbacks(void)
{
    167c:	b510      	push	{r4, lr}
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
    167e:	4c05      	ldr	r4, [pc, #20]	; (1694 <configure_rtc_callbacks+0x18>)
    1680:	2200      	movs	r2, #0
    1682:	4905      	ldr	r1, [pc, #20]	; (1698 <configure_rtc_callbacks+0x1c>)
    1684:	0020      	movs	r0, r4
    1686:	4b05      	ldr	r3, [pc, #20]	; (169c <configure_rtc_callbacks+0x20>)
    1688:	4798      	blx	r3
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
    168a:	2100      	movs	r1, #0
    168c:	0020      	movs	r0, r4
    168e:	4b04      	ldr	r3, [pc, #16]	; (16a0 <configure_rtc_callbacks+0x24>)
    1690:	4798      	blx	r3
}
    1692:	bd10      	pop	{r4, pc}
    1694:	20000078 	.word	0x20000078
    1698:	00001551 	.word	0x00001551
    169c:	00000d75 	.word	0x00000d75
    16a0:	00000d93 	.word	0x00000d93

000016a4 <configure_rtc_calendar>:

void configure_rtc_calendar(void)
{
    16a4:	b530      	push	{r4, r5, lr}
    16a6:	b087      	sub	sp, #28
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    16a8:	ac01      	add	r4, sp, #4
    16aa:	23a0      	movs	r3, #160	; 0xa0
    16ac:	011b      	lsls	r3, r3, #4
    16ae:	8023      	strh	r3, [r4, #0]
	config->clear_on_match      = false;
    16b0:	2300      	movs	r3, #0
    16b2:	70a3      	strb	r3, [r4, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    16b4:	70e3      	strb	r3, [r4, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    16b6:	22fa      	movs	r2, #250	; 0xfa
    16b8:	00d2      	lsls	r2, r2, #3
    16ba:	80e2      	strh	r2, [r4, #6]
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	alarm.time.year      = 2018;
    16bc:	490d      	ldr	r1, [pc, #52]	; (16f4 <configure_rtc_calendar+0x50>)
    16be:	4a0e      	ldr	r2, [pc, #56]	; (16f8 <configure_rtc_calendar+0x54>)
    16c0:	80ca      	strh	r2, [r1, #6]
	alarm.time.month     = 7;
    16c2:	2207      	movs	r2, #7
    16c4:	714a      	strb	r2, [r1, #5]
	alarm.time.day       = 16;
    16c6:	3209      	adds	r2, #9
    16c8:	710a      	strb	r2, [r1, #4]
	alarm.time.hour      = 0;
    16ca:	708b      	strb	r3, [r1, #2]
	alarm.time.minute    = 0;
    16cc:	704b      	strb	r3, [r1, #1]
	alarm.time.second    = 0;
    16ce:	700b      	strb	r3, [r1, #0]
	config_rtc_calendar.clock_24h = true;
    16d0:	2501      	movs	r5, #1
    16d2:	7125      	strb	r5, [r4, #4]
	config_rtc_calendar.alarm[0].time = alarm.time;
    16d4:	3a08      	subs	r2, #8
    16d6:	a803      	add	r0, sp, #12
    16d8:	4b08      	ldr	r3, [pc, #32]	; (16fc <configure_rtc_calendar+0x58>)
    16da:	4798      	blx	r3
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_SEC;
    16dc:	7425      	strb	r5, [r4, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    16de:	4d08      	ldr	r5, [pc, #32]	; (1700 <configure_rtc_calendar+0x5c>)
    16e0:	0022      	movs	r2, r4
    16e2:	4908      	ldr	r1, [pc, #32]	; (1704 <configure_rtc_calendar+0x60>)
    16e4:	0028      	movs	r0, r5
    16e6:	4b08      	ldr	r3, [pc, #32]	; (1708 <configure_rtc_calendar+0x64>)
    16e8:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    16ea:	0028      	movs	r0, r5
    16ec:	4b07      	ldr	r3, [pc, #28]	; (170c <configure_rtc_calendar+0x68>)
    16ee:	4798      	blx	r3
}
    16f0:	b007      	add	sp, #28
    16f2:	bd30      	pop	{r4, r5, pc}
    16f4:	200000c0 	.word	0x200000c0
    16f8:	000007e2 	.word	0x000007e2
    16fc:	00001955 	.word	0x00001955
    1700:	20000078 	.word	0x20000078
    1704:	40001400 	.word	0x40001400
    1708:	00000ce1 	.word	0x00000ce1
    170c:	00000be9 	.word	0x00000be9

00001710 <main>:

int main(void)
{
    1710:	b500      	push	{lr}
    1712:	b083      	sub	sp, #12
	system_init();
    1714:	4b0d      	ldr	r3, [pc, #52]	; (174c <main+0x3c>)
    1716:	4798      	blx	r3
	configure_usart();
    1718:	4b0d      	ldr	r3, [pc, #52]	; (1750 <main+0x40>)
    171a:	4798      	blx	r3
	time->pm     = 0;
    171c:	2300      	movs	r3, #0
    171e:	466a      	mov	r2, sp
    1720:	70d3      	strb	r3, [r2, #3]
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
	time.year   = 2012;
    1722:	4b0c      	ldr	r3, [pc, #48]	; (1754 <main+0x44>)
    1724:	80d3      	strh	r3, [r2, #6]
	time.month  = 12;
    1726:	230c      	movs	r3, #12
    1728:	7153      	strb	r3, [r2, #5]
	time.day    = 31;
    172a:	3313      	adds	r3, #19
    172c:	7113      	strb	r3, [r2, #4]
	time.hour   = 23;
    172e:	3b08      	subs	r3, #8
    1730:	7093      	strb	r3, [r2, #2]
	time.minute = 59;
    1732:	3324      	adds	r3, #36	; 0x24
    1734:	7053      	strb	r3, [r2, #1]
	time.second = 59;
    1736:	7013      	strb	r3, [r2, #0]
	configure_rtc_calendar();
    1738:	4b07      	ldr	r3, [pc, #28]	; (1758 <main+0x48>)
    173a:	4798      	blx	r3
	configure_rtc_callbacks();
    173c:	4b07      	ldr	r3, [pc, #28]	; (175c <main+0x4c>)
    173e:	4798      	blx	r3
	int count = 0;
	rtc_calendar_set_time(&rtc_instance, &time);
    1740:	4669      	mov	r1, sp
    1742:	4807      	ldr	r0, [pc, #28]	; (1760 <main+0x50>)
    1744:	4b07      	ldr	r3, [pc, #28]	; (1764 <main+0x54>)
    1746:	4798      	blx	r3
    1748:	e7fe      	b.n	1748 <main+0x38>
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	0000143d 	.word	0x0000143d
    1750:	000015c1 	.word	0x000015c1
    1754:	000007dc 	.word	0x000007dc
    1758:	000016a5 	.word	0x000016a5
    175c:	0000167d 	.word	0x0000167d
    1760:	20000078 	.word	0x20000078
    1764:	00000c99 	.word	0x00000c99

00001768 <__udivsi3>:
    1768:	2200      	movs	r2, #0
    176a:	0843      	lsrs	r3, r0, #1
    176c:	428b      	cmp	r3, r1
    176e:	d374      	bcc.n	185a <__udivsi3+0xf2>
    1770:	0903      	lsrs	r3, r0, #4
    1772:	428b      	cmp	r3, r1
    1774:	d35f      	bcc.n	1836 <__udivsi3+0xce>
    1776:	0a03      	lsrs	r3, r0, #8
    1778:	428b      	cmp	r3, r1
    177a:	d344      	bcc.n	1806 <__udivsi3+0x9e>
    177c:	0b03      	lsrs	r3, r0, #12
    177e:	428b      	cmp	r3, r1
    1780:	d328      	bcc.n	17d4 <__udivsi3+0x6c>
    1782:	0c03      	lsrs	r3, r0, #16
    1784:	428b      	cmp	r3, r1
    1786:	d30d      	bcc.n	17a4 <__udivsi3+0x3c>
    1788:	22ff      	movs	r2, #255	; 0xff
    178a:	0209      	lsls	r1, r1, #8
    178c:	ba12      	rev	r2, r2
    178e:	0c03      	lsrs	r3, r0, #16
    1790:	428b      	cmp	r3, r1
    1792:	d302      	bcc.n	179a <__udivsi3+0x32>
    1794:	1212      	asrs	r2, r2, #8
    1796:	0209      	lsls	r1, r1, #8
    1798:	d065      	beq.n	1866 <__udivsi3+0xfe>
    179a:	0b03      	lsrs	r3, r0, #12
    179c:	428b      	cmp	r3, r1
    179e:	d319      	bcc.n	17d4 <__udivsi3+0x6c>
    17a0:	e000      	b.n	17a4 <__udivsi3+0x3c>
    17a2:	0a09      	lsrs	r1, r1, #8
    17a4:	0bc3      	lsrs	r3, r0, #15
    17a6:	428b      	cmp	r3, r1
    17a8:	d301      	bcc.n	17ae <__udivsi3+0x46>
    17aa:	03cb      	lsls	r3, r1, #15
    17ac:	1ac0      	subs	r0, r0, r3
    17ae:	4152      	adcs	r2, r2
    17b0:	0b83      	lsrs	r3, r0, #14
    17b2:	428b      	cmp	r3, r1
    17b4:	d301      	bcc.n	17ba <__udivsi3+0x52>
    17b6:	038b      	lsls	r3, r1, #14
    17b8:	1ac0      	subs	r0, r0, r3
    17ba:	4152      	adcs	r2, r2
    17bc:	0b43      	lsrs	r3, r0, #13
    17be:	428b      	cmp	r3, r1
    17c0:	d301      	bcc.n	17c6 <__udivsi3+0x5e>
    17c2:	034b      	lsls	r3, r1, #13
    17c4:	1ac0      	subs	r0, r0, r3
    17c6:	4152      	adcs	r2, r2
    17c8:	0b03      	lsrs	r3, r0, #12
    17ca:	428b      	cmp	r3, r1
    17cc:	d301      	bcc.n	17d2 <__udivsi3+0x6a>
    17ce:	030b      	lsls	r3, r1, #12
    17d0:	1ac0      	subs	r0, r0, r3
    17d2:	4152      	adcs	r2, r2
    17d4:	0ac3      	lsrs	r3, r0, #11
    17d6:	428b      	cmp	r3, r1
    17d8:	d301      	bcc.n	17de <__udivsi3+0x76>
    17da:	02cb      	lsls	r3, r1, #11
    17dc:	1ac0      	subs	r0, r0, r3
    17de:	4152      	adcs	r2, r2
    17e0:	0a83      	lsrs	r3, r0, #10
    17e2:	428b      	cmp	r3, r1
    17e4:	d301      	bcc.n	17ea <__udivsi3+0x82>
    17e6:	028b      	lsls	r3, r1, #10
    17e8:	1ac0      	subs	r0, r0, r3
    17ea:	4152      	adcs	r2, r2
    17ec:	0a43      	lsrs	r3, r0, #9
    17ee:	428b      	cmp	r3, r1
    17f0:	d301      	bcc.n	17f6 <__udivsi3+0x8e>
    17f2:	024b      	lsls	r3, r1, #9
    17f4:	1ac0      	subs	r0, r0, r3
    17f6:	4152      	adcs	r2, r2
    17f8:	0a03      	lsrs	r3, r0, #8
    17fa:	428b      	cmp	r3, r1
    17fc:	d301      	bcc.n	1802 <__udivsi3+0x9a>
    17fe:	020b      	lsls	r3, r1, #8
    1800:	1ac0      	subs	r0, r0, r3
    1802:	4152      	adcs	r2, r2
    1804:	d2cd      	bcs.n	17a2 <__udivsi3+0x3a>
    1806:	09c3      	lsrs	r3, r0, #7
    1808:	428b      	cmp	r3, r1
    180a:	d301      	bcc.n	1810 <__udivsi3+0xa8>
    180c:	01cb      	lsls	r3, r1, #7
    180e:	1ac0      	subs	r0, r0, r3
    1810:	4152      	adcs	r2, r2
    1812:	0983      	lsrs	r3, r0, #6
    1814:	428b      	cmp	r3, r1
    1816:	d301      	bcc.n	181c <__udivsi3+0xb4>
    1818:	018b      	lsls	r3, r1, #6
    181a:	1ac0      	subs	r0, r0, r3
    181c:	4152      	adcs	r2, r2
    181e:	0943      	lsrs	r3, r0, #5
    1820:	428b      	cmp	r3, r1
    1822:	d301      	bcc.n	1828 <__udivsi3+0xc0>
    1824:	014b      	lsls	r3, r1, #5
    1826:	1ac0      	subs	r0, r0, r3
    1828:	4152      	adcs	r2, r2
    182a:	0903      	lsrs	r3, r0, #4
    182c:	428b      	cmp	r3, r1
    182e:	d301      	bcc.n	1834 <__udivsi3+0xcc>
    1830:	010b      	lsls	r3, r1, #4
    1832:	1ac0      	subs	r0, r0, r3
    1834:	4152      	adcs	r2, r2
    1836:	08c3      	lsrs	r3, r0, #3
    1838:	428b      	cmp	r3, r1
    183a:	d301      	bcc.n	1840 <__udivsi3+0xd8>
    183c:	00cb      	lsls	r3, r1, #3
    183e:	1ac0      	subs	r0, r0, r3
    1840:	4152      	adcs	r2, r2
    1842:	0883      	lsrs	r3, r0, #2
    1844:	428b      	cmp	r3, r1
    1846:	d301      	bcc.n	184c <__udivsi3+0xe4>
    1848:	008b      	lsls	r3, r1, #2
    184a:	1ac0      	subs	r0, r0, r3
    184c:	4152      	adcs	r2, r2
    184e:	0843      	lsrs	r3, r0, #1
    1850:	428b      	cmp	r3, r1
    1852:	d301      	bcc.n	1858 <__udivsi3+0xf0>
    1854:	004b      	lsls	r3, r1, #1
    1856:	1ac0      	subs	r0, r0, r3
    1858:	4152      	adcs	r2, r2
    185a:	1a41      	subs	r1, r0, r1
    185c:	d200      	bcs.n	1860 <__udivsi3+0xf8>
    185e:	4601      	mov	r1, r0
    1860:	4152      	adcs	r2, r2
    1862:	4610      	mov	r0, r2
    1864:	4770      	bx	lr
    1866:	e7ff      	b.n	1868 <__udivsi3+0x100>
    1868:	b501      	push	{r0, lr}
    186a:	2000      	movs	r0, #0
    186c:	f000 f806 	bl	187c <__aeabi_idiv0>
    1870:	bd02      	pop	{r1, pc}
    1872:	46c0      	nop			; (mov r8, r8)

00001874 <__aeabi_uidivmod>:
    1874:	2900      	cmp	r1, #0
    1876:	d0f7      	beq.n	1868 <__udivsi3+0x100>
    1878:	e776      	b.n	1768 <__udivsi3>
    187a:	4770      	bx	lr

0000187c <__aeabi_idiv0>:
    187c:	4770      	bx	lr
    187e:	46c0      	nop			; (mov r8, r8)

00001880 <__aeabi_lmul>:
    1880:	b5f0      	push	{r4, r5, r6, r7, lr}
    1882:	46ce      	mov	lr, r9
    1884:	4647      	mov	r7, r8
    1886:	0415      	lsls	r5, r2, #16
    1888:	0c2d      	lsrs	r5, r5, #16
    188a:	002e      	movs	r6, r5
    188c:	b580      	push	{r7, lr}
    188e:	0407      	lsls	r7, r0, #16
    1890:	0c14      	lsrs	r4, r2, #16
    1892:	0c3f      	lsrs	r7, r7, #16
    1894:	4699      	mov	r9, r3
    1896:	0c03      	lsrs	r3, r0, #16
    1898:	437e      	muls	r6, r7
    189a:	435d      	muls	r5, r3
    189c:	4367      	muls	r7, r4
    189e:	4363      	muls	r3, r4
    18a0:	197f      	adds	r7, r7, r5
    18a2:	0c34      	lsrs	r4, r6, #16
    18a4:	19e4      	adds	r4, r4, r7
    18a6:	469c      	mov	ip, r3
    18a8:	42a5      	cmp	r5, r4
    18aa:	d903      	bls.n	18b4 <__aeabi_lmul+0x34>
    18ac:	2380      	movs	r3, #128	; 0x80
    18ae:	025b      	lsls	r3, r3, #9
    18b0:	4698      	mov	r8, r3
    18b2:	44c4      	add	ip, r8
    18b4:	464b      	mov	r3, r9
    18b6:	4351      	muls	r1, r2
    18b8:	4343      	muls	r3, r0
    18ba:	0436      	lsls	r6, r6, #16
    18bc:	0c36      	lsrs	r6, r6, #16
    18be:	0c25      	lsrs	r5, r4, #16
    18c0:	0424      	lsls	r4, r4, #16
    18c2:	4465      	add	r5, ip
    18c4:	19a4      	adds	r4, r4, r6
    18c6:	1859      	adds	r1, r3, r1
    18c8:	1949      	adds	r1, r1, r5
    18ca:	0020      	movs	r0, r4
    18cc:	bc0c      	pop	{r2, r3}
    18ce:	4690      	mov	r8, r2
    18d0:	4699      	mov	r9, r3
    18d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000018d4 <__libc_init_array>:
    18d4:	b570      	push	{r4, r5, r6, lr}
    18d6:	2600      	movs	r6, #0
    18d8:	4d0c      	ldr	r5, [pc, #48]	; (190c <__libc_init_array+0x38>)
    18da:	4c0d      	ldr	r4, [pc, #52]	; (1910 <__libc_init_array+0x3c>)
    18dc:	1b64      	subs	r4, r4, r5
    18de:	10a4      	asrs	r4, r4, #2
    18e0:	42a6      	cmp	r6, r4
    18e2:	d109      	bne.n	18f8 <__libc_init_array+0x24>
    18e4:	2600      	movs	r6, #0
    18e6:	f000 f8c1 	bl	1a6c <_init>
    18ea:	4d0a      	ldr	r5, [pc, #40]	; (1914 <__libc_init_array+0x40>)
    18ec:	4c0a      	ldr	r4, [pc, #40]	; (1918 <__libc_init_array+0x44>)
    18ee:	1b64      	subs	r4, r4, r5
    18f0:	10a4      	asrs	r4, r4, #2
    18f2:	42a6      	cmp	r6, r4
    18f4:	d105      	bne.n	1902 <__libc_init_array+0x2e>
    18f6:	bd70      	pop	{r4, r5, r6, pc}
    18f8:	00b3      	lsls	r3, r6, #2
    18fa:	58eb      	ldr	r3, [r5, r3]
    18fc:	4798      	blx	r3
    18fe:	3601      	adds	r6, #1
    1900:	e7ee      	b.n	18e0 <__libc_init_array+0xc>
    1902:	00b3      	lsls	r3, r6, #2
    1904:	58eb      	ldr	r3, [r5, r3]
    1906:	4798      	blx	r3
    1908:	3601      	adds	r6, #1
    190a:	e7f2      	b.n	18f2 <__libc_init_array+0x1e>
    190c:	00001a78 	.word	0x00001a78
    1910:	00001a78 	.word	0x00001a78
    1914:	00001a78 	.word	0x00001a78
    1918:	00001a7c 	.word	0x00001a7c

0000191c <__itoa>:
    191c:	1e93      	subs	r3, r2, #2
    191e:	b510      	push	{r4, lr}
    1920:	000c      	movs	r4, r1
    1922:	2b22      	cmp	r3, #34	; 0x22
    1924:	d904      	bls.n	1930 <__itoa+0x14>
    1926:	2300      	movs	r3, #0
    1928:	001c      	movs	r4, r3
    192a:	700b      	strb	r3, [r1, #0]
    192c:	0020      	movs	r0, r4
    192e:	bd10      	pop	{r4, pc}
    1930:	2a0a      	cmp	r2, #10
    1932:	d109      	bne.n	1948 <__itoa+0x2c>
    1934:	2800      	cmp	r0, #0
    1936:	da07      	bge.n	1948 <__itoa+0x2c>
    1938:	232d      	movs	r3, #45	; 0x2d
    193a:	700b      	strb	r3, [r1, #0]
    193c:	2101      	movs	r1, #1
    193e:	4240      	negs	r0, r0
    1940:	1861      	adds	r1, r4, r1
    1942:	f000 f811 	bl	1968 <__utoa>
    1946:	e7f1      	b.n	192c <__itoa+0x10>
    1948:	2100      	movs	r1, #0
    194a:	e7f9      	b.n	1940 <__itoa+0x24>

0000194c <itoa>:
    194c:	b510      	push	{r4, lr}
    194e:	f7ff ffe5 	bl	191c <__itoa>
    1952:	bd10      	pop	{r4, pc}

00001954 <memcpy>:
    1954:	2300      	movs	r3, #0
    1956:	b510      	push	{r4, lr}
    1958:	429a      	cmp	r2, r3
    195a:	d100      	bne.n	195e <memcpy+0xa>
    195c:	bd10      	pop	{r4, pc}
    195e:	5ccc      	ldrb	r4, [r1, r3]
    1960:	54c4      	strb	r4, [r0, r3]
    1962:	3301      	adds	r3, #1
    1964:	e7f8      	b.n	1958 <memcpy+0x4>
	...

00001968 <__utoa>:
    1968:	b5f0      	push	{r4, r5, r6, r7, lr}
    196a:	0017      	movs	r7, r2
    196c:	b08f      	sub	sp, #60	; 0x3c
    196e:	2225      	movs	r2, #37	; 0x25
    1970:	0006      	movs	r6, r0
    1972:	000d      	movs	r5, r1
    1974:	a804      	add	r0, sp, #16
    1976:	4918      	ldr	r1, [pc, #96]	; (19d8 <__utoa+0x70>)
    1978:	f7ff ffec 	bl	1954 <memcpy>
    197c:	aa04      	add	r2, sp, #16
    197e:	1ebb      	subs	r3, r7, #2
    1980:	2400      	movs	r4, #0
    1982:	9203      	str	r2, [sp, #12]
    1984:	2b22      	cmp	r3, #34	; 0x22
    1986:	d905      	bls.n	1994 <__utoa+0x2c>
    1988:	702c      	strb	r4, [r5, #0]
    198a:	0025      	movs	r5, r4
    198c:	0028      	movs	r0, r5
    198e:	b00f      	add	sp, #60	; 0x3c
    1990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1992:	9c01      	ldr	r4, [sp, #4]
    1994:	1c63      	adds	r3, r4, #1
    1996:	9301      	str	r3, [sp, #4]
    1998:	18eb      	adds	r3, r5, r3
    199a:	9300      	str	r3, [sp, #0]
    199c:	0030      	movs	r0, r6
    199e:	3b01      	subs	r3, #1
    19a0:	0039      	movs	r1, r7
    19a2:	9302      	str	r3, [sp, #8]
    19a4:	f7ff ff66 	bl	1874 <__aeabi_uidivmod>
    19a8:	9b03      	ldr	r3, [sp, #12]
    19aa:	9a02      	ldr	r2, [sp, #8]
    19ac:	5c5b      	ldrb	r3, [r3, r1]
    19ae:	0030      	movs	r0, r6
    19b0:	7013      	strb	r3, [r2, #0]
    19b2:	0039      	movs	r1, r7
    19b4:	f7ff fed8 	bl	1768 <__udivsi3>
    19b8:	1e06      	subs	r6, r0, #0
    19ba:	d1ea      	bne.n	1992 <__utoa+0x2a>
    19bc:	9b00      	ldr	r3, [sp, #0]
    19be:	7018      	strb	r0, [r3, #0]
    19c0:	002b      	movs	r3, r5
    19c2:	1b5a      	subs	r2, r3, r5
    19c4:	4294      	cmp	r4, r2
    19c6:	dde1      	ble.n	198c <__utoa+0x24>
    19c8:	781a      	ldrb	r2, [r3, #0]
    19ca:	5d29      	ldrb	r1, [r5, r4]
    19cc:	7019      	strb	r1, [r3, #0]
    19ce:	552a      	strb	r2, [r5, r4]
    19d0:	3301      	adds	r3, #1
    19d2:	3c01      	subs	r4, #1
    19d4:	e7f5      	b.n	19c2 <__utoa+0x5a>
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	00001a44 	.word	0x00001a44
    19dc:	42000800 	.word	0x42000800
    19e0:	42000c00 	.word	0x42000c00
    19e4:	42001000 	.word	0x42001000
    19e8:	42001400 	.word	0x42001400
    19ec:	42001800 	.word	0x42001800
    19f0:	42001c00 	.word	0x42001c00
    19f4:	00000e0e 	.word	0x00000e0e
    19f8:	00000e0a 	.word	0x00000e0a
    19fc:	00000e0a 	.word	0x00000e0a
    1a00:	00000e6c 	.word	0x00000e6c
    1a04:	00000e6c 	.word	0x00000e6c
    1a08:	00000e22 	.word	0x00000e22
    1a0c:	00000e14 	.word	0x00000e14
    1a10:	00000e28 	.word	0x00000e28
    1a14:	00000e5a 	.word	0x00000e5a
    1a18:	00000f70 	.word	0x00000f70
    1a1c:	00000f50 	.word	0x00000f50
    1a20:	00000f50 	.word	0x00000f50
    1a24:	00000fdc 	.word	0x00000fdc
    1a28:	00000f62 	.word	0x00000f62
    1a2c:	00000f7e 	.word	0x00000f7e
    1a30:	00000f54 	.word	0x00000f54
    1a34:	00000f8c 	.word	0x00000f8c
    1a38:	00000fcc 	.word	0x00000fcc
    1a3c:	4a325b1b 	.word	0x4a325b1b
    1a40:	00000000 	.word	0x00000000
    1a44:	33323130 	.word	0x33323130
    1a48:	37363534 	.word	0x37363534
    1a4c:	62613938 	.word	0x62613938
    1a50:	66656463 	.word	0x66656463
    1a54:	6a696867 	.word	0x6a696867
    1a58:	6e6d6c6b 	.word	0x6e6d6c6b
    1a5c:	7271706f 	.word	0x7271706f
    1a60:	76757473 	.word	0x76757473
    1a64:	7a797877 	.word	0x7a797877
    1a68:	00000000 	.word	0x00000000

00001a6c <_init>:
    1a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1a72:	bc08      	pop	{r3}
    1a74:	469e      	mov	lr, r3
    1a76:	4770      	bx	lr

00001a78 <__init_array_start>:
    1a78:	000000dd 	.word	0x000000dd

00001a7c <_fini>:
    1a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1a82:	bc08      	pop	{r3}
    1a84:	469e      	mov	lr, r3
    1a86:	4770      	bx	lr

00001a88 <__fini_array_start>:
    1a88:	000000b5 	.word	0x000000b5
