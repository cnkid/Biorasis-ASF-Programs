
RTC_QUICK_START_COUNT_INTERRUPT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bb8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000bb8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  20000004  00000bbc  00020004  2**2
                  ALLOC
  3 .stack        00002004  2000005c  00000c14  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016001  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022a5  00000000  00000000  00036086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000002f8  00000000  00000000  0003832b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000298  00000000  00000000  00038623  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00018697  00000000  00000000  000388bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000710f  00000000  00000000  00050f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008af62  00000000  00000000  00058061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000006d4  00000000  00000000  000e2fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002569  00000000  00000000  000e3698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	60 20 00 20 a5 09 00 00 a1 09 00 00 a1 09 00 00     ` . ............
	...
  2c:	a1 09 00 00 00 00 00 00 00 00 00 00 a1 09 00 00     ................
  3c:	a1 09 00 00 a1 09 00 00 a1 09 00 00 a1 09 00 00     ................
  4c:	2d 04 00 00 a1 09 00 00 a1 09 00 00 a1 09 00 00     -...............
  5c:	a1 09 00 00 a1 09 00 00 a1 09 00 00 a1 09 00 00     ................
  6c:	a1 09 00 00 a1 09 00 00 a1 09 00 00 a1 09 00 00     ................
  7c:	a1 09 00 00 a1 09 00 00 a1 09 00 00 a1 09 00 00     ................
  8c:	a1 09 00 00 a1 09 00 00 a1 09 00 00 a1 09 00 00     ................
  9c:	a1 09 00 00 a1 09 00 00 a1 09 00 00 a1 09 00 00     ................
  ac:	a1 09 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000004 	.word	0x20000004
  d4:	00000000 	.word	0x00000000
  d8:	00000bb8 	.word	0x00000bb8

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000008 	.word	0x20000008
 108:	00000bb8 	.word	0x00000bb8
 10c:	00000bb8 	.word	0x00000bb8
 110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 114:	4b0c      	ldr	r3, [pc, #48]	; (148 <cpu_irq_enter_critical+0x34>)
 116:	681b      	ldr	r3, [r3, #0]
 118:	2b00      	cmp	r3, #0
 11a:	d106      	bne.n	12a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 11c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 120:	2b00      	cmp	r3, #0
 122:	d007      	beq.n	134 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 124:	2200      	movs	r2, #0
 126:	4b09      	ldr	r3, [pc, #36]	; (14c <cpu_irq_enter_critical+0x38>)
 128:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 12a:	4a07      	ldr	r2, [pc, #28]	; (148 <cpu_irq_enter_critical+0x34>)
 12c:	6813      	ldr	r3, [r2, #0]
 12e:	3301      	adds	r3, #1
 130:	6013      	str	r3, [r2, #0]
}
 132:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 134:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 136:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 13a:	2200      	movs	r2, #0
 13c:	4b04      	ldr	r3, [pc, #16]	; (150 <cpu_irq_enter_critical+0x3c>)
 13e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 140:	3201      	adds	r2, #1
 142:	4b02      	ldr	r3, [pc, #8]	; (14c <cpu_irq_enter_critical+0x38>)
 144:	701a      	strb	r2, [r3, #0]
 146:	e7f0      	b.n	12a <cpu_irq_enter_critical+0x16>
 148:	20000020 	.word	0x20000020
 14c:	20000024 	.word	0x20000024
 150:	20000000 	.word	0x20000000

00000154 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 154:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x24>)
 156:	681a      	ldr	r2, [r3, #0]
 158:	3a01      	subs	r2, #1
 15a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 15c:	681b      	ldr	r3, [r3, #0]
 15e:	2b00      	cmp	r3, #0
 160:	d109      	bne.n	176 <cpu_irq_leave_critical+0x22>
 162:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x28>)
 164:	781b      	ldrb	r3, [r3, #0]
 166:	2b00      	cmp	r3, #0
 168:	d005      	beq.n	176 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 16a:	2201      	movs	r2, #1
 16c:	4b04      	ldr	r3, [pc, #16]	; (180 <cpu_irq_leave_critical+0x2c>)
 16e:	701a      	strb	r2, [r3, #0]
 170:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 174:	b662      	cpsie	i
	}
}
 176:	4770      	bx	lr
 178:	20000020 	.word	0x20000020
 17c:	20000024 	.word	0x20000024
 180:	20000000 	.word	0x20000000

00000184 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 184:	b5f0      	push	{r4, r5, r6, r7, lr}
 186:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 188:	ac01      	add	r4, sp, #4
 18a:	2501      	movs	r5, #1
 18c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 18e:	2700      	movs	r7, #0
 190:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 192:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 194:	0021      	movs	r1, r4
 196:	203e      	movs	r0, #62	; 0x3e
 198:	4e06      	ldr	r6, [pc, #24]	; (1b4 <system_board_init+0x30>)
 19a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 19c:	2280      	movs	r2, #128	; 0x80
 19e:	05d2      	lsls	r2, r2, #23
 1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <system_board_init+0x34>)
 1a2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 1a4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 1a6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 1a8:	0021      	movs	r1, r4
 1aa:	200f      	movs	r0, #15
 1ac:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
 1ae:	b003      	add	sp, #12
 1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1b2:	46c0      	nop			; (mov r8, r8)
 1b4:	000001bd 	.word	0x000001bd
 1b8:	41004480 	.word	0x41004480

000001bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 1bc:	b500      	push	{lr}
 1be:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 1c0:	ab01      	add	r3, sp, #4
 1c2:	2280      	movs	r2, #128	; 0x80
 1c4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 1c6:	780a      	ldrb	r2, [r1, #0]
 1c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 1ca:	784a      	ldrb	r2, [r1, #1]
 1cc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 1ce:	788a      	ldrb	r2, [r1, #2]
 1d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 1d2:	0019      	movs	r1, r3
 1d4:	4b01      	ldr	r3, [pc, #4]	; (1dc <port_pin_set_config+0x20>)
 1d6:	4798      	blx	r3
}
 1d8:	b003      	add	sp, #12
 1da:	bd00      	pop	{pc}
 1dc:	00000941 	.word	0x00000941

000001e0 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
 1e0:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
 1e2:	7a98      	ldrb	r0, [r3, #10]
 1e4:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
 1e6:	4770      	bx	lr

000001e8 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
 1e8:	b570      	push	{r4, r5, r6, lr}
 1ea:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
 1ec:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 1ee:	2208      	movs	r2, #8
 1f0:	4b05      	ldr	r3, [pc, #20]	; (208 <rtc_count_enable+0x20>)
 1f2:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
 1f4:	4d05      	ldr	r5, [pc, #20]	; (20c <rtc_count_enable+0x24>)
 1f6:	0020      	movs	r0, r4
 1f8:	47a8      	blx	r5
 1fa:	2800      	cmp	r0, #0
 1fc:	d1fb      	bne.n	1f6 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
 1fe:	8833      	ldrh	r3, [r6, #0]
 200:	2202      	movs	r2, #2
 202:	4313      	orrs	r3, r2
 204:	8033      	strh	r3, [r6, #0]
}
 206:	bd70      	pop	{r4, r5, r6, pc}
 208:	e000e100 	.word	0xe000e100
 20c:	000001e1 	.word	0x000001e1

00000210 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
 210:	b570      	push	{r4, r5, r6, lr}
 212:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
 214:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 216:	2108      	movs	r1, #8
 218:	2380      	movs	r3, #128	; 0x80
 21a:	4a07      	ldr	r2, [pc, #28]	; (238 <rtc_count_disable+0x28>)
 21c:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
 21e:	4d07      	ldr	r5, [pc, #28]	; (23c <rtc_count_disable+0x2c>)
 220:	0020      	movs	r0, r4
 222:	47a8      	blx	r5
 224:	2800      	cmp	r0, #0
 226:	d1fb      	bne.n	220 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
 228:	23c1      	movs	r3, #193	; 0xc1
 22a:	71b3      	strb	r3, [r6, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
 22c:	7233      	strb	r3, [r6, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
 22e:	8833      	ldrh	r3, [r6, #0]
 230:	2202      	movs	r2, #2
 232:	4393      	bics	r3, r2
 234:	8033      	strh	r3, [r6, #0]
}
 236:	bd70      	pop	{r4, r5, r6, pc}
 238:	e000e100 	.word	0xe000e100
 23c:	000001e1 	.word	0x000001e1

00000240 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
 240:	b570      	push	{r4, r5, r6, lr}
 242:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
 244:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
 246:	4b07      	ldr	r3, [pc, #28]	; (264 <rtc_count_reset+0x24>)
 248:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
 24a:	2300      	movs	r3, #0
 24c:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
 24e:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
 250:	4d05      	ldr	r5, [pc, #20]	; (268 <rtc_count_reset+0x28>)
 252:	0020      	movs	r0, r4
 254:	47a8      	blx	r5
 256:	2800      	cmp	r0, #0
 258:	d1fb      	bne.n	252 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
 25a:	8833      	ldrh	r3, [r6, #0]
 25c:	2201      	movs	r2, #1
 25e:	4313      	orrs	r3, r2
 260:	8033      	strh	r3, [r6, #0]
}
 262:	bd70      	pop	{r4, r5, r6, pc}
 264:	00000211 	.word	0x00000211
 268:	000001e1 	.word	0x000001e1

0000026c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
 26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 26e:	b083      	sub	sp, #12
 270:	0004      	movs	r4, r0
 272:	9101      	str	r1, [sp, #4]
 274:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
 276:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
 278:	4f11      	ldr	r7, [pc, #68]	; (2c0 <rtc_count_set_compare+0x54>)
 27a:	0020      	movs	r0, r4
 27c:	47b8      	blx	r7
 27e:	2800      	cmp	r0, #0
 280:	d1fb      	bne.n	27a <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
 282:	7923      	ldrb	r3, [r4, #4]
 284:	2b00      	cmp	r3, #0
 286:	d00a      	beq.n	29e <rtc_count_set_compare+0x32>
 288:	2b01      	cmp	r3, #1
 28a:	d116      	bne.n	2ba <rtc_count_set_compare+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
 28c:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
 28e:	2d01      	cmp	r5, #1
 290:	d814      	bhi.n	2bc <rtc_count_set_compare+0x50>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
 292:	3506      	adds	r5, #6
 294:	00ad      	lsls	r5, r5, #2
 296:	9b01      	ldr	r3, [sp, #4]
 298:	51ab      	str	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
 29a:	2000      	movs	r0, #0
			break;
 29c:	e00e      	b.n	2bc <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
 29e:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
 2a0:	2d02      	cmp	r5, #2
 2a2:	d80b      	bhi.n	2bc <rtc_count_set_compare+0x50>
			if (comp_value > 0xffff) {
 2a4:	4b07      	ldr	r3, [pc, #28]	; (2c4 <rtc_count_set_compare+0x58>)
 2a6:	9a01      	ldr	r2, [sp, #4]
 2a8:	429a      	cmp	r2, r3
 2aa:	d807      	bhi.n	2bc <rtc_count_set_compare+0x50>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
 2ac:	466b      	mov	r3, sp
 2ae:	889b      	ldrh	r3, [r3, #4]
 2b0:	350c      	adds	r5, #12
 2b2:	006d      	lsls	r5, r5, #1
 2b4:	53ab      	strh	r3, [r5, r6]
	return STATUS_OK;
 2b6:	2000      	movs	r0, #0
			break;
 2b8:	e000      	b.n	2bc <rtc_count_set_compare+0x50>
			return STATUS_ERR_BAD_FORMAT;
 2ba:	201a      	movs	r0, #26
}
 2bc:	b003      	add	sp, #12
 2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 2c0:	000001e1 	.word	0x000001e1
 2c4:	0000ffff 	.word	0x0000ffff

000002c8 <rtc_count_init>:
{
 2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 2ca:	b083      	sub	sp, #12
 2cc:	0004      	movs	r4, r0
 2ce:	0016      	movs	r6, r2
	module->hw = hw;
 2d0:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 2d2:	4a2e      	ldr	r2, [pc, #184]	; (38c <rtc_count_init+0xc4>)
 2d4:	6993      	ldr	r3, [r2, #24]
 2d6:	2120      	movs	r1, #32
 2d8:	430b      	orrs	r3, r1
 2da:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
 2dc:	a901      	add	r1, sp, #4
 2de:	2302      	movs	r3, #2
 2e0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
 2e2:	2004      	movs	r0, #4
 2e4:	4b2a      	ldr	r3, [pc, #168]	; (390 <rtc_count_init+0xc8>)
 2e6:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
 2e8:	2004      	movs	r0, #4
 2ea:	4b2a      	ldr	r3, [pc, #168]	; (394 <rtc_count_init+0xcc>)
 2ec:	4798      	blx	r3
	rtc_count_reset(module);
 2ee:	0020      	movs	r0, r4
 2f0:	4b29      	ldr	r3, [pc, #164]	; (398 <rtc_count_init+0xd0>)
 2f2:	4798      	blx	r3
	module->mode                = config->mode;
 2f4:	78b3      	ldrb	r3, [r6, #2]
 2f6:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
 2f8:	7933      	ldrb	r3, [r6, #4]
 2fa:	7163      	strb	r3, [r4, #5]
	_rtc_instance[0] = module;
 2fc:	4b27      	ldr	r3, [pc, #156]	; (39c <rtc_count_init+0xd4>)
 2fe:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
 300:	6827      	ldr	r7, [r4, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
 302:	8833      	ldrh	r3, [r6, #0]
 304:	803b      	strh	r3, [r7, #0]
	switch (config->mode) {
 306:	78b3      	ldrb	r3, [r6, #2]
 308:	2b00      	cmp	r3, #0
 30a:	d021      	beq.n	350 <rtc_count_init+0x88>
			return STATUS_ERR_INVALID_ARG;
 30c:	2017      	movs	r0, #23
	switch (config->mode) {
 30e:	2b01      	cmp	r3, #1
 310:	d11c      	bne.n	34c <rtc_count_init+0x84>
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
 312:	883b      	ldrh	r3, [r7, #0]
 314:	b29b      	uxth	r3, r3
 316:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
 318:	78f3      	ldrb	r3, [r6, #3]
 31a:	2b00      	cmp	r3, #0
 31c:	d003      	beq.n	326 <rtc_count_init+0x5e>
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
 31e:	883b      	ldrh	r3, [r7, #0]
 320:	2280      	movs	r2, #128	; 0x80
 322:	4313      	orrs	r3, r2
 324:	803b      	strh	r3, [r7, #0]
				while (rtc_count_is_syncing(module)) {
 326:	4d1e      	ldr	r5, [pc, #120]	; (3a0 <rtc_count_init+0xd8>)
 328:	0020      	movs	r0, r4
 32a:	47a8      	blx	r5
 32c:	2800      	cmp	r0, #0
 32e:	d1fb      	bne.n	328 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
 330:	2200      	movs	r2, #0
 332:	68b1      	ldr	r1, [r6, #8]
 334:	0020      	movs	r0, r4
 336:	4b1b      	ldr	r3, [pc, #108]	; (3a4 <rtc_count_init+0xdc>)
 338:	4798      	blx	r3
	if (config->continuously_update) {
 33a:	7933      	ldrb	r3, [r6, #4]
	return STATUS_OK;
 33c:	2000      	movs	r0, #0
	if (config->continuously_update) {
 33e:	2b00      	cmp	r3, #0
 340:	d004      	beq.n	34c <rtc_count_init+0x84>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
 342:	887b      	ldrh	r3, [r7, #2]
 344:	2280      	movs	r2, #128	; 0x80
 346:	01d2      	lsls	r2, r2, #7
 348:	4313      	orrs	r3, r2
 34a:	807b      	strh	r3, [r7, #2]
}
 34c:	b003      	add	sp, #12
 34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
 350:	883b      	ldrh	r3, [r7, #0]
 352:	2204      	movs	r2, #4
 354:	4313      	orrs	r3, r2
 356:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
 358:	78f3      	ldrb	r3, [r6, #3]
				return STATUS_ERR_INVALID_ARG;
 35a:	2017      	movs	r0, #23
			if (config->clear_on_match) {
 35c:	2b00      	cmp	r3, #0
 35e:	d1f5      	bne.n	34c <rtc_count_init+0x84>
				while (rtc_count_is_syncing(module)) {
 360:	4d0f      	ldr	r5, [pc, #60]	; (3a0 <rtc_count_init+0xd8>)
 362:	0020      	movs	r0, r4
 364:	47a8      	blx	r5
 366:	2800      	cmp	r0, #0
 368:	d1fb      	bne.n	362 <rtc_count_init+0x9a>
				rtc_count_set_compare(module, config->compare_values[i],
 36a:	2200      	movs	r2, #0
 36c:	68b1      	ldr	r1, [r6, #8]
 36e:	0020      	movs	r0, r4
 370:	4b0c      	ldr	r3, [pc, #48]	; (3a4 <rtc_count_init+0xdc>)
 372:	4798      	blx	r3
				while (rtc_count_is_syncing(module)) {
 374:	4d0a      	ldr	r5, [pc, #40]	; (3a0 <rtc_count_init+0xd8>)
 376:	0020      	movs	r0, r4
 378:	47a8      	blx	r5
 37a:	2800      	cmp	r0, #0
 37c:	d1fb      	bne.n	376 <rtc_count_init+0xae>
				rtc_count_set_compare(module, config->compare_values[i],
 37e:	2201      	movs	r2, #1
 380:	68f1      	ldr	r1, [r6, #12]
 382:	0020      	movs	r0, r4
 384:	4b07      	ldr	r3, [pc, #28]	; (3a4 <rtc_count_init+0xdc>)
 386:	4798      	blx	r3
 388:	e7d7      	b.n	33a <rtc_count_init+0x72>
 38a:	46c0      	nop			; (mov r8, r8)
 38c:	40000400 	.word	0x40000400
 390:	0000087d 	.word	0x0000087d
 394:	000007f1 	.word	0x000007f1
 398:	00000241 	.word	0x00000241
 39c:	20000040 	.word	0x20000040
 3a0:	000001e1 	.word	0x000001e1
 3a4:	0000026d 	.word	0x0000026d

000003a8 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
 3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 3aa:	0004      	movs	r4, r0
 3ac:	000e      	movs	r6, r1
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
 3ae:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
 3b0:	2015      	movs	r0, #21
	if (module->mode != RTC_COUNT_MODE_16BIT) {
 3b2:	2b00      	cmp	r3, #0
 3b4:	d000      	beq.n	3b8 <rtc_count_set_period+0x10>

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;

	return STATUS_OK;
}
 3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
 3b8:	6827      	ldr	r7, [r4, #0]
	while (rtc_count_is_syncing(module)) {
 3ba:	4d03      	ldr	r5, [pc, #12]	; (3c8 <rtc_count_set_period+0x20>)
 3bc:	0020      	movs	r0, r4
 3be:	47a8      	blx	r5
 3c0:	2800      	cmp	r0, #0
 3c2:	d1fb      	bne.n	3bc <rtc_count_set_period+0x14>
	rtc_module->MODE1.PER.reg = period_value;
 3c4:	82be      	strh	r6, [r7, #20]
	return STATUS_OK;
 3c6:	e7f6      	b.n	3b6 <rtc_count_set_period+0xe>
 3c8:	000001e1 	.word	0x000001e1

000003cc <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
 3cc:	2a02      	cmp	r2, #2
 3ce:	d00b      	beq.n	3e8 <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
 3d0:	7903      	ldrb	r3, [r0, #4]
 3d2:	2b00      	cmp	r3, #0
 3d4:	d005      	beq.n	3e2 <rtc_count_register_callback+0x16>
 3d6:	2b01      	cmp	r3, #1
 3d8:	d112      	bne.n	400 <rtc_count_register_callback+0x34>
 3da:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
 3dc:	2a01      	cmp	r2, #1
 3de:	d80d      	bhi.n	3fc <rtc_count_register_callback+0x30>
 3e0:	e002      	b.n	3e8 <rtc_count_register_callback+0x1c>
 3e2:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
 3e4:	2a02      	cmp	r2, #2
 3e6:	d809      	bhi.n	3fc <rtc_count_register_callback+0x30>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
 3e8:	1c93      	adds	r3, r2, #2
 3ea:	009b      	lsls	r3, r3, #2
 3ec:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
 3ee:	8a83      	ldrh	r3, [r0, #20]
 3f0:	2101      	movs	r1, #1
 3f2:	4091      	lsls	r1, r2
 3f4:	430b      	orrs	r3, r1
 3f6:	b29b      	uxth	r3, r3
 3f8:	8283      	strh	r3, [r0, #20]
 3fa:	2300      	movs	r3, #0
	}

	return status;
}
 3fc:	0018      	movs	r0, r3
 3fe:	4770      	bx	lr
			status = STATUS_ERR_INVALID_ARG;
 400:	2317      	movs	r3, #23
 402:	e7fb      	b.n	3fc <rtc_count_register_callback+0x30>

00000404 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
 404:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
 406:	6804      	ldr	r4, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
 408:	2902      	cmp	r1, #2
 40a:	d00b      	beq.n	424 <rtc_count_enable_callback+0x20>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
 40c:	2201      	movs	r2, #1
 40e:	408a      	lsls	r2, r1
 410:	2303      	movs	r3, #3
 412:	4013      	ands	r3, r2
 414:	71e3      	strb	r3, [r4, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
 416:	8ac3      	ldrh	r3, [r0, #22]
 418:	2201      	movs	r2, #1
 41a:	408a      	lsls	r2, r1
 41c:	4313      	orrs	r3, r2
 41e:	b29b      	uxth	r3, r3
 420:	82c3      	strh	r3, [r0, #22]
}
 422:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
 424:	2380      	movs	r3, #128	; 0x80
 426:	71e3      	strb	r3, [r4, #7]
 428:	e7f5      	b.n	416 <rtc_count_enable_callback+0x12>
	...

0000042c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
 42c:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
 42e:	4b14      	ldr	r3, [pc, #80]	; (480 <RTC_Handler+0x54>)
 430:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
 432:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
 434:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
 436:	8a93      	ldrh	r3, [r2, #20]
 438:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
 43a:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
 43c:	79e3      	ldrb	r3, [r4, #7]
 43e:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
 440:	b258      	sxtb	r0, r3
 442:	2800      	cmp	r0, #0
 444:	db06      	blt.n	454 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
 446:	07d8      	lsls	r0, r3, #31
 448:	d50f      	bpl.n	46a <RTC_Handler+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
 44a:	07cb      	lsls	r3, r1, #31
 44c:	d40a      	bmi.n	464 <RTC_Handler+0x38>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
 44e:	2301      	movs	r3, #1
 450:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
 452:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
 454:	074b      	lsls	r3, r1, #29
 456:	d402      	bmi.n	45e <RTC_Handler+0x32>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
 458:	2380      	movs	r3, #128	; 0x80
 45a:	7223      	strb	r3, [r4, #8]
 45c:	e7f9      	b.n	452 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
 45e:	6913      	ldr	r3, [r2, #16]
 460:	4798      	blx	r3
 462:	e7f9      	b.n	458 <RTC_Handler+0x2c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
 464:	6893      	ldr	r3, [r2, #8]
 466:	4798      	blx	r3
 468:	e7f1      	b.n	44e <RTC_Handler+0x22>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
 46a:	079b      	lsls	r3, r3, #30
 46c:	d5f1      	bpl.n	452 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
 46e:	078b      	lsls	r3, r1, #30
 470:	d402      	bmi.n	478 <RTC_Handler+0x4c>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
 472:	2302      	movs	r3, #2
 474:	7223      	strb	r3, [r4, #8]
}
 476:	e7ec      	b.n	452 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
 478:	68d3      	ldr	r3, [r2, #12]
 47a:	4798      	blx	r3
 47c:	e7f9      	b.n	472 <RTC_Handler+0x46>
 47e:	46c0      	nop			; (mov r8, r8)
 480:	20000040 	.word	0x20000040

00000484 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 484:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 486:	490c      	ldr	r1, [pc, #48]	; (4b8 <system_clock_source_osc8m_set_config+0x34>)
 488:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 48a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 48c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 48e:	7840      	ldrb	r0, [r0, #1]
 490:	2201      	movs	r2, #1
 492:	4010      	ands	r0, r2
 494:	0180      	lsls	r0, r0, #6
 496:	2640      	movs	r6, #64	; 0x40
 498:	43b3      	bics	r3, r6
 49a:	4303      	orrs	r3, r0
 49c:	402a      	ands	r2, r5
 49e:	01d2      	lsls	r2, r2, #7
 4a0:	2080      	movs	r0, #128	; 0x80
 4a2:	4383      	bics	r3, r0
 4a4:	4313      	orrs	r3, r2
 4a6:	2203      	movs	r2, #3
 4a8:	4022      	ands	r2, r4
 4aa:	0212      	lsls	r2, r2, #8
 4ac:	4803      	ldr	r0, [pc, #12]	; (4bc <system_clock_source_osc8m_set_config+0x38>)
 4ae:	4003      	ands	r3, r0
 4b0:	4313      	orrs	r3, r2
 4b2:	620b      	str	r3, [r1, #32]
}
 4b4:	bd70      	pop	{r4, r5, r6, pc}
 4b6:	46c0      	nop			; (mov r8, r8)
 4b8:	40000800 	.word	0x40000800
 4bc:	fffffcff 	.word	0xfffffcff

000004c0 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
 4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 4c2:	46ce      	mov	lr, r9
 4c4:	4647      	mov	r7, r8
 4c6:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
 4c8:	4b19      	ldr	r3, [pc, #100]	; (530 <system_clock_source_osc32k_set_config+0x70>)
 4ca:	4699      	mov	r9, r3
 4cc:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
 4ce:	7841      	ldrb	r1, [r0, #1]
 4d0:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
 4d2:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 4d4:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
 4d6:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
 4d8:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
 4da:	7880      	ldrb	r0, [r0, #2]
 4dc:	2101      	movs	r1, #1
 4de:	4008      	ands	r0, r1
 4e0:	0080      	lsls	r0, r0, #2
 4e2:	2204      	movs	r2, #4
 4e4:	4393      	bics	r3, r2
 4e6:	4303      	orrs	r3, r0
 4e8:	4660      	mov	r0, ip
 4ea:	4008      	ands	r0, r1
 4ec:	00c0      	lsls	r0, r0, #3
 4ee:	3204      	adds	r2, #4
 4f0:	4393      	bics	r3, r2
 4f2:	4303      	orrs	r3, r0
 4f4:	0038      	movs	r0, r7
 4f6:	4008      	ands	r0, r1
 4f8:	0180      	lsls	r0, r0, #6
 4fa:	2740      	movs	r7, #64	; 0x40
 4fc:	43bb      	bics	r3, r7
 4fe:	4303      	orrs	r3, r0
 500:	0030      	movs	r0, r6
 502:	4008      	ands	r0, r1
 504:	01c0      	lsls	r0, r0, #7
 506:	2680      	movs	r6, #128	; 0x80
 508:	43b3      	bics	r3, r6
 50a:	4303      	orrs	r3, r0
 50c:	2007      	movs	r0, #7
 50e:	4005      	ands	r5, r0
 510:	022d      	lsls	r5, r5, #8
 512:	4808      	ldr	r0, [pc, #32]	; (534 <system_clock_source_osc32k_set_config+0x74>)
 514:	4003      	ands	r3, r0
 516:	432b      	orrs	r3, r5
 518:	4021      	ands	r1, r4
 51a:	0309      	lsls	r1, r1, #12
 51c:	4806      	ldr	r0, [pc, #24]	; (538 <system_clock_source_osc32k_set_config+0x78>)
 51e:	4003      	ands	r3, r0
 520:	430b      	orrs	r3, r1
 522:	464a      	mov	r2, r9
 524:	6193      	str	r3, [r2, #24]
}
 526:	bc0c      	pop	{r2, r3}
 528:	4690      	mov	r8, r2
 52a:	4699      	mov	r9, r3
 52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 52e:	46c0      	nop			; (mov r8, r8)
 530:	40000800 	.word	0x40000800
 534:	fffff8ff 	.word	0xfffff8ff
 538:	ffffefff 	.word	0xffffefff

0000053c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 53c:	2808      	cmp	r0, #8
 53e:	d803      	bhi.n	548 <system_clock_source_enable+0xc>
 540:	0080      	lsls	r0, r0, #2
 542:	4b25      	ldr	r3, [pc, #148]	; (5d8 <system_clock_source_enable+0x9c>)
 544:	581b      	ldr	r3, [r3, r0]
 546:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 548:	2017      	movs	r0, #23
 54a:	e044      	b.n	5d6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 54c:	4a23      	ldr	r2, [pc, #140]	; (5dc <system_clock_source_enable+0xa0>)
 54e:	6a13      	ldr	r3, [r2, #32]
 550:	2102      	movs	r1, #2
 552:	430b      	orrs	r3, r1
 554:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 556:	2000      	movs	r0, #0
 558:	e03d      	b.n	5d6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 55a:	4a20      	ldr	r2, [pc, #128]	; (5dc <system_clock_source_enable+0xa0>)
 55c:	6993      	ldr	r3, [r2, #24]
 55e:	2102      	movs	r1, #2
 560:	430b      	orrs	r3, r1
 562:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 564:	2000      	movs	r0, #0
		break;
 566:	e036      	b.n	5d6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 568:	4a1c      	ldr	r2, [pc, #112]	; (5dc <system_clock_source_enable+0xa0>)
 56a:	8a13      	ldrh	r3, [r2, #16]
 56c:	2102      	movs	r1, #2
 56e:	430b      	orrs	r3, r1
 570:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 572:	2000      	movs	r0, #0
		break;
 574:	e02f      	b.n	5d6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 576:	4a19      	ldr	r2, [pc, #100]	; (5dc <system_clock_source_enable+0xa0>)
 578:	8a93      	ldrh	r3, [r2, #20]
 57a:	2102      	movs	r1, #2
 57c:	430b      	orrs	r3, r1
 57e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 580:	2000      	movs	r0, #0
		break;
 582:	e028      	b.n	5d6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 584:	4916      	ldr	r1, [pc, #88]	; (5e0 <system_clock_source_enable+0xa4>)
 586:	680b      	ldr	r3, [r1, #0]
 588:	2202      	movs	r2, #2
 58a:	4313      	orrs	r3, r2
 58c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 58e:	4b13      	ldr	r3, [pc, #76]	; (5dc <system_clock_source_enable+0xa0>)
 590:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 592:	0019      	movs	r1, r3
 594:	320e      	adds	r2, #14
 596:	68cb      	ldr	r3, [r1, #12]
 598:	421a      	tst	r2, r3
 59a:	d0fc      	beq.n	596 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 59c:	4a10      	ldr	r2, [pc, #64]	; (5e0 <system_clock_source_enable+0xa4>)
 59e:	6891      	ldr	r1, [r2, #8]
 5a0:	4b0e      	ldr	r3, [pc, #56]	; (5dc <system_clock_source_enable+0xa0>)
 5a2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 5a4:	6852      	ldr	r2, [r2, #4]
 5a6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
 5a8:	2200      	movs	r2, #0
 5aa:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 5ac:	0019      	movs	r1, r3
 5ae:	3210      	adds	r2, #16
 5b0:	68cb      	ldr	r3, [r1, #12]
 5b2:	421a      	tst	r2, r3
 5b4:	d0fc      	beq.n	5b0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 5b6:	4b0a      	ldr	r3, [pc, #40]	; (5e0 <system_clock_source_enable+0xa4>)
 5b8:	681b      	ldr	r3, [r3, #0]
 5ba:	b29b      	uxth	r3, r3
 5bc:	4a07      	ldr	r2, [pc, #28]	; (5dc <system_clock_source_enable+0xa0>)
 5be:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
 5c0:	2000      	movs	r0, #0
 5c2:	e008      	b.n	5d6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 5c4:	4905      	ldr	r1, [pc, #20]	; (5dc <system_clock_source_enable+0xa0>)
 5c6:	2244      	movs	r2, #68	; 0x44
 5c8:	5c8b      	ldrb	r3, [r1, r2]
 5ca:	2002      	movs	r0, #2
 5cc:	4303      	orrs	r3, r0
 5ce:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
 5d0:	2000      	movs	r0, #0
		break;
 5d2:	e000      	b.n	5d6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
 5d4:	2000      	movs	r0, #0
}
 5d6:	4770      	bx	lr
 5d8:	00000b74 	.word	0x00000b74
 5dc:	40000800 	.word	0x40000800
 5e0:	20000028 	.word	0x20000028

000005e4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 5e6:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 5e8:	22c2      	movs	r2, #194	; 0xc2
 5ea:	00d2      	lsls	r2, r2, #3
 5ec:	4b2c      	ldr	r3, [pc, #176]	; (6a0 <system_clock_init+0xbc>)
 5ee:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 5f0:	4a2c      	ldr	r2, [pc, #176]	; (6a4 <system_clock_init+0xc0>)
 5f2:	6853      	ldr	r3, [r2, #4]
 5f4:	211e      	movs	r1, #30
 5f6:	438b      	bics	r3, r1
 5f8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 5fa:	2301      	movs	r3, #1
 5fc:	466a      	mov	r2, sp
 5fe:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 600:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 602:	4d29      	ldr	r5, [pc, #164]	; (6a8 <system_clock_init+0xc4>)
 604:	b2e0      	uxtb	r0, r4
 606:	4669      	mov	r1, sp
 608:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 60a:	3401      	adds	r4, #1
 60c:	2c25      	cmp	r4, #37	; 0x25
 60e:	d1f9      	bne.n	604 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
 610:	4b26      	ldr	r3, [pc, #152]	; (6ac <system_clock_init+0xc8>)
 612:	681b      	ldr	r3, [r3, #0]
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
 614:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
 616:	4922      	ldr	r1, [pc, #136]	; (6a0 <system_clock_init+0xbc>)
 618:	698a      	ldr	r2, [r1, #24]
 61a:	0e5b      	lsrs	r3, r3, #25
 61c:	041b      	lsls	r3, r3, #16
 61e:	4824      	ldr	r0, [pc, #144]	; (6b0 <system_clock_init+0xcc>)
 620:	4002      	ands	r2, r0
 622:	4313      	orrs	r3, r2
 624:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
 626:	a804      	add	r0, sp, #16
 628:	2501      	movs	r5, #1
 62a:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
 62c:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
 62e:	2400      	movs	r4, #0
 630:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
 632:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
 634:	2307      	movs	r3, #7
 636:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
 638:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
 63a:	4b1e      	ldr	r3, [pc, #120]	; (6b4 <system_clock_init+0xd0>)
 63c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
 63e:	2004      	movs	r0, #4
 640:	4e1d      	ldr	r6, [pc, #116]	; (6b8 <system_clock_init+0xd4>)
 642:	47b0      	blx	r6
	config->run_in_standby  = false;
 644:	a803      	add	r0, sp, #12
 646:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 648:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 64a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 64c:	4b1b      	ldr	r3, [pc, #108]	; (6bc <system_clock_init+0xd8>)
 64e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 650:	2006      	movs	r0, #6
 652:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 654:	4b1a      	ldr	r3, [pc, #104]	; (6c0 <system_clock_init+0xdc>)
 656:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
 658:	466b      	mov	r3, sp
 65a:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
 65c:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
 65e:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
 660:	2304      	movs	r3, #4
 662:	466a      	mov	r2, sp
 664:	7013      	strb	r3, [r2, #0]
 666:	331c      	adds	r3, #28
 668:	9301      	str	r3, [sp, #4]
 66a:	4669      	mov	r1, sp
 66c:	2002      	movs	r0, #2
 66e:	4f15      	ldr	r7, [pc, #84]	; (6c4 <system_clock_init+0xe0>)
 670:	47b8      	blx	r7
 672:	2002      	movs	r0, #2
 674:	4e14      	ldr	r6, [pc, #80]	; (6c8 <system_clock_init+0xe4>)
 676:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
 678:	4b14      	ldr	r3, [pc, #80]	; (6cc <system_clock_init+0xe8>)
 67a:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 67c:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 67e:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 680:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
 682:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 684:	466b      	mov	r3, sp
 686:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
 688:	2306      	movs	r3, #6
 68a:	466a      	mov	r2, sp
 68c:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
 68e:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 690:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 692:	4669      	mov	r1, sp
 694:	2000      	movs	r0, #0
 696:	47b8      	blx	r7
 698:	2000      	movs	r0, #0
 69a:	47b0      	blx	r6
#endif
}
 69c:	b007      	add	sp, #28
 69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 6a0:	40000800 	.word	0x40000800
 6a4:	41004000 	.word	0x41004000
 6a8:	0000087d 	.word	0x0000087d
 6ac:	00806024 	.word	0x00806024
 6b0:	ff80ffff 	.word	0xff80ffff
 6b4:	000004c1 	.word	0x000004c1
 6b8:	0000053d 	.word	0x0000053d
 6bc:	00000485 	.word	0x00000485
 6c0:	000006d1 	.word	0x000006d1
 6c4:	000006f5 	.word	0x000006f5
 6c8:	000007ad 	.word	0x000007ad
 6cc:	40000400 	.word	0x40000400

000006d0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 6d0:	4a06      	ldr	r2, [pc, #24]	; (6ec <system_gclk_init+0x1c>)
 6d2:	6993      	ldr	r3, [r2, #24]
 6d4:	2108      	movs	r1, #8
 6d6:	430b      	orrs	r3, r1
 6d8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 6da:	2201      	movs	r2, #1
 6dc:	4b04      	ldr	r3, [pc, #16]	; (6f0 <system_gclk_init+0x20>)
 6de:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 6e0:	0019      	movs	r1, r3
 6e2:	780b      	ldrb	r3, [r1, #0]
 6e4:	4213      	tst	r3, r2
 6e6:	d1fc      	bne.n	6e2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 6e8:	4770      	bx	lr
 6ea:	46c0      	nop			; (mov r8, r8)
 6ec:	40000400 	.word	0x40000400
 6f0:	40000c00 	.word	0x40000c00

000006f4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 6f4:	b570      	push	{r4, r5, r6, lr}
 6f6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 6f8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 6fa:	780d      	ldrb	r5, [r1, #0]
 6fc:	022d      	lsls	r5, r5, #8
 6fe:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 700:	784b      	ldrb	r3, [r1, #1]
 702:	2b00      	cmp	r3, #0
 704:	d002      	beq.n	70c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 706:	2380      	movs	r3, #128	; 0x80
 708:	02db      	lsls	r3, r3, #11
 70a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 70c:	7a4b      	ldrb	r3, [r1, #9]
 70e:	2b00      	cmp	r3, #0
 710:	d002      	beq.n	718 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 712:	2380      	movs	r3, #128	; 0x80
 714:	031b      	lsls	r3, r3, #12
 716:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 718:	6848      	ldr	r0, [r1, #4]
 71a:	2801      	cmp	r0, #1
 71c:	d910      	bls.n	740 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 71e:	1e43      	subs	r3, r0, #1
 720:	4218      	tst	r0, r3
 722:	d134      	bne.n	78e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 724:	2802      	cmp	r0, #2
 726:	d930      	bls.n	78a <system_gclk_gen_set_config+0x96>
 728:	2302      	movs	r3, #2
 72a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 72c:	3201      	adds	r2, #1
						mask <<= 1) {
 72e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 730:	4298      	cmp	r0, r3
 732:	d8fb      	bhi.n	72c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 734:	0212      	lsls	r2, r2, #8
 736:	4332      	orrs	r2, r6
 738:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 73a:	2380      	movs	r3, #128	; 0x80
 73c:	035b      	lsls	r3, r3, #13
 73e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 740:	7a0b      	ldrb	r3, [r1, #8]
 742:	2b00      	cmp	r3, #0
 744:	d002      	beq.n	74c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 746:	2380      	movs	r3, #128	; 0x80
 748:	039b      	lsls	r3, r3, #14
 74a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 74c:	4a13      	ldr	r2, [pc, #76]	; (79c <system_gclk_gen_set_config+0xa8>)
 74e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 750:	b25b      	sxtb	r3, r3
 752:	2b00      	cmp	r3, #0
 754:	dbfb      	blt.n	74e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
 756:	4b12      	ldr	r3, [pc, #72]	; (7a0 <system_gclk_gen_set_config+0xac>)
 758:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 75a:	4b12      	ldr	r3, [pc, #72]	; (7a4 <system_gclk_gen_set_config+0xb0>)
 75c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 75e:	4a0f      	ldr	r2, [pc, #60]	; (79c <system_gclk_gen_set_config+0xa8>)
 760:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 762:	b25b      	sxtb	r3, r3
 764:	2b00      	cmp	r3, #0
 766:	dbfb      	blt.n	760 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 768:	4b0c      	ldr	r3, [pc, #48]	; (79c <system_gclk_gen_set_config+0xa8>)
 76a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 76c:	001a      	movs	r2, r3
 76e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 770:	b25b      	sxtb	r3, r3
 772:	2b00      	cmp	r3, #0
 774:	dbfb      	blt.n	76e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 776:	4a09      	ldr	r2, [pc, #36]	; (79c <system_gclk_gen_set_config+0xa8>)
 778:	6853      	ldr	r3, [r2, #4]
 77a:	2180      	movs	r1, #128	; 0x80
 77c:	0249      	lsls	r1, r1, #9
 77e:	400b      	ands	r3, r1
 780:	431d      	orrs	r5, r3
 782:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
 784:	4b08      	ldr	r3, [pc, #32]	; (7a8 <system_gclk_gen_set_config+0xb4>)
 786:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 788:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 78a:	2200      	movs	r2, #0
 78c:	e7d2      	b.n	734 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 78e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 790:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 792:	2380      	movs	r3, #128	; 0x80
 794:	029b      	lsls	r3, r3, #10
 796:	431d      	orrs	r5, r3
 798:	e7d2      	b.n	740 <system_gclk_gen_set_config+0x4c>
 79a:	46c0      	nop			; (mov r8, r8)
 79c:	40000c00 	.word	0x40000c00
 7a0:	00000115 	.word	0x00000115
 7a4:	40000c08 	.word	0x40000c08
 7a8:	00000155 	.word	0x00000155

000007ac <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 7ac:	b510      	push	{r4, lr}
 7ae:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 7b0:	4a0b      	ldr	r2, [pc, #44]	; (7e0 <system_gclk_gen_enable+0x34>)
 7b2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 7b4:	b25b      	sxtb	r3, r3
 7b6:	2b00      	cmp	r3, #0
 7b8:	dbfb      	blt.n	7b2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 7ba:	4b0a      	ldr	r3, [pc, #40]	; (7e4 <system_gclk_gen_enable+0x38>)
 7bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 7be:	4b0a      	ldr	r3, [pc, #40]	; (7e8 <system_gclk_gen_enable+0x3c>)
 7c0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 7c2:	4a07      	ldr	r2, [pc, #28]	; (7e0 <system_gclk_gen_enable+0x34>)
 7c4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 7c6:	b25b      	sxtb	r3, r3
 7c8:	2b00      	cmp	r3, #0
 7ca:	dbfb      	blt.n	7c4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 7cc:	4a04      	ldr	r2, [pc, #16]	; (7e0 <system_gclk_gen_enable+0x34>)
 7ce:	6851      	ldr	r1, [r2, #4]
 7d0:	2380      	movs	r3, #128	; 0x80
 7d2:	025b      	lsls	r3, r3, #9
 7d4:	430b      	orrs	r3, r1
 7d6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 7d8:	4b04      	ldr	r3, [pc, #16]	; (7ec <system_gclk_gen_enable+0x40>)
 7da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 7dc:	bd10      	pop	{r4, pc}
 7de:	46c0      	nop			; (mov r8, r8)
 7e0:	40000c00 	.word	0x40000c00
 7e4:	00000115 	.word	0x00000115
 7e8:	40000c04 	.word	0x40000c04
 7ec:	00000155 	.word	0x00000155

000007f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 7f0:	b510      	push	{r4, lr}
 7f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <system_gclk_chan_enable+0x20>)
 7f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 7f8:	4b06      	ldr	r3, [pc, #24]	; (814 <system_gclk_chan_enable+0x24>)
 7fa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 7fc:	4a06      	ldr	r2, [pc, #24]	; (818 <system_gclk_chan_enable+0x28>)
 7fe:	8853      	ldrh	r3, [r2, #2]
 800:	2180      	movs	r1, #128	; 0x80
 802:	01c9      	lsls	r1, r1, #7
 804:	430b      	orrs	r3, r1
 806:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 808:	4b04      	ldr	r3, [pc, #16]	; (81c <system_gclk_chan_enable+0x2c>)
 80a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 80c:	bd10      	pop	{r4, pc}
 80e:	46c0      	nop			; (mov r8, r8)
 810:	00000115 	.word	0x00000115
 814:	40000c02 	.word	0x40000c02
 818:	40000c00 	.word	0x40000c00
 81c:	00000155 	.word	0x00000155

00000820 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 820:	b510      	push	{r4, lr}
 822:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 824:	4b0f      	ldr	r3, [pc, #60]	; (864 <system_gclk_chan_disable+0x44>)
 826:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 828:	4b0f      	ldr	r3, [pc, #60]	; (868 <system_gclk_chan_disable+0x48>)
 82a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 82c:	4a0f      	ldr	r2, [pc, #60]	; (86c <system_gclk_chan_disable+0x4c>)
 82e:	8853      	ldrh	r3, [r2, #2]
 830:	051b      	lsls	r3, r3, #20
 832:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 834:	8853      	ldrh	r3, [r2, #2]
 836:	490e      	ldr	r1, [pc, #56]	; (870 <system_gclk_chan_disable+0x50>)
 838:	400b      	ands	r3, r1
 83a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 83c:	8853      	ldrh	r3, [r2, #2]
 83e:	490d      	ldr	r1, [pc, #52]	; (874 <system_gclk_chan_disable+0x54>)
 840:	400b      	ands	r3, r1
 842:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 844:	0011      	movs	r1, r2
 846:	2280      	movs	r2, #128	; 0x80
 848:	01d2      	lsls	r2, r2, #7
 84a:	884b      	ldrh	r3, [r1, #2]
 84c:	4213      	tst	r3, r2
 84e:	d1fc      	bne.n	84a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 850:	4906      	ldr	r1, [pc, #24]	; (86c <system_gclk_chan_disable+0x4c>)
 852:	884a      	ldrh	r2, [r1, #2]
 854:	0203      	lsls	r3, r0, #8
 856:	4806      	ldr	r0, [pc, #24]	; (870 <system_gclk_chan_disable+0x50>)
 858:	4002      	ands	r2, r0
 85a:	4313      	orrs	r3, r2
 85c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 85e:	4b06      	ldr	r3, [pc, #24]	; (878 <system_gclk_chan_disable+0x58>)
 860:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 862:	bd10      	pop	{r4, pc}
 864:	00000115 	.word	0x00000115
 868:	40000c02 	.word	0x40000c02
 86c:	40000c00 	.word	0x40000c00
 870:	fffff0ff 	.word	0xfffff0ff
 874:	ffffbfff 	.word	0xffffbfff
 878:	00000155 	.word	0x00000155

0000087c <system_gclk_chan_set_config>:
{
 87c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 87e:	780c      	ldrb	r4, [r1, #0]
 880:	0224      	lsls	r4, r4, #8
 882:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 884:	4b02      	ldr	r3, [pc, #8]	; (890 <system_gclk_chan_set_config+0x14>)
 886:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 888:	b2a4      	uxth	r4, r4
 88a:	4b02      	ldr	r3, [pc, #8]	; (894 <system_gclk_chan_set_config+0x18>)
 88c:	805c      	strh	r4, [r3, #2]
}
 88e:	bd10      	pop	{r4, pc}
 890:	00000821 	.word	0x00000821
 894:	40000c00 	.word	0x40000c00

00000898 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 898:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 89a:	78d3      	ldrb	r3, [r2, #3]
 89c:	2b00      	cmp	r3, #0
 89e:	d135      	bne.n	90c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 8a0:	7813      	ldrb	r3, [r2, #0]
 8a2:	2b80      	cmp	r3, #128	; 0x80
 8a4:	d029      	beq.n	8fa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 8a6:	061b      	lsls	r3, r3, #24
 8a8:	2480      	movs	r4, #128	; 0x80
 8aa:	0264      	lsls	r4, r4, #9
 8ac:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 8ae:	7854      	ldrb	r4, [r2, #1]
 8b0:	2502      	movs	r5, #2
 8b2:	43ac      	bics	r4, r5
 8b4:	d106      	bne.n	8c4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 8b6:	7894      	ldrb	r4, [r2, #2]
 8b8:	2c00      	cmp	r4, #0
 8ba:	d120      	bne.n	8fe <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 8bc:	2480      	movs	r4, #128	; 0x80
 8be:	02a4      	lsls	r4, r4, #10
 8c0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 8c2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 8c4:	7854      	ldrb	r4, [r2, #1]
 8c6:	3c01      	subs	r4, #1
 8c8:	2c01      	cmp	r4, #1
 8ca:	d91c      	bls.n	906 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 8cc:	040d      	lsls	r5, r1, #16
 8ce:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 8d0:	24a0      	movs	r4, #160	; 0xa0
 8d2:	05e4      	lsls	r4, r4, #23
 8d4:	432c      	orrs	r4, r5
 8d6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8d8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 8da:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 8dc:	24d0      	movs	r4, #208	; 0xd0
 8de:	0624      	lsls	r4, r4, #24
 8e0:	432c      	orrs	r4, r5
 8e2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8e4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 8e6:	78d4      	ldrb	r4, [r2, #3]
 8e8:	2c00      	cmp	r4, #0
 8ea:	d122      	bne.n	932 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 8ec:	035b      	lsls	r3, r3, #13
 8ee:	d51c      	bpl.n	92a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 8f0:	7893      	ldrb	r3, [r2, #2]
 8f2:	2b01      	cmp	r3, #1
 8f4:	d01e      	beq.n	934 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 8f6:	6141      	str	r1, [r0, #20]
 8f8:	e017      	b.n	92a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 8fa:	2300      	movs	r3, #0
 8fc:	e7d7      	b.n	8ae <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 8fe:	24c0      	movs	r4, #192	; 0xc0
 900:	02e4      	lsls	r4, r4, #11
 902:	4323      	orrs	r3, r4
 904:	e7dd      	b.n	8c2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 906:	4c0d      	ldr	r4, [pc, #52]	; (93c <_system_pinmux_config+0xa4>)
 908:	4023      	ands	r3, r4
 90a:	e7df      	b.n	8cc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 90c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 90e:	040c      	lsls	r4, r1, #16
 910:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 912:	23a0      	movs	r3, #160	; 0xa0
 914:	05db      	lsls	r3, r3, #23
 916:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 918:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 91a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 91c:	23d0      	movs	r3, #208	; 0xd0
 91e:	061b      	lsls	r3, r3, #24
 920:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 922:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 924:	78d3      	ldrb	r3, [r2, #3]
 926:	2b00      	cmp	r3, #0
 928:	d103      	bne.n	932 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 92a:	7853      	ldrb	r3, [r2, #1]
 92c:	3b01      	subs	r3, #1
 92e:	2b01      	cmp	r3, #1
 930:	d902      	bls.n	938 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 932:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 934:	6181      	str	r1, [r0, #24]
 936:	e7f8      	b.n	92a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 938:	6081      	str	r1, [r0, #8]
}
 93a:	e7fa      	b.n	932 <_system_pinmux_config+0x9a>
 93c:	fffbffff 	.word	0xfffbffff

00000940 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 940:	b510      	push	{r4, lr}
 942:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 944:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 946:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 948:	2900      	cmp	r1, #0
 94a:	d104      	bne.n	956 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 94c:	0943      	lsrs	r3, r0, #5
 94e:	01db      	lsls	r3, r3, #7
 950:	4905      	ldr	r1, [pc, #20]	; (968 <system_pinmux_pin_set_config+0x28>)
 952:	468c      	mov	ip, r1
 954:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 956:	241f      	movs	r4, #31
 958:	4020      	ands	r0, r4
 95a:	2101      	movs	r1, #1
 95c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 95e:	0018      	movs	r0, r3
 960:	4b02      	ldr	r3, [pc, #8]	; (96c <system_pinmux_pin_set_config+0x2c>)
 962:	4798      	blx	r3
}
 964:	bd10      	pop	{r4, pc}
 966:	46c0      	nop			; (mov r8, r8)
 968:	41004400 	.word	0x41004400
 96c:	00000899 	.word	0x00000899

00000970 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 970:	4770      	bx	lr
	...

00000974 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 974:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 976:	4b05      	ldr	r3, [pc, #20]	; (98c <system_init+0x18>)
 978:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 97a:	4b05      	ldr	r3, [pc, #20]	; (990 <system_init+0x1c>)
 97c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 97e:	4b05      	ldr	r3, [pc, #20]	; (994 <system_init+0x20>)
 980:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 982:	4b05      	ldr	r3, [pc, #20]	; (998 <system_init+0x24>)
 984:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 986:	4b05      	ldr	r3, [pc, #20]	; (99c <system_init+0x28>)
 988:	4798      	blx	r3
}
 98a:	bd10      	pop	{r4, pc}
 98c:	000005e5 	.word	0x000005e5
 990:	00000185 	.word	0x00000185
 994:	00000971 	.word	0x00000971
 998:	00000971 	.word	0x00000971
 99c:	00000971 	.word	0x00000971

000009a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 9a0:	e7fe      	b.n	9a0 <Dummy_Handler>
	...

000009a4 <Reset_Handler>:
{
 9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 9a6:	4a2a      	ldr	r2, [pc, #168]	; (a50 <Reset_Handler+0xac>)
 9a8:	4b2a      	ldr	r3, [pc, #168]	; (a54 <Reset_Handler+0xb0>)
 9aa:	429a      	cmp	r2, r3
 9ac:	d011      	beq.n	9d2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 9ae:	001a      	movs	r2, r3
 9b0:	4b29      	ldr	r3, [pc, #164]	; (a58 <Reset_Handler+0xb4>)
 9b2:	429a      	cmp	r2, r3
 9b4:	d20d      	bcs.n	9d2 <Reset_Handler+0x2e>
 9b6:	4a29      	ldr	r2, [pc, #164]	; (a5c <Reset_Handler+0xb8>)
 9b8:	3303      	adds	r3, #3
 9ba:	1a9b      	subs	r3, r3, r2
 9bc:	089b      	lsrs	r3, r3, #2
 9be:	3301      	adds	r3, #1
 9c0:	009b      	lsls	r3, r3, #2
 9c2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 9c4:	4823      	ldr	r0, [pc, #140]	; (a54 <Reset_Handler+0xb0>)
 9c6:	4922      	ldr	r1, [pc, #136]	; (a50 <Reset_Handler+0xac>)
 9c8:	588c      	ldr	r4, [r1, r2]
 9ca:	5084      	str	r4, [r0, r2]
 9cc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 9ce:	429a      	cmp	r2, r3
 9d0:	d1fa      	bne.n	9c8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 9d2:	4a23      	ldr	r2, [pc, #140]	; (a60 <Reset_Handler+0xbc>)
 9d4:	4b23      	ldr	r3, [pc, #140]	; (a64 <Reset_Handler+0xc0>)
 9d6:	429a      	cmp	r2, r3
 9d8:	d20a      	bcs.n	9f0 <Reset_Handler+0x4c>
 9da:	43d3      	mvns	r3, r2
 9dc:	4921      	ldr	r1, [pc, #132]	; (a64 <Reset_Handler+0xc0>)
 9de:	185b      	adds	r3, r3, r1
 9e0:	2103      	movs	r1, #3
 9e2:	438b      	bics	r3, r1
 9e4:	3304      	adds	r3, #4
 9e6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 9e8:	2100      	movs	r1, #0
 9ea:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 9ec:	4293      	cmp	r3, r2
 9ee:	d1fc      	bne.n	9ea <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 9f0:	4a1d      	ldr	r2, [pc, #116]	; (a68 <Reset_Handler+0xc4>)
 9f2:	21ff      	movs	r1, #255	; 0xff
 9f4:	4b1d      	ldr	r3, [pc, #116]	; (a6c <Reset_Handler+0xc8>)
 9f6:	438b      	bics	r3, r1
 9f8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 9fa:	39fd      	subs	r1, #253	; 0xfd
 9fc:	2390      	movs	r3, #144	; 0x90
 9fe:	005b      	lsls	r3, r3, #1
 a00:	4a1b      	ldr	r2, [pc, #108]	; (a70 <Reset_Handler+0xcc>)
 a02:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 a04:	4a1b      	ldr	r2, [pc, #108]	; (a74 <Reset_Handler+0xd0>)
 a06:	78d3      	ldrb	r3, [r2, #3]
 a08:	2503      	movs	r5, #3
 a0a:	43ab      	bics	r3, r5
 a0c:	2402      	movs	r4, #2
 a0e:	4323      	orrs	r3, r4
 a10:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 a12:	78d3      	ldrb	r3, [r2, #3]
 a14:	270c      	movs	r7, #12
 a16:	43bb      	bics	r3, r7
 a18:	2608      	movs	r6, #8
 a1a:	4333      	orrs	r3, r6
 a1c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 a1e:	4b16      	ldr	r3, [pc, #88]	; (a78 <Reset_Handler+0xd4>)
 a20:	7b98      	ldrb	r0, [r3, #14]
 a22:	2230      	movs	r2, #48	; 0x30
 a24:	4390      	bics	r0, r2
 a26:	2220      	movs	r2, #32
 a28:	4310      	orrs	r0, r2
 a2a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 a2c:	7b99      	ldrb	r1, [r3, #14]
 a2e:	43b9      	bics	r1, r7
 a30:	4331      	orrs	r1, r6
 a32:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 a34:	7b9a      	ldrb	r2, [r3, #14]
 a36:	43aa      	bics	r2, r5
 a38:	4322      	orrs	r2, r4
 a3a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 a3c:	4a0f      	ldr	r2, [pc, #60]	; (a7c <Reset_Handler+0xd8>)
 a3e:	6853      	ldr	r3, [r2, #4]
 a40:	2180      	movs	r1, #128	; 0x80
 a42:	430b      	orrs	r3, r1
 a44:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 a46:	4b0e      	ldr	r3, [pc, #56]	; (a80 <Reset_Handler+0xdc>)
 a48:	4798      	blx	r3
        main();
 a4a:	4b0e      	ldr	r3, [pc, #56]	; (a84 <Reset_Handler+0xe0>)
 a4c:	4798      	blx	r3
 a4e:	e7fe      	b.n	a4e <Reset_Handler+0xaa>
 a50:	00000bb8 	.word	0x00000bb8
 a54:	20000000 	.word	0x20000000
 a58:	20000004 	.word	0x20000004
 a5c:	20000004 	.word	0x20000004
 a60:	20000004 	.word	0x20000004
 a64:	2000005c 	.word	0x2000005c
 a68:	e000ed00 	.word	0xe000ed00
 a6c:	00000000 	.word	0x00000000
 a70:	41007000 	.word	0x41007000
 a74:	41005000 	.word	0x41005000
 a78:	41004800 	.word	0x41004800
 a7c:	41004000 	.word	0x41004000
 a80:	00000b2d 	.word	0x00000b2d
 a84:	00000afd 	.word	0x00000afd

00000a88 <rtc_overflow_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
 a88:	2280      	movs	r2, #128	; 0x80
 a8a:	05d2      	lsls	r2, r2, #23
 a8c:	4b01      	ldr	r3, [pc, #4]	; (a94 <rtc_overflow_callback+0xc>)
 a8e:	61da      	str	r2, [r3, #28]
#include <asf.h>
struct rtc_module rtc_instance;
void rtc_overflow_callback(void)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
 a90:	4770      	bx	lr
 a92:	46c0      	nop			; (mov r8, r8)
 a94:	41004480 	.word	0x41004480

00000a98 <configure_rtc_count>:
void configure_rtc_count(void){
 a98:	b510      	push	{r4, lr}
 a9a:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
 a9c:	2300      	movs	r3, #0
 a9e:	466a      	mov	r2, sp
 aa0:	70d3      	strb	r3, [r2, #3]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
 aa2:	9302      	str	r3, [sp, #8]
 aa4:	9303      	str	r3, [sp, #12]
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
 aa6:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
 aa8:	7093      	strb	r3, [r2, #2]
	config_rtc_count.continuously_update = true;
 aaa:	2301      	movs	r3, #1
 aac:	7113      	strb	r3, [r2, #4]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
 aae:	4c05      	ldr	r4, [pc, #20]	; (ac4 <configure_rtc_count+0x2c>)
 ab0:	4905      	ldr	r1, [pc, #20]	; (ac8 <configure_rtc_count+0x30>)
 ab2:	0020      	movs	r0, r4
 ab4:	4b05      	ldr	r3, [pc, #20]	; (acc <configure_rtc_count+0x34>)
 ab6:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
 ab8:	0020      	movs	r0, r4
 aba:	4b05      	ldr	r3, [pc, #20]	; (ad0 <configure_rtc_count+0x38>)
 abc:	4798      	blx	r3
}
 abe:	b004      	add	sp, #16
 ac0:	bd10      	pop	{r4, pc}
 ac2:	46c0      	nop			; (mov r8, r8)
 ac4:	20000044 	.word	0x20000044
 ac8:	40001400 	.word	0x40001400
 acc:	000002c9 	.word	0x000002c9
 ad0:	000001e9 	.word	0x000001e9

00000ad4 <configure_rtc_callbacks>:
void configure_rtc_callbacks(void)
{
 ad4:	b510      	push	{r4, lr}
	rtc_count_register_callback(&rtc_instance, rtc_overflow_callback, RTC_COUNT_CALLBACK_OVERFLOW);
 ad6:	4c05      	ldr	r4, [pc, #20]	; (aec <configure_rtc_callbacks+0x18>)
 ad8:	2202      	movs	r2, #2
 ada:	4905      	ldr	r1, [pc, #20]	; (af0 <configure_rtc_callbacks+0x1c>)
 adc:	0020      	movs	r0, r4
 ade:	4b05      	ldr	r3, [pc, #20]	; (af4 <configure_rtc_callbacks+0x20>)
 ae0:	4798      	blx	r3
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
 ae2:	2102      	movs	r1, #2
 ae4:	0020      	movs	r0, r4
 ae6:	4b04      	ldr	r3, [pc, #16]	; (af8 <configure_rtc_callbacks+0x24>)
 ae8:	4798      	blx	r3
}
 aea:	bd10      	pop	{r4, pc}
 aec:	20000044 	.word	0x20000044
 af0:	00000a89 	.word	0x00000a89
 af4:	000003cd 	.word	0x000003cd
 af8:	00000405 	.word	0x00000405

00000afc <main>:
int main(void)
{
 afc:	b510      	push	{r4, lr}
	system_init();
 afe:	4b06      	ldr	r3, [pc, #24]	; (b18 <main+0x1c>)
 b00:	4798      	blx	r3
	configure_rtc_count();
 b02:	4b06      	ldr	r3, [pc, #24]	; (b1c <main+0x20>)
 b04:	4798      	blx	r3
	configure_rtc_callbacks();
 b06:	4b06      	ldr	r3, [pc, #24]	; (b20 <main+0x24>)
 b08:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 2000);
 b0a:	21fa      	movs	r1, #250	; 0xfa
 b0c:	00c9      	lsls	r1, r1, #3
 b0e:	4805      	ldr	r0, [pc, #20]	; (b24 <main+0x28>)
 b10:	4b05      	ldr	r3, [pc, #20]	; (b28 <main+0x2c>)
 b12:	4798      	blx	r3
 b14:	e7fe      	b.n	b14 <main+0x18>
 b16:	46c0      	nop			; (mov r8, r8)
 b18:	00000975 	.word	0x00000975
 b1c:	00000a99 	.word	0x00000a99
 b20:	00000ad5 	.word	0x00000ad5
 b24:	20000044 	.word	0x20000044
 b28:	000003a9 	.word	0x000003a9

00000b2c <__libc_init_array>:
 b2c:	b570      	push	{r4, r5, r6, lr}
 b2e:	2600      	movs	r6, #0
 b30:	4d0c      	ldr	r5, [pc, #48]	; (b64 <__libc_init_array+0x38>)
 b32:	4c0d      	ldr	r4, [pc, #52]	; (b68 <__libc_init_array+0x3c>)
 b34:	1b64      	subs	r4, r4, r5
 b36:	10a4      	asrs	r4, r4, #2
 b38:	42a6      	cmp	r6, r4
 b3a:	d109      	bne.n	b50 <__libc_init_array+0x24>
 b3c:	2600      	movs	r6, #0
 b3e:	f000 f82b 	bl	b98 <_init>
 b42:	4d0a      	ldr	r5, [pc, #40]	; (b6c <__libc_init_array+0x40>)
 b44:	4c0a      	ldr	r4, [pc, #40]	; (b70 <__libc_init_array+0x44>)
 b46:	1b64      	subs	r4, r4, r5
 b48:	10a4      	asrs	r4, r4, #2
 b4a:	42a6      	cmp	r6, r4
 b4c:	d105      	bne.n	b5a <__libc_init_array+0x2e>
 b4e:	bd70      	pop	{r4, r5, r6, pc}
 b50:	00b3      	lsls	r3, r6, #2
 b52:	58eb      	ldr	r3, [r5, r3]
 b54:	4798      	blx	r3
 b56:	3601      	adds	r6, #1
 b58:	e7ee      	b.n	b38 <__libc_init_array+0xc>
 b5a:	00b3      	lsls	r3, r6, #2
 b5c:	58eb      	ldr	r3, [r5, r3]
 b5e:	4798      	blx	r3
 b60:	3601      	adds	r6, #1
 b62:	e7f2      	b.n	b4a <__libc_init_array+0x1e>
 b64:	00000ba4 	.word	0x00000ba4
 b68:	00000ba4 	.word	0x00000ba4
 b6c:	00000ba4 	.word	0x00000ba4
 b70:	00000ba8 	.word	0x00000ba8
 b74:	00000568 	.word	0x00000568
 b78:	00000548 	.word	0x00000548
 b7c:	00000548 	.word	0x00000548
 b80:	000005d4 	.word	0x000005d4
 b84:	0000055a 	.word	0x0000055a
 b88:	00000576 	.word	0x00000576
 b8c:	0000054c 	.word	0x0000054c
 b90:	00000584 	.word	0x00000584
 b94:	000005c4 	.word	0x000005c4

00000b98 <_init>:
 b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 b9a:	46c0      	nop			; (mov r8, r8)
 b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 b9e:	bc08      	pop	{r3}
 ba0:	469e      	mov	lr, r3
 ba2:	4770      	bx	lr

00000ba4 <__init_array_start>:
 ba4:	000000dd 	.word	0x000000dd

00000ba8 <_fini>:
 ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 baa:	46c0      	nop			; (mov r8, r8)
 bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 bae:	bc08      	pop	{r3}
 bb0:	469e      	mov	lr, r3
 bb2:	4770      	bx	lr

00000bb4 <__fini_array_start>:
 bb4:	000000b5 	.word	0x000000b5
