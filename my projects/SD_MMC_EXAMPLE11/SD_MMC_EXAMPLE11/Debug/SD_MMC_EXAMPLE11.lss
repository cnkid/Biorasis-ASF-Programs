
SD_MMC_EXAMPLE11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000049a0  000049a0  000149a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000098  20000000  000049a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001128  20000098  00004a40  00020098  2**2
                  ALLOC
  4 .stack        00002000  200011c0  00005b68  00020098  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  7 .debug_info   00033120  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000494e  00000000  00000000  00053239  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007c44  00000000  00000000  00057b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000680  00000000  00000000  0005f7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a58  00000000  00000000  0005fe4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001da7f  00000000  00000000  000608a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fb48  00000000  00000000  0007e322  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00093592  00000000  00000000  0008de6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000017bc  00000000  00000000  001213fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 31 00 20 95 2a 00 00 91 2a 00 00 91 2a 00 00     .1. .*...*...*..
	...
      2c:	91 2a 00 00 00 00 00 00 00 00 00 00 91 2a 00 00     .*...........*..
      3c:	4d 31 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     M1...*...*...*..
      4c:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      5c:	91 2a 00 00 91 2a 00 00 39 16 00 00 49 16 00 00     .*...*..9...I...
      6c:	59 16 00 00 69 16 00 00 79 16 00 00 89 16 00 00     Y...i...y.......
      7c:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      8c:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      9c:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      ac:	91 2a 00 00 00 00 00 00                             .*......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000098 	.word	0x20000098
      d4:	00000000 	.word	0x00000000
      d8:	000049a8 	.word	0x000049a8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000009c 	.word	0x2000009c
     108:	000049a8 	.word	0x000049a8
     10c:	000049a8 	.word	0x000049a8
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <sd_mmc_configure_slot+0x20>)
     118:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     11a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     11c:	5ccb      	ldrb	r3, [r1, r3]
     11e:	1e5a      	subs	r2, r3, #1
     120:	4193      	sbcs	r3, r2
     122:	b2db      	uxtb	r3, r3
     124:	7c4a      	ldrb	r2, [r1, #17]
     126:	6809      	ldr	r1, [r1, #0]
     128:	4803      	ldr	r0, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12a:	7800      	ldrb	r0, [r0, #0]
     12c:	4c03      	ldr	r4, [pc, #12]	; (13c <sd_mmc_configure_slot+0x28>)
     12e:	47a0      	blx	r4
}
     130:	bd10      	pop	{r4, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	200000b4 	.word	0x200000b4
     138:	200000bd 	.word	0x200000bd
     13c:	00000d71 	.word	0x00000d71

00000140 <sd_mmc_select_slot>:
{
     140:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     142:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     144:	2800      	cmp	r0, #0
     146:	d001      	beq.n	14c <sd_mmc_select_slot+0xc>
}
     148:	0018      	movs	r0, r3
     14a:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     14c:	4b40      	ldr	r3, [pc, #256]	; (250 <sd_mmc_select_slot+0x110>)
     14e:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     150:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     152:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     154:	2a00      	cmp	r2, #0
     156:	d104      	bne.n	162 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     158:	094b      	lsrs	r3, r1, #5
     15a:	01db      	lsls	r3, r3, #7
     15c:	4a3d      	ldr	r2, [pc, #244]	; (254 <sd_mmc_select_slot+0x114>)
     15e:	4694      	mov	ip, r2
     160:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     162:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     164:	221f      	movs	r2, #31
     166:	400a      	ands	r2, r1
     168:	2301      	movs	r3, #1
     16a:	4093      	lsls	r3, r2
     16c:	4218      	tst	r0, r3
     16e:	d010      	beq.n	192 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     170:	4b37      	ldr	r3, [pc, #220]	; (250 <sd_mmc_select_slot+0x110>)
     172:	7b9b      	ldrb	r3, [r3, #14]
     174:	2b01      	cmp	r3, #1
     176:	d004      	beq.n	182 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     178:	2204      	movs	r2, #4
     17a:	4b35      	ldr	r3, [pc, #212]	; (250 <sd_mmc_select_slot+0x110>)
     17c:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     17e:	2302      	movs	r3, #2
     180:	e7e2      	b.n	148 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     182:	4b35      	ldr	r3, [pc, #212]	; (258 <sd_mmc_select_slot+0x118>)
     184:	781b      	ldrb	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d0f6      	beq.n	178 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     18a:	2200      	movs	r2, #0
     18c:	4b33      	ldr	r3, [pc, #204]	; (25c <sd_mmc_select_slot+0x11c>)
     18e:	601a      	str	r2, [r3, #0]
     190:	e7f2      	b.n	178 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     192:	4b2f      	ldr	r3, [pc, #188]	; (250 <sd_mmc_select_slot+0x110>)
     194:	7b9a      	ldrb	r2, [r3, #14]
     196:	2a04      	cmp	r2, #4
     198:	d005      	beq.n	1a6 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     19a:	2a01      	cmp	r2, #1
     19c:	d033      	beq.n	206 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     19e:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     1a0:	2a03      	cmp	r2, #3
     1a2:	d0d1      	beq.n	148 <sd_mmc_select_slot+0x8>
     1a4:	e045      	b.n	232 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     1a6:	3a03      	subs	r2, #3
     1a8:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     1aa:	4b2c      	ldr	r3, [pc, #176]	; (25c <sd_mmc_select_slot+0x11c>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	2b00      	cmp	r3, #0
     1b0:	d017      	beq.n	1e2 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     1b2:	2200      	movs	r2, #0
     1b4:	4b28      	ldr	r3, [pc, #160]	; (258 <sd_mmc_select_slot+0x118>)
     1b6:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     1b8:	2000      	movs	r0, #0
     1ba:	4b29      	ldr	r3, [pc, #164]	; (260 <sd_mmc_select_slot+0x120>)
     1bc:	4798      	blx	r3
     1be:	22fa      	movs	r2, #250	; 0xfa
     1c0:	0092      	lsls	r2, r2, #2
     1c2:	2300      	movs	r3, #0
     1c4:	2100      	movs	r1, #0
     1c6:	4c27      	ldr	r4, [pc, #156]	; (264 <sd_mmc_select_slot+0x124>)
     1c8:	47a0      	blx	r4
     1ca:	4a27      	ldr	r2, [pc, #156]	; (268 <sd_mmc_select_slot+0x128>)
     1cc:	2300      	movs	r3, #0
     1ce:	1880      	adds	r0, r0, r2
     1d0:	4159      	adcs	r1, r3
     1d2:	4a26      	ldr	r2, [pc, #152]	; (26c <sd_mmc_select_slot+0x12c>)
     1d4:	2300      	movs	r3, #0
     1d6:	4c26      	ldr	r4, [pc, #152]	; (270 <sd_mmc_select_slot+0x130>)
     1d8:	47a0      	blx	r4
     1da:	4b26      	ldr	r3, [pc, #152]	; (274 <sd_mmc_select_slot+0x134>)
     1dc:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     1de:	2302      	movs	r3, #2
     1e0:	e7b2      	b.n	148 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     1e2:	2401      	movs	r4, #1
     1e4:	4b1c      	ldr	r3, [pc, #112]	; (258 <sd_mmc_select_slot+0x118>)
     1e6:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1e8:	2000      	movs	r0, #0
     1ea:	4b1d      	ldr	r3, [pc, #116]	; (260 <sd_mmc_select_slot+0x120>)
     1ec:	4798      	blx	r3
     1ee:	21fa      	movs	r1, #250	; 0xfa
     1f0:	0149      	lsls	r1, r1, #5
     1f2:	4b21      	ldr	r3, [pc, #132]	; (278 <sd_mmc_select_slot+0x138>)
     1f4:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     1f6:	23fa      	movs	r3, #250	; 0xfa
     1f8:	009b      	lsls	r3, r3, #2
     1fa:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1fc:	4b17      	ldr	r3, [pc, #92]	; (25c <sd_mmc_select_slot+0x11c>)
     1fe:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     200:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     202:	2302      	movs	r3, #2
     204:	e7a0      	b.n	148 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     206:	4b14      	ldr	r3, [pc, #80]	; (258 <sd_mmc_select_slot+0x118>)
     208:	781b      	ldrb	r3, [r3, #0]
     20a:	2b00      	cmp	r3, #0
     20c:	d007      	beq.n	21e <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     20e:	4b13      	ldr	r3, [pc, #76]	; (25c <sd_mmc_select_slot+0x11c>)
     210:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     212:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     214:	03d2      	lsls	r2, r2, #15
     216:	d597      	bpl.n	148 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     218:	2200      	movs	r2, #0
     21a:	4b10      	ldr	r3, [pc, #64]	; (25c <sd_mmc_select_slot+0x11c>)
     21c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     21e:	4b0c      	ldr	r3, [pc, #48]	; (250 <sd_mmc_select_slot+0x110>)
     220:	2202      	movs	r2, #2
     222:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     224:	4a15      	ldr	r2, [pc, #84]	; (27c <sd_mmc_select_slot+0x13c>)
     226:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     228:	2201      	movs	r2, #1
     22a:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     22c:	2100      	movs	r1, #0
     22e:	3221      	adds	r2, #33	; 0x21
     230:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     232:	2200      	movs	r2, #0
     234:	4b12      	ldr	r3, [pc, #72]	; (280 <sd_mmc_select_slot+0x140>)
     236:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     238:	4c05      	ldr	r4, [pc, #20]	; (250 <sd_mmc_select_slot+0x110>)
     23a:	4b12      	ldr	r3, [pc, #72]	; (284 <sd_mmc_select_slot+0x144>)
     23c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     23e:	4b12      	ldr	r3, [pc, #72]	; (288 <sd_mmc_select_slot+0x148>)
     240:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     242:	7ba3      	ldrb	r3, [r4, #14]
     244:	3b02      	subs	r3, #2
     246:	425a      	negs	r2, r3
     248:	4153      	adcs	r3, r2
     24a:	b2db      	uxtb	r3, r3
     24c:	e77c      	b.n	148 <sd_mmc_select_slot+0x8>
     24e:	46c0      	nop			; (mov r8, r8)
     250:	2000000c 	.word	0x2000000c
     254:	41004400 	.word	0x41004400
     258:	200000bc 	.word	0x200000bc
     25c:	e000e010 	.word	0xe000e010
     260:	00002821 	.word	0x00002821
     264:	00003325 	.word	0x00003325
     268:	00001b57 	.word	0x00001b57
     26c:	00001b58 	.word	0x00001b58
     270:	000032e5 	.word	0x000032e5
     274:	20000001 	.word	0x20000001
     278:	000031cd 	.word	0x000031cd
     27c:	00061a80 	.word	0x00061a80
     280:	200000bd 	.word	0x200000bd
     284:	200000b4 	.word	0x200000b4
     288:	00000115 	.word	0x00000115

0000028c <sd_mmc_cmd13>:
{
     28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     28e:	4d09      	ldr	r5, [pc, #36]	; (2b4 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     290:	4f09      	ldr	r7, [pc, #36]	; (2b8 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     292:	4e0a      	ldr	r6, [pc, #40]	; (2bc <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     294:	2100      	movs	r1, #0
     296:	480a      	ldr	r0, [pc, #40]	; (2c0 <sd_mmc_cmd13+0x34>)
     298:	47b8      	blx	r7
     29a:	1e04      	subs	r4, r0, #0
     29c:	d007      	beq.n	2ae <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     29e:	47b0      	blx	r6
     2a0:	23ff      	movs	r3, #255	; 0xff
     2a2:	4203      	tst	r3, r0
     2a4:	d003      	beq.n	2ae <sd_mmc_cmd13+0x22>
     2a6:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     2a8:	2d00      	cmp	r5, #0
     2aa:	d1f3      	bne.n	294 <sd_mmc_cmd13+0x8>
			return false;
     2ac:	2400      	movs	r4, #0
}
     2ae:	0020      	movs	r0, r4
     2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	00030d41 	.word	0x00030d41
     2b8:	00000fb5 	.word	0x00000fb5
     2bc:	00000fcd 	.word	0x00000fcd
     2c0:	00001b0d 	.word	0x00001b0d

000002c4 <sd_mmc_cmd9_spi>:
{
     2c4:	b510      	push	{r4, lr}
     2c6:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     2c8:	4b0c      	ldr	r3, [pc, #48]	; (2fc <sd_mmc_cmd9_spi+0x38>)
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	8999      	ldrh	r1, [r3, #12]
     2ce:	0409      	lsls	r1, r1, #16
     2d0:	2301      	movs	r3, #1
     2d2:	9300      	str	r3, [sp, #0]
     2d4:	2210      	movs	r2, #16
     2d6:	480a      	ldr	r0, [pc, #40]	; (300 <sd_mmc_cmd9_spi+0x3c>)
     2d8:	4c0a      	ldr	r4, [pc, #40]	; (304 <sd_mmc_cmd9_spi+0x40>)
     2da:	47a0      	blx	r4
     2dc:	2800      	cmp	r0, #0
     2de:	d101      	bne.n	2e4 <sd_mmc_cmd9_spi+0x20>
}
     2e0:	b002      	add	sp, #8
     2e2:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     2e4:	4b05      	ldr	r3, [pc, #20]	; (2fc <sd_mmc_cmd9_spi+0x38>)
     2e6:	6818      	ldr	r0, [r3, #0]
     2e8:	3012      	adds	r0, #18
     2ea:	2101      	movs	r1, #1
     2ec:	4b06      	ldr	r3, [pc, #24]	; (308 <sd_mmc_cmd9_spi+0x44>)
     2ee:	4798      	blx	r3
     2f0:	2800      	cmp	r0, #0
     2f2:	d0f5      	beq.n	2e0 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     2f4:	4b05      	ldr	r3, [pc, #20]	; (30c <sd_mmc_cmd9_spi+0x48>)
     2f6:	4798      	blx	r3
     2f8:	e7f2      	b.n	2e0 <sd_mmc_cmd9_spi+0x1c>
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	200000b4 	.word	0x200000b4
     300:	00081109 	.word	0x00081109
     304:	00000e25 	.word	0x00000e25
     308:	00001051 	.word	0x00001051
     30c:	000010dd 	.word	0x000010dd

00000310 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     310:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     312:	4b04      	ldr	r3, [pc, #16]	; (324 <sd_mmc_deselect_slot+0x14>)
     314:	781b      	ldrb	r3, [r3, #0]
     316:	2b00      	cmp	r3, #0
     318:	d000      	beq.n	31c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     31a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     31c:	2000      	movs	r0, #0
     31e:	4b02      	ldr	r3, [pc, #8]	; (328 <sd_mmc_deselect_slot+0x18>)
     320:	4798      	blx	r3
}
     322:	e7fa      	b.n	31a <sd_mmc_deselect_slot+0xa>
     324:	200000bd 	.word	0x200000bd
     328:	00000dc5 	.word	0x00000dc5

0000032c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     32c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     32e:	2204      	movs	r2, #4
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <sd_mmc_init+0x14>)
     332:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     334:	32fb      	adds	r2, #251	; 0xfb
     336:	4b03      	ldr	r3, [pc, #12]	; (344 <sd_mmc_init+0x18>)
     338:	701a      	strb	r2, [r3, #0]
	driver_init();
     33a:	4b03      	ldr	r3, [pc, #12]	; (348 <sd_mmc_init+0x1c>)
     33c:	4798      	blx	r3
}
     33e:	bd10      	pop	{r4, pc}
     340:	2000000c 	.word	0x2000000c
     344:	200000bd 	.word	0x200000bd
     348:	00000c65 	.word	0x00000c65

0000034c <sd_mmc_nb_slot>:

uint8_t sd_mmc_nb_slot(void)
{
	return SD_MMC_MEM_CNT;
}
     34c:	2001      	movs	r0, #1
     34e:	4770      	bx	lr

00000350 <sd_mmc_check>:

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     350:	b5f0      	push	{r4, r5, r6, r7, lr}
     352:	46c6      	mov	lr, r8
     354:	b500      	push	{lr}
     356:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     358:	4bcb      	ldr	r3, [pc, #812]	; (688 <sd_mmc_check+0x338>)
     35a:	4798      	blx	r3
     35c:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     35e:	2801      	cmp	r0, #1
     360:	d006      	beq.n	370 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     362:	4bca      	ldr	r3, [pc, #808]	; (68c <sd_mmc_check+0x33c>)
     364:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     366:	0020      	movs	r0, r4
     368:	b008      	add	sp, #32
     36a:	bc04      	pop	{r2}
     36c:	4690      	mov	r8, r2
     36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     370:	4bc7      	ldr	r3, [pc, #796]	; (690 <sd_mmc_check+0x340>)
     372:	681b      	ldr	r3, [r3, #0]
     374:	2201      	movs	r2, #1
     376:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     378:	2200      	movs	r2, #0
     37a:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     37c:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     37e:	4bc5      	ldr	r3, [pc, #788]	; (694 <sd_mmc_check+0x344>)
     380:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     382:	2100      	movs	r1, #0
     384:	2088      	movs	r0, #136	; 0x88
     386:	0140      	lsls	r0, r0, #5
     388:	4bc3      	ldr	r3, [pc, #780]	; (698 <sd_mmc_check+0x348>)
     38a:	4798      	blx	r3
     38c:	2800      	cmp	r0, #0
     38e:	d107      	bne.n	3a0 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     390:	4bbf      	ldr	r3, [pc, #764]	; (690 <sd_mmc_check+0x340>)
     392:	681b      	ldr	r3, [r3, #0]
     394:	2203      	movs	r2, #3
     396:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     398:	4bbc      	ldr	r3, [pc, #752]	; (68c <sd_mmc_check+0x33c>)
     39a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     39c:	2403      	movs	r4, #3
     39e:	e7e2      	b.n	366 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     3a0:	21d5      	movs	r1, #213	; 0xd5
     3a2:	0049      	lsls	r1, r1, #1
     3a4:	48bd      	ldr	r0, [pc, #756]	; (69c <sd_mmc_check+0x34c>)
     3a6:	4bbc      	ldr	r3, [pc, #752]	; (698 <sd_mmc_check+0x348>)
     3a8:	4798      	blx	r3
	*v2 = 0;
     3aa:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     3ac:	2800      	cmp	r0, #0
     3ae:	d125      	bne.n	3fc <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     3b0:	4bb7      	ldr	r3, [pc, #732]	; (690 <sd_mmc_check+0x340>)
     3b2:	681b      	ldr	r3, [r3, #0]
     3b4:	7bdb      	ldrb	r3, [r3, #15]
     3b6:	07db      	lsls	r3, r3, #31
     3b8:	d500      	bpl.n	3bc <sd_mmc_check+0x6c>
     3ba:	e1eb      	b.n	794 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     3bc:	4bb4      	ldr	r3, [pc, #720]	; (690 <sd_mmc_check+0x340>)
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	7bda      	ldrb	r2, [r3, #15]
     3c2:	2309      	movs	r3, #9
     3c4:	4013      	ands	r3, r2
     3c6:	2b01      	cmp	r3, #1
     3c8:	d10f      	bne.n	3ea <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     3ca:	2180      	movs	r1, #128	; 0x80
     3cc:	0089      	lsls	r1, r1, #2
     3ce:	48b4      	ldr	r0, [pc, #720]	; (6a0 <sd_mmc_check+0x350>)
     3d0:	4bb1      	ldr	r3, [pc, #708]	; (698 <sd_mmc_check+0x348>)
     3d2:	4798      	blx	r3
     3d4:	2800      	cmp	r0, #0
     3d6:	d0db      	beq.n	390 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     3d8:	4bad      	ldr	r3, [pc, #692]	; (690 <sd_mmc_check+0x340>)
     3da:	681b      	ldr	r3, [r3, #0]
     3dc:	7bdb      	ldrb	r3, [r3, #15]
     3de:	07db      	lsls	r3, r3, #31
     3e0:	d503      	bpl.n	3ea <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     3e2:	4bb0      	ldr	r3, [pc, #704]	; (6a4 <sd_mmc_check+0x354>)
     3e4:	4798      	blx	r3
     3e6:	2800      	cmp	r0, #0
     3e8:	d0d2      	beq.n	390 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     3ea:	4baf      	ldr	r3, [pc, #700]	; (6a8 <sd_mmc_check+0x358>)
     3ec:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     3ee:	4ba8      	ldr	r3, [pc, #672]	; (690 <sd_mmc_check+0x340>)
     3f0:	681b      	ldr	r3, [r3, #0]
     3f2:	2200      	movs	r2, #0
     3f4:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     3f6:	4ba5      	ldr	r3, [pc, #660]	; (68c <sd_mmc_check+0x33c>)
     3f8:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     3fa:	e7b4      	b.n	366 <sd_mmc_check+0x16>
	resp = driver_get_response();
     3fc:	4bab      	ldr	r3, [pc, #684]	; (6ac <sd_mmc_check+0x35c>)
     3fe:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     400:	1c43      	adds	r3, r0, #1
     402:	d100      	bne.n	406 <sd_mmc_check+0xb6>
     404:	e1c4      	b.n	790 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     406:	0500      	lsls	r0, r0, #20
     408:	0d00      	lsrs	r0, r0, #20
     40a:	23d5      	movs	r3, #213	; 0xd5
     40c:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     40e:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     410:	4298      	cmp	r0, r3
     412:	d1bd      	bne.n	390 <sd_mmc_check+0x40>
     414:	e7cc      	b.n	3b0 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     416:	2100      	movs	r1, #0
     418:	48a5      	ldr	r0, [pc, #660]	; (6b0 <sd_mmc_check+0x360>)
     41a:	4b9f      	ldr	r3, [pc, #636]	; (698 <sd_mmc_check+0x348>)
     41c:	4798      	blx	r3
     41e:	2800      	cmp	r0, #0
     420:	d119      	bne.n	456 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     422:	4b9b      	ldr	r3, [pc, #620]	; (690 <sd_mmc_check+0x340>)
     424:	681b      	ldr	r3, [r3, #0]
     426:	2202      	movs	r2, #2
     428:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     42a:	2100      	movs	r1, #0
     42c:	2088      	movs	r0, #136	; 0x88
     42e:	0140      	lsls	r0, r0, #5
     430:	4b99      	ldr	r3, [pc, #612]	; (698 <sd_mmc_check+0x348>)
     432:	4798      	blx	r3
     434:	2800      	cmp	r0, #0
     436:	d0ab      	beq.n	390 <sd_mmc_check+0x40>
     438:	4d9e      	ldr	r5, [pc, #632]	; (6b4 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     43a:	4f97      	ldr	r7, [pc, #604]	; (698 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     43c:	4e9b      	ldr	r6, [pc, #620]	; (6ac <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     43e:	2100      	movs	r1, #0
     440:	489d      	ldr	r0, [pc, #628]	; (6b8 <sd_mmc_check+0x368>)
     442:	47b8      	blx	r7
     444:	2800      	cmp	r0, #0
     446:	d0a3      	beq.n	390 <sd_mmc_check+0x40>
		resp = driver_get_response();
     448:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     44a:	07c3      	lsls	r3, r0, #31
     44c:	d57d      	bpl.n	54a <sd_mmc_check+0x1fa>
     44e:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     450:	2d00      	cmp	r5, #0
     452:	d1f4      	bne.n	43e <sd_mmc_check+0xee>
     454:	e79c      	b.n	390 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     456:	4b95      	ldr	r3, [pc, #596]	; (6ac <sd_mmc_check+0x35c>)
     458:	4798      	blx	r3
     45a:	0043      	lsls	r3, r0, #1
     45c:	d505      	bpl.n	46a <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     45e:	4b8c      	ldr	r3, [pc, #560]	; (690 <sd_mmc_check+0x340>)
     460:	681a      	ldr	r2, [r3, #0]
     462:	7bd3      	ldrb	r3, [r2, #15]
     464:	2108      	movs	r1, #8
     466:	430b      	orrs	r3, r1
     468:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     46a:	2100      	movs	r1, #0
     46c:	4893      	ldr	r0, [pc, #588]	; (6bc <sd_mmc_check+0x36c>)
     46e:	4b8a      	ldr	r3, [pc, #552]	; (698 <sd_mmc_check+0x348>)
     470:	4798      	blx	r3
     472:	2800      	cmp	r0, #0
     474:	d08c      	beq.n	390 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     476:	4b86      	ldr	r3, [pc, #536]	; (690 <sd_mmc_check+0x340>)
     478:	681b      	ldr	r3, [r3, #0]
     47a:	7bdb      	ldrb	r3, [r3, #15]
     47c:	07da      	lsls	r2, r3, #31
     47e:	d400      	bmi.n	482 <sd_mmc_check+0x132>
     480:	e1a4      	b.n	7cc <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     482:	4b8f      	ldr	r3, [pc, #572]	; (6c0 <sd_mmc_check+0x370>)
     484:	4798      	blx	r3
     486:	2800      	cmp	r0, #0
     488:	d082      	beq.n	390 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     48a:	4b81      	ldr	r3, [pc, #516]	; (690 <sd_mmc_check+0x340>)
     48c:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     48e:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     490:	2107      	movs	r1, #7
     492:	4019      	ands	r1, r3
     494:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     496:	488b      	ldr	r0, [pc, #556]	; (6c4 <sd_mmc_check+0x374>)
     498:	5808      	ldr	r0, [r1, r0]
     49a:	21fa      	movs	r1, #250	; 0xfa
     49c:	0089      	lsls	r1, r1, #2
     49e:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     4a0:	065b      	lsls	r3, r3, #25
     4a2:	0f1b      	lsrs	r3, r3, #28
     4a4:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     4a6:	4888      	ldr	r0, [pc, #544]	; (6c8 <sd_mmc_check+0x378>)
     4a8:	581b      	ldr	r3, [r3, r0]
     4aa:	434b      	muls	r3, r1
     4ac:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     4ae:	7c93      	ldrb	r3, [r2, #18]
     4b0:	099b      	lsrs	r3, r3, #6
     4b2:	d000      	beq.n	4b6 <sd_mmc_check+0x166>
     4b4:	e13c      	b.n	730 <sd_mmc_check+0x3e0>
     4b6:	7e91      	ldrb	r1, [r2, #26]
     4b8:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4ba:	7e53      	ldrb	r3, [r2, #25]
     4bc:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4be:	7e10      	ldrb	r0, [r2, #24]
     4c0:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4c2:	4303      	orrs	r3, r0
     4c4:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4c6:	7f10      	ldrb	r0, [r2, #28]
     4c8:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4ca:	7ed1      	ldrb	r1, [r2, #27]
     4cc:	0049      	lsls	r1, r1, #1
     4ce:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     4d0:	051b      	lsls	r3, r3, #20
     4d2:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     4d4:	3301      	adds	r3, #1
     4d6:	2107      	movs	r1, #7
     4d8:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     4da:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     4dc:	408b      	lsls	r3, r1
     4de:	7dd0      	ldrb	r0, [r2, #23]
     4e0:	210f      	movs	r1, #15
     4e2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     4e4:	408b      	lsls	r3, r1
				/ 1024;
     4e6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     4e8:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     4ea:	8991      	ldrh	r1, [r2, #12]
     4ec:	0409      	lsls	r1, r1, #16
     4ee:	4877      	ldr	r0, [pc, #476]	; (6cc <sd_mmc_check+0x37c>)
     4f0:	4b69      	ldr	r3, [pc, #420]	; (698 <sd_mmc_check+0x348>)
     4f2:	4798      	blx	r3
     4f4:	2800      	cmp	r0, #0
     4f6:	d100      	bne.n	4fa <sd_mmc_check+0x1aa>
     4f8:	e74a      	b.n	390 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     4fa:	2301      	movs	r3, #1
     4fc:	9300      	str	r3, [sp, #0]
     4fe:	2208      	movs	r2, #8
     500:	2100      	movs	r1, #0
     502:	4873      	ldr	r0, [pc, #460]	; (6d0 <sd_mmc_check+0x380>)
     504:	4d73      	ldr	r5, [pc, #460]	; (6d4 <sd_mmc_check+0x384>)
     506:	47a8      	blx	r5
     508:	2800      	cmp	r0, #0
     50a:	d100      	bne.n	50e <sd_mmc_check+0x1be>
     50c:	e740      	b.n	390 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     50e:	2101      	movs	r1, #1
     510:	a806      	add	r0, sp, #24
     512:	4b71      	ldr	r3, [pc, #452]	; (6d8 <sd_mmc_check+0x388>)
     514:	4798      	blx	r3
     516:	2800      	cmp	r0, #0
     518:	d100      	bne.n	51c <sd_mmc_check+0x1cc>
     51a:	e739      	b.n	390 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     51c:	4b6f      	ldr	r3, [pc, #444]	; (6dc <sd_mmc_check+0x38c>)
     51e:	4798      	blx	r3
     520:	2800      	cmp	r0, #0
     522:	d100      	bne.n	526 <sd_mmc_check+0x1d6>
     524:	e734      	b.n	390 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     526:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     528:	781b      	ldrb	r3, [r3, #0]
     52a:	220f      	movs	r2, #15
     52c:	4013      	ands	r3, r2
     52e:	2b01      	cmp	r3, #1
     530:	d100      	bne.n	534 <sd_mmc_check+0x1e4>
     532:	e119      	b.n	768 <sd_mmc_check+0x418>
     534:	2b00      	cmp	r3, #0
     536:	d100      	bne.n	53a <sd_mmc_check+0x1ea>
     538:	e109      	b.n	74e <sd_mmc_check+0x3fe>
     53a:	2b02      	cmp	r3, #2
     53c:	d100      	bne.n	540 <sd_mmc_check+0x1f0>
     53e:	e118      	b.n	772 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     540:	4b53      	ldr	r3, [pc, #332]	; (690 <sd_mmc_check+0x340>)
     542:	681b      	ldr	r3, [r3, #0]
     544:	2210      	movs	r2, #16
     546:	741a      	strb	r2, [r3, #16]
     548:	e105      	b.n	756 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     54a:	2100      	movs	r1, #0
     54c:	4858      	ldr	r0, [pc, #352]	; (6b0 <sd_mmc_check+0x360>)
     54e:	4b52      	ldr	r3, [pc, #328]	; (698 <sd_mmc_check+0x348>)
     550:	4798      	blx	r3
     552:	2800      	cmp	r0, #0
     554:	d100      	bne.n	558 <sd_mmc_check+0x208>
     556:	e71b      	b.n	390 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     558:	4b54      	ldr	r3, [pc, #336]	; (6ac <sd_mmc_check+0x35c>)
     55a:	4798      	blx	r3
     55c:	23c0      	movs	r3, #192	; 0xc0
     55e:	05db      	lsls	r3, r3, #23
     560:	4018      	ands	r0, r3
     562:	2380      	movs	r3, #128	; 0x80
     564:	05db      	lsls	r3, r3, #23
     566:	4298      	cmp	r0, r3
     568:	d105      	bne.n	576 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     56a:	4b49      	ldr	r3, [pc, #292]	; (690 <sd_mmc_check+0x340>)
     56c:	681a      	ldr	r2, [r3, #0]
     56e:	7bd1      	ldrb	r1, [r2, #15]
     570:	2308      	movs	r3, #8
     572:	430b      	orrs	r3, r1
     574:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     576:	2100      	movs	r1, #0
     578:	4850      	ldr	r0, [pc, #320]	; (6bc <sd_mmc_check+0x36c>)
     57a:	4b47      	ldr	r3, [pc, #284]	; (698 <sd_mmc_check+0x348>)
     57c:	4798      	blx	r3
     57e:	2800      	cmp	r0, #0
     580:	d100      	bne.n	584 <sd_mmc_check+0x234>
     582:	e705      	b.n	390 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     584:	4b4e      	ldr	r3, [pc, #312]	; (6c0 <sd_mmc_check+0x370>)
     586:	4798      	blx	r3
     588:	2800      	cmp	r0, #0
     58a:	d100      	bne.n	58e <sd_mmc_check+0x23e>
     58c:	e700      	b.n	390 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     58e:	4b40      	ldr	r3, [pc, #256]	; (690 <sd_mmc_check+0x340>)
     590:	681a      	ldr	r2, [r3, #0]
     592:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     594:	069b      	lsls	r3, r3, #26
     596:	0f1b      	lsrs	r3, r3, #28
     598:	2b02      	cmp	r3, #2
     59a:	d100      	bne.n	59e <sd_mmc_check+0x24e>
     59c:	e0a8      	b.n	6f0 <sd_mmc_check+0x3a0>
     59e:	d907      	bls.n	5b0 <sd_mmc_check+0x260>
     5a0:	2b03      	cmp	r3, #3
     5a2:	d100      	bne.n	5a6 <sd_mmc_check+0x256>
     5a4:	e0a7      	b.n	6f6 <sd_mmc_check+0x3a6>
     5a6:	2b04      	cmp	r3, #4
     5a8:	d104      	bne.n	5b4 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     5aa:	2340      	movs	r3, #64	; 0x40
     5ac:	7413      	strb	r3, [r2, #16]
     5ae:	e003      	b.n	5b8 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     5b0:	2b01      	cmp	r3, #1
     5b2:	d066      	beq.n	682 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     5b4:	2312      	movs	r3, #18
     5b6:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     5b8:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     5ba:	0659      	lsls	r1, r3, #25
     5bc:	0f09      	lsrs	r1, r1, #28
     5be:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     5c0:	2007      	movs	r0, #7
     5c2:	4003      	ands	r3, r0
     5c4:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     5c6:	483f      	ldr	r0, [pc, #252]	; (6c4 <sd_mmc_check+0x374>)
     5c8:	5818      	ldr	r0, [r3, r0]
     5ca:	23fa      	movs	r3, #250	; 0xfa
     5cc:	009b      	lsls	r3, r3, #2
     5ce:	4343      	muls	r3, r0
     5d0:	4843      	ldr	r0, [pc, #268]	; (6e0 <sd_mmc_check+0x390>)
     5d2:	5809      	ldr	r1, [r1, r0]
     5d4:	434b      	muls	r3, r1
     5d6:	6013      	str	r3, [r2, #0]
     5d8:	7e91      	ldrb	r1, [r2, #26]
     5da:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5dc:	7e53      	ldrb	r3, [r2, #25]
     5de:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5e0:	7e10      	ldrb	r0, [r2, #24]
     5e2:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5e4:	4303      	orrs	r3, r0
     5e6:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     5e8:	051b      	lsls	r3, r3, #20
     5ea:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     5ec:	493d      	ldr	r1, [pc, #244]	; (6e4 <sd_mmc_check+0x394>)
     5ee:	428b      	cmp	r3, r1
     5f0:	d00f      	beq.n	612 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     5f2:	7f10      	ldrb	r0, [r2, #28]
     5f4:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5f6:	7ed1      	ldrb	r1, [r2, #27]
     5f8:	0049      	lsls	r1, r1, #1
     5fa:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     5fc:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     5fe:	2007      	movs	r0, #7
     600:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     602:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     604:	408b      	lsls	r3, r1
     606:	7dd1      	ldrb	r1, [r2, #23]
     608:	3008      	adds	r0, #8
     60a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     60c:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     60e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     610:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     612:	7c13      	ldrb	r3, [r2, #16]
     614:	2b3f      	cmp	r3, #63	; 0x3f
     616:	d97b      	bls.n	710 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     618:	2100      	movs	r1, #0
     61a:	9100      	str	r1, [sp, #0]
     61c:	2301      	movs	r3, #1
     61e:	2280      	movs	r2, #128	; 0x80
     620:	0092      	lsls	r2, r2, #2
     622:	4831      	ldr	r0, [pc, #196]	; (6e8 <sd_mmc_check+0x398>)
     624:	4d2b      	ldr	r5, [pc, #172]	; (6d4 <sd_mmc_check+0x384>)
     626:	47a8      	blx	r5
     628:	2800      	cmp	r0, #0
     62a:	d100      	bne.n	62e <sd_mmc_check+0x2de>
     62c:	e6b0      	b.n	390 <sd_mmc_check+0x40>
     62e:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     630:	4e2e      	ldr	r6, [pc, #184]	; (6ec <sd_mmc_check+0x39c>)
     632:	a805      	add	r0, sp, #20
     634:	47b0      	blx	r6
     636:	2800      	cmp	r0, #0
     638:	d100      	bne.n	63c <sd_mmc_check+0x2ec>
     63a:	e6a9      	b.n	390 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     63c:	3501      	adds	r5, #1
     63e:	b2ad      	uxth	r5, r5
     640:	2d32      	cmp	r5, #50	; 0x32
     642:	d1f6      	bne.n	632 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     644:	4b12      	ldr	r3, [pc, #72]	; (690 <sd_mmc_check+0x340>)
     646:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     648:	7e8a      	ldrb	r2, [r1, #26]
     64a:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     64c:	7e4b      	ldrb	r3, [r1, #25]
     64e:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     650:	7e09      	ldrb	r1, [r1, #24]
     652:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     654:	430b      	orrs	r3, r1
     656:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     658:	051b      	lsls	r3, r3, #20
     65a:	0d1b      	lsrs	r3, r3, #20
     65c:	4a21      	ldr	r2, [pc, #132]	; (6e4 <sd_mmc_check+0x394>)
     65e:	4293      	cmp	r3, r2
     660:	d154      	bne.n	70c <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     662:	4e22      	ldr	r6, [pc, #136]	; (6ec <sd_mmc_check+0x39c>)
     664:	a806      	add	r0, sp, #24
     666:	47b0      	blx	r6
     668:	2800      	cmp	r0, #0
     66a:	d100      	bne.n	66e <sd_mmc_check+0x31e>
     66c:	e690      	b.n	390 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     66e:	3501      	adds	r5, #1
     670:	b2ad      	uxth	r5, r5
     672:	2d35      	cmp	r5, #53	; 0x35
     674:	d9f6      	bls.n	664 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     676:	4b06      	ldr	r3, [pc, #24]	; (690 <sd_mmc_check+0x340>)
     678:	681a      	ldr	r2, [r3, #0]
     67a:	9b06      	ldr	r3, [sp, #24]
     67c:	085b      	lsrs	r3, r3, #1
     67e:	6053      	str	r3, [r2, #4]
     680:	e044      	b.n	70c <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     682:	2314      	movs	r3, #20
     684:	7413      	strb	r3, [r2, #16]
     686:	e797      	b.n	5b8 <sd_mmc_check+0x268>
     688:	00000141 	.word	0x00000141
     68c:	00000311 	.word	0x00000311
     690:	200000b4 	.word	0x200000b4
     694:	00000ded 	.word	0x00000ded
     698:	00000fb5 	.word	0x00000fb5
     69c:	00005508 	.word	0x00005508
     6a0:	00001110 	.word	0x00001110
     6a4:	0000028d 	.word	0x0000028d
     6a8:	00000115 	.word	0x00000115
     6ac:	00000fcd 	.word	0x00000fcd
     6b0:	0000053a 	.word	0x0000053a
     6b4:	00001bef 	.word	0x00001bef
     6b8:	00001101 	.word	0x00001101
     6bc:	0000113b 	.word	0x0000113b
     6c0:	000002c5 	.word	0x000002c5
     6c4:	000045c8 	.word	0x000045c8
     6c8:	000045e4 	.word	0x000045e4
     6cc:	00001137 	.word	0x00001137
     6d0:	00081133 	.word	0x00081133
     6d4:	00000e25 	.word	0x00000e25
     6d8:	00001051 	.word	0x00001051
     6dc:	000010dd 	.word	0x000010dd
     6e0:	00004588 	.word	0x00004588
     6e4:	00000fff 	.word	0x00000fff
     6e8:	00081108 	.word	0x00081108
     6ec:	00000fd9 	.word	0x00000fd9
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     6f0:	2322      	movs	r3, #34	; 0x22
     6f2:	7413      	strb	r3, [r2, #16]
     6f4:	e760      	b.n	5b8 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     6f6:	2330      	movs	r3, #48	; 0x30
     6f8:	7413      	strb	r3, [r2, #16]
     6fa:	e75d      	b.n	5b8 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     6fc:	a806      	add	r0, sp, #24
     6fe:	4b36      	ldr	r3, [pc, #216]	; (7d8 <sd_mmc_check+0x488>)
     700:	4798      	blx	r3
     702:	2800      	cmp	r0, #0
     704:	d100      	bne.n	708 <sd_mmc_check+0x3b8>
     706:	e643      	b.n	390 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     708:	3501      	adds	r5, #1
     70a:	b2ad      	uxth	r5, r5
     70c:	2d7f      	cmp	r5, #127	; 0x7f
     70e:	d9f5      	bls.n	6fc <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     710:	2180      	movs	r1, #128	; 0x80
     712:	0089      	lsls	r1, r1, #2
     714:	4831      	ldr	r0, [pc, #196]	; (7dc <sd_mmc_check+0x48c>)
     716:	4b32      	ldr	r3, [pc, #200]	; (7e0 <sd_mmc_check+0x490>)
     718:	4798      	blx	r3
     71a:	2800      	cmp	r0, #0
     71c:	d100      	bne.n	720 <sd_mmc_check+0x3d0>
     71e:	e637      	b.n	390 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     720:	4b30      	ldr	r3, [pc, #192]	; (7e4 <sd_mmc_check+0x494>)
     722:	4798      	blx	r3
     724:	2800      	cmp	r0, #0
     726:	d100      	bne.n	72a <sd_mmc_check+0x3da>
     728:	e632      	b.n	390 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     72a:	4b2f      	ldr	r3, [pc, #188]	; (7e8 <sd_mmc_check+0x498>)
     72c:	4798      	blx	r3
     72e:	e65e      	b.n	3ee <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     730:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     732:	7e93      	ldrb	r3, [r2, #26]
     734:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     736:	7e51      	ldrb	r1, [r2, #25]
     738:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     73a:	430b      	orrs	r3, r1
     73c:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     73e:	029b      	lsls	r3, r3, #10
				* 512;
     740:	085b      	lsrs	r3, r3, #1
     742:	2180      	movs	r1, #128	; 0x80
     744:	0089      	lsls	r1, r1, #2
     746:	468c      	mov	ip, r1
     748:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     74a:	6053      	str	r3, [r2, #4]
     74c:	e6cd      	b.n	4ea <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     74e:	4b27      	ldr	r3, [pc, #156]	; (7ec <sd_mmc_check+0x49c>)
     750:	681b      	ldr	r3, [r3, #0]
     752:	2210      	movs	r2, #16
     754:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     756:	4b25      	ldr	r3, [pc, #148]	; (7ec <sd_mmc_check+0x49c>)
     758:	681b      	ldr	r3, [r3, #0]
     75a:	7bdb      	ldrb	r3, [r3, #15]
     75c:	2209      	movs	r2, #9
     75e:	4013      	ands	r3, r2
     760:	2b01      	cmp	r3, #1
     762:	d000      	beq.n	766 <sd_mmc_check+0x416>
     764:	e638      	b.n	3d8 <sd_mmc_check+0x88>
     766:	e630      	b.n	3ca <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     768:	4b20      	ldr	r3, [pc, #128]	; (7ec <sd_mmc_check+0x49c>)
     76a:	681b      	ldr	r3, [r3, #0]
     76c:	221a      	movs	r2, #26
     76e:	741a      	strb	r2, [r3, #16]
     770:	e7f1      	b.n	756 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     772:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     774:	789b      	ldrb	r3, [r3, #2]
     776:	09db      	lsrs	r3, r3, #7
     778:	2b01      	cmp	r3, #1
     77a:	d104      	bne.n	786 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     77c:	4b1b      	ldr	r3, [pc, #108]	; (7ec <sd_mmc_check+0x49c>)
     77e:	681b      	ldr	r3, [r3, #0]
     780:	2230      	movs	r2, #48	; 0x30
     782:	741a      	strb	r2, [r3, #16]
     784:	e7e7      	b.n	756 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     786:	4b19      	ldr	r3, [pc, #100]	; (7ec <sd_mmc_check+0x49c>)
     788:	681b      	ldr	r3, [r3, #0]
     78a:	2220      	movs	r2, #32
     78c:	741a      	strb	r2, [r3, #16]
     78e:	e7e2      	b.n	756 <sd_mmc_check+0x406>
	*v2 = 0;
     790:	2600      	movs	r6, #0
     792:	e60d      	b.n	3b0 <sd_mmc_check+0x60>
     794:	1e73      	subs	r3, r6, #1
     796:	419e      	sbcs	r6, r3
     798:	07b3      	lsls	r3, r6, #30
     79a:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     79c:	4d14      	ldr	r5, [pc, #80]	; (7f0 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     79e:	4f10      	ldr	r7, [pc, #64]	; (7e0 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     7a0:	46b8      	mov	r8, r7
		resp = driver_get_response();
     7a2:	4e14      	ldr	r6, [pc, #80]	; (7f4 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     7a4:	2100      	movs	r1, #0
     7a6:	4814      	ldr	r0, [pc, #80]	; (7f8 <sd_mmc_check+0x4a8>)
     7a8:	47b8      	blx	r7
     7aa:	2800      	cmp	r0, #0
     7ac:	d100      	bne.n	7b0 <sd_mmc_check+0x460>
     7ae:	e638      	b.n	422 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     7b0:	9903      	ldr	r1, [sp, #12]
     7b2:	4812      	ldr	r0, [pc, #72]	; (7fc <sd_mmc_check+0x4ac>)
     7b4:	47c0      	blx	r8
     7b6:	2800      	cmp	r0, #0
     7b8:	d100      	bne.n	7bc <sd_mmc_check+0x46c>
     7ba:	e632      	b.n	422 <sd_mmc_check+0xd2>
		resp = driver_get_response();
     7bc:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     7be:	07c3      	lsls	r3, r0, #31
     7c0:	d400      	bmi.n	7c4 <sd_mmc_check+0x474>
     7c2:	e628      	b.n	416 <sd_mmc_check+0xc6>
     7c4:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     7c6:	2d00      	cmp	r5, #0
     7c8:	d1ec      	bne.n	7a4 <sd_mmc_check+0x454>
     7ca:	e62a      	b.n	422 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     7cc:	2209      	movs	r2, #9
     7ce:	4013      	ands	r3, r2
     7d0:	2b01      	cmp	r3, #1
     7d2:	d000      	beq.n	7d6 <sd_mmc_check+0x486>
     7d4:	e609      	b.n	3ea <sd_mmc_check+0x9a>
     7d6:	e5f8      	b.n	3ca <sd_mmc_check+0x7a>
     7d8:	00000fd9 	.word	0x00000fd9
     7dc:	00001110 	.word	0x00001110
     7e0:	00000fb5 	.word	0x00000fb5
     7e4:	0000028d 	.word	0x0000028d
     7e8:	00000115 	.word	0x00000115
     7ec:	200000b4 	.word	0x200000b4
     7f0:	00001bef 	.word	0x00001bef
     7f4:	00000fcd 	.word	0x00000fcd
     7f8:	00001137 	.word	0x00001137
     7fc:	00001129 	.word	0x00001129

00000800 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     800:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     802:	4b06      	ldr	r3, [pc, #24]	; (81c <sd_mmc_get_type+0x1c>)
     804:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     806:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     808:	2800      	cmp	r0, #0
     80a:	d001      	beq.n	810 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     80c:	0018      	movs	r0, r3
     80e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     810:	4b03      	ldr	r3, [pc, #12]	; (820 <sd_mmc_get_type+0x20>)
     812:	4798      	blx	r3
	return sd_mmc_card->type;
     814:	4b03      	ldr	r3, [pc, #12]	; (824 <sd_mmc_get_type+0x24>)
     816:	681b      	ldr	r3, [r3, #0]
     818:	7bdb      	ldrb	r3, [r3, #15]
     81a:	e7f7      	b.n	80c <sd_mmc_get_type+0xc>
     81c:	00000141 	.word	0x00000141
     820:	00000311 	.word	0x00000311
     824:	200000b4 	.word	0x200000b4

00000828 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     828:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     82a:	4b06      	ldr	r3, [pc, #24]	; (844 <sd_mmc_get_capacity+0x1c>)
     82c:	4798      	blx	r3
		return 0;
     82e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     830:	2800      	cmp	r0, #0
     832:	d001      	beq.n	838 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     834:	0018      	movs	r0, r3
     836:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     838:	4b03      	ldr	r3, [pc, #12]	; (848 <sd_mmc_get_capacity+0x20>)
     83a:	4798      	blx	r3
	return sd_mmc_card->capacity;
     83c:	4b03      	ldr	r3, [pc, #12]	; (84c <sd_mmc_get_capacity+0x24>)
     83e:	681b      	ldr	r3, [r3, #0]
     840:	685b      	ldr	r3, [r3, #4]
     842:	e7f7      	b.n	834 <sd_mmc_get_capacity+0xc>
     844:	00000141 	.word	0x00000141
     848:	00000311 	.word	0x00000311
     84c:	200000b4 	.word	0x200000b4

00000850 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     850:	2000      	movs	r0, #0
     852:	4770      	bx	lr

00000854 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     854:	b570      	push	{r4, r5, r6, lr}
     856:	b082      	sub	sp, #8
     858:	000e      	movs	r6, r1
     85a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     85c:	4b16      	ldr	r3, [pc, #88]	; (8b8 <sd_mmc_init_read_blocks+0x64>)
     85e:	4798      	blx	r3
     860:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     862:	d002      	beq.n	86a <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     864:	0020      	movs	r0, r4
     866:	b002      	add	sp, #8
     868:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     86a:	4b14      	ldr	r3, [pc, #80]	; (8bc <sd_mmc_init_read_blocks+0x68>)
     86c:	4798      	blx	r3
     86e:	2800      	cmp	r0, #0
     870:	d017      	beq.n	8a2 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     872:	2d01      	cmp	r5, #1
     874:	d919      	bls.n	8aa <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     876:	4812      	ldr	r0, [pc, #72]	; (8c0 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     878:	4b12      	ldr	r3, [pc, #72]	; (8c4 <sd_mmc_init_read_blocks+0x70>)
     87a:	681b      	ldr	r3, [r3, #0]
     87c:	7bdb      	ldrb	r3, [r3, #15]
     87e:	071b      	lsls	r3, r3, #28
     880:	d400      	bmi.n	884 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     882:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     884:	2301      	movs	r3, #1
     886:	9300      	str	r3, [sp, #0]
     888:	002b      	movs	r3, r5
     88a:	2280      	movs	r2, #128	; 0x80
     88c:	0092      	lsls	r2, r2, #2
     88e:	0031      	movs	r1, r6
     890:	4e0d      	ldr	r6, [pc, #52]	; (8c8 <sd_mmc_init_read_blocks+0x74>)
     892:	47b0      	blx	r6
     894:	2800      	cmp	r0, #0
     896:	d00a      	beq.n	8ae <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     898:	4b0c      	ldr	r3, [pc, #48]	; (8cc <sd_mmc_init_read_blocks+0x78>)
     89a:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     89c:	4b0c      	ldr	r3, [pc, #48]	; (8d0 <sd_mmc_init_read_blocks+0x7c>)
     89e:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     8a0:	e7e0      	b.n	864 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     8a2:	4b0c      	ldr	r3, [pc, #48]	; (8d4 <sd_mmc_init_read_blocks+0x80>)
     8a4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8a6:	3405      	adds	r4, #5
     8a8:	e7dc      	b.n	864 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     8aa:	480b      	ldr	r0, [pc, #44]	; (8d8 <sd_mmc_init_read_blocks+0x84>)
     8ac:	e7e4      	b.n	878 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     8ae:	4b09      	ldr	r3, [pc, #36]	; (8d4 <sd_mmc_init_read_blocks+0x80>)
     8b0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8b2:	2405      	movs	r4, #5
     8b4:	e7d6      	b.n	864 <sd_mmc_init_read_blocks+0x10>
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	00000141 	.word	0x00000141
     8bc:	0000028d 	.word	0x0000028d
     8c0:	00101112 	.word	0x00101112
     8c4:	200000b4 	.word	0x200000b4
     8c8:	00000e25 	.word	0x00000e25
     8cc:	200000b8 	.word	0x200000b8
     8d0:	200000ba 	.word	0x200000ba
     8d4:	00000311 	.word	0x00000311
     8d8:	00081111 	.word	0x00081111

000008dc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     8dc:	b510      	push	{r4, lr}
     8de:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     8e0:	4b07      	ldr	r3, [pc, #28]	; (900 <sd_mmc_start_read_blocks+0x24>)
     8e2:	4798      	blx	r3
     8e4:	2800      	cmp	r0, #0
     8e6:	d104      	bne.n	8f2 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     8e8:	2200      	movs	r2, #0
     8ea:	4b06      	ldr	r3, [pc, #24]	; (904 <sd_mmc_start_read_blocks+0x28>)
     8ec:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     8ee:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     8f0:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     8f2:	4a04      	ldr	r2, [pc, #16]	; (904 <sd_mmc_start_read_blocks+0x28>)
     8f4:	8813      	ldrh	r3, [r2, #0]
     8f6:	1b1c      	subs	r4, r3, r4
     8f8:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     8fa:	2000      	movs	r0, #0
     8fc:	e7f8      	b.n	8f0 <sd_mmc_start_read_blocks+0x14>
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	00001051 	.word	0x00001051
     904:	200000b8 	.word	0x200000b8

00000908 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     908:	b510      	push	{r4, lr}
     90a:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     90c:	4b14      	ldr	r3, [pc, #80]	; (960 <sd_mmc_wait_end_of_read_blocks+0x58>)
     90e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     910:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     912:	2800      	cmp	r0, #0
     914:	d101      	bne.n	91a <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     916:	0018      	movs	r0, r3
     918:	bd10      	pop	{r4, pc}
	if (abort) {
     91a:	2c00      	cmp	r4, #0
     91c:	d010      	beq.n	940 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     91e:	2200      	movs	r2, #0
     920:	4b10      	ldr	r3, [pc, #64]	; (964 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     922:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     924:	4b10      	ldr	r3, [pc, #64]	; (968 <sd_mmc_wait_end_of_read_blocks+0x60>)
     926:	881b      	ldrh	r3, [r3, #0]
     928:	2b01      	cmp	r3, #1
     92a:	d00f      	beq.n	94c <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     92c:	2100      	movs	r1, #0
     92e:	480f      	ldr	r0, [pc, #60]	; (96c <sd_mmc_wait_end_of_read_blocks+0x64>)
     930:	4b0f      	ldr	r3, [pc, #60]	; (970 <sd_mmc_wait_end_of_read_blocks+0x68>)
     932:	4798      	blx	r3
     934:	2800      	cmp	r0, #0
     936:	d00d      	beq.n	954 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     938:	4b0e      	ldr	r3, [pc, #56]	; (974 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     93a:	4798      	blx	r3
	return SD_MMC_OK;
     93c:	2300      	movs	r3, #0
     93e:	e7ea      	b.n	916 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     940:	4b08      	ldr	r3, [pc, #32]	; (964 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     942:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     944:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     946:	2a00      	cmp	r2, #0
     948:	d0ec      	beq.n	924 <sd_mmc_wait_end_of_read_blocks+0x1c>
     94a:	e7e4      	b.n	916 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     94c:	4b09      	ldr	r3, [pc, #36]	; (974 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     94e:	4798      	blx	r3
		return SD_MMC_OK;
     950:	2300      	movs	r3, #0
     952:	e7e0      	b.n	916 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     954:	2100      	movs	r1, #0
     956:	4805      	ldr	r0, [pc, #20]	; (96c <sd_mmc_wait_end_of_read_blocks+0x64>)
     958:	4b05      	ldr	r3, [pc, #20]	; (970 <sd_mmc_wait_end_of_read_blocks+0x68>)
     95a:	4798      	blx	r3
     95c:	e7ec      	b.n	938 <sd_mmc_wait_end_of_read_blocks+0x30>
     95e:	46c0      	nop			; (mov r8, r8)
     960:	000010dd 	.word	0x000010dd
     964:	200000b8 	.word	0x200000b8
     968:	200000ba 	.word	0x200000ba
     96c:	0000310c 	.word	0x0000310c
     970:	00000fb5 	.word	0x00000fb5
     974:	00000311 	.word	0x00000311

00000978 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     978:	b570      	push	{r4, r5, r6, lr}
     97a:	b082      	sub	sp, #8
     97c:	000e      	movs	r6, r1
     97e:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     980:	4b11      	ldr	r3, [pc, #68]	; (9c8 <sd_mmc_init_write_blocks+0x50>)
     982:	4798      	blx	r3
     984:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     986:	d116      	bne.n	9b6 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     988:	2d01      	cmp	r5, #1
     98a:	d917      	bls.n	9bc <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     98c:	480f      	ldr	r0, [pc, #60]	; (9cc <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     98e:	4b10      	ldr	r3, [pc, #64]	; (9d0 <sd_mmc_init_write_blocks+0x58>)
     990:	681b      	ldr	r3, [r3, #0]
     992:	7bdb      	ldrb	r3, [r3, #15]
     994:	071b      	lsls	r3, r3, #28
     996:	d400      	bmi.n	99a <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     998:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     99a:	2301      	movs	r3, #1
     99c:	9300      	str	r3, [sp, #0]
     99e:	002b      	movs	r3, r5
     9a0:	2280      	movs	r2, #128	; 0x80
     9a2:	0092      	lsls	r2, r2, #2
     9a4:	0031      	movs	r1, r6
     9a6:	4e0b      	ldr	r6, [pc, #44]	; (9d4 <sd_mmc_init_write_blocks+0x5c>)
     9a8:	47b0      	blx	r6
     9aa:	2800      	cmp	r0, #0
     9ac:	d008      	beq.n	9c0 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     9ae:	4b0a      	ldr	r3, [pc, #40]	; (9d8 <sd_mmc_init_write_blocks+0x60>)
     9b0:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     9b2:	4b0a      	ldr	r3, [pc, #40]	; (9dc <sd_mmc_init_write_blocks+0x64>)
     9b4:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     9b6:	0020      	movs	r0, r4
     9b8:	b002      	add	sp, #8
     9ba:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     9bc:	4808      	ldr	r0, [pc, #32]	; (9e0 <sd_mmc_init_write_blocks+0x68>)
     9be:	e7e6      	b.n	98e <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     9c0:	4b08      	ldr	r3, [pc, #32]	; (9e4 <sd_mmc_init_write_blocks+0x6c>)
     9c2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     9c4:	2405      	movs	r4, #5
     9c6:	e7f6      	b.n	9b6 <sd_mmc_init_write_blocks+0x3e>
     9c8:	00000141 	.word	0x00000141
     9cc:	00109119 	.word	0x00109119
     9d0:	200000b4 	.word	0x200000b4
     9d4:	00000e25 	.word	0x00000e25
     9d8:	200000b8 	.word	0x200000b8
     9dc:	200000ba 	.word	0x200000ba
     9e0:	00089118 	.word	0x00089118
     9e4:	00000311 	.word	0x00000311

000009e8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     9e8:	b510      	push	{r4, lr}
     9ea:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     9ec:	4b07      	ldr	r3, [pc, #28]	; (a0c <sd_mmc_start_write_blocks+0x24>)
     9ee:	4798      	blx	r3
     9f0:	2800      	cmp	r0, #0
     9f2:	d104      	bne.n	9fe <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     9f4:	2200      	movs	r2, #0
     9f6:	4b06      	ldr	r3, [pc, #24]	; (a10 <sd_mmc_start_write_blocks+0x28>)
     9f8:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     9fa:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     9fc:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     9fe:	4a04      	ldr	r2, [pc, #16]	; (a10 <sd_mmc_start_write_blocks+0x28>)
     a00:	8813      	ldrh	r3, [r2, #0]
     a02:	1b1c      	subs	r4, r3, r4
     a04:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     a06:	2000      	movs	r0, #0
     a08:	e7f8      	b.n	9fc <sd_mmc_start_write_blocks+0x14>
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	000010e1 	.word	0x000010e1
     a10:	200000b8 	.word	0x200000b8

00000a14 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     a14:	b510      	push	{r4, lr}
     a16:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     a18:	4b0e      	ldr	r3, [pc, #56]	; (a54 <sd_mmc_wait_end_of_write_blocks+0x40>)
     a1a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     a1c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     a1e:	2800      	cmp	r0, #0
     a20:	d101      	bne.n	a26 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     a22:	0018      	movs	r0, r3
     a24:	bd10      	pop	{r4, pc}
	if (abort) {
     a26:	2c00      	cmp	r4, #0
     a28:	d00a      	beq.n	a40 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     a2a:	2200      	movs	r2, #0
     a2c:	4b0a      	ldr	r3, [pc, #40]	; (a58 <sd_mmc_wait_end_of_write_blocks+0x44>)
     a2e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     a30:	4b0a      	ldr	r3, [pc, #40]	; (a5c <sd_mmc_wait_end_of_write_blocks+0x48>)
     a32:	881b      	ldrh	r3, [r3, #0]
     a34:	2b01      	cmp	r3, #1
     a36:	d009      	beq.n	a4c <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     a38:	4b09      	ldr	r3, [pc, #36]	; (a60 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     a3a:	4798      	blx	r3
	return SD_MMC_OK;
     a3c:	2300      	movs	r3, #0
     a3e:	e7f0      	b.n	a22 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     a40:	4b05      	ldr	r3, [pc, #20]	; (a58 <sd_mmc_wait_end_of_write_blocks+0x44>)
     a42:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     a44:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     a46:	2a00      	cmp	r2, #0
     a48:	d0f2      	beq.n	a30 <sd_mmc_wait_end_of_write_blocks+0x1c>
     a4a:	e7ea      	b.n	a22 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     a4c:	4b04      	ldr	r3, [pc, #16]	; (a60 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     a4e:	4798      	blx	r3
		return SD_MMC_OK;
     a50:	2300      	movs	r3, #0
     a52:	e7e6      	b.n	a22 <sd_mmc_wait_end_of_write_blocks+0xe>
     a54:	00001161 	.word	0x00001161
     a58:	200000b8 	.word	0x200000b8
     a5c:	200000ba 	.word	0x200000ba
     a60:	00000311 	.word	0x00000311

00000a64 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     a64:	b500      	push	{lr}
     a66:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
     a68:	466b      	mov	r3, sp
     a6a:	1dd9      	adds	r1, r3, #7
     a6c:	23ff      	movs	r3, #255	; 0xff
     a6e:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
     a70:	2201      	movs	r2, #1
     a72:	480b      	ldr	r0, [pc, #44]	; (aa0 <sd_mmc_spi_start_write_block+0x3c>)
     a74:	4b0b      	ldr	r3, [pc, #44]	; (aa4 <sd_mmc_spi_start_write_block+0x40>)
     a76:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
     a78:	4b0b      	ldr	r3, [pc, #44]	; (aa8 <sd_mmc_spi_start_write_block+0x44>)
     a7a:	881b      	ldrh	r3, [r3, #0]
     a7c:	2b01      	cmp	r3, #1
     a7e:	d00a      	beq.n	a96 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
     a80:	22fc      	movs	r2, #252	; 0xfc
     a82:	466b      	mov	r3, sp
     a84:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
     a86:	2201      	movs	r2, #1
     a88:	466b      	mov	r3, sp
     a8a:	1d99      	adds	r1, r3, #6
     a8c:	4804      	ldr	r0, [pc, #16]	; (aa0 <sd_mmc_spi_start_write_block+0x3c>)
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <sd_mmc_spi_start_write_block+0x40>)
     a90:	4798      	blx	r3
}
     a92:	b003      	add	sp, #12
     a94:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
     a96:	22fe      	movs	r2, #254	; 0xfe
     a98:	466b      	mov	r3, sp
     a9a:	719a      	strb	r2, [r3, #6]
     a9c:	e7f3      	b.n	a86 <sd_mmc_spi_start_write_block+0x22>
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	200000c0 	.word	0x200000c0
     aa4:	00001af1 	.word	0x00001af1
     aa8:	20000104 	.word	0x20000104

00000aac <sd_mmc_spi_wait_busy>:
{
     aac:	b5f0      	push	{r4, r5, r6, r7, lr}
     aae:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     ab0:	466b      	mov	r3, sp
     ab2:	1ddc      	adds	r4, r3, #7
     ab4:	23ff      	movs	r3, #255	; 0xff
     ab6:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     ab8:	4e12      	ldr	r6, [pc, #72]	; (b04 <sd_mmc_spi_wait_busy+0x58>)
     aba:	2201      	movs	r2, #1
     abc:	0021      	movs	r1, r4
     abe:	0030      	movs	r0, r6
     ac0:	4d11      	ldr	r5, [pc, #68]	; (b08 <sd_mmc_spi_wait_busy+0x5c>)
     ac2:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     ac4:	23ff      	movs	r3, #255	; 0xff
     ac6:	2201      	movs	r2, #1
     ac8:	0021      	movs	r1, r4
     aca:	0030      	movs	r0, r6
     acc:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     ace:	23ff      	movs	r3, #255	; 0xff
     ad0:	2201      	movs	r2, #1
     ad2:	0021      	movs	r1, r4
     ad4:	0030      	movs	r0, r6
     ad6:	47a8      	blx	r5
     ad8:	4c0c      	ldr	r4, [pc, #48]	; (b0c <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
     ada:	466b      	mov	r3, sp
     adc:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     ade:	4e09      	ldr	r6, [pc, #36]	; (b04 <sd_mmc_spi_wait_busy+0x58>)
     ae0:	4f09      	ldr	r7, [pc, #36]	; (b08 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     ae2:	782b      	ldrb	r3, [r5, #0]
     ae4:	2bff      	cmp	r3, #255	; 0xff
     ae6:	d009      	beq.n	afc <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     ae8:	23ff      	movs	r3, #255	; 0xff
     aea:	2201      	movs	r2, #1
     aec:	0029      	movs	r1, r5
     aee:	0030      	movs	r0, r6
     af0:	47b8      	blx	r7
     af2:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     af4:	2c00      	cmp	r4, #0
     af6:	d1f4      	bne.n	ae2 <sd_mmc_spi_wait_busy+0x36>
			return false;
     af8:	2000      	movs	r0, #0
     afa:	e000      	b.n	afe <sd_mmc_spi_wait_busy+0x52>
	return true;
     afc:	2001      	movs	r0, #1
}
     afe:	b003      	add	sp, #12
     b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	200000c0 	.word	0x200000c0
     b08:	00001929 	.word	0x00001929
     b0c:	00030d40 	.word	0x00030d40

00000b10 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
     b10:	b570      	push	{r4, r5, r6, lr}
     b12:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
     b14:	4b14      	ldr	r3, [pc, #80]	; (b68 <sd_mmc_spi_stop_multiwrite_block+0x58>)
     b16:	881c      	ldrh	r4, [r3, #0]
     b18:	2c01      	cmp	r4, #1
     b1a:	d023      	beq.n	b64 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
     b1c:	4b13      	ldr	r3, [pc, #76]	; (b6c <sd_mmc_spi_stop_multiwrite_block+0x5c>)
     b1e:	8819      	ldrh	r1, [r3, #0]
     b20:	4b13      	ldr	r3, [pc, #76]	; (b70 <sd_mmc_spi_stop_multiwrite_block+0x60>)
     b22:	6818      	ldr	r0, [r3, #0]
     b24:	4b13      	ldr	r3, [pc, #76]	; (b74 <sd_mmc_spi_stop_multiwrite_block+0x64>)
     b26:	4798      	blx	r3
		return true; // It is not the End of multi write
     b28:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
     b2a:	4284      	cmp	r4, r0
     b2c:	d902      	bls.n	b34 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
     b2e:	0018      	movs	r0, r3
     b30:	b002      	add	sp, #8
     b32:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
     b34:	466b      	mov	r3, sp
     b36:	1ddc      	adds	r4, r3, #7
     b38:	23ff      	movs	r3, #255	; 0xff
     b3a:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     b3c:	4e0e      	ldr	r6, [pc, #56]	; (b78 <sd_mmc_spi_stop_multiwrite_block+0x68>)
     b3e:	2201      	movs	r2, #1
     b40:	0021      	movs	r1, r4
     b42:	0030      	movs	r0, r6
     b44:	4d0d      	ldr	r5, [pc, #52]	; (b7c <sd_mmc_spi_stop_multiwrite_block+0x6c>)
     b46:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
     b48:	23fd      	movs	r3, #253	; 0xfd
     b4a:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     b4c:	2201      	movs	r2, #1
     b4e:	0021      	movs	r1, r4
     b50:	0030      	movs	r0, r6
     b52:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
     b54:	4b0a      	ldr	r3, [pc, #40]	; (b80 <sd_mmc_spi_stop_multiwrite_block+0x70>)
     b56:	4798      	blx	r3
     b58:	1e03      	subs	r3, r0, #0
     b5a:	d1e8      	bne.n	b2e <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
     b5c:	2105      	movs	r1, #5
     b5e:	4a09      	ldr	r2, [pc, #36]	; (b84 <sd_mmc_spi_stop_multiwrite_block+0x74>)
     b60:	7011      	strb	r1, [r2, #0]
		return false;
     b62:	e7e4      	b.n	b2e <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
     b64:	2301      	movs	r3, #1
     b66:	e7e2      	b.n	b2e <sd_mmc_spi_stop_multiwrite_block+0x1e>
     b68:	20000104 	.word	0x20000104
     b6c:	200000fc 	.word	0x200000fc
     b70:	2000010c 	.word	0x2000010c
     b74:	000031cd 	.word	0x000031cd
     b78:	200000c0 	.word	0x200000c0
     b7c:	00001af1 	.word	0x00001af1
     b80:	00000aad 	.word	0x00000aad
     b84:	20000103 	.word	0x20000103

00000b88 <sd_mmc_spi_start_read_block>:
{
     b88:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8a:	b083      	sub	sp, #12
	token = 0;
     b8c:	2200      	movs	r2, #0
     b8e:	466b      	mov	r3, sp
     b90:	71da      	strb	r2, [r3, #7]
     b92:	4c14      	ldr	r4, [pc, #80]	; (be4 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
     b94:	466b      	mov	r3, sp
     b96:	1ddd      	adds	r5, r3, #7
     b98:	4e13      	ldr	r6, [pc, #76]	; (be8 <sd_mmc_spi_start_read_block+0x60>)
     b9a:	4f14      	ldr	r7, [pc, #80]	; (bec <sd_mmc_spi_start_read_block+0x64>)
     b9c:	23ff      	movs	r3, #255	; 0xff
     b9e:	2201      	movs	r2, #1
     ba0:	0029      	movs	r1, r5
     ba2:	0030      	movs	r0, r6
     ba4:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
     ba6:	782b      	ldrb	r3, [r5, #0]
     ba8:	220f      	movs	r2, #15
     baa:	0019      	movs	r1, r3
     bac:	4391      	bics	r1, r2
     bae:	1e0a      	subs	r2, r1, #0
     bb0:	d009      	beq.n	bc6 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
     bb2:	2bfe      	cmp	r3, #254	; 0xfe
     bb4:	d013      	beq.n	bde <sd_mmc_spi_start_read_block+0x56>
     bb6:	3c01      	subs	r4, #1
		if (i-- == 0) {
     bb8:	2c00      	cmp	r4, #0
     bba:	d1ef      	bne.n	b9c <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
     bbc:	2204      	movs	r2, #4
     bbe:	4b0c      	ldr	r3, [pc, #48]	; (bf0 <sd_mmc_spi_start_read_block+0x68>)
     bc0:	701a      	strb	r2, [r3, #0]
			return false;
     bc2:	2000      	movs	r0, #0
     bc4:	e00c      	b.n	be0 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
     bc6:	075b      	lsls	r3, r3, #29
     bc8:	d004      	beq.n	bd4 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
     bca:	3207      	adds	r2, #7
     bcc:	4b08      	ldr	r3, [pc, #32]	; (bf0 <sd_mmc_spi_start_read_block+0x68>)
     bce:	701a      	strb	r2, [r3, #0]
			return false;
     bd0:	2000      	movs	r0, #0
     bd2:	e005      	b.n	be0 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
     bd4:	220b      	movs	r2, #11
     bd6:	4b06      	ldr	r3, [pc, #24]	; (bf0 <sd_mmc_spi_start_read_block+0x68>)
     bd8:	701a      	strb	r2, [r3, #0]
			return false;
     bda:	2000      	movs	r0, #0
     bdc:	e000      	b.n	be0 <sd_mmc_spi_start_read_block+0x58>
	return true;
     bde:	2001      	movs	r0, #1
}
     be0:	b003      	add	sp, #12
     be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     be4:	0007a120 	.word	0x0007a120
     be8:	200000c0 	.word	0x200000c0
     bec:	00001929 	.word	0x00001929
     bf0:	20000103 	.word	0x20000103

00000bf4 <sd_mmc_spi_stop_write_block>:
{
     bf4:	b530      	push	{r4, r5, lr}
     bf6:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
     bf8:	a901      	add	r1, sp, #4
     bfa:	2301      	movs	r3, #1
     bfc:	425b      	negs	r3, r3
     bfe:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
     c00:	4d14      	ldr	r5, [pc, #80]	; (c54 <sd_mmc_spi_stop_write_block+0x60>)
     c02:	2202      	movs	r2, #2
     c04:	0028      	movs	r0, r5
     c06:	4b14      	ldr	r3, [pc, #80]	; (c58 <sd_mmc_spi_stop_write_block+0x64>)
     c08:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
     c0a:	466b      	mov	r3, sp
     c0c:	1ddc      	adds	r4, r3, #7
     c0e:	23ff      	movs	r3, #255	; 0xff
     c10:	2201      	movs	r2, #1
     c12:	0021      	movs	r1, r4
     c14:	0028      	movs	r0, r5
     c16:	4d11      	ldr	r5, [pc, #68]	; (c5c <sd_mmc_spi_stop_write_block+0x68>)
     c18:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
     c1a:	7822      	ldrb	r2, [r4, #0]
     c1c:	2311      	movs	r3, #17
     c1e:	4013      	ands	r3, r2
     c20:	2b01      	cmp	r3, #1
     c22:	d005      	beq.n	c30 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     c24:	2201      	movs	r2, #1
     c26:	4b0e      	ldr	r3, [pc, #56]	; (c60 <sd_mmc_spi_stop_write_block+0x6c>)
     c28:	701a      	strb	r2, [r3, #0]
		return false;
     c2a:	2000      	movs	r0, #0
}
     c2c:	b003      	add	sp, #12
     c2e:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
     c30:	231e      	movs	r3, #30
     c32:	401a      	ands	r2, r3
     c34:	2a04      	cmp	r2, #4
     c36:	d00b      	beq.n	c50 <sd_mmc_spi_stop_write_block+0x5c>
     c38:	2a0a      	cmp	r2, #10
     c3a:	d104      	bne.n	c46 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
     c3c:	3a02      	subs	r2, #2
     c3e:	4b08      	ldr	r3, [pc, #32]	; (c60 <sd_mmc_spi_stop_write_block+0x6c>)
     c40:	701a      	strb	r2, [r3, #0]
		return false;
     c42:	2000      	movs	r0, #0
     c44:	e7f2      	b.n	c2c <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
     c46:	220a      	movs	r2, #10
     c48:	4b05      	ldr	r3, [pc, #20]	; (c60 <sd_mmc_spi_stop_write_block+0x6c>)
     c4a:	701a      	strb	r2, [r3, #0]
		return false;
     c4c:	2000      	movs	r0, #0
     c4e:	e7ed      	b.n	c2c <sd_mmc_spi_stop_write_block+0x38>
	return true;
     c50:	2001      	movs	r0, #1
     c52:	e7eb      	b.n	c2c <sd_mmc_spi_stop_write_block+0x38>
     c54:	200000c0 	.word	0x200000c0
     c58:	00001af1 	.word	0x00001af1
     c5c:	00001929 	.word	0x00001929
     c60:	20000103 	.word	0x20000103

00000c64 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
     c64:	b570      	push	{r4, r5, r6, lr}
     c66:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     c68:	2500      	movs	r5, #0
     c6a:	4b30      	ldr	r3, [pc, #192]	; (d2c <sd_mmc_spi_init+0xc8>)
     c6c:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
     c6e:	a90f      	add	r1, sp, #60	; 0x3c
     c70:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     c72:	2601      	movs	r6, #1
     c74:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
     c76:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
     c78:	2025      	movs	r0, #37	; 0x25
     c7a:	4b2d      	ldr	r3, [pc, #180]	; (d30 <sd_mmc_spi_init+0xcc>)
     c7c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     c7e:	ac01      	add	r4, sp, #4
     c80:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     c82:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     c84:	9503      	str	r5, [sp, #12]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     c86:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     c88:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     c8a:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     c8c:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     c8e:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     c90:	2324      	movs	r3, #36	; 0x24
     c92:	54e5      	strb	r5, [r4, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     c94:	220c      	movs	r2, #12
     c96:	2100      	movs	r1, #0
     c98:	a807      	add	r0, sp, #28
     c9a:	4b26      	ldr	r3, [pc, #152]	; (d34 <sd_mmc_spi_init+0xd0>)
     c9c:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
     c9e:	2380      	movs	r3, #128	; 0x80
     ca0:	025b      	lsls	r3, r3, #9
     ca2:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
     ca4:	4b24      	ldr	r3, [pc, #144]	; (d38 <sd_mmc_spi_init+0xd4>)
     ca6:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
     ca8:	4b24      	ldr	r3, [pc, #144]	; (d3c <sd_mmc_spi_init+0xd8>)
     caa:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
     cac:	4b24      	ldr	r3, [pc, #144]	; (d40 <sd_mmc_spi_init+0xdc>)
     cae:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
     cb0:	4b24      	ldr	r3, [pc, #144]	; (d44 <sd_mmc_spi_init+0xe0>)
     cb2:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
     cb4:	4b24      	ldr	r3, [pc, #144]	; (d48 <sd_mmc_spi_init+0xe4>)
     cb6:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
     cb8:	4d24      	ldr	r5, [pc, #144]	; (d4c <sd_mmc_spi_init+0xe8>)
     cba:	0022      	movs	r2, r4
     cbc:	4924      	ldr	r1, [pc, #144]	; (d50 <sd_mmc_spi_init+0xec>)
     cbe:	0028      	movs	r0, r5
     cc0:	4b24      	ldr	r3, [pc, #144]	; (d54 <sd_mmc_spi_init+0xf0>)
     cc2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cc4:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     cc6:	0020      	movs	r0, r4
     cc8:	4b23      	ldr	r3, [pc, #140]	; (d58 <sd_mmc_spi_init+0xf4>)
     cca:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ccc:	231f      	movs	r3, #31
     cce:	4018      	ands	r0, r3
     cd0:	4086      	lsls	r6, r0
     cd2:	4b22      	ldr	r3, [pc, #136]	; (d5c <sd_mmc_spi_init+0xf8>)
     cd4:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     cd6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     cd8:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     cda:	2b00      	cmp	r3, #0
     cdc:	d1fc      	bne.n	cd8 <sd_mmc_spi_init+0x74>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     cde:	6823      	ldr	r3, [r4, #0]
     ce0:	2202      	movs	r2, #2
     ce2:	4313      	orrs	r3, r2
     ce4:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     ce6:	4a1e      	ldr	r2, [pc, #120]	; (d60 <sd_mmc_spi_init+0xfc>)
     ce8:	2300      	movs	r3, #0
     cea:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
     cec:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
     cee:	491d      	ldr	r1, [pc, #116]	; (d64 <sd_mmc_spi_init+0x100>)
     cf0:	7808      	ldrb	r0, [r1, #0]
     cf2:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
     cf4:	4c1c      	ldr	r4, [pc, #112]	; (d68 <sd_mmc_spi_init+0x104>)
     cf6:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
     cf8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     cfa:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     cfc:	2201      	movs	r2, #1
     cfe:	4669      	mov	r1, sp
     d00:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     d02:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     d04:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     d06:	4b0a      	ldr	r3, [pc, #40]	; (d30 <sd_mmc_spi_init+0xcc>)
     d08:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     d0a:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
     d0c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     d0e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     d10:	2900      	cmp	r1, #0
     d12:	d104      	bne.n	d1e <sd_mmc_spi_init+0xba>
		return &(ports[port_index]->Group[group_index]);
     d14:	0953      	lsrs	r3, r2, #5
     d16:	01db      	lsls	r3, r3, #7
     d18:	4914      	ldr	r1, [pc, #80]	; (d6c <sd_mmc_spi_init+0x108>)
     d1a:	468c      	mov	ip, r1
     d1c:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d1e:	211f      	movs	r1, #31
     d20:	4011      	ands	r1, r2
     d22:	2201      	movs	r2, #1
     d24:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d26:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
     d28:	b010      	add	sp, #64	; 0x40
     d2a:	bd70      	pop	{r4, r5, r6, pc}
     d2c:	20000103 	.word	0x20000103
     d30:	00001231 	.word	0x00001231
     d34:	00003595 	.word	0x00003595
     d38:	00040003 	.word	0x00040003
     d3c:	00050003 	.word	0x00050003
     d40:	00060003 	.word	0x00060003
     d44:	00070003 	.word	0x00070003
     d48:	00061a80 	.word	0x00061a80
     d4c:	200000c0 	.word	0x200000c0
     d50:	42000800 	.word	0x42000800
     d54:	00001751 	.word	0x00001751
     d58:	00001609 	.word	0x00001609
     d5c:	e000e100 	.word	0xe000e100
     d60:	20000110 	.word	0x20000110
     d64:	20000030 	.word	0x20000030
     d68:	20000100 	.word	0x20000100
     d6c:	41004400 	.word	0x41004400

00000d70 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
     d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d72:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     d74:	2200      	movs	r2, #0
     d76:	4b0d      	ldr	r3, [pc, #52]	; (dac <sd_mmc_spi_select_device+0x3c>)
     d78:	701a      	strb	r2, [r3, #0]
     d7a:	000c      	movs	r4, r1
     d7c:	4b0c      	ldr	r3, [pc, #48]	; (db0 <sd_mmc_spi_select_device+0x40>)
     d7e:	4299      	cmp	r1, r3
     d80:	d900      	bls.n	d84 <sd_mmc_spi_select_device+0x14>
     d82:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     d84:	4d0b      	ldr	r5, [pc, #44]	; (db4 <sd_mmc_spi_select_device+0x44>)
     d86:	4e0c      	ldr	r6, [pc, #48]	; (db8 <sd_mmc_spi_select_device+0x48>)
     d88:	e001      	b.n	d8e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
     d8a:	08e3      	lsrs	r3, r4, #3
     d8c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     d8e:	0021      	movs	r1, r4
     d90:	0028      	movs	r0, r5
     d92:	47b0      	blx	r6
     d94:	2817      	cmp	r0, #23
     d96:	d0f8      	beq.n	d8a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
     d98:	0079      	lsls	r1, r7, #1
     d9a:	19cf      	adds	r7, r1, r7
     d9c:	4907      	ldr	r1, [pc, #28]	; (dbc <sd_mmc_spi_select_device+0x4c>)
     d9e:	19c9      	adds	r1, r1, r7
     da0:	2201      	movs	r2, #1
     da2:	4804      	ldr	r0, [pc, #16]	; (db4 <sd_mmc_spi_select_device+0x44>)
     da4:	4b06      	ldr	r3, [pc, #24]	; (dc0 <sd_mmc_spi_select_device+0x50>)
     da6:	4798      	blx	r3
}
     da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	20000103 	.word	0x20000103
     db0:	00989680 	.word	0x00989680
     db4:	200000c0 	.word	0x200000c0
     db8:	00001699 	.word	0x00001699
     dbc:	20000100 	.word	0x20000100
     dc0:	000019fd 	.word	0x000019fd

00000dc4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
     dc4:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     dc6:	2200      	movs	r2, #0
     dc8:	4b04      	ldr	r3, [pc, #16]	; (ddc <sd_mmc_spi_deselect_device+0x18>)
     dca:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
     dcc:	0041      	lsls	r1, r0, #1
     dce:	1808      	adds	r0, r1, r0
     dd0:	4903      	ldr	r1, [pc, #12]	; (de0 <sd_mmc_spi_deselect_device+0x1c>)
     dd2:	1809      	adds	r1, r1, r0
     dd4:	4803      	ldr	r0, [pc, #12]	; (de4 <sd_mmc_spi_deselect_device+0x20>)
     dd6:	4b04      	ldr	r3, [pc, #16]	; (de8 <sd_mmc_spi_deselect_device+0x24>)
     dd8:	4798      	blx	r3
}
     dda:	bd10      	pop	{r4, pc}
     ddc:	20000103 	.word	0x20000103
     de0:	20000100 	.word	0x20000100
     de4:	200000c0 	.word	0x200000c0
     de8:	000019fd 	.word	0x000019fd

00000dec <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
     dec:	b570      	push	{r4, r5, r6, lr}
     dee:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
     df0:	22ff      	movs	r2, #255	; 0xff
     df2:	466b      	mov	r3, sp
     df4:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     df6:	2200      	movs	r2, #0
     df8:	4b07      	ldr	r3, [pc, #28]	; (e18 <sd_mmc_spi_send_clock+0x2c>)
     dfa:	701a      	strb	r2, [r3, #0]
     dfc:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
     dfe:	4e07      	ldr	r6, [pc, #28]	; (e1c <sd_mmc_spi_send_clock+0x30>)
     e00:	4d07      	ldr	r5, [pc, #28]	; (e20 <sd_mmc_spi_send_clock+0x34>)
     e02:	2201      	movs	r2, #1
     e04:	466b      	mov	r3, sp
     e06:	1dd9      	adds	r1, r3, #7
     e08:	0030      	movs	r0, r6
     e0a:	47a8      	blx	r5
     e0c:	3c01      	subs	r4, #1
     e0e:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
     e10:	2c00      	cmp	r4, #0
     e12:	d1f6      	bne.n	e02 <sd_mmc_spi_send_clock+0x16>
	}
}
     e14:	b002      	add	sp, #8
     e16:	bd70      	pop	{r4, r5, r6, pc}
     e18:	20000103 	.word	0x20000103
     e1c:	200000c0 	.word	0x200000c0
     e20:	00001af1 	.word	0x00001af1

00000e24 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
     e24:	b5f0      	push	{r4, r5, r6, r7, lr}
     e26:	46c6      	mov	lr, r8
     e28:	b500      	push	{lr}
     e2a:	b086      	sub	sp, #24
     e2c:	4680      	mov	r8, r0
     e2e:	9200      	str	r2, [sp, #0]
     e30:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
     e32:	22ff      	movs	r2, #255	; 0xff
     e34:	230f      	movs	r3, #15
     e36:	a802      	add	r0, sp, #8
     e38:	4684      	mov	ip, r0
     e3a:	4463      	add	r3, ip
     e3c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e3e:	2200      	movs	r2, #0
     e40:	4b53      	ldr	r3, [pc, #332]	; (f90 <sd_mmc_spi_adtc_start+0x16c>)
     e42:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
     e44:	ab04      	add	r3, sp, #16
     e46:	323f      	adds	r2, #63	; 0x3f
     e48:	4640      	mov	r0, r8
     e4a:	4002      	ands	r2, r0
     e4c:	2040      	movs	r0, #64	; 0x40
     e4e:	4302      	orrs	r2, r0
     e50:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
     e52:	0e0a      	lsrs	r2, r1, #24
     e54:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
     e56:	0c0a      	lsrs	r2, r1, #16
     e58:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
     e5a:	0a0a      	lsrs	r2, r1, #8
     e5c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
     e5e:	7119      	strb	r1, [r3, #4]
     e60:	2700      	movs	r7, #0
	crc = 0;
     e62:	2300      	movs	r3, #0
		value = *buf++;
     e64:	a904      	add	r1, sp, #16
     e66:	2208      	movs	r2, #8
				crc ^= 0x09;
     e68:	2409      	movs	r4, #9
     e6a:	e011      	b.n	e90 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
     e6c:	0076      	lsls	r6, r6, #1
     e6e:	b2f6      	uxtb	r6, r6
     e70:	3801      	subs	r0, #1
     e72:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
     e74:	2800      	cmp	r0, #0
     e76:	d008      	beq.n	e8a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
     e78:	005b      	lsls	r3, r3, #1
     e7a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
     e7c:	001d      	movs	r5, r3
     e7e:	4075      	eors	r5, r6
     e80:	062d      	lsls	r5, r5, #24
     e82:	d5f3      	bpl.n	e6c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
     e84:	4063      	eors	r3, r4
     e86:	b2db      	uxtb	r3, r3
     e88:	e7f0      	b.n	e6c <sd_mmc_spi_adtc_start+0x48>
     e8a:	3701      	adds	r7, #1
	while (size--) {
     e8c:	2f05      	cmp	r7, #5
     e8e:	d002      	beq.n	e96 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
     e90:	5c7e      	ldrb	r6, [r7, r1]
     e92:	0010      	movs	r0, r2
     e94:	e7f0      	b.n	e78 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
     e96:	005b      	lsls	r3, r3, #1
     e98:	2201      	movs	r2, #1
     e9a:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
     e9c:	ac04      	add	r4, sp, #16
     e9e:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
     ea0:	4e3c      	ldr	r6, [pc, #240]	; (f94 <sd_mmc_spi_adtc_start+0x170>)
     ea2:	2201      	movs	r2, #1
     ea4:	210f      	movs	r1, #15
     ea6:	ab02      	add	r3, sp, #8
     ea8:	469c      	mov	ip, r3
     eaa:	4461      	add	r1, ip
     eac:	0030      	movs	r0, r6
     eae:	4f3a      	ldr	r7, [pc, #232]	; (f98 <sd_mmc_spi_adtc_start+0x174>)
     eb0:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
     eb2:	2206      	movs	r2, #6
     eb4:	0021      	movs	r1, r4
     eb6:	0030      	movs	r0, r6
     eb8:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
     eba:	ab02      	add	r3, sp, #8
     ebc:	1dd9      	adds	r1, r3, #7
     ebe:	23ff      	movs	r3, #255	; 0xff
     ec0:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     ec2:	2201      	movs	r2, #1
     ec4:	0030      	movs	r0, r6
     ec6:	4e35      	ldr	r6, [pc, #212]	; (f9c <sd_mmc_spi_adtc_start+0x178>)
     ec8:	47b0      	blx	r6
     eca:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     ecc:	ab02      	add	r3, sp, #8
     ece:	1dde      	adds	r6, r3, #7
     ed0:	4f30      	ldr	r7, [pc, #192]	; (f94 <sd_mmc_spi_adtc_start+0x170>)
     ed2:	4d32      	ldr	r5, [pc, #200]	; (f9c <sd_mmc_spi_adtc_start+0x178>)
     ed4:	23ff      	movs	r3, #255	; 0xff
     ed6:	2201      	movs	r2, #1
     ed8:	0031      	movs	r1, r6
     eda:	0038      	movs	r0, r7
     edc:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
     ede:	7833      	ldrb	r3, [r6, #0]
     ee0:	b25a      	sxtb	r2, r3
     ee2:	2a00      	cmp	r2, #0
     ee4:	da0b      	bge.n	efe <sd_mmc_spi_adtc_start+0xda>
     ee6:	3c01      	subs	r4, #1
     ee8:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
     eea:	2c00      	cmp	r4, #0
     eec:	d1f2      	bne.n	ed4 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
     eee:	2202      	movs	r2, #2
     ef0:	4b27      	ldr	r3, [pc, #156]	; (f90 <sd_mmc_spi_adtc_start+0x16c>)
     ef2:	701a      	strb	r2, [r3, #0]
			return false;
     ef4:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
     ef6:	b006      	add	sp, #24
     ef8:	bc04      	pop	{r2}
     efa:	4690      	mov	r8, r2
     efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
     efe:	4a28      	ldr	r2, [pc, #160]	; (fa0 <sd_mmc_spi_adtc_start+0x17c>)
     f00:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
     f02:	071a      	lsls	r2, r3, #28
     f04:	d41a      	bmi.n	f3c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
     f06:	075a      	lsls	r2, r3, #29
     f08:	d41d      	bmi.n	f46 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
     f0a:	2201      	movs	r2, #1
     f0c:	4393      	bics	r3, r2
     f0e:	d11f      	bne.n	f50 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
     f10:	4643      	mov	r3, r8
     f12:	049b      	lsls	r3, r3, #18
     f14:	d420      	bmi.n	f58 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
     f16:	4643      	mov	r3, r8
     f18:	059b      	lsls	r3, r3, #22
     f1a:	d425      	bmi.n	f68 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
     f1c:	4643      	mov	r3, r8
     f1e:	055b      	lsls	r3, r3, #21
     f20:	d42b      	bmi.n	f7a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
     f22:	4b20      	ldr	r3, [pc, #128]	; (fa4 <sd_mmc_spi_adtc_start+0x180>)
     f24:	466a      	mov	r2, sp
     f26:	8812      	ldrh	r2, [r2, #0]
     f28:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
     f2a:	4b1f      	ldr	r3, [pc, #124]	; (fa8 <sd_mmc_spi_adtc_start+0x184>)
     f2c:	466a      	mov	r2, sp
     f2e:	8892      	ldrh	r2, [r2, #4]
     f30:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
     f32:	2200      	movs	r2, #0
     f34:	4b1d      	ldr	r3, [pc, #116]	; (fac <sd_mmc_spi_adtc_start+0x188>)
     f36:	601a      	str	r2, [r3, #0]
	return true; // Command complete
     f38:	2001      	movs	r0, #1
     f3a:	e7dc      	b.n	ef6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
     f3c:	2206      	movs	r2, #6
     f3e:	4b14      	ldr	r3, [pc, #80]	; (f90 <sd_mmc_spi_adtc_start+0x16c>)
     f40:	701a      	strb	r2, [r3, #0]
		return false;
     f42:	2000      	movs	r0, #0
     f44:	e7d7      	b.n	ef6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
     f46:	2209      	movs	r2, #9
     f48:	4b11      	ldr	r3, [pc, #68]	; (f90 <sd_mmc_spi_adtc_start+0x16c>)
     f4a:	701a      	strb	r2, [r3, #0]
		return false;
     f4c:	2000      	movs	r0, #0
     f4e:	e7d2      	b.n	ef6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     f50:	4b0f      	ldr	r3, [pc, #60]	; (f90 <sd_mmc_spi_adtc_start+0x16c>)
     f52:	701a      	strb	r2, [r3, #0]
		return false;
     f54:	2000      	movs	r0, #0
     f56:	e7ce      	b.n	ef6 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
     f58:	4b15      	ldr	r3, [pc, #84]	; (fb0 <sd_mmc_spi_adtc_start+0x18c>)
     f5a:	4798      	blx	r3
     f5c:	2800      	cmp	r0, #0
     f5e:	d1da      	bne.n	f16 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
     f60:	2203      	movs	r2, #3
     f62:	4b0b      	ldr	r3, [pc, #44]	; (f90 <sd_mmc_spi_adtc_start+0x16c>)
     f64:	701a      	strb	r2, [r3, #0]
			return false;
     f66:	e7c6      	b.n	ef6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
     f68:	490d      	ldr	r1, [pc, #52]	; (fa0 <sd_mmc_spi_adtc_start+0x17c>)
     f6a:	2300      	movs	r3, #0
     f6c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
     f6e:	33ff      	adds	r3, #255	; 0xff
     f70:	2201      	movs	r2, #1
     f72:	4808      	ldr	r0, [pc, #32]	; (f94 <sd_mmc_spi_adtc_start+0x170>)
     f74:	4e09      	ldr	r6, [pc, #36]	; (f9c <sd_mmc_spi_adtc_start+0x178>)
     f76:	47b0      	blx	r6
     f78:	e7d0      	b.n	f1c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
     f7a:	4e09      	ldr	r6, [pc, #36]	; (fa0 <sd_mmc_spi_adtc_start+0x17c>)
     f7c:	23ff      	movs	r3, #255	; 0xff
     f7e:	2204      	movs	r2, #4
     f80:	0031      	movs	r1, r6
     f82:	4804      	ldr	r0, [pc, #16]	; (f94 <sd_mmc_spi_adtc_start+0x170>)
     f84:	4f05      	ldr	r7, [pc, #20]	; (f9c <sd_mmc_spi_adtc_start+0x178>)
     f86:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
     f88:	6833      	ldr	r3, [r6, #0]
     f8a:	ba1b      	rev	r3, r3
     f8c:	6033      	str	r3, [r6, #0]
     f8e:	e7c8      	b.n	f22 <sd_mmc_spi_adtc_start+0xfe>
     f90:	20000103 	.word	0x20000103
     f94:	200000c0 	.word	0x200000c0
     f98:	00001af1 	.word	0x00001af1
     f9c:	00001929 	.word	0x00001929
     fa0:	20000108 	.word	0x20000108
     fa4:	200000fc 	.word	0x200000fc
     fa8:	20000104 	.word	0x20000104
     fac:	2000010c 	.word	0x2000010c
     fb0:	00000aad 	.word	0x00000aad

00000fb4 <sd_mmc_spi_send_cmd>:
{
     fb4:	b510      	push	{r4, lr}
     fb6:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
     fb8:	2300      	movs	r3, #0
     fba:	9300      	str	r3, [sp, #0]
     fbc:	2200      	movs	r2, #0
     fbe:	4c02      	ldr	r4, [pc, #8]	; (fc8 <sd_mmc_spi_send_cmd+0x14>)
     fc0:	47a0      	blx	r4
}
     fc2:	b002      	add	sp, #8
     fc4:	bd10      	pop	{r4, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	00000e25 	.word	0x00000e25

00000fcc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
     fcc:	4b01      	ldr	r3, [pc, #4]	; (fd4 <sd_mmc_spi_get_response+0x8>)
     fce:	6818      	ldr	r0, [r3, #0]
}
     fd0:	4770      	bx	lr
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	20000108 	.word	0x20000108

00000fd8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
     fd8:	b510      	push	{r4, lr}
     fda:	b084      	sub	sp, #16
     fdc:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     fde:	2200      	movs	r2, #0
     fe0:	4b14      	ldr	r3, [pc, #80]	; (1034 <sd_mmc_spi_read_word+0x5c>)
     fe2:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
     fe4:	4b14      	ldr	r3, [pc, #80]	; (1038 <sd_mmc_spi_read_word+0x60>)
     fe6:	8819      	ldrh	r1, [r3, #0]
     fe8:	4b14      	ldr	r3, [pc, #80]	; (103c <sd_mmc_spi_read_word+0x64>)
     fea:	6818      	ldr	r0, [r3, #0]
     fec:	4b14      	ldr	r3, [pc, #80]	; (1040 <sd_mmc_spi_read_word+0x68>)
     fee:	4798      	blx	r3
     ff0:	2900      	cmp	r1, #0
     ff2:	d103      	bne.n	ffc <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
     ff4:	4b13      	ldr	r3, [pc, #76]	; (1044 <sd_mmc_spi_read_word+0x6c>)
     ff6:	4798      	blx	r3
     ff8:	2800      	cmp	r0, #0
     ffa:	d010      	beq.n	101e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
     ffc:	23ff      	movs	r3, #255	; 0xff
     ffe:	2204      	movs	r2, #4
    1000:	a901      	add	r1, sp, #4
    1002:	4811      	ldr	r0, [pc, #68]	; (1048 <sd_mmc_spi_read_word+0x70>)
    1004:	4c11      	ldr	r4, [pc, #68]	; (104c <sd_mmc_spi_read_word+0x74>)
    1006:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    1008:	4b0c      	ldr	r3, [pc, #48]	; (103c <sd_mmc_spi_read_word+0x64>)
    100a:	681a      	ldr	r2, [r3, #0]
    100c:	1d10      	adds	r0, r2, #4
    100e:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1010:	4b09      	ldr	r3, [pc, #36]	; (1038 <sd_mmc_spi_read_word+0x60>)
    1012:	8819      	ldrh	r1, [r3, #0]
    1014:	4b0a      	ldr	r3, [pc, #40]	; (1040 <sd_mmc_spi_read_word+0x68>)
    1016:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1018:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    101a:	2900      	cmp	r1, #0
    101c:	d001      	beq.n	1022 <sd_mmc_spi_read_word+0x4a>
}
    101e:	b004      	add	sp, #16
    1020:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1022:	23ff      	movs	r3, #255	; 0xff
    1024:	2202      	movs	r2, #2
    1026:	a903      	add	r1, sp, #12
    1028:	4807      	ldr	r0, [pc, #28]	; (1048 <sd_mmc_spi_read_word+0x70>)
    102a:	4c08      	ldr	r4, [pc, #32]	; (104c <sd_mmc_spi_read_word+0x74>)
    102c:	47a0      	blx	r4
	return true;
    102e:	2001      	movs	r0, #1
    1030:	e7f5      	b.n	101e <sd_mmc_spi_read_word+0x46>
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	20000103 	.word	0x20000103
    1038:	200000fc 	.word	0x200000fc
    103c:	2000010c 	.word	0x2000010c
    1040:	000032d9 	.word	0x000032d9
    1044:	00000b89 	.word	0x00000b89
    1048:	200000c0 	.word	0x200000c0
    104c:	00001929 	.word	0x00001929

00001050 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    1050:	b5f0      	push	{r4, r5, r6, r7, lr}
    1052:	46de      	mov	lr, fp
    1054:	4657      	mov	r7, sl
    1056:	4646      	mov	r6, r8
    1058:	b5c0      	push	{r6, r7, lr}
    105a:	b082      	sub	sp, #8
    105c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    105e:	2200      	movs	r2, #0
    1060:	4b17      	ldr	r3, [pc, #92]	; (10c0 <sd_mmc_spi_start_read_blocks+0x70>)
    1062:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    1064:	1e4c      	subs	r4, r1, #1
    1066:	b2a4      	uxth	r4, r4
    1068:	2900      	cmp	r1, #0
    106a:	d026      	beq.n	10ba <sd_mmc_spi_start_read_blocks+0x6a>
    106c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    106e:	4b15      	ldr	r3, [pc, #84]	; (10c4 <sd_mmc_spi_start_read_blocks+0x74>)
    1070:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1072:	4f15      	ldr	r7, [pc, #84]	; (10c8 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    1074:	47d0      	blx	sl
    1076:	4680      	mov	r8, r0
    1078:	2800      	cmp	r0, #0
    107a:	d017      	beq.n	10ac <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    107c:	883a      	ldrh	r2, [r7, #0]
    107e:	465b      	mov	r3, fp
    1080:	1999      	adds	r1, r3, r6
    1082:	23ff      	movs	r3, #255	; 0xff
    1084:	4811      	ldr	r0, [pc, #68]	; (10cc <sd_mmc_spi_start_read_blocks+0x7c>)
    1086:	4d12      	ldr	r5, [pc, #72]	; (10d0 <sd_mmc_spi_start_read_blocks+0x80>)
    1088:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    108a:	883b      	ldrh	r3, [r7, #0]
    108c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    108e:	4a11      	ldr	r2, [pc, #68]	; (10d4 <sd_mmc_spi_start_read_blocks+0x84>)
    1090:	6811      	ldr	r1, [r2, #0]
    1092:	468c      	mov	ip, r1
    1094:	4463      	add	r3, ip
    1096:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1098:	23ff      	movs	r3, #255	; 0xff
    109a:	2202      	movs	r2, #2
    109c:	a901      	add	r1, sp, #4
    109e:	480b      	ldr	r0, [pc, #44]	; (10cc <sd_mmc_spi_start_read_blocks+0x7c>)
    10a0:	47a8      	blx	r5
	while (nb_block--) {
    10a2:	3c01      	subs	r4, #1
    10a4:	b2a4      	uxth	r4, r4
    10a6:	4b0c      	ldr	r3, [pc, #48]	; (10d8 <sd_mmc_spi_start_read_blocks+0x88>)
    10a8:	429c      	cmp	r4, r3
    10aa:	d1e3      	bne.n	1074 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    10ac:	4640      	mov	r0, r8
    10ae:	b002      	add	sp, #8
    10b0:	bc1c      	pop	{r2, r3, r4}
    10b2:	4690      	mov	r8, r2
    10b4:	469a      	mov	sl, r3
    10b6:	46a3      	mov	fp, r4
    10b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    10ba:	2301      	movs	r3, #1
    10bc:	4698      	mov	r8, r3
    10be:	e7f5      	b.n	10ac <sd_mmc_spi_start_read_blocks+0x5c>
    10c0:	20000103 	.word	0x20000103
    10c4:	00000b89 	.word	0x00000b89
    10c8:	200000fc 	.word	0x200000fc
    10cc:	200000c0 	.word	0x200000c0
    10d0:	00001929 	.word	0x00001929
    10d4:	2000010c 	.word	0x2000010c
    10d8:	0000ffff 	.word	0x0000ffff

000010dc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    10dc:	2001      	movs	r0, #1
    10de:	4770      	bx	lr

000010e0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    10e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10e2:	46c6      	mov	lr, r8
    10e4:	b500      	push	{lr}
    10e6:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    10e8:	2200      	movs	r2, #0
    10ea:	4b15      	ldr	r3, [pc, #84]	; (1140 <sd_mmc_spi_start_write_blocks+0x60>)
    10ec:	701a      	strb	r2, [r3, #0]
	pos = 0;
    10ee:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    10f0:	4f14      	ldr	r7, [pc, #80]	; (1144 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    10f2:	4e15      	ldr	r6, [pc, #84]	; (1148 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    10f4:	e000      	b.n	10f8 <sd_mmc_spi_start_write_blocks+0x18>
{
    10f6:	0021      	movs	r1, r4
	while (nb_block--) {
    10f8:	1e4c      	subs	r4, r1, #1
    10fa:	b2a4      	uxth	r4, r4
    10fc:	2900      	cmp	r1, #0
    10fe:	d01b      	beq.n	1138 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    1100:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1102:	8832      	ldrh	r2, [r6, #0]
    1104:	4643      	mov	r3, r8
    1106:	1959      	adds	r1, r3, r5
    1108:	4810      	ldr	r0, [pc, #64]	; (114c <sd_mmc_spi_start_write_blocks+0x6c>)
    110a:	4b11      	ldr	r3, [pc, #68]	; (1150 <sd_mmc_spi_start_write_blocks+0x70>)
    110c:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    110e:	8833      	ldrh	r3, [r6, #0]
    1110:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    1112:	4a10      	ldr	r2, [pc, #64]	; (1154 <sd_mmc_spi_start_write_blocks+0x74>)
    1114:	6811      	ldr	r1, [r2, #0]
    1116:	468c      	mov	ip, r1
    1118:	4463      	add	r3, ip
    111a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    111c:	4b0e      	ldr	r3, [pc, #56]	; (1158 <sd_mmc_spi_start_write_blocks+0x78>)
    111e:	4798      	blx	r3
    1120:	2800      	cmp	r0, #0
    1122:	d00a      	beq.n	113a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1124:	2c00      	cmp	r4, #0
    1126:	d0e6      	beq.n	10f6 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1128:	4b0c      	ldr	r3, [pc, #48]	; (115c <sd_mmc_spi_start_write_blocks+0x7c>)
    112a:	4798      	blx	r3
    112c:	2800      	cmp	r0, #0
    112e:	d1e2      	bne.n	10f6 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1130:	2205      	movs	r2, #5
    1132:	4b03      	ldr	r3, [pc, #12]	; (1140 <sd_mmc_spi_start_write_blocks+0x60>)
    1134:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1136:	e000      	b.n	113a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1138:	2001      	movs	r0, #1
}
    113a:	bc04      	pop	{r2}
    113c:	4690      	mov	r8, r2
    113e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1140:	20000103 	.word	0x20000103
    1144:	00000a65 	.word	0x00000a65
    1148:	200000fc 	.word	0x200000fc
    114c:	200000c0 	.word	0x200000c0
    1150:	00001af1 	.word	0x00001af1
    1154:	2000010c 	.word	0x2000010c
    1158:	00000bf5 	.word	0x00000bf5
    115c:	00000aad 	.word	0x00000aad

00001160 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    1160:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    1162:	4b05      	ldr	r3, [pc, #20]	; (1178 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    1164:	4798      	blx	r3
    1166:	2800      	cmp	r0, #0
    1168:	d103      	bne.n	1172 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    116a:	2205      	movs	r2, #5
    116c:	4b03      	ldr	r3, [pc, #12]	; (117c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    116e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    1170:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    1172:	4b03      	ldr	r3, [pc, #12]	; (1180 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    1174:	4798      	blx	r3
    1176:	e7fb      	b.n	1170 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    1178:	00000aad 	.word	0x00000aad
    117c:	20000103 	.word	0x20000103
    1180:	00000b11 	.word	0x00000b11

00001184 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    1184:	4770      	bx	lr
	...

00001188 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1188:	4b0c      	ldr	r3, [pc, #48]	; (11bc <cpu_irq_enter_critical+0x34>)
    118a:	681b      	ldr	r3, [r3, #0]
    118c:	2b00      	cmp	r3, #0
    118e:	d106      	bne.n	119e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1190:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1194:	2b00      	cmp	r3, #0
    1196:	d007      	beq.n	11a8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1198:	2200      	movs	r2, #0
    119a:	4b09      	ldr	r3, [pc, #36]	; (11c0 <cpu_irq_enter_critical+0x38>)
    119c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    119e:	4a07      	ldr	r2, [pc, #28]	; (11bc <cpu_irq_enter_critical+0x34>)
    11a0:	6813      	ldr	r3, [r2, #0]
    11a2:	3301      	adds	r3, #1
    11a4:	6013      	str	r3, [r2, #0]
}
    11a6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    11a8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    11aa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    11ae:	2200      	movs	r2, #0
    11b0:	4b04      	ldr	r3, [pc, #16]	; (11c4 <cpu_irq_enter_critical+0x3c>)
    11b2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    11b4:	3201      	adds	r2, #1
    11b6:	4b02      	ldr	r3, [pc, #8]	; (11c0 <cpu_irq_enter_critical+0x38>)
    11b8:	701a      	strb	r2, [r3, #0]
    11ba:	e7f0      	b.n	119e <cpu_irq_enter_critical+0x16>
    11bc:	20000114 	.word	0x20000114
    11c0:	20000118 	.word	0x20000118
    11c4:	20000031 	.word	0x20000031

000011c8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    11c8:	4b08      	ldr	r3, [pc, #32]	; (11ec <cpu_irq_leave_critical+0x24>)
    11ca:	681a      	ldr	r2, [r3, #0]
    11cc:	3a01      	subs	r2, #1
    11ce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	2b00      	cmp	r3, #0
    11d4:	d109      	bne.n	11ea <cpu_irq_leave_critical+0x22>
    11d6:	4b06      	ldr	r3, [pc, #24]	; (11f0 <cpu_irq_leave_critical+0x28>)
    11d8:	781b      	ldrb	r3, [r3, #0]
    11da:	2b00      	cmp	r3, #0
    11dc:	d005      	beq.n	11ea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    11de:	2201      	movs	r2, #1
    11e0:	4b04      	ldr	r3, [pc, #16]	; (11f4 <cpu_irq_leave_critical+0x2c>)
    11e2:	701a      	strb	r2, [r3, #0]
    11e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    11e8:	b662      	cpsie	i
	}
}
    11ea:	4770      	bx	lr
    11ec:	20000114 	.word	0x20000114
    11f0:	20000118 	.word	0x20000118
    11f4:	20000031 	.word	0x20000031

000011f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    11f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11fa:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    11fc:	ac01      	add	r4, sp, #4
    11fe:	2501      	movs	r5, #1
    1200:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1202:	2700      	movs	r7, #0
    1204:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1206:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1208:	0021      	movs	r1, r4
    120a:	203e      	movs	r0, #62	; 0x3e
    120c:	4e06      	ldr	r6, [pc, #24]	; (1228 <system_board_init+0x30>)
    120e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1210:	2280      	movs	r2, #128	; 0x80
    1212:	05d2      	lsls	r2, r2, #23
    1214:	4b05      	ldr	r3, [pc, #20]	; (122c <system_board_init+0x34>)
    1216:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1218:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    121a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    121c:	0021      	movs	r1, r4
    121e:	200f      	movs	r0, #15
    1220:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1222:	b003      	add	sp, #12
    1224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	00001231 	.word	0x00001231
    122c:	41004480 	.word	0x41004480

00001230 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1230:	b500      	push	{lr}
    1232:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1234:	ab01      	add	r3, sp, #4
    1236:	2280      	movs	r2, #128	; 0x80
    1238:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    123a:	780a      	ldrb	r2, [r1, #0]
    123c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    123e:	784a      	ldrb	r2, [r1, #1]
    1240:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1242:	788a      	ldrb	r2, [r1, #2]
    1244:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1246:	0019      	movs	r1, r3
    1248:	4b01      	ldr	r3, [pc, #4]	; (1250 <port_pin_set_config+0x20>)
    124a:	4798      	blx	r3
}
    124c:	b003      	add	sp, #12
    124e:	bd00      	pop	{pc}
    1250:	00002a31 	.word	0x00002a31

00001254 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1254:	b5f0      	push	{r4, r5, r6, r7, lr}
    1256:	46de      	mov	lr, fp
    1258:	4657      	mov	r7, sl
    125a:	464e      	mov	r6, r9
    125c:	4645      	mov	r5, r8
    125e:	b5e0      	push	{r5, r6, r7, lr}
    1260:	b087      	sub	sp, #28
    1262:	4680      	mov	r8, r0
    1264:	9104      	str	r1, [sp, #16]
    1266:	0016      	movs	r6, r2
    1268:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    126a:	2200      	movs	r2, #0
    126c:	2300      	movs	r3, #0
    126e:	2100      	movs	r1, #0
    1270:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1272:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1274:	2001      	movs	r0, #1
    1276:	0021      	movs	r1, r4
    1278:	9600      	str	r6, [sp, #0]
    127a:	9701      	str	r7, [sp, #4]
    127c:	465c      	mov	r4, fp
    127e:	9403      	str	r4, [sp, #12]
    1280:	4644      	mov	r4, r8
    1282:	9405      	str	r4, [sp, #20]
    1284:	e013      	b.n	12ae <long_division+0x5a>
    1286:	2420      	movs	r4, #32
    1288:	1a64      	subs	r4, r4, r1
    128a:	0005      	movs	r5, r0
    128c:	40e5      	lsrs	r5, r4
    128e:	46a8      	mov	r8, r5
    1290:	e014      	b.n	12bc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1292:	9c00      	ldr	r4, [sp, #0]
    1294:	9d01      	ldr	r5, [sp, #4]
    1296:	1b12      	subs	r2, r2, r4
    1298:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    129a:	465c      	mov	r4, fp
    129c:	464d      	mov	r5, r9
    129e:	432c      	orrs	r4, r5
    12a0:	46a3      	mov	fp, r4
    12a2:	9c03      	ldr	r4, [sp, #12]
    12a4:	4645      	mov	r5, r8
    12a6:	432c      	orrs	r4, r5
    12a8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    12aa:	3901      	subs	r1, #1
    12ac:	d325      	bcc.n	12fa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    12ae:	2420      	movs	r4, #32
    12b0:	4264      	negs	r4, r4
    12b2:	190c      	adds	r4, r1, r4
    12b4:	d4e7      	bmi.n	1286 <long_division+0x32>
    12b6:	0005      	movs	r5, r0
    12b8:	40a5      	lsls	r5, r4
    12ba:	46a8      	mov	r8, r5
    12bc:	0004      	movs	r4, r0
    12be:	408c      	lsls	r4, r1
    12c0:	46a1      	mov	r9, r4
		r = r << 1;
    12c2:	1892      	adds	r2, r2, r2
    12c4:	415b      	adcs	r3, r3
    12c6:	0014      	movs	r4, r2
    12c8:	001d      	movs	r5, r3
		if (n & bit_shift) {
    12ca:	9e05      	ldr	r6, [sp, #20]
    12cc:	464f      	mov	r7, r9
    12ce:	403e      	ands	r6, r7
    12d0:	46b4      	mov	ip, r6
    12d2:	9e04      	ldr	r6, [sp, #16]
    12d4:	4647      	mov	r7, r8
    12d6:	403e      	ands	r6, r7
    12d8:	46b2      	mov	sl, r6
    12da:	4666      	mov	r6, ip
    12dc:	4657      	mov	r7, sl
    12de:	433e      	orrs	r6, r7
    12e0:	d003      	beq.n	12ea <long_division+0x96>
			r |= 0x01;
    12e2:	0006      	movs	r6, r0
    12e4:	4326      	orrs	r6, r4
    12e6:	0032      	movs	r2, r6
    12e8:	002b      	movs	r3, r5
		if (r >= d) {
    12ea:	9c00      	ldr	r4, [sp, #0]
    12ec:	9d01      	ldr	r5, [sp, #4]
    12ee:	429d      	cmp	r5, r3
    12f0:	d8db      	bhi.n	12aa <long_division+0x56>
    12f2:	d1ce      	bne.n	1292 <long_division+0x3e>
    12f4:	4294      	cmp	r4, r2
    12f6:	d8d8      	bhi.n	12aa <long_division+0x56>
    12f8:	e7cb      	b.n	1292 <long_division+0x3e>
    12fa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    12fc:	4658      	mov	r0, fp
    12fe:	0019      	movs	r1, r3
    1300:	b007      	add	sp, #28
    1302:	bc3c      	pop	{r2, r3, r4, r5}
    1304:	4690      	mov	r8, r2
    1306:	4699      	mov	r9, r3
    1308:	46a2      	mov	sl, r4
    130a:	46ab      	mov	fp, r5
    130c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000130e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    130e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1310:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1312:	2340      	movs	r3, #64	; 0x40
    1314:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1316:	4281      	cmp	r1, r0
    1318:	d202      	bcs.n	1320 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    131a:	0018      	movs	r0, r3
    131c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    131e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1320:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1322:	1c63      	adds	r3, r4, #1
    1324:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1326:	4288      	cmp	r0, r1
    1328:	d9f9      	bls.n	131e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    132a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    132c:	2cff      	cmp	r4, #255	; 0xff
    132e:	d8f4      	bhi.n	131a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1330:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1332:	2300      	movs	r3, #0
    1334:	e7f1      	b.n	131a <_sercom_get_sync_baud_val+0xc>
	...

00001338 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1338:	b5f0      	push	{r4, r5, r6, r7, lr}
    133a:	b083      	sub	sp, #12
    133c:	000f      	movs	r7, r1
    133e:	0016      	movs	r6, r2
    1340:	aa08      	add	r2, sp, #32
    1342:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1344:	0004      	movs	r4, r0
    1346:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1348:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    134a:	42bc      	cmp	r4, r7
    134c:	d902      	bls.n	1354 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    134e:	0010      	movs	r0, r2
    1350:	b003      	add	sp, #12
    1352:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1354:	2b00      	cmp	r3, #0
    1356:	d114      	bne.n	1382 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1358:	0002      	movs	r2, r0
    135a:	0008      	movs	r0, r1
    135c:	2100      	movs	r1, #0
    135e:	4c19      	ldr	r4, [pc, #100]	; (13c4 <_sercom_get_async_baud_val+0x8c>)
    1360:	47a0      	blx	r4
    1362:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1364:	003a      	movs	r2, r7
    1366:	2300      	movs	r3, #0
    1368:	2000      	movs	r0, #0
    136a:	4c17      	ldr	r4, [pc, #92]	; (13c8 <_sercom_get_async_baud_val+0x90>)
    136c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    136e:	2200      	movs	r2, #0
    1370:	2301      	movs	r3, #1
    1372:	1a12      	subs	r2, r2, r0
    1374:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1376:	0c12      	lsrs	r2, r2, #16
    1378:	041b      	lsls	r3, r3, #16
    137a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    137c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    137e:	2200      	movs	r2, #0
    1380:	e7e5      	b.n	134e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1382:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1384:	2b01      	cmp	r3, #1
    1386:	d1f9      	bne.n	137c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1388:	000a      	movs	r2, r1
    138a:	2300      	movs	r3, #0
    138c:	2100      	movs	r1, #0
    138e:	4c0d      	ldr	r4, [pc, #52]	; (13c4 <_sercom_get_async_baud_val+0x8c>)
    1390:	47a0      	blx	r4
    1392:	0002      	movs	r2, r0
    1394:	000b      	movs	r3, r1
    1396:	9200      	str	r2, [sp, #0]
    1398:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    139a:	0038      	movs	r0, r7
    139c:	2100      	movs	r1, #0
    139e:	4c0a      	ldr	r4, [pc, #40]	; (13c8 <_sercom_get_async_baud_val+0x90>)
    13a0:	47a0      	blx	r4
    13a2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    13a4:	2380      	movs	r3, #128	; 0x80
    13a6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13a8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    13aa:	4298      	cmp	r0, r3
    13ac:	d8cf      	bhi.n	134e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    13ae:	0f79      	lsrs	r1, r7, #29
    13b0:	00f8      	lsls	r0, r7, #3
    13b2:	9a00      	ldr	r2, [sp, #0]
    13b4:	9b01      	ldr	r3, [sp, #4]
    13b6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    13b8:	00ea      	lsls	r2, r5, #3
    13ba:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    13bc:	b2d2      	uxtb	r2, r2
    13be:	0352      	lsls	r2, r2, #13
    13c0:	432a      	orrs	r2, r5
    13c2:	e7db      	b.n	137c <_sercom_get_async_baud_val+0x44>
    13c4:	00003325 	.word	0x00003325
    13c8:	00001255 	.word	0x00001255

000013cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    13cc:	b510      	push	{r4, lr}
    13ce:	b082      	sub	sp, #8
    13d0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    13d2:	4b0e      	ldr	r3, [pc, #56]	; (140c <sercom_set_gclk_generator+0x40>)
    13d4:	781b      	ldrb	r3, [r3, #0]
    13d6:	2b00      	cmp	r3, #0
    13d8:	d007      	beq.n	13ea <sercom_set_gclk_generator+0x1e>
    13da:	2900      	cmp	r1, #0
    13dc:	d105      	bne.n	13ea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    13de:	4b0b      	ldr	r3, [pc, #44]	; (140c <sercom_set_gclk_generator+0x40>)
    13e0:	785b      	ldrb	r3, [r3, #1]
    13e2:	4283      	cmp	r3, r0
    13e4:	d010      	beq.n	1408 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    13e6:	201d      	movs	r0, #29
    13e8:	e00c      	b.n	1404 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    13ea:	a901      	add	r1, sp, #4
    13ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    13ee:	2013      	movs	r0, #19
    13f0:	4b07      	ldr	r3, [pc, #28]	; (1410 <sercom_set_gclk_generator+0x44>)
    13f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    13f4:	2013      	movs	r0, #19
    13f6:	4b07      	ldr	r3, [pc, #28]	; (1414 <sercom_set_gclk_generator+0x48>)
    13f8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    13fa:	4b04      	ldr	r3, [pc, #16]	; (140c <sercom_set_gclk_generator+0x40>)
    13fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    13fe:	2201      	movs	r2, #1
    1400:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1402:	2000      	movs	r0, #0
}
    1404:	b002      	add	sp, #8
    1406:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1408:	2000      	movs	r0, #0
    140a:	e7fb      	b.n	1404 <sercom_set_gclk_generator+0x38>
    140c:	2000011c 	.word	0x2000011c
    1410:	00002939 	.word	0x00002939
    1414:	000028ad 	.word	0x000028ad

00001418 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1418:	4b40      	ldr	r3, [pc, #256]	; (151c <_sercom_get_default_pad+0x104>)
    141a:	4298      	cmp	r0, r3
    141c:	d031      	beq.n	1482 <_sercom_get_default_pad+0x6a>
    141e:	d90a      	bls.n	1436 <_sercom_get_default_pad+0x1e>
    1420:	4b3f      	ldr	r3, [pc, #252]	; (1520 <_sercom_get_default_pad+0x108>)
    1422:	4298      	cmp	r0, r3
    1424:	d04d      	beq.n	14c2 <_sercom_get_default_pad+0xaa>
    1426:	4b3f      	ldr	r3, [pc, #252]	; (1524 <_sercom_get_default_pad+0x10c>)
    1428:	4298      	cmp	r0, r3
    142a:	d05a      	beq.n	14e2 <_sercom_get_default_pad+0xca>
    142c:	4b3e      	ldr	r3, [pc, #248]	; (1528 <_sercom_get_default_pad+0x110>)
    142e:	4298      	cmp	r0, r3
    1430:	d037      	beq.n	14a2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1432:	2000      	movs	r0, #0
}
    1434:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1436:	4b3d      	ldr	r3, [pc, #244]	; (152c <_sercom_get_default_pad+0x114>)
    1438:	4298      	cmp	r0, r3
    143a:	d00c      	beq.n	1456 <_sercom_get_default_pad+0x3e>
    143c:	4b3c      	ldr	r3, [pc, #240]	; (1530 <_sercom_get_default_pad+0x118>)
    143e:	4298      	cmp	r0, r3
    1440:	d1f7      	bne.n	1432 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1442:	2901      	cmp	r1, #1
    1444:	d017      	beq.n	1476 <_sercom_get_default_pad+0x5e>
    1446:	2900      	cmp	r1, #0
    1448:	d05d      	beq.n	1506 <_sercom_get_default_pad+0xee>
    144a:	2902      	cmp	r1, #2
    144c:	d015      	beq.n	147a <_sercom_get_default_pad+0x62>
    144e:	2903      	cmp	r1, #3
    1450:	d015      	beq.n	147e <_sercom_get_default_pad+0x66>
	return 0;
    1452:	2000      	movs	r0, #0
    1454:	e7ee      	b.n	1434 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1456:	2901      	cmp	r1, #1
    1458:	d007      	beq.n	146a <_sercom_get_default_pad+0x52>
    145a:	2900      	cmp	r1, #0
    145c:	d051      	beq.n	1502 <_sercom_get_default_pad+0xea>
    145e:	2902      	cmp	r1, #2
    1460:	d005      	beq.n	146e <_sercom_get_default_pad+0x56>
    1462:	2903      	cmp	r1, #3
    1464:	d005      	beq.n	1472 <_sercom_get_default_pad+0x5a>
	return 0;
    1466:	2000      	movs	r0, #0
    1468:	e7e4      	b.n	1434 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    146a:	4832      	ldr	r0, [pc, #200]	; (1534 <_sercom_get_default_pad+0x11c>)
    146c:	e7e2      	b.n	1434 <_sercom_get_default_pad+0x1c>
    146e:	4832      	ldr	r0, [pc, #200]	; (1538 <_sercom_get_default_pad+0x120>)
    1470:	e7e0      	b.n	1434 <_sercom_get_default_pad+0x1c>
    1472:	4832      	ldr	r0, [pc, #200]	; (153c <_sercom_get_default_pad+0x124>)
    1474:	e7de      	b.n	1434 <_sercom_get_default_pad+0x1c>
    1476:	4832      	ldr	r0, [pc, #200]	; (1540 <_sercom_get_default_pad+0x128>)
    1478:	e7dc      	b.n	1434 <_sercom_get_default_pad+0x1c>
    147a:	4832      	ldr	r0, [pc, #200]	; (1544 <_sercom_get_default_pad+0x12c>)
    147c:	e7da      	b.n	1434 <_sercom_get_default_pad+0x1c>
    147e:	4832      	ldr	r0, [pc, #200]	; (1548 <_sercom_get_default_pad+0x130>)
    1480:	e7d8      	b.n	1434 <_sercom_get_default_pad+0x1c>
    1482:	2901      	cmp	r1, #1
    1484:	d007      	beq.n	1496 <_sercom_get_default_pad+0x7e>
    1486:	2900      	cmp	r1, #0
    1488:	d03f      	beq.n	150a <_sercom_get_default_pad+0xf2>
    148a:	2902      	cmp	r1, #2
    148c:	d005      	beq.n	149a <_sercom_get_default_pad+0x82>
    148e:	2903      	cmp	r1, #3
    1490:	d005      	beq.n	149e <_sercom_get_default_pad+0x86>
	return 0;
    1492:	2000      	movs	r0, #0
    1494:	e7ce      	b.n	1434 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1496:	482d      	ldr	r0, [pc, #180]	; (154c <_sercom_get_default_pad+0x134>)
    1498:	e7cc      	b.n	1434 <_sercom_get_default_pad+0x1c>
    149a:	482d      	ldr	r0, [pc, #180]	; (1550 <_sercom_get_default_pad+0x138>)
    149c:	e7ca      	b.n	1434 <_sercom_get_default_pad+0x1c>
    149e:	482d      	ldr	r0, [pc, #180]	; (1554 <_sercom_get_default_pad+0x13c>)
    14a0:	e7c8      	b.n	1434 <_sercom_get_default_pad+0x1c>
    14a2:	2901      	cmp	r1, #1
    14a4:	d007      	beq.n	14b6 <_sercom_get_default_pad+0x9e>
    14a6:	2900      	cmp	r1, #0
    14a8:	d031      	beq.n	150e <_sercom_get_default_pad+0xf6>
    14aa:	2902      	cmp	r1, #2
    14ac:	d005      	beq.n	14ba <_sercom_get_default_pad+0xa2>
    14ae:	2903      	cmp	r1, #3
    14b0:	d005      	beq.n	14be <_sercom_get_default_pad+0xa6>
	return 0;
    14b2:	2000      	movs	r0, #0
    14b4:	e7be      	b.n	1434 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    14b6:	4828      	ldr	r0, [pc, #160]	; (1558 <_sercom_get_default_pad+0x140>)
    14b8:	e7bc      	b.n	1434 <_sercom_get_default_pad+0x1c>
    14ba:	4828      	ldr	r0, [pc, #160]	; (155c <_sercom_get_default_pad+0x144>)
    14bc:	e7ba      	b.n	1434 <_sercom_get_default_pad+0x1c>
    14be:	4828      	ldr	r0, [pc, #160]	; (1560 <_sercom_get_default_pad+0x148>)
    14c0:	e7b8      	b.n	1434 <_sercom_get_default_pad+0x1c>
    14c2:	2901      	cmp	r1, #1
    14c4:	d007      	beq.n	14d6 <_sercom_get_default_pad+0xbe>
    14c6:	2900      	cmp	r1, #0
    14c8:	d023      	beq.n	1512 <_sercom_get_default_pad+0xfa>
    14ca:	2902      	cmp	r1, #2
    14cc:	d005      	beq.n	14da <_sercom_get_default_pad+0xc2>
    14ce:	2903      	cmp	r1, #3
    14d0:	d005      	beq.n	14de <_sercom_get_default_pad+0xc6>
	return 0;
    14d2:	2000      	movs	r0, #0
    14d4:	e7ae      	b.n	1434 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    14d6:	4823      	ldr	r0, [pc, #140]	; (1564 <_sercom_get_default_pad+0x14c>)
    14d8:	e7ac      	b.n	1434 <_sercom_get_default_pad+0x1c>
    14da:	4823      	ldr	r0, [pc, #140]	; (1568 <_sercom_get_default_pad+0x150>)
    14dc:	e7aa      	b.n	1434 <_sercom_get_default_pad+0x1c>
    14de:	4823      	ldr	r0, [pc, #140]	; (156c <_sercom_get_default_pad+0x154>)
    14e0:	e7a8      	b.n	1434 <_sercom_get_default_pad+0x1c>
    14e2:	2901      	cmp	r1, #1
    14e4:	d007      	beq.n	14f6 <_sercom_get_default_pad+0xde>
    14e6:	2900      	cmp	r1, #0
    14e8:	d015      	beq.n	1516 <_sercom_get_default_pad+0xfe>
    14ea:	2902      	cmp	r1, #2
    14ec:	d005      	beq.n	14fa <_sercom_get_default_pad+0xe2>
    14ee:	2903      	cmp	r1, #3
    14f0:	d005      	beq.n	14fe <_sercom_get_default_pad+0xe6>
	return 0;
    14f2:	2000      	movs	r0, #0
    14f4:	e79e      	b.n	1434 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    14f6:	481e      	ldr	r0, [pc, #120]	; (1570 <_sercom_get_default_pad+0x158>)
    14f8:	e79c      	b.n	1434 <_sercom_get_default_pad+0x1c>
    14fa:	481e      	ldr	r0, [pc, #120]	; (1574 <_sercom_get_default_pad+0x15c>)
    14fc:	e79a      	b.n	1434 <_sercom_get_default_pad+0x1c>
    14fe:	481e      	ldr	r0, [pc, #120]	; (1578 <_sercom_get_default_pad+0x160>)
    1500:	e798      	b.n	1434 <_sercom_get_default_pad+0x1c>
    1502:	481e      	ldr	r0, [pc, #120]	; (157c <_sercom_get_default_pad+0x164>)
    1504:	e796      	b.n	1434 <_sercom_get_default_pad+0x1c>
    1506:	2003      	movs	r0, #3
    1508:	e794      	b.n	1434 <_sercom_get_default_pad+0x1c>
    150a:	481d      	ldr	r0, [pc, #116]	; (1580 <_sercom_get_default_pad+0x168>)
    150c:	e792      	b.n	1434 <_sercom_get_default_pad+0x1c>
    150e:	481d      	ldr	r0, [pc, #116]	; (1584 <_sercom_get_default_pad+0x16c>)
    1510:	e790      	b.n	1434 <_sercom_get_default_pad+0x1c>
    1512:	481d      	ldr	r0, [pc, #116]	; (1588 <_sercom_get_default_pad+0x170>)
    1514:	e78e      	b.n	1434 <_sercom_get_default_pad+0x1c>
    1516:	481d      	ldr	r0, [pc, #116]	; (158c <_sercom_get_default_pad+0x174>)
    1518:	e78c      	b.n	1434 <_sercom_get_default_pad+0x1c>
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	42001000 	.word	0x42001000
    1520:	42001800 	.word	0x42001800
    1524:	42001c00 	.word	0x42001c00
    1528:	42001400 	.word	0x42001400
    152c:	42000800 	.word	0x42000800
    1530:	42000c00 	.word	0x42000c00
    1534:	00050003 	.word	0x00050003
    1538:	00060003 	.word	0x00060003
    153c:	00070003 	.word	0x00070003
    1540:	00010003 	.word	0x00010003
    1544:	001e0003 	.word	0x001e0003
    1548:	001f0003 	.word	0x001f0003
    154c:	00090003 	.word	0x00090003
    1550:	000a0003 	.word	0x000a0003
    1554:	000b0003 	.word	0x000b0003
    1558:	00110003 	.word	0x00110003
    155c:	00120003 	.word	0x00120003
    1560:	00130003 	.word	0x00130003
    1564:	000d0003 	.word	0x000d0003
    1568:	000e0003 	.word	0x000e0003
    156c:	000f0003 	.word	0x000f0003
    1570:	00170003 	.word	0x00170003
    1574:	00180003 	.word	0x00180003
    1578:	00190003 	.word	0x00190003
    157c:	00040003 	.word	0x00040003
    1580:	00080003 	.word	0x00080003
    1584:	00100003 	.word	0x00100003
    1588:	000c0003 	.word	0x000c0003
    158c:	00160003 	.word	0x00160003

00001590 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1590:	b530      	push	{r4, r5, lr}
    1592:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1594:	4b0b      	ldr	r3, [pc, #44]	; (15c4 <_sercom_get_sercom_inst_index+0x34>)
    1596:	466a      	mov	r2, sp
    1598:	cb32      	ldmia	r3!, {r1, r4, r5}
    159a:	c232      	stmia	r2!, {r1, r4, r5}
    159c:	cb32      	ldmia	r3!, {r1, r4, r5}
    159e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    15a0:	9b00      	ldr	r3, [sp, #0]
    15a2:	4283      	cmp	r3, r0
    15a4:	d00b      	beq.n	15be <_sercom_get_sercom_inst_index+0x2e>
    15a6:	2301      	movs	r3, #1
    15a8:	009a      	lsls	r2, r3, #2
    15aa:	4669      	mov	r1, sp
    15ac:	5852      	ldr	r2, [r2, r1]
    15ae:	4282      	cmp	r2, r0
    15b0:	d006      	beq.n	15c0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    15b2:	3301      	adds	r3, #1
    15b4:	2b06      	cmp	r3, #6
    15b6:	d1f7      	bne.n	15a8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    15b8:	2000      	movs	r0, #0
}
    15ba:	b007      	add	sp, #28
    15bc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    15be:	2300      	movs	r3, #0
			return i;
    15c0:	b2d8      	uxtb	r0, r3
    15c2:	e7fa      	b.n	15ba <_sercom_get_sercom_inst_index+0x2a>
    15c4:	00004624 	.word	0x00004624

000015c8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    15c8:	4770      	bx	lr
	...

000015cc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    15cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    15ce:	4b0a      	ldr	r3, [pc, #40]	; (15f8 <_sercom_set_handler+0x2c>)
    15d0:	781b      	ldrb	r3, [r3, #0]
    15d2:	2b00      	cmp	r3, #0
    15d4:	d10c      	bne.n	15f0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    15d6:	4f09      	ldr	r7, [pc, #36]	; (15fc <_sercom_set_handler+0x30>)
    15d8:	4e09      	ldr	r6, [pc, #36]	; (1600 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    15da:	4d0a      	ldr	r5, [pc, #40]	; (1604 <_sercom_set_handler+0x38>)
    15dc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    15de:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    15e0:	195a      	adds	r2, r3, r5
    15e2:	6014      	str	r4, [r2, #0]
    15e4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    15e6:	2b18      	cmp	r3, #24
    15e8:	d1f9      	bne.n	15de <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    15ea:	2201      	movs	r2, #1
    15ec:	4b02      	ldr	r3, [pc, #8]	; (15f8 <_sercom_set_handler+0x2c>)
    15ee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    15f0:	0080      	lsls	r0, r0, #2
    15f2:	4b02      	ldr	r3, [pc, #8]	; (15fc <_sercom_set_handler+0x30>)
    15f4:	50c1      	str	r1, [r0, r3]
}
    15f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15f8:	2000011e 	.word	0x2000011e
    15fc:	20000120 	.word	0x20000120
    1600:	000015c9 	.word	0x000015c9
    1604:	20001160 	.word	0x20001160

00001608 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1608:	b500      	push	{lr}
    160a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    160c:	2309      	movs	r3, #9
    160e:	466a      	mov	r2, sp
    1610:	7013      	strb	r3, [r2, #0]
    1612:	3301      	adds	r3, #1
    1614:	7053      	strb	r3, [r2, #1]
    1616:	3301      	adds	r3, #1
    1618:	7093      	strb	r3, [r2, #2]
    161a:	3301      	adds	r3, #1
    161c:	70d3      	strb	r3, [r2, #3]
    161e:	3301      	adds	r3, #1
    1620:	7113      	strb	r3, [r2, #4]
    1622:	3301      	adds	r3, #1
    1624:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1626:	4b03      	ldr	r3, [pc, #12]	; (1634 <_sercom_get_interrupt_vector+0x2c>)
    1628:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    162a:	466b      	mov	r3, sp
    162c:	5618      	ldrsb	r0, [r3, r0]
}
    162e:	b003      	add	sp, #12
    1630:	bd00      	pop	{pc}
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	00001591 	.word	0x00001591

00001638 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1638:	b510      	push	{r4, lr}
    163a:	4b02      	ldr	r3, [pc, #8]	; (1644 <SERCOM0_Handler+0xc>)
    163c:	681b      	ldr	r3, [r3, #0]
    163e:	2000      	movs	r0, #0
    1640:	4798      	blx	r3
    1642:	bd10      	pop	{r4, pc}
    1644:	20000120 	.word	0x20000120

00001648 <SERCOM1_Handler>:
    1648:	b510      	push	{r4, lr}
    164a:	4b02      	ldr	r3, [pc, #8]	; (1654 <SERCOM1_Handler+0xc>)
    164c:	685b      	ldr	r3, [r3, #4]
    164e:	2001      	movs	r0, #1
    1650:	4798      	blx	r3
    1652:	bd10      	pop	{r4, pc}
    1654:	20000120 	.word	0x20000120

00001658 <SERCOM2_Handler>:
    1658:	b510      	push	{r4, lr}
    165a:	4b02      	ldr	r3, [pc, #8]	; (1664 <SERCOM2_Handler+0xc>)
    165c:	689b      	ldr	r3, [r3, #8]
    165e:	2002      	movs	r0, #2
    1660:	4798      	blx	r3
    1662:	bd10      	pop	{r4, pc}
    1664:	20000120 	.word	0x20000120

00001668 <SERCOM3_Handler>:
    1668:	b510      	push	{r4, lr}
    166a:	4b02      	ldr	r3, [pc, #8]	; (1674 <SERCOM3_Handler+0xc>)
    166c:	68db      	ldr	r3, [r3, #12]
    166e:	2003      	movs	r0, #3
    1670:	4798      	blx	r3
    1672:	bd10      	pop	{r4, pc}
    1674:	20000120 	.word	0x20000120

00001678 <SERCOM4_Handler>:
    1678:	b510      	push	{r4, lr}
    167a:	4b02      	ldr	r3, [pc, #8]	; (1684 <SERCOM4_Handler+0xc>)
    167c:	691b      	ldr	r3, [r3, #16]
    167e:	2004      	movs	r0, #4
    1680:	4798      	blx	r3
    1682:	bd10      	pop	{r4, pc}
    1684:	20000120 	.word	0x20000120

00001688 <SERCOM5_Handler>:
    1688:	b510      	push	{r4, lr}
    168a:	4b02      	ldr	r3, [pc, #8]	; (1694 <SERCOM5_Handler+0xc>)
    168c:	695b      	ldr	r3, [r3, #20]
    168e:	2005      	movs	r0, #5
    1690:	4798      	blx	r3
    1692:	bd10      	pop	{r4, pc}
    1694:	20000120 	.word	0x20000120

00001698 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    1698:	b570      	push	{r4, r5, r6, lr}
    169a:	b082      	sub	sp, #8
    169c:	0005      	movs	r5, r0
    169e:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    16a0:	2200      	movs	r2, #0
    16a2:	466b      	mov	r3, sp
    16a4:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    16a6:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    16a8:	0030      	movs	r0, r6
    16aa:	4b24      	ldr	r3, [pc, #144]	; (173c <spi_set_baudrate+0xa4>)
    16ac:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    16ae:	231f      	movs	r3, #31
    16b0:	4018      	ands	r0, r3
    16b2:	3b1e      	subs	r3, #30
    16b4:	4083      	lsls	r3, r0
    16b6:	2280      	movs	r2, #128	; 0x80
    16b8:	4921      	ldr	r1, [pc, #132]	; (1740 <spi_set_baudrate+0xa8>)
    16ba:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    16bc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    16be:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    16c0:	2b00      	cmp	r3, #0
    16c2:	d1fc      	bne.n	16be <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    16c4:	338f      	adds	r3, #143	; 0x8f
    16c6:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    16c8:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    16ca:	6833      	ldr	r3, [r6, #0]
    16cc:	2202      	movs	r2, #2
    16ce:	4393      	bics	r3, r2
    16d0:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    16d2:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    16d4:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    16d6:	2b00      	cmp	r3, #0
    16d8:	d1fc      	bne.n	16d4 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    16da:	4b1a      	ldr	r3, [pc, #104]	; (1744 <spi_set_baudrate+0xac>)
    16dc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    16de:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    16e0:	b2c0      	uxtb	r0, r0
    16e2:	4b19      	ldr	r3, [pc, #100]	; (1748 <spi_set_baudrate+0xb0>)
    16e4:	4798      	blx	r3
    16e6:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    16e8:	466b      	mov	r3, sp
    16ea:	1d9a      	adds	r2, r3, #6
    16ec:	0020      	movs	r0, r4
    16ee:	4b17      	ldr	r3, [pc, #92]	; (174c <spi_set_baudrate+0xb4>)
    16f0:	4798      	blx	r3
    16f2:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    16f4:	d003      	beq.n	16fe <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    16f6:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    16f8:	0020      	movs	r0, r4
    16fa:	b002      	add	sp, #8
    16fc:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    16fe:	466b      	mov	r3, sp
    1700:	3306      	adds	r3, #6
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1706:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1708:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    170a:	2b00      	cmp	r3, #0
    170c:	d1fc      	bne.n	1708 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    170e:	0030      	movs	r0, r6
    1710:	4b0a      	ldr	r3, [pc, #40]	; (173c <spi_set_baudrate+0xa4>)
    1712:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1714:	231f      	movs	r3, #31
    1716:	4018      	ands	r0, r3
    1718:	3b1e      	subs	r3, #30
    171a:	4083      	lsls	r3, r0
    171c:	4a08      	ldr	r2, [pc, #32]	; (1740 <spi_set_baudrate+0xa8>)
    171e:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1720:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1722:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1724:	2b00      	cmp	r3, #0
    1726:	d1fc      	bne.n	1722 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1728:	6833      	ldr	r3, [r6, #0]
    172a:	2202      	movs	r2, #2
    172c:	4313      	orrs	r3, r2
    172e:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1730:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1732:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1734:	2b00      	cmp	r3, #0
    1736:	d1fc      	bne.n	1732 <spi_set_baudrate+0x9a>
    1738:	e7de      	b.n	16f8 <spi_set_baudrate+0x60>
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	00001609 	.word	0x00001609
    1740:	e000e100 	.word	0xe000e100
    1744:	00001591 	.word	0x00001591
    1748:	00002955 	.word	0x00002955
    174c:	0000130f 	.word	0x0000130f

00001750 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1750:	b5f0      	push	{r4, r5, r6, r7, lr}
    1752:	b08b      	sub	sp, #44	; 0x2c
    1754:	0005      	movs	r5, r0
    1756:	000c      	movs	r4, r1
    1758:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    175a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    175c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    175e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1760:	079b      	lsls	r3, r3, #30
    1762:	d501      	bpl.n	1768 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1764:	b00b      	add	sp, #44	; 0x2c
    1766:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1768:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    176a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    176c:	07db      	lsls	r3, r3, #31
    176e:	d4f9      	bmi.n	1764 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1770:	0008      	movs	r0, r1
    1772:	4b60      	ldr	r3, [pc, #384]	; (18f4 <spi_init+0x1a4>)
    1774:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1776:	4a60      	ldr	r2, [pc, #384]	; (18f8 <spi_init+0x1a8>)
    1778:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    177a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    177c:	2301      	movs	r3, #1
    177e:	40bb      	lsls	r3, r7
    1780:	430b      	orrs	r3, r1
    1782:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1784:	a909      	add	r1, sp, #36	; 0x24
    1786:	2724      	movs	r7, #36	; 0x24
    1788:	5df3      	ldrb	r3, [r6, r7]
    178a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    178c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    178e:	b2c3      	uxtb	r3, r0
    1790:	9301      	str	r3, [sp, #4]
    1792:	0018      	movs	r0, r3
    1794:	4b59      	ldr	r3, [pc, #356]	; (18fc <spi_init+0x1ac>)
    1796:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1798:	9801      	ldr	r0, [sp, #4]
    179a:	4b59      	ldr	r3, [pc, #356]	; (1900 <spi_init+0x1b0>)
    179c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    179e:	5df0      	ldrb	r0, [r6, r7]
    17a0:	2100      	movs	r1, #0
    17a2:	4b58      	ldr	r3, [pc, #352]	; (1904 <spi_init+0x1b4>)
    17a4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    17a6:	7833      	ldrb	r3, [r6, #0]
    17a8:	2b01      	cmp	r3, #1
    17aa:	d038      	beq.n	181e <spi_init+0xce>
    17ac:	002b      	movs	r3, r5
    17ae:	330c      	adds	r3, #12
    17b0:	0029      	movs	r1, r5
    17b2:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    17b4:	2200      	movs	r2, #0
    17b6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    17b8:	428b      	cmp	r3, r1
    17ba:	d1fc      	bne.n	17b6 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    17bc:	2300      	movs	r3, #0
    17be:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    17c0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    17c2:	2400      	movs	r4, #0
    17c4:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    17c6:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    17c8:	3336      	adds	r3, #54	; 0x36
    17ca:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    17cc:	3301      	adds	r3, #1
    17ce:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    17d0:	3301      	adds	r3, #1
    17d2:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    17d4:	3b35      	subs	r3, #53	; 0x35
    17d6:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    17d8:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    17da:	6828      	ldr	r0, [r5, #0]
    17dc:	4b45      	ldr	r3, [pc, #276]	; (18f4 <spi_init+0x1a4>)
    17de:	4798      	blx	r3
    17e0:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    17e2:	4949      	ldr	r1, [pc, #292]	; (1908 <spi_init+0x1b8>)
    17e4:	4b49      	ldr	r3, [pc, #292]	; (190c <spi_init+0x1bc>)
    17e6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    17e8:	00bf      	lsls	r7, r7, #2
    17ea:	4b49      	ldr	r3, [pc, #292]	; (1910 <spi_init+0x1c0>)
    17ec:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    17ee:	682f      	ldr	r7, [r5, #0]
    17f0:	ab04      	add	r3, sp, #16
    17f2:	2280      	movs	r2, #128	; 0x80
    17f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    17f6:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    17f8:	3a7f      	subs	r2, #127	; 0x7f
    17fa:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    17fc:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    17fe:	7833      	ldrb	r3, [r6, #0]
    1800:	2b00      	cmp	r3, #0
    1802:	d102      	bne.n	180a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1804:	2200      	movs	r2, #0
    1806:	ab04      	add	r3, sp, #16
    1808:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    180a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    180c:	9305      	str	r3, [sp, #20]
    180e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1810:	9306      	str	r3, [sp, #24]
    1812:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1814:	9307      	str	r3, [sp, #28]
    1816:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1818:	9308      	str	r3, [sp, #32]
    181a:	2400      	movs	r4, #0
    181c:	e00b      	b.n	1836 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    181e:	6823      	ldr	r3, [r4, #0]
    1820:	220c      	movs	r2, #12
    1822:	4313      	orrs	r3, r2
    1824:	6023      	str	r3, [r4, #0]
    1826:	e7c1      	b.n	17ac <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1828:	0038      	movs	r0, r7
    182a:	4b3a      	ldr	r3, [pc, #232]	; (1914 <spi_init+0x1c4>)
    182c:	4798      	blx	r3
    182e:	e00a      	b.n	1846 <spi_init+0xf6>
    1830:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1832:	2c04      	cmp	r4, #4
    1834:	d010      	beq.n	1858 <spi_init+0x108>
    1836:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1838:	00a3      	lsls	r3, r4, #2
    183a:	aa02      	add	r2, sp, #8
    183c:	200c      	movs	r0, #12
    183e:	1812      	adds	r2, r2, r0
    1840:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1842:	2800      	cmp	r0, #0
    1844:	d0f0      	beq.n	1828 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    1846:	1c43      	adds	r3, r0, #1
    1848:	d0f2      	beq.n	1830 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    184a:	a904      	add	r1, sp, #16
    184c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    184e:	0c00      	lsrs	r0, r0, #16
    1850:	b2c0      	uxtb	r0, r0
    1852:	4b31      	ldr	r3, [pc, #196]	; (1918 <spi_init+0x1c8>)
    1854:	4798      	blx	r3
    1856:	e7eb      	b.n	1830 <spi_init+0xe0>
	module->mode             = config->mode;
    1858:	7833      	ldrb	r3, [r6, #0]
    185a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    185c:	7c33      	ldrb	r3, [r6, #16]
    185e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1860:	7cb3      	ldrb	r3, [r6, #18]
    1862:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1864:	7d33      	ldrb	r3, [r6, #20]
    1866:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1868:	2200      	movs	r2, #0
    186a:	ab02      	add	r3, sp, #8
    186c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    186e:	7833      	ldrb	r3, [r6, #0]
    1870:	2b01      	cmp	r3, #1
    1872:	d028      	beq.n	18c6 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    1874:	6873      	ldr	r3, [r6, #4]
    1876:	68b2      	ldr	r2, [r6, #8]
    1878:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    187a:	68f2      	ldr	r2, [r6, #12]
    187c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    187e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1880:	7c72      	ldrb	r2, [r6, #17]
    1882:	2a00      	cmp	r2, #0
    1884:	d103      	bne.n	188e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1886:	4a25      	ldr	r2, [pc, #148]	; (191c <spi_init+0x1cc>)
    1888:	7892      	ldrb	r2, [r2, #2]
    188a:	0792      	lsls	r2, r2, #30
    188c:	d501      	bpl.n	1892 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    188e:	2280      	movs	r2, #128	; 0x80
    1890:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    1892:	7cb2      	ldrb	r2, [r6, #18]
    1894:	2a00      	cmp	r2, #0
    1896:	d002      	beq.n	189e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1898:	2280      	movs	r2, #128	; 0x80
    189a:	0292      	lsls	r2, r2, #10
    189c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    189e:	7cf2      	ldrb	r2, [r6, #19]
    18a0:	2a00      	cmp	r2, #0
    18a2:	d002      	beq.n	18aa <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    18a4:	2280      	movs	r2, #128	; 0x80
    18a6:	0092      	lsls	r2, r2, #2
    18a8:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    18aa:	7d32      	ldrb	r2, [r6, #20]
    18ac:	2a00      	cmp	r2, #0
    18ae:	d002      	beq.n	18b6 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    18b0:	2280      	movs	r2, #128	; 0x80
    18b2:	0192      	lsls	r2, r2, #6
    18b4:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    18b6:	683a      	ldr	r2, [r7, #0]
    18b8:	4313      	orrs	r3, r2
    18ba:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    18bc:	687b      	ldr	r3, [r7, #4]
    18be:	430b      	orrs	r3, r1
    18c0:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    18c2:	2000      	movs	r0, #0
    18c4:	e74e      	b.n	1764 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    18c6:	6828      	ldr	r0, [r5, #0]
    18c8:	4b0a      	ldr	r3, [pc, #40]	; (18f4 <spi_init+0x1a4>)
    18ca:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    18cc:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    18ce:	b2c0      	uxtb	r0, r0
    18d0:	4b13      	ldr	r3, [pc, #76]	; (1920 <spi_init+0x1d0>)
    18d2:	4798      	blx	r3
    18d4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    18d6:	ab02      	add	r3, sp, #8
    18d8:	1d9a      	adds	r2, r3, #6
    18da:	69b0      	ldr	r0, [r6, #24]
    18dc:	4b11      	ldr	r3, [pc, #68]	; (1924 <spi_init+0x1d4>)
    18de:	4798      	blx	r3
    18e0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    18e2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    18e4:	2b00      	cmp	r3, #0
    18e6:	d000      	beq.n	18ea <spi_init+0x19a>
    18e8:	e73c      	b.n	1764 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    18ea:	ab02      	add	r3, sp, #8
    18ec:	3306      	adds	r3, #6
    18ee:	781b      	ldrb	r3, [r3, #0]
    18f0:	733b      	strb	r3, [r7, #12]
    18f2:	e7bf      	b.n	1874 <spi_init+0x124>
    18f4:	00001591 	.word	0x00001591
    18f8:	40000400 	.word	0x40000400
    18fc:	00002939 	.word	0x00002939
    1900:	000028ad 	.word	0x000028ad
    1904:	000013cd 	.word	0x000013cd
    1908:	00001bbd 	.word	0x00001bbd
    190c:	000015cd 	.word	0x000015cd
    1910:	20001160 	.word	0x20001160
    1914:	00001419 	.word	0x00001419
    1918:	00002a31 	.word	0x00002a31
    191c:	41002000 	.word	0x41002000
    1920:	00002955 	.word	0x00002955
    1924:	0000130f 	.word	0x0000130f

00001928 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1928:	b5f0      	push	{r4, r5, r6, r7, lr}
    192a:	46d6      	mov	lr, sl
    192c:	4647      	mov	r7, r8
    192e:	b580      	push	{r7, lr}
    1930:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1932:	2438      	movs	r4, #56	; 0x38
    1934:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1936:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1938:	2d05      	cmp	r5, #5
    193a:	d002      	beq.n	1942 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    193c:	3412      	adds	r4, #18
	if (length == 0) {
    193e:	2a00      	cmp	r2, #0
    1940:	d105      	bne.n	194e <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1942:	0020      	movs	r0, r4
    1944:	b003      	add	sp, #12
    1946:	bc0c      	pop	{r2, r3}
    1948:	4690      	mov	r8, r2
    194a:	469a      	mov	sl, r3
    194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    194e:	79c4      	ldrb	r4, [r0, #7]
    1950:	2c00      	cmp	r4, #0
    1952:	d144      	bne.n	19de <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    1954:	341c      	adds	r4, #28
    1956:	e7f4      	b.n	1942 <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1958:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    195a:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    195c:	423c      	tst	r4, r7
    195e:	d0fc      	beq.n	195a <spi_read_buffer_wait+0x32>
    1960:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1962:	423c      	tst	r4, r7
    1964:	d01a      	beq.n	199c <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1966:	4644      	mov	r4, r8
    1968:	62ac      	str	r4, [r5, #40]	; 0x28
    196a:	e017      	b.n	199c <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    196c:	7984      	ldrb	r4, [r0, #6]
    196e:	2c01      	cmp	r4, #1
    1970:	d026      	beq.n	19c0 <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1972:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1974:	b2ec      	uxtb	r4, r5
    1976:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    1978:	9c01      	ldr	r4, [sp, #4]
    197a:	2c00      	cmp	r4, #0
    197c:	d13a      	bne.n	19f4 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    197e:	1c75      	adds	r5, r6, #1
    1980:	b2ad      	uxth	r5, r5
    1982:	4664      	mov	r4, ip
    1984:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1986:	7984      	ldrb	r4, [r0, #6]
    1988:	2c01      	cmp	r4, #1
    198a:	d01e      	beq.n	19ca <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    198c:	002e      	movs	r6, r5
	while (length--) {
    198e:	3a01      	subs	r2, #1
    1990:	b292      	uxth	r2, r2
    1992:	4552      	cmp	r2, sl
    1994:	d01f      	beq.n	19d6 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    1996:	7944      	ldrb	r4, [r0, #5]
    1998:	2c01      	cmp	r4, #1
    199a:	d0dd      	beq.n	1958 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    199c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    199e:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    19a0:	421c      	tst	r4, r3
    19a2:	d0fc      	beq.n	199e <spi_read_buffer_wait+0x76>
    19a4:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    19a6:	421c      	tst	r4, r3
    19a8:	d017      	beq.n	19da <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    19aa:	8b6c      	ldrh	r4, [r5, #26]
    19ac:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    19ae:	2400      	movs	r4, #0
    19b0:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    19b2:	4664      	mov	r4, ip
    19b4:	421c      	tst	r4, r3
    19b6:	d0d9      	beq.n	196c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    19b8:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    19ba:	241e      	movs	r4, #30
    19bc:	9401      	str	r4, [sp, #4]
    19be:	e7d5      	b.n	196c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    19c0:	6aac      	ldr	r4, [r5, #40]	; 0x28
    19c2:	05e4      	lsls	r4, r4, #23
    19c4:	0de4      	lsrs	r4, r4, #23
    19c6:	46a4      	mov	ip, r4
    19c8:	e7d6      	b.n	1978 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    19ca:	3602      	adds	r6, #2
    19cc:	b2b6      	uxth	r6, r6
    19ce:	4664      	mov	r4, ip
    19d0:	0a24      	lsrs	r4, r4, #8
    19d2:	554c      	strb	r4, [r1, r5]
    19d4:	e7db      	b.n	198e <spi_read_buffer_wait+0x66>
    19d6:	9c01      	ldr	r4, [sp, #4]
    19d8:	e7b3      	b.n	1942 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    19da:	2410      	movs	r4, #16
    19dc:	e7b1      	b.n	1942 <spi_read_buffer_wait+0x1a>
	while (length--) {
    19de:	3a01      	subs	r2, #1
    19e0:	b292      	uxth	r2, r2
    19e2:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    19e4:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    19e6:	05db      	lsls	r3, r3, #23
    19e8:	0ddb      	lsrs	r3, r3, #23
    19ea:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    19ec:	2304      	movs	r3, #4
	while (length--) {
    19ee:	4c02      	ldr	r4, [pc, #8]	; (19f8 <spi_read_buffer_wait+0xd0>)
    19f0:	46a2      	mov	sl, r4
    19f2:	e7d0      	b.n	1996 <spi_read_buffer_wait+0x6e>
    19f4:	9c01      	ldr	r4, [sp, #4]
    19f6:	e7a4      	b.n	1942 <spi_read_buffer_wait+0x1a>
    19f8:	0000ffff 	.word	0x0000ffff

000019fc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    19fc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    19fe:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1a00:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1a02:	2c01      	cmp	r4, #1
    1a04:	d001      	beq.n	1a0a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1a06:	0018      	movs	r0, r3
    1a08:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1a0a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1a0c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1a0e:	2c00      	cmp	r4, #0
    1a10:	d1f9      	bne.n	1a06 <spi_select_slave+0xa>
		if (select) {
    1a12:	2a00      	cmp	r2, #0
    1a14:	d058      	beq.n	1ac8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    1a16:	784b      	ldrb	r3, [r1, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d044      	beq.n	1aa6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1a1c:	6803      	ldr	r3, [r0, #0]
    1a1e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1a20:	07db      	lsls	r3, r3, #31
    1a22:	d410      	bmi.n	1a46 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1a24:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1a26:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1a28:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1a2a:	2900      	cmp	r1, #0
    1a2c:	d104      	bne.n	1a38 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1a2e:	0953      	lsrs	r3, r2, #5
    1a30:	01db      	lsls	r3, r3, #7
    1a32:	492e      	ldr	r1, [pc, #184]	; (1aec <spi_select_slave+0xf0>)
    1a34:	468c      	mov	ip, r1
    1a36:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a38:	211f      	movs	r1, #31
    1a3a:	4011      	ands	r1, r2
    1a3c:	2201      	movs	r2, #1
    1a3e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1a40:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1a42:	2305      	movs	r3, #5
    1a44:	e7df      	b.n	1a06 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1a46:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1a48:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1a4a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1a4c:	2c00      	cmp	r4, #0
    1a4e:	d104      	bne.n	1a5a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1a50:	0953      	lsrs	r3, r2, #5
    1a52:	01db      	lsls	r3, r3, #7
    1a54:	4c25      	ldr	r4, [pc, #148]	; (1aec <spi_select_slave+0xf0>)
    1a56:	46a4      	mov	ip, r4
    1a58:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a5a:	241f      	movs	r4, #31
    1a5c:	4014      	ands	r4, r2
    1a5e:	2201      	movs	r2, #1
    1a60:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a62:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a64:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1a66:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1a68:	07d2      	lsls	r2, r2, #31
    1a6a:	d501      	bpl.n	1a70 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1a6c:	788a      	ldrb	r2, [r1, #2]
    1a6e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1a70:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    1a72:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1a74:	2a00      	cmp	r2, #0
    1a76:	d1c6      	bne.n	1a06 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a78:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    1a7a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1a7c:	7e13      	ldrb	r3, [r2, #24]
    1a7e:	420b      	tst	r3, r1
    1a80:	d0fc      	beq.n	1a7c <spi_select_slave+0x80>
    1a82:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1a84:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    1a86:	0749      	lsls	r1, r1, #29
    1a88:	d5bd      	bpl.n	1a06 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1a8a:	8b53      	ldrh	r3, [r2, #26]
    1a8c:	075b      	lsls	r3, r3, #29
    1a8e:	d501      	bpl.n	1a94 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1a90:	2304      	movs	r3, #4
    1a92:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1a94:	7983      	ldrb	r3, [r0, #6]
    1a96:	2b01      	cmp	r3, #1
    1a98:	d002      	beq.n	1aa0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1a9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a9c:	2300      	movs	r3, #0
    1a9e:	e7b2      	b.n	1a06 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1aa0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1aa2:	2300      	movs	r3, #0
    1aa4:	e7af      	b.n	1a06 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1aa6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1aa8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1aaa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1aac:	2900      	cmp	r1, #0
    1aae:	d104      	bne.n	1aba <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1ab0:	0953      	lsrs	r3, r2, #5
    1ab2:	01db      	lsls	r3, r3, #7
    1ab4:	490d      	ldr	r1, [pc, #52]	; (1aec <spi_select_slave+0xf0>)
    1ab6:	468c      	mov	ip, r1
    1ab8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1aba:	211f      	movs	r1, #31
    1abc:	4011      	ands	r1, r2
    1abe:	2201      	movs	r2, #1
    1ac0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1ac2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1ac4:	2300      	movs	r3, #0
    1ac6:	e79e      	b.n	1a06 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1ac8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1aca:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1acc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1ace:	2900      	cmp	r1, #0
    1ad0:	d104      	bne.n	1adc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1ad2:	0953      	lsrs	r3, r2, #5
    1ad4:	01db      	lsls	r3, r3, #7
    1ad6:	4905      	ldr	r1, [pc, #20]	; (1aec <spi_select_slave+0xf0>)
    1ad8:	468c      	mov	ip, r1
    1ada:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1adc:	211f      	movs	r1, #31
    1ade:	4011      	ands	r1, r2
    1ae0:	2201      	movs	r2, #1
    1ae2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1ae4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1ae6:	2300      	movs	r3, #0
    1ae8:	e78d      	b.n	1a06 <spi_select_slave+0xa>
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	41004400 	.word	0x41004400

00001af0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1af2:	46de      	mov	lr, fp
    1af4:	4657      	mov	r7, sl
    1af6:	464e      	mov	r6, r9
    1af8:	4645      	mov	r5, r8
    1afa:	b5e0      	push	{r5, r6, r7, lr}
    1afc:	b083      	sub	sp, #12
    1afe:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1b00:	2338      	movs	r3, #56	; 0x38
    1b02:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1b04:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1b06:	2c05      	cmp	r4, #5
    1b08:	d002      	beq.n	1b10 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1b0a:	3312      	adds	r3, #18
	if (length == 0) {
    1b0c:	2a00      	cmp	r2, #0
    1b0e:	d14b      	bne.n	1ba8 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    1b10:	0018      	movs	r0, r3
    1b12:	b003      	add	sp, #12
    1b14:	bc3c      	pop	{r2, r3, r4, r5}
    1b16:	4690      	mov	r8, r2
    1b18:	4699      	mov	r9, r3
    1b1a:	46a2      	mov	sl, r4
    1b1c:	46ab      	mov	fp, r5
    1b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    1b20:	3702      	adds	r7, #2
    1b22:	b2bf      	uxth	r7, r7
    1b24:	4641      	mov	r1, r8
    1b26:	4653      	mov	r3, sl
    1b28:	5c59      	ldrb	r1, [r3, r1]
    1b2a:	0209      	lsls	r1, r1, #8
    1b2c:	465b      	mov	r3, fp
    1b2e:	430b      	orrs	r3, r1
    1b30:	e018      	b.n	1b64 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b32:	7983      	ldrb	r3, [r0, #6]
    1b34:	2b01      	cmp	r3, #1
    1b36:	d02a      	beq.n	1b8e <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1b38:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    1b3a:	3e01      	subs	r6, #1
    1b3c:	b2b6      	uxth	r6, r6
    1b3e:	4566      	cmp	r6, ip
    1b40:	d027      	beq.n	1b92 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b42:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1b44:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    1b46:	4223      	tst	r3, r4
    1b48:	d0fc      	beq.n	1b44 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    1b4a:	1c7b      	adds	r3, r7, #1
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	4698      	mov	r8, r3
    1b50:	4653      	mov	r3, sl
    1b52:	5ddb      	ldrb	r3, [r3, r7]
    1b54:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b56:	7981      	ldrb	r1, [r0, #6]
    1b58:	2901      	cmp	r1, #1
    1b5a:	d0e1      	beq.n	1b20 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    1b5c:	4669      	mov	r1, sp
    1b5e:	80cb      	strh	r3, [r1, #6]
    1b60:	88cb      	ldrh	r3, [r1, #6]
    1b62:	4647      	mov	r7, r8
    1b64:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1b66:	4221      	tst	r1, r4
    1b68:	d002      	beq.n	1b70 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1b6a:	05db      	lsls	r3, r3, #23
    1b6c:	0ddb      	lsrs	r3, r3, #23
    1b6e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    1b70:	79c3      	ldrb	r3, [r0, #7]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d0e1      	beq.n	1b3a <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b76:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b78:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    1b7a:	422b      	tst	r3, r5
    1b7c:	d0fc      	beq.n	1b78 <spi_write_buffer_wait+0x88>
    1b7e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    1b80:	422b      	tst	r3, r5
    1b82:	d0da      	beq.n	1b3a <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1b84:	8b53      	ldrh	r3, [r2, #26]
    1b86:	422b      	tst	r3, r5
    1b88:	d0d3      	beq.n	1b32 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1b8a:	8355      	strh	r5, [r2, #26]
    1b8c:	e7d1      	b.n	1b32 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1b8e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1b90:	e7d3      	b.n	1b3a <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    1b92:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    1b94:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    1b96:	2a01      	cmp	r2, #1
    1b98:	d1ba      	bne.n	1b10 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b9a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    1b9c:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1b9e:	7e0b      	ldrb	r3, [r1, #24]
    1ba0:	4213      	tst	r3, r2
    1ba2:	d0fc      	beq.n	1b9e <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    1ba4:	2300      	movs	r3, #0
    1ba6:	e7b3      	b.n	1b10 <spi_write_buffer_wait+0x20>
	while (length--) {
    1ba8:	3a01      	subs	r2, #1
    1baa:	b296      	uxth	r6, r2
    1bac:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    1bae:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    1bb0:	2504      	movs	r5, #4
	while (length--) {
    1bb2:	4b01      	ldr	r3, [pc, #4]	; (1bb8 <spi_write_buffer_wait+0xc8>)
    1bb4:	469c      	mov	ip, r3
    1bb6:	e7c4      	b.n	1b42 <spi_write_buffer_wait+0x52>
    1bb8:	0000ffff 	.word	0x0000ffff

00001bbc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1bbe:	0080      	lsls	r0, r0, #2
    1bc0:	4b70      	ldr	r3, [pc, #448]	; (1d84 <_spi_interrupt_handler+0x1c8>)
    1bc2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1bc4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1bc6:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1bc8:	5ce7      	ldrb	r7, [r4, r3]
    1bca:	2236      	movs	r2, #54	; 0x36
    1bcc:	5ca2      	ldrb	r2, [r4, r2]
    1bce:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1bd0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1bd2:	7db5      	ldrb	r5, [r6, #22]
    1bd4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1bd6:	07eb      	lsls	r3, r5, #31
    1bd8:	d502      	bpl.n	1be0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1bda:	7963      	ldrb	r3, [r4, #5]
    1bdc:	2b01      	cmp	r3, #1
    1bde:	d01e      	beq.n	1c1e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1be0:	076b      	lsls	r3, r5, #29
    1be2:	d511      	bpl.n	1c08 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1be4:	8b73      	ldrh	r3, [r6, #26]
    1be6:	075b      	lsls	r3, r3, #29
    1be8:	d55a      	bpl.n	1ca0 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1bea:	7a63      	ldrb	r3, [r4, #9]
    1bec:	2b01      	cmp	r3, #1
    1bee:	d008      	beq.n	1c02 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1bf0:	221e      	movs	r2, #30
    1bf2:	2338      	movs	r3, #56	; 0x38
    1bf4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1bf6:	3b35      	subs	r3, #53	; 0x35
    1bf8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1bfa:	3302      	adds	r3, #2
    1bfc:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1bfe:	073b      	lsls	r3, r7, #28
    1c00:	d44a      	bmi.n	1c98 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1c02:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1c04:	2304      	movs	r3, #4
    1c06:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1c08:	07ab      	lsls	r3, r5, #30
    1c0a:	d503      	bpl.n	1c14 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1c0c:	7963      	ldrb	r3, [r4, #5]
    1c0e:	2b01      	cmp	r3, #1
    1c10:	d100      	bne.n	1c14 <_spi_interrupt_handler+0x58>
    1c12:	e097      	b.n	1d44 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1c14:	b26d      	sxtb	r5, r5
    1c16:	2d00      	cmp	r5, #0
    1c18:	da00      	bge.n	1c1c <_spi_interrupt_handler+0x60>
    1c1a:	e0a9      	b.n	1d70 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    1c1e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1c20:	2b00      	cmp	r3, #0
    1c22:	d022      	beq.n	1c6a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    1c24:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1c26:	2b00      	cmp	r3, #0
    1c28:	d0da      	beq.n	1be0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c2a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1c2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1c2e:	7813      	ldrb	r3, [r2, #0]
    1c30:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    1c32:	1c50      	adds	r0, r2, #1
    1c34:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c36:	79a0      	ldrb	r0, [r4, #6]
    1c38:	2801      	cmp	r0, #1
    1c3a:	d027      	beq.n	1c8c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1c3c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1c3e:	05db      	lsls	r3, r3, #23
    1c40:	0ddb      	lsrs	r3, r3, #23
    1c42:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    1c44:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1c46:	3b01      	subs	r3, #1
    1c48:	b29b      	uxth	r3, r3
    1c4a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    1c4c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1c4e:	b29b      	uxth	r3, r3
    1c50:	2b00      	cmp	r3, #0
    1c52:	d1c5      	bne.n	1be0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1c54:	3301      	adds	r3, #1
    1c56:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1c58:	7a63      	ldrb	r3, [r4, #9]
    1c5a:	2b01      	cmp	r3, #1
    1c5c:	d1c0      	bne.n	1be0 <_spi_interrupt_handler+0x24>
    1c5e:	79e3      	ldrb	r3, [r4, #7]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d1bd      	bne.n	1be0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1c64:	3302      	adds	r3, #2
    1c66:	75b3      	strb	r3, [r6, #22]
    1c68:	e7ba      	b.n	1be0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    1c6a:	4b47      	ldr	r3, [pc, #284]	; (1d88 <_spi_interrupt_handler+0x1cc>)
    1c6c:	881b      	ldrh	r3, [r3, #0]
    1c6e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1c70:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1c72:	3b01      	subs	r3, #1
    1c74:	b29b      	uxth	r3, r3
    1c76:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1c78:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1c7a:	b29b      	uxth	r3, r3
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	d101      	bne.n	1c84 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1c80:	3301      	adds	r3, #1
    1c82:	7533      	strb	r3, [r6, #20]
		if (0
    1c84:	7963      	ldrb	r3, [r4, #5]
    1c86:	2b01      	cmp	r3, #1
    1c88:	d0cc      	beq.n	1c24 <_spi_interrupt_handler+0x68>
    1c8a:	e7a9      	b.n	1be0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1c8c:	7850      	ldrb	r0, [r2, #1]
    1c8e:	0200      	lsls	r0, r0, #8
    1c90:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1c92:	3202      	adds	r2, #2
    1c94:	62e2      	str	r2, [r4, #44]	; 0x2c
    1c96:	e7d2      	b.n	1c3e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1c98:	0020      	movs	r0, r4
    1c9a:	69a3      	ldr	r3, [r4, #24]
    1c9c:	4798      	blx	r3
    1c9e:	e7b0      	b.n	1c02 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1ca0:	7a63      	ldrb	r3, [r4, #9]
    1ca2:	2b01      	cmp	r3, #1
    1ca4:	d028      	beq.n	1cf8 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1ca6:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1caa:	05db      	lsls	r3, r3, #23
    1cac:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1cae:	b2da      	uxtb	r2, r3
    1cb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1cb2:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1cb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1cb6:	1c51      	adds	r1, r2, #1
    1cb8:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1cba:	79a1      	ldrb	r1, [r4, #6]
    1cbc:	2901      	cmp	r1, #1
    1cbe:	d034      	beq.n	1d2a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    1cc0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1cc2:	3b01      	subs	r3, #1
    1cc4:	b29b      	uxth	r3, r3
    1cc6:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1cc8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1cca:	b29b      	uxth	r3, r3
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d000      	beq.n	1cd2 <_spi_interrupt_handler+0x116>
    1cd0:	e79a      	b.n	1c08 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    1cd2:	2200      	movs	r2, #0
    1cd4:	3338      	adds	r3, #56	; 0x38
    1cd6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1cd8:	3b34      	subs	r3, #52	; 0x34
    1cda:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1cdc:	7a63      	ldrb	r3, [r4, #9]
    1cde:	2b02      	cmp	r3, #2
    1ce0:	d029      	beq.n	1d36 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1ce2:	7a63      	ldrb	r3, [r4, #9]
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d000      	beq.n	1cea <_spi_interrupt_handler+0x12e>
    1ce8:	e78e      	b.n	1c08 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1cea:	07bb      	lsls	r3, r7, #30
    1cec:	d400      	bmi.n	1cf0 <_spi_interrupt_handler+0x134>
    1cee:	e78b      	b.n	1c08 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1cf0:	0020      	movs	r0, r4
    1cf2:	6923      	ldr	r3, [r4, #16]
    1cf4:	4798      	blx	r3
    1cf6:	e787      	b.n	1c08 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1cf8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1cfc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1cfe:	3b01      	subs	r3, #1
    1d00:	b29b      	uxth	r3, r3
    1d02:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1d04:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1d06:	b29b      	uxth	r3, r3
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d000      	beq.n	1d0e <_spi_interrupt_handler+0x152>
    1d0c:	e77c      	b.n	1c08 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1d0e:	3304      	adds	r3, #4
    1d10:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1d12:	2200      	movs	r2, #0
    1d14:	3334      	adds	r3, #52	; 0x34
    1d16:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1d18:	3b35      	subs	r3, #53	; 0x35
    1d1a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1d1c:	07fb      	lsls	r3, r7, #31
    1d1e:	d400      	bmi.n	1d22 <_spi_interrupt_handler+0x166>
    1d20:	e772      	b.n	1c08 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1d22:	0020      	movs	r0, r4
    1d24:	68e3      	ldr	r3, [r4, #12]
    1d26:	4798      	blx	r3
    1d28:	e76e      	b.n	1c08 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1d2a:	0a1b      	lsrs	r3, r3, #8
    1d2c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1d2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d30:	3301      	adds	r3, #1
    1d32:	62a3      	str	r3, [r4, #40]	; 0x28
    1d34:	e7c4      	b.n	1cc0 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1d36:	077b      	lsls	r3, r7, #29
    1d38:	d400      	bmi.n	1d3c <_spi_interrupt_handler+0x180>
    1d3a:	e765      	b.n	1c08 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1d3c:	0020      	movs	r0, r4
    1d3e:	6963      	ldr	r3, [r4, #20]
    1d40:	4798      	blx	r3
    1d42:	e761      	b.n	1c08 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1d44:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1d46:	2b01      	cmp	r3, #1
    1d48:	d000      	beq.n	1d4c <_spi_interrupt_handler+0x190>
    1d4a:	e763      	b.n	1c14 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1d4c:	79e3      	ldrb	r3, [r4, #7]
    1d4e:	2b00      	cmp	r3, #0
    1d50:	d000      	beq.n	1d54 <_spi_interrupt_handler+0x198>
    1d52:	e75f      	b.n	1c14 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1d54:	3302      	adds	r3, #2
    1d56:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1d58:	3301      	adds	r3, #1
    1d5a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1d5c:	2200      	movs	r2, #0
    1d5e:	3335      	adds	r3, #53	; 0x35
    1d60:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1d62:	07fb      	lsls	r3, r7, #31
    1d64:	d400      	bmi.n	1d68 <_spi_interrupt_handler+0x1ac>
    1d66:	e755      	b.n	1c14 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1d68:	0020      	movs	r0, r4
    1d6a:	68e3      	ldr	r3, [r4, #12]
    1d6c:	4798      	blx	r3
    1d6e:	e751      	b.n	1c14 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1d70:	2380      	movs	r3, #128	; 0x80
    1d72:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1d74:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1d76:	067b      	lsls	r3, r7, #25
    1d78:	d400      	bmi.n	1d7c <_spi_interrupt_handler+0x1c0>
    1d7a:	e74f      	b.n	1c1c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d7e:	0020      	movs	r0, r4
    1d80:	4798      	blx	r3
}
    1d82:	e74b      	b.n	1c1c <_spi_interrupt_handler+0x60>
    1d84:	20001160 	.word	0x20001160
    1d88:	20001178 	.word	0x20001178

00001d8c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d8e:	46de      	mov	lr, fp
    1d90:	4657      	mov	r7, sl
    1d92:	464e      	mov	r6, r9
    1d94:	4645      	mov	r5, r8
    1d96:	b5e0      	push	{r5, r6, r7, lr}
    1d98:	b091      	sub	sp, #68	; 0x44
    1d9a:	0005      	movs	r5, r0
    1d9c:	000c      	movs	r4, r1
    1d9e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1da0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1da2:	0008      	movs	r0, r1
    1da4:	4bbc      	ldr	r3, [pc, #752]	; (2098 <STACK_SIZE+0x98>)
    1da6:	4798      	blx	r3
    1da8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1daa:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1dac:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1dae:	07db      	lsls	r3, r3, #31
    1db0:	d506      	bpl.n	1dc0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1db2:	b011      	add	sp, #68	; 0x44
    1db4:	bc3c      	pop	{r2, r3, r4, r5}
    1db6:	4690      	mov	r8, r2
    1db8:	4699      	mov	r9, r3
    1dba:	46a2      	mov	sl, r4
    1dbc:	46ab      	mov	fp, r5
    1dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1dc0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1dc2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1dc4:	079b      	lsls	r3, r3, #30
    1dc6:	d4f4      	bmi.n	1db2 <usart_init+0x26>
    1dc8:	49b4      	ldr	r1, [pc, #720]	; (209c <STACK_SIZE+0x9c>)
    1dca:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1dcc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1dce:	2301      	movs	r3, #1
    1dd0:	40bb      	lsls	r3, r7
    1dd2:	4303      	orrs	r3, r0
    1dd4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1dd6:	a90f      	add	r1, sp, #60	; 0x3c
    1dd8:	272d      	movs	r7, #45	; 0x2d
    1dda:	5df3      	ldrb	r3, [r6, r7]
    1ddc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1dde:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1de0:	b2d3      	uxtb	r3, r2
    1de2:	9302      	str	r3, [sp, #8]
    1de4:	0018      	movs	r0, r3
    1de6:	4bae      	ldr	r3, [pc, #696]	; (20a0 <STACK_SIZE+0xa0>)
    1de8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1dea:	9802      	ldr	r0, [sp, #8]
    1dec:	4bad      	ldr	r3, [pc, #692]	; (20a4 <STACK_SIZE+0xa4>)
    1dee:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1df0:	5df0      	ldrb	r0, [r6, r7]
    1df2:	2100      	movs	r1, #0
    1df4:	4bac      	ldr	r3, [pc, #688]	; (20a8 <STACK_SIZE+0xa8>)
    1df6:	4798      	blx	r3
	module->character_size = config->character_size;
    1df8:	7af3      	ldrb	r3, [r6, #11]
    1dfa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1dfc:	2324      	movs	r3, #36	; 0x24
    1dfe:	5cf3      	ldrb	r3, [r6, r3]
    1e00:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1e02:	2325      	movs	r3, #37	; 0x25
    1e04:	5cf3      	ldrb	r3, [r6, r3]
    1e06:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1e08:	7ef3      	ldrb	r3, [r6, #27]
    1e0a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1e0c:	7f33      	ldrb	r3, [r6, #28]
    1e0e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e10:	682b      	ldr	r3, [r5, #0]
    1e12:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1e14:	0018      	movs	r0, r3
    1e16:	4ba0      	ldr	r3, [pc, #640]	; (2098 <STACK_SIZE+0x98>)
    1e18:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1e1a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1e1c:	2200      	movs	r2, #0
    1e1e:	230e      	movs	r3, #14
    1e20:	a906      	add	r1, sp, #24
    1e22:	468c      	mov	ip, r1
    1e24:	4463      	add	r3, ip
    1e26:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1e28:	8a32      	ldrh	r2, [r6, #16]
    1e2a:	9202      	str	r2, [sp, #8]
    1e2c:	2380      	movs	r3, #128	; 0x80
    1e2e:	01db      	lsls	r3, r3, #7
    1e30:	429a      	cmp	r2, r3
    1e32:	d100      	bne.n	1e36 <usart_init+0xaa>
    1e34:	e09e      	b.n	1f74 <usart_init+0x1e8>
    1e36:	d90f      	bls.n	1e58 <usart_init+0xcc>
    1e38:	23c0      	movs	r3, #192	; 0xc0
    1e3a:	01db      	lsls	r3, r3, #7
    1e3c:	9a02      	ldr	r2, [sp, #8]
    1e3e:	429a      	cmp	r2, r3
    1e40:	d100      	bne.n	1e44 <usart_init+0xb8>
    1e42:	e092      	b.n	1f6a <usart_init+0x1de>
    1e44:	2380      	movs	r3, #128	; 0x80
    1e46:	021b      	lsls	r3, r3, #8
    1e48:	429a      	cmp	r2, r3
    1e4a:	d000      	beq.n	1e4e <usart_init+0xc2>
    1e4c:	e11f      	b.n	208e <STACK_SIZE+0x8e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1e4e:	2303      	movs	r3, #3
    1e50:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1e52:	2300      	movs	r3, #0
    1e54:	9307      	str	r3, [sp, #28]
    1e56:	e008      	b.n	1e6a <usart_init+0xde>
	switch (config->sample_rate) {
    1e58:	2380      	movs	r3, #128	; 0x80
    1e5a:	019b      	lsls	r3, r3, #6
    1e5c:	429a      	cmp	r2, r3
    1e5e:	d000      	beq.n	1e62 <usart_init+0xd6>
    1e60:	e115      	b.n	208e <STACK_SIZE+0x8e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1e62:	2310      	movs	r3, #16
    1e64:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1e66:	3b0f      	subs	r3, #15
    1e68:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1e6a:	6833      	ldr	r3, [r6, #0]
    1e6c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1e6e:	68f3      	ldr	r3, [r6, #12]
    1e70:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1e72:	6973      	ldr	r3, [r6, #20]
    1e74:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1e76:	7e33      	ldrb	r3, [r6, #24]
    1e78:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1e7a:	2326      	movs	r3, #38	; 0x26
    1e7c:	5cf3      	ldrb	r3, [r6, r3]
    1e7e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1e80:	6873      	ldr	r3, [r6, #4]
    1e82:	4699      	mov	r9, r3
	switch (transfer_mode)
    1e84:	2b00      	cmp	r3, #0
    1e86:	d100      	bne.n	1e8a <usart_init+0xfe>
    1e88:	e0a0      	b.n	1fcc <usart_init+0x240>
    1e8a:	2380      	movs	r3, #128	; 0x80
    1e8c:	055b      	lsls	r3, r3, #21
    1e8e:	4599      	cmp	r9, r3
    1e90:	d100      	bne.n	1e94 <usart_init+0x108>
    1e92:	e084      	b.n	1f9e <usart_init+0x212>
	if(config->encoding_format_enable) {
    1e94:	7e73      	ldrb	r3, [r6, #25]
    1e96:	2b00      	cmp	r3, #0
    1e98:	d002      	beq.n	1ea0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1e9a:	7eb3      	ldrb	r3, [r6, #26]
    1e9c:	4642      	mov	r2, r8
    1e9e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1ea0:	682a      	ldr	r2, [r5, #0]
    1ea2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1ea4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	d1fc      	bne.n	1ea4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1eaa:	330e      	adds	r3, #14
    1eac:	aa06      	add	r2, sp, #24
    1eae:	4694      	mov	ip, r2
    1eb0:	4463      	add	r3, ip
    1eb2:	881b      	ldrh	r3, [r3, #0]
    1eb4:	4642      	mov	r2, r8
    1eb6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1eb8:	9b05      	ldr	r3, [sp, #20]
    1eba:	9a03      	ldr	r2, [sp, #12]
    1ebc:	4313      	orrs	r3, r2
    1ebe:	9a04      	ldr	r2, [sp, #16]
    1ec0:	4313      	orrs	r3, r2
    1ec2:	464a      	mov	r2, r9
    1ec4:	4313      	orrs	r3, r2
    1ec6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ec8:	465b      	mov	r3, fp
    1eca:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1ecc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ece:	4653      	mov	r3, sl
    1ed0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1ed2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1ed4:	2327      	movs	r3, #39	; 0x27
    1ed6:	5cf3      	ldrb	r3, [r6, r3]
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d101      	bne.n	1ee0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1edc:	3304      	adds	r3, #4
    1ede:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1ee0:	7e73      	ldrb	r3, [r6, #25]
    1ee2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1ee4:	7f32      	ldrb	r2, [r6, #28]
    1ee6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1ee8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1eea:	7f72      	ldrb	r2, [r6, #29]
    1eec:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1eee:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1ef0:	2224      	movs	r2, #36	; 0x24
    1ef2:	5cb2      	ldrb	r2, [r6, r2]
    1ef4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1ef6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1ef8:	2225      	movs	r2, #37	; 0x25
    1efa:	5cb2      	ldrb	r2, [r6, r2]
    1efc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1efe:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1f00:	7ab1      	ldrb	r1, [r6, #10]
    1f02:	7af2      	ldrb	r2, [r6, #11]
    1f04:	4311      	orrs	r1, r2
    1f06:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1f08:	8933      	ldrh	r3, [r6, #8]
    1f0a:	2bff      	cmp	r3, #255	; 0xff
    1f0c:	d100      	bne.n	1f10 <usart_init+0x184>
    1f0e:	e081      	b.n	2014 <STACK_SIZE+0x14>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1f10:	2280      	movs	r2, #128	; 0x80
    1f12:	0452      	lsls	r2, r2, #17
    1f14:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1f16:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1f18:	232c      	movs	r3, #44	; 0x2c
    1f1a:	5cf3      	ldrb	r3, [r6, r3]
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d103      	bne.n	1f28 <usart_init+0x19c>
    1f20:	4b62      	ldr	r3, [pc, #392]	; (20ac <STACK_SIZE+0xac>)
    1f22:	789b      	ldrb	r3, [r3, #2]
    1f24:	079b      	lsls	r3, r3, #30
    1f26:	d501      	bpl.n	1f2c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1f28:	2380      	movs	r3, #128	; 0x80
    1f2a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f2c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f2e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1f30:	2b00      	cmp	r3, #0
    1f32:	d1fc      	bne.n	1f2e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1f34:	4643      	mov	r3, r8
    1f36:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f38:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f3a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	d1fc      	bne.n	1f3a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1f40:	4643      	mov	r3, r8
    1f42:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1f44:	ab0e      	add	r3, sp, #56	; 0x38
    1f46:	2280      	movs	r2, #128	; 0x80
    1f48:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f4a:	2200      	movs	r2, #0
    1f4c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1f4e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1f50:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1f52:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1f54:	930a      	str	r3, [sp, #40]	; 0x28
    1f56:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1f58:	930b      	str	r3, [sp, #44]	; 0x2c
    1f5a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1f5c:	930c      	str	r3, [sp, #48]	; 0x30
    1f5e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1f60:	9302      	str	r3, [sp, #8]
    1f62:	930d      	str	r3, [sp, #52]	; 0x34
    1f64:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1f66:	ae0a      	add	r6, sp, #40	; 0x28
    1f68:	e063      	b.n	2032 <STACK_SIZE+0x32>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1f6a:	2308      	movs	r3, #8
    1f6c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1f6e:	3b07      	subs	r3, #7
    1f70:	9307      	str	r3, [sp, #28]
    1f72:	e77a      	b.n	1e6a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1f74:	6833      	ldr	r3, [r6, #0]
    1f76:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1f78:	68f3      	ldr	r3, [r6, #12]
    1f7a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1f7c:	6973      	ldr	r3, [r6, #20]
    1f7e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1f80:	7e33      	ldrb	r3, [r6, #24]
    1f82:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1f84:	2326      	movs	r3, #38	; 0x26
    1f86:	5cf3      	ldrb	r3, [r6, r3]
    1f88:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1f8a:	6873      	ldr	r3, [r6, #4]
    1f8c:	4699      	mov	r9, r3
	switch (transfer_mode)
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d018      	beq.n	1fc4 <usart_init+0x238>
    1f92:	2380      	movs	r3, #128	; 0x80
    1f94:	055b      	lsls	r3, r3, #21
    1f96:	4599      	cmp	r9, r3
    1f98:	d001      	beq.n	1f9e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1f9a:	2000      	movs	r0, #0
    1f9c:	e025      	b.n	1fea <usart_init+0x25e>
			if (!config->use_external_clock) {
    1f9e:	2327      	movs	r3, #39	; 0x27
    1fa0:	5cf3      	ldrb	r3, [r6, r3]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d000      	beq.n	1fa8 <usart_init+0x21c>
    1fa6:	e775      	b.n	1e94 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1fa8:	6a33      	ldr	r3, [r6, #32]
    1faa:	001f      	movs	r7, r3
    1fac:	b2c0      	uxtb	r0, r0
    1fae:	4b40      	ldr	r3, [pc, #256]	; (20b0 <STACK_SIZE+0xb0>)
    1fb0:	4798      	blx	r3
    1fb2:	0001      	movs	r1, r0
    1fb4:	220e      	movs	r2, #14
    1fb6:	ab06      	add	r3, sp, #24
    1fb8:	469c      	mov	ip, r3
    1fba:	4462      	add	r2, ip
    1fbc:	0038      	movs	r0, r7
    1fbe:	4b3d      	ldr	r3, [pc, #244]	; (20b4 <STACK_SIZE+0xb4>)
    1fc0:	4798      	blx	r3
    1fc2:	e012      	b.n	1fea <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1fc4:	2308      	movs	r3, #8
    1fc6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1fc8:	2300      	movs	r3, #0
    1fca:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1fcc:	2327      	movs	r3, #39	; 0x27
    1fce:	5cf3      	ldrb	r3, [r6, r3]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d00e      	beq.n	1ff2 <usart_init+0x266>
				status_code =
    1fd4:	9b06      	ldr	r3, [sp, #24]
    1fd6:	9300      	str	r3, [sp, #0]
    1fd8:	9b07      	ldr	r3, [sp, #28]
    1fda:	220e      	movs	r2, #14
    1fdc:	a906      	add	r1, sp, #24
    1fde:	468c      	mov	ip, r1
    1fe0:	4462      	add	r2, ip
    1fe2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1fe4:	6a30      	ldr	r0, [r6, #32]
    1fe6:	4f34      	ldr	r7, [pc, #208]	; (20b8 <STACK_SIZE+0xb8>)
    1fe8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1fea:	2800      	cmp	r0, #0
    1fec:	d000      	beq.n	1ff0 <usart_init+0x264>
    1fee:	e6e0      	b.n	1db2 <usart_init+0x26>
    1ff0:	e750      	b.n	1e94 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1ff2:	6a33      	ldr	r3, [r6, #32]
    1ff4:	001f      	movs	r7, r3
    1ff6:	b2c0      	uxtb	r0, r0
    1ff8:	4b2d      	ldr	r3, [pc, #180]	; (20b0 <STACK_SIZE+0xb0>)
    1ffa:	4798      	blx	r3
    1ffc:	0001      	movs	r1, r0
				status_code =
    1ffe:	9b06      	ldr	r3, [sp, #24]
    2000:	9300      	str	r3, [sp, #0]
    2002:	9b07      	ldr	r3, [sp, #28]
    2004:	220e      	movs	r2, #14
    2006:	a806      	add	r0, sp, #24
    2008:	4684      	mov	ip, r0
    200a:	4462      	add	r2, ip
    200c:	0038      	movs	r0, r7
    200e:	4f2a      	ldr	r7, [pc, #168]	; (20b8 <STACK_SIZE+0xb8>)
    2010:	47b8      	blx	r7
    2012:	e7ea      	b.n	1fea <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2014:	7ef3      	ldrb	r3, [r6, #27]
    2016:	2b00      	cmp	r3, #0
    2018:	d100      	bne.n	201c <STACK_SIZE+0x1c>
    201a:	e77d      	b.n	1f18 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    201c:	2380      	movs	r3, #128	; 0x80
    201e:	04db      	lsls	r3, r3, #19
    2020:	431f      	orrs	r7, r3
    2022:	e779      	b.n	1f18 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2024:	0020      	movs	r0, r4
    2026:	4b25      	ldr	r3, [pc, #148]	; (20bc <STACK_SIZE+0xbc>)
    2028:	4798      	blx	r3
    202a:	e007      	b.n	203c <STACK_SIZE+0x3c>
    202c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    202e:	2f04      	cmp	r7, #4
    2030:	d00d      	beq.n	204e <STACK_SIZE+0x4e>
    2032:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2034:	00bb      	lsls	r3, r7, #2
    2036:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2038:	2800      	cmp	r0, #0
    203a:	d0f3      	beq.n	2024 <STACK_SIZE+0x24>
		if (current_pinmux != PINMUX_UNUSED) {
    203c:	1c43      	adds	r3, r0, #1
    203e:	d0f5      	beq.n	202c <STACK_SIZE+0x2c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2040:	a90e      	add	r1, sp, #56	; 0x38
    2042:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2044:	0c00      	lsrs	r0, r0, #16
    2046:	b2c0      	uxtb	r0, r0
    2048:	4b1d      	ldr	r3, [pc, #116]	; (20c0 <STACK_SIZE+0xc0>)
    204a:	4798      	blx	r3
    204c:	e7ee      	b.n	202c <STACK_SIZE+0x2c>
		module->callback[i]            = NULL;
    204e:	2300      	movs	r3, #0
    2050:	60eb      	str	r3, [r5, #12]
    2052:	612b      	str	r3, [r5, #16]
    2054:	616b      	str	r3, [r5, #20]
    2056:	61ab      	str	r3, [r5, #24]
    2058:	61eb      	str	r3, [r5, #28]
    205a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    205c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    205e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2060:	2200      	movs	r2, #0
    2062:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2064:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2066:	3330      	adds	r3, #48	; 0x30
    2068:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    206a:	3301      	adds	r3, #1
    206c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    206e:	3301      	adds	r3, #1
    2070:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2072:	3301      	adds	r3, #1
    2074:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2076:	6828      	ldr	r0, [r5, #0]
    2078:	4b07      	ldr	r3, [pc, #28]	; (2098 <STACK_SIZE+0x98>)
    207a:	4798      	blx	r3
    207c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    207e:	4911      	ldr	r1, [pc, #68]	; (20c4 <STACK_SIZE+0xc4>)
    2080:	4b11      	ldr	r3, [pc, #68]	; (20c8 <STACK_SIZE+0xc8>)
    2082:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2084:	00a4      	lsls	r4, r4, #2
    2086:	4b11      	ldr	r3, [pc, #68]	; (20cc <STACK_SIZE+0xcc>)
    2088:	50e5      	str	r5, [r4, r3]
	return status_code;
    208a:	2000      	movs	r0, #0
    208c:	e691      	b.n	1db2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    208e:	2310      	movs	r3, #16
    2090:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2092:	2300      	movs	r3, #0
    2094:	9307      	str	r3, [sp, #28]
    2096:	e6e8      	b.n	1e6a <usart_init+0xde>
    2098:	00001591 	.word	0x00001591
    209c:	40000400 	.word	0x40000400
    20a0:	00002939 	.word	0x00002939
    20a4:	000028ad 	.word	0x000028ad
    20a8:	000013cd 	.word	0x000013cd
    20ac:	41002000 	.word	0x41002000
    20b0:	00002955 	.word	0x00002955
    20b4:	0000130f 	.word	0x0000130f
    20b8:	00001339 	.word	0x00001339
    20bc:	00001419 	.word	0x00001419
    20c0:	00002a31 	.word	0x00002a31
    20c4:	0000216d 	.word	0x0000216d
    20c8:	000015cd 	.word	0x000015cd
    20cc:	20001160 	.word	0x20001160

000020d0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    20d0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    20d2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    20d4:	2a00      	cmp	r2, #0
    20d6:	d101      	bne.n	20dc <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    20d8:	0018      	movs	r0, r3
    20da:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    20dc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    20de:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    20e0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    20e2:	2a00      	cmp	r2, #0
    20e4:	d1f8      	bne.n	20d8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    20e6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    20e8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    20ea:	2a00      	cmp	r2, #0
    20ec:	d1fc      	bne.n	20e8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    20ee:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    20f0:	2102      	movs	r1, #2
    20f2:	7e1a      	ldrb	r2, [r3, #24]
    20f4:	420a      	tst	r2, r1
    20f6:	d0fc      	beq.n	20f2 <usart_write_wait+0x22>
	return STATUS_OK;
    20f8:	2300      	movs	r3, #0
    20fa:	e7ed      	b.n	20d8 <usart_write_wait+0x8>

000020fc <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    20fc:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    20fe:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2100:	2a00      	cmp	r2, #0
    2102:	d101      	bne.n	2108 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2104:	0018      	movs	r0, r3
    2106:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2108:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    210a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    210c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    210e:	2a00      	cmp	r2, #0
    2110:	d1f8      	bne.n	2104 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2112:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2114:	7e10      	ldrb	r0, [r2, #24]
    2116:	0740      	lsls	r0, r0, #29
    2118:	d5f4      	bpl.n	2104 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    211a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    211c:	2b00      	cmp	r3, #0
    211e:	d1fc      	bne.n	211a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2120:	8b53      	ldrh	r3, [r2, #26]
    2122:	b2db      	uxtb	r3, r3
	if (error_code) {
    2124:	0698      	lsls	r0, r3, #26
    2126:	d01d      	beq.n	2164 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2128:	0798      	lsls	r0, r3, #30
    212a:	d503      	bpl.n	2134 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    212c:	2302      	movs	r3, #2
    212e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2130:	3318      	adds	r3, #24
    2132:	e7e7      	b.n	2104 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2134:	0758      	lsls	r0, r3, #29
    2136:	d503      	bpl.n	2140 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2138:	2304      	movs	r3, #4
    213a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    213c:	331a      	adds	r3, #26
    213e:	e7e1      	b.n	2104 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2140:	07d8      	lsls	r0, r3, #31
    2142:	d503      	bpl.n	214c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2144:	2301      	movs	r3, #1
    2146:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2148:	3312      	adds	r3, #18
    214a:	e7db      	b.n	2104 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    214c:	06d8      	lsls	r0, r3, #27
    214e:	d503      	bpl.n	2158 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2150:	2310      	movs	r3, #16
    2152:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2154:	3332      	adds	r3, #50	; 0x32
    2156:	e7d5      	b.n	2104 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2158:	069b      	lsls	r3, r3, #26
    215a:	d503      	bpl.n	2164 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    215c:	2320      	movs	r3, #32
    215e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2160:	3321      	adds	r3, #33	; 0x21
    2162:	e7cf      	b.n	2104 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2164:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2166:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2168:	2300      	movs	r3, #0
    216a:	e7cb      	b.n	2104 <usart_read_wait+0x8>

0000216c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    216e:	0080      	lsls	r0, r0, #2
    2170:	4b62      	ldr	r3, [pc, #392]	; (22fc <_usart_interrupt_handler+0x190>)
    2172:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2174:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2176:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2178:	2b00      	cmp	r3, #0
    217a:	d1fc      	bne.n	2176 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    217c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    217e:	7da6      	ldrb	r6, [r4, #22]
    2180:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2182:	2330      	movs	r3, #48	; 0x30
    2184:	5ceb      	ldrb	r3, [r5, r3]
    2186:	2231      	movs	r2, #49	; 0x31
    2188:	5caf      	ldrb	r7, [r5, r2]
    218a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    218c:	07f3      	lsls	r3, r6, #31
    218e:	d522      	bpl.n	21d6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2190:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2192:	b29b      	uxth	r3, r3
    2194:	2b00      	cmp	r3, #0
    2196:	d01c      	beq.n	21d2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2198:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    219a:	7813      	ldrb	r3, [r2, #0]
    219c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    219e:	1c51      	adds	r1, r2, #1
    21a0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    21a2:	7969      	ldrb	r1, [r5, #5]
    21a4:	2901      	cmp	r1, #1
    21a6:	d00e      	beq.n	21c6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    21a8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    21aa:	05db      	lsls	r3, r3, #23
    21ac:	0ddb      	lsrs	r3, r3, #23
    21ae:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    21b0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    21b2:	3b01      	subs	r3, #1
    21b4:	b29b      	uxth	r3, r3
    21b6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    21b8:	2b00      	cmp	r3, #0
    21ba:	d10c      	bne.n	21d6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    21bc:	3301      	adds	r3, #1
    21be:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    21c0:	3301      	adds	r3, #1
    21c2:	75a3      	strb	r3, [r4, #22]
    21c4:	e007      	b.n	21d6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    21c6:	7851      	ldrb	r1, [r2, #1]
    21c8:	0209      	lsls	r1, r1, #8
    21ca:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    21cc:	3202      	adds	r2, #2
    21ce:	62aa      	str	r2, [r5, #40]	; 0x28
    21d0:	e7eb      	b.n	21aa <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    21d2:	2301      	movs	r3, #1
    21d4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    21d6:	07b3      	lsls	r3, r6, #30
    21d8:	d506      	bpl.n	21e8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    21da:	2302      	movs	r3, #2
    21dc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    21de:	2200      	movs	r2, #0
    21e0:	3331      	adds	r3, #49	; 0x31
    21e2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    21e4:	07fb      	lsls	r3, r7, #31
    21e6:	d41a      	bmi.n	221e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    21e8:	0773      	lsls	r3, r6, #29
    21ea:	d565      	bpl.n	22b8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    21ec:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    21ee:	b29b      	uxth	r3, r3
    21f0:	2b00      	cmp	r3, #0
    21f2:	d05f      	beq.n	22b4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    21f4:	8b63      	ldrh	r3, [r4, #26]
    21f6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    21f8:	071a      	lsls	r2, r3, #28
    21fa:	d414      	bmi.n	2226 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    21fc:	223f      	movs	r2, #63	; 0x3f
    21fe:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2200:	2b00      	cmp	r3, #0
    2202:	d034      	beq.n	226e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2204:	079a      	lsls	r2, r3, #30
    2206:	d511      	bpl.n	222c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2208:	221a      	movs	r2, #26
    220a:	2332      	movs	r3, #50	; 0x32
    220c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    220e:	3b30      	subs	r3, #48	; 0x30
    2210:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2212:	077b      	lsls	r3, r7, #29
    2214:	d550      	bpl.n	22b8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2216:	0028      	movs	r0, r5
    2218:	696b      	ldr	r3, [r5, #20]
    221a:	4798      	blx	r3
    221c:	e04c      	b.n	22b8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    221e:	0028      	movs	r0, r5
    2220:	68eb      	ldr	r3, [r5, #12]
    2222:	4798      	blx	r3
    2224:	e7e0      	b.n	21e8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2226:	2237      	movs	r2, #55	; 0x37
    2228:	4013      	ands	r3, r2
    222a:	e7e9      	b.n	2200 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    222c:	075a      	lsls	r2, r3, #29
    222e:	d505      	bpl.n	223c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2230:	221e      	movs	r2, #30
    2232:	2332      	movs	r3, #50	; 0x32
    2234:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2236:	3b2e      	subs	r3, #46	; 0x2e
    2238:	8363      	strh	r3, [r4, #26]
    223a:	e7ea      	b.n	2212 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    223c:	07da      	lsls	r2, r3, #31
    223e:	d505      	bpl.n	224c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2240:	2213      	movs	r2, #19
    2242:	2332      	movs	r3, #50	; 0x32
    2244:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2246:	3b31      	subs	r3, #49	; 0x31
    2248:	8363      	strh	r3, [r4, #26]
    224a:	e7e2      	b.n	2212 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    224c:	06da      	lsls	r2, r3, #27
    224e:	d505      	bpl.n	225c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2250:	2242      	movs	r2, #66	; 0x42
    2252:	2332      	movs	r3, #50	; 0x32
    2254:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2256:	3b22      	subs	r3, #34	; 0x22
    2258:	8363      	strh	r3, [r4, #26]
    225a:	e7da      	b.n	2212 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    225c:	2220      	movs	r2, #32
    225e:	421a      	tst	r2, r3
    2260:	d0d7      	beq.n	2212 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2262:	3221      	adds	r2, #33	; 0x21
    2264:	2332      	movs	r3, #50	; 0x32
    2266:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2268:	3b12      	subs	r3, #18
    226a:	8363      	strh	r3, [r4, #26]
    226c:	e7d1      	b.n	2212 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    226e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2270:	05db      	lsls	r3, r3, #23
    2272:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2274:	b2da      	uxtb	r2, r3
    2276:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2278:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    227a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    227c:	1c51      	adds	r1, r2, #1
    227e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2280:	7969      	ldrb	r1, [r5, #5]
    2282:	2901      	cmp	r1, #1
    2284:	d010      	beq.n	22a8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2286:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2288:	3b01      	subs	r3, #1
    228a:	b29b      	uxth	r3, r3
    228c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    228e:	2b00      	cmp	r3, #0
    2290:	d112      	bne.n	22b8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2292:	3304      	adds	r3, #4
    2294:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2296:	2200      	movs	r2, #0
    2298:	332e      	adds	r3, #46	; 0x2e
    229a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    229c:	07bb      	lsls	r3, r7, #30
    229e:	d50b      	bpl.n	22b8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    22a0:	0028      	movs	r0, r5
    22a2:	692b      	ldr	r3, [r5, #16]
    22a4:	4798      	blx	r3
    22a6:	e007      	b.n	22b8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    22a8:	0a1b      	lsrs	r3, r3, #8
    22aa:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    22ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    22ae:	3301      	adds	r3, #1
    22b0:	626b      	str	r3, [r5, #36]	; 0x24
    22b2:	e7e8      	b.n	2286 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    22b4:	2304      	movs	r3, #4
    22b6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    22b8:	06f3      	lsls	r3, r6, #27
    22ba:	d504      	bpl.n	22c6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    22bc:	2310      	movs	r3, #16
    22be:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    22c0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    22c2:	06fb      	lsls	r3, r7, #27
    22c4:	d40e      	bmi.n	22e4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    22c6:	06b3      	lsls	r3, r6, #26
    22c8:	d504      	bpl.n	22d4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    22ca:	2320      	movs	r3, #32
    22cc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    22ce:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    22d0:	073b      	lsls	r3, r7, #28
    22d2:	d40b      	bmi.n	22ec <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    22d4:	0733      	lsls	r3, r6, #28
    22d6:	d504      	bpl.n	22e2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    22d8:	2308      	movs	r3, #8
    22da:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    22dc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    22de:	06bb      	lsls	r3, r7, #26
    22e0:	d408      	bmi.n	22f4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    22e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    22e4:	0028      	movs	r0, r5
    22e6:	69eb      	ldr	r3, [r5, #28]
    22e8:	4798      	blx	r3
    22ea:	e7ec      	b.n	22c6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    22ec:	0028      	movs	r0, r5
    22ee:	69ab      	ldr	r3, [r5, #24]
    22f0:	4798      	blx	r3
    22f2:	e7ef      	b.n	22d4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    22f4:	6a2b      	ldr	r3, [r5, #32]
    22f6:	0028      	movs	r0, r5
    22f8:	4798      	blx	r3
}
    22fa:	e7f2      	b.n	22e2 <_usart_interrupt_handler+0x176>
    22fc:	20001160 	.word	0x20001160

00002300 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2300:	b510      	push	{r4, lr}
	switch (clock_source) {
    2302:	2808      	cmp	r0, #8
    2304:	d803      	bhi.n	230e <system_clock_source_get_hz+0xe>
    2306:	0080      	lsls	r0, r0, #2
    2308:	4b1b      	ldr	r3, [pc, #108]	; (2378 <system_clock_source_get_hz+0x78>)
    230a:	581b      	ldr	r3, [r3, r0]
    230c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    230e:	2000      	movs	r0, #0
    2310:	e030      	b.n	2374 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2312:	4b1a      	ldr	r3, [pc, #104]	; (237c <system_clock_source_get_hz+0x7c>)
    2314:	6918      	ldr	r0, [r3, #16]
    2316:	e02d      	b.n	2374 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2318:	4b19      	ldr	r3, [pc, #100]	; (2380 <system_clock_source_get_hz+0x80>)
    231a:	6a1b      	ldr	r3, [r3, #32]
    231c:	059b      	lsls	r3, r3, #22
    231e:	0f9b      	lsrs	r3, r3, #30
    2320:	4818      	ldr	r0, [pc, #96]	; (2384 <system_clock_source_get_hz+0x84>)
    2322:	40d8      	lsrs	r0, r3
    2324:	e026      	b.n	2374 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2326:	4b15      	ldr	r3, [pc, #84]	; (237c <system_clock_source_get_hz+0x7c>)
    2328:	6958      	ldr	r0, [r3, #20]
    232a:	e023      	b.n	2374 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    232c:	4b13      	ldr	r3, [pc, #76]	; (237c <system_clock_source_get_hz+0x7c>)
    232e:	681b      	ldr	r3, [r3, #0]
			return 0;
    2330:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2332:	079b      	lsls	r3, r3, #30
    2334:	d51e      	bpl.n	2374 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2336:	4912      	ldr	r1, [pc, #72]	; (2380 <system_clock_source_get_hz+0x80>)
    2338:	2210      	movs	r2, #16
    233a:	68cb      	ldr	r3, [r1, #12]
    233c:	421a      	tst	r2, r3
    233e:	d0fc      	beq.n	233a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2340:	4b0e      	ldr	r3, [pc, #56]	; (237c <system_clock_source_get_hz+0x7c>)
    2342:	681b      	ldr	r3, [r3, #0]
    2344:	075b      	lsls	r3, r3, #29
    2346:	d401      	bmi.n	234c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2348:	480f      	ldr	r0, [pc, #60]	; (2388 <system_clock_source_get_hz+0x88>)
    234a:	e013      	b.n	2374 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    234c:	2000      	movs	r0, #0
    234e:	4b0f      	ldr	r3, [pc, #60]	; (238c <system_clock_source_get_hz+0x8c>)
    2350:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2352:	4b0a      	ldr	r3, [pc, #40]	; (237c <system_clock_source_get_hz+0x7c>)
    2354:	689b      	ldr	r3, [r3, #8]
    2356:	041b      	lsls	r3, r3, #16
    2358:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    235a:	4358      	muls	r0, r3
    235c:	e00a      	b.n	2374 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    235e:	2350      	movs	r3, #80	; 0x50
    2360:	4a07      	ldr	r2, [pc, #28]	; (2380 <system_clock_source_get_hz+0x80>)
    2362:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2364:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2366:	075b      	lsls	r3, r3, #29
    2368:	d504      	bpl.n	2374 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    236a:	4b04      	ldr	r3, [pc, #16]	; (237c <system_clock_source_get_hz+0x7c>)
    236c:	68d8      	ldr	r0, [r3, #12]
    236e:	e001      	b.n	2374 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2370:	2080      	movs	r0, #128	; 0x80
    2372:	0200      	lsls	r0, r0, #8
	}
}
    2374:	bd10      	pop	{r4, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	0000463c 	.word	0x0000463c
    237c:	20000138 	.word	0x20000138
    2380:	40000800 	.word	0x40000800
    2384:	007a1200 	.word	0x007a1200
    2388:	02dc6c00 	.word	0x02dc6c00
    238c:	00002955 	.word	0x00002955

00002390 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2390:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2392:	490c      	ldr	r1, [pc, #48]	; (23c4 <system_clock_source_osc8m_set_config+0x34>)
    2394:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2396:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2398:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    239a:	7840      	ldrb	r0, [r0, #1]
    239c:	2201      	movs	r2, #1
    239e:	4010      	ands	r0, r2
    23a0:	0180      	lsls	r0, r0, #6
    23a2:	2640      	movs	r6, #64	; 0x40
    23a4:	43b3      	bics	r3, r6
    23a6:	4303      	orrs	r3, r0
    23a8:	402a      	ands	r2, r5
    23aa:	01d2      	lsls	r2, r2, #7
    23ac:	2080      	movs	r0, #128	; 0x80
    23ae:	4383      	bics	r3, r0
    23b0:	4313      	orrs	r3, r2
    23b2:	2203      	movs	r2, #3
    23b4:	4022      	ands	r2, r4
    23b6:	0212      	lsls	r2, r2, #8
    23b8:	4803      	ldr	r0, [pc, #12]	; (23c8 <system_clock_source_osc8m_set_config+0x38>)
    23ba:	4003      	ands	r3, r0
    23bc:	4313      	orrs	r3, r2
    23be:	620b      	str	r3, [r1, #32]
}
    23c0:	bd70      	pop	{r4, r5, r6, pc}
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	40000800 	.word	0x40000800
    23c8:	fffffcff 	.word	0xfffffcff

000023cc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    23cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ce:	46de      	mov	lr, fp
    23d0:	4657      	mov	r7, sl
    23d2:	464e      	mov	r6, r9
    23d4:	4645      	mov	r5, r8
    23d6:	b5e0      	push	{r5, r6, r7, lr}
    23d8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    23da:	4b26      	ldr	r3, [pc, #152]	; (2474 <system_clock_source_xosc32k_set_config+0xa8>)
    23dc:	469b      	mov	fp, r3
    23de:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    23e0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    23e2:	7800      	ldrb	r0, [r0, #0]
    23e4:	4242      	negs	r2, r0
    23e6:	4142      	adcs	r2, r0
    23e8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    23ea:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    23ec:	78ca      	ldrb	r2, [r1, #3]
    23ee:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    23f0:	790a      	ldrb	r2, [r1, #4]
    23f2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    23f4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    23f6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    23f8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    23fa:	688a      	ldr	r2, [r1, #8]
    23fc:	491e      	ldr	r1, [pc, #120]	; (2478 <system_clock_source_xosc32k_set_config+0xac>)
    23fe:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2400:	2101      	movs	r1, #1
    2402:	464a      	mov	r2, r9
    2404:	0092      	lsls	r2, r2, #2
    2406:	4691      	mov	r9, r2
    2408:	2204      	movs	r2, #4
    240a:	4393      	bics	r3, r2
    240c:	464a      	mov	r2, r9
    240e:	4313      	orrs	r3, r2
    2410:	4642      	mov	r2, r8
    2412:	400a      	ands	r2, r1
    2414:	00d2      	lsls	r2, r2, #3
    2416:	4690      	mov	r8, r2
    2418:	2208      	movs	r2, #8
    241a:	4393      	bics	r3, r2
    241c:	4642      	mov	r2, r8
    241e:	4313      	orrs	r3, r2
    2420:	4662      	mov	r2, ip
    2422:	400a      	ands	r2, r1
    2424:	0112      	lsls	r2, r2, #4
    2426:	4694      	mov	ip, r2
    2428:	2210      	movs	r2, #16
    242a:	4393      	bics	r3, r2
    242c:	4662      	mov	r2, ip
    242e:	4313      	orrs	r3, r2
    2430:	4008      	ands	r0, r1
    2432:	0140      	lsls	r0, r0, #5
    2434:	2220      	movs	r2, #32
    2436:	4393      	bics	r3, r2
    2438:	4303      	orrs	r3, r0
    243a:	400f      	ands	r7, r1
    243c:	01bf      	lsls	r7, r7, #6
    243e:	2040      	movs	r0, #64	; 0x40
    2440:	4383      	bics	r3, r0
    2442:	433b      	orrs	r3, r7
    2444:	400e      	ands	r6, r1
    2446:	01f6      	lsls	r6, r6, #7
    2448:	3040      	adds	r0, #64	; 0x40
    244a:	4383      	bics	r3, r0
    244c:	4333      	orrs	r3, r6
    244e:	3879      	subs	r0, #121	; 0x79
    2450:	4005      	ands	r5, r0
    2452:	022d      	lsls	r5, r5, #8
    2454:	4809      	ldr	r0, [pc, #36]	; (247c <system_clock_source_xosc32k_set_config+0xb0>)
    2456:	4003      	ands	r3, r0
    2458:	432b      	orrs	r3, r5
    245a:	4021      	ands	r1, r4
    245c:	0309      	lsls	r1, r1, #12
    245e:	4808      	ldr	r0, [pc, #32]	; (2480 <system_clock_source_xosc32k_set_config+0xb4>)
    2460:	4003      	ands	r3, r0
    2462:	430b      	orrs	r3, r1
    2464:	465a      	mov	r2, fp
    2466:	8293      	strh	r3, [r2, #20]
}
    2468:	bc3c      	pop	{r2, r3, r4, r5}
    246a:	4690      	mov	r8, r2
    246c:	4699      	mov	r9, r3
    246e:	46a2      	mov	sl, r4
    2470:	46ab      	mov	fp, r5
    2472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2474:	40000800 	.word	0x40000800
    2478:	20000138 	.word	0x20000138
    247c:	fffff8ff 	.word	0xfffff8ff
    2480:	ffffefff 	.word	0xffffefff

00002484 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2484:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2486:	7a03      	ldrb	r3, [r0, #8]
    2488:	069b      	lsls	r3, r3, #26
    248a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    248c:	8942      	ldrh	r2, [r0, #10]
    248e:	0592      	lsls	r2, r2, #22
    2490:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2492:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2494:	4918      	ldr	r1, [pc, #96]	; (24f8 <system_clock_source_dfll_set_config+0x74>)
    2496:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2498:	7983      	ldrb	r3, [r0, #6]
    249a:	79c2      	ldrb	r2, [r0, #7]
    249c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    249e:	8842      	ldrh	r2, [r0, #2]
    24a0:	8884      	ldrh	r4, [r0, #4]
    24a2:	4322      	orrs	r2, r4
    24a4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    24a6:	7842      	ldrb	r2, [r0, #1]
    24a8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    24aa:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    24ac:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    24ae:	7803      	ldrb	r3, [r0, #0]
    24b0:	2b04      	cmp	r3, #4
    24b2:	d011      	beq.n	24d8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    24b4:	2b20      	cmp	r3, #32
    24b6:	d10e      	bne.n	24d6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    24b8:	7b03      	ldrb	r3, [r0, #12]
    24ba:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    24bc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    24be:	4313      	orrs	r3, r2
    24c0:	89c2      	ldrh	r2, [r0, #14]
    24c2:	0412      	lsls	r2, r2, #16
    24c4:	490d      	ldr	r1, [pc, #52]	; (24fc <system_clock_source_dfll_set_config+0x78>)
    24c6:	400a      	ands	r2, r1
    24c8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    24ca:	4a0b      	ldr	r2, [pc, #44]	; (24f8 <system_clock_source_dfll_set_config+0x74>)
    24cc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    24ce:	6811      	ldr	r1, [r2, #0]
    24d0:	4b0b      	ldr	r3, [pc, #44]	; (2500 <system_clock_source_dfll_set_config+0x7c>)
    24d2:	430b      	orrs	r3, r1
    24d4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    24d6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    24d8:	7b03      	ldrb	r3, [r0, #12]
    24da:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    24dc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    24de:	4313      	orrs	r3, r2
    24e0:	89c2      	ldrh	r2, [r0, #14]
    24e2:	0412      	lsls	r2, r2, #16
    24e4:	4905      	ldr	r1, [pc, #20]	; (24fc <system_clock_source_dfll_set_config+0x78>)
    24e6:	400a      	ands	r2, r1
    24e8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    24ea:	4a03      	ldr	r2, [pc, #12]	; (24f8 <system_clock_source_dfll_set_config+0x74>)
    24ec:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    24ee:	6813      	ldr	r3, [r2, #0]
    24f0:	2104      	movs	r1, #4
    24f2:	430b      	orrs	r3, r1
    24f4:	6013      	str	r3, [r2, #0]
    24f6:	e7ee      	b.n	24d6 <system_clock_source_dfll_set_config+0x52>
    24f8:	20000138 	.word	0x20000138
    24fc:	03ff0000 	.word	0x03ff0000
    2500:	00000424 	.word	0x00000424

00002504 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2504:	2808      	cmp	r0, #8
    2506:	d803      	bhi.n	2510 <system_clock_source_enable+0xc>
    2508:	0080      	lsls	r0, r0, #2
    250a:	4b25      	ldr	r3, [pc, #148]	; (25a0 <system_clock_source_enable+0x9c>)
    250c:	581b      	ldr	r3, [r3, r0]
    250e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2510:	2017      	movs	r0, #23
    2512:	e044      	b.n	259e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2514:	4a23      	ldr	r2, [pc, #140]	; (25a4 <system_clock_source_enable+0xa0>)
    2516:	6a13      	ldr	r3, [r2, #32]
    2518:	2102      	movs	r1, #2
    251a:	430b      	orrs	r3, r1
    251c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    251e:	2000      	movs	r0, #0
    2520:	e03d      	b.n	259e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2522:	4a20      	ldr	r2, [pc, #128]	; (25a4 <system_clock_source_enable+0xa0>)
    2524:	6993      	ldr	r3, [r2, #24]
    2526:	2102      	movs	r1, #2
    2528:	430b      	orrs	r3, r1
    252a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    252c:	2000      	movs	r0, #0
		break;
    252e:	e036      	b.n	259e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2530:	4a1c      	ldr	r2, [pc, #112]	; (25a4 <system_clock_source_enable+0xa0>)
    2532:	8a13      	ldrh	r3, [r2, #16]
    2534:	2102      	movs	r1, #2
    2536:	430b      	orrs	r3, r1
    2538:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    253a:	2000      	movs	r0, #0
		break;
    253c:	e02f      	b.n	259e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    253e:	4a19      	ldr	r2, [pc, #100]	; (25a4 <system_clock_source_enable+0xa0>)
    2540:	8a93      	ldrh	r3, [r2, #20]
    2542:	2102      	movs	r1, #2
    2544:	430b      	orrs	r3, r1
    2546:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2548:	2000      	movs	r0, #0
		break;
    254a:	e028      	b.n	259e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    254c:	4916      	ldr	r1, [pc, #88]	; (25a8 <system_clock_source_enable+0xa4>)
    254e:	680b      	ldr	r3, [r1, #0]
    2550:	2202      	movs	r2, #2
    2552:	4313      	orrs	r3, r2
    2554:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2556:	4b13      	ldr	r3, [pc, #76]	; (25a4 <system_clock_source_enable+0xa0>)
    2558:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    255a:	0019      	movs	r1, r3
    255c:	320e      	adds	r2, #14
    255e:	68cb      	ldr	r3, [r1, #12]
    2560:	421a      	tst	r2, r3
    2562:	d0fc      	beq.n	255e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2564:	4a10      	ldr	r2, [pc, #64]	; (25a8 <system_clock_source_enable+0xa4>)
    2566:	6891      	ldr	r1, [r2, #8]
    2568:	4b0e      	ldr	r3, [pc, #56]	; (25a4 <system_clock_source_enable+0xa0>)
    256a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    256c:	6852      	ldr	r2, [r2, #4]
    256e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2570:	2200      	movs	r2, #0
    2572:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2574:	0019      	movs	r1, r3
    2576:	3210      	adds	r2, #16
    2578:	68cb      	ldr	r3, [r1, #12]
    257a:	421a      	tst	r2, r3
    257c:	d0fc      	beq.n	2578 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    257e:	4b0a      	ldr	r3, [pc, #40]	; (25a8 <system_clock_source_enable+0xa4>)
    2580:	681b      	ldr	r3, [r3, #0]
    2582:	b29b      	uxth	r3, r3
    2584:	4a07      	ldr	r2, [pc, #28]	; (25a4 <system_clock_source_enable+0xa0>)
    2586:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2588:	2000      	movs	r0, #0
    258a:	e008      	b.n	259e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    258c:	4905      	ldr	r1, [pc, #20]	; (25a4 <system_clock_source_enable+0xa0>)
    258e:	2244      	movs	r2, #68	; 0x44
    2590:	5c8b      	ldrb	r3, [r1, r2]
    2592:	2002      	movs	r0, #2
    2594:	4303      	orrs	r3, r0
    2596:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2598:	2000      	movs	r0, #0
		break;
    259a:	e000      	b.n	259e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    259c:	2000      	movs	r0, #0
}
    259e:	4770      	bx	lr
    25a0:	00004660 	.word	0x00004660
    25a4:	40000800 	.word	0x40000800
    25a8:	20000138 	.word	0x20000138

000025ac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    25ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ae:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    25b0:	22c2      	movs	r2, #194	; 0xc2
    25b2:	00d2      	lsls	r2, r2, #3
    25b4:	4b45      	ldr	r3, [pc, #276]	; (26cc <system_clock_init+0x120>)
    25b6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    25b8:	4a45      	ldr	r2, [pc, #276]	; (26d0 <system_clock_init+0x124>)
    25ba:	6853      	ldr	r3, [r2, #4]
    25bc:	211e      	movs	r1, #30
    25be:	438b      	bics	r3, r1
    25c0:	391a      	subs	r1, #26
    25c2:	430b      	orrs	r3, r1
    25c4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    25c6:	2202      	movs	r2, #2
    25c8:	ab01      	add	r3, sp, #4
    25ca:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    25cc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    25ce:	4d41      	ldr	r5, [pc, #260]	; (26d4 <system_clock_init+0x128>)
    25d0:	b2e0      	uxtb	r0, r4
    25d2:	a901      	add	r1, sp, #4
    25d4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    25d6:	3401      	adds	r4, #1
    25d8:	2c25      	cmp	r4, #37	; 0x25
    25da:	d1f9      	bne.n	25d0 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    25dc:	a80a      	add	r0, sp, #40	; 0x28
    25de:	2300      	movs	r3, #0
    25e0:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    25e2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    25e4:	2280      	movs	r2, #128	; 0x80
    25e6:	0212      	lsls	r2, r2, #8
    25e8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    25ea:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    25ec:	2201      	movs	r2, #1
    25ee:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    25f0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    25f2:	2106      	movs	r1, #6
    25f4:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    25f6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    25f8:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    25fa:	4b37      	ldr	r3, [pc, #220]	; (26d8 <system_clock_init+0x12c>)
    25fc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    25fe:	2005      	movs	r0, #5
    2600:	4b36      	ldr	r3, [pc, #216]	; (26dc <system_clock_init+0x130>)
    2602:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2604:	4931      	ldr	r1, [pc, #196]	; (26cc <system_clock_init+0x120>)
    2606:	2202      	movs	r2, #2
    2608:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    260a:	421a      	tst	r2, r3
    260c:	d0fc      	beq.n	2608 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    260e:	ab05      	add	r3, sp, #20
    2610:	2100      	movs	r1, #0
    2612:	2200      	movs	r2, #0
    2614:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2616:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2618:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    261a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    261c:	313f      	adds	r1, #63	; 0x3f
    261e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2620:	393b      	subs	r1, #59	; 0x3b
    2622:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2624:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2626:	4b2e      	ldr	r3, [pc, #184]	; (26e0 <system_clock_init+0x134>)
    2628:	681b      	ldr	r3, [r3, #0]
    262a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    262c:	2b3f      	cmp	r3, #63	; 0x3f
    262e:	d04b      	beq.n	26c8 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2630:	a805      	add	r0, sp, #20
    2632:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2634:	23b7      	movs	r3, #183	; 0xb7
    2636:	00db      	lsls	r3, r3, #3
    2638:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    263a:	2303      	movs	r3, #3
    263c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    263e:	331c      	adds	r3, #28
    2640:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2642:	4b28      	ldr	r3, [pc, #160]	; (26e4 <system_clock_init+0x138>)
    2644:	4798      	blx	r3
	config->on_demand       = true;
    2646:	a804      	add	r0, sp, #16
    2648:	2501      	movs	r5, #1
    264a:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    264c:	2600      	movs	r6, #0
    264e:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2650:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2652:	4b25      	ldr	r3, [pc, #148]	; (26e8 <system_clock_init+0x13c>)
    2654:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2656:	2006      	movs	r0, #6
    2658:	4f20      	ldr	r7, [pc, #128]	; (26dc <system_clock_init+0x130>)
    265a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    265c:	4b23      	ldr	r3, [pc, #140]	; (26ec <system_clock_init+0x140>)
    265e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2660:	ac01      	add	r4, sp, #4
    2662:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    2664:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2666:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    2668:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    266a:	2305      	movs	r3, #5
    266c:	7023      	strb	r3, [r4, #0]
    266e:	0021      	movs	r1, r4
    2670:	2001      	movs	r0, #1
    2672:	4b1f      	ldr	r3, [pc, #124]	; (26f0 <system_clock_init+0x144>)
    2674:	4798      	blx	r3
    2676:	2001      	movs	r0, #1
    2678:	4b1e      	ldr	r3, [pc, #120]	; (26f4 <system_clock_init+0x148>)
    267a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    267c:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    267e:	0021      	movs	r1, r4
    2680:	2000      	movs	r0, #0
    2682:	4b14      	ldr	r3, [pc, #80]	; (26d4 <system_clock_init+0x128>)
    2684:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2686:	2000      	movs	r0, #0
    2688:	4b1b      	ldr	r3, [pc, #108]	; (26f8 <system_clock_init+0x14c>)
    268a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    268c:	2007      	movs	r0, #7
    268e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2690:	490e      	ldr	r1, [pc, #56]	; (26cc <system_clock_init+0x120>)
    2692:	22d0      	movs	r2, #208	; 0xd0
    2694:	68cb      	ldr	r3, [r1, #12]
    2696:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2698:	2bd0      	cmp	r3, #208	; 0xd0
    269a:	d1fb      	bne.n	2694 <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    269c:	4a17      	ldr	r2, [pc, #92]	; (26fc <system_clock_init+0x150>)
    269e:	2300      	movs	r3, #0
    26a0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    26a2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    26a4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    26a6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    26a8:	a901      	add	r1, sp, #4
    26aa:	2201      	movs	r2, #1
    26ac:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    26ae:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    26b0:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    26b2:	3307      	adds	r3, #7
    26b4:	700b      	strb	r3, [r1, #0]
    26b6:	720a      	strb	r2, [r1, #8]
    26b8:	2000      	movs	r0, #0
    26ba:	4b0d      	ldr	r3, [pc, #52]	; (26f0 <system_clock_init+0x144>)
    26bc:	4798      	blx	r3
    26be:	2000      	movs	r0, #0
    26c0:	4b0c      	ldr	r3, [pc, #48]	; (26f4 <system_clock_init+0x148>)
    26c2:	4798      	blx	r3
#endif
}
    26c4:	b00f      	add	sp, #60	; 0x3c
    26c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    26c8:	3b20      	subs	r3, #32
    26ca:	e7b1      	b.n	2630 <system_clock_init+0x84>
    26cc:	40000800 	.word	0x40000800
    26d0:	41004000 	.word	0x41004000
    26d4:	00002939 	.word	0x00002939
    26d8:	000023cd 	.word	0x000023cd
    26dc:	00002505 	.word	0x00002505
    26e0:	00806024 	.word	0x00806024
    26e4:	00002485 	.word	0x00002485
    26e8:	00002391 	.word	0x00002391
    26ec:	00002701 	.word	0x00002701
    26f0:	00002725 	.word	0x00002725
    26f4:	000027dd 	.word	0x000027dd
    26f8:	000028ad 	.word	0x000028ad
    26fc:	40000400 	.word	0x40000400

00002700 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2700:	4a06      	ldr	r2, [pc, #24]	; (271c <system_gclk_init+0x1c>)
    2702:	6993      	ldr	r3, [r2, #24]
    2704:	2108      	movs	r1, #8
    2706:	430b      	orrs	r3, r1
    2708:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    270a:	2201      	movs	r2, #1
    270c:	4b04      	ldr	r3, [pc, #16]	; (2720 <system_gclk_init+0x20>)
    270e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2710:	0019      	movs	r1, r3
    2712:	780b      	ldrb	r3, [r1, #0]
    2714:	4213      	tst	r3, r2
    2716:	d1fc      	bne.n	2712 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2718:	4770      	bx	lr
    271a:	46c0      	nop			; (mov r8, r8)
    271c:	40000400 	.word	0x40000400
    2720:	40000c00 	.word	0x40000c00

00002724 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2724:	b570      	push	{r4, r5, r6, lr}
    2726:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2728:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    272a:	780d      	ldrb	r5, [r1, #0]
    272c:	022d      	lsls	r5, r5, #8
    272e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2730:	784b      	ldrb	r3, [r1, #1]
    2732:	2b00      	cmp	r3, #0
    2734:	d002      	beq.n	273c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2736:	2380      	movs	r3, #128	; 0x80
    2738:	02db      	lsls	r3, r3, #11
    273a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    273c:	7a4b      	ldrb	r3, [r1, #9]
    273e:	2b00      	cmp	r3, #0
    2740:	d002      	beq.n	2748 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2742:	2380      	movs	r3, #128	; 0x80
    2744:	031b      	lsls	r3, r3, #12
    2746:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2748:	6848      	ldr	r0, [r1, #4]
    274a:	2801      	cmp	r0, #1
    274c:	d910      	bls.n	2770 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    274e:	1e43      	subs	r3, r0, #1
    2750:	4218      	tst	r0, r3
    2752:	d134      	bne.n	27be <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2754:	2802      	cmp	r0, #2
    2756:	d930      	bls.n	27ba <system_gclk_gen_set_config+0x96>
    2758:	2302      	movs	r3, #2
    275a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    275c:	3201      	adds	r2, #1
						mask <<= 1) {
    275e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2760:	4298      	cmp	r0, r3
    2762:	d8fb      	bhi.n	275c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2764:	0212      	lsls	r2, r2, #8
    2766:	4332      	orrs	r2, r6
    2768:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    276a:	2380      	movs	r3, #128	; 0x80
    276c:	035b      	lsls	r3, r3, #13
    276e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2770:	7a0b      	ldrb	r3, [r1, #8]
    2772:	2b00      	cmp	r3, #0
    2774:	d002      	beq.n	277c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2776:	2380      	movs	r3, #128	; 0x80
    2778:	039b      	lsls	r3, r3, #14
    277a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    277c:	4a13      	ldr	r2, [pc, #76]	; (27cc <system_gclk_gen_set_config+0xa8>)
    277e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2780:	b25b      	sxtb	r3, r3
    2782:	2b00      	cmp	r3, #0
    2784:	dbfb      	blt.n	277e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2786:	4b12      	ldr	r3, [pc, #72]	; (27d0 <system_gclk_gen_set_config+0xac>)
    2788:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    278a:	4b12      	ldr	r3, [pc, #72]	; (27d4 <system_gclk_gen_set_config+0xb0>)
    278c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    278e:	4a0f      	ldr	r2, [pc, #60]	; (27cc <system_gclk_gen_set_config+0xa8>)
    2790:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2792:	b25b      	sxtb	r3, r3
    2794:	2b00      	cmp	r3, #0
    2796:	dbfb      	blt.n	2790 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2798:	4b0c      	ldr	r3, [pc, #48]	; (27cc <system_gclk_gen_set_config+0xa8>)
    279a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    279c:	001a      	movs	r2, r3
    279e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    27a0:	b25b      	sxtb	r3, r3
    27a2:	2b00      	cmp	r3, #0
    27a4:	dbfb      	blt.n	279e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    27a6:	4a09      	ldr	r2, [pc, #36]	; (27cc <system_gclk_gen_set_config+0xa8>)
    27a8:	6853      	ldr	r3, [r2, #4]
    27aa:	2180      	movs	r1, #128	; 0x80
    27ac:	0249      	lsls	r1, r1, #9
    27ae:	400b      	ands	r3, r1
    27b0:	431d      	orrs	r5, r3
    27b2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    27b4:	4b08      	ldr	r3, [pc, #32]	; (27d8 <system_gclk_gen_set_config+0xb4>)
    27b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27b8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    27ba:	2200      	movs	r2, #0
    27bc:	e7d2      	b.n	2764 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    27be:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    27c0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    27c2:	2380      	movs	r3, #128	; 0x80
    27c4:	029b      	lsls	r3, r3, #10
    27c6:	431d      	orrs	r5, r3
    27c8:	e7d2      	b.n	2770 <system_gclk_gen_set_config+0x4c>
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	40000c00 	.word	0x40000c00
    27d0:	00001189 	.word	0x00001189
    27d4:	40000c08 	.word	0x40000c08
    27d8:	000011c9 	.word	0x000011c9

000027dc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    27dc:	b510      	push	{r4, lr}
    27de:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27e0:	4a0b      	ldr	r2, [pc, #44]	; (2810 <system_gclk_gen_enable+0x34>)
    27e2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    27e4:	b25b      	sxtb	r3, r3
    27e6:	2b00      	cmp	r3, #0
    27e8:	dbfb      	blt.n	27e2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    27ea:	4b0a      	ldr	r3, [pc, #40]	; (2814 <system_gclk_gen_enable+0x38>)
    27ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    27ee:	4b0a      	ldr	r3, [pc, #40]	; (2818 <system_gclk_gen_enable+0x3c>)
    27f0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27f2:	4a07      	ldr	r2, [pc, #28]	; (2810 <system_gclk_gen_enable+0x34>)
    27f4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    27f6:	b25b      	sxtb	r3, r3
    27f8:	2b00      	cmp	r3, #0
    27fa:	dbfb      	blt.n	27f4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    27fc:	4a04      	ldr	r2, [pc, #16]	; (2810 <system_gclk_gen_enable+0x34>)
    27fe:	6851      	ldr	r1, [r2, #4]
    2800:	2380      	movs	r3, #128	; 0x80
    2802:	025b      	lsls	r3, r3, #9
    2804:	430b      	orrs	r3, r1
    2806:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2808:	4b04      	ldr	r3, [pc, #16]	; (281c <system_gclk_gen_enable+0x40>)
    280a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    280c:	bd10      	pop	{r4, pc}
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	40000c00 	.word	0x40000c00
    2814:	00001189 	.word	0x00001189
    2818:	40000c04 	.word	0x40000c04
    281c:	000011c9 	.word	0x000011c9

00002820 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2820:	b570      	push	{r4, r5, r6, lr}
    2822:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2824:	4a1a      	ldr	r2, [pc, #104]	; (2890 <system_gclk_gen_get_hz+0x70>)
    2826:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2828:	b25b      	sxtb	r3, r3
    282a:	2b00      	cmp	r3, #0
    282c:	dbfb      	blt.n	2826 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    282e:	4b19      	ldr	r3, [pc, #100]	; (2894 <system_gclk_gen_get_hz+0x74>)
    2830:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2832:	4b19      	ldr	r3, [pc, #100]	; (2898 <system_gclk_gen_get_hz+0x78>)
    2834:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2836:	4a16      	ldr	r2, [pc, #88]	; (2890 <system_gclk_gen_get_hz+0x70>)
    2838:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    283a:	b25b      	sxtb	r3, r3
    283c:	2b00      	cmp	r3, #0
    283e:	dbfb      	blt.n	2838 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2840:	4e13      	ldr	r6, [pc, #76]	; (2890 <system_gclk_gen_get_hz+0x70>)
    2842:	6870      	ldr	r0, [r6, #4]
    2844:	04c0      	lsls	r0, r0, #19
    2846:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2848:	4b14      	ldr	r3, [pc, #80]	; (289c <system_gclk_gen_get_hz+0x7c>)
    284a:	4798      	blx	r3
    284c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    284e:	4b12      	ldr	r3, [pc, #72]	; (2898 <system_gclk_gen_get_hz+0x78>)
    2850:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2852:	6876      	ldr	r6, [r6, #4]
    2854:	02f6      	lsls	r6, r6, #11
    2856:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2858:	4b11      	ldr	r3, [pc, #68]	; (28a0 <system_gclk_gen_get_hz+0x80>)
    285a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    285c:	4a0c      	ldr	r2, [pc, #48]	; (2890 <system_gclk_gen_get_hz+0x70>)
    285e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2860:	b25b      	sxtb	r3, r3
    2862:	2b00      	cmp	r3, #0
    2864:	dbfb      	blt.n	285e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2866:	4b0a      	ldr	r3, [pc, #40]	; (2890 <system_gclk_gen_get_hz+0x70>)
    2868:	689c      	ldr	r4, [r3, #8]
    286a:	0224      	lsls	r4, r4, #8
    286c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    286e:	4b0d      	ldr	r3, [pc, #52]	; (28a4 <system_gclk_gen_get_hz+0x84>)
    2870:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2872:	2e00      	cmp	r6, #0
    2874:	d107      	bne.n	2886 <system_gclk_gen_get_hz+0x66>
    2876:	2c01      	cmp	r4, #1
    2878:	d907      	bls.n	288a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    287a:	0021      	movs	r1, r4
    287c:	0028      	movs	r0, r5
    287e:	4b0a      	ldr	r3, [pc, #40]	; (28a8 <system_gclk_gen_get_hz+0x88>)
    2880:	4798      	blx	r3
    2882:	0005      	movs	r5, r0
    2884:	e001      	b.n	288a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2886:	3401      	adds	r4, #1
    2888:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    288a:	0028      	movs	r0, r5
    288c:	bd70      	pop	{r4, r5, r6, pc}
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	40000c00 	.word	0x40000c00
    2894:	00001189 	.word	0x00001189
    2898:	40000c04 	.word	0x40000c04
    289c:	00002301 	.word	0x00002301
    28a0:	40000c08 	.word	0x40000c08
    28a4:	000011c9 	.word	0x000011c9
    28a8:	000031cd 	.word	0x000031cd

000028ac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    28ac:	b510      	push	{r4, lr}
    28ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    28b0:	4b06      	ldr	r3, [pc, #24]	; (28cc <system_gclk_chan_enable+0x20>)
    28b2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    28b4:	4b06      	ldr	r3, [pc, #24]	; (28d0 <system_gclk_chan_enable+0x24>)
    28b6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    28b8:	4a06      	ldr	r2, [pc, #24]	; (28d4 <system_gclk_chan_enable+0x28>)
    28ba:	8853      	ldrh	r3, [r2, #2]
    28bc:	2180      	movs	r1, #128	; 0x80
    28be:	01c9      	lsls	r1, r1, #7
    28c0:	430b      	orrs	r3, r1
    28c2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    28c4:	4b04      	ldr	r3, [pc, #16]	; (28d8 <system_gclk_chan_enable+0x2c>)
    28c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    28c8:	bd10      	pop	{r4, pc}
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	00001189 	.word	0x00001189
    28d0:	40000c02 	.word	0x40000c02
    28d4:	40000c00 	.word	0x40000c00
    28d8:	000011c9 	.word	0x000011c9

000028dc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    28dc:	b510      	push	{r4, lr}
    28de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    28e0:	4b0f      	ldr	r3, [pc, #60]	; (2920 <system_gclk_chan_disable+0x44>)
    28e2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    28e4:	4b0f      	ldr	r3, [pc, #60]	; (2924 <system_gclk_chan_disable+0x48>)
    28e6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    28e8:	4a0f      	ldr	r2, [pc, #60]	; (2928 <system_gclk_chan_disable+0x4c>)
    28ea:	8853      	ldrh	r3, [r2, #2]
    28ec:	051b      	lsls	r3, r3, #20
    28ee:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    28f0:	8853      	ldrh	r3, [r2, #2]
    28f2:	490e      	ldr	r1, [pc, #56]	; (292c <system_gclk_chan_disable+0x50>)
    28f4:	400b      	ands	r3, r1
    28f6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    28f8:	8853      	ldrh	r3, [r2, #2]
    28fa:	490d      	ldr	r1, [pc, #52]	; (2930 <system_gclk_chan_disable+0x54>)
    28fc:	400b      	ands	r3, r1
    28fe:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2900:	0011      	movs	r1, r2
    2902:	2280      	movs	r2, #128	; 0x80
    2904:	01d2      	lsls	r2, r2, #7
    2906:	884b      	ldrh	r3, [r1, #2]
    2908:	4213      	tst	r3, r2
    290a:	d1fc      	bne.n	2906 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    290c:	4906      	ldr	r1, [pc, #24]	; (2928 <system_gclk_chan_disable+0x4c>)
    290e:	884a      	ldrh	r2, [r1, #2]
    2910:	0203      	lsls	r3, r0, #8
    2912:	4806      	ldr	r0, [pc, #24]	; (292c <system_gclk_chan_disable+0x50>)
    2914:	4002      	ands	r2, r0
    2916:	4313      	orrs	r3, r2
    2918:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    291a:	4b06      	ldr	r3, [pc, #24]	; (2934 <system_gclk_chan_disable+0x58>)
    291c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    291e:	bd10      	pop	{r4, pc}
    2920:	00001189 	.word	0x00001189
    2924:	40000c02 	.word	0x40000c02
    2928:	40000c00 	.word	0x40000c00
    292c:	fffff0ff 	.word	0xfffff0ff
    2930:	ffffbfff 	.word	0xffffbfff
    2934:	000011c9 	.word	0x000011c9

00002938 <system_gclk_chan_set_config>:
{
    2938:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    293a:	780c      	ldrb	r4, [r1, #0]
    293c:	0224      	lsls	r4, r4, #8
    293e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2940:	4b02      	ldr	r3, [pc, #8]	; (294c <system_gclk_chan_set_config+0x14>)
    2942:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2944:	b2a4      	uxth	r4, r4
    2946:	4b02      	ldr	r3, [pc, #8]	; (2950 <system_gclk_chan_set_config+0x18>)
    2948:	805c      	strh	r4, [r3, #2]
}
    294a:	bd10      	pop	{r4, pc}
    294c:	000028dd 	.word	0x000028dd
    2950:	40000c00 	.word	0x40000c00

00002954 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2954:	b510      	push	{r4, lr}
    2956:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2958:	4b06      	ldr	r3, [pc, #24]	; (2974 <system_gclk_chan_get_hz+0x20>)
    295a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    295c:	4b06      	ldr	r3, [pc, #24]	; (2978 <system_gclk_chan_get_hz+0x24>)
    295e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2960:	4b06      	ldr	r3, [pc, #24]	; (297c <system_gclk_chan_get_hz+0x28>)
    2962:	885c      	ldrh	r4, [r3, #2]
    2964:	0524      	lsls	r4, r4, #20
    2966:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2968:	4b05      	ldr	r3, [pc, #20]	; (2980 <system_gclk_chan_get_hz+0x2c>)
    296a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    296c:	0020      	movs	r0, r4
    296e:	4b05      	ldr	r3, [pc, #20]	; (2984 <system_gclk_chan_get_hz+0x30>)
    2970:	4798      	blx	r3
}
    2972:	bd10      	pop	{r4, pc}
    2974:	00001189 	.word	0x00001189
    2978:	40000c02 	.word	0x40000c02
    297c:	40000c00 	.word	0x40000c00
    2980:	000011c9 	.word	0x000011c9
    2984:	00002821 	.word	0x00002821

00002988 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2988:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    298a:	78d3      	ldrb	r3, [r2, #3]
    298c:	2b00      	cmp	r3, #0
    298e:	d135      	bne.n	29fc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2990:	7813      	ldrb	r3, [r2, #0]
    2992:	2b80      	cmp	r3, #128	; 0x80
    2994:	d029      	beq.n	29ea <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2996:	061b      	lsls	r3, r3, #24
    2998:	2480      	movs	r4, #128	; 0x80
    299a:	0264      	lsls	r4, r4, #9
    299c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    299e:	7854      	ldrb	r4, [r2, #1]
    29a0:	2502      	movs	r5, #2
    29a2:	43ac      	bics	r4, r5
    29a4:	d106      	bne.n	29b4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    29a6:	7894      	ldrb	r4, [r2, #2]
    29a8:	2c00      	cmp	r4, #0
    29aa:	d120      	bne.n	29ee <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    29ac:	2480      	movs	r4, #128	; 0x80
    29ae:	02a4      	lsls	r4, r4, #10
    29b0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    29b2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    29b4:	7854      	ldrb	r4, [r2, #1]
    29b6:	3c01      	subs	r4, #1
    29b8:	2c01      	cmp	r4, #1
    29ba:	d91c      	bls.n	29f6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    29bc:	040d      	lsls	r5, r1, #16
    29be:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    29c0:	24a0      	movs	r4, #160	; 0xa0
    29c2:	05e4      	lsls	r4, r4, #23
    29c4:	432c      	orrs	r4, r5
    29c6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29c8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    29ca:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    29cc:	24d0      	movs	r4, #208	; 0xd0
    29ce:	0624      	lsls	r4, r4, #24
    29d0:	432c      	orrs	r4, r5
    29d2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29d4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    29d6:	78d4      	ldrb	r4, [r2, #3]
    29d8:	2c00      	cmp	r4, #0
    29da:	d122      	bne.n	2a22 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    29dc:	035b      	lsls	r3, r3, #13
    29de:	d51c      	bpl.n	2a1a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    29e0:	7893      	ldrb	r3, [r2, #2]
    29e2:	2b01      	cmp	r3, #1
    29e4:	d01e      	beq.n	2a24 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    29e6:	6141      	str	r1, [r0, #20]
    29e8:	e017      	b.n	2a1a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    29ea:	2300      	movs	r3, #0
    29ec:	e7d7      	b.n	299e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    29ee:	24c0      	movs	r4, #192	; 0xc0
    29f0:	02e4      	lsls	r4, r4, #11
    29f2:	4323      	orrs	r3, r4
    29f4:	e7dd      	b.n	29b2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    29f6:	4c0d      	ldr	r4, [pc, #52]	; (2a2c <_system_pinmux_config+0xa4>)
    29f8:	4023      	ands	r3, r4
    29fa:	e7df      	b.n	29bc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    29fc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    29fe:	040c      	lsls	r4, r1, #16
    2a00:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2a02:	23a0      	movs	r3, #160	; 0xa0
    2a04:	05db      	lsls	r3, r3, #23
    2a06:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a08:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2a0a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2a0c:	23d0      	movs	r3, #208	; 0xd0
    2a0e:	061b      	lsls	r3, r3, #24
    2a10:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a12:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2a14:	78d3      	ldrb	r3, [r2, #3]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d103      	bne.n	2a22 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2a1a:	7853      	ldrb	r3, [r2, #1]
    2a1c:	3b01      	subs	r3, #1
    2a1e:	2b01      	cmp	r3, #1
    2a20:	d902      	bls.n	2a28 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2a22:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2a24:	6181      	str	r1, [r0, #24]
    2a26:	e7f8      	b.n	2a1a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2a28:	6081      	str	r1, [r0, #8]
}
    2a2a:	e7fa      	b.n	2a22 <_system_pinmux_config+0x9a>
    2a2c:	fffbffff 	.word	0xfffbffff

00002a30 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2a30:	b510      	push	{r4, lr}
    2a32:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2a34:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2a36:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2a38:	2900      	cmp	r1, #0
    2a3a:	d104      	bne.n	2a46 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2a3c:	0943      	lsrs	r3, r0, #5
    2a3e:	01db      	lsls	r3, r3, #7
    2a40:	4905      	ldr	r1, [pc, #20]	; (2a58 <system_pinmux_pin_set_config+0x28>)
    2a42:	468c      	mov	ip, r1
    2a44:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2a46:	241f      	movs	r4, #31
    2a48:	4020      	ands	r0, r4
    2a4a:	2101      	movs	r1, #1
    2a4c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2a4e:	0018      	movs	r0, r3
    2a50:	4b02      	ldr	r3, [pc, #8]	; (2a5c <system_pinmux_pin_set_config+0x2c>)
    2a52:	4798      	blx	r3
}
    2a54:	bd10      	pop	{r4, pc}
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	41004400 	.word	0x41004400
    2a5c:	00002989 	.word	0x00002989

00002a60 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2a60:	4770      	bx	lr
	...

00002a64 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2a64:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2a66:	4b05      	ldr	r3, [pc, #20]	; (2a7c <system_init+0x18>)
    2a68:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2a6a:	4b05      	ldr	r3, [pc, #20]	; (2a80 <system_init+0x1c>)
    2a6c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2a6e:	4b05      	ldr	r3, [pc, #20]	; (2a84 <system_init+0x20>)
    2a70:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2a72:	4b05      	ldr	r3, [pc, #20]	; (2a88 <system_init+0x24>)
    2a74:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2a76:	4b05      	ldr	r3, [pc, #20]	; (2a8c <system_init+0x28>)
    2a78:	4798      	blx	r3
}
    2a7a:	bd10      	pop	{r4, pc}
    2a7c:	000025ad 	.word	0x000025ad
    2a80:	000011f9 	.word	0x000011f9
    2a84:	00002a61 	.word	0x00002a61
    2a88:	00002a61 	.word	0x00002a61
    2a8c:	00002a61 	.word	0x00002a61

00002a90 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2a90:	e7fe      	b.n	2a90 <Dummy_Handler>
	...

00002a94 <Reset_Handler>:
{
    2a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2a96:	4a2a      	ldr	r2, [pc, #168]	; (2b40 <Reset_Handler+0xac>)
    2a98:	4b2a      	ldr	r3, [pc, #168]	; (2b44 <Reset_Handler+0xb0>)
    2a9a:	429a      	cmp	r2, r3
    2a9c:	d011      	beq.n	2ac2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2a9e:	001a      	movs	r2, r3
    2aa0:	4b29      	ldr	r3, [pc, #164]	; (2b48 <Reset_Handler+0xb4>)
    2aa2:	429a      	cmp	r2, r3
    2aa4:	d20d      	bcs.n	2ac2 <Reset_Handler+0x2e>
    2aa6:	4a29      	ldr	r2, [pc, #164]	; (2b4c <Reset_Handler+0xb8>)
    2aa8:	3303      	adds	r3, #3
    2aaa:	1a9b      	subs	r3, r3, r2
    2aac:	089b      	lsrs	r3, r3, #2
    2aae:	3301      	adds	r3, #1
    2ab0:	009b      	lsls	r3, r3, #2
    2ab2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2ab4:	4823      	ldr	r0, [pc, #140]	; (2b44 <Reset_Handler+0xb0>)
    2ab6:	4922      	ldr	r1, [pc, #136]	; (2b40 <Reset_Handler+0xac>)
    2ab8:	588c      	ldr	r4, [r1, r2]
    2aba:	5084      	str	r4, [r0, r2]
    2abc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2abe:	429a      	cmp	r2, r3
    2ac0:	d1fa      	bne.n	2ab8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2ac2:	4a23      	ldr	r2, [pc, #140]	; (2b50 <Reset_Handler+0xbc>)
    2ac4:	4b23      	ldr	r3, [pc, #140]	; (2b54 <Reset_Handler+0xc0>)
    2ac6:	429a      	cmp	r2, r3
    2ac8:	d20a      	bcs.n	2ae0 <Reset_Handler+0x4c>
    2aca:	43d3      	mvns	r3, r2
    2acc:	4921      	ldr	r1, [pc, #132]	; (2b54 <Reset_Handler+0xc0>)
    2ace:	185b      	adds	r3, r3, r1
    2ad0:	2103      	movs	r1, #3
    2ad2:	438b      	bics	r3, r1
    2ad4:	3304      	adds	r3, #4
    2ad6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2ad8:	2100      	movs	r1, #0
    2ada:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2adc:	4293      	cmp	r3, r2
    2ade:	d1fc      	bne.n	2ada <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2ae0:	4a1d      	ldr	r2, [pc, #116]	; (2b58 <Reset_Handler+0xc4>)
    2ae2:	21ff      	movs	r1, #255	; 0xff
    2ae4:	4b1d      	ldr	r3, [pc, #116]	; (2b5c <Reset_Handler+0xc8>)
    2ae6:	438b      	bics	r3, r1
    2ae8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2aea:	39fd      	subs	r1, #253	; 0xfd
    2aec:	2390      	movs	r3, #144	; 0x90
    2aee:	005b      	lsls	r3, r3, #1
    2af0:	4a1b      	ldr	r2, [pc, #108]	; (2b60 <Reset_Handler+0xcc>)
    2af2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2af4:	4a1b      	ldr	r2, [pc, #108]	; (2b64 <Reset_Handler+0xd0>)
    2af6:	78d3      	ldrb	r3, [r2, #3]
    2af8:	2503      	movs	r5, #3
    2afa:	43ab      	bics	r3, r5
    2afc:	2402      	movs	r4, #2
    2afe:	4323      	orrs	r3, r4
    2b00:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2b02:	78d3      	ldrb	r3, [r2, #3]
    2b04:	270c      	movs	r7, #12
    2b06:	43bb      	bics	r3, r7
    2b08:	2608      	movs	r6, #8
    2b0a:	4333      	orrs	r3, r6
    2b0c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2b0e:	4b16      	ldr	r3, [pc, #88]	; (2b68 <Reset_Handler+0xd4>)
    2b10:	7b98      	ldrb	r0, [r3, #14]
    2b12:	2230      	movs	r2, #48	; 0x30
    2b14:	4390      	bics	r0, r2
    2b16:	2220      	movs	r2, #32
    2b18:	4310      	orrs	r0, r2
    2b1a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2b1c:	7b99      	ldrb	r1, [r3, #14]
    2b1e:	43b9      	bics	r1, r7
    2b20:	4331      	orrs	r1, r6
    2b22:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2b24:	7b9a      	ldrb	r2, [r3, #14]
    2b26:	43aa      	bics	r2, r5
    2b28:	4322      	orrs	r2, r4
    2b2a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2b2c:	4a0f      	ldr	r2, [pc, #60]	; (2b6c <Reset_Handler+0xd8>)
    2b2e:	6853      	ldr	r3, [r2, #4]
    2b30:	2180      	movs	r1, #128	; 0x80
    2b32:	430b      	orrs	r3, r1
    2b34:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2b36:	4b0e      	ldr	r3, [pc, #56]	; (2b70 <Reset_Handler+0xdc>)
    2b38:	4798      	blx	r3
        main();
    2b3a:	4b0e      	ldr	r3, [pc, #56]	; (2b74 <Reset_Handler+0xe0>)
    2b3c:	4798      	blx	r3
    2b3e:	e7fe      	b.n	2b3e <Reset_Handler+0xaa>
    2b40:	000049a8 	.word	0x000049a8
    2b44:	20000000 	.word	0x20000000
    2b48:	20000098 	.word	0x20000098
    2b4c:	20000004 	.word	0x20000004
    2b50:	20000098 	.word	0x20000098
    2b54:	200011c0 	.word	0x200011c0
    2b58:	e000ed00 	.word	0xe000ed00
    2b5c:	00000000 	.word	0x00000000
    2b60:	41007000 	.word	0x41007000
    2b64:	41005000 	.word	0x41005000
    2b68:	41004800 	.word	0x41004800
    2b6c:	41004000 	.word	0x41004000
    2b70:	0000354d 	.word	0x0000354d
    2b74:	00002c8d 	.word	0x00002c8d

00002b78 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b7a:	46c6      	mov	lr, r8
    2b7c:	b500      	push	{lr}
    2b7e:	000c      	movs	r4, r1
    2b80:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2b82:	2800      	cmp	r0, #0
    2b84:	d10f      	bne.n	2ba6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2b86:	2a00      	cmp	r2, #0
    2b88:	dd11      	ble.n	2bae <_read+0x36>
    2b8a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2b8c:	4e09      	ldr	r6, [pc, #36]	; (2bb4 <_read+0x3c>)
    2b8e:	4d0a      	ldr	r5, [pc, #40]	; (2bb8 <_read+0x40>)
    2b90:	6830      	ldr	r0, [r6, #0]
    2b92:	0021      	movs	r1, r4
    2b94:	682b      	ldr	r3, [r5, #0]
    2b96:	4798      	blx	r3
		ptr++;
    2b98:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2b9a:	42bc      	cmp	r4, r7
    2b9c:	d1f8      	bne.n	2b90 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2b9e:	4640      	mov	r0, r8
    2ba0:	bc04      	pop	{r2}
    2ba2:	4690      	mov	r8, r2
    2ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2ba6:	2301      	movs	r3, #1
    2ba8:	425b      	negs	r3, r3
    2baa:	4698      	mov	r8, r3
    2bac:	e7f7      	b.n	2b9e <_read+0x26>
	for (; len > 0; --len) {
    2bae:	4680      	mov	r8, r0
    2bb0:	e7f5      	b.n	2b9e <_read+0x26>
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	20001184 	.word	0x20001184
    2bb8:	2000117c 	.word	0x2000117c

00002bbc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bbe:	46c6      	mov	lr, r8
    2bc0:	b500      	push	{lr}
    2bc2:	000e      	movs	r6, r1
    2bc4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2bc6:	3801      	subs	r0, #1
    2bc8:	2802      	cmp	r0, #2
    2bca:	d810      	bhi.n	2bee <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2bcc:	2a00      	cmp	r2, #0
    2bce:	d011      	beq.n	2bf4 <_write+0x38>
    2bd0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2bd2:	4b0c      	ldr	r3, [pc, #48]	; (2c04 <_write+0x48>)
    2bd4:	4698      	mov	r8, r3
    2bd6:	4f0c      	ldr	r7, [pc, #48]	; (2c08 <_write+0x4c>)
    2bd8:	4643      	mov	r3, r8
    2bda:	6818      	ldr	r0, [r3, #0]
    2bdc:	5d31      	ldrb	r1, [r6, r4]
    2bde:	683b      	ldr	r3, [r7, #0]
    2be0:	4798      	blx	r3
    2be2:	2800      	cmp	r0, #0
    2be4:	db08      	blt.n	2bf8 <_write+0x3c>
			return -1;
		}
		++nChars;
    2be6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2be8:	42a5      	cmp	r5, r4
    2bea:	d1f5      	bne.n	2bd8 <_write+0x1c>
    2bec:	e006      	b.n	2bfc <_write+0x40>
		return -1;
    2bee:	2401      	movs	r4, #1
    2bf0:	4264      	negs	r4, r4
    2bf2:	e003      	b.n	2bfc <_write+0x40>
	for (; len != 0; --len) {
    2bf4:	0014      	movs	r4, r2
    2bf6:	e001      	b.n	2bfc <_write+0x40>
			return -1;
    2bf8:	2401      	movs	r4, #1
    2bfa:	4264      	negs	r4, r4
	}
	return nChars;
}
    2bfc:	0020      	movs	r0, r4
    2bfe:	bc04      	pop	{r2}
    2c00:	4690      	mov	r8, r2
    2c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c04:	20001184 	.word	0x20001184
    2c08:	20001180 	.word	0x20001180

00002c0c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2c0c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2c0e:	4a06      	ldr	r2, [pc, #24]	; (2c28 <_sbrk+0x1c>)
    2c10:	6812      	ldr	r2, [r2, #0]
    2c12:	2a00      	cmp	r2, #0
    2c14:	d004      	beq.n	2c20 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2c16:	4a04      	ldr	r2, [pc, #16]	; (2c28 <_sbrk+0x1c>)
    2c18:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2c1a:	18c3      	adds	r3, r0, r3
    2c1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2c1e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2c20:	4902      	ldr	r1, [pc, #8]	; (2c2c <_sbrk+0x20>)
    2c22:	4a01      	ldr	r2, [pc, #4]	; (2c28 <_sbrk+0x1c>)
    2c24:	6011      	str	r1, [r2, #0]
    2c26:	e7f6      	b.n	2c16 <_sbrk+0xa>
    2c28:	20000150 	.word	0x20000150
    2c2c:	200031c0 	.word	0x200031c0

00002c30 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2c30:	2001      	movs	r0, #1
    2c32:	4240      	negs	r0, r0
    2c34:	4770      	bx	lr

00002c36 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2c36:	2380      	movs	r3, #128	; 0x80
    2c38:	019b      	lsls	r3, r3, #6
    2c3a:	604b      	str	r3, [r1, #4]

	return 0;
}
    2c3c:	2000      	movs	r0, #0
    2c3e:	4770      	bx	lr

00002c40 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2c40:	2001      	movs	r0, #1
    2c42:	4770      	bx	lr

00002c44 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2c44:	2000      	movs	r0, #0
    2c46:	4770      	bx	lr

00002c48 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2c48:	b570      	push	{r4, r5, r6, lr}
    2c4a:	b082      	sub	sp, #8
    2c4c:	0005      	movs	r5, r0
    2c4e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2c50:	2200      	movs	r2, #0
    2c52:	466b      	mov	r3, sp
    2c54:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2c56:	4c06      	ldr	r4, [pc, #24]	; (2c70 <usart_serial_getchar+0x28>)
    2c58:	466b      	mov	r3, sp
    2c5a:	1d99      	adds	r1, r3, #6
    2c5c:	0028      	movs	r0, r5
    2c5e:	47a0      	blx	r4
    2c60:	2800      	cmp	r0, #0
    2c62:	d1f9      	bne.n	2c58 <usart_serial_getchar+0x10>

	*c = temp;
    2c64:	466b      	mov	r3, sp
    2c66:	3306      	adds	r3, #6
    2c68:	881b      	ldrh	r3, [r3, #0]
    2c6a:	7033      	strb	r3, [r6, #0]
}
    2c6c:	b002      	add	sp, #8
    2c6e:	bd70      	pop	{r4, r5, r6, pc}
    2c70:	000020fd 	.word	0x000020fd

00002c74 <usart_serial_putchar>:
{
    2c74:	b570      	push	{r4, r5, r6, lr}
    2c76:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2c78:	b28c      	uxth	r4, r1
    2c7a:	4e03      	ldr	r6, [pc, #12]	; (2c88 <usart_serial_putchar+0x14>)
    2c7c:	0021      	movs	r1, r4
    2c7e:	0028      	movs	r0, r5
    2c80:	47b0      	blx	r6
    2c82:	2800      	cmp	r0, #0
    2c84:	d1fa      	bne.n	2c7c <usart_serial_putchar+0x8>
}
    2c86:	bd70      	pop	{r4, r5, r6, pc}
    2c88:	000020d1 	.word	0x000020d1

00002c8c <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    2c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c8e:	46de      	mov	lr, fp
    2c90:	4657      	mov	r7, sl
    2c92:	464e      	mov	r6, r9
    2c94:	4645      	mov	r5, r8
    2c96:	b5e0      	push	{r5, r6, r7, lr}
    2c98:	b095      	sub	sp, #84	; 0x54
	uint8_t slot = 0;
	sd_mmc_err_t err;

	system_init();
    2c9a:	4bd0      	ldr	r3, [pc, #832]	; (2fdc <main+0x350>)
    2c9c:	4798      	blx	r3
	delay_init();
    2c9e:	4bd0      	ldr	r3, [pc, #832]	; (2fe0 <main+0x354>)
    2ca0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2ca2:	2380      	movs	r3, #128	; 0x80
    2ca4:	05db      	lsls	r3, r3, #23
    2ca6:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2ca8:	2300      	movs	r3, #0
    2caa:	9305      	str	r3, [sp, #20]
	config->parity           = USART_PARITY_NONE;
    2cac:	22ff      	movs	r2, #255	; 0xff
    2cae:	a904      	add	r1, sp, #16
    2cb0:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2cb2:	2200      	movs	r2, #0
    2cb4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2cb6:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2cb8:	2401      	movs	r4, #1
    2cba:	2124      	movs	r1, #36	; 0x24
    2cbc:	a804      	add	r0, sp, #16
    2cbe:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2cc0:	3101      	adds	r1, #1
    2cc2:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2cc4:	3101      	adds	r1, #1
    2cc6:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2cc8:	3101      	adds	r1, #1
    2cca:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    2ccc:	930e      	str	r3, [sp, #56]	; 0x38
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2cce:	3105      	adds	r1, #5
    2cd0:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2cd2:	3101      	adds	r1, #1
    2cd4:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2cd6:	9309      	str	r3, [sp, #36]	; 0x24
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2cd8:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2cda:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2cdc:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2cde:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2ce0:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2ce2:	2313      	movs	r3, #19
    2ce4:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2ce6:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    2ce8:	2380      	movs	r3, #128	; 0x80
    2cea:	035b      	lsls	r3, r3, #13
    2cec:	9307      	str	r3, [sp, #28]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    2cee:	4bbd      	ldr	r3, [pc, #756]	; (2fe4 <main+0x358>)
    2cf0:	9310      	str	r3, [sp, #64]	; 0x40
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    2cf2:	4bbd      	ldr	r3, [pc, #756]	; (2fe8 <main+0x35c>)
    2cf4:	9311      	str	r3, [sp, #68]	; 0x44
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    2cf6:	2301      	movs	r3, #1
    2cf8:	425b      	negs	r3, r3
    2cfa:	9312      	str	r3, [sp, #72]	; 0x48
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    2cfc:	9313      	str	r3, [sp, #76]	; 0x4c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    2cfe:	2396      	movs	r3, #150	; 0x96
    2d00:	021b      	lsls	r3, r3, #8
    2d02:	930c      	str	r3, [sp, #48]	; 0x30
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2d04:	4db9      	ldr	r5, [pc, #740]	; (2fec <main+0x360>)
    2d06:	4bba      	ldr	r3, [pc, #744]	; (2ff0 <main+0x364>)
    2d08:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2d0a:	4aba      	ldr	r2, [pc, #744]	; (2ff4 <main+0x368>)
    2d0c:	4bba      	ldr	r3, [pc, #744]	; (2ff8 <main+0x36c>)
    2d0e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2d10:	4aba      	ldr	r2, [pc, #744]	; (2ffc <main+0x370>)
    2d12:	4bbb      	ldr	r3, [pc, #748]	; (3000 <main+0x374>)
    2d14:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2d16:	0002      	movs	r2, r0
    2d18:	49ba      	ldr	r1, [pc, #744]	; (3004 <main+0x378>)
    2d1a:	0028      	movs	r0, r5
    2d1c:	4bba      	ldr	r3, [pc, #744]	; (3008 <main+0x37c>)
    2d1e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2d20:	4fba      	ldr	r7, [pc, #744]	; (300c <main+0x380>)
    2d22:	683b      	ldr	r3, [r7, #0]
    2d24:	6898      	ldr	r0, [r3, #8]
    2d26:	2100      	movs	r1, #0
    2d28:	4eb9      	ldr	r6, [pc, #740]	; (3010 <main+0x384>)
    2d2a:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2d2c:	683b      	ldr	r3, [r7, #0]
    2d2e:	6858      	ldr	r0, [r3, #4]
    2d30:	2100      	movs	r1, #0
    2d32:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d34:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2d36:	0030      	movs	r0, r6
    2d38:	4bb6      	ldr	r3, [pc, #728]	; (3014 <main+0x388>)
    2d3a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2d3c:	231f      	movs	r3, #31
    2d3e:	4018      	ands	r0, r3
    2d40:	4084      	lsls	r4, r0
    2d42:	4bb5      	ldr	r3, [pc, #724]	; (3018 <main+0x38c>)
    2d44:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d46:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2d48:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2d4a:	2a00      	cmp	r2, #0
    2d4c:	d1fc      	bne.n	2d48 <main+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2d4e:	6833      	ldr	r3, [r6, #0]
    2d50:	3202      	adds	r2, #2
    2d52:	4313      	orrs	r3, r2
    2d54:	6033      	str	r3, [r6, #0]
	cdc_uart_init();

	irq_initialize_vectors();
	cpu_irq_enable();
    2d56:	3a01      	subs	r2, #1
    2d58:	4bb0      	ldr	r3, [pc, #704]	; (301c <main+0x390>)
    2d5a:	701a      	strb	r2, [r3, #0]
    2d5c:	f3bf 8f5f 	dmb	sy
    2d60:	b662      	cpsie	i

	time_tick_init();
    2d62:	4baf      	ldr	r3, [pc, #700]	; (3020 <main+0x394>)
    2d64:	4798      	blx	r3

	// Initialize SD MMC stack
	sd_mmc_init();
    2d66:	4baf      	ldr	r3, [pc, #700]	; (3024 <main+0x398>)
    2d68:	4798      	blx	r3

	printf("\x0C\n\r-- SD/MMC Card Example --\n\r");
    2d6a:	48af      	ldr	r0, [pc, #700]	; (3028 <main+0x39c>)
    2d6c:	4caf      	ldr	r4, [pc, #700]	; (302c <main+0x3a0>)
    2d6e:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
    2d70:	4aaf      	ldr	r2, [pc, #700]	; (3030 <main+0x3a4>)
    2d72:	49b0      	ldr	r1, [pc, #704]	; (3034 <main+0x3a8>)
    2d74:	48b0      	ldr	r0, [pc, #704]	; (3038 <main+0x3ac>)
    2d76:	47a0      	blx	r4
	uint8_t slot = 0;
    2d78:	2400      	movs	r4, #0
	while (1) {
		if (slot == sd_mmc_nb_slot()) {
    2d7a:	4bb0      	ldr	r3, [pc, #704]	; (303c <main+0x3b0>)
    2d7c:	4698      	mov	r8, r3
    2d7e:	4bb0      	ldr	r3, [pc, #704]	; (3040 <main+0x3b4>)
    2d80:	4ab0      	ldr	r2, [pc, #704]	; (3044 <main+0x3b8>)
    2d82:	4694      	mov	ip, r2
    2d84:	4463      	add	r3, ip
    2d86:	9303      	str	r3, [sp, #12]
    2d88:	e03a      	b.n	2e00 <main+0x174>
			slot = 0;
    2d8a:	2400      	movs	r4, #0
    2d8c:	e03b      	b.n	2e06 <main+0x17a>
				printf("Card install FAILED\n\r");
				printf("Please unplug and re-plug the card.\n\r");
				while (SD_MMC_ERR_NO_CARD != sd_mmc_check(slot)) {
				}
			}
		} while (SD_MMC_OK != err);
    2d8e:	2e00      	cmp	r6, #0
    2d90:	d00e      	beq.n	2db0 <main+0x124>
			err = sd_mmc_check(slot);
    2d92:	0020      	movs	r0, r4
    2d94:	47c8      	blx	r9
    2d96:	0006      	movs	r6, r0
			if ((SD_MMC_ERR_NO_CARD != err)
    2d98:	2802      	cmp	r0, #2
    2d9a:	d9f8      	bls.n	2d8e <main+0x102>
				printf("Card install FAILED\n\r");
    2d9c:	48aa      	ldr	r0, [pc, #680]	; (3048 <main+0x3bc>)
    2d9e:	47b8      	blx	r7
				printf("Please unplug and re-plug the card.\n\r");
    2da0:	48aa      	ldr	r0, [pc, #680]	; (304c <main+0x3c0>)
    2da2:	47b8      	blx	r7
				while (SD_MMC_ERR_NO_CARD != sd_mmc_check(slot)) {
    2da4:	4daa      	ldr	r5, [pc, #680]	; (3050 <main+0x3c4>)
    2da6:	0020      	movs	r0, r4
    2da8:	47a8      	blx	r5
    2daa:	2802      	cmp	r0, #2
    2dac:	d1fb      	bne.n	2da6 <main+0x11a>
    2dae:	e7ee      	b.n	2d8e <main+0x102>
 *
 * \param slot   SD/MMC slot to test
 */
static void main_display_info_card(uint8_t slot)
{
	printf("Card information:\n\r");
    2db0:	48a8      	ldr	r0, [pc, #672]	; (3054 <main+0x3c8>)
    2db2:	4d9e      	ldr	r5, [pc, #632]	; (302c <main+0x3a0>)
    2db4:	47a8      	blx	r5

	printf("    ");
    2db6:	48a8      	ldr	r0, [pc, #672]	; (3058 <main+0x3cc>)
    2db8:	47a8      	blx	r5
	switch (sd_mmc_get_type(slot)) {
    2dba:	0020      	movs	r0, r4
    2dbc:	4ba7      	ldr	r3, [pc, #668]	; (305c <main+0x3d0>)
    2dbe:	4798      	blx	r3
    2dc0:	280a      	cmp	r0, #10
    2dc2:	d838      	bhi.n	2e36 <main+0x1aa>
    2dc4:	0080      	lsls	r0, r0, #2
    2dc6:	4ba6      	ldr	r3, [pc, #664]	; (3060 <main+0x3d4>)
    2dc8:	581b      	ldr	r3, [r3, r0]
    2dca:	469f      	mov	pc, r3
	case CARD_TYPE_SD | CARD_TYPE_HC:
		printf("SDHC");
    2dcc:	48a5      	ldr	r0, [pc, #660]	; (3064 <main+0x3d8>)
    2dce:	4b97      	ldr	r3, [pc, #604]	; (302c <main+0x3a0>)
    2dd0:	4798      	blx	r3
	case CARD_TYPE_UNKNOWN:
	default:
		printf("Unknow\n\r");
		return;
	}
	printf("\n\r    %d MB\n\r", (uint16_t)(sd_mmc_get_capacity(slot)/1024));
    2dd2:	0020      	movs	r0, r4
    2dd4:	4ba4      	ldr	r3, [pc, #656]	; (3068 <main+0x3dc>)
    2dd6:	4798      	blx	r3
    2dd8:	0181      	lsls	r1, r0, #6
    2dda:	0c09      	lsrs	r1, r1, #16
    2ddc:	48a3      	ldr	r0, [pc, #652]	; (306c <main+0x3e0>)
    2dde:	4b93      	ldr	r3, [pc, #588]	; (302c <main+0x3a0>)
    2de0:	4798      	blx	r3
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    2de2:	0020      	movs	r0, r4
    2de4:	4b9d      	ldr	r3, [pc, #628]	; (305c <main+0x3d0>)
    2de6:	4798      	blx	r3
    2de8:	0783      	lsls	r3, r0, #30
    2dea:	d128      	bne.n	2e3e <main+0x1b2>
		printf("Test finished, please unplugged the card.\n\r");
    2dec:	48a0      	ldr	r0, [pc, #640]	; (3070 <main+0x3e4>)
    2dee:	4b8f      	ldr	r3, [pc, #572]	; (302c <main+0x3a0>)
    2df0:	4798      	blx	r3
		while (SD_MMC_OK == sd_mmc_check(slot)) {
    2df2:	4d97      	ldr	r5, [pc, #604]	; (3050 <main+0x3c4>)
    2df4:	0020      	movs	r0, r4
    2df6:	47a8      	blx	r5
    2df8:	2800      	cmp	r0, #0
    2dfa:	d0fb      	beq.n	2df4 <main+0x168>
		slot++;
    2dfc:	3401      	adds	r4, #1
    2dfe:	b2e4      	uxtb	r4, r4
		if (slot == sd_mmc_nb_slot()) {
    2e00:	47c0      	blx	r8
    2e02:	4284      	cmp	r4, r0
    2e04:	d0c1      	beq.n	2d8a <main+0xfe>
		printf("Please plug an SD/MMC card in slot %d.\n\r", slot+1);
    2e06:	1c61      	adds	r1, r4, #1
    2e08:	489a      	ldr	r0, [pc, #616]	; (3074 <main+0x3e8>)
    2e0a:	4b88      	ldr	r3, [pc, #544]	; (302c <main+0x3a0>)
    2e0c:	4798      	blx	r3
			err = sd_mmc_check(slot);
    2e0e:	4b90      	ldr	r3, [pc, #576]	; (3050 <main+0x3c4>)
    2e10:	4699      	mov	r9, r3
				printf("Card install FAILED\n\r");
    2e12:	4f86      	ldr	r7, [pc, #536]	; (302c <main+0x3a0>)
    2e14:	e7bd      	b.n	2d92 <main+0x106>
		printf("SD");
    2e16:	4898      	ldr	r0, [pc, #608]	; (3078 <main+0x3ec>)
    2e18:	4b84      	ldr	r3, [pc, #528]	; (302c <main+0x3a0>)
    2e1a:	4798      	blx	r3
    2e1c:	e7d9      	b.n	2dd2 <main+0x146>
		printf("MMC High Density");
    2e1e:	4897      	ldr	r0, [pc, #604]	; (307c <main+0x3f0>)
    2e20:	4b82      	ldr	r3, [pc, #520]	; (302c <main+0x3a0>)
    2e22:	4798      	blx	r3
    2e24:	e7d5      	b.n	2dd2 <main+0x146>
		printf("MMC");
    2e26:	4896      	ldr	r0, [pc, #600]	; (3080 <main+0x3f4>)
    2e28:	4b80      	ldr	r3, [pc, #512]	; (302c <main+0x3a0>)
    2e2a:	4798      	blx	r3
    2e2c:	e7d1      	b.n	2dd2 <main+0x146>
		printf("SD COMBO");
    2e2e:	4895      	ldr	r0, [pc, #596]	; (3084 <main+0x3f8>)
    2e30:	4b7e      	ldr	r3, [pc, #504]	; (302c <main+0x3a0>)
    2e32:	4798      	blx	r3
    2e34:	e7cd      	b.n	2dd2 <main+0x146>
		printf("Unknow\n\r");
    2e36:	4894      	ldr	r0, [pc, #592]	; (3088 <main+0x3fc>)
    2e38:	4b7c      	ldr	r3, [pc, #496]	; (302c <main+0x3a0>)
    2e3a:	4798      	blx	r3
    2e3c:	e7d1      	b.n	2de2 <main+0x156>
{
	uint32_t last_blocks_addr, i, nb_trans;
	uint32_t tick_start, time_ms;

	// Compute the last address
	last_blocks_addr = sd_mmc_get_capacity(slot) *
    2e3e:	0020      	movs	r0, r4
    2e40:	4b89      	ldr	r3, [pc, #548]	; (3068 <main+0x3dc>)
    2e42:	4798      	blx	r3
    2e44:	0040      	lsls	r0, r0, #1
			(1024 / SD_MMC_BLOCK_SIZE);
	if (last_blocks_addr < (TEST_MEM_START_OFFSET / 512lu)) {
    2e46:	4b91      	ldr	r3, [pc, #580]	; (308c <main+0x400>)
    2e48:	4298      	cmp	r0, r3
    2e4a:	d954      	bls.n	2ef6 <main+0x26a>
		printf("[Memory is too small.]\n\r");
		return;
	}
	last_blocks_addr -= (TEST_MEM_START_OFFSET / SD_MMC_BLOCK_SIZE);
    2e4c:	0003      	movs	r3, r0
    2e4e:	4a90      	ldr	r2, [pc, #576]	; (3090 <main+0x404>)
    2e50:	4694      	mov	ip, r2
    2e52:	4463      	add	r3, ip
    2e54:	001e      	movs	r6, r3
    2e56:	9301      	str	r3, [sp, #4]

	printf("Card R/W test:\n\r");
    2e58:	488e      	ldr	r0, [pc, #568]	; (3094 <main+0x408>)
    2e5a:	4d74      	ldr	r5, [pc, #464]	; (302c <main+0x3a0>)
    2e5c:	47a8      	blx	r5

	// Read the last block
	printf("    Read... ");
    2e5e:	488e      	ldr	r0, [pc, #568]	; (3098 <main+0x40c>)
    2e60:	47a8      	blx	r5
	tick_start = time_tick_get();
    2e62:	4b8e      	ldr	r3, [pc, #568]	; (309c <main+0x410>)
    2e64:	4798      	blx	r3
    2e66:	9002      	str	r0, [sp, #8]
	if (SD_MMC_OK != sd_mmc_init_read_blocks(slot,
    2e68:	2280      	movs	r2, #128	; 0x80
    2e6a:	0052      	lsls	r2, r2, #1
    2e6c:	0031      	movs	r1, r6
    2e6e:	0020      	movs	r0, r4
    2e70:	4b8b      	ldr	r3, [pc, #556]	; (30a0 <main+0x414>)
    2e72:	4798      	blx	r3
    2e74:	2520      	movs	r5, #32
    2e76:	2800      	cmp	r0, #0
    2e78:	d141      	bne.n	2efe <main+0x272>
		printf("[FAIL]\n\r");
		return;
	}
	for (nb_trans = 0; nb_trans < (TEST_MEM_AREA_SIZE / TEST_MEM_ACCESS_SIZE);
			nb_trans++) {
		if (SD_MMC_OK != sd_mmc_start_read_blocks(buf_test,
    2e7a:	4f8a      	ldr	r7, [pc, #552]	; (30a4 <main+0x418>)
					TEST_MEM_ACCESS_SIZE / SD_MMC_BLOCK_SIZE)) {
			printf("[FAIL]\n\r");
			return;
		}
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    2e7c:	4e8a      	ldr	r6, [pc, #552]	; (30a8 <main+0x41c>)
		if (SD_MMC_OK != sd_mmc_start_read_blocks(buf_test,
    2e7e:	2108      	movs	r1, #8
    2e80:	486f      	ldr	r0, [pc, #444]	; (3040 <main+0x3b4>)
    2e82:	47b8      	blx	r7
    2e84:	2800      	cmp	r0, #0
    2e86:	d13e      	bne.n	2f06 <main+0x27a>
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    2e88:	2000      	movs	r0, #0
    2e8a:	47b0      	blx	r6
    2e8c:	2800      	cmp	r0, #0
    2e8e:	d13e      	bne.n	2f0e <main+0x282>
    2e90:	3d01      	subs	r5, #1
	for (nb_trans = 0; nb_trans < (TEST_MEM_AREA_SIZE / TEST_MEM_ACCESS_SIZE);
    2e92:	2d00      	cmp	r5, #0
    2e94:	d1f3      	bne.n	2e7e <main+0x1f2>
			printf("[FAIL]\n\r");
			return;
		}		
	}
	time_ms = time_tick_calc_delay(tick_start, time_tick_get());
    2e96:	4b81      	ldr	r3, [pc, #516]	; (309c <main+0x410>)
    2e98:	4798      	blx	r3
    2e9a:	0001      	movs	r1, r0
    2e9c:	9802      	ldr	r0, [sp, #8]
    2e9e:	4b83      	ldr	r3, [pc, #524]	; (30ac <main+0x420>)
    2ea0:	4798      	blx	r3
    2ea2:	1e01      	subs	r1, r0, #0
	if (time_ms) { // Valid time_ms
    2ea4:	d007      	beq.n	2eb6 <main+0x22a>
		printf(" %d KBps ", (int)(((TEST_MEM_AREA_SIZE
				* 1000lu) / 1024lu) / time_ms));
    2ea6:	20fa      	movs	r0, #250	; 0xfa
    2ea8:	0240      	lsls	r0, r0, #9
    2eaa:	4b81      	ldr	r3, [pc, #516]	; (30b0 <main+0x424>)
    2eac:	4798      	blx	r3
    2eae:	0001      	movs	r1, r0
		printf(" %d KBps ", (int)(((TEST_MEM_AREA_SIZE
    2eb0:	4880      	ldr	r0, [pc, #512]	; (30b4 <main+0x428>)
    2eb2:	4b5e      	ldr	r3, [pc, #376]	; (302c <main+0x3a0>)
    2eb4:	4798      	blx	r3
	}
	printf("[OK]\n\r");
    2eb6:	4880      	ldr	r0, [pc, #512]	; (30b8 <main+0x42c>)
    2eb8:	4b5c      	ldr	r3, [pc, #368]	; (302c <main+0x3a0>)
    2eba:	4798      	blx	r3

	if (sd_mmc_is_write_protected(slot)) {
    2ebc:	0020      	movs	r0, r4
    2ebe:	4b7f      	ldr	r3, [pc, #508]	; (30bc <main+0x430>)
    2ec0:	4798      	blx	r3
    2ec2:	2800      	cmp	r0, #0
    2ec4:	d127      	bne.n	2f16 <main+0x28a>
    2ec6:	4f5e      	ldr	r7, [pc, #376]	; (3040 <main+0x3b4>)
    2ec8:	2380      	movs	r3, #128	; 0x80
    2eca:	015b      	lsls	r3, r3, #5
    2ecc:	18fa      	adds	r2, r7, r3
    2ece:	003d      	movs	r5, r7
		return;
	}
	
	// Fill buffer with a pattern
	for (i = 0; i < (TEST_MEM_ACCESS_SIZE / sizeof(uint32_t)); i++) {
		((uint32_t*)buf_test)[i] = TEST_FILL_VALUE_U32;
    2ed0:	4b7b      	ldr	r3, [pc, #492]	; (30c0 <main+0x434>)
    2ed2:	c508      	stmia	r5!, {r3}
	for (i = 0; i < (TEST_MEM_ACCESS_SIZE / sizeof(uint32_t)); i++) {
    2ed4:	4295      	cmp	r5, r2
    2ed6:	d1fc      	bne.n	2ed2 <main+0x246>
	}

	printf("    Write pattern... ");
    2ed8:	487a      	ldr	r0, [pc, #488]	; (30c4 <main+0x438>)
    2eda:	4b54      	ldr	r3, [pc, #336]	; (302c <main+0x3a0>)
    2edc:	4798      	blx	r3
	if (SD_MMC_OK != sd_mmc_init_write_blocks(slot,
    2ede:	2280      	movs	r2, #128	; 0x80
    2ee0:	0052      	lsls	r2, r2, #1
    2ee2:	9901      	ldr	r1, [sp, #4]
    2ee4:	0020      	movs	r0, r4
    2ee6:	4b78      	ldr	r3, [pc, #480]	; (30c8 <main+0x43c>)
    2ee8:	4798      	blx	r3
    2eea:	2800      	cmp	r0, #0
    2eec:	d017      	beq.n	2f1e <main+0x292>
			last_blocks_addr,
			TEST_MEM_AREA_SIZE / SD_MMC_BLOCK_SIZE)) {
		printf("[FAIL]\n\r");
    2eee:	4877      	ldr	r0, [pc, #476]	; (30cc <main+0x440>)
    2ef0:	4b4e      	ldr	r3, [pc, #312]	; (302c <main+0x3a0>)
    2ef2:	4798      	blx	r3
    2ef4:	e77a      	b.n	2dec <main+0x160>
		printf("[Memory is too small.]\n\r");
    2ef6:	4876      	ldr	r0, [pc, #472]	; (30d0 <main+0x444>)
    2ef8:	4b4c      	ldr	r3, [pc, #304]	; (302c <main+0x3a0>)
    2efa:	4798      	blx	r3
    2efc:	e776      	b.n	2dec <main+0x160>
		printf("[FAIL]\n\r");
    2efe:	4873      	ldr	r0, [pc, #460]	; (30cc <main+0x440>)
    2f00:	4b4a      	ldr	r3, [pc, #296]	; (302c <main+0x3a0>)
    2f02:	4798      	blx	r3
    2f04:	e772      	b.n	2dec <main+0x160>
			printf("[FAIL]\n\r");
    2f06:	4871      	ldr	r0, [pc, #452]	; (30cc <main+0x440>)
    2f08:	4b48      	ldr	r3, [pc, #288]	; (302c <main+0x3a0>)
    2f0a:	4798      	blx	r3
    2f0c:	e76e      	b.n	2dec <main+0x160>
			printf("[FAIL]\n\r");
    2f0e:	486f      	ldr	r0, [pc, #444]	; (30cc <main+0x440>)
    2f10:	4b46      	ldr	r3, [pc, #280]	; (302c <main+0x3a0>)
    2f12:	4798      	blx	r3
    2f14:	e76a      	b.n	2dec <main+0x160>
		printf("Card is write protected [WRITE TEST SKIPPED]\n\r");
    2f16:	486f      	ldr	r0, [pc, #444]	; (30d4 <main+0x448>)
    2f18:	4b44      	ldr	r3, [pc, #272]	; (302c <main+0x3a0>)
    2f1a:	4798      	blx	r3
    2f1c:	e766      	b.n	2dec <main+0x160>
		return;
	}
	tick_start = time_tick_get();
    2f1e:	4b5f      	ldr	r3, [pc, #380]	; (309c <main+0x410>)
    2f20:	4798      	blx	r3
    2f22:	9002      	str	r0, [sp, #8]
	for (nb_trans = 0; nb_trans < (TEST_MEM_AREA_SIZE / TEST_MEM_ACCESS_SIZE);
    2f24:	2600      	movs	r6, #0
			nb_trans++) {
		((uint32_t*)buf_test)[0] = nb_trans; // Unique value for each area
    2f26:	4b46      	ldr	r3, [pc, #280]	; (3040 <main+0x3b4>)
    2f28:	469a      	mov	sl, r3
		if (SD_MMC_OK != sd_mmc_start_write_blocks(buf_test,
    2f2a:	4b6b      	ldr	r3, [pc, #428]	; (30d8 <main+0x44c>)
    2f2c:	469b      	mov	fp, r3
		((uint32_t*)buf_test)[0] = nb_trans; // Unique value for each area
    2f2e:	4653      	mov	r3, sl
    2f30:	601e      	str	r6, [r3, #0]
		if (SD_MMC_OK != sd_mmc_start_write_blocks(buf_test,
    2f32:	2108      	movs	r1, #8
    2f34:	4650      	mov	r0, sl
    2f36:	47d8      	blx	fp
    2f38:	2800      	cmp	r0, #0
    2f3a:	d12b      	bne.n	2f94 <main+0x308>
				TEST_MEM_ACCESS_SIZE / SD_MMC_BLOCK_SIZE)) {
			printf("[FAIL]\n\r");
			return;
		}
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    2f3c:	2000      	movs	r0, #0
    2f3e:	4b67      	ldr	r3, [pc, #412]	; (30dc <main+0x450>)
    2f40:	4798      	blx	r3
    2f42:	2800      	cmp	r0, #0
    2f44:	d12a      	bne.n	2f9c <main+0x310>
			nb_trans++) {
    2f46:	3601      	adds	r6, #1
	for (nb_trans = 0; nb_trans < (TEST_MEM_AREA_SIZE / TEST_MEM_ACCESS_SIZE);
    2f48:	2e20      	cmp	r6, #32
    2f4a:	d1f0      	bne.n	2f2e <main+0x2a2>
			printf("[FAIL]\n\r");
			return;
		}
	}
	time_ms = time_tick_calc_delay(tick_start, time_tick_get());
    2f4c:	4b53      	ldr	r3, [pc, #332]	; (309c <main+0x410>)
    2f4e:	4798      	blx	r3
    2f50:	0001      	movs	r1, r0
    2f52:	9802      	ldr	r0, [sp, #8]
    2f54:	4b55      	ldr	r3, [pc, #340]	; (30ac <main+0x420>)
    2f56:	4798      	blx	r3
    2f58:	1e01      	subs	r1, r0, #0
	if (time_ms) { // Valid time_ms
    2f5a:	d007      	beq.n	2f6c <main+0x2e0>
		printf(" %d KBps ", (int)(((TEST_MEM_AREA_SIZE
				* 1000lu) / 1024lu) / time_ms));
    2f5c:	20fa      	movs	r0, #250	; 0xfa
    2f5e:	0240      	lsls	r0, r0, #9
    2f60:	4b53      	ldr	r3, [pc, #332]	; (30b0 <main+0x424>)
    2f62:	4798      	blx	r3
    2f64:	0001      	movs	r1, r0
		printf(" %d KBps ", (int)(((TEST_MEM_AREA_SIZE
    2f66:	4853      	ldr	r0, [pc, #332]	; (30b4 <main+0x428>)
    2f68:	4b30      	ldr	r3, [pc, #192]	; (302c <main+0x3a0>)
    2f6a:	4798      	blx	r3
	}
	printf("[OK]\n\r");
    2f6c:	4852      	ldr	r0, [pc, #328]	; (30b8 <main+0x42c>)
    2f6e:	4b2f      	ldr	r3, [pc, #188]	; (302c <main+0x3a0>)
    2f70:	4699      	mov	r9, r3
    2f72:	4798      	blx	r3

	printf("    Read and check pattern... ");
    2f74:	485a      	ldr	r0, [pc, #360]	; (30e0 <main+0x454>)
    2f76:	47c8      	blx	r9
	if (SD_MMC_OK != sd_mmc_init_read_blocks(slot,
    2f78:	2280      	movs	r2, #128	; 0x80
    2f7a:	0052      	lsls	r2, r2, #1
    2f7c:	9901      	ldr	r1, [sp, #4]
    2f7e:	0020      	movs	r0, r4
    2f80:	4b47      	ldr	r3, [pc, #284]	; (30a0 <main+0x414>)
    2f82:	4798      	blx	r3
    2f84:	2600      	movs	r6, #0
    2f86:	2800      	cmp	r0, #0
    2f88:	d100      	bne.n	2f8c <main+0x300>
    2f8a:	e0c0      	b.n	310e <main+0x482>
			last_blocks_addr,
			TEST_MEM_AREA_SIZE / SD_MMC_BLOCK_SIZE)) {
		printf("Read [FAIL]\n\r");
    2f8c:	4855      	ldr	r0, [pc, #340]	; (30e4 <main+0x458>)
    2f8e:	4b27      	ldr	r3, [pc, #156]	; (302c <main+0x3a0>)
    2f90:	4798      	blx	r3
    2f92:	e72b      	b.n	2dec <main+0x160>
			printf("[FAIL]\n\r");
    2f94:	484d      	ldr	r0, [pc, #308]	; (30cc <main+0x440>)
    2f96:	4b25      	ldr	r3, [pc, #148]	; (302c <main+0x3a0>)
    2f98:	4798      	blx	r3
    2f9a:	e727      	b.n	2dec <main+0x160>
			printf("[FAIL]\n\r");
    2f9c:	484b      	ldr	r0, [pc, #300]	; (30cc <main+0x440>)
    2f9e:	4b23      	ldr	r3, [pc, #140]	; (302c <main+0x3a0>)
    2fa0:	4798      	blx	r3
    2fa2:	e723      	b.n	2dec <main+0x160>
		if (SD_MMC_OK != sd_mmc_start_read_blocks(buf_test,
					TEST_MEM_ACCESS_SIZE / SD_MMC_BLOCK_SIZE)) {
			printf("Read [FAIL]\n\r");
			return;
		}
		if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    2fa4:	2000      	movs	r0, #0
    2fa6:	4b40      	ldr	r3, [pc, #256]	; (30a8 <main+0x41c>)
    2fa8:	4798      	blx	r3
    2faa:	2800      	cmp	r0, #0
    2fac:	d003      	beq.n	2fb6 <main+0x32a>
			printf("Read [FAIL]\n\r");
    2fae:	484d      	ldr	r0, [pc, #308]	; (30e4 <main+0x458>)
    2fb0:	4b1e      	ldr	r3, [pc, #120]	; (302c <main+0x3a0>)
    2fb2:	4798      	blx	r3
    2fb4:	e71a      	b.n	2dec <main+0x160>
			return;
		}
		// Check the unique value of the area
		if (((uint32_t*)buf_test)[0] != nb_trans) {
    2fb6:	4b22      	ldr	r3, [pc, #136]	; (3040 <main+0x3b4>)
    2fb8:	681b      	ldr	r3, [r3, #0]
    2fba:	42b3      	cmp	r3, r6
    2fbc:	d109      	bne.n	2fd2 <main+0x346>
			printf("Check [FAIL]\n\r");
			return;
		}
		// Check buffer
		for (i = 1; i < (TEST_MEM_ACCESS_SIZE / sizeof(uint32_t)); i++) {
			if (((uint32_t*)buf_test)[i] != TEST_FILL_VALUE_U32) {
    2fbe:	4b40      	ldr	r3, [pc, #256]	; (30c0 <main+0x434>)
    2fc0:	4a1f      	ldr	r2, [pc, #124]	; (3040 <main+0x3b4>)
    2fc2:	6852      	ldr	r2, [r2, #4]
    2fc4:	429a      	cmp	r2, r3
    2fc6:	d100      	bne.n	2fca <main+0x33e>
    2fc8:	e090      	b.n	30ec <main+0x460>
				printf("Check [FAIL]\n\r");
    2fca:	4847      	ldr	r0, [pc, #284]	; (30e8 <main+0x45c>)
    2fcc:	4b17      	ldr	r3, [pc, #92]	; (302c <main+0x3a0>)
    2fce:	4798      	blx	r3
    2fd0:	e70c      	b.n	2dec <main+0x160>
			printf("Check [FAIL]\n\r");
    2fd2:	4845      	ldr	r0, [pc, #276]	; (30e8 <main+0x45c>)
    2fd4:	4b15      	ldr	r3, [pc, #84]	; (302c <main+0x3a0>)
    2fd6:	4798      	blx	r3
    2fd8:	e708      	b.n	2dec <main+0x160>
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	00002a65 	.word	0x00002a65
    2fe0:	00001185 	.word	0x00001185
    2fe4:	00160002 	.word	0x00160002
    2fe8:	00170002 	.word	0x00170002
    2fec:	20001188 	.word	0x20001188
    2ff0:	20001184 	.word	0x20001184
    2ff4:	00002c75 	.word	0x00002c75
    2ff8:	20001180 	.word	0x20001180
    2ffc:	00002c49 	.word	0x00002c49
    3000:	2000117c 	.word	0x2000117c
    3004:	42001400 	.word	0x42001400
    3008:	00001d8d 	.word	0x00001d8d
    300c:	20000034 	.word	0x20000034
    3010:	000035d9 	.word	0x000035d9
    3014:	00001609 	.word	0x00001609
    3018:	e000e100 	.word	0xe000e100
    301c:	20000031 	.word	0x20000031
    3020:	0000315d 	.word	0x0000315d
    3024:	0000032d 	.word	0x0000032d
    3028:	000046b0 	.word	0x000046b0
    302c:	000035a5 	.word	0x000035a5
    3030:	000046d0 	.word	0x000046d0
    3034:	000046dc 	.word	0x000046dc
    3038:	000046e8 	.word	0x000046e8
    303c:	0000034d 	.word	0x0000034d
    3040:	20000154 	.word	0x20000154
    3044:	00000ff8 	.word	0x00000ff8
    3048:	0000472c 	.word	0x0000472c
    304c:	00004744 	.word	0x00004744
    3050:	00000351 	.word	0x00000351
    3054:	0000476c 	.word	0x0000476c
    3058:	00004780 	.word	0x00004780
    305c:	00000801 	.word	0x00000801
    3060:	00004684 	.word	0x00004684
    3064:	00004788 	.word	0x00004788
    3068:	00000829 	.word	0x00000829
    306c:	000047c4 	.word	0x000047c4
    3070:	000048bc 	.word	0x000048bc
    3074:	00004700 	.word	0x00004700
    3078:	00004790 	.word	0x00004790
    307c:	00004794 	.word	0x00004794
    3080:	000047a8 	.word	0x000047a8
    3084:	000047ac 	.word	0x000047ac
    3088:	000047b8 	.word	0x000047b8
    308c:	00001fff 	.word	0x00001fff
    3090:	ffffe000 	.word	0xffffe000
    3094:	000047f0 	.word	0x000047f0
    3098:	00004804 	.word	0x00004804
    309c:	000031b1 	.word	0x000031b1
    30a0:	00000855 	.word	0x00000855
    30a4:	000008dd 	.word	0x000008dd
    30a8:	00000909 	.word	0x00000909
    30ac:	000031bd 	.word	0x000031bd
    30b0:	000031cd 	.word	0x000031cd
    30b4:	00004820 	.word	0x00004820
    30b8:	0000482c 	.word	0x0000482c
    30bc:	00000851 	.word	0x00000851
    30c0:	5500aaff 	.word	0x5500aaff
    30c4:	00004864 	.word	0x00004864
    30c8:	00000979 	.word	0x00000979
    30cc:	00004814 	.word	0x00004814
    30d0:	000047d4 	.word	0x000047d4
    30d4:	00004834 	.word	0x00004834
    30d8:	000009e9 	.word	0x000009e9
    30dc:	00000a15 	.word	0x00000a15
    30e0:	0000487c 	.word	0x0000487c
    30e4:	0000489c 	.word	0x0000489c
    30e8:	000048ac 	.word	0x000048ac
			if (((uint32_t*)buf_test)[i] != TEST_FILL_VALUE_U32) {
    30ec:	003b      	movs	r3, r7
    30ee:	4a11      	ldr	r2, [pc, #68]	; (3134 <main+0x4a8>)
    30f0:	6899      	ldr	r1, [r3, #8]
    30f2:	4291      	cmp	r1, r2
    30f4:	d000      	beq.n	30f8 <main+0x46c>
    30f6:	e768      	b.n	2fca <main+0x33e>
    30f8:	3304      	adds	r3, #4
		for (i = 1; i < (TEST_MEM_ACCESS_SIZE / sizeof(uint32_t)); i++) {
    30fa:	9903      	ldr	r1, [sp, #12]
    30fc:	4299      	cmp	r1, r3
    30fe:	d1f7      	bne.n	30f0 <main+0x464>
			nb_trans++) {
    3100:	3601      	adds	r6, #1
	for (nb_trans = 0; nb_trans < (TEST_MEM_AREA_SIZE / TEST_MEM_ACCESS_SIZE);
    3102:	2e20      	cmp	r6, #32
    3104:	d105      	bne.n	3112 <main+0x486>
				return;
			}
		}
	}
	printf("[OK]\n\r");
    3106:	480c      	ldr	r0, [pc, #48]	; (3138 <main+0x4ac>)
    3108:	4b0c      	ldr	r3, [pc, #48]	; (313c <main+0x4b0>)
    310a:	4798      	blx	r3
    310c:	e66e      	b.n	2dec <main+0x160>
		if (SD_MMC_OK != sd_mmc_start_read_blocks(buf_test,
    310e:	4b0c      	ldr	r3, [pc, #48]	; (3140 <main+0x4b4>)
    3110:	4699      	mov	r9, r3
	for (nb_trans = 0; nb_trans < (TEST_MEM_AREA_SIZE / TEST_MEM_ACCESS_SIZE);
    3112:	003b      	movs	r3, r7
			((uint32_t*)buf_test)[i] = 0xFFFFFFFF;
    3114:	2201      	movs	r2, #1
    3116:	4252      	negs	r2, r2
    3118:	c304      	stmia	r3!, {r2}
		for (i = 0; i < (TEST_MEM_ACCESS_SIZE / sizeof(uint32_t)); i++) {
    311a:	42ab      	cmp	r3, r5
    311c:	d1fc      	bne.n	3118 <main+0x48c>
		if (SD_MMC_OK != sd_mmc_start_read_blocks(buf_test,
    311e:	2108      	movs	r1, #8
    3120:	4648      	mov	r0, r9
    3122:	4b08      	ldr	r3, [pc, #32]	; (3144 <main+0x4b8>)
    3124:	4798      	blx	r3
    3126:	2800      	cmp	r0, #0
    3128:	d100      	bne.n	312c <main+0x4a0>
    312a:	e73b      	b.n	2fa4 <main+0x318>
			printf("Read [FAIL]\n\r");
    312c:	4806      	ldr	r0, [pc, #24]	; (3148 <main+0x4bc>)
    312e:	4b03      	ldr	r3, [pc, #12]	; (313c <main+0x4b0>)
    3130:	4798      	blx	r3
    3132:	e65b      	b.n	2dec <main+0x160>
    3134:	5500aaff 	.word	0x5500aaff
    3138:	0000482c 	.word	0x0000482c
    313c:	000035a5 	.word	0x000035a5
    3140:	20000154 	.word	0x20000154
    3144:	000008dd 	.word	0x000008dd
    3148:	0000489c 	.word	0x0000489c

0000314c <SysTick_Handler>:
 * Process System Tick Event
 * Increments the g_ms_ticks counter.
 */
void SysTick_Handler(void)
{
	g_ms_ticks++;
    314c:	4a02      	ldr	r2, [pc, #8]	; (3158 <SysTick_Handler+0xc>)
    314e:	6813      	ldr	r3, [r2, #0]
    3150:	3301      	adds	r3, #1
    3152:	6013      	str	r3, [r2, #0]
}
    3154:	4770      	bx	lr
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	20001154 	.word	0x20001154

0000315c <time_tick_init>:

void time_tick_init(void)
{
    315c:	b510      	push	{r4, lr}
	g_ms_ticks = 0;
    315e:	2200      	movs	r2, #0
    3160:	4b0d      	ldr	r3, [pc, #52]	; (3198 <time_tick_init+0x3c>)
    3162:	601a      	str	r2, [r3, #0]

	/* Configure systick */
	if (SysTick_Config(system_gclk_gen_get_hz(0) / TICK_MS)) {
    3164:	2000      	movs	r0, #0
    3166:	4b0d      	ldr	r3, [pc, #52]	; (319c <time_tick_init+0x40>)
    3168:	4798      	blx	r3
    316a:	21fa      	movs	r1, #250	; 0xfa
    316c:	0089      	lsls	r1, r1, #2
    316e:	4b0c      	ldr	r3, [pc, #48]	; (31a0 <time_tick_init+0x44>)
    3170:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    3172:	3801      	subs	r0, #1
    3174:	4b0b      	ldr	r3, [pc, #44]	; (31a4 <time_tick_init+0x48>)
    3176:	4298      	cmp	r0, r3
    3178:	d80d      	bhi.n	3196 <time_tick_init+0x3a>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    317a:	4a0b      	ldr	r2, [pc, #44]	; (31a8 <time_tick_init+0x4c>)
    317c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    317e:	480b      	ldr	r0, [pc, #44]	; (31ac <time_tick_init+0x50>)
    3180:	6a03      	ldr	r3, [r0, #32]
    3182:	021b      	lsls	r3, r3, #8
    3184:	0a1b      	lsrs	r3, r3, #8
    3186:	21c0      	movs	r1, #192	; 0xc0
    3188:	0609      	lsls	r1, r1, #24
    318a:	430b      	orrs	r3, r1
    318c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    318e:	2300      	movs	r3, #0
    3190:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3192:	3307      	adds	r3, #7
    3194:	6013      	str	r3, [r2, #0]
		Assert(false);
	}
}
    3196:	bd10      	pop	{r4, pc}
    3198:	20001154 	.word	0x20001154
    319c:	00002821 	.word	0x00002821
    31a0:	000031cd 	.word	0x000031cd
    31a4:	00ffffff 	.word	0x00ffffff
    31a8:	e000e010 	.word	0xe000e010
    31ac:	e000ed00 	.word	0xe000ed00

000031b0 <time_tick_get>:

uint32_t time_tick_get(void)
{
	return g_ms_ticks;
    31b0:	4b01      	ldr	r3, [pc, #4]	; (31b8 <time_tick_get+0x8>)
    31b2:	6818      	ldr	r0, [r3, #0]
}
    31b4:	4770      	bx	lr
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	20001154 	.word	0x20001154

000031bc <time_tick_calc_delay>:

uint32_t time_tick_calc_delay(uint32_t tick_start, uint32_t tick_end)
{
	if (tick_end >= tick_start) {
    31bc:	4281      	cmp	r1, r0
    31be:	d202      	bcs.n	31c6 <time_tick_calc_delay+0xa>
		return (tick_end - tick_start);
	} else {
		/* In the case of 32-bit couter number overflow */
		return (tick_end + (0xFFFFFFFF - tick_start));
    31c0:	1a08      	subs	r0, r1, r0
    31c2:	3801      	subs	r0, #1
	}
}
    31c4:	4770      	bx	lr
		return (tick_end - tick_start);
    31c6:	1a08      	subs	r0, r1, r0
    31c8:	e7fc      	b.n	31c4 <time_tick_calc_delay+0x8>
	...

000031cc <__udivsi3>:
    31cc:	2200      	movs	r2, #0
    31ce:	0843      	lsrs	r3, r0, #1
    31d0:	428b      	cmp	r3, r1
    31d2:	d374      	bcc.n	32be <__udivsi3+0xf2>
    31d4:	0903      	lsrs	r3, r0, #4
    31d6:	428b      	cmp	r3, r1
    31d8:	d35f      	bcc.n	329a <__udivsi3+0xce>
    31da:	0a03      	lsrs	r3, r0, #8
    31dc:	428b      	cmp	r3, r1
    31de:	d344      	bcc.n	326a <__udivsi3+0x9e>
    31e0:	0b03      	lsrs	r3, r0, #12
    31e2:	428b      	cmp	r3, r1
    31e4:	d328      	bcc.n	3238 <__udivsi3+0x6c>
    31e6:	0c03      	lsrs	r3, r0, #16
    31e8:	428b      	cmp	r3, r1
    31ea:	d30d      	bcc.n	3208 <__udivsi3+0x3c>
    31ec:	22ff      	movs	r2, #255	; 0xff
    31ee:	0209      	lsls	r1, r1, #8
    31f0:	ba12      	rev	r2, r2
    31f2:	0c03      	lsrs	r3, r0, #16
    31f4:	428b      	cmp	r3, r1
    31f6:	d302      	bcc.n	31fe <__udivsi3+0x32>
    31f8:	1212      	asrs	r2, r2, #8
    31fa:	0209      	lsls	r1, r1, #8
    31fc:	d065      	beq.n	32ca <__udivsi3+0xfe>
    31fe:	0b03      	lsrs	r3, r0, #12
    3200:	428b      	cmp	r3, r1
    3202:	d319      	bcc.n	3238 <__udivsi3+0x6c>
    3204:	e000      	b.n	3208 <__udivsi3+0x3c>
    3206:	0a09      	lsrs	r1, r1, #8
    3208:	0bc3      	lsrs	r3, r0, #15
    320a:	428b      	cmp	r3, r1
    320c:	d301      	bcc.n	3212 <__udivsi3+0x46>
    320e:	03cb      	lsls	r3, r1, #15
    3210:	1ac0      	subs	r0, r0, r3
    3212:	4152      	adcs	r2, r2
    3214:	0b83      	lsrs	r3, r0, #14
    3216:	428b      	cmp	r3, r1
    3218:	d301      	bcc.n	321e <__udivsi3+0x52>
    321a:	038b      	lsls	r3, r1, #14
    321c:	1ac0      	subs	r0, r0, r3
    321e:	4152      	adcs	r2, r2
    3220:	0b43      	lsrs	r3, r0, #13
    3222:	428b      	cmp	r3, r1
    3224:	d301      	bcc.n	322a <__udivsi3+0x5e>
    3226:	034b      	lsls	r3, r1, #13
    3228:	1ac0      	subs	r0, r0, r3
    322a:	4152      	adcs	r2, r2
    322c:	0b03      	lsrs	r3, r0, #12
    322e:	428b      	cmp	r3, r1
    3230:	d301      	bcc.n	3236 <__udivsi3+0x6a>
    3232:	030b      	lsls	r3, r1, #12
    3234:	1ac0      	subs	r0, r0, r3
    3236:	4152      	adcs	r2, r2
    3238:	0ac3      	lsrs	r3, r0, #11
    323a:	428b      	cmp	r3, r1
    323c:	d301      	bcc.n	3242 <__udivsi3+0x76>
    323e:	02cb      	lsls	r3, r1, #11
    3240:	1ac0      	subs	r0, r0, r3
    3242:	4152      	adcs	r2, r2
    3244:	0a83      	lsrs	r3, r0, #10
    3246:	428b      	cmp	r3, r1
    3248:	d301      	bcc.n	324e <__udivsi3+0x82>
    324a:	028b      	lsls	r3, r1, #10
    324c:	1ac0      	subs	r0, r0, r3
    324e:	4152      	adcs	r2, r2
    3250:	0a43      	lsrs	r3, r0, #9
    3252:	428b      	cmp	r3, r1
    3254:	d301      	bcc.n	325a <__udivsi3+0x8e>
    3256:	024b      	lsls	r3, r1, #9
    3258:	1ac0      	subs	r0, r0, r3
    325a:	4152      	adcs	r2, r2
    325c:	0a03      	lsrs	r3, r0, #8
    325e:	428b      	cmp	r3, r1
    3260:	d301      	bcc.n	3266 <__udivsi3+0x9a>
    3262:	020b      	lsls	r3, r1, #8
    3264:	1ac0      	subs	r0, r0, r3
    3266:	4152      	adcs	r2, r2
    3268:	d2cd      	bcs.n	3206 <__udivsi3+0x3a>
    326a:	09c3      	lsrs	r3, r0, #7
    326c:	428b      	cmp	r3, r1
    326e:	d301      	bcc.n	3274 <__udivsi3+0xa8>
    3270:	01cb      	lsls	r3, r1, #7
    3272:	1ac0      	subs	r0, r0, r3
    3274:	4152      	adcs	r2, r2
    3276:	0983      	lsrs	r3, r0, #6
    3278:	428b      	cmp	r3, r1
    327a:	d301      	bcc.n	3280 <__udivsi3+0xb4>
    327c:	018b      	lsls	r3, r1, #6
    327e:	1ac0      	subs	r0, r0, r3
    3280:	4152      	adcs	r2, r2
    3282:	0943      	lsrs	r3, r0, #5
    3284:	428b      	cmp	r3, r1
    3286:	d301      	bcc.n	328c <__udivsi3+0xc0>
    3288:	014b      	lsls	r3, r1, #5
    328a:	1ac0      	subs	r0, r0, r3
    328c:	4152      	adcs	r2, r2
    328e:	0903      	lsrs	r3, r0, #4
    3290:	428b      	cmp	r3, r1
    3292:	d301      	bcc.n	3298 <__udivsi3+0xcc>
    3294:	010b      	lsls	r3, r1, #4
    3296:	1ac0      	subs	r0, r0, r3
    3298:	4152      	adcs	r2, r2
    329a:	08c3      	lsrs	r3, r0, #3
    329c:	428b      	cmp	r3, r1
    329e:	d301      	bcc.n	32a4 <__udivsi3+0xd8>
    32a0:	00cb      	lsls	r3, r1, #3
    32a2:	1ac0      	subs	r0, r0, r3
    32a4:	4152      	adcs	r2, r2
    32a6:	0883      	lsrs	r3, r0, #2
    32a8:	428b      	cmp	r3, r1
    32aa:	d301      	bcc.n	32b0 <__udivsi3+0xe4>
    32ac:	008b      	lsls	r3, r1, #2
    32ae:	1ac0      	subs	r0, r0, r3
    32b0:	4152      	adcs	r2, r2
    32b2:	0843      	lsrs	r3, r0, #1
    32b4:	428b      	cmp	r3, r1
    32b6:	d301      	bcc.n	32bc <__udivsi3+0xf0>
    32b8:	004b      	lsls	r3, r1, #1
    32ba:	1ac0      	subs	r0, r0, r3
    32bc:	4152      	adcs	r2, r2
    32be:	1a41      	subs	r1, r0, r1
    32c0:	d200      	bcs.n	32c4 <__udivsi3+0xf8>
    32c2:	4601      	mov	r1, r0
    32c4:	4152      	adcs	r2, r2
    32c6:	4610      	mov	r0, r2
    32c8:	4770      	bx	lr
    32ca:	e7ff      	b.n	32cc <__udivsi3+0x100>
    32cc:	b501      	push	{r0, lr}
    32ce:	2000      	movs	r0, #0
    32d0:	f000 f806 	bl	32e0 <__aeabi_idiv0>
    32d4:	bd02      	pop	{r1, pc}
    32d6:	46c0      	nop			; (mov r8, r8)

000032d8 <__aeabi_uidivmod>:
    32d8:	2900      	cmp	r1, #0
    32da:	d0f7      	beq.n	32cc <__udivsi3+0x100>
    32dc:	e776      	b.n	31cc <__udivsi3>
    32de:	4770      	bx	lr

000032e0 <__aeabi_idiv0>:
    32e0:	4770      	bx	lr
    32e2:	46c0      	nop			; (mov r8, r8)

000032e4 <__aeabi_uldivmod>:
    32e4:	2b00      	cmp	r3, #0
    32e6:	d111      	bne.n	330c <__aeabi_uldivmod+0x28>
    32e8:	2a00      	cmp	r2, #0
    32ea:	d10f      	bne.n	330c <__aeabi_uldivmod+0x28>
    32ec:	2900      	cmp	r1, #0
    32ee:	d100      	bne.n	32f2 <__aeabi_uldivmod+0xe>
    32f0:	2800      	cmp	r0, #0
    32f2:	d002      	beq.n	32fa <__aeabi_uldivmod+0x16>
    32f4:	2100      	movs	r1, #0
    32f6:	43c9      	mvns	r1, r1
    32f8:	1c08      	adds	r0, r1, #0
    32fa:	b407      	push	{r0, r1, r2}
    32fc:	4802      	ldr	r0, [pc, #8]	; (3308 <__aeabi_uldivmod+0x24>)
    32fe:	a102      	add	r1, pc, #8	; (adr r1, 3308 <__aeabi_uldivmod+0x24>)
    3300:	1840      	adds	r0, r0, r1
    3302:	9002      	str	r0, [sp, #8]
    3304:	bd03      	pop	{r0, r1, pc}
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	ffffffd9 	.word	0xffffffd9
    330c:	b403      	push	{r0, r1}
    330e:	4668      	mov	r0, sp
    3310:	b501      	push	{r0, lr}
    3312:	9802      	ldr	r0, [sp, #8]
    3314:	f000 f830 	bl	3378 <__udivmoddi4>
    3318:	9b01      	ldr	r3, [sp, #4]
    331a:	469e      	mov	lr, r3
    331c:	b002      	add	sp, #8
    331e:	bc0c      	pop	{r2, r3}
    3320:	4770      	bx	lr
    3322:	46c0      	nop			; (mov r8, r8)

00003324 <__aeabi_lmul>:
    3324:	b5f0      	push	{r4, r5, r6, r7, lr}
    3326:	46ce      	mov	lr, r9
    3328:	4647      	mov	r7, r8
    332a:	0415      	lsls	r5, r2, #16
    332c:	0c2d      	lsrs	r5, r5, #16
    332e:	002e      	movs	r6, r5
    3330:	b580      	push	{r7, lr}
    3332:	0407      	lsls	r7, r0, #16
    3334:	0c14      	lsrs	r4, r2, #16
    3336:	0c3f      	lsrs	r7, r7, #16
    3338:	4699      	mov	r9, r3
    333a:	0c03      	lsrs	r3, r0, #16
    333c:	437e      	muls	r6, r7
    333e:	435d      	muls	r5, r3
    3340:	4367      	muls	r7, r4
    3342:	4363      	muls	r3, r4
    3344:	197f      	adds	r7, r7, r5
    3346:	0c34      	lsrs	r4, r6, #16
    3348:	19e4      	adds	r4, r4, r7
    334a:	469c      	mov	ip, r3
    334c:	42a5      	cmp	r5, r4
    334e:	d903      	bls.n	3358 <__aeabi_lmul+0x34>
    3350:	2380      	movs	r3, #128	; 0x80
    3352:	025b      	lsls	r3, r3, #9
    3354:	4698      	mov	r8, r3
    3356:	44c4      	add	ip, r8
    3358:	464b      	mov	r3, r9
    335a:	4351      	muls	r1, r2
    335c:	4343      	muls	r3, r0
    335e:	0436      	lsls	r6, r6, #16
    3360:	0c36      	lsrs	r6, r6, #16
    3362:	0c25      	lsrs	r5, r4, #16
    3364:	0424      	lsls	r4, r4, #16
    3366:	4465      	add	r5, ip
    3368:	19a4      	adds	r4, r4, r6
    336a:	1859      	adds	r1, r3, r1
    336c:	1949      	adds	r1, r1, r5
    336e:	0020      	movs	r0, r4
    3370:	bc0c      	pop	{r2, r3}
    3372:	4690      	mov	r8, r2
    3374:	4699      	mov	r9, r3
    3376:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003378 <__udivmoddi4>:
    3378:	b5f0      	push	{r4, r5, r6, r7, lr}
    337a:	4657      	mov	r7, sl
    337c:	464e      	mov	r6, r9
    337e:	4645      	mov	r5, r8
    3380:	46de      	mov	lr, fp
    3382:	b5e0      	push	{r5, r6, r7, lr}
    3384:	0004      	movs	r4, r0
    3386:	b083      	sub	sp, #12
    3388:	000d      	movs	r5, r1
    338a:	4692      	mov	sl, r2
    338c:	4699      	mov	r9, r3
    338e:	428b      	cmp	r3, r1
    3390:	d82f      	bhi.n	33f2 <__udivmoddi4+0x7a>
    3392:	d02c      	beq.n	33ee <__udivmoddi4+0x76>
    3394:	4649      	mov	r1, r9
    3396:	4650      	mov	r0, sl
    3398:	f000 f8ae 	bl	34f8 <__clzdi2>
    339c:	0029      	movs	r1, r5
    339e:	0006      	movs	r6, r0
    33a0:	0020      	movs	r0, r4
    33a2:	f000 f8a9 	bl	34f8 <__clzdi2>
    33a6:	1a33      	subs	r3, r6, r0
    33a8:	4698      	mov	r8, r3
    33aa:	3b20      	subs	r3, #32
    33ac:	469b      	mov	fp, r3
    33ae:	d500      	bpl.n	33b2 <__udivmoddi4+0x3a>
    33b0:	e074      	b.n	349c <__udivmoddi4+0x124>
    33b2:	4653      	mov	r3, sl
    33b4:	465a      	mov	r2, fp
    33b6:	4093      	lsls	r3, r2
    33b8:	001f      	movs	r7, r3
    33ba:	4653      	mov	r3, sl
    33bc:	4642      	mov	r2, r8
    33be:	4093      	lsls	r3, r2
    33c0:	001e      	movs	r6, r3
    33c2:	42af      	cmp	r7, r5
    33c4:	d829      	bhi.n	341a <__udivmoddi4+0xa2>
    33c6:	d026      	beq.n	3416 <__udivmoddi4+0x9e>
    33c8:	465b      	mov	r3, fp
    33ca:	1ba4      	subs	r4, r4, r6
    33cc:	41bd      	sbcs	r5, r7
    33ce:	2b00      	cmp	r3, #0
    33d0:	da00      	bge.n	33d4 <__udivmoddi4+0x5c>
    33d2:	e079      	b.n	34c8 <__udivmoddi4+0x150>
    33d4:	2200      	movs	r2, #0
    33d6:	2300      	movs	r3, #0
    33d8:	9200      	str	r2, [sp, #0]
    33da:	9301      	str	r3, [sp, #4]
    33dc:	2301      	movs	r3, #1
    33de:	465a      	mov	r2, fp
    33e0:	4093      	lsls	r3, r2
    33e2:	9301      	str	r3, [sp, #4]
    33e4:	2301      	movs	r3, #1
    33e6:	4642      	mov	r2, r8
    33e8:	4093      	lsls	r3, r2
    33ea:	9300      	str	r3, [sp, #0]
    33ec:	e019      	b.n	3422 <__udivmoddi4+0xaa>
    33ee:	4282      	cmp	r2, r0
    33f0:	d9d0      	bls.n	3394 <__udivmoddi4+0x1c>
    33f2:	2200      	movs	r2, #0
    33f4:	2300      	movs	r3, #0
    33f6:	9200      	str	r2, [sp, #0]
    33f8:	9301      	str	r3, [sp, #4]
    33fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    33fc:	2b00      	cmp	r3, #0
    33fe:	d001      	beq.n	3404 <__udivmoddi4+0x8c>
    3400:	601c      	str	r4, [r3, #0]
    3402:	605d      	str	r5, [r3, #4]
    3404:	9800      	ldr	r0, [sp, #0]
    3406:	9901      	ldr	r1, [sp, #4]
    3408:	b003      	add	sp, #12
    340a:	bc3c      	pop	{r2, r3, r4, r5}
    340c:	4690      	mov	r8, r2
    340e:	4699      	mov	r9, r3
    3410:	46a2      	mov	sl, r4
    3412:	46ab      	mov	fp, r5
    3414:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3416:	42a3      	cmp	r3, r4
    3418:	d9d6      	bls.n	33c8 <__udivmoddi4+0x50>
    341a:	2200      	movs	r2, #0
    341c:	2300      	movs	r3, #0
    341e:	9200      	str	r2, [sp, #0]
    3420:	9301      	str	r3, [sp, #4]
    3422:	4643      	mov	r3, r8
    3424:	2b00      	cmp	r3, #0
    3426:	d0e8      	beq.n	33fa <__udivmoddi4+0x82>
    3428:	07fb      	lsls	r3, r7, #31
    342a:	0872      	lsrs	r2, r6, #1
    342c:	431a      	orrs	r2, r3
    342e:	4646      	mov	r6, r8
    3430:	087b      	lsrs	r3, r7, #1
    3432:	e00e      	b.n	3452 <__udivmoddi4+0xda>
    3434:	42ab      	cmp	r3, r5
    3436:	d101      	bne.n	343c <__udivmoddi4+0xc4>
    3438:	42a2      	cmp	r2, r4
    343a:	d80c      	bhi.n	3456 <__udivmoddi4+0xde>
    343c:	1aa4      	subs	r4, r4, r2
    343e:	419d      	sbcs	r5, r3
    3440:	2001      	movs	r0, #1
    3442:	1924      	adds	r4, r4, r4
    3444:	416d      	adcs	r5, r5
    3446:	2100      	movs	r1, #0
    3448:	3e01      	subs	r6, #1
    344a:	1824      	adds	r4, r4, r0
    344c:	414d      	adcs	r5, r1
    344e:	2e00      	cmp	r6, #0
    3450:	d006      	beq.n	3460 <__udivmoddi4+0xe8>
    3452:	42ab      	cmp	r3, r5
    3454:	d9ee      	bls.n	3434 <__udivmoddi4+0xbc>
    3456:	3e01      	subs	r6, #1
    3458:	1924      	adds	r4, r4, r4
    345a:	416d      	adcs	r5, r5
    345c:	2e00      	cmp	r6, #0
    345e:	d1f8      	bne.n	3452 <__udivmoddi4+0xda>
    3460:	465b      	mov	r3, fp
    3462:	9800      	ldr	r0, [sp, #0]
    3464:	9901      	ldr	r1, [sp, #4]
    3466:	1900      	adds	r0, r0, r4
    3468:	4169      	adcs	r1, r5
    346a:	2b00      	cmp	r3, #0
    346c:	db22      	blt.n	34b4 <__udivmoddi4+0x13c>
    346e:	002b      	movs	r3, r5
    3470:	465a      	mov	r2, fp
    3472:	40d3      	lsrs	r3, r2
    3474:	002a      	movs	r2, r5
    3476:	4644      	mov	r4, r8
    3478:	40e2      	lsrs	r2, r4
    347a:	001c      	movs	r4, r3
    347c:	465b      	mov	r3, fp
    347e:	0015      	movs	r5, r2
    3480:	2b00      	cmp	r3, #0
    3482:	db2c      	blt.n	34de <__udivmoddi4+0x166>
    3484:	0026      	movs	r6, r4
    3486:	409e      	lsls	r6, r3
    3488:	0033      	movs	r3, r6
    348a:	0026      	movs	r6, r4
    348c:	4647      	mov	r7, r8
    348e:	40be      	lsls	r6, r7
    3490:	0032      	movs	r2, r6
    3492:	1a80      	subs	r0, r0, r2
    3494:	4199      	sbcs	r1, r3
    3496:	9000      	str	r0, [sp, #0]
    3498:	9101      	str	r1, [sp, #4]
    349a:	e7ae      	b.n	33fa <__udivmoddi4+0x82>
    349c:	4642      	mov	r2, r8
    349e:	2320      	movs	r3, #32
    34a0:	1a9b      	subs	r3, r3, r2
    34a2:	4652      	mov	r2, sl
    34a4:	40da      	lsrs	r2, r3
    34a6:	4641      	mov	r1, r8
    34a8:	0013      	movs	r3, r2
    34aa:	464a      	mov	r2, r9
    34ac:	408a      	lsls	r2, r1
    34ae:	0017      	movs	r7, r2
    34b0:	431f      	orrs	r7, r3
    34b2:	e782      	b.n	33ba <__udivmoddi4+0x42>
    34b4:	4642      	mov	r2, r8
    34b6:	2320      	movs	r3, #32
    34b8:	1a9b      	subs	r3, r3, r2
    34ba:	002a      	movs	r2, r5
    34bc:	4646      	mov	r6, r8
    34be:	409a      	lsls	r2, r3
    34c0:	0023      	movs	r3, r4
    34c2:	40f3      	lsrs	r3, r6
    34c4:	4313      	orrs	r3, r2
    34c6:	e7d5      	b.n	3474 <__udivmoddi4+0xfc>
    34c8:	4642      	mov	r2, r8
    34ca:	2320      	movs	r3, #32
    34cc:	2100      	movs	r1, #0
    34ce:	1a9b      	subs	r3, r3, r2
    34d0:	2200      	movs	r2, #0
    34d2:	9100      	str	r1, [sp, #0]
    34d4:	9201      	str	r2, [sp, #4]
    34d6:	2201      	movs	r2, #1
    34d8:	40da      	lsrs	r2, r3
    34da:	9201      	str	r2, [sp, #4]
    34dc:	e782      	b.n	33e4 <__udivmoddi4+0x6c>
    34de:	4642      	mov	r2, r8
    34e0:	2320      	movs	r3, #32
    34e2:	0026      	movs	r6, r4
    34e4:	1a9b      	subs	r3, r3, r2
    34e6:	40de      	lsrs	r6, r3
    34e8:	002f      	movs	r7, r5
    34ea:	46b4      	mov	ip, r6
    34ec:	4097      	lsls	r7, r2
    34ee:	4666      	mov	r6, ip
    34f0:	003b      	movs	r3, r7
    34f2:	4333      	orrs	r3, r6
    34f4:	e7c9      	b.n	348a <__udivmoddi4+0x112>
    34f6:	46c0      	nop			; (mov r8, r8)

000034f8 <__clzdi2>:
    34f8:	b510      	push	{r4, lr}
    34fa:	2900      	cmp	r1, #0
    34fc:	d103      	bne.n	3506 <__clzdi2+0xe>
    34fe:	f000 f807 	bl	3510 <__clzsi2>
    3502:	3020      	adds	r0, #32
    3504:	e002      	b.n	350c <__clzdi2+0x14>
    3506:	1c08      	adds	r0, r1, #0
    3508:	f000 f802 	bl	3510 <__clzsi2>
    350c:	bd10      	pop	{r4, pc}
    350e:	46c0      	nop			; (mov r8, r8)

00003510 <__clzsi2>:
    3510:	211c      	movs	r1, #28
    3512:	2301      	movs	r3, #1
    3514:	041b      	lsls	r3, r3, #16
    3516:	4298      	cmp	r0, r3
    3518:	d301      	bcc.n	351e <__clzsi2+0xe>
    351a:	0c00      	lsrs	r0, r0, #16
    351c:	3910      	subs	r1, #16
    351e:	0a1b      	lsrs	r3, r3, #8
    3520:	4298      	cmp	r0, r3
    3522:	d301      	bcc.n	3528 <__clzsi2+0x18>
    3524:	0a00      	lsrs	r0, r0, #8
    3526:	3908      	subs	r1, #8
    3528:	091b      	lsrs	r3, r3, #4
    352a:	4298      	cmp	r0, r3
    352c:	d301      	bcc.n	3532 <__clzsi2+0x22>
    352e:	0900      	lsrs	r0, r0, #4
    3530:	3904      	subs	r1, #4
    3532:	a202      	add	r2, pc, #8	; (adr r2, 353c <__clzsi2+0x2c>)
    3534:	5c10      	ldrb	r0, [r2, r0]
    3536:	1840      	adds	r0, r0, r1
    3538:	4770      	bx	lr
    353a:	46c0      	nop			; (mov r8, r8)
    353c:	02020304 	.word	0x02020304
    3540:	01010101 	.word	0x01010101
	...

0000354c <__libc_init_array>:
    354c:	b570      	push	{r4, r5, r6, lr}
    354e:	2600      	movs	r6, #0
    3550:	4d0c      	ldr	r5, [pc, #48]	; (3584 <__libc_init_array+0x38>)
    3552:	4c0d      	ldr	r4, [pc, #52]	; (3588 <__libc_init_array+0x3c>)
    3554:	1b64      	subs	r4, r4, r5
    3556:	10a4      	asrs	r4, r4, #2
    3558:	42a6      	cmp	r6, r4
    355a:	d109      	bne.n	3570 <__libc_init_array+0x24>
    355c:	2600      	movs	r6, #0
    355e:	f001 fa0f 	bl	4980 <_init>
    3562:	4d0a      	ldr	r5, [pc, #40]	; (358c <__libc_init_array+0x40>)
    3564:	4c0a      	ldr	r4, [pc, #40]	; (3590 <__libc_init_array+0x44>)
    3566:	1b64      	subs	r4, r4, r5
    3568:	10a4      	asrs	r4, r4, #2
    356a:	42a6      	cmp	r6, r4
    356c:	d105      	bne.n	357a <__libc_init_array+0x2e>
    356e:	bd70      	pop	{r4, r5, r6, pc}
    3570:	00b3      	lsls	r3, r6, #2
    3572:	58eb      	ldr	r3, [r5, r3]
    3574:	4798      	blx	r3
    3576:	3601      	adds	r6, #1
    3578:	e7ee      	b.n	3558 <__libc_init_array+0xc>
    357a:	00b3      	lsls	r3, r6, #2
    357c:	58eb      	ldr	r3, [r5, r3]
    357e:	4798      	blx	r3
    3580:	3601      	adds	r6, #1
    3582:	e7f2      	b.n	356a <__libc_init_array+0x1e>
    3584:	0000498c 	.word	0x0000498c
    3588:	0000498c 	.word	0x0000498c
    358c:	0000498c 	.word	0x0000498c
    3590:	00004990 	.word	0x00004990

00003594 <memset>:
    3594:	0003      	movs	r3, r0
    3596:	1882      	adds	r2, r0, r2
    3598:	4293      	cmp	r3, r2
    359a:	d100      	bne.n	359e <memset+0xa>
    359c:	4770      	bx	lr
    359e:	7019      	strb	r1, [r3, #0]
    35a0:	3301      	adds	r3, #1
    35a2:	e7f9      	b.n	3598 <memset+0x4>

000035a4 <iprintf>:
    35a4:	b40f      	push	{r0, r1, r2, r3}
    35a6:	4b0b      	ldr	r3, [pc, #44]	; (35d4 <iprintf+0x30>)
    35a8:	b513      	push	{r0, r1, r4, lr}
    35aa:	681c      	ldr	r4, [r3, #0]
    35ac:	2c00      	cmp	r4, #0
    35ae:	d005      	beq.n	35bc <iprintf+0x18>
    35b0:	69a3      	ldr	r3, [r4, #24]
    35b2:	2b00      	cmp	r3, #0
    35b4:	d102      	bne.n	35bc <iprintf+0x18>
    35b6:	0020      	movs	r0, r4
    35b8:	f000 f9bc 	bl	3934 <__sinit>
    35bc:	ab05      	add	r3, sp, #20
    35be:	9a04      	ldr	r2, [sp, #16]
    35c0:	68a1      	ldr	r1, [r4, #8]
    35c2:	0020      	movs	r0, r4
    35c4:	9301      	str	r3, [sp, #4]
    35c6:	f000 fb91 	bl	3cec <_vfiprintf_r>
    35ca:	bc16      	pop	{r1, r2, r4}
    35cc:	bc08      	pop	{r3}
    35ce:	b004      	add	sp, #16
    35d0:	4718      	bx	r3
    35d2:	46c0      	nop			; (mov r8, r8)
    35d4:	20000034 	.word	0x20000034

000035d8 <setbuf>:
    35d8:	424a      	negs	r2, r1
    35da:	414a      	adcs	r2, r1
    35dc:	2380      	movs	r3, #128	; 0x80
    35de:	b510      	push	{r4, lr}
    35e0:	0052      	lsls	r2, r2, #1
    35e2:	00db      	lsls	r3, r3, #3
    35e4:	f000 f802 	bl	35ec <setvbuf>
    35e8:	bd10      	pop	{r4, pc}
	...

000035ec <setvbuf>:
    35ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ee:	001d      	movs	r5, r3
    35f0:	4b4f      	ldr	r3, [pc, #316]	; (3730 <setvbuf+0x144>)
    35f2:	b085      	sub	sp, #20
    35f4:	681e      	ldr	r6, [r3, #0]
    35f6:	0004      	movs	r4, r0
    35f8:	000f      	movs	r7, r1
    35fa:	9200      	str	r2, [sp, #0]
    35fc:	2e00      	cmp	r6, #0
    35fe:	d005      	beq.n	360c <setvbuf+0x20>
    3600:	69b3      	ldr	r3, [r6, #24]
    3602:	2b00      	cmp	r3, #0
    3604:	d102      	bne.n	360c <setvbuf+0x20>
    3606:	0030      	movs	r0, r6
    3608:	f000 f994 	bl	3934 <__sinit>
    360c:	4b49      	ldr	r3, [pc, #292]	; (3734 <setvbuf+0x148>)
    360e:	429c      	cmp	r4, r3
    3610:	d150      	bne.n	36b4 <setvbuf+0xc8>
    3612:	6874      	ldr	r4, [r6, #4]
    3614:	9b00      	ldr	r3, [sp, #0]
    3616:	2b02      	cmp	r3, #2
    3618:	d005      	beq.n	3626 <setvbuf+0x3a>
    361a:	2b01      	cmp	r3, #1
    361c:	d900      	bls.n	3620 <setvbuf+0x34>
    361e:	e084      	b.n	372a <setvbuf+0x13e>
    3620:	2d00      	cmp	r5, #0
    3622:	da00      	bge.n	3626 <setvbuf+0x3a>
    3624:	e081      	b.n	372a <setvbuf+0x13e>
    3626:	0021      	movs	r1, r4
    3628:	0030      	movs	r0, r6
    362a:	f000 f915 	bl	3858 <_fflush_r>
    362e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3630:	2900      	cmp	r1, #0
    3632:	d008      	beq.n	3646 <setvbuf+0x5a>
    3634:	0023      	movs	r3, r4
    3636:	3344      	adds	r3, #68	; 0x44
    3638:	4299      	cmp	r1, r3
    363a:	d002      	beq.n	3642 <setvbuf+0x56>
    363c:	0030      	movs	r0, r6
    363e:	f000 fa85 	bl	3b4c <_free_r>
    3642:	2300      	movs	r3, #0
    3644:	6363      	str	r3, [r4, #52]	; 0x34
    3646:	2300      	movs	r3, #0
    3648:	61a3      	str	r3, [r4, #24]
    364a:	6063      	str	r3, [r4, #4]
    364c:	89a3      	ldrh	r3, [r4, #12]
    364e:	061b      	lsls	r3, r3, #24
    3650:	d503      	bpl.n	365a <setvbuf+0x6e>
    3652:	6921      	ldr	r1, [r4, #16]
    3654:	0030      	movs	r0, r6
    3656:	f000 fa79 	bl	3b4c <_free_r>
    365a:	89a3      	ldrh	r3, [r4, #12]
    365c:	4a36      	ldr	r2, [pc, #216]	; (3738 <setvbuf+0x14c>)
    365e:	4013      	ands	r3, r2
    3660:	81a3      	strh	r3, [r4, #12]
    3662:	9b00      	ldr	r3, [sp, #0]
    3664:	2b02      	cmp	r3, #2
    3666:	d05a      	beq.n	371e <setvbuf+0x132>
    3668:	ab03      	add	r3, sp, #12
    366a:	aa02      	add	r2, sp, #8
    366c:	0021      	movs	r1, r4
    366e:	0030      	movs	r0, r6
    3670:	f000 f9f6 	bl	3a60 <__swhatbuf_r>
    3674:	89a3      	ldrh	r3, [r4, #12]
    3676:	4318      	orrs	r0, r3
    3678:	81a0      	strh	r0, [r4, #12]
    367a:	2d00      	cmp	r5, #0
    367c:	d124      	bne.n	36c8 <setvbuf+0xdc>
    367e:	9d02      	ldr	r5, [sp, #8]
    3680:	0028      	movs	r0, r5
    3682:	f000 fa59 	bl	3b38 <malloc>
    3686:	9501      	str	r5, [sp, #4]
    3688:	1e07      	subs	r7, r0, #0
    368a:	d142      	bne.n	3712 <setvbuf+0x126>
    368c:	9b02      	ldr	r3, [sp, #8]
    368e:	9301      	str	r3, [sp, #4]
    3690:	42ab      	cmp	r3, r5
    3692:	d139      	bne.n	3708 <setvbuf+0x11c>
    3694:	2001      	movs	r0, #1
    3696:	4240      	negs	r0, r0
    3698:	2302      	movs	r3, #2
    369a:	89a2      	ldrh	r2, [r4, #12]
    369c:	4313      	orrs	r3, r2
    369e:	81a3      	strh	r3, [r4, #12]
    36a0:	2300      	movs	r3, #0
    36a2:	60a3      	str	r3, [r4, #8]
    36a4:	0023      	movs	r3, r4
    36a6:	3347      	adds	r3, #71	; 0x47
    36a8:	6023      	str	r3, [r4, #0]
    36aa:	6123      	str	r3, [r4, #16]
    36ac:	2301      	movs	r3, #1
    36ae:	6163      	str	r3, [r4, #20]
    36b0:	b005      	add	sp, #20
    36b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36b4:	4b21      	ldr	r3, [pc, #132]	; (373c <setvbuf+0x150>)
    36b6:	429c      	cmp	r4, r3
    36b8:	d101      	bne.n	36be <setvbuf+0xd2>
    36ba:	68b4      	ldr	r4, [r6, #8]
    36bc:	e7aa      	b.n	3614 <setvbuf+0x28>
    36be:	4b20      	ldr	r3, [pc, #128]	; (3740 <setvbuf+0x154>)
    36c0:	429c      	cmp	r4, r3
    36c2:	d1a7      	bne.n	3614 <setvbuf+0x28>
    36c4:	68f4      	ldr	r4, [r6, #12]
    36c6:	e7a5      	b.n	3614 <setvbuf+0x28>
    36c8:	2f00      	cmp	r7, #0
    36ca:	d0d9      	beq.n	3680 <setvbuf+0x94>
    36cc:	69b3      	ldr	r3, [r6, #24]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d102      	bne.n	36d8 <setvbuf+0xec>
    36d2:	0030      	movs	r0, r6
    36d4:	f000 f92e 	bl	3934 <__sinit>
    36d8:	9b00      	ldr	r3, [sp, #0]
    36da:	2b01      	cmp	r3, #1
    36dc:	d103      	bne.n	36e6 <setvbuf+0xfa>
    36de:	89a3      	ldrh	r3, [r4, #12]
    36e0:	9a00      	ldr	r2, [sp, #0]
    36e2:	431a      	orrs	r2, r3
    36e4:	81a2      	strh	r2, [r4, #12]
    36e6:	2008      	movs	r0, #8
    36e8:	89a3      	ldrh	r3, [r4, #12]
    36ea:	6027      	str	r7, [r4, #0]
    36ec:	6127      	str	r7, [r4, #16]
    36ee:	6165      	str	r5, [r4, #20]
    36f0:	4018      	ands	r0, r3
    36f2:	d018      	beq.n	3726 <setvbuf+0x13a>
    36f4:	2001      	movs	r0, #1
    36f6:	4018      	ands	r0, r3
    36f8:	2300      	movs	r3, #0
    36fa:	4298      	cmp	r0, r3
    36fc:	d011      	beq.n	3722 <setvbuf+0x136>
    36fe:	426d      	negs	r5, r5
    3700:	60a3      	str	r3, [r4, #8]
    3702:	61a5      	str	r5, [r4, #24]
    3704:	0018      	movs	r0, r3
    3706:	e7d3      	b.n	36b0 <setvbuf+0xc4>
    3708:	9801      	ldr	r0, [sp, #4]
    370a:	f000 fa15 	bl	3b38 <malloc>
    370e:	1e07      	subs	r7, r0, #0
    3710:	d0c0      	beq.n	3694 <setvbuf+0xa8>
    3712:	2380      	movs	r3, #128	; 0x80
    3714:	89a2      	ldrh	r2, [r4, #12]
    3716:	9d01      	ldr	r5, [sp, #4]
    3718:	4313      	orrs	r3, r2
    371a:	81a3      	strh	r3, [r4, #12]
    371c:	e7d6      	b.n	36cc <setvbuf+0xe0>
    371e:	2000      	movs	r0, #0
    3720:	e7ba      	b.n	3698 <setvbuf+0xac>
    3722:	60a5      	str	r5, [r4, #8]
    3724:	e7c4      	b.n	36b0 <setvbuf+0xc4>
    3726:	60a0      	str	r0, [r4, #8]
    3728:	e7c2      	b.n	36b0 <setvbuf+0xc4>
    372a:	2001      	movs	r0, #1
    372c:	4240      	negs	r0, r0
    372e:	e7bf      	b.n	36b0 <setvbuf+0xc4>
    3730:	20000034 	.word	0x20000034
    3734:	0000490c 	.word	0x0000490c
    3738:	fffff35c 	.word	0xfffff35c
    373c:	0000492c 	.word	0x0000492c
    3740:	000048ec 	.word	0x000048ec

00003744 <__sflush_r>:
    3744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3746:	898a      	ldrh	r2, [r1, #12]
    3748:	0005      	movs	r5, r0
    374a:	000c      	movs	r4, r1
    374c:	0713      	lsls	r3, r2, #28
    374e:	d460      	bmi.n	3812 <__sflush_r+0xce>
    3750:	684b      	ldr	r3, [r1, #4]
    3752:	2b00      	cmp	r3, #0
    3754:	dc04      	bgt.n	3760 <__sflush_r+0x1c>
    3756:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3758:	2b00      	cmp	r3, #0
    375a:	dc01      	bgt.n	3760 <__sflush_r+0x1c>
    375c:	2000      	movs	r0, #0
    375e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3760:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3762:	2f00      	cmp	r7, #0
    3764:	d0fa      	beq.n	375c <__sflush_r+0x18>
    3766:	2300      	movs	r3, #0
    3768:	682e      	ldr	r6, [r5, #0]
    376a:	602b      	str	r3, [r5, #0]
    376c:	2380      	movs	r3, #128	; 0x80
    376e:	015b      	lsls	r3, r3, #5
    3770:	401a      	ands	r2, r3
    3772:	d034      	beq.n	37de <__sflush_r+0x9a>
    3774:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3776:	89a3      	ldrh	r3, [r4, #12]
    3778:	075b      	lsls	r3, r3, #29
    377a:	d506      	bpl.n	378a <__sflush_r+0x46>
    377c:	6863      	ldr	r3, [r4, #4]
    377e:	1ac0      	subs	r0, r0, r3
    3780:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3782:	2b00      	cmp	r3, #0
    3784:	d001      	beq.n	378a <__sflush_r+0x46>
    3786:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3788:	1ac0      	subs	r0, r0, r3
    378a:	0002      	movs	r2, r0
    378c:	6a21      	ldr	r1, [r4, #32]
    378e:	2300      	movs	r3, #0
    3790:	0028      	movs	r0, r5
    3792:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3794:	47b8      	blx	r7
    3796:	89a1      	ldrh	r1, [r4, #12]
    3798:	1c43      	adds	r3, r0, #1
    379a:	d106      	bne.n	37aa <__sflush_r+0x66>
    379c:	682b      	ldr	r3, [r5, #0]
    379e:	2b1d      	cmp	r3, #29
    37a0:	d831      	bhi.n	3806 <__sflush_r+0xc2>
    37a2:	4a2c      	ldr	r2, [pc, #176]	; (3854 <__sflush_r+0x110>)
    37a4:	40da      	lsrs	r2, r3
    37a6:	07d3      	lsls	r3, r2, #31
    37a8:	d52d      	bpl.n	3806 <__sflush_r+0xc2>
    37aa:	2300      	movs	r3, #0
    37ac:	6063      	str	r3, [r4, #4]
    37ae:	6923      	ldr	r3, [r4, #16]
    37b0:	6023      	str	r3, [r4, #0]
    37b2:	04cb      	lsls	r3, r1, #19
    37b4:	d505      	bpl.n	37c2 <__sflush_r+0x7e>
    37b6:	1c43      	adds	r3, r0, #1
    37b8:	d102      	bne.n	37c0 <__sflush_r+0x7c>
    37ba:	682b      	ldr	r3, [r5, #0]
    37bc:	2b00      	cmp	r3, #0
    37be:	d100      	bne.n	37c2 <__sflush_r+0x7e>
    37c0:	6560      	str	r0, [r4, #84]	; 0x54
    37c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    37c4:	602e      	str	r6, [r5, #0]
    37c6:	2900      	cmp	r1, #0
    37c8:	d0c8      	beq.n	375c <__sflush_r+0x18>
    37ca:	0023      	movs	r3, r4
    37cc:	3344      	adds	r3, #68	; 0x44
    37ce:	4299      	cmp	r1, r3
    37d0:	d002      	beq.n	37d8 <__sflush_r+0x94>
    37d2:	0028      	movs	r0, r5
    37d4:	f000 f9ba 	bl	3b4c <_free_r>
    37d8:	2000      	movs	r0, #0
    37da:	6360      	str	r0, [r4, #52]	; 0x34
    37dc:	e7bf      	b.n	375e <__sflush_r+0x1a>
    37de:	2301      	movs	r3, #1
    37e0:	6a21      	ldr	r1, [r4, #32]
    37e2:	0028      	movs	r0, r5
    37e4:	47b8      	blx	r7
    37e6:	1c43      	adds	r3, r0, #1
    37e8:	d1c5      	bne.n	3776 <__sflush_r+0x32>
    37ea:	682b      	ldr	r3, [r5, #0]
    37ec:	2b00      	cmp	r3, #0
    37ee:	d0c2      	beq.n	3776 <__sflush_r+0x32>
    37f0:	2b1d      	cmp	r3, #29
    37f2:	d001      	beq.n	37f8 <__sflush_r+0xb4>
    37f4:	2b16      	cmp	r3, #22
    37f6:	d101      	bne.n	37fc <__sflush_r+0xb8>
    37f8:	602e      	str	r6, [r5, #0]
    37fa:	e7af      	b.n	375c <__sflush_r+0x18>
    37fc:	2340      	movs	r3, #64	; 0x40
    37fe:	89a2      	ldrh	r2, [r4, #12]
    3800:	4313      	orrs	r3, r2
    3802:	81a3      	strh	r3, [r4, #12]
    3804:	e7ab      	b.n	375e <__sflush_r+0x1a>
    3806:	2340      	movs	r3, #64	; 0x40
    3808:	430b      	orrs	r3, r1
    380a:	2001      	movs	r0, #1
    380c:	81a3      	strh	r3, [r4, #12]
    380e:	4240      	negs	r0, r0
    3810:	e7a5      	b.n	375e <__sflush_r+0x1a>
    3812:	690f      	ldr	r7, [r1, #16]
    3814:	2f00      	cmp	r7, #0
    3816:	d0a1      	beq.n	375c <__sflush_r+0x18>
    3818:	680b      	ldr	r3, [r1, #0]
    381a:	600f      	str	r7, [r1, #0]
    381c:	1bdb      	subs	r3, r3, r7
    381e:	9301      	str	r3, [sp, #4]
    3820:	2300      	movs	r3, #0
    3822:	0792      	lsls	r2, r2, #30
    3824:	d100      	bne.n	3828 <__sflush_r+0xe4>
    3826:	694b      	ldr	r3, [r1, #20]
    3828:	60a3      	str	r3, [r4, #8]
    382a:	9b01      	ldr	r3, [sp, #4]
    382c:	2b00      	cmp	r3, #0
    382e:	dc00      	bgt.n	3832 <__sflush_r+0xee>
    3830:	e794      	b.n	375c <__sflush_r+0x18>
    3832:	9b01      	ldr	r3, [sp, #4]
    3834:	003a      	movs	r2, r7
    3836:	6a21      	ldr	r1, [r4, #32]
    3838:	0028      	movs	r0, r5
    383a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    383c:	47b0      	blx	r6
    383e:	2800      	cmp	r0, #0
    3840:	dc03      	bgt.n	384a <__sflush_r+0x106>
    3842:	2340      	movs	r3, #64	; 0x40
    3844:	89a2      	ldrh	r2, [r4, #12]
    3846:	4313      	orrs	r3, r2
    3848:	e7df      	b.n	380a <__sflush_r+0xc6>
    384a:	9b01      	ldr	r3, [sp, #4]
    384c:	183f      	adds	r7, r7, r0
    384e:	1a1b      	subs	r3, r3, r0
    3850:	9301      	str	r3, [sp, #4]
    3852:	e7ea      	b.n	382a <__sflush_r+0xe6>
    3854:	20400001 	.word	0x20400001

00003858 <_fflush_r>:
    3858:	690b      	ldr	r3, [r1, #16]
    385a:	b570      	push	{r4, r5, r6, lr}
    385c:	0005      	movs	r5, r0
    385e:	000c      	movs	r4, r1
    3860:	2b00      	cmp	r3, #0
    3862:	d101      	bne.n	3868 <_fflush_r+0x10>
    3864:	2000      	movs	r0, #0
    3866:	bd70      	pop	{r4, r5, r6, pc}
    3868:	2800      	cmp	r0, #0
    386a:	d004      	beq.n	3876 <_fflush_r+0x1e>
    386c:	6983      	ldr	r3, [r0, #24]
    386e:	2b00      	cmp	r3, #0
    3870:	d101      	bne.n	3876 <_fflush_r+0x1e>
    3872:	f000 f85f 	bl	3934 <__sinit>
    3876:	4b0b      	ldr	r3, [pc, #44]	; (38a4 <_fflush_r+0x4c>)
    3878:	429c      	cmp	r4, r3
    387a:	d109      	bne.n	3890 <_fflush_r+0x38>
    387c:	686c      	ldr	r4, [r5, #4]
    387e:	220c      	movs	r2, #12
    3880:	5ea3      	ldrsh	r3, [r4, r2]
    3882:	2b00      	cmp	r3, #0
    3884:	d0ee      	beq.n	3864 <_fflush_r+0xc>
    3886:	0021      	movs	r1, r4
    3888:	0028      	movs	r0, r5
    388a:	f7ff ff5b 	bl	3744 <__sflush_r>
    388e:	e7ea      	b.n	3866 <_fflush_r+0xe>
    3890:	4b05      	ldr	r3, [pc, #20]	; (38a8 <_fflush_r+0x50>)
    3892:	429c      	cmp	r4, r3
    3894:	d101      	bne.n	389a <_fflush_r+0x42>
    3896:	68ac      	ldr	r4, [r5, #8]
    3898:	e7f1      	b.n	387e <_fflush_r+0x26>
    389a:	4b04      	ldr	r3, [pc, #16]	; (38ac <_fflush_r+0x54>)
    389c:	429c      	cmp	r4, r3
    389e:	d1ee      	bne.n	387e <_fflush_r+0x26>
    38a0:	68ec      	ldr	r4, [r5, #12]
    38a2:	e7ec      	b.n	387e <_fflush_r+0x26>
    38a4:	0000490c 	.word	0x0000490c
    38a8:	0000492c 	.word	0x0000492c
    38ac:	000048ec 	.word	0x000048ec

000038b0 <_cleanup_r>:
    38b0:	b510      	push	{r4, lr}
    38b2:	4902      	ldr	r1, [pc, #8]	; (38bc <_cleanup_r+0xc>)
    38b4:	f000 f8b2 	bl	3a1c <_fwalk_reent>
    38b8:	bd10      	pop	{r4, pc}
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	00003859 	.word	0x00003859

000038c0 <std.isra.0>:
    38c0:	2300      	movs	r3, #0
    38c2:	b510      	push	{r4, lr}
    38c4:	0004      	movs	r4, r0
    38c6:	6003      	str	r3, [r0, #0]
    38c8:	6043      	str	r3, [r0, #4]
    38ca:	6083      	str	r3, [r0, #8]
    38cc:	8181      	strh	r1, [r0, #12]
    38ce:	6643      	str	r3, [r0, #100]	; 0x64
    38d0:	81c2      	strh	r2, [r0, #14]
    38d2:	6103      	str	r3, [r0, #16]
    38d4:	6143      	str	r3, [r0, #20]
    38d6:	6183      	str	r3, [r0, #24]
    38d8:	0019      	movs	r1, r3
    38da:	2208      	movs	r2, #8
    38dc:	305c      	adds	r0, #92	; 0x5c
    38de:	f7ff fe59 	bl	3594 <memset>
    38e2:	4b05      	ldr	r3, [pc, #20]	; (38f8 <std.isra.0+0x38>)
    38e4:	6224      	str	r4, [r4, #32]
    38e6:	6263      	str	r3, [r4, #36]	; 0x24
    38e8:	4b04      	ldr	r3, [pc, #16]	; (38fc <std.isra.0+0x3c>)
    38ea:	62a3      	str	r3, [r4, #40]	; 0x28
    38ec:	4b04      	ldr	r3, [pc, #16]	; (3900 <std.isra.0+0x40>)
    38ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    38f0:	4b04      	ldr	r3, [pc, #16]	; (3904 <std.isra.0+0x44>)
    38f2:	6323      	str	r3, [r4, #48]	; 0x30
    38f4:	bd10      	pop	{r4, pc}
    38f6:	46c0      	nop			; (mov r8, r8)
    38f8:	00004259 	.word	0x00004259
    38fc:	00004281 	.word	0x00004281
    3900:	000042b9 	.word	0x000042b9
    3904:	000042e5 	.word	0x000042e5

00003908 <__sfmoreglue>:
    3908:	b570      	push	{r4, r5, r6, lr}
    390a:	2568      	movs	r5, #104	; 0x68
    390c:	1e4a      	subs	r2, r1, #1
    390e:	4355      	muls	r5, r2
    3910:	000e      	movs	r6, r1
    3912:	0029      	movs	r1, r5
    3914:	3174      	adds	r1, #116	; 0x74
    3916:	f000 f963 	bl	3be0 <_malloc_r>
    391a:	1e04      	subs	r4, r0, #0
    391c:	d008      	beq.n	3930 <__sfmoreglue+0x28>
    391e:	2100      	movs	r1, #0
    3920:	002a      	movs	r2, r5
    3922:	6001      	str	r1, [r0, #0]
    3924:	6046      	str	r6, [r0, #4]
    3926:	300c      	adds	r0, #12
    3928:	60a0      	str	r0, [r4, #8]
    392a:	3268      	adds	r2, #104	; 0x68
    392c:	f7ff fe32 	bl	3594 <memset>
    3930:	0020      	movs	r0, r4
    3932:	bd70      	pop	{r4, r5, r6, pc}

00003934 <__sinit>:
    3934:	6983      	ldr	r3, [r0, #24]
    3936:	b513      	push	{r0, r1, r4, lr}
    3938:	0004      	movs	r4, r0
    393a:	2b00      	cmp	r3, #0
    393c:	d128      	bne.n	3990 <__sinit+0x5c>
    393e:	6483      	str	r3, [r0, #72]	; 0x48
    3940:	64c3      	str	r3, [r0, #76]	; 0x4c
    3942:	6503      	str	r3, [r0, #80]	; 0x50
    3944:	4b13      	ldr	r3, [pc, #76]	; (3994 <__sinit+0x60>)
    3946:	4a14      	ldr	r2, [pc, #80]	; (3998 <__sinit+0x64>)
    3948:	681b      	ldr	r3, [r3, #0]
    394a:	6282      	str	r2, [r0, #40]	; 0x28
    394c:	9301      	str	r3, [sp, #4]
    394e:	4298      	cmp	r0, r3
    3950:	d101      	bne.n	3956 <__sinit+0x22>
    3952:	2301      	movs	r3, #1
    3954:	6183      	str	r3, [r0, #24]
    3956:	0020      	movs	r0, r4
    3958:	f000 f820 	bl	399c <__sfp>
    395c:	6060      	str	r0, [r4, #4]
    395e:	0020      	movs	r0, r4
    3960:	f000 f81c 	bl	399c <__sfp>
    3964:	60a0      	str	r0, [r4, #8]
    3966:	0020      	movs	r0, r4
    3968:	f000 f818 	bl	399c <__sfp>
    396c:	2200      	movs	r2, #0
    396e:	60e0      	str	r0, [r4, #12]
    3970:	2104      	movs	r1, #4
    3972:	6860      	ldr	r0, [r4, #4]
    3974:	f7ff ffa4 	bl	38c0 <std.isra.0>
    3978:	2201      	movs	r2, #1
    397a:	2109      	movs	r1, #9
    397c:	68a0      	ldr	r0, [r4, #8]
    397e:	f7ff ff9f 	bl	38c0 <std.isra.0>
    3982:	2202      	movs	r2, #2
    3984:	2112      	movs	r1, #18
    3986:	68e0      	ldr	r0, [r4, #12]
    3988:	f7ff ff9a 	bl	38c0 <std.isra.0>
    398c:	2301      	movs	r3, #1
    398e:	61a3      	str	r3, [r4, #24]
    3990:	bd13      	pop	{r0, r1, r4, pc}
    3992:	46c0      	nop			; (mov r8, r8)
    3994:	000048e8 	.word	0x000048e8
    3998:	000038b1 	.word	0x000038b1

0000399c <__sfp>:
    399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    399e:	4b1e      	ldr	r3, [pc, #120]	; (3a18 <__sfp+0x7c>)
    39a0:	0007      	movs	r7, r0
    39a2:	681e      	ldr	r6, [r3, #0]
    39a4:	69b3      	ldr	r3, [r6, #24]
    39a6:	2b00      	cmp	r3, #0
    39a8:	d102      	bne.n	39b0 <__sfp+0x14>
    39aa:	0030      	movs	r0, r6
    39ac:	f7ff ffc2 	bl	3934 <__sinit>
    39b0:	3648      	adds	r6, #72	; 0x48
    39b2:	68b4      	ldr	r4, [r6, #8]
    39b4:	6873      	ldr	r3, [r6, #4]
    39b6:	3b01      	subs	r3, #1
    39b8:	d504      	bpl.n	39c4 <__sfp+0x28>
    39ba:	6833      	ldr	r3, [r6, #0]
    39bc:	2b00      	cmp	r3, #0
    39be:	d007      	beq.n	39d0 <__sfp+0x34>
    39c0:	6836      	ldr	r6, [r6, #0]
    39c2:	e7f6      	b.n	39b2 <__sfp+0x16>
    39c4:	220c      	movs	r2, #12
    39c6:	5ea5      	ldrsh	r5, [r4, r2]
    39c8:	2d00      	cmp	r5, #0
    39ca:	d00d      	beq.n	39e8 <__sfp+0x4c>
    39cc:	3468      	adds	r4, #104	; 0x68
    39ce:	e7f2      	b.n	39b6 <__sfp+0x1a>
    39d0:	2104      	movs	r1, #4
    39d2:	0038      	movs	r0, r7
    39d4:	f7ff ff98 	bl	3908 <__sfmoreglue>
    39d8:	6030      	str	r0, [r6, #0]
    39da:	2800      	cmp	r0, #0
    39dc:	d1f0      	bne.n	39c0 <__sfp+0x24>
    39de:	230c      	movs	r3, #12
    39e0:	0004      	movs	r4, r0
    39e2:	603b      	str	r3, [r7, #0]
    39e4:	0020      	movs	r0, r4
    39e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39e8:	2301      	movs	r3, #1
    39ea:	0020      	movs	r0, r4
    39ec:	425b      	negs	r3, r3
    39ee:	81e3      	strh	r3, [r4, #14]
    39f0:	3302      	adds	r3, #2
    39f2:	81a3      	strh	r3, [r4, #12]
    39f4:	6665      	str	r5, [r4, #100]	; 0x64
    39f6:	6025      	str	r5, [r4, #0]
    39f8:	60a5      	str	r5, [r4, #8]
    39fa:	6065      	str	r5, [r4, #4]
    39fc:	6125      	str	r5, [r4, #16]
    39fe:	6165      	str	r5, [r4, #20]
    3a00:	61a5      	str	r5, [r4, #24]
    3a02:	2208      	movs	r2, #8
    3a04:	0029      	movs	r1, r5
    3a06:	305c      	adds	r0, #92	; 0x5c
    3a08:	f7ff fdc4 	bl	3594 <memset>
    3a0c:	6365      	str	r5, [r4, #52]	; 0x34
    3a0e:	63a5      	str	r5, [r4, #56]	; 0x38
    3a10:	64a5      	str	r5, [r4, #72]	; 0x48
    3a12:	64e5      	str	r5, [r4, #76]	; 0x4c
    3a14:	e7e6      	b.n	39e4 <__sfp+0x48>
    3a16:	46c0      	nop			; (mov r8, r8)
    3a18:	000048e8 	.word	0x000048e8

00003a1c <_fwalk_reent>:
    3a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a1e:	0004      	movs	r4, r0
    3a20:	0007      	movs	r7, r0
    3a22:	2600      	movs	r6, #0
    3a24:	9101      	str	r1, [sp, #4]
    3a26:	3448      	adds	r4, #72	; 0x48
    3a28:	2c00      	cmp	r4, #0
    3a2a:	d101      	bne.n	3a30 <_fwalk_reent+0x14>
    3a2c:	0030      	movs	r0, r6
    3a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3a30:	6863      	ldr	r3, [r4, #4]
    3a32:	68a5      	ldr	r5, [r4, #8]
    3a34:	9300      	str	r3, [sp, #0]
    3a36:	9b00      	ldr	r3, [sp, #0]
    3a38:	3b01      	subs	r3, #1
    3a3a:	9300      	str	r3, [sp, #0]
    3a3c:	d501      	bpl.n	3a42 <_fwalk_reent+0x26>
    3a3e:	6824      	ldr	r4, [r4, #0]
    3a40:	e7f2      	b.n	3a28 <_fwalk_reent+0xc>
    3a42:	89ab      	ldrh	r3, [r5, #12]
    3a44:	2b01      	cmp	r3, #1
    3a46:	d908      	bls.n	3a5a <_fwalk_reent+0x3e>
    3a48:	220e      	movs	r2, #14
    3a4a:	5eab      	ldrsh	r3, [r5, r2]
    3a4c:	3301      	adds	r3, #1
    3a4e:	d004      	beq.n	3a5a <_fwalk_reent+0x3e>
    3a50:	0029      	movs	r1, r5
    3a52:	0038      	movs	r0, r7
    3a54:	9b01      	ldr	r3, [sp, #4]
    3a56:	4798      	blx	r3
    3a58:	4306      	orrs	r6, r0
    3a5a:	3568      	adds	r5, #104	; 0x68
    3a5c:	e7eb      	b.n	3a36 <_fwalk_reent+0x1a>
	...

00003a60 <__swhatbuf_r>:
    3a60:	b570      	push	{r4, r5, r6, lr}
    3a62:	000e      	movs	r6, r1
    3a64:	001d      	movs	r5, r3
    3a66:	230e      	movs	r3, #14
    3a68:	5ec9      	ldrsh	r1, [r1, r3]
    3a6a:	b090      	sub	sp, #64	; 0x40
    3a6c:	0014      	movs	r4, r2
    3a6e:	2900      	cmp	r1, #0
    3a70:	da07      	bge.n	3a82 <__swhatbuf_r+0x22>
    3a72:	2300      	movs	r3, #0
    3a74:	602b      	str	r3, [r5, #0]
    3a76:	89b3      	ldrh	r3, [r6, #12]
    3a78:	061b      	lsls	r3, r3, #24
    3a7a:	d411      	bmi.n	3aa0 <__swhatbuf_r+0x40>
    3a7c:	2380      	movs	r3, #128	; 0x80
    3a7e:	00db      	lsls	r3, r3, #3
    3a80:	e00f      	b.n	3aa2 <__swhatbuf_r+0x42>
    3a82:	aa01      	add	r2, sp, #4
    3a84:	f000 fd26 	bl	44d4 <_fstat_r>
    3a88:	2800      	cmp	r0, #0
    3a8a:	dbf2      	blt.n	3a72 <__swhatbuf_r+0x12>
    3a8c:	22f0      	movs	r2, #240	; 0xf0
    3a8e:	9b02      	ldr	r3, [sp, #8]
    3a90:	0212      	lsls	r2, r2, #8
    3a92:	4013      	ands	r3, r2
    3a94:	4a05      	ldr	r2, [pc, #20]	; (3aac <__swhatbuf_r+0x4c>)
    3a96:	189b      	adds	r3, r3, r2
    3a98:	425a      	negs	r2, r3
    3a9a:	4153      	adcs	r3, r2
    3a9c:	602b      	str	r3, [r5, #0]
    3a9e:	e7ed      	b.n	3a7c <__swhatbuf_r+0x1c>
    3aa0:	2340      	movs	r3, #64	; 0x40
    3aa2:	2000      	movs	r0, #0
    3aa4:	6023      	str	r3, [r4, #0]
    3aa6:	b010      	add	sp, #64	; 0x40
    3aa8:	bd70      	pop	{r4, r5, r6, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	ffffe000 	.word	0xffffe000

00003ab0 <__smakebuf_r>:
    3ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ab2:	2602      	movs	r6, #2
    3ab4:	898b      	ldrh	r3, [r1, #12]
    3ab6:	0005      	movs	r5, r0
    3ab8:	000c      	movs	r4, r1
    3aba:	4233      	tst	r3, r6
    3abc:	d006      	beq.n	3acc <__smakebuf_r+0x1c>
    3abe:	0023      	movs	r3, r4
    3ac0:	3347      	adds	r3, #71	; 0x47
    3ac2:	6023      	str	r3, [r4, #0]
    3ac4:	6123      	str	r3, [r4, #16]
    3ac6:	2301      	movs	r3, #1
    3ac8:	6163      	str	r3, [r4, #20]
    3aca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3acc:	ab01      	add	r3, sp, #4
    3ace:	466a      	mov	r2, sp
    3ad0:	f7ff ffc6 	bl	3a60 <__swhatbuf_r>
    3ad4:	9900      	ldr	r1, [sp, #0]
    3ad6:	0007      	movs	r7, r0
    3ad8:	0028      	movs	r0, r5
    3ada:	f000 f881 	bl	3be0 <_malloc_r>
    3ade:	2800      	cmp	r0, #0
    3ae0:	d108      	bne.n	3af4 <__smakebuf_r+0x44>
    3ae2:	220c      	movs	r2, #12
    3ae4:	5ea3      	ldrsh	r3, [r4, r2]
    3ae6:	059a      	lsls	r2, r3, #22
    3ae8:	d4ef      	bmi.n	3aca <__smakebuf_r+0x1a>
    3aea:	2203      	movs	r2, #3
    3aec:	4393      	bics	r3, r2
    3aee:	431e      	orrs	r6, r3
    3af0:	81a6      	strh	r6, [r4, #12]
    3af2:	e7e4      	b.n	3abe <__smakebuf_r+0xe>
    3af4:	4b0f      	ldr	r3, [pc, #60]	; (3b34 <__smakebuf_r+0x84>)
    3af6:	62ab      	str	r3, [r5, #40]	; 0x28
    3af8:	2380      	movs	r3, #128	; 0x80
    3afa:	89a2      	ldrh	r2, [r4, #12]
    3afc:	6020      	str	r0, [r4, #0]
    3afe:	4313      	orrs	r3, r2
    3b00:	81a3      	strh	r3, [r4, #12]
    3b02:	9b00      	ldr	r3, [sp, #0]
    3b04:	6120      	str	r0, [r4, #16]
    3b06:	6163      	str	r3, [r4, #20]
    3b08:	9b01      	ldr	r3, [sp, #4]
    3b0a:	2b00      	cmp	r3, #0
    3b0c:	d00d      	beq.n	3b2a <__smakebuf_r+0x7a>
    3b0e:	230e      	movs	r3, #14
    3b10:	5ee1      	ldrsh	r1, [r4, r3]
    3b12:	0028      	movs	r0, r5
    3b14:	f000 fcf0 	bl	44f8 <_isatty_r>
    3b18:	2800      	cmp	r0, #0
    3b1a:	d006      	beq.n	3b2a <__smakebuf_r+0x7a>
    3b1c:	2203      	movs	r2, #3
    3b1e:	89a3      	ldrh	r3, [r4, #12]
    3b20:	4393      	bics	r3, r2
    3b22:	001a      	movs	r2, r3
    3b24:	2301      	movs	r3, #1
    3b26:	4313      	orrs	r3, r2
    3b28:	81a3      	strh	r3, [r4, #12]
    3b2a:	89a0      	ldrh	r0, [r4, #12]
    3b2c:	4338      	orrs	r0, r7
    3b2e:	81a0      	strh	r0, [r4, #12]
    3b30:	e7cb      	b.n	3aca <__smakebuf_r+0x1a>
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	000038b1 	.word	0x000038b1

00003b38 <malloc>:
    3b38:	b510      	push	{r4, lr}
    3b3a:	4b03      	ldr	r3, [pc, #12]	; (3b48 <malloc+0x10>)
    3b3c:	0001      	movs	r1, r0
    3b3e:	6818      	ldr	r0, [r3, #0]
    3b40:	f000 f84e 	bl	3be0 <_malloc_r>
    3b44:	bd10      	pop	{r4, pc}
    3b46:	46c0      	nop			; (mov r8, r8)
    3b48:	20000034 	.word	0x20000034

00003b4c <_free_r>:
    3b4c:	b570      	push	{r4, r5, r6, lr}
    3b4e:	0005      	movs	r5, r0
    3b50:	2900      	cmp	r1, #0
    3b52:	d010      	beq.n	3b76 <_free_r+0x2a>
    3b54:	1f0c      	subs	r4, r1, #4
    3b56:	6823      	ldr	r3, [r4, #0]
    3b58:	2b00      	cmp	r3, #0
    3b5a:	da00      	bge.n	3b5e <_free_r+0x12>
    3b5c:	18e4      	adds	r4, r4, r3
    3b5e:	0028      	movs	r0, r5
    3b60:	f000 fcfb 	bl	455a <__malloc_lock>
    3b64:	4a1d      	ldr	r2, [pc, #116]	; (3bdc <_free_r+0x90>)
    3b66:	6813      	ldr	r3, [r2, #0]
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d105      	bne.n	3b78 <_free_r+0x2c>
    3b6c:	6063      	str	r3, [r4, #4]
    3b6e:	6014      	str	r4, [r2, #0]
    3b70:	0028      	movs	r0, r5
    3b72:	f000 fcf3 	bl	455c <__malloc_unlock>
    3b76:	bd70      	pop	{r4, r5, r6, pc}
    3b78:	42a3      	cmp	r3, r4
    3b7a:	d909      	bls.n	3b90 <_free_r+0x44>
    3b7c:	6821      	ldr	r1, [r4, #0]
    3b7e:	1860      	adds	r0, r4, r1
    3b80:	4283      	cmp	r3, r0
    3b82:	d1f3      	bne.n	3b6c <_free_r+0x20>
    3b84:	6818      	ldr	r0, [r3, #0]
    3b86:	685b      	ldr	r3, [r3, #4]
    3b88:	1841      	adds	r1, r0, r1
    3b8a:	6021      	str	r1, [r4, #0]
    3b8c:	e7ee      	b.n	3b6c <_free_r+0x20>
    3b8e:	0013      	movs	r3, r2
    3b90:	685a      	ldr	r2, [r3, #4]
    3b92:	2a00      	cmp	r2, #0
    3b94:	d001      	beq.n	3b9a <_free_r+0x4e>
    3b96:	42a2      	cmp	r2, r4
    3b98:	d9f9      	bls.n	3b8e <_free_r+0x42>
    3b9a:	6819      	ldr	r1, [r3, #0]
    3b9c:	1858      	adds	r0, r3, r1
    3b9e:	42a0      	cmp	r0, r4
    3ba0:	d10b      	bne.n	3bba <_free_r+0x6e>
    3ba2:	6820      	ldr	r0, [r4, #0]
    3ba4:	1809      	adds	r1, r1, r0
    3ba6:	1858      	adds	r0, r3, r1
    3ba8:	6019      	str	r1, [r3, #0]
    3baa:	4282      	cmp	r2, r0
    3bac:	d1e0      	bne.n	3b70 <_free_r+0x24>
    3bae:	6810      	ldr	r0, [r2, #0]
    3bb0:	6852      	ldr	r2, [r2, #4]
    3bb2:	1841      	adds	r1, r0, r1
    3bb4:	6019      	str	r1, [r3, #0]
    3bb6:	605a      	str	r2, [r3, #4]
    3bb8:	e7da      	b.n	3b70 <_free_r+0x24>
    3bba:	42a0      	cmp	r0, r4
    3bbc:	d902      	bls.n	3bc4 <_free_r+0x78>
    3bbe:	230c      	movs	r3, #12
    3bc0:	602b      	str	r3, [r5, #0]
    3bc2:	e7d5      	b.n	3b70 <_free_r+0x24>
    3bc4:	6821      	ldr	r1, [r4, #0]
    3bc6:	1860      	adds	r0, r4, r1
    3bc8:	4282      	cmp	r2, r0
    3bca:	d103      	bne.n	3bd4 <_free_r+0x88>
    3bcc:	6810      	ldr	r0, [r2, #0]
    3bce:	6852      	ldr	r2, [r2, #4]
    3bd0:	1841      	adds	r1, r0, r1
    3bd2:	6021      	str	r1, [r4, #0]
    3bd4:	6062      	str	r2, [r4, #4]
    3bd6:	605c      	str	r4, [r3, #4]
    3bd8:	e7ca      	b.n	3b70 <_free_r+0x24>
    3bda:	46c0      	nop			; (mov r8, r8)
    3bdc:	20001158 	.word	0x20001158

00003be0 <_malloc_r>:
    3be0:	2303      	movs	r3, #3
    3be2:	b570      	push	{r4, r5, r6, lr}
    3be4:	1ccd      	adds	r5, r1, #3
    3be6:	439d      	bics	r5, r3
    3be8:	3508      	adds	r5, #8
    3bea:	0006      	movs	r6, r0
    3bec:	2d0c      	cmp	r5, #12
    3bee:	d21e      	bcs.n	3c2e <_malloc_r+0x4e>
    3bf0:	250c      	movs	r5, #12
    3bf2:	42a9      	cmp	r1, r5
    3bf4:	d81d      	bhi.n	3c32 <_malloc_r+0x52>
    3bf6:	0030      	movs	r0, r6
    3bf8:	f000 fcaf 	bl	455a <__malloc_lock>
    3bfc:	4a25      	ldr	r2, [pc, #148]	; (3c94 <_malloc_r+0xb4>)
    3bfe:	6814      	ldr	r4, [r2, #0]
    3c00:	0021      	movs	r1, r4
    3c02:	2900      	cmp	r1, #0
    3c04:	d119      	bne.n	3c3a <_malloc_r+0x5a>
    3c06:	4c24      	ldr	r4, [pc, #144]	; (3c98 <_malloc_r+0xb8>)
    3c08:	6823      	ldr	r3, [r4, #0]
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d103      	bne.n	3c16 <_malloc_r+0x36>
    3c0e:	0030      	movs	r0, r6
    3c10:	f000 fb10 	bl	4234 <_sbrk_r>
    3c14:	6020      	str	r0, [r4, #0]
    3c16:	0029      	movs	r1, r5
    3c18:	0030      	movs	r0, r6
    3c1a:	f000 fb0b 	bl	4234 <_sbrk_r>
    3c1e:	1c43      	adds	r3, r0, #1
    3c20:	d12c      	bne.n	3c7c <_malloc_r+0x9c>
    3c22:	230c      	movs	r3, #12
    3c24:	0030      	movs	r0, r6
    3c26:	6033      	str	r3, [r6, #0]
    3c28:	f000 fc98 	bl	455c <__malloc_unlock>
    3c2c:	e003      	b.n	3c36 <_malloc_r+0x56>
    3c2e:	2d00      	cmp	r5, #0
    3c30:	dadf      	bge.n	3bf2 <_malloc_r+0x12>
    3c32:	230c      	movs	r3, #12
    3c34:	6033      	str	r3, [r6, #0]
    3c36:	2000      	movs	r0, #0
    3c38:	bd70      	pop	{r4, r5, r6, pc}
    3c3a:	680b      	ldr	r3, [r1, #0]
    3c3c:	1b5b      	subs	r3, r3, r5
    3c3e:	d41a      	bmi.n	3c76 <_malloc_r+0x96>
    3c40:	2b0b      	cmp	r3, #11
    3c42:	d903      	bls.n	3c4c <_malloc_r+0x6c>
    3c44:	600b      	str	r3, [r1, #0]
    3c46:	18cc      	adds	r4, r1, r3
    3c48:	6025      	str	r5, [r4, #0]
    3c4a:	e003      	b.n	3c54 <_malloc_r+0x74>
    3c4c:	428c      	cmp	r4, r1
    3c4e:	d10e      	bne.n	3c6e <_malloc_r+0x8e>
    3c50:	6863      	ldr	r3, [r4, #4]
    3c52:	6013      	str	r3, [r2, #0]
    3c54:	0030      	movs	r0, r6
    3c56:	f000 fc81 	bl	455c <__malloc_unlock>
    3c5a:	0020      	movs	r0, r4
    3c5c:	2207      	movs	r2, #7
    3c5e:	300b      	adds	r0, #11
    3c60:	1d23      	adds	r3, r4, #4
    3c62:	4390      	bics	r0, r2
    3c64:	1ac3      	subs	r3, r0, r3
    3c66:	d0e7      	beq.n	3c38 <_malloc_r+0x58>
    3c68:	425a      	negs	r2, r3
    3c6a:	50e2      	str	r2, [r4, r3]
    3c6c:	e7e4      	b.n	3c38 <_malloc_r+0x58>
    3c6e:	684b      	ldr	r3, [r1, #4]
    3c70:	6063      	str	r3, [r4, #4]
    3c72:	000c      	movs	r4, r1
    3c74:	e7ee      	b.n	3c54 <_malloc_r+0x74>
    3c76:	000c      	movs	r4, r1
    3c78:	6849      	ldr	r1, [r1, #4]
    3c7a:	e7c2      	b.n	3c02 <_malloc_r+0x22>
    3c7c:	2303      	movs	r3, #3
    3c7e:	1cc4      	adds	r4, r0, #3
    3c80:	439c      	bics	r4, r3
    3c82:	42a0      	cmp	r0, r4
    3c84:	d0e0      	beq.n	3c48 <_malloc_r+0x68>
    3c86:	1a21      	subs	r1, r4, r0
    3c88:	0030      	movs	r0, r6
    3c8a:	f000 fad3 	bl	4234 <_sbrk_r>
    3c8e:	1c43      	adds	r3, r0, #1
    3c90:	d1da      	bne.n	3c48 <_malloc_r+0x68>
    3c92:	e7c6      	b.n	3c22 <_malloc_r+0x42>
    3c94:	20001158 	.word	0x20001158
    3c98:	2000115c 	.word	0x2000115c

00003c9c <__sfputc_r>:
    3c9c:	6893      	ldr	r3, [r2, #8]
    3c9e:	b510      	push	{r4, lr}
    3ca0:	3b01      	subs	r3, #1
    3ca2:	6093      	str	r3, [r2, #8]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	da05      	bge.n	3cb4 <__sfputc_r+0x18>
    3ca8:	6994      	ldr	r4, [r2, #24]
    3caa:	42a3      	cmp	r3, r4
    3cac:	db08      	blt.n	3cc0 <__sfputc_r+0x24>
    3cae:	b2cb      	uxtb	r3, r1
    3cb0:	2b0a      	cmp	r3, #10
    3cb2:	d005      	beq.n	3cc0 <__sfputc_r+0x24>
    3cb4:	6813      	ldr	r3, [r2, #0]
    3cb6:	1c58      	adds	r0, r3, #1
    3cb8:	6010      	str	r0, [r2, #0]
    3cba:	7019      	strb	r1, [r3, #0]
    3cbc:	b2c8      	uxtb	r0, r1
    3cbe:	bd10      	pop	{r4, pc}
    3cc0:	f000 fb16 	bl	42f0 <__swbuf_r>
    3cc4:	e7fb      	b.n	3cbe <__sfputc_r+0x22>

00003cc6 <__sfputs_r>:
    3cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cc8:	0006      	movs	r6, r0
    3cca:	000f      	movs	r7, r1
    3ccc:	0014      	movs	r4, r2
    3cce:	18d5      	adds	r5, r2, r3
    3cd0:	42ac      	cmp	r4, r5
    3cd2:	d101      	bne.n	3cd8 <__sfputs_r+0x12>
    3cd4:	2000      	movs	r0, #0
    3cd6:	e007      	b.n	3ce8 <__sfputs_r+0x22>
    3cd8:	7821      	ldrb	r1, [r4, #0]
    3cda:	003a      	movs	r2, r7
    3cdc:	0030      	movs	r0, r6
    3cde:	f7ff ffdd 	bl	3c9c <__sfputc_r>
    3ce2:	3401      	adds	r4, #1
    3ce4:	1c43      	adds	r3, r0, #1
    3ce6:	d1f3      	bne.n	3cd0 <__sfputs_r+0xa>
    3ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003cec <_vfiprintf_r>:
    3cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cee:	b09f      	sub	sp, #124	; 0x7c
    3cf0:	0006      	movs	r6, r0
    3cf2:	000f      	movs	r7, r1
    3cf4:	0014      	movs	r4, r2
    3cf6:	9305      	str	r3, [sp, #20]
    3cf8:	2800      	cmp	r0, #0
    3cfa:	d004      	beq.n	3d06 <_vfiprintf_r+0x1a>
    3cfc:	6983      	ldr	r3, [r0, #24]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d101      	bne.n	3d06 <_vfiprintf_r+0x1a>
    3d02:	f7ff fe17 	bl	3934 <__sinit>
    3d06:	4b7f      	ldr	r3, [pc, #508]	; (3f04 <_vfiprintf_r+0x218>)
    3d08:	429f      	cmp	r7, r3
    3d0a:	d15c      	bne.n	3dc6 <_vfiprintf_r+0xda>
    3d0c:	6877      	ldr	r7, [r6, #4]
    3d0e:	89bb      	ldrh	r3, [r7, #12]
    3d10:	071b      	lsls	r3, r3, #28
    3d12:	d562      	bpl.n	3dda <_vfiprintf_r+0xee>
    3d14:	693b      	ldr	r3, [r7, #16]
    3d16:	2b00      	cmp	r3, #0
    3d18:	d05f      	beq.n	3dda <_vfiprintf_r+0xee>
    3d1a:	2300      	movs	r3, #0
    3d1c:	ad06      	add	r5, sp, #24
    3d1e:	616b      	str	r3, [r5, #20]
    3d20:	3320      	adds	r3, #32
    3d22:	766b      	strb	r3, [r5, #25]
    3d24:	3310      	adds	r3, #16
    3d26:	76ab      	strb	r3, [r5, #26]
    3d28:	9402      	str	r4, [sp, #8]
    3d2a:	9c02      	ldr	r4, [sp, #8]
    3d2c:	7823      	ldrb	r3, [r4, #0]
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d15d      	bne.n	3dee <_vfiprintf_r+0x102>
    3d32:	9b02      	ldr	r3, [sp, #8]
    3d34:	1ae3      	subs	r3, r4, r3
    3d36:	9304      	str	r3, [sp, #16]
    3d38:	d00d      	beq.n	3d56 <_vfiprintf_r+0x6a>
    3d3a:	9b04      	ldr	r3, [sp, #16]
    3d3c:	9a02      	ldr	r2, [sp, #8]
    3d3e:	0039      	movs	r1, r7
    3d40:	0030      	movs	r0, r6
    3d42:	f7ff ffc0 	bl	3cc6 <__sfputs_r>
    3d46:	1c43      	adds	r3, r0, #1
    3d48:	d100      	bne.n	3d4c <_vfiprintf_r+0x60>
    3d4a:	e0cc      	b.n	3ee6 <_vfiprintf_r+0x1fa>
    3d4c:	696a      	ldr	r2, [r5, #20]
    3d4e:	9b04      	ldr	r3, [sp, #16]
    3d50:	4694      	mov	ip, r2
    3d52:	4463      	add	r3, ip
    3d54:	616b      	str	r3, [r5, #20]
    3d56:	7823      	ldrb	r3, [r4, #0]
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d100      	bne.n	3d5e <_vfiprintf_r+0x72>
    3d5c:	e0c3      	b.n	3ee6 <_vfiprintf_r+0x1fa>
    3d5e:	2201      	movs	r2, #1
    3d60:	2300      	movs	r3, #0
    3d62:	4252      	negs	r2, r2
    3d64:	606a      	str	r2, [r5, #4]
    3d66:	a902      	add	r1, sp, #8
    3d68:	3254      	adds	r2, #84	; 0x54
    3d6a:	1852      	adds	r2, r2, r1
    3d6c:	3401      	adds	r4, #1
    3d6e:	602b      	str	r3, [r5, #0]
    3d70:	60eb      	str	r3, [r5, #12]
    3d72:	60ab      	str	r3, [r5, #8]
    3d74:	7013      	strb	r3, [r2, #0]
    3d76:	65ab      	str	r3, [r5, #88]	; 0x58
    3d78:	7821      	ldrb	r1, [r4, #0]
    3d7a:	2205      	movs	r2, #5
    3d7c:	4862      	ldr	r0, [pc, #392]	; (3f08 <_vfiprintf_r+0x21c>)
    3d7e:	f000 fbe1 	bl	4544 <memchr>
    3d82:	1c63      	adds	r3, r4, #1
    3d84:	469c      	mov	ip, r3
    3d86:	2800      	cmp	r0, #0
    3d88:	d135      	bne.n	3df6 <_vfiprintf_r+0x10a>
    3d8a:	6829      	ldr	r1, [r5, #0]
    3d8c:	06cb      	lsls	r3, r1, #27
    3d8e:	d504      	bpl.n	3d9a <_vfiprintf_r+0xae>
    3d90:	2353      	movs	r3, #83	; 0x53
    3d92:	aa02      	add	r2, sp, #8
    3d94:	3020      	adds	r0, #32
    3d96:	189b      	adds	r3, r3, r2
    3d98:	7018      	strb	r0, [r3, #0]
    3d9a:	070b      	lsls	r3, r1, #28
    3d9c:	d504      	bpl.n	3da8 <_vfiprintf_r+0xbc>
    3d9e:	2353      	movs	r3, #83	; 0x53
    3da0:	202b      	movs	r0, #43	; 0x2b
    3da2:	aa02      	add	r2, sp, #8
    3da4:	189b      	adds	r3, r3, r2
    3da6:	7018      	strb	r0, [r3, #0]
    3da8:	7823      	ldrb	r3, [r4, #0]
    3daa:	2b2a      	cmp	r3, #42	; 0x2a
    3dac:	d02c      	beq.n	3e08 <_vfiprintf_r+0x11c>
    3dae:	2000      	movs	r0, #0
    3db0:	210a      	movs	r1, #10
    3db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3db4:	7822      	ldrb	r2, [r4, #0]
    3db6:	3a30      	subs	r2, #48	; 0x30
    3db8:	2a09      	cmp	r2, #9
    3dba:	d800      	bhi.n	3dbe <_vfiprintf_r+0xd2>
    3dbc:	e06b      	b.n	3e96 <_vfiprintf_r+0x1aa>
    3dbe:	2800      	cmp	r0, #0
    3dc0:	d02a      	beq.n	3e18 <_vfiprintf_r+0x12c>
    3dc2:	9309      	str	r3, [sp, #36]	; 0x24
    3dc4:	e028      	b.n	3e18 <_vfiprintf_r+0x12c>
    3dc6:	4b51      	ldr	r3, [pc, #324]	; (3f0c <_vfiprintf_r+0x220>)
    3dc8:	429f      	cmp	r7, r3
    3dca:	d101      	bne.n	3dd0 <_vfiprintf_r+0xe4>
    3dcc:	68b7      	ldr	r7, [r6, #8]
    3dce:	e79e      	b.n	3d0e <_vfiprintf_r+0x22>
    3dd0:	4b4f      	ldr	r3, [pc, #316]	; (3f10 <_vfiprintf_r+0x224>)
    3dd2:	429f      	cmp	r7, r3
    3dd4:	d19b      	bne.n	3d0e <_vfiprintf_r+0x22>
    3dd6:	68f7      	ldr	r7, [r6, #12]
    3dd8:	e799      	b.n	3d0e <_vfiprintf_r+0x22>
    3dda:	0039      	movs	r1, r7
    3ddc:	0030      	movs	r0, r6
    3dde:	f000 faf1 	bl	43c4 <__swsetup_r>
    3de2:	2800      	cmp	r0, #0
    3de4:	d099      	beq.n	3d1a <_vfiprintf_r+0x2e>
    3de6:	2001      	movs	r0, #1
    3de8:	4240      	negs	r0, r0
    3dea:	b01f      	add	sp, #124	; 0x7c
    3dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dee:	2b25      	cmp	r3, #37	; 0x25
    3df0:	d09f      	beq.n	3d32 <_vfiprintf_r+0x46>
    3df2:	3401      	adds	r4, #1
    3df4:	e79a      	b.n	3d2c <_vfiprintf_r+0x40>
    3df6:	4b44      	ldr	r3, [pc, #272]	; (3f08 <_vfiprintf_r+0x21c>)
    3df8:	6829      	ldr	r1, [r5, #0]
    3dfa:	1ac0      	subs	r0, r0, r3
    3dfc:	2301      	movs	r3, #1
    3dfe:	4083      	lsls	r3, r0
    3e00:	430b      	orrs	r3, r1
    3e02:	602b      	str	r3, [r5, #0]
    3e04:	4664      	mov	r4, ip
    3e06:	e7b7      	b.n	3d78 <_vfiprintf_r+0x8c>
    3e08:	9b05      	ldr	r3, [sp, #20]
    3e0a:	1d18      	adds	r0, r3, #4
    3e0c:	681b      	ldr	r3, [r3, #0]
    3e0e:	9005      	str	r0, [sp, #20]
    3e10:	2b00      	cmp	r3, #0
    3e12:	db3a      	blt.n	3e8a <_vfiprintf_r+0x19e>
    3e14:	9309      	str	r3, [sp, #36]	; 0x24
    3e16:	4664      	mov	r4, ip
    3e18:	7823      	ldrb	r3, [r4, #0]
    3e1a:	2b2e      	cmp	r3, #46	; 0x2e
    3e1c:	d10b      	bne.n	3e36 <_vfiprintf_r+0x14a>
    3e1e:	7863      	ldrb	r3, [r4, #1]
    3e20:	1c62      	adds	r2, r4, #1
    3e22:	2b2a      	cmp	r3, #42	; 0x2a
    3e24:	d13f      	bne.n	3ea6 <_vfiprintf_r+0x1ba>
    3e26:	9b05      	ldr	r3, [sp, #20]
    3e28:	3402      	adds	r4, #2
    3e2a:	1d1a      	adds	r2, r3, #4
    3e2c:	681b      	ldr	r3, [r3, #0]
    3e2e:	9205      	str	r2, [sp, #20]
    3e30:	2b00      	cmp	r3, #0
    3e32:	db35      	blt.n	3ea0 <_vfiprintf_r+0x1b4>
    3e34:	9307      	str	r3, [sp, #28]
    3e36:	7821      	ldrb	r1, [r4, #0]
    3e38:	2203      	movs	r2, #3
    3e3a:	4836      	ldr	r0, [pc, #216]	; (3f14 <_vfiprintf_r+0x228>)
    3e3c:	f000 fb82 	bl	4544 <memchr>
    3e40:	2800      	cmp	r0, #0
    3e42:	d007      	beq.n	3e54 <_vfiprintf_r+0x168>
    3e44:	4b33      	ldr	r3, [pc, #204]	; (3f14 <_vfiprintf_r+0x228>)
    3e46:	682a      	ldr	r2, [r5, #0]
    3e48:	1ac0      	subs	r0, r0, r3
    3e4a:	2340      	movs	r3, #64	; 0x40
    3e4c:	4083      	lsls	r3, r0
    3e4e:	4313      	orrs	r3, r2
    3e50:	602b      	str	r3, [r5, #0]
    3e52:	3401      	adds	r4, #1
    3e54:	7821      	ldrb	r1, [r4, #0]
    3e56:	1c63      	adds	r3, r4, #1
    3e58:	2206      	movs	r2, #6
    3e5a:	482f      	ldr	r0, [pc, #188]	; (3f18 <_vfiprintf_r+0x22c>)
    3e5c:	9302      	str	r3, [sp, #8]
    3e5e:	7629      	strb	r1, [r5, #24]
    3e60:	f000 fb70 	bl	4544 <memchr>
    3e64:	2800      	cmp	r0, #0
    3e66:	d044      	beq.n	3ef2 <_vfiprintf_r+0x206>
    3e68:	4b2c      	ldr	r3, [pc, #176]	; (3f1c <_vfiprintf_r+0x230>)
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d12f      	bne.n	3ece <_vfiprintf_r+0x1e2>
    3e6e:	6829      	ldr	r1, [r5, #0]
    3e70:	9b05      	ldr	r3, [sp, #20]
    3e72:	2207      	movs	r2, #7
    3e74:	05c9      	lsls	r1, r1, #23
    3e76:	d528      	bpl.n	3eca <_vfiprintf_r+0x1de>
    3e78:	189b      	adds	r3, r3, r2
    3e7a:	4393      	bics	r3, r2
    3e7c:	3308      	adds	r3, #8
    3e7e:	9305      	str	r3, [sp, #20]
    3e80:	696b      	ldr	r3, [r5, #20]
    3e82:	9a03      	ldr	r2, [sp, #12]
    3e84:	189b      	adds	r3, r3, r2
    3e86:	616b      	str	r3, [r5, #20]
    3e88:	e74f      	b.n	3d2a <_vfiprintf_r+0x3e>
    3e8a:	425b      	negs	r3, r3
    3e8c:	60eb      	str	r3, [r5, #12]
    3e8e:	2302      	movs	r3, #2
    3e90:	430b      	orrs	r3, r1
    3e92:	602b      	str	r3, [r5, #0]
    3e94:	e7bf      	b.n	3e16 <_vfiprintf_r+0x12a>
    3e96:	434b      	muls	r3, r1
    3e98:	3401      	adds	r4, #1
    3e9a:	189b      	adds	r3, r3, r2
    3e9c:	2001      	movs	r0, #1
    3e9e:	e789      	b.n	3db4 <_vfiprintf_r+0xc8>
    3ea0:	2301      	movs	r3, #1
    3ea2:	425b      	negs	r3, r3
    3ea4:	e7c6      	b.n	3e34 <_vfiprintf_r+0x148>
    3ea6:	2300      	movs	r3, #0
    3ea8:	0014      	movs	r4, r2
    3eaa:	200a      	movs	r0, #10
    3eac:	001a      	movs	r2, r3
    3eae:	606b      	str	r3, [r5, #4]
    3eb0:	7821      	ldrb	r1, [r4, #0]
    3eb2:	3930      	subs	r1, #48	; 0x30
    3eb4:	2909      	cmp	r1, #9
    3eb6:	d903      	bls.n	3ec0 <_vfiprintf_r+0x1d4>
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d0bc      	beq.n	3e36 <_vfiprintf_r+0x14a>
    3ebc:	9207      	str	r2, [sp, #28]
    3ebe:	e7ba      	b.n	3e36 <_vfiprintf_r+0x14a>
    3ec0:	4342      	muls	r2, r0
    3ec2:	3401      	adds	r4, #1
    3ec4:	1852      	adds	r2, r2, r1
    3ec6:	2301      	movs	r3, #1
    3ec8:	e7f2      	b.n	3eb0 <_vfiprintf_r+0x1c4>
    3eca:	3307      	adds	r3, #7
    3ecc:	e7d5      	b.n	3e7a <_vfiprintf_r+0x18e>
    3ece:	ab05      	add	r3, sp, #20
    3ed0:	9300      	str	r3, [sp, #0]
    3ed2:	003a      	movs	r2, r7
    3ed4:	4b12      	ldr	r3, [pc, #72]	; (3f20 <_vfiprintf_r+0x234>)
    3ed6:	0029      	movs	r1, r5
    3ed8:	0030      	movs	r0, r6
    3eda:	e000      	b.n	3ede <_vfiprintf_r+0x1f2>
    3edc:	bf00      	nop
    3ede:	9003      	str	r0, [sp, #12]
    3ee0:	9b03      	ldr	r3, [sp, #12]
    3ee2:	3301      	adds	r3, #1
    3ee4:	d1cc      	bne.n	3e80 <_vfiprintf_r+0x194>
    3ee6:	89bb      	ldrh	r3, [r7, #12]
    3ee8:	065b      	lsls	r3, r3, #25
    3eea:	d500      	bpl.n	3eee <_vfiprintf_r+0x202>
    3eec:	e77b      	b.n	3de6 <_vfiprintf_r+0xfa>
    3eee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3ef0:	e77b      	b.n	3dea <_vfiprintf_r+0xfe>
    3ef2:	ab05      	add	r3, sp, #20
    3ef4:	9300      	str	r3, [sp, #0]
    3ef6:	003a      	movs	r2, r7
    3ef8:	4b09      	ldr	r3, [pc, #36]	; (3f20 <_vfiprintf_r+0x234>)
    3efa:	0029      	movs	r1, r5
    3efc:	0030      	movs	r0, r6
    3efe:	f000 f87f 	bl	4000 <_printf_i>
    3f02:	e7ec      	b.n	3ede <_vfiprintf_r+0x1f2>
    3f04:	0000490c 	.word	0x0000490c
    3f08:	0000494c 	.word	0x0000494c
    3f0c:	0000492c 	.word	0x0000492c
    3f10:	000048ec 	.word	0x000048ec
    3f14:	00004952 	.word	0x00004952
    3f18:	00004956 	.word	0x00004956
    3f1c:	00000000 	.word	0x00000000
    3f20:	00003cc7 	.word	0x00003cc7

00003f24 <_printf_common>:
    3f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f26:	0015      	movs	r5, r2
    3f28:	9301      	str	r3, [sp, #4]
    3f2a:	688a      	ldr	r2, [r1, #8]
    3f2c:	690b      	ldr	r3, [r1, #16]
    3f2e:	9000      	str	r0, [sp, #0]
    3f30:	000c      	movs	r4, r1
    3f32:	4293      	cmp	r3, r2
    3f34:	da00      	bge.n	3f38 <_printf_common+0x14>
    3f36:	0013      	movs	r3, r2
    3f38:	0022      	movs	r2, r4
    3f3a:	602b      	str	r3, [r5, #0]
    3f3c:	3243      	adds	r2, #67	; 0x43
    3f3e:	7812      	ldrb	r2, [r2, #0]
    3f40:	2a00      	cmp	r2, #0
    3f42:	d001      	beq.n	3f48 <_printf_common+0x24>
    3f44:	3301      	adds	r3, #1
    3f46:	602b      	str	r3, [r5, #0]
    3f48:	6823      	ldr	r3, [r4, #0]
    3f4a:	069b      	lsls	r3, r3, #26
    3f4c:	d502      	bpl.n	3f54 <_printf_common+0x30>
    3f4e:	682b      	ldr	r3, [r5, #0]
    3f50:	3302      	adds	r3, #2
    3f52:	602b      	str	r3, [r5, #0]
    3f54:	2706      	movs	r7, #6
    3f56:	6823      	ldr	r3, [r4, #0]
    3f58:	401f      	ands	r7, r3
    3f5a:	d027      	beq.n	3fac <_printf_common+0x88>
    3f5c:	0023      	movs	r3, r4
    3f5e:	3343      	adds	r3, #67	; 0x43
    3f60:	781b      	ldrb	r3, [r3, #0]
    3f62:	1e5a      	subs	r2, r3, #1
    3f64:	4193      	sbcs	r3, r2
    3f66:	6822      	ldr	r2, [r4, #0]
    3f68:	0692      	lsls	r2, r2, #26
    3f6a:	d430      	bmi.n	3fce <_printf_common+0xaa>
    3f6c:	0022      	movs	r2, r4
    3f6e:	9901      	ldr	r1, [sp, #4]
    3f70:	3243      	adds	r2, #67	; 0x43
    3f72:	9800      	ldr	r0, [sp, #0]
    3f74:	9e08      	ldr	r6, [sp, #32]
    3f76:	47b0      	blx	r6
    3f78:	1c43      	adds	r3, r0, #1
    3f7a:	d025      	beq.n	3fc8 <_printf_common+0xa4>
    3f7c:	2306      	movs	r3, #6
    3f7e:	6820      	ldr	r0, [r4, #0]
    3f80:	682a      	ldr	r2, [r5, #0]
    3f82:	68e1      	ldr	r1, [r4, #12]
    3f84:	4003      	ands	r3, r0
    3f86:	2500      	movs	r5, #0
    3f88:	2b04      	cmp	r3, #4
    3f8a:	d103      	bne.n	3f94 <_printf_common+0x70>
    3f8c:	1a8d      	subs	r5, r1, r2
    3f8e:	43eb      	mvns	r3, r5
    3f90:	17db      	asrs	r3, r3, #31
    3f92:	401d      	ands	r5, r3
    3f94:	68a3      	ldr	r3, [r4, #8]
    3f96:	6922      	ldr	r2, [r4, #16]
    3f98:	4293      	cmp	r3, r2
    3f9a:	dd01      	ble.n	3fa0 <_printf_common+0x7c>
    3f9c:	1a9b      	subs	r3, r3, r2
    3f9e:	18ed      	adds	r5, r5, r3
    3fa0:	2700      	movs	r7, #0
    3fa2:	42bd      	cmp	r5, r7
    3fa4:	d120      	bne.n	3fe8 <_printf_common+0xc4>
    3fa6:	2000      	movs	r0, #0
    3fa8:	e010      	b.n	3fcc <_printf_common+0xa8>
    3faa:	3701      	adds	r7, #1
    3fac:	68e3      	ldr	r3, [r4, #12]
    3fae:	682a      	ldr	r2, [r5, #0]
    3fb0:	1a9b      	subs	r3, r3, r2
    3fb2:	429f      	cmp	r7, r3
    3fb4:	dad2      	bge.n	3f5c <_printf_common+0x38>
    3fb6:	0022      	movs	r2, r4
    3fb8:	2301      	movs	r3, #1
    3fba:	3219      	adds	r2, #25
    3fbc:	9901      	ldr	r1, [sp, #4]
    3fbe:	9800      	ldr	r0, [sp, #0]
    3fc0:	9e08      	ldr	r6, [sp, #32]
    3fc2:	47b0      	blx	r6
    3fc4:	1c43      	adds	r3, r0, #1
    3fc6:	d1f0      	bne.n	3faa <_printf_common+0x86>
    3fc8:	2001      	movs	r0, #1
    3fca:	4240      	negs	r0, r0
    3fcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3fce:	2030      	movs	r0, #48	; 0x30
    3fd0:	18e1      	adds	r1, r4, r3
    3fd2:	3143      	adds	r1, #67	; 0x43
    3fd4:	7008      	strb	r0, [r1, #0]
    3fd6:	0021      	movs	r1, r4
    3fd8:	1c5a      	adds	r2, r3, #1
    3fda:	3145      	adds	r1, #69	; 0x45
    3fdc:	7809      	ldrb	r1, [r1, #0]
    3fde:	18a2      	adds	r2, r4, r2
    3fe0:	3243      	adds	r2, #67	; 0x43
    3fe2:	3302      	adds	r3, #2
    3fe4:	7011      	strb	r1, [r2, #0]
    3fe6:	e7c1      	b.n	3f6c <_printf_common+0x48>
    3fe8:	0022      	movs	r2, r4
    3fea:	2301      	movs	r3, #1
    3fec:	321a      	adds	r2, #26
    3fee:	9901      	ldr	r1, [sp, #4]
    3ff0:	9800      	ldr	r0, [sp, #0]
    3ff2:	9e08      	ldr	r6, [sp, #32]
    3ff4:	47b0      	blx	r6
    3ff6:	1c43      	adds	r3, r0, #1
    3ff8:	d0e6      	beq.n	3fc8 <_printf_common+0xa4>
    3ffa:	3701      	adds	r7, #1
    3ffc:	e7d1      	b.n	3fa2 <_printf_common+0x7e>
	...

00004000 <_printf_i>:
    4000:	b5f0      	push	{r4, r5, r6, r7, lr}
    4002:	b08b      	sub	sp, #44	; 0x2c
    4004:	9206      	str	r2, [sp, #24]
    4006:	000a      	movs	r2, r1
    4008:	3243      	adds	r2, #67	; 0x43
    400a:	9307      	str	r3, [sp, #28]
    400c:	9005      	str	r0, [sp, #20]
    400e:	9204      	str	r2, [sp, #16]
    4010:	7e0a      	ldrb	r2, [r1, #24]
    4012:	000c      	movs	r4, r1
    4014:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4016:	2a6e      	cmp	r2, #110	; 0x6e
    4018:	d100      	bne.n	401c <_printf_i+0x1c>
    401a:	e08f      	b.n	413c <_printf_i+0x13c>
    401c:	d817      	bhi.n	404e <_printf_i+0x4e>
    401e:	2a63      	cmp	r2, #99	; 0x63
    4020:	d02c      	beq.n	407c <_printf_i+0x7c>
    4022:	d808      	bhi.n	4036 <_printf_i+0x36>
    4024:	2a00      	cmp	r2, #0
    4026:	d100      	bne.n	402a <_printf_i+0x2a>
    4028:	e099      	b.n	415e <_printf_i+0x15e>
    402a:	2a58      	cmp	r2, #88	; 0x58
    402c:	d054      	beq.n	40d8 <_printf_i+0xd8>
    402e:	0026      	movs	r6, r4
    4030:	3642      	adds	r6, #66	; 0x42
    4032:	7032      	strb	r2, [r6, #0]
    4034:	e029      	b.n	408a <_printf_i+0x8a>
    4036:	2a64      	cmp	r2, #100	; 0x64
    4038:	d001      	beq.n	403e <_printf_i+0x3e>
    403a:	2a69      	cmp	r2, #105	; 0x69
    403c:	d1f7      	bne.n	402e <_printf_i+0x2e>
    403e:	6821      	ldr	r1, [r4, #0]
    4040:	681a      	ldr	r2, [r3, #0]
    4042:	0608      	lsls	r0, r1, #24
    4044:	d523      	bpl.n	408e <_printf_i+0x8e>
    4046:	1d11      	adds	r1, r2, #4
    4048:	6019      	str	r1, [r3, #0]
    404a:	6815      	ldr	r5, [r2, #0]
    404c:	e025      	b.n	409a <_printf_i+0x9a>
    404e:	2a73      	cmp	r2, #115	; 0x73
    4050:	d100      	bne.n	4054 <_printf_i+0x54>
    4052:	e088      	b.n	4166 <_printf_i+0x166>
    4054:	d808      	bhi.n	4068 <_printf_i+0x68>
    4056:	2a6f      	cmp	r2, #111	; 0x6f
    4058:	d029      	beq.n	40ae <_printf_i+0xae>
    405a:	2a70      	cmp	r2, #112	; 0x70
    405c:	d1e7      	bne.n	402e <_printf_i+0x2e>
    405e:	2220      	movs	r2, #32
    4060:	6809      	ldr	r1, [r1, #0]
    4062:	430a      	orrs	r2, r1
    4064:	6022      	str	r2, [r4, #0]
    4066:	e003      	b.n	4070 <_printf_i+0x70>
    4068:	2a75      	cmp	r2, #117	; 0x75
    406a:	d020      	beq.n	40ae <_printf_i+0xae>
    406c:	2a78      	cmp	r2, #120	; 0x78
    406e:	d1de      	bne.n	402e <_printf_i+0x2e>
    4070:	0022      	movs	r2, r4
    4072:	2178      	movs	r1, #120	; 0x78
    4074:	3245      	adds	r2, #69	; 0x45
    4076:	7011      	strb	r1, [r2, #0]
    4078:	4a6c      	ldr	r2, [pc, #432]	; (422c <_printf_i+0x22c>)
    407a:	e030      	b.n	40de <_printf_i+0xde>
    407c:	000e      	movs	r6, r1
    407e:	681a      	ldr	r2, [r3, #0]
    4080:	3642      	adds	r6, #66	; 0x42
    4082:	1d11      	adds	r1, r2, #4
    4084:	6019      	str	r1, [r3, #0]
    4086:	6813      	ldr	r3, [r2, #0]
    4088:	7033      	strb	r3, [r6, #0]
    408a:	2301      	movs	r3, #1
    408c:	e079      	b.n	4182 <_printf_i+0x182>
    408e:	0649      	lsls	r1, r1, #25
    4090:	d5d9      	bpl.n	4046 <_printf_i+0x46>
    4092:	1d11      	adds	r1, r2, #4
    4094:	6019      	str	r1, [r3, #0]
    4096:	2300      	movs	r3, #0
    4098:	5ed5      	ldrsh	r5, [r2, r3]
    409a:	2d00      	cmp	r5, #0
    409c:	da03      	bge.n	40a6 <_printf_i+0xa6>
    409e:	232d      	movs	r3, #45	; 0x2d
    40a0:	9a04      	ldr	r2, [sp, #16]
    40a2:	426d      	negs	r5, r5
    40a4:	7013      	strb	r3, [r2, #0]
    40a6:	4b62      	ldr	r3, [pc, #392]	; (4230 <_printf_i+0x230>)
    40a8:	270a      	movs	r7, #10
    40aa:	9303      	str	r3, [sp, #12]
    40ac:	e02f      	b.n	410e <_printf_i+0x10e>
    40ae:	6820      	ldr	r0, [r4, #0]
    40b0:	6819      	ldr	r1, [r3, #0]
    40b2:	0605      	lsls	r5, r0, #24
    40b4:	d503      	bpl.n	40be <_printf_i+0xbe>
    40b6:	1d08      	adds	r0, r1, #4
    40b8:	6018      	str	r0, [r3, #0]
    40ba:	680d      	ldr	r5, [r1, #0]
    40bc:	e005      	b.n	40ca <_printf_i+0xca>
    40be:	0640      	lsls	r0, r0, #25
    40c0:	d5f9      	bpl.n	40b6 <_printf_i+0xb6>
    40c2:	680d      	ldr	r5, [r1, #0]
    40c4:	1d08      	adds	r0, r1, #4
    40c6:	6018      	str	r0, [r3, #0]
    40c8:	b2ad      	uxth	r5, r5
    40ca:	4b59      	ldr	r3, [pc, #356]	; (4230 <_printf_i+0x230>)
    40cc:	2708      	movs	r7, #8
    40ce:	9303      	str	r3, [sp, #12]
    40d0:	2a6f      	cmp	r2, #111	; 0x6f
    40d2:	d018      	beq.n	4106 <_printf_i+0x106>
    40d4:	270a      	movs	r7, #10
    40d6:	e016      	b.n	4106 <_printf_i+0x106>
    40d8:	3145      	adds	r1, #69	; 0x45
    40da:	700a      	strb	r2, [r1, #0]
    40dc:	4a54      	ldr	r2, [pc, #336]	; (4230 <_printf_i+0x230>)
    40de:	9203      	str	r2, [sp, #12]
    40e0:	681a      	ldr	r2, [r3, #0]
    40e2:	6821      	ldr	r1, [r4, #0]
    40e4:	1d10      	adds	r0, r2, #4
    40e6:	6018      	str	r0, [r3, #0]
    40e8:	6815      	ldr	r5, [r2, #0]
    40ea:	0608      	lsls	r0, r1, #24
    40ec:	d522      	bpl.n	4134 <_printf_i+0x134>
    40ee:	07cb      	lsls	r3, r1, #31
    40f0:	d502      	bpl.n	40f8 <_printf_i+0xf8>
    40f2:	2320      	movs	r3, #32
    40f4:	4319      	orrs	r1, r3
    40f6:	6021      	str	r1, [r4, #0]
    40f8:	2710      	movs	r7, #16
    40fa:	2d00      	cmp	r5, #0
    40fc:	d103      	bne.n	4106 <_printf_i+0x106>
    40fe:	2320      	movs	r3, #32
    4100:	6822      	ldr	r2, [r4, #0]
    4102:	439a      	bics	r2, r3
    4104:	6022      	str	r2, [r4, #0]
    4106:	0023      	movs	r3, r4
    4108:	2200      	movs	r2, #0
    410a:	3343      	adds	r3, #67	; 0x43
    410c:	701a      	strb	r2, [r3, #0]
    410e:	6863      	ldr	r3, [r4, #4]
    4110:	60a3      	str	r3, [r4, #8]
    4112:	2b00      	cmp	r3, #0
    4114:	db5c      	blt.n	41d0 <_printf_i+0x1d0>
    4116:	2204      	movs	r2, #4
    4118:	6821      	ldr	r1, [r4, #0]
    411a:	4391      	bics	r1, r2
    411c:	6021      	str	r1, [r4, #0]
    411e:	2d00      	cmp	r5, #0
    4120:	d158      	bne.n	41d4 <_printf_i+0x1d4>
    4122:	9e04      	ldr	r6, [sp, #16]
    4124:	2b00      	cmp	r3, #0
    4126:	d064      	beq.n	41f2 <_printf_i+0x1f2>
    4128:	0026      	movs	r6, r4
    412a:	9b03      	ldr	r3, [sp, #12]
    412c:	3642      	adds	r6, #66	; 0x42
    412e:	781b      	ldrb	r3, [r3, #0]
    4130:	7033      	strb	r3, [r6, #0]
    4132:	e05e      	b.n	41f2 <_printf_i+0x1f2>
    4134:	0648      	lsls	r0, r1, #25
    4136:	d5da      	bpl.n	40ee <_printf_i+0xee>
    4138:	b2ad      	uxth	r5, r5
    413a:	e7d8      	b.n	40ee <_printf_i+0xee>
    413c:	6809      	ldr	r1, [r1, #0]
    413e:	681a      	ldr	r2, [r3, #0]
    4140:	0608      	lsls	r0, r1, #24
    4142:	d505      	bpl.n	4150 <_printf_i+0x150>
    4144:	1d11      	adds	r1, r2, #4
    4146:	6019      	str	r1, [r3, #0]
    4148:	6813      	ldr	r3, [r2, #0]
    414a:	6962      	ldr	r2, [r4, #20]
    414c:	601a      	str	r2, [r3, #0]
    414e:	e006      	b.n	415e <_printf_i+0x15e>
    4150:	0649      	lsls	r1, r1, #25
    4152:	d5f7      	bpl.n	4144 <_printf_i+0x144>
    4154:	1d11      	adds	r1, r2, #4
    4156:	6019      	str	r1, [r3, #0]
    4158:	6813      	ldr	r3, [r2, #0]
    415a:	8aa2      	ldrh	r2, [r4, #20]
    415c:	801a      	strh	r2, [r3, #0]
    415e:	2300      	movs	r3, #0
    4160:	9e04      	ldr	r6, [sp, #16]
    4162:	6123      	str	r3, [r4, #16]
    4164:	e054      	b.n	4210 <_printf_i+0x210>
    4166:	681a      	ldr	r2, [r3, #0]
    4168:	1d11      	adds	r1, r2, #4
    416a:	6019      	str	r1, [r3, #0]
    416c:	6816      	ldr	r6, [r2, #0]
    416e:	2100      	movs	r1, #0
    4170:	6862      	ldr	r2, [r4, #4]
    4172:	0030      	movs	r0, r6
    4174:	f000 f9e6 	bl	4544 <memchr>
    4178:	2800      	cmp	r0, #0
    417a:	d001      	beq.n	4180 <_printf_i+0x180>
    417c:	1b80      	subs	r0, r0, r6
    417e:	6060      	str	r0, [r4, #4]
    4180:	6863      	ldr	r3, [r4, #4]
    4182:	6123      	str	r3, [r4, #16]
    4184:	2300      	movs	r3, #0
    4186:	9a04      	ldr	r2, [sp, #16]
    4188:	7013      	strb	r3, [r2, #0]
    418a:	e041      	b.n	4210 <_printf_i+0x210>
    418c:	6923      	ldr	r3, [r4, #16]
    418e:	0032      	movs	r2, r6
    4190:	9906      	ldr	r1, [sp, #24]
    4192:	9805      	ldr	r0, [sp, #20]
    4194:	9d07      	ldr	r5, [sp, #28]
    4196:	47a8      	blx	r5
    4198:	1c43      	adds	r3, r0, #1
    419a:	d043      	beq.n	4224 <_printf_i+0x224>
    419c:	6823      	ldr	r3, [r4, #0]
    419e:	2500      	movs	r5, #0
    41a0:	079b      	lsls	r3, r3, #30
    41a2:	d40f      	bmi.n	41c4 <_printf_i+0x1c4>
    41a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    41a6:	68e0      	ldr	r0, [r4, #12]
    41a8:	4298      	cmp	r0, r3
    41aa:	da3d      	bge.n	4228 <_printf_i+0x228>
    41ac:	0018      	movs	r0, r3
    41ae:	e03b      	b.n	4228 <_printf_i+0x228>
    41b0:	0022      	movs	r2, r4
    41b2:	2301      	movs	r3, #1
    41b4:	3219      	adds	r2, #25
    41b6:	9906      	ldr	r1, [sp, #24]
    41b8:	9805      	ldr	r0, [sp, #20]
    41ba:	9e07      	ldr	r6, [sp, #28]
    41bc:	47b0      	blx	r6
    41be:	1c43      	adds	r3, r0, #1
    41c0:	d030      	beq.n	4224 <_printf_i+0x224>
    41c2:	3501      	adds	r5, #1
    41c4:	68e3      	ldr	r3, [r4, #12]
    41c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    41c8:	1a9b      	subs	r3, r3, r2
    41ca:	429d      	cmp	r5, r3
    41cc:	dbf0      	blt.n	41b0 <_printf_i+0x1b0>
    41ce:	e7e9      	b.n	41a4 <_printf_i+0x1a4>
    41d0:	2d00      	cmp	r5, #0
    41d2:	d0a9      	beq.n	4128 <_printf_i+0x128>
    41d4:	9e04      	ldr	r6, [sp, #16]
    41d6:	0028      	movs	r0, r5
    41d8:	0039      	movs	r1, r7
    41da:	f7ff f87d 	bl	32d8 <__aeabi_uidivmod>
    41de:	9b03      	ldr	r3, [sp, #12]
    41e0:	3e01      	subs	r6, #1
    41e2:	5c5b      	ldrb	r3, [r3, r1]
    41e4:	0028      	movs	r0, r5
    41e6:	7033      	strb	r3, [r6, #0]
    41e8:	0039      	movs	r1, r7
    41ea:	f7fe ffef 	bl	31cc <__udivsi3>
    41ee:	1e05      	subs	r5, r0, #0
    41f0:	d1f1      	bne.n	41d6 <_printf_i+0x1d6>
    41f2:	2f08      	cmp	r7, #8
    41f4:	d109      	bne.n	420a <_printf_i+0x20a>
    41f6:	6823      	ldr	r3, [r4, #0]
    41f8:	07db      	lsls	r3, r3, #31
    41fa:	d506      	bpl.n	420a <_printf_i+0x20a>
    41fc:	6863      	ldr	r3, [r4, #4]
    41fe:	6922      	ldr	r2, [r4, #16]
    4200:	4293      	cmp	r3, r2
    4202:	dc02      	bgt.n	420a <_printf_i+0x20a>
    4204:	2330      	movs	r3, #48	; 0x30
    4206:	3e01      	subs	r6, #1
    4208:	7033      	strb	r3, [r6, #0]
    420a:	9b04      	ldr	r3, [sp, #16]
    420c:	1b9b      	subs	r3, r3, r6
    420e:	6123      	str	r3, [r4, #16]
    4210:	9b07      	ldr	r3, [sp, #28]
    4212:	aa09      	add	r2, sp, #36	; 0x24
    4214:	9300      	str	r3, [sp, #0]
    4216:	0021      	movs	r1, r4
    4218:	9b06      	ldr	r3, [sp, #24]
    421a:	9805      	ldr	r0, [sp, #20]
    421c:	f7ff fe82 	bl	3f24 <_printf_common>
    4220:	1c43      	adds	r3, r0, #1
    4222:	d1b3      	bne.n	418c <_printf_i+0x18c>
    4224:	2001      	movs	r0, #1
    4226:	4240      	negs	r0, r0
    4228:	b00b      	add	sp, #44	; 0x2c
    422a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    422c:	0000496e 	.word	0x0000496e
    4230:	0000495d 	.word	0x0000495d

00004234 <_sbrk_r>:
    4234:	2300      	movs	r3, #0
    4236:	b570      	push	{r4, r5, r6, lr}
    4238:	4c06      	ldr	r4, [pc, #24]	; (4254 <_sbrk_r+0x20>)
    423a:	0005      	movs	r5, r0
    423c:	0008      	movs	r0, r1
    423e:	6023      	str	r3, [r4, #0]
    4240:	f7fe fce4 	bl	2c0c <_sbrk>
    4244:	1c43      	adds	r3, r0, #1
    4246:	d103      	bne.n	4250 <_sbrk_r+0x1c>
    4248:	6823      	ldr	r3, [r4, #0]
    424a:	2b00      	cmp	r3, #0
    424c:	d000      	beq.n	4250 <_sbrk_r+0x1c>
    424e:	602b      	str	r3, [r5, #0]
    4250:	bd70      	pop	{r4, r5, r6, pc}
    4252:	46c0      	nop			; (mov r8, r8)
    4254:	200011bc 	.word	0x200011bc

00004258 <__sread>:
    4258:	b570      	push	{r4, r5, r6, lr}
    425a:	000c      	movs	r4, r1
    425c:	250e      	movs	r5, #14
    425e:	5f49      	ldrsh	r1, [r1, r5]
    4260:	f000 f97e 	bl	4560 <_read_r>
    4264:	2800      	cmp	r0, #0
    4266:	db03      	blt.n	4270 <__sread+0x18>
    4268:	6d63      	ldr	r3, [r4, #84]	; 0x54
    426a:	181b      	adds	r3, r3, r0
    426c:	6563      	str	r3, [r4, #84]	; 0x54
    426e:	bd70      	pop	{r4, r5, r6, pc}
    4270:	89a3      	ldrh	r3, [r4, #12]
    4272:	4a02      	ldr	r2, [pc, #8]	; (427c <__sread+0x24>)
    4274:	4013      	ands	r3, r2
    4276:	81a3      	strh	r3, [r4, #12]
    4278:	e7f9      	b.n	426e <__sread+0x16>
    427a:	46c0      	nop			; (mov r8, r8)
    427c:	ffffefff 	.word	0xffffefff

00004280 <__swrite>:
    4280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4282:	001f      	movs	r7, r3
    4284:	898b      	ldrh	r3, [r1, #12]
    4286:	0005      	movs	r5, r0
    4288:	000c      	movs	r4, r1
    428a:	0016      	movs	r6, r2
    428c:	05db      	lsls	r3, r3, #23
    428e:	d505      	bpl.n	429c <__swrite+0x1c>
    4290:	230e      	movs	r3, #14
    4292:	5ec9      	ldrsh	r1, [r1, r3]
    4294:	2200      	movs	r2, #0
    4296:	2302      	movs	r3, #2
    4298:	f000 f940 	bl	451c <_lseek_r>
    429c:	89a3      	ldrh	r3, [r4, #12]
    429e:	4a05      	ldr	r2, [pc, #20]	; (42b4 <__swrite+0x34>)
    42a0:	0028      	movs	r0, r5
    42a2:	4013      	ands	r3, r2
    42a4:	81a3      	strh	r3, [r4, #12]
    42a6:	0032      	movs	r2, r6
    42a8:	230e      	movs	r3, #14
    42aa:	5ee1      	ldrsh	r1, [r4, r3]
    42ac:	003b      	movs	r3, r7
    42ae:	f000 f875 	bl	439c <_write_r>
    42b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42b4:	ffffefff 	.word	0xffffefff

000042b8 <__sseek>:
    42b8:	b570      	push	{r4, r5, r6, lr}
    42ba:	000c      	movs	r4, r1
    42bc:	250e      	movs	r5, #14
    42be:	5f49      	ldrsh	r1, [r1, r5]
    42c0:	f000 f92c 	bl	451c <_lseek_r>
    42c4:	89a3      	ldrh	r3, [r4, #12]
    42c6:	1c42      	adds	r2, r0, #1
    42c8:	d103      	bne.n	42d2 <__sseek+0x1a>
    42ca:	4a05      	ldr	r2, [pc, #20]	; (42e0 <__sseek+0x28>)
    42cc:	4013      	ands	r3, r2
    42ce:	81a3      	strh	r3, [r4, #12]
    42d0:	bd70      	pop	{r4, r5, r6, pc}
    42d2:	2280      	movs	r2, #128	; 0x80
    42d4:	0152      	lsls	r2, r2, #5
    42d6:	4313      	orrs	r3, r2
    42d8:	81a3      	strh	r3, [r4, #12]
    42da:	6560      	str	r0, [r4, #84]	; 0x54
    42dc:	e7f8      	b.n	42d0 <__sseek+0x18>
    42de:	46c0      	nop			; (mov r8, r8)
    42e0:	ffffefff 	.word	0xffffefff

000042e4 <__sclose>:
    42e4:	b510      	push	{r4, lr}
    42e6:	230e      	movs	r3, #14
    42e8:	5ec9      	ldrsh	r1, [r1, r3]
    42ea:	f000 f8e1 	bl	44b0 <_close_r>
    42ee:	bd10      	pop	{r4, pc}

000042f0 <__swbuf_r>:
    42f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42f2:	0005      	movs	r5, r0
    42f4:	000e      	movs	r6, r1
    42f6:	0014      	movs	r4, r2
    42f8:	2800      	cmp	r0, #0
    42fa:	d004      	beq.n	4306 <__swbuf_r+0x16>
    42fc:	6983      	ldr	r3, [r0, #24]
    42fe:	2b00      	cmp	r3, #0
    4300:	d101      	bne.n	4306 <__swbuf_r+0x16>
    4302:	f7ff fb17 	bl	3934 <__sinit>
    4306:	4b22      	ldr	r3, [pc, #136]	; (4390 <__swbuf_r+0xa0>)
    4308:	429c      	cmp	r4, r3
    430a:	d12d      	bne.n	4368 <__swbuf_r+0x78>
    430c:	686c      	ldr	r4, [r5, #4]
    430e:	69a3      	ldr	r3, [r4, #24]
    4310:	60a3      	str	r3, [r4, #8]
    4312:	89a3      	ldrh	r3, [r4, #12]
    4314:	071b      	lsls	r3, r3, #28
    4316:	d531      	bpl.n	437c <__swbuf_r+0x8c>
    4318:	6923      	ldr	r3, [r4, #16]
    431a:	2b00      	cmp	r3, #0
    431c:	d02e      	beq.n	437c <__swbuf_r+0x8c>
    431e:	6823      	ldr	r3, [r4, #0]
    4320:	6922      	ldr	r2, [r4, #16]
    4322:	b2f7      	uxtb	r7, r6
    4324:	1a98      	subs	r0, r3, r2
    4326:	6963      	ldr	r3, [r4, #20]
    4328:	b2f6      	uxtb	r6, r6
    432a:	4298      	cmp	r0, r3
    432c:	db05      	blt.n	433a <__swbuf_r+0x4a>
    432e:	0021      	movs	r1, r4
    4330:	0028      	movs	r0, r5
    4332:	f7ff fa91 	bl	3858 <_fflush_r>
    4336:	2800      	cmp	r0, #0
    4338:	d126      	bne.n	4388 <__swbuf_r+0x98>
    433a:	68a3      	ldr	r3, [r4, #8]
    433c:	3001      	adds	r0, #1
    433e:	3b01      	subs	r3, #1
    4340:	60a3      	str	r3, [r4, #8]
    4342:	6823      	ldr	r3, [r4, #0]
    4344:	1c5a      	adds	r2, r3, #1
    4346:	6022      	str	r2, [r4, #0]
    4348:	701f      	strb	r7, [r3, #0]
    434a:	6963      	ldr	r3, [r4, #20]
    434c:	4298      	cmp	r0, r3
    434e:	d004      	beq.n	435a <__swbuf_r+0x6a>
    4350:	89a3      	ldrh	r3, [r4, #12]
    4352:	07db      	lsls	r3, r3, #31
    4354:	d51a      	bpl.n	438c <__swbuf_r+0x9c>
    4356:	2e0a      	cmp	r6, #10
    4358:	d118      	bne.n	438c <__swbuf_r+0x9c>
    435a:	0021      	movs	r1, r4
    435c:	0028      	movs	r0, r5
    435e:	f7ff fa7b 	bl	3858 <_fflush_r>
    4362:	2800      	cmp	r0, #0
    4364:	d012      	beq.n	438c <__swbuf_r+0x9c>
    4366:	e00f      	b.n	4388 <__swbuf_r+0x98>
    4368:	4b0a      	ldr	r3, [pc, #40]	; (4394 <__swbuf_r+0xa4>)
    436a:	429c      	cmp	r4, r3
    436c:	d101      	bne.n	4372 <__swbuf_r+0x82>
    436e:	68ac      	ldr	r4, [r5, #8]
    4370:	e7cd      	b.n	430e <__swbuf_r+0x1e>
    4372:	4b09      	ldr	r3, [pc, #36]	; (4398 <__swbuf_r+0xa8>)
    4374:	429c      	cmp	r4, r3
    4376:	d1ca      	bne.n	430e <__swbuf_r+0x1e>
    4378:	68ec      	ldr	r4, [r5, #12]
    437a:	e7c8      	b.n	430e <__swbuf_r+0x1e>
    437c:	0021      	movs	r1, r4
    437e:	0028      	movs	r0, r5
    4380:	f000 f820 	bl	43c4 <__swsetup_r>
    4384:	2800      	cmp	r0, #0
    4386:	d0ca      	beq.n	431e <__swbuf_r+0x2e>
    4388:	2601      	movs	r6, #1
    438a:	4276      	negs	r6, r6
    438c:	0030      	movs	r0, r6
    438e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4390:	0000490c 	.word	0x0000490c
    4394:	0000492c 	.word	0x0000492c
    4398:	000048ec 	.word	0x000048ec

0000439c <_write_r>:
    439c:	b570      	push	{r4, r5, r6, lr}
    439e:	0005      	movs	r5, r0
    43a0:	0008      	movs	r0, r1
    43a2:	0011      	movs	r1, r2
    43a4:	2200      	movs	r2, #0
    43a6:	4c06      	ldr	r4, [pc, #24]	; (43c0 <_write_r+0x24>)
    43a8:	6022      	str	r2, [r4, #0]
    43aa:	001a      	movs	r2, r3
    43ac:	f7fe fc06 	bl	2bbc <_write>
    43b0:	1c43      	adds	r3, r0, #1
    43b2:	d103      	bne.n	43bc <_write_r+0x20>
    43b4:	6823      	ldr	r3, [r4, #0]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d000      	beq.n	43bc <_write_r+0x20>
    43ba:	602b      	str	r3, [r5, #0]
    43bc:	bd70      	pop	{r4, r5, r6, pc}
    43be:	46c0      	nop			; (mov r8, r8)
    43c0:	200011bc 	.word	0x200011bc

000043c4 <__swsetup_r>:
    43c4:	4b36      	ldr	r3, [pc, #216]	; (44a0 <__swsetup_r+0xdc>)
    43c6:	b570      	push	{r4, r5, r6, lr}
    43c8:	681d      	ldr	r5, [r3, #0]
    43ca:	0006      	movs	r6, r0
    43cc:	000c      	movs	r4, r1
    43ce:	2d00      	cmp	r5, #0
    43d0:	d005      	beq.n	43de <__swsetup_r+0x1a>
    43d2:	69ab      	ldr	r3, [r5, #24]
    43d4:	2b00      	cmp	r3, #0
    43d6:	d102      	bne.n	43de <__swsetup_r+0x1a>
    43d8:	0028      	movs	r0, r5
    43da:	f7ff faab 	bl	3934 <__sinit>
    43de:	4b31      	ldr	r3, [pc, #196]	; (44a4 <__swsetup_r+0xe0>)
    43e0:	429c      	cmp	r4, r3
    43e2:	d10f      	bne.n	4404 <__swsetup_r+0x40>
    43e4:	686c      	ldr	r4, [r5, #4]
    43e6:	230c      	movs	r3, #12
    43e8:	5ee2      	ldrsh	r2, [r4, r3]
    43ea:	b293      	uxth	r3, r2
    43ec:	0719      	lsls	r1, r3, #28
    43ee:	d42d      	bmi.n	444c <__swsetup_r+0x88>
    43f0:	06d9      	lsls	r1, r3, #27
    43f2:	d411      	bmi.n	4418 <__swsetup_r+0x54>
    43f4:	2309      	movs	r3, #9
    43f6:	2001      	movs	r0, #1
    43f8:	6033      	str	r3, [r6, #0]
    43fa:	3337      	adds	r3, #55	; 0x37
    43fc:	4313      	orrs	r3, r2
    43fe:	81a3      	strh	r3, [r4, #12]
    4400:	4240      	negs	r0, r0
    4402:	bd70      	pop	{r4, r5, r6, pc}
    4404:	4b28      	ldr	r3, [pc, #160]	; (44a8 <__swsetup_r+0xe4>)
    4406:	429c      	cmp	r4, r3
    4408:	d101      	bne.n	440e <__swsetup_r+0x4a>
    440a:	68ac      	ldr	r4, [r5, #8]
    440c:	e7eb      	b.n	43e6 <__swsetup_r+0x22>
    440e:	4b27      	ldr	r3, [pc, #156]	; (44ac <__swsetup_r+0xe8>)
    4410:	429c      	cmp	r4, r3
    4412:	d1e8      	bne.n	43e6 <__swsetup_r+0x22>
    4414:	68ec      	ldr	r4, [r5, #12]
    4416:	e7e6      	b.n	43e6 <__swsetup_r+0x22>
    4418:	075b      	lsls	r3, r3, #29
    441a:	d513      	bpl.n	4444 <__swsetup_r+0x80>
    441c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    441e:	2900      	cmp	r1, #0
    4420:	d008      	beq.n	4434 <__swsetup_r+0x70>
    4422:	0023      	movs	r3, r4
    4424:	3344      	adds	r3, #68	; 0x44
    4426:	4299      	cmp	r1, r3
    4428:	d002      	beq.n	4430 <__swsetup_r+0x6c>
    442a:	0030      	movs	r0, r6
    442c:	f7ff fb8e 	bl	3b4c <_free_r>
    4430:	2300      	movs	r3, #0
    4432:	6363      	str	r3, [r4, #52]	; 0x34
    4434:	2224      	movs	r2, #36	; 0x24
    4436:	89a3      	ldrh	r3, [r4, #12]
    4438:	4393      	bics	r3, r2
    443a:	81a3      	strh	r3, [r4, #12]
    443c:	2300      	movs	r3, #0
    443e:	6063      	str	r3, [r4, #4]
    4440:	6923      	ldr	r3, [r4, #16]
    4442:	6023      	str	r3, [r4, #0]
    4444:	2308      	movs	r3, #8
    4446:	89a2      	ldrh	r2, [r4, #12]
    4448:	4313      	orrs	r3, r2
    444a:	81a3      	strh	r3, [r4, #12]
    444c:	6923      	ldr	r3, [r4, #16]
    444e:	2b00      	cmp	r3, #0
    4450:	d10b      	bne.n	446a <__swsetup_r+0xa6>
    4452:	21a0      	movs	r1, #160	; 0xa0
    4454:	2280      	movs	r2, #128	; 0x80
    4456:	89a3      	ldrh	r3, [r4, #12]
    4458:	0089      	lsls	r1, r1, #2
    445a:	0092      	lsls	r2, r2, #2
    445c:	400b      	ands	r3, r1
    445e:	4293      	cmp	r3, r2
    4460:	d003      	beq.n	446a <__swsetup_r+0xa6>
    4462:	0021      	movs	r1, r4
    4464:	0030      	movs	r0, r6
    4466:	f7ff fb23 	bl	3ab0 <__smakebuf_r>
    446a:	2301      	movs	r3, #1
    446c:	89a2      	ldrh	r2, [r4, #12]
    446e:	4013      	ands	r3, r2
    4470:	d011      	beq.n	4496 <__swsetup_r+0xd2>
    4472:	2300      	movs	r3, #0
    4474:	60a3      	str	r3, [r4, #8]
    4476:	6963      	ldr	r3, [r4, #20]
    4478:	425b      	negs	r3, r3
    447a:	61a3      	str	r3, [r4, #24]
    447c:	2000      	movs	r0, #0
    447e:	6923      	ldr	r3, [r4, #16]
    4480:	4283      	cmp	r3, r0
    4482:	d1be      	bne.n	4402 <__swsetup_r+0x3e>
    4484:	230c      	movs	r3, #12
    4486:	5ee2      	ldrsh	r2, [r4, r3]
    4488:	0613      	lsls	r3, r2, #24
    448a:	d5ba      	bpl.n	4402 <__swsetup_r+0x3e>
    448c:	2340      	movs	r3, #64	; 0x40
    448e:	4313      	orrs	r3, r2
    4490:	81a3      	strh	r3, [r4, #12]
    4492:	3801      	subs	r0, #1
    4494:	e7b5      	b.n	4402 <__swsetup_r+0x3e>
    4496:	0792      	lsls	r2, r2, #30
    4498:	d400      	bmi.n	449c <__swsetup_r+0xd8>
    449a:	6963      	ldr	r3, [r4, #20]
    449c:	60a3      	str	r3, [r4, #8]
    449e:	e7ed      	b.n	447c <__swsetup_r+0xb8>
    44a0:	20000034 	.word	0x20000034
    44a4:	0000490c 	.word	0x0000490c
    44a8:	0000492c 	.word	0x0000492c
    44ac:	000048ec 	.word	0x000048ec

000044b0 <_close_r>:
    44b0:	2300      	movs	r3, #0
    44b2:	b570      	push	{r4, r5, r6, lr}
    44b4:	4c06      	ldr	r4, [pc, #24]	; (44d0 <_close_r+0x20>)
    44b6:	0005      	movs	r5, r0
    44b8:	0008      	movs	r0, r1
    44ba:	6023      	str	r3, [r4, #0]
    44bc:	f7fe fbb8 	bl	2c30 <_close>
    44c0:	1c43      	adds	r3, r0, #1
    44c2:	d103      	bne.n	44cc <_close_r+0x1c>
    44c4:	6823      	ldr	r3, [r4, #0]
    44c6:	2b00      	cmp	r3, #0
    44c8:	d000      	beq.n	44cc <_close_r+0x1c>
    44ca:	602b      	str	r3, [r5, #0]
    44cc:	bd70      	pop	{r4, r5, r6, pc}
    44ce:	46c0      	nop			; (mov r8, r8)
    44d0:	200011bc 	.word	0x200011bc

000044d4 <_fstat_r>:
    44d4:	2300      	movs	r3, #0
    44d6:	b570      	push	{r4, r5, r6, lr}
    44d8:	4c06      	ldr	r4, [pc, #24]	; (44f4 <_fstat_r+0x20>)
    44da:	0005      	movs	r5, r0
    44dc:	0008      	movs	r0, r1
    44de:	0011      	movs	r1, r2
    44e0:	6023      	str	r3, [r4, #0]
    44e2:	f7fe fba8 	bl	2c36 <_fstat>
    44e6:	1c43      	adds	r3, r0, #1
    44e8:	d103      	bne.n	44f2 <_fstat_r+0x1e>
    44ea:	6823      	ldr	r3, [r4, #0]
    44ec:	2b00      	cmp	r3, #0
    44ee:	d000      	beq.n	44f2 <_fstat_r+0x1e>
    44f0:	602b      	str	r3, [r5, #0]
    44f2:	bd70      	pop	{r4, r5, r6, pc}
    44f4:	200011bc 	.word	0x200011bc

000044f8 <_isatty_r>:
    44f8:	2300      	movs	r3, #0
    44fa:	b570      	push	{r4, r5, r6, lr}
    44fc:	4c06      	ldr	r4, [pc, #24]	; (4518 <_isatty_r+0x20>)
    44fe:	0005      	movs	r5, r0
    4500:	0008      	movs	r0, r1
    4502:	6023      	str	r3, [r4, #0]
    4504:	f7fe fb9c 	bl	2c40 <_isatty>
    4508:	1c43      	adds	r3, r0, #1
    450a:	d103      	bne.n	4514 <_isatty_r+0x1c>
    450c:	6823      	ldr	r3, [r4, #0]
    450e:	2b00      	cmp	r3, #0
    4510:	d000      	beq.n	4514 <_isatty_r+0x1c>
    4512:	602b      	str	r3, [r5, #0]
    4514:	bd70      	pop	{r4, r5, r6, pc}
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	200011bc 	.word	0x200011bc

0000451c <_lseek_r>:
    451c:	b570      	push	{r4, r5, r6, lr}
    451e:	0005      	movs	r5, r0
    4520:	0008      	movs	r0, r1
    4522:	0011      	movs	r1, r2
    4524:	2200      	movs	r2, #0
    4526:	4c06      	ldr	r4, [pc, #24]	; (4540 <_lseek_r+0x24>)
    4528:	6022      	str	r2, [r4, #0]
    452a:	001a      	movs	r2, r3
    452c:	f7fe fb8a 	bl	2c44 <_lseek>
    4530:	1c43      	adds	r3, r0, #1
    4532:	d103      	bne.n	453c <_lseek_r+0x20>
    4534:	6823      	ldr	r3, [r4, #0]
    4536:	2b00      	cmp	r3, #0
    4538:	d000      	beq.n	453c <_lseek_r+0x20>
    453a:	602b      	str	r3, [r5, #0]
    453c:	bd70      	pop	{r4, r5, r6, pc}
    453e:	46c0      	nop			; (mov r8, r8)
    4540:	200011bc 	.word	0x200011bc

00004544 <memchr>:
    4544:	b2c9      	uxtb	r1, r1
    4546:	1882      	adds	r2, r0, r2
    4548:	4290      	cmp	r0, r2
    454a:	d101      	bne.n	4550 <memchr+0xc>
    454c:	2000      	movs	r0, #0
    454e:	4770      	bx	lr
    4550:	7803      	ldrb	r3, [r0, #0]
    4552:	428b      	cmp	r3, r1
    4554:	d0fb      	beq.n	454e <memchr+0xa>
    4556:	3001      	adds	r0, #1
    4558:	e7f6      	b.n	4548 <memchr+0x4>

0000455a <__malloc_lock>:
    455a:	4770      	bx	lr

0000455c <__malloc_unlock>:
    455c:	4770      	bx	lr
	...

00004560 <_read_r>:
    4560:	b570      	push	{r4, r5, r6, lr}
    4562:	0005      	movs	r5, r0
    4564:	0008      	movs	r0, r1
    4566:	0011      	movs	r1, r2
    4568:	2200      	movs	r2, #0
    456a:	4c06      	ldr	r4, [pc, #24]	; (4584 <_read_r+0x24>)
    456c:	6022      	str	r2, [r4, #0]
    456e:	001a      	movs	r2, r3
    4570:	f7fe fb02 	bl	2b78 <_read>
    4574:	1c43      	adds	r3, r0, #1
    4576:	d103      	bne.n	4580 <_read_r+0x20>
    4578:	6823      	ldr	r3, [r4, #0]
    457a:	2b00      	cmp	r3, #0
    457c:	d000      	beq.n	4580 <_read_r+0x20>
    457e:	602b      	str	r3, [r5, #0]
    4580:	bd70      	pop	{r4, r5, r6, pc}
    4582:	46c0      	nop			; (mov r8, r8)
    4584:	200011bc 	.word	0x200011bc

00004588 <mmc_trans_multipliers>:
    4588:	00000000 0000000a 0000000c 0000000d     ................
    4598:	0000000f 00000014 0000001a 0000001e     ................
    45a8:	00000023 00000028 0000002d 00000034     #...(...-...4...
    45b8:	00000037 0000003c 00000046 00000050     7...<...F...P...

000045c8 <sd_mmc_trans_units>:
    45c8:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000045e4 <sd_trans_multipliers>:
    45e4:	00000000 0000000a 0000000c 0000000d     ................
    45f4:	0000000f 00000014 00000019 0000001e     ................
    4604:	00000023 00000028 0000002d 00000032     #...(...-...2...
    4614:	00000037 0000003c 00000046 00000050     7...<...F...P...
    4624:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    4634:	42001800 42001c00 00002312 0000230e     ...B...B.#...#..
    4644:	0000230e 00002370 00002370 00002326     .#..p#..p#..&#..
    4654:	00002318 0000232c 0000235e 00002530     .#..,#..^#..0%..
    4664:	00002510 00002510 0000259c 00002522     .%...%...%.."%..
    4674:	0000253e 00002514 0000254c 0000258c     >%...%..L%...%..
    4684:	00002e36 00002e16 00002e26 00002e36     6.......&...6...
    4694:	00002e36 00002e2e 00002e36 00002e36     6.......6...6...
    46a4:	00002e36 00002dcc 00002e1e 2d0d0a0c     6....-.........-
    46b4:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    46c4:	6c706d61 2d2d2065 00000d0a 303a3531     ample --....15:0
    46d4:	30333a33 00000000 206c754a 32203920     3:30....Jul  9 2
    46e4:	00383130 43202d2d 69706d6f 3a64656c     018.-- Compiled:
    46f4:	20732520 2d207325 000d0a2d 61656c50      %s %s --...Plea
    4704:	70206573 2067756c 53206e61 4d4d2f44     se plug an SD/MM
    4714:	61632043 69206472 6c73206e 2520746f     C card in slot %
    4724:	0d0a2e64 00000000 64726143 736e6920     d.......Card ins
    4734:	6c6c6174 49414620 0a44454c 0000000d     tall FAILED.....
    4744:	61656c50 75206573 756c706e 6e612067     Please unplug an
    4754:	65722064 756c702d 68742067 61632065     d re-plug the ca
    4764:	0a2e6472 0000000d 64726143 666e6920     rd......Card inf
    4774:	616d726f 6e6f6974 000d0a3a 20202020     ormation:...    
    4784:	00000000 43484453 00000000 00004453     ....SDHC....SD..
    4794:	20434d4d 68676948 6e654420 79746973     MMC High Density
    47a4:	00000000 00434d4d 43204453 4f424d4f     ....MMC.SD COMBO
    47b4:	00000000 6e6b6e55 0d0a776f 00000000     ....Unknow......
    47c4:	20200d0a 64252020 0a424d20 0000000d     ..    %d MB.....
    47d4:	6d654d5b 2079726f 74207369 73206f6f     [Memory is too s
    47e4:	6c6c616d 0d0a5d2e 00000000 64726143     mall.]......Card
    47f4:	572f5220 73657420 0d0a3a74 00000000      R/W test:......
    4804:	20202020 64616552 202e2e2e 00000000         Read... ....
    4814:	4941465b 0d0a5d4c 00000000 20642520     [FAIL]...... %d 
    4824:	7370424b 00000020 5d4b4f5b 00000d0a     KBps ...[OK]....
    4834:	64726143 20736920 74697277 72702065     Card is write pr
    4844:	6365746f 20646574 4952575b 54204554     otected [WRITE T
    4854:	20545345 50494b53 5d444550 00000d0a     EST SKIPPED]....
    4864:	20202020 74697257 61702065 72657474         Write patter
    4874:	2e2e2e6e 00000020 20202020 64616552     n... ...    Read
    4884:	646e6120 65686320 70206b63 65747461      and check patte
    4894:	2e2e6e72 0000202e 64616552 41465b20     rn... ..Read [FA
    48a4:	0a5d4c49 0000000d 63656843 465b206b     IL].....Check [F
    48b4:	5d4c4941 00000d0a 74736554 6e696620     AIL]....Test fin
    48c4:	65687369 70202c64 7361656c 6e752065     ished, please un
    48d4:	67756c70 20646567 20656874 64726163     plugged the card
    48e4:	000d0a2e                                ....

000048e8 <_global_impure_ptr>:
    48e8:	20000038                                8.. 

000048ec <__sf_fake_stderr>:
	...

0000490c <__sf_fake_stdin>:
	...

0000492c <__sf_fake_stdout>:
	...
    494c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    495c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    496c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    497c:	00006665                                ef..

00004980 <_init>:
    4980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4982:	46c0      	nop			; (mov r8, r8)
    4984:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4986:	bc08      	pop	{r3}
    4988:	469e      	mov	lr, r3
    498a:	4770      	bx	lr

0000498c <__init_array_start>:
    498c:	000000dd 	.word	0x000000dd

00004990 <_fini>:
    4990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4992:	46c0      	nop			; (mov r8, r8)
    4994:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4996:	bc08      	pop	{r3}
    4998:	469e      	mov	lr, r3
    499a:	4770      	bx	lr

0000499c <__fini_array_start>:
    499c:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <ss_pins>:
20000030:	0105                                             .

20000031 <g_interrupt_enabled>:
20000031:	0001 3800                                        ...

20000034 <_impure_ptr>:
20000034:	0038 2000                                   8.. 

20000038 <impure_data>:
20000038:	0000 0000 490c 0000 492c 0000 48ec 0000     .....I..,I...H..
	...
