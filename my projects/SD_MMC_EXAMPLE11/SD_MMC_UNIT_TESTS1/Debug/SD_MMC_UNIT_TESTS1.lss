
SD_MMC_UNIT_TESTS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000765c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000765c  0000765c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000098  20000000  00007664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000984  20000098  000076fc  00020098  2**2
                  ALLOC
  4 .stack        00002004  20000a1c  00008080  00020098  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003a497  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004d53  00000000  00000000  0005a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000c5c0  00000000  00000000  0005f303  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000690  00000000  00000000  0006b8c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000016d8  00000000  00000000  0006bf53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001daf0  00000000  00000000  0006d62b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010f69  00000000  00000000  0008b11b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00093b9c  00000000  00000000  0009c084  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001a24  00000000  00000000  0012fc20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 2a 00 20 c9 4d 00 00 c5 4d 00 00 c5 4d 00 00      *. .M...M...M..
	...
      2c:	c5 4d 00 00 00 00 00 00 00 00 00 00 c5 4d 00 00     .M...........M..
      3c:	c5 4d 00 00 c5 4d 00 00 c5 4d 00 00 c5 4d 00 00     .M...M...M...M..
      4c:	c5 4d 00 00 c5 4d 00 00 c5 4d 00 00 c5 4d 00 00     .M...M...M...M..
      5c:	c5 4d 00 00 c5 4d 00 00 01 1f 00 00 11 1f 00 00     .M...M..........
      6c:	21 1f 00 00 31 1f 00 00 41 1f 00 00 51 1f 00 00     !...1...A...Q...
      7c:	c5 4d 00 00 c5 4d 00 00 c5 4d 00 00 c5 4d 00 00     .M...M...M...M..
      8c:	c5 4d 00 00 c5 4d 00 00 c5 4d 00 00 c5 4d 00 00     .M...M...M...M..
      9c:	c5 4d 00 00 c5 4d 00 00 c5 4d 00 00 c5 4d 00 00     .M...M...M...M..
      ac:	c5 4d 00 00 00 00 00 00                             .M......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000098 	.word	0x20000098
      d4:	00000000 	.word	0x00000000
      d8:	00007664 	.word	0x00007664

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000009c 	.word	0x2000009c
     108:	00007664 	.word	0x00007664
     10c:	00007664 	.word	0x00007664
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <sd_mmc_configure_slot+0x20>)
     118:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     11a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     11c:	5ccb      	ldrb	r3, [r1, r3]
     11e:	1e5a      	subs	r2, r3, #1
     120:	4193      	sbcs	r3, r2
     122:	b2db      	uxtb	r3, r3
     124:	7c4a      	ldrb	r2, [r1, #17]
     126:	6809      	ldr	r1, [r1, #0]
     128:	4803      	ldr	r0, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12a:	7800      	ldrb	r0, [r0, #0]
     12c:	4c03      	ldr	r4, [pc, #12]	; (13c <sd_mmc_configure_slot+0x28>)
     12e:	47a0      	blx	r4
}
     130:	bd10      	pop	{r4, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	200000b4 	.word	0x200000b4
     138:	200000bd 	.word	0x200000bd
     13c:	000010f9 	.word	0x000010f9

00000140 <sd_mmc_select_slot>:
{
     140:	b530      	push	{r4, r5, lr}
     142:	b083      	sub	sp, #12
		return SD_MMC_ERR_SLOT;
     144:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     146:	2800      	cmp	r0, #0
     148:	d002      	beq.n	150 <sd_mmc_select_slot+0x10>
}
     14a:	0018      	movs	r0, r3
     14c:	b003      	add	sp, #12
     14e:	bd30      	pop	{r4, r5, pc}
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
	return test_case_ptr;
     150:	4b61      	ldr	r3, [pc, #388]	; (2d8 <sd_mmc_select_slot+0x198>)
     152:	6818      	ldr	r0, [r3, #0]
	Assert(sd_mmc_nb_block_remaining == 0);
     154:	2800      	cmp	r0, #0
     156:	d026      	beq.n	1a6 <sd_mmc_select_slot+0x66>
     158:	4b60      	ldr	r3, [pc, #384]	; (2dc <sd_mmc_select_slot+0x19c>)
     15a:	881b      	ldrh	r3, [r3, #0]
     15c:	2b00      	cmp	r3, #0
     15e:	d100      	bne.n	162 <sd_mmc_select_slot+0x22>
     160:	e0a0      	b.n	2a4 <sd_mmc_select_slot+0x164>
     162:	4b5f      	ldr	r3, [pc, #380]	; (2e0 <sd_mmc_select_slot+0x1a0>)
     164:	9301      	str	r3, [sp, #4]
     166:	4b5f      	ldr	r3, [pc, #380]	; (2e4 <sd_mmc_select_slot+0x1a4>)
     168:	9300      	str	r3, [sp, #0]
     16a:	4b5f      	ldr	r3, [pc, #380]	; (2e8 <sd_mmc_select_slot+0x1a8>)
     16c:	4a5f      	ldr	r2, [pc, #380]	; (2ec <sd_mmc_select_slot+0x1ac>)
     16e:	2101      	movs	r1, #1
     170:	4c5f      	ldr	r4, [pc, #380]	; (2f0 <sd_mmc_select_slot+0x1b0>)
     172:	47a0      	blx	r4
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     174:	4b5f      	ldr	r3, [pc, #380]	; (2f4 <sd_mmc_select_slot+0x1b4>)
     176:	7a1c      	ldrb	r4, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     178:	09e3      	lsrs	r3, r4, #7
     17a:	d120      	bne.n	1be <sd_mmc_select_slot+0x7e>
	uint8_t group_index = (gpio_pin / 32);
     17c:	0963      	lsrs	r3, r4, #5
		return &(ports[port_index]->Group[group_index]);
     17e:	01db      	lsls	r3, r3, #7
     180:	4a5d      	ldr	r2, [pc, #372]	; (2f8 <sd_mmc_select_slot+0x1b8>)
     182:	4694      	mov	ip, r2
     184:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     186:	6a1a      	ldr	r2, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     188:	231f      	movs	r3, #31
     18a:	401c      	ands	r4, r3
     18c:	3b1e      	subs	r3, #30
     18e:	40a3      	lsls	r3, r4
     190:	421a      	tst	r2, r3
     192:	d028      	beq.n	1e6 <sd_mmc_select_slot+0xa6>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     194:	4b57      	ldr	r3, [pc, #348]	; (2f4 <sd_mmc_select_slot+0x1b4>)
     196:	7b9b      	ldrb	r3, [r3, #14]
     198:	2b01      	cmp	r3, #1
     19a:	d01c      	beq.n	1d6 <sd_mmc_select_slot+0x96>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     19c:	2204      	movs	r2, #4
     19e:	4b55      	ldr	r3, [pc, #340]	; (2f4 <sd_mmc_select_slot+0x1b4>)
     1a0:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     1a2:	2302      	movs	r3, #2
     1a4:	e7d1      	b.n	14a <sd_mmc_select_slot+0xa>
	Assert(sd_mmc_nb_block_remaining == 0);
     1a6:	4b4d      	ldr	r3, [pc, #308]	; (2dc <sd_mmc_select_slot+0x19c>)
     1a8:	881b      	ldrh	r3, [r3, #0]
     1aa:	2b00      	cmp	r3, #0
     1ac:	d100      	bne.n	1b0 <sd_mmc_select_slot+0x70>
     1ae:	e08b      	b.n	2c8 <sd_mmc_select_slot+0x188>
     1b0:	4b4d      	ldr	r3, [pc, #308]	; (2e8 <sd_mmc_select_slot+0x1a8>)
     1b2:	4a4e      	ldr	r2, [pc, #312]	; (2ec <sd_mmc_select_slot+0x1ac>)
     1b4:	494a      	ldr	r1, [pc, #296]	; (2e0 <sd_mmc_select_slot+0x1a0>)
     1b6:	4851      	ldr	r0, [pc, #324]	; (2fc <sd_mmc_select_slot+0x1bc>)
     1b8:	4c51      	ldr	r4, [pc, #324]	; (300 <sd_mmc_select_slot+0x1c0>)
     1ba:	47a0      	blx	r4
     1bc:	e7fe      	b.n	1bc <sd_mmc_select_slot+0x7c>
     1be:	4b46      	ldr	r3, [pc, #280]	; (2d8 <sd_mmc_select_slot+0x198>)
     1c0:	6818      	ldr	r0, [r3, #0]
	} else {
		Assert(false);
     1c2:	2800      	cmp	r0, #0
     1c4:	d172      	bne.n	2ac <sd_mmc_select_slot+0x16c>
     1c6:	2362      	movs	r3, #98	; 0x62
     1c8:	33ff      	adds	r3, #255	; 0xff
     1ca:	4a4e      	ldr	r2, [pc, #312]	; (304 <sd_mmc_select_slot+0x1c4>)
     1cc:	494e      	ldr	r1, [pc, #312]	; (308 <sd_mmc_select_slot+0x1c8>)
     1ce:	484b      	ldr	r0, [pc, #300]	; (2fc <sd_mmc_select_slot+0x1bc>)
     1d0:	4c4b      	ldr	r4, [pc, #300]	; (300 <sd_mmc_select_slot+0x1c0>)
     1d2:	47a0      	blx	r4
     1d4:	e7fe      	b.n	1d4 <sd_mmc_select_slot+0x94>
	if (sd_mmc_sam_systick_used) {
     1d6:	4b4d      	ldr	r3, [pc, #308]	; (30c <sd_mmc_select_slot+0x1cc>)
     1d8:	781b      	ldrb	r3, [r3, #0]
     1da:	2b00      	cmp	r3, #0
     1dc:	d0de      	beq.n	19c <sd_mmc_select_slot+0x5c>
		SysTick->CTRL = 0;
     1de:	2200      	movs	r2, #0
     1e0:	4b4b      	ldr	r3, [pc, #300]	; (310 <sd_mmc_select_slot+0x1d0>)
     1e2:	601a      	str	r2, [r3, #0]
     1e4:	e7da      	b.n	19c <sd_mmc_select_slot+0x5c>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     1e6:	4b43      	ldr	r3, [pc, #268]	; (2f4 <sd_mmc_select_slot+0x1b4>)
     1e8:	7b9a      	ldrb	r2, [r3, #14]
     1ea:	2a04      	cmp	r2, #4
     1ec:	d018      	beq.n	220 <sd_mmc_select_slot+0xe0>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     1ee:	2a01      	cmp	r2, #1
     1f0:	d146      	bne.n	280 <sd_mmc_select_slot+0x140>
	if (!sd_mmc_sam_systick_used) {
     1f2:	4b46      	ldr	r3, [pc, #280]	; (30c <sd_mmc_select_slot+0x1cc>)
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d007      	beq.n	20a <sd_mmc_select_slot+0xca>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     1fa:	4b45      	ldr	r3, [pc, #276]	; (310 <sd_mmc_select_slot+0x1d0>)
     1fc:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     1fe:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     200:	03d2      	lsls	r2, r2, #15
     202:	d5a2      	bpl.n	14a <sd_mmc_select_slot+0xa>
		SysTick->CTRL = 0;
     204:	2200      	movs	r2, #0
     206:	4b42      	ldr	r3, [pc, #264]	; (310 <sd_mmc_select_slot+0x1d0>)
     208:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     20a:	4b3a      	ldr	r3, [pc, #232]	; (2f4 <sd_mmc_select_slot+0x1b4>)
     20c:	2202      	movs	r2, #2
     20e:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     210:	4a40      	ldr	r2, [pc, #256]	; (314 <sd_mmc_select_slot+0x1d4>)
     212:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     214:	2201      	movs	r2, #1
     216:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     218:	2100      	movs	r1, #0
     21a:	3221      	adds	r2, #33	; 0x21
     21c:	5499      	strb	r1, [r3, r2]
     21e:	e033      	b.n	288 <sd_mmc_select_slot+0x148>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     220:	3a03      	subs	r2, #3
     222:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     224:	4b3a      	ldr	r3, [pc, #232]	; (310 <sd_mmc_select_slot+0x1d0>)
     226:	681b      	ldr	r3, [r3, #0]
     228:	2b00      	cmp	r3, #0
     22a:	d111      	bne.n	250 <sd_mmc_select_slot+0x110>
		sd_mmc_sam_systick_used = true;
     22c:	2401      	movs	r4, #1
     22e:	4b37      	ldr	r3, [pc, #220]	; (30c <sd_mmc_select_slot+0x1cc>)
     230:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     232:	2000      	movs	r0, #0
     234:	4b38      	ldr	r3, [pc, #224]	; (318 <sd_mmc_select_slot+0x1d8>)
     236:	4798      	blx	r3
     238:	21fa      	movs	r1, #250	; 0xfa
     23a:	0149      	lsls	r1, r1, #5
     23c:	4b37      	ldr	r3, [pc, #220]	; (31c <sd_mmc_select_slot+0x1dc>)
     23e:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     240:	23fa      	movs	r3, #250	; 0xfa
     242:	009b      	lsls	r3, r3, #2
     244:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     246:	4b32      	ldr	r3, [pc, #200]	; (310 <sd_mmc_select_slot+0x1d0>)
     248:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     24a:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     24c:	2302      	movs	r3, #2
     24e:	e77c      	b.n	14a <sd_mmc_select_slot+0xa>
		sd_mmc_sam_systick_used = false;
     250:	2200      	movs	r2, #0
     252:	4b2e      	ldr	r3, [pc, #184]	; (30c <sd_mmc_select_slot+0x1cc>)
     254:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     256:	2000      	movs	r0, #0
     258:	4b2f      	ldr	r3, [pc, #188]	; (318 <sd_mmc_select_slot+0x1d8>)
     25a:	4798      	blx	r3
     25c:	22fa      	movs	r2, #250	; 0xfa
     25e:	0092      	lsls	r2, r2, #2
     260:	2300      	movs	r3, #0
     262:	2100      	movs	r1, #0
     264:	4c2e      	ldr	r4, [pc, #184]	; (320 <sd_mmc_select_slot+0x1e0>)
     266:	47a0      	blx	r4
     268:	4a2e      	ldr	r2, [pc, #184]	; (324 <sd_mmc_select_slot+0x1e4>)
     26a:	2300      	movs	r3, #0
     26c:	1880      	adds	r0, r0, r2
     26e:	4159      	adcs	r1, r3
     270:	4a2d      	ldr	r2, [pc, #180]	; (328 <sd_mmc_select_slot+0x1e8>)
     272:	2300      	movs	r3, #0
     274:	4c2d      	ldr	r4, [pc, #180]	; (32c <sd_mmc_select_slot+0x1ec>)
     276:	47a0      	blx	r4
     278:	4b2d      	ldr	r3, [pc, #180]	; (330 <sd_mmc_select_slot+0x1f0>)
     27a:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     27c:	2302      	movs	r3, #2
     27e:	e764      	b.n	14a <sd_mmc_select_slot+0xa>
		return SD_MMC_ERR_UNUSABLE;
     280:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     282:	2a03      	cmp	r2, #3
     284:	d100      	bne.n	288 <sd_mmc_select_slot+0x148>
     286:	e760      	b.n	14a <sd_mmc_select_slot+0xa>
	sd_mmc_slot_sel = slot;
     288:	2200      	movs	r2, #0
     28a:	4b2a      	ldr	r3, [pc, #168]	; (334 <sd_mmc_select_slot+0x1f4>)
     28c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     28e:	4c19      	ldr	r4, [pc, #100]	; (2f4 <sd_mmc_select_slot+0x1b4>)
     290:	4b29      	ldr	r3, [pc, #164]	; (338 <sd_mmc_select_slot+0x1f8>)
     292:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     294:	4b29      	ldr	r3, [pc, #164]	; (33c <sd_mmc_select_slot+0x1fc>)
     296:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     298:	7ba3      	ldrb	r3, [r4, #14]
     29a:	3b02      	subs	r3, #2
     29c:	425a      	negs	r2, r3
     29e:	4153      	adcs	r3, r2
     2a0:	b2db      	uxtb	r3, r3
     2a2:	e752      	b.n	14a <sd_mmc_select_slot+0xa>
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     2a4:	4b13      	ldr	r3, [pc, #76]	; (2f4 <sd_mmc_select_slot+0x1b4>)
     2a6:	7a1c      	ldrb	r4, [r3, #8]
	if (port_index < PORT_INST_NUM) {
     2a8:	09e3      	lsrs	r3, r4, #7
     2aa:	d00b      	beq.n	2c4 <sd_mmc_select_slot+0x184>
		Assert(false);
     2ac:	4b16      	ldr	r3, [pc, #88]	; (308 <sd_mmc_select_slot+0x1c8>)
     2ae:	9301      	str	r3, [sp, #4]
     2b0:	4b0c      	ldr	r3, [pc, #48]	; (2e4 <sd_mmc_select_slot+0x1a4>)
     2b2:	9300      	str	r3, [sp, #0]
     2b4:	2362      	movs	r3, #98	; 0x62
     2b6:	33ff      	adds	r3, #255	; 0xff
     2b8:	4a12      	ldr	r2, [pc, #72]	; (304 <sd_mmc_select_slot+0x1c4>)
     2ba:	2101      	movs	r1, #1
     2bc:	4d0c      	ldr	r5, [pc, #48]	; (2f0 <sd_mmc_select_slot+0x1b0>)
     2be:	47a8      	blx	r5
		return NULL;
     2c0:	2300      	movs	r3, #0
     2c2:	e760      	b.n	186 <sd_mmc_select_slot+0x46>
	uint8_t group_index = (gpio_pin / 32);
     2c4:	0963      	lsrs	r3, r4, #5
     2c6:	e75a      	b.n	17e <sd_mmc_select_slot+0x3e>
     2c8:	4b0a      	ldr	r3, [pc, #40]	; (2f4 <sd_mmc_select_slot+0x1b4>)
     2ca:	7a1c      	ldrb	r4, [r3, #8]
     2cc:	0963      	lsrs	r3, r4, #5
	if (port_index < PORT_INST_NUM) {
     2ce:	09e2      	lsrs	r2, r4, #7
     2d0:	d000      	beq.n	2d4 <sd_mmc_select_slot+0x194>
     2d2:	e778      	b.n	1c6 <sd_mmc_select_slot+0x86>
     2d4:	e753      	b.n	17e <sd_mmc_select_slot+0x3e>
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	2000011c 	.word	0x2000011c
     2dc:	200000b8 	.word	0x200000b8
     2e0:	00006c20 	.word	0x00006c20
     2e4:	00006c40 	.word	0x00006c40
     2e8:	0000052f 	.word	0x0000052f
     2ec:	00006be8 	.word	0x00006be8
     2f0:	000017e1 	.word	0x000017e1
     2f4:	2000000c 	.word	0x2000000c
     2f8:	41004400 	.word	0x41004400
     2fc:	00006c58 	.word	0x00006c58
     300:	00006055 	.word	0x00006055
     304:	00006c7c 	.word	0x00006c7c
     308:	00006cac 	.word	0x00006cac
     30c:	200000bc 	.word	0x200000bc
     310:	e000e010 	.word	0xe000e010
     314:	00061a80 	.word	0x00061a80
     318:	000049bd 	.word	0x000049bd
     31c:	000056cd 	.word	0x000056cd
     320:	00005825 	.word	0x00005825
     324:	00001b57 	.word	0x00001b57
     328:	00001b58 	.word	0x00001b58
     32c:	000057e5 	.word	0x000057e5
     330:	20000001 	.word	0x20000001
     334:	200000bd 	.word	0x200000bd
     338:	200000b4 	.word	0x200000b4
     33c:	00000115 	.word	0x00000115

00000340 <sd_mmc_cmd13>:
{
     340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     342:	4d09      	ldr	r5, [pc, #36]	; (368 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     344:	4f09      	ldr	r7, [pc, #36]	; (36c <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     346:	4e0a      	ldr	r6, [pc, #40]	; (370 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     348:	2100      	movs	r1, #0
     34a:	480a      	ldr	r0, [pc, #40]	; (374 <sd_mmc_cmd13+0x34>)
     34c:	47b8      	blx	r7
     34e:	1e04      	subs	r4, r0, #0
     350:	d007      	beq.n	362 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     352:	47b0      	blx	r6
     354:	23ff      	movs	r3, #255	; 0xff
     356:	4203      	tst	r3, r0
     358:	d003      	beq.n	362 <sd_mmc_cmd13+0x22>
     35a:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     35c:	2d00      	cmp	r5, #0
     35e:	d1f3      	bne.n	348 <sd_mmc_cmd13+0x8>
			return false;
     360:	2400      	movs	r4, #0
}
     362:	0020      	movs	r0, r4
     364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     366:	46c0      	nop			; (mov r8, r8)
     368:	00030d41 	.word	0x00030d41
     36c:	00001385 	.word	0x00001385
     370:	0000139d 	.word	0x0000139d
     374:	00001b0d 	.word	0x00001b0d

00000378 <sd_mmc_cmd9_spi>:
{
     378:	b510      	push	{r4, lr}
     37a:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     37c:	4b0c      	ldr	r3, [pc, #48]	; (3b0 <sd_mmc_cmd9_spi+0x38>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	8999      	ldrh	r1, [r3, #12]
     382:	0409      	lsls	r1, r1, #16
     384:	2301      	movs	r3, #1
     386:	9300      	str	r3, [sp, #0]
     388:	2210      	movs	r2, #16
     38a:	480a      	ldr	r0, [pc, #40]	; (3b4 <sd_mmc_cmd9_spi+0x3c>)
     38c:	4c0a      	ldr	r4, [pc, #40]	; (3b8 <sd_mmc_cmd9_spi+0x40>)
     38e:	47a0      	blx	r4
     390:	2800      	cmp	r0, #0
     392:	d101      	bne.n	398 <sd_mmc_cmd9_spi+0x20>
}
     394:	b002      	add	sp, #8
     396:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     398:	4b05      	ldr	r3, [pc, #20]	; (3b0 <sd_mmc_cmd9_spi+0x38>)
     39a:	6818      	ldr	r0, [r3, #0]
     39c:	3012      	adds	r0, #18
     39e:	2101      	movs	r1, #1
     3a0:	4b06      	ldr	r3, [pc, #24]	; (3bc <sd_mmc_cmd9_spi+0x44>)
     3a2:	4798      	blx	r3
     3a4:	2800      	cmp	r0, #0
     3a6:	d0f5      	beq.n	394 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     3a8:	4b05      	ldr	r3, [pc, #20]	; (3c0 <sd_mmc_cmd9_spi+0x48>)
     3aa:	4798      	blx	r3
     3ac:	e7f2      	b.n	394 <sd_mmc_cmd9_spi+0x1c>
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	200000b4 	.word	0x200000b4
     3b4:	00081109 	.word	0x00081109
     3b8:	000011ad 	.word	0x000011ad
     3bc:	0000149d 	.word	0x0000149d
     3c0:	000015a9 	.word	0x000015a9

000003c4 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     3c4:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     3c6:	4b04      	ldr	r3, [pc, #16]	; (3d8 <sd_mmc_deselect_slot+0x14>)
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	2b00      	cmp	r3, #0
     3cc:	d000      	beq.n	3d0 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     3ce:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     3d0:	2000      	movs	r0, #0
     3d2:	4b02      	ldr	r3, [pc, #8]	; (3dc <sd_mmc_deselect_slot+0x18>)
     3d4:	4798      	blx	r3
}
     3d6:	e7fa      	b.n	3ce <sd_mmc_deselect_slot+0xa>
     3d8:	200000bd 	.word	0x200000bd
     3dc:	0000114d 	.word	0x0000114d

000003e0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     3e0:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     3e2:	2204      	movs	r2, #4
     3e4:	4b03      	ldr	r3, [pc, #12]	; (3f4 <sd_mmc_init+0x14>)
     3e6:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     3e8:	32fb      	adds	r2, #251	; 0xfb
     3ea:	4b03      	ldr	r3, [pc, #12]	; (3f8 <sd_mmc_init+0x18>)
     3ec:	701a      	strb	r2, [r3, #0]
	driver_init();
     3ee:	4b03      	ldr	r3, [pc, #12]	; (3fc <sd_mmc_init+0x1c>)
     3f0:	4798      	blx	r3
}
     3f2:	bd10      	pop	{r4, pc}
     3f4:	2000000c 	.word	0x2000000c
     3f8:	200000bd 	.word	0x200000bd
     3fc:	00000f09 	.word	0x00000f09

00000400 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     400:	b5f0      	push	{r4, r5, r6, r7, lr}
     402:	46c6      	mov	lr, r8
     404:	b500      	push	{lr}
     406:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     408:	4bcb      	ldr	r3, [pc, #812]	; (738 <sd_mmc_check+0x338>)
     40a:	4798      	blx	r3
     40c:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     40e:	2801      	cmp	r0, #1
     410:	d006      	beq.n	420 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     412:	4bca      	ldr	r3, [pc, #808]	; (73c <sd_mmc_check+0x33c>)
     414:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     416:	0020      	movs	r0, r4
     418:	b008      	add	sp, #32
     41a:	bc04      	pop	{r2}
     41c:	4690      	mov	r8, r2
     41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     420:	4bc7      	ldr	r3, [pc, #796]	; (740 <sd_mmc_check+0x340>)
     422:	681b      	ldr	r3, [r3, #0]
     424:	2201      	movs	r2, #1
     426:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     428:	2200      	movs	r2, #0
     42a:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     42c:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     42e:	4bc5      	ldr	r3, [pc, #788]	; (744 <sd_mmc_check+0x344>)
     430:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     432:	2100      	movs	r1, #0
     434:	2088      	movs	r0, #136	; 0x88
     436:	0140      	lsls	r0, r0, #5
     438:	4bc3      	ldr	r3, [pc, #780]	; (748 <sd_mmc_check+0x348>)
     43a:	4798      	blx	r3
     43c:	2800      	cmp	r0, #0
     43e:	d107      	bne.n	450 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     440:	4bbf      	ldr	r3, [pc, #764]	; (740 <sd_mmc_check+0x340>)
     442:	681b      	ldr	r3, [r3, #0]
     444:	2203      	movs	r2, #3
     446:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     448:	4bbc      	ldr	r3, [pc, #752]	; (73c <sd_mmc_check+0x33c>)
     44a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     44c:	2403      	movs	r4, #3
     44e:	e7e2      	b.n	416 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     450:	21d5      	movs	r1, #213	; 0xd5
     452:	0049      	lsls	r1, r1, #1
     454:	48bd      	ldr	r0, [pc, #756]	; (74c <sd_mmc_check+0x34c>)
     456:	4bbc      	ldr	r3, [pc, #752]	; (748 <sd_mmc_check+0x348>)
     458:	4798      	blx	r3
	*v2 = 0;
     45a:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     45c:	2800      	cmp	r0, #0
     45e:	d125      	bne.n	4ac <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     460:	4bb7      	ldr	r3, [pc, #732]	; (740 <sd_mmc_check+0x340>)
     462:	681b      	ldr	r3, [r3, #0]
     464:	7bdb      	ldrb	r3, [r3, #15]
     466:	07db      	lsls	r3, r3, #31
     468:	d500      	bpl.n	46c <sd_mmc_check+0x6c>
     46a:	e1eb      	b.n	844 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     46c:	4bb4      	ldr	r3, [pc, #720]	; (740 <sd_mmc_check+0x340>)
     46e:	681b      	ldr	r3, [r3, #0]
     470:	7bda      	ldrb	r2, [r3, #15]
     472:	2309      	movs	r3, #9
     474:	4013      	ands	r3, r2
     476:	2b01      	cmp	r3, #1
     478:	d10f      	bne.n	49a <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     47a:	2180      	movs	r1, #128	; 0x80
     47c:	0089      	lsls	r1, r1, #2
     47e:	48b4      	ldr	r0, [pc, #720]	; (750 <sd_mmc_check+0x350>)
     480:	4bb1      	ldr	r3, [pc, #708]	; (748 <sd_mmc_check+0x348>)
     482:	4798      	blx	r3
     484:	2800      	cmp	r0, #0
     486:	d0db      	beq.n	440 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     488:	4bad      	ldr	r3, [pc, #692]	; (740 <sd_mmc_check+0x340>)
     48a:	681b      	ldr	r3, [r3, #0]
     48c:	7bdb      	ldrb	r3, [r3, #15]
     48e:	07db      	lsls	r3, r3, #31
     490:	d503      	bpl.n	49a <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     492:	4bb0      	ldr	r3, [pc, #704]	; (754 <sd_mmc_check+0x354>)
     494:	4798      	blx	r3
     496:	2800      	cmp	r0, #0
     498:	d0d2      	beq.n	440 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     49a:	4baf      	ldr	r3, [pc, #700]	; (758 <sd_mmc_check+0x358>)
     49c:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     49e:	4ba8      	ldr	r3, [pc, #672]	; (740 <sd_mmc_check+0x340>)
     4a0:	681b      	ldr	r3, [r3, #0]
     4a2:	2200      	movs	r2, #0
     4a4:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     4a6:	4ba5      	ldr	r3, [pc, #660]	; (73c <sd_mmc_check+0x33c>)
     4a8:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     4aa:	e7b4      	b.n	416 <sd_mmc_check+0x16>
	resp = driver_get_response();
     4ac:	4bab      	ldr	r3, [pc, #684]	; (75c <sd_mmc_check+0x35c>)
     4ae:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     4b0:	1c43      	adds	r3, r0, #1
     4b2:	d100      	bne.n	4b6 <sd_mmc_check+0xb6>
     4b4:	e1c4      	b.n	840 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     4b6:	0500      	lsls	r0, r0, #20
     4b8:	0d00      	lsrs	r0, r0, #20
     4ba:	23d5      	movs	r3, #213	; 0xd5
     4bc:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     4be:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     4c0:	4298      	cmp	r0, r3
     4c2:	d1bd      	bne.n	440 <sd_mmc_check+0x40>
     4c4:	e7cc      	b.n	460 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     4c6:	2100      	movs	r1, #0
     4c8:	48a5      	ldr	r0, [pc, #660]	; (760 <sd_mmc_check+0x360>)
     4ca:	4b9f      	ldr	r3, [pc, #636]	; (748 <sd_mmc_check+0x348>)
     4cc:	4798      	blx	r3
     4ce:	2800      	cmp	r0, #0
     4d0:	d119      	bne.n	506 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     4d2:	4b9b      	ldr	r3, [pc, #620]	; (740 <sd_mmc_check+0x340>)
     4d4:	681b      	ldr	r3, [r3, #0]
     4d6:	2202      	movs	r2, #2
     4d8:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     4da:	2100      	movs	r1, #0
     4dc:	2088      	movs	r0, #136	; 0x88
     4de:	0140      	lsls	r0, r0, #5
     4e0:	4b99      	ldr	r3, [pc, #612]	; (748 <sd_mmc_check+0x348>)
     4e2:	4798      	blx	r3
     4e4:	2800      	cmp	r0, #0
     4e6:	d0ab      	beq.n	440 <sd_mmc_check+0x40>
     4e8:	4d9e      	ldr	r5, [pc, #632]	; (764 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     4ea:	4f97      	ldr	r7, [pc, #604]	; (748 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     4ec:	4e9b      	ldr	r6, [pc, #620]	; (75c <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     4ee:	2100      	movs	r1, #0
     4f0:	489d      	ldr	r0, [pc, #628]	; (768 <sd_mmc_check+0x368>)
     4f2:	47b8      	blx	r7
     4f4:	2800      	cmp	r0, #0
     4f6:	d0a3      	beq.n	440 <sd_mmc_check+0x40>
		resp = driver_get_response();
     4f8:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     4fa:	07c3      	lsls	r3, r0, #31
     4fc:	d57d      	bpl.n	5fa <sd_mmc_check+0x1fa>
     4fe:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     500:	2d00      	cmp	r5, #0
     502:	d1f4      	bne.n	4ee <sd_mmc_check+0xee>
     504:	e79c      	b.n	440 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     506:	4b95      	ldr	r3, [pc, #596]	; (75c <sd_mmc_check+0x35c>)
     508:	4798      	blx	r3
     50a:	0043      	lsls	r3, r0, #1
     50c:	d505      	bpl.n	51a <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     50e:	4b8c      	ldr	r3, [pc, #560]	; (740 <sd_mmc_check+0x340>)
     510:	681a      	ldr	r2, [r3, #0]
     512:	7bd3      	ldrb	r3, [r2, #15]
     514:	2108      	movs	r1, #8
     516:	430b      	orrs	r3, r1
     518:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     51a:	2100      	movs	r1, #0
     51c:	4893      	ldr	r0, [pc, #588]	; (76c <sd_mmc_check+0x36c>)
     51e:	4b8a      	ldr	r3, [pc, #552]	; (748 <sd_mmc_check+0x348>)
     520:	4798      	blx	r3
     522:	2800      	cmp	r0, #0
     524:	d08c      	beq.n	440 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     526:	4b86      	ldr	r3, [pc, #536]	; (740 <sd_mmc_check+0x340>)
     528:	681b      	ldr	r3, [r3, #0]
     52a:	7bdb      	ldrb	r3, [r3, #15]
     52c:	07da      	lsls	r2, r3, #31
     52e:	d400      	bmi.n	532 <sd_mmc_check+0x132>
     530:	e1a4      	b.n	87c <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     532:	4b8f      	ldr	r3, [pc, #572]	; (770 <sd_mmc_check+0x370>)
     534:	4798      	blx	r3
     536:	2800      	cmp	r0, #0
     538:	d082      	beq.n	440 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     53a:	4b81      	ldr	r3, [pc, #516]	; (740 <sd_mmc_check+0x340>)
     53c:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     53e:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     540:	2107      	movs	r1, #7
     542:	4019      	ands	r1, r3
     544:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     546:	488b      	ldr	r0, [pc, #556]	; (774 <sd_mmc_check+0x374>)
     548:	5808      	ldr	r0, [r1, r0]
     54a:	21fa      	movs	r1, #250	; 0xfa
     54c:	0089      	lsls	r1, r1, #2
     54e:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     550:	065b      	lsls	r3, r3, #25
     552:	0f1b      	lsrs	r3, r3, #28
     554:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     556:	4888      	ldr	r0, [pc, #544]	; (778 <sd_mmc_check+0x378>)
     558:	581b      	ldr	r3, [r3, r0]
     55a:	434b      	muls	r3, r1
     55c:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     55e:	7c93      	ldrb	r3, [r2, #18]
     560:	099b      	lsrs	r3, r3, #6
     562:	d000      	beq.n	566 <sd_mmc_check+0x166>
     564:	e13c      	b.n	7e0 <sd_mmc_check+0x3e0>
     566:	7e91      	ldrb	r1, [r2, #26]
     568:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     56a:	7e53      	ldrb	r3, [r2, #25]
     56c:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     56e:	7e10      	ldrb	r0, [r2, #24]
     570:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     572:	4303      	orrs	r3, r0
     574:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     576:	7f10      	ldrb	r0, [r2, #28]
     578:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     57a:	7ed1      	ldrb	r1, [r2, #27]
     57c:	0049      	lsls	r1, r1, #1
     57e:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     580:	051b      	lsls	r3, r3, #20
     582:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     584:	3301      	adds	r3, #1
     586:	2107      	movs	r1, #7
     588:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     58a:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     58c:	408b      	lsls	r3, r1
     58e:	7dd0      	ldrb	r0, [r2, #23]
     590:	210f      	movs	r1, #15
     592:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     594:	408b      	lsls	r3, r1
				/ 1024;
     596:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     598:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     59a:	8991      	ldrh	r1, [r2, #12]
     59c:	0409      	lsls	r1, r1, #16
     59e:	4877      	ldr	r0, [pc, #476]	; (77c <sd_mmc_check+0x37c>)
     5a0:	4b69      	ldr	r3, [pc, #420]	; (748 <sd_mmc_check+0x348>)
     5a2:	4798      	blx	r3
     5a4:	2800      	cmp	r0, #0
     5a6:	d100      	bne.n	5aa <sd_mmc_check+0x1aa>
     5a8:	e74a      	b.n	440 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     5aa:	2301      	movs	r3, #1
     5ac:	9300      	str	r3, [sp, #0]
     5ae:	2208      	movs	r2, #8
     5b0:	2100      	movs	r1, #0
     5b2:	4873      	ldr	r0, [pc, #460]	; (780 <sd_mmc_check+0x380>)
     5b4:	4d73      	ldr	r5, [pc, #460]	; (784 <sd_mmc_check+0x384>)
     5b6:	47a8      	blx	r5
     5b8:	2800      	cmp	r0, #0
     5ba:	d100      	bne.n	5be <sd_mmc_check+0x1be>
     5bc:	e740      	b.n	440 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     5be:	2101      	movs	r1, #1
     5c0:	a806      	add	r0, sp, #24
     5c2:	4b71      	ldr	r3, [pc, #452]	; (788 <sd_mmc_check+0x388>)
     5c4:	4798      	blx	r3
     5c6:	2800      	cmp	r0, #0
     5c8:	d100      	bne.n	5cc <sd_mmc_check+0x1cc>
     5ca:	e739      	b.n	440 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     5cc:	4b6f      	ldr	r3, [pc, #444]	; (78c <sd_mmc_check+0x38c>)
     5ce:	4798      	blx	r3
     5d0:	2800      	cmp	r0, #0
     5d2:	d100      	bne.n	5d6 <sd_mmc_check+0x1d6>
     5d4:	e734      	b.n	440 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     5d6:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     5d8:	781b      	ldrb	r3, [r3, #0]
     5da:	220f      	movs	r2, #15
     5dc:	4013      	ands	r3, r2
     5de:	2b01      	cmp	r3, #1
     5e0:	d100      	bne.n	5e4 <sd_mmc_check+0x1e4>
     5e2:	e119      	b.n	818 <sd_mmc_check+0x418>
     5e4:	2b00      	cmp	r3, #0
     5e6:	d100      	bne.n	5ea <sd_mmc_check+0x1ea>
     5e8:	e109      	b.n	7fe <sd_mmc_check+0x3fe>
     5ea:	2b02      	cmp	r3, #2
     5ec:	d100      	bne.n	5f0 <sd_mmc_check+0x1f0>
     5ee:	e118      	b.n	822 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     5f0:	4b53      	ldr	r3, [pc, #332]	; (740 <sd_mmc_check+0x340>)
     5f2:	681b      	ldr	r3, [r3, #0]
     5f4:	2210      	movs	r2, #16
     5f6:	741a      	strb	r2, [r3, #16]
     5f8:	e105      	b.n	806 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     5fa:	2100      	movs	r1, #0
     5fc:	4858      	ldr	r0, [pc, #352]	; (760 <sd_mmc_check+0x360>)
     5fe:	4b52      	ldr	r3, [pc, #328]	; (748 <sd_mmc_check+0x348>)
     600:	4798      	blx	r3
     602:	2800      	cmp	r0, #0
     604:	d100      	bne.n	608 <sd_mmc_check+0x208>
     606:	e71b      	b.n	440 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     608:	4b54      	ldr	r3, [pc, #336]	; (75c <sd_mmc_check+0x35c>)
     60a:	4798      	blx	r3
     60c:	23c0      	movs	r3, #192	; 0xc0
     60e:	05db      	lsls	r3, r3, #23
     610:	4018      	ands	r0, r3
     612:	2380      	movs	r3, #128	; 0x80
     614:	05db      	lsls	r3, r3, #23
     616:	4298      	cmp	r0, r3
     618:	d105      	bne.n	626 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     61a:	4b49      	ldr	r3, [pc, #292]	; (740 <sd_mmc_check+0x340>)
     61c:	681a      	ldr	r2, [r3, #0]
     61e:	7bd1      	ldrb	r1, [r2, #15]
     620:	2308      	movs	r3, #8
     622:	430b      	orrs	r3, r1
     624:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     626:	2100      	movs	r1, #0
     628:	4850      	ldr	r0, [pc, #320]	; (76c <sd_mmc_check+0x36c>)
     62a:	4b47      	ldr	r3, [pc, #284]	; (748 <sd_mmc_check+0x348>)
     62c:	4798      	blx	r3
     62e:	2800      	cmp	r0, #0
     630:	d100      	bne.n	634 <sd_mmc_check+0x234>
     632:	e705      	b.n	440 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     634:	4b4e      	ldr	r3, [pc, #312]	; (770 <sd_mmc_check+0x370>)
     636:	4798      	blx	r3
     638:	2800      	cmp	r0, #0
     63a:	d100      	bne.n	63e <sd_mmc_check+0x23e>
     63c:	e700      	b.n	440 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     63e:	4b40      	ldr	r3, [pc, #256]	; (740 <sd_mmc_check+0x340>)
     640:	681a      	ldr	r2, [r3, #0]
     642:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     644:	069b      	lsls	r3, r3, #26
     646:	0f1b      	lsrs	r3, r3, #28
     648:	2b02      	cmp	r3, #2
     64a:	d100      	bne.n	64e <sd_mmc_check+0x24e>
     64c:	e0a8      	b.n	7a0 <sd_mmc_check+0x3a0>
     64e:	d907      	bls.n	660 <sd_mmc_check+0x260>
     650:	2b03      	cmp	r3, #3
     652:	d100      	bne.n	656 <sd_mmc_check+0x256>
     654:	e0a7      	b.n	7a6 <sd_mmc_check+0x3a6>
     656:	2b04      	cmp	r3, #4
     658:	d104      	bne.n	664 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     65a:	2340      	movs	r3, #64	; 0x40
     65c:	7413      	strb	r3, [r2, #16]
     65e:	e003      	b.n	668 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     660:	2b01      	cmp	r3, #1
     662:	d066      	beq.n	732 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     664:	2312      	movs	r3, #18
     666:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     668:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     66a:	0659      	lsls	r1, r3, #25
     66c:	0f09      	lsrs	r1, r1, #28
     66e:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     670:	2007      	movs	r0, #7
     672:	4003      	ands	r3, r0
     674:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     676:	483f      	ldr	r0, [pc, #252]	; (774 <sd_mmc_check+0x374>)
     678:	5818      	ldr	r0, [r3, r0]
     67a:	23fa      	movs	r3, #250	; 0xfa
     67c:	009b      	lsls	r3, r3, #2
     67e:	4343      	muls	r3, r0
     680:	4843      	ldr	r0, [pc, #268]	; (790 <sd_mmc_check+0x390>)
     682:	5809      	ldr	r1, [r1, r0]
     684:	434b      	muls	r3, r1
     686:	6013      	str	r3, [r2, #0]
     688:	7e91      	ldrb	r1, [r2, #26]
     68a:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     68c:	7e53      	ldrb	r3, [r2, #25]
     68e:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     690:	7e10      	ldrb	r0, [r2, #24]
     692:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     694:	4303      	orrs	r3, r0
     696:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     698:	051b      	lsls	r3, r3, #20
     69a:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     69c:	493d      	ldr	r1, [pc, #244]	; (794 <sd_mmc_check+0x394>)
     69e:	428b      	cmp	r3, r1
     6a0:	d00f      	beq.n	6c2 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     6a2:	7f10      	ldrb	r0, [r2, #28]
     6a4:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     6a6:	7ed1      	ldrb	r1, [r2, #27]
     6a8:	0049      	lsls	r1, r1, #1
     6aa:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     6ac:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     6ae:	2007      	movs	r0, #7
     6b0:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     6b2:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     6b4:	408b      	lsls	r3, r1
     6b6:	7dd1      	ldrb	r1, [r2, #23]
     6b8:	3008      	adds	r0, #8
     6ba:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     6bc:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     6be:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     6c0:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     6c2:	7c13      	ldrb	r3, [r2, #16]
     6c4:	2b3f      	cmp	r3, #63	; 0x3f
     6c6:	d97b      	bls.n	7c0 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     6c8:	2100      	movs	r1, #0
     6ca:	9100      	str	r1, [sp, #0]
     6cc:	2301      	movs	r3, #1
     6ce:	2280      	movs	r2, #128	; 0x80
     6d0:	0092      	lsls	r2, r2, #2
     6d2:	4831      	ldr	r0, [pc, #196]	; (798 <sd_mmc_check+0x398>)
     6d4:	4d2b      	ldr	r5, [pc, #172]	; (784 <sd_mmc_check+0x384>)
     6d6:	47a8      	blx	r5
     6d8:	2800      	cmp	r0, #0
     6da:	d100      	bne.n	6de <sd_mmc_check+0x2de>
     6dc:	e6b0      	b.n	440 <sd_mmc_check+0x40>
     6de:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     6e0:	4e2e      	ldr	r6, [pc, #184]	; (79c <sd_mmc_check+0x39c>)
     6e2:	a805      	add	r0, sp, #20
     6e4:	47b0      	blx	r6
     6e6:	2800      	cmp	r0, #0
     6e8:	d100      	bne.n	6ec <sd_mmc_check+0x2ec>
     6ea:	e6a9      	b.n	440 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     6ec:	3501      	adds	r5, #1
     6ee:	b2ad      	uxth	r5, r5
     6f0:	2d32      	cmp	r5, #50	; 0x32
     6f2:	d1f6      	bne.n	6e2 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     6f4:	4b12      	ldr	r3, [pc, #72]	; (740 <sd_mmc_check+0x340>)
     6f6:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     6f8:	7e8a      	ldrb	r2, [r1, #26]
     6fa:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     6fc:	7e4b      	ldrb	r3, [r1, #25]
     6fe:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     700:	7e09      	ldrb	r1, [r1, #24]
     702:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     704:	430b      	orrs	r3, r1
     706:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     708:	051b      	lsls	r3, r3, #20
     70a:	0d1b      	lsrs	r3, r3, #20
     70c:	4a21      	ldr	r2, [pc, #132]	; (794 <sd_mmc_check+0x394>)
     70e:	4293      	cmp	r3, r2
     710:	d154      	bne.n	7bc <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     712:	4e22      	ldr	r6, [pc, #136]	; (79c <sd_mmc_check+0x39c>)
     714:	a806      	add	r0, sp, #24
     716:	47b0      	blx	r6
     718:	2800      	cmp	r0, #0
     71a:	d100      	bne.n	71e <sd_mmc_check+0x31e>
     71c:	e690      	b.n	440 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     71e:	3501      	adds	r5, #1
     720:	b2ad      	uxth	r5, r5
     722:	2d35      	cmp	r5, #53	; 0x35
     724:	d9f6      	bls.n	714 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     726:	4b06      	ldr	r3, [pc, #24]	; (740 <sd_mmc_check+0x340>)
     728:	681a      	ldr	r2, [r3, #0]
     72a:	9b06      	ldr	r3, [sp, #24]
     72c:	085b      	lsrs	r3, r3, #1
     72e:	6053      	str	r3, [r2, #4]
     730:	e044      	b.n	7bc <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     732:	2314      	movs	r3, #20
     734:	7413      	strb	r3, [r2, #16]
     736:	e797      	b.n	668 <sd_mmc_check+0x268>
     738:	00000141 	.word	0x00000141
     73c:	000003c5 	.word	0x000003c5
     740:	200000b4 	.word	0x200000b4
     744:	00001175 	.word	0x00001175
     748:	00001385 	.word	0x00001385
     74c:	00005508 	.word	0x00005508
     750:	00001110 	.word	0x00001110
     754:	00000341 	.word	0x00000341
     758:	00000115 	.word	0x00000115
     75c:	0000139d 	.word	0x0000139d
     760:	0000053a 	.word	0x0000053a
     764:	00001bef 	.word	0x00001bef
     768:	00001101 	.word	0x00001101
     76c:	0000113b 	.word	0x0000113b
     770:	00000379 	.word	0x00000379
     774:	00006cdc 	.word	0x00006cdc
     778:	00006cf8 	.word	0x00006cf8
     77c:	00001137 	.word	0x00001137
     780:	00081133 	.word	0x00081133
     784:	000011ad 	.word	0x000011ad
     788:	0000149d 	.word	0x0000149d
     78c:	000015a9 	.word	0x000015a9
     790:	00006ba8 	.word	0x00006ba8
     794:	00000fff 	.word	0x00000fff
     798:	00081108 	.word	0x00081108
     79c:	000013a9 	.word	0x000013a9
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     7a0:	2322      	movs	r3, #34	; 0x22
     7a2:	7413      	strb	r3, [r2, #16]
     7a4:	e760      	b.n	668 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     7a6:	2330      	movs	r3, #48	; 0x30
     7a8:	7413      	strb	r3, [r2, #16]
     7aa:	e75d      	b.n	668 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     7ac:	a806      	add	r0, sp, #24
     7ae:	4b36      	ldr	r3, [pc, #216]	; (888 <sd_mmc_check+0x488>)
     7b0:	4798      	blx	r3
     7b2:	2800      	cmp	r0, #0
     7b4:	d100      	bne.n	7b8 <sd_mmc_check+0x3b8>
     7b6:	e643      	b.n	440 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     7b8:	3501      	adds	r5, #1
     7ba:	b2ad      	uxth	r5, r5
     7bc:	2d7f      	cmp	r5, #127	; 0x7f
     7be:	d9f5      	bls.n	7ac <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     7c0:	2180      	movs	r1, #128	; 0x80
     7c2:	0089      	lsls	r1, r1, #2
     7c4:	4831      	ldr	r0, [pc, #196]	; (88c <sd_mmc_check+0x48c>)
     7c6:	4b32      	ldr	r3, [pc, #200]	; (890 <sd_mmc_check+0x490>)
     7c8:	4798      	blx	r3
     7ca:	2800      	cmp	r0, #0
     7cc:	d100      	bne.n	7d0 <sd_mmc_check+0x3d0>
     7ce:	e637      	b.n	440 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     7d0:	4b30      	ldr	r3, [pc, #192]	; (894 <sd_mmc_check+0x494>)
     7d2:	4798      	blx	r3
     7d4:	2800      	cmp	r0, #0
     7d6:	d100      	bne.n	7da <sd_mmc_check+0x3da>
     7d8:	e632      	b.n	440 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     7da:	4b2f      	ldr	r3, [pc, #188]	; (898 <sd_mmc_check+0x498>)
     7dc:	4798      	blx	r3
     7de:	e65e      	b.n	49e <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     7e0:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     7e2:	7e93      	ldrb	r3, [r2, #26]
     7e4:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     7e6:	7e51      	ldrb	r1, [r2, #25]
     7e8:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     7ea:	430b      	orrs	r3, r1
     7ec:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     7ee:	029b      	lsls	r3, r3, #10
				* 512;
     7f0:	085b      	lsrs	r3, r3, #1
     7f2:	2180      	movs	r1, #128	; 0x80
     7f4:	0089      	lsls	r1, r1, #2
     7f6:	468c      	mov	ip, r1
     7f8:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     7fa:	6053      	str	r3, [r2, #4]
     7fc:	e6cd      	b.n	59a <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     7fe:	4b27      	ldr	r3, [pc, #156]	; (89c <sd_mmc_check+0x49c>)
     800:	681b      	ldr	r3, [r3, #0]
     802:	2210      	movs	r2, #16
     804:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     806:	4b25      	ldr	r3, [pc, #148]	; (89c <sd_mmc_check+0x49c>)
     808:	681b      	ldr	r3, [r3, #0]
     80a:	7bdb      	ldrb	r3, [r3, #15]
     80c:	2209      	movs	r2, #9
     80e:	4013      	ands	r3, r2
     810:	2b01      	cmp	r3, #1
     812:	d000      	beq.n	816 <sd_mmc_check+0x416>
     814:	e638      	b.n	488 <sd_mmc_check+0x88>
     816:	e630      	b.n	47a <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     818:	4b20      	ldr	r3, [pc, #128]	; (89c <sd_mmc_check+0x49c>)
     81a:	681b      	ldr	r3, [r3, #0]
     81c:	221a      	movs	r2, #26
     81e:	741a      	strb	r2, [r3, #16]
     820:	e7f1      	b.n	806 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     822:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     824:	789b      	ldrb	r3, [r3, #2]
     826:	09db      	lsrs	r3, r3, #7
     828:	2b01      	cmp	r3, #1
     82a:	d104      	bne.n	836 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     82c:	4b1b      	ldr	r3, [pc, #108]	; (89c <sd_mmc_check+0x49c>)
     82e:	681b      	ldr	r3, [r3, #0]
     830:	2230      	movs	r2, #48	; 0x30
     832:	741a      	strb	r2, [r3, #16]
     834:	e7e7      	b.n	806 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     836:	4b19      	ldr	r3, [pc, #100]	; (89c <sd_mmc_check+0x49c>)
     838:	681b      	ldr	r3, [r3, #0]
     83a:	2220      	movs	r2, #32
     83c:	741a      	strb	r2, [r3, #16]
     83e:	e7e2      	b.n	806 <sd_mmc_check+0x406>
	*v2 = 0;
     840:	2600      	movs	r6, #0
     842:	e60d      	b.n	460 <sd_mmc_check+0x60>
     844:	1e73      	subs	r3, r6, #1
     846:	419e      	sbcs	r6, r3
     848:	07b3      	lsls	r3, r6, #30
     84a:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     84c:	4d14      	ldr	r5, [pc, #80]	; (8a0 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     84e:	4f10      	ldr	r7, [pc, #64]	; (890 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     850:	46b8      	mov	r8, r7
		resp = driver_get_response();
     852:	4e14      	ldr	r6, [pc, #80]	; (8a4 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     854:	2100      	movs	r1, #0
     856:	4814      	ldr	r0, [pc, #80]	; (8a8 <sd_mmc_check+0x4a8>)
     858:	47b8      	blx	r7
     85a:	2800      	cmp	r0, #0
     85c:	d100      	bne.n	860 <sd_mmc_check+0x460>
     85e:	e638      	b.n	4d2 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     860:	9903      	ldr	r1, [sp, #12]
     862:	4812      	ldr	r0, [pc, #72]	; (8ac <sd_mmc_check+0x4ac>)
     864:	47c0      	blx	r8
     866:	2800      	cmp	r0, #0
     868:	d100      	bne.n	86c <sd_mmc_check+0x46c>
     86a:	e632      	b.n	4d2 <sd_mmc_check+0xd2>
		resp = driver_get_response();
     86c:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     86e:	07c3      	lsls	r3, r0, #31
     870:	d400      	bmi.n	874 <sd_mmc_check+0x474>
     872:	e628      	b.n	4c6 <sd_mmc_check+0xc6>
     874:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     876:	2d00      	cmp	r5, #0
     878:	d1ec      	bne.n	854 <sd_mmc_check+0x454>
     87a:	e62a      	b.n	4d2 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     87c:	2209      	movs	r2, #9
     87e:	4013      	ands	r3, r2
     880:	2b01      	cmp	r3, #1
     882:	d000      	beq.n	886 <sd_mmc_check+0x486>
     884:	e609      	b.n	49a <sd_mmc_check+0x9a>
     886:	e5f8      	b.n	47a <sd_mmc_check+0x7a>
     888:	000013a9 	.word	0x000013a9
     88c:	00001110 	.word	0x00001110
     890:	00001385 	.word	0x00001385
     894:	00000341 	.word	0x00000341
     898:	00000115 	.word	0x00000115
     89c:	200000b4 	.word	0x200000b4
     8a0:	00001bef 	.word	0x00001bef
     8a4:	0000139d 	.word	0x0000139d
     8a8:	00001137 	.word	0x00001137
     8ac:	00001129 	.word	0x00001129

000008b0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     8b0:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     8b2:	4b06      	ldr	r3, [pc, #24]	; (8cc <sd_mmc_get_type+0x1c>)
     8b4:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     8b6:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     8b8:	2800      	cmp	r0, #0
     8ba:	d001      	beq.n	8c0 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     8bc:	0018      	movs	r0, r3
     8be:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     8c0:	4b03      	ldr	r3, [pc, #12]	; (8d0 <sd_mmc_get_type+0x20>)
     8c2:	4798      	blx	r3
	return sd_mmc_card->type;
     8c4:	4b03      	ldr	r3, [pc, #12]	; (8d4 <sd_mmc_get_type+0x24>)
     8c6:	681b      	ldr	r3, [r3, #0]
     8c8:	7bdb      	ldrb	r3, [r3, #15]
     8ca:	e7f7      	b.n	8bc <sd_mmc_get_type+0xc>
     8cc:	00000141 	.word	0x00000141
     8d0:	000003c5 	.word	0x000003c5
     8d4:	200000b4 	.word	0x200000b4

000008d8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     8d8:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     8da:	4b06      	ldr	r3, [pc, #24]	; (8f4 <sd_mmc_get_capacity+0x1c>)
     8dc:	4798      	blx	r3
		return 0;
     8de:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     8e0:	2800      	cmp	r0, #0
     8e2:	d001      	beq.n	8e8 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     8e4:	0018      	movs	r0, r3
     8e6:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     8e8:	4b03      	ldr	r3, [pc, #12]	; (8f8 <sd_mmc_get_capacity+0x20>)
     8ea:	4798      	blx	r3
	return sd_mmc_card->capacity;
     8ec:	4b03      	ldr	r3, [pc, #12]	; (8fc <sd_mmc_get_capacity+0x24>)
     8ee:	681b      	ldr	r3, [r3, #0]
     8f0:	685b      	ldr	r3, [r3, #4]
     8f2:	e7f7      	b.n	8e4 <sd_mmc_get_capacity+0xc>
     8f4:	00000141 	.word	0x00000141
     8f8:	000003c5 	.word	0x000003c5
     8fc:	200000b4 	.word	0x200000b4

00000900 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     900:	2000      	movs	r0, #0
     902:	4770      	bx	lr

00000904 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     904:	b570      	push	{r4, r5, r6, lr}
     906:	b082      	sub	sp, #8
     908:	000e      	movs	r6, r1
     90a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     90c:	4b16      	ldr	r3, [pc, #88]	; (968 <sd_mmc_init_read_blocks+0x64>)
     90e:	4798      	blx	r3
     910:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     912:	d002      	beq.n	91a <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     914:	0020      	movs	r0, r4
     916:	b002      	add	sp, #8
     918:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     91a:	4b14      	ldr	r3, [pc, #80]	; (96c <sd_mmc_init_read_blocks+0x68>)
     91c:	4798      	blx	r3
     91e:	2800      	cmp	r0, #0
     920:	d017      	beq.n	952 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     922:	2d01      	cmp	r5, #1
     924:	d919      	bls.n	95a <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     926:	4812      	ldr	r0, [pc, #72]	; (970 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     928:	4b12      	ldr	r3, [pc, #72]	; (974 <sd_mmc_init_read_blocks+0x70>)
     92a:	681b      	ldr	r3, [r3, #0]
     92c:	7bdb      	ldrb	r3, [r3, #15]
     92e:	071b      	lsls	r3, r3, #28
     930:	d400      	bmi.n	934 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     932:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     934:	2301      	movs	r3, #1
     936:	9300      	str	r3, [sp, #0]
     938:	002b      	movs	r3, r5
     93a:	2280      	movs	r2, #128	; 0x80
     93c:	0092      	lsls	r2, r2, #2
     93e:	0031      	movs	r1, r6
     940:	4e0d      	ldr	r6, [pc, #52]	; (978 <sd_mmc_init_read_blocks+0x74>)
     942:	47b0      	blx	r6
     944:	2800      	cmp	r0, #0
     946:	d00a      	beq.n	95e <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     948:	4b0c      	ldr	r3, [pc, #48]	; (97c <sd_mmc_init_read_blocks+0x78>)
     94a:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     94c:	4b0c      	ldr	r3, [pc, #48]	; (980 <sd_mmc_init_read_blocks+0x7c>)
     94e:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     950:	e7e0      	b.n	914 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     952:	4b0c      	ldr	r3, [pc, #48]	; (984 <sd_mmc_init_read_blocks+0x80>)
     954:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     956:	3405      	adds	r4, #5
     958:	e7dc      	b.n	914 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     95a:	480b      	ldr	r0, [pc, #44]	; (988 <sd_mmc_init_read_blocks+0x84>)
     95c:	e7e4      	b.n	928 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     95e:	4b09      	ldr	r3, [pc, #36]	; (984 <sd_mmc_init_read_blocks+0x80>)
     960:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     962:	2405      	movs	r4, #5
     964:	e7d6      	b.n	914 <sd_mmc_init_read_blocks+0x10>
     966:	46c0      	nop			; (mov r8, r8)
     968:	00000141 	.word	0x00000141
     96c:	00000341 	.word	0x00000341
     970:	00101112 	.word	0x00101112
     974:	200000b4 	.word	0x200000b4
     978:	000011ad 	.word	0x000011ad
     97c:	200000b8 	.word	0x200000b8
     980:	200000ba 	.word	0x200000ba
     984:	000003c5 	.word	0x000003c5
     988:	00081111 	.word	0x00081111

0000098c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     98c:	b570      	push	{r4, r5, r6, lr}
     98e:	b082      	sub	sp, #8
     990:	0005      	movs	r5, r0
     992:	000c      	movs	r4, r1
     994:	4b17      	ldr	r3, [pc, #92]	; (9f4 <sd_mmc_start_read_blocks+0x68>)
     996:	6818      	ldr	r0, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
     998:	2800      	cmp	r0, #0
     99a:	d019      	beq.n	9d0 <sd_mmc_start_read_blocks+0x44>
     99c:	4b16      	ldr	r3, [pc, #88]	; (9f8 <sd_mmc_start_read_blocks+0x6c>)
     99e:	881b      	ldrh	r3, [r3, #0]
     9a0:	428b      	cmp	r3, r1
     9a2:	d30b      	bcc.n	9bc <sd_mmc_start_read_blocks+0x30>

	if (!driver_start_read_blocks(dest, nb_block)) {
     9a4:	0021      	movs	r1, r4
     9a6:	0028      	movs	r0, r5
     9a8:	4b14      	ldr	r3, [pc, #80]	; (9fc <sd_mmc_start_read_blocks+0x70>)
     9aa:	4798      	blx	r3
     9ac:	2800      	cmp	r0, #0
     9ae:	d11a      	bne.n	9e6 <sd_mmc_start_read_blocks+0x5a>
		sd_mmc_nb_block_remaining = 0;
     9b0:	2200      	movs	r2, #0
     9b2:	4b11      	ldr	r3, [pc, #68]	; (9f8 <sd_mmc_start_read_blocks+0x6c>)
     9b4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     9b6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     9b8:	b002      	add	sp, #8
     9ba:	bd70      	pop	{r4, r5, r6, pc}
	Assert(sd_mmc_nb_block_remaining >= nb_block);
     9bc:	4b10      	ldr	r3, [pc, #64]	; (a00 <sd_mmc_start_read_blocks+0x74>)
     9be:	9301      	str	r3, [sp, #4]
     9c0:	4b10      	ldr	r3, [pc, #64]	; (a04 <sd_mmc_start_read_blocks+0x78>)
     9c2:	9300      	str	r3, [sp, #0]
     9c4:	4b10      	ldr	r3, [pc, #64]	; (a08 <sd_mmc_start_read_blocks+0x7c>)
     9c6:	4a11      	ldr	r2, [pc, #68]	; (a0c <sd_mmc_start_read_blocks+0x80>)
     9c8:	2101      	movs	r1, #1
     9ca:	4e11      	ldr	r6, [pc, #68]	; (a10 <sd_mmc_start_read_blocks+0x84>)
     9cc:	47b0      	blx	r6
     9ce:	e7e9      	b.n	9a4 <sd_mmc_start_read_blocks+0x18>
     9d0:	4b09      	ldr	r3, [pc, #36]	; (9f8 <sd_mmc_start_read_blocks+0x6c>)
     9d2:	881b      	ldrh	r3, [r3, #0]
     9d4:	428b      	cmp	r3, r1
     9d6:	d2e5      	bcs.n	9a4 <sd_mmc_start_read_blocks+0x18>
     9d8:	4b0b      	ldr	r3, [pc, #44]	; (a08 <sd_mmc_start_read_blocks+0x7c>)
     9da:	4a0c      	ldr	r2, [pc, #48]	; (a0c <sd_mmc_start_read_blocks+0x80>)
     9dc:	4908      	ldr	r1, [pc, #32]	; (a00 <sd_mmc_start_read_blocks+0x74>)
     9de:	480d      	ldr	r0, [pc, #52]	; (a14 <sd_mmc_start_read_blocks+0x88>)
     9e0:	4c0d      	ldr	r4, [pc, #52]	; (a18 <sd_mmc_start_read_blocks+0x8c>)
     9e2:	47a0      	blx	r4
     9e4:	e7fe      	b.n	9e4 <sd_mmc_start_read_blocks+0x58>
	sd_mmc_nb_block_remaining -= nb_block;
     9e6:	4a04      	ldr	r2, [pc, #16]	; (9f8 <sd_mmc_start_read_blocks+0x6c>)
     9e8:	8813      	ldrh	r3, [r2, #0]
     9ea:	1b1c      	subs	r4, r3, r4
     9ec:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     9ee:	2000      	movs	r0, #0
     9f0:	e7e2      	b.n	9b8 <sd_mmc_start_read_blocks+0x2c>
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	2000011c 	.word	0x2000011c
     9f8:	200000b8 	.word	0x200000b8
     9fc:	0000149d 	.word	0x0000149d
     a00:	00006cb4 	.word	0x00006cb4
     a04:	00006c40 	.word	0x00006c40
     a08:	0000076e 	.word	0x0000076e
     a0c:	00006be8 	.word	0x00006be8
     a10:	000017e1 	.word	0x000017e1
     a14:	00006c58 	.word	0x00006c58
     a18:	00006055 	.word	0x00006055

00000a1c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     a1c:	b510      	push	{r4, lr}
     a1e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     a20:	4b14      	ldr	r3, [pc, #80]	; (a74 <sd_mmc_wait_end_of_read_blocks+0x58>)
     a22:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     a24:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     a26:	2800      	cmp	r0, #0
     a28:	d101      	bne.n	a2e <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     a2a:	0018      	movs	r0, r3
     a2c:	bd10      	pop	{r4, pc}
	if (abort) {
     a2e:	2c00      	cmp	r4, #0
     a30:	d010      	beq.n	a54 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     a32:	2200      	movs	r2, #0
     a34:	4b10      	ldr	r3, [pc, #64]	; (a78 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     a36:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     a38:	4b10      	ldr	r3, [pc, #64]	; (a7c <sd_mmc_wait_end_of_read_blocks+0x60>)
     a3a:	881b      	ldrh	r3, [r3, #0]
     a3c:	2b01      	cmp	r3, #1
     a3e:	d00f      	beq.n	a60 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     a40:	2100      	movs	r1, #0
     a42:	480f      	ldr	r0, [pc, #60]	; (a80 <sd_mmc_wait_end_of_read_blocks+0x64>)
     a44:	4b0f      	ldr	r3, [pc, #60]	; (a84 <sd_mmc_wait_end_of_read_blocks+0x68>)
     a46:	4798      	blx	r3
     a48:	2800      	cmp	r0, #0
     a4a:	d00d      	beq.n	a68 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     a4c:	4b0e      	ldr	r3, [pc, #56]	; (a88 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     a4e:	4798      	blx	r3
	return SD_MMC_OK;
     a50:	2300      	movs	r3, #0
     a52:	e7ea      	b.n	a2a <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     a54:	4b08      	ldr	r3, [pc, #32]	; (a78 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     a56:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     a58:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     a5a:	2a00      	cmp	r2, #0
     a5c:	d0ec      	beq.n	a38 <sd_mmc_wait_end_of_read_blocks+0x1c>
     a5e:	e7e4      	b.n	a2a <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     a60:	4b09      	ldr	r3, [pc, #36]	; (a88 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     a62:	4798      	blx	r3
		return SD_MMC_OK;
     a64:	2300      	movs	r3, #0
     a66:	e7e0      	b.n	a2a <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     a68:	2100      	movs	r1, #0
     a6a:	4805      	ldr	r0, [pc, #20]	; (a80 <sd_mmc_wait_end_of_read_blocks+0x64>)
     a6c:	4b05      	ldr	r3, [pc, #20]	; (a84 <sd_mmc_wait_end_of_read_blocks+0x68>)
     a6e:	4798      	blx	r3
     a70:	e7ec      	b.n	a4c <sd_mmc_wait_end_of_read_blocks+0x30>
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	000015a9 	.word	0x000015a9
     a78:	200000b8 	.word	0x200000b8
     a7c:	200000ba 	.word	0x200000ba
     a80:	0000310c 	.word	0x0000310c
     a84:	00001385 	.word	0x00001385
     a88:	000003c5 	.word	0x000003c5

00000a8c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     a8c:	b570      	push	{r4, r5, r6, lr}
     a8e:	b082      	sub	sp, #8
     a90:	000e      	movs	r6, r1
     a92:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     a94:	4b11      	ldr	r3, [pc, #68]	; (adc <sd_mmc_init_write_blocks+0x50>)
     a96:	4798      	blx	r3
     a98:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     a9a:	d116      	bne.n	aca <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     a9c:	2d01      	cmp	r5, #1
     a9e:	d917      	bls.n	ad0 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     aa0:	480f      	ldr	r0, [pc, #60]	; (ae0 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     aa2:	4b10      	ldr	r3, [pc, #64]	; (ae4 <sd_mmc_init_write_blocks+0x58>)
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	7bdb      	ldrb	r3, [r3, #15]
     aa8:	071b      	lsls	r3, r3, #28
     aaa:	d400      	bmi.n	aae <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     aac:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     aae:	2301      	movs	r3, #1
     ab0:	9300      	str	r3, [sp, #0]
     ab2:	002b      	movs	r3, r5
     ab4:	2280      	movs	r2, #128	; 0x80
     ab6:	0092      	lsls	r2, r2, #2
     ab8:	0031      	movs	r1, r6
     aba:	4e0b      	ldr	r6, [pc, #44]	; (ae8 <sd_mmc_init_write_blocks+0x5c>)
     abc:	47b0      	blx	r6
     abe:	2800      	cmp	r0, #0
     ac0:	d008      	beq.n	ad4 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     ac2:	4b0a      	ldr	r3, [pc, #40]	; (aec <sd_mmc_init_write_blocks+0x60>)
     ac4:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     ac6:	4b0a      	ldr	r3, [pc, #40]	; (af0 <sd_mmc_init_write_blocks+0x64>)
     ac8:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     aca:	0020      	movs	r0, r4
     acc:	b002      	add	sp, #8
     ace:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     ad0:	4808      	ldr	r0, [pc, #32]	; (af4 <sd_mmc_init_write_blocks+0x68>)
     ad2:	e7e6      	b.n	aa2 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     ad4:	4b08      	ldr	r3, [pc, #32]	; (af8 <sd_mmc_init_write_blocks+0x6c>)
     ad6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     ad8:	2405      	movs	r4, #5
     ada:	e7f6      	b.n	aca <sd_mmc_init_write_blocks+0x3e>
     adc:	00000141 	.word	0x00000141
     ae0:	00109119 	.word	0x00109119
     ae4:	200000b4 	.word	0x200000b4
     ae8:	000011ad 	.word	0x000011ad
     aec:	200000b8 	.word	0x200000b8
     af0:	200000ba 	.word	0x200000ba
     af4:	00089118 	.word	0x00089118
     af8:	000003c5 	.word	0x000003c5

00000afc <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     afc:	b570      	push	{r4, r5, r6, lr}
     afe:	b082      	sub	sp, #8
     b00:	0005      	movs	r5, r0
     b02:	000c      	movs	r4, r1
     b04:	4b17      	ldr	r3, [pc, #92]	; (b64 <sd_mmc_start_write_blocks+0x68>)
     b06:	6818      	ldr	r0, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
     b08:	2800      	cmp	r0, #0
     b0a:	d019      	beq.n	b40 <sd_mmc_start_write_blocks+0x44>
     b0c:	4b16      	ldr	r3, [pc, #88]	; (b68 <sd_mmc_start_write_blocks+0x6c>)
     b0e:	881b      	ldrh	r3, [r3, #0]
     b10:	428b      	cmp	r3, r1
     b12:	d30b      	bcc.n	b2c <sd_mmc_start_write_blocks+0x30>
	if (!driver_start_write_blocks(src, nb_block)) {
     b14:	0021      	movs	r1, r4
     b16:	0028      	movs	r0, r5
     b18:	4b14      	ldr	r3, [pc, #80]	; (b6c <sd_mmc_start_write_blocks+0x70>)
     b1a:	4798      	blx	r3
     b1c:	2800      	cmp	r0, #0
     b1e:	d11a      	bne.n	b56 <sd_mmc_start_write_blocks+0x5a>
		sd_mmc_nb_block_remaining = 0;
     b20:	2200      	movs	r2, #0
     b22:	4b11      	ldr	r3, [pc, #68]	; (b68 <sd_mmc_start_write_blocks+0x6c>)
     b24:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     b26:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     b28:	b002      	add	sp, #8
     b2a:	bd70      	pop	{r4, r5, r6, pc}
	Assert(sd_mmc_nb_block_remaining >= nb_block);
     b2c:	4b10      	ldr	r3, [pc, #64]	; (b70 <sd_mmc_start_write_blocks+0x74>)
     b2e:	9301      	str	r3, [sp, #4]
     b30:	4b10      	ldr	r3, [pc, #64]	; (b74 <sd_mmc_start_write_blocks+0x78>)
     b32:	9300      	str	r3, [sp, #0]
     b34:	4b10      	ldr	r3, [pc, #64]	; (b78 <sd_mmc_start_write_blocks+0x7c>)
     b36:	4a11      	ldr	r2, [pc, #68]	; (b7c <sd_mmc_start_write_blocks+0x80>)
     b38:	2101      	movs	r1, #1
     b3a:	4e11      	ldr	r6, [pc, #68]	; (b80 <sd_mmc_start_write_blocks+0x84>)
     b3c:	47b0      	blx	r6
     b3e:	e7e9      	b.n	b14 <sd_mmc_start_write_blocks+0x18>
     b40:	4b09      	ldr	r3, [pc, #36]	; (b68 <sd_mmc_start_write_blocks+0x6c>)
     b42:	881b      	ldrh	r3, [r3, #0]
     b44:	428b      	cmp	r3, r1
     b46:	d2e5      	bcs.n	b14 <sd_mmc_start_write_blocks+0x18>
     b48:	4b0b      	ldr	r3, [pc, #44]	; (b78 <sd_mmc_start_write_blocks+0x7c>)
     b4a:	4a0c      	ldr	r2, [pc, #48]	; (b7c <sd_mmc_start_write_blocks+0x80>)
     b4c:	4908      	ldr	r1, [pc, #32]	; (b70 <sd_mmc_start_write_blocks+0x74>)
     b4e:	480d      	ldr	r0, [pc, #52]	; (b84 <sd_mmc_start_write_blocks+0x88>)
     b50:	4c0d      	ldr	r4, [pc, #52]	; (b88 <sd_mmc_start_write_blocks+0x8c>)
     b52:	47a0      	blx	r4
     b54:	e7fe      	b.n	b54 <sd_mmc_start_write_blocks+0x58>
	sd_mmc_nb_block_remaining -= nb_block;
     b56:	4a04      	ldr	r2, [pc, #16]	; (b68 <sd_mmc_start_write_blocks+0x6c>)
     b58:	8813      	ldrh	r3, [r2, #0]
     b5a:	1b1c      	subs	r4, r3, r4
     b5c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     b5e:	2000      	movs	r0, #0
     b60:	e7e2      	b.n	b28 <sd_mmc_start_write_blocks+0x2c>
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	2000011c 	.word	0x2000011c
     b68:	200000b8 	.word	0x200000b8
     b6c:	000015ad 	.word	0x000015ad
     b70:	00006cb4 	.word	0x00006cb4
     b74:	00006c40 	.word	0x00006c40
     b78:	000007c5 	.word	0x000007c5
     b7c:	00006be8 	.word	0x00006be8
     b80:	000017e1 	.word	0x000017e1
     b84:	00006c58 	.word	0x00006c58
     b88:	00006055 	.word	0x00006055

00000b8c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     b8c:	b510      	push	{r4, lr}
     b8e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     b90:	4b0e      	ldr	r3, [pc, #56]	; (bcc <sd_mmc_wait_end_of_write_blocks+0x40>)
     b92:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     b94:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     b96:	2800      	cmp	r0, #0
     b98:	d101      	bne.n	b9e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     b9a:	0018      	movs	r0, r3
     b9c:	bd10      	pop	{r4, pc}
	if (abort) {
     b9e:	2c00      	cmp	r4, #0
     ba0:	d00a      	beq.n	bb8 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     ba2:	2200      	movs	r2, #0
     ba4:	4b0a      	ldr	r3, [pc, #40]	; (bd0 <sd_mmc_wait_end_of_write_blocks+0x44>)
     ba6:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     ba8:	4b0a      	ldr	r3, [pc, #40]	; (bd4 <sd_mmc_wait_end_of_write_blocks+0x48>)
     baa:	881b      	ldrh	r3, [r3, #0]
     bac:	2b01      	cmp	r3, #1
     bae:	d009      	beq.n	bc4 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     bb0:	4b09      	ldr	r3, [pc, #36]	; (bd8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     bb2:	4798      	blx	r3
	return SD_MMC_OK;
     bb4:	2300      	movs	r3, #0
     bb6:	e7f0      	b.n	b9a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     bb8:	4b05      	ldr	r3, [pc, #20]	; (bd0 <sd_mmc_wait_end_of_write_blocks+0x44>)
     bba:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     bbc:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     bbe:	2a00      	cmp	r2, #0
     bc0:	d0f2      	beq.n	ba8 <sd_mmc_wait_end_of_write_blocks+0x1c>
     bc2:	e7ea      	b.n	b9a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     bc4:	4b04      	ldr	r3, [pc, #16]	; (bd8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     bc6:	4798      	blx	r3
		return SD_MMC_OK;
     bc8:	2300      	movs	r3, #0
     bca:	e7e6      	b.n	b9a <sd_mmc_wait_end_of_write_blocks+0xe>
     bcc:	000016bd 	.word	0x000016bd
     bd0:	200000b8 	.word	0x200000b8
     bd4:	200000ba 	.word	0x200000ba
     bd8:	000003c5 	.word	0x000003c5

00000bdc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     bdc:	b510      	push	{r4, lr}
     bde:	b084      	sub	sp, #16
	uint8_t dummy = 0xFF;
     be0:	22ff      	movs	r2, #255	; 0xff
     be2:	230f      	movs	r3, #15
     be4:	446b      	add	r3, sp
     be6:	701a      	strb	r2, [r3, #0]
     be8:	4b20      	ldr	r3, [pc, #128]	; (c6c <sd_mmc_spi_start_write_block+0x90>)
     bea:	681c      	ldr	r4, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
     bec:	2c00      	cmp	r4, #0
     bee:	d028      	beq.n	c42 <sd_mmc_spi_start_write_block+0x66>
     bf0:	4b1f      	ldr	r3, [pc, #124]	; (c70 <sd_mmc_spi_start_write_block+0x94>)
     bf2:	8819      	ldrh	r1, [r3, #0]
     bf4:	4b1f      	ldr	r3, [pc, #124]	; (c74 <sd_mmc_spi_start_write_block+0x98>)
     bf6:	6818      	ldr	r0, [r3, #0]
     bf8:	4b1f      	ldr	r3, [pc, #124]	; (c78 <sd_mmc_spi_start_write_block+0x9c>)
     bfa:	4798      	blx	r3
     bfc:	2900      	cmp	r1, #0
     bfe:	d115      	bne.n	c2c <sd_mmc_spi_start_write_block+0x50>
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
     c00:	2201      	movs	r2, #1
     c02:	210f      	movs	r1, #15
     c04:	4469      	add	r1, sp
     c06:	481d      	ldr	r0, [pc, #116]	; (c7c <sd_mmc_spi_start_write_block+0xa0>)
     c08:	4b1d      	ldr	r3, [pc, #116]	; (c80 <sd_mmc_spi_start_write_block+0xa4>)
     c0a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
     c0c:	4b1d      	ldr	r3, [pc, #116]	; (c84 <sd_mmc_spi_start_write_block+0xa8>)
     c0e:	881b      	ldrh	r3, [r3, #0]
     c10:	2b01      	cmp	r3, #1
     c12:	d025      	beq.n	c60 <sd_mmc_spi_start_write_block+0x84>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
     c14:	22fc      	movs	r2, #252	; 0xfc
     c16:	230e      	movs	r3, #14
     c18:	446b      	add	r3, sp
     c1a:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
     c1c:	2201      	movs	r2, #1
     c1e:	210e      	movs	r1, #14
     c20:	4469      	add	r1, sp
     c22:	4816      	ldr	r0, [pc, #88]	; (c7c <sd_mmc_spi_start_write_block+0xa0>)
     c24:	4b16      	ldr	r3, [pc, #88]	; (c80 <sd_mmc_spi_start_write_block+0xa4>)
     c26:	4798      	blx	r3
}
     c28:	b004      	add	sp, #16
     c2a:	bd10      	pop	{r4, pc}
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
     c2c:	4b16      	ldr	r3, [pc, #88]	; (c88 <sd_mmc_spi_start_write_block+0xac>)
     c2e:	9301      	str	r3, [sp, #4]
     c30:	4b16      	ldr	r3, [pc, #88]	; (c8c <sd_mmc_spi_start_write_block+0xb0>)
     c32:	9300      	str	r3, [sp, #0]
     c34:	23eb      	movs	r3, #235	; 0xeb
     c36:	4a16      	ldr	r2, [pc, #88]	; (c90 <sd_mmc_spi_start_write_block+0xb4>)
     c38:	2101      	movs	r1, #1
     c3a:	0020      	movs	r0, r4
     c3c:	4c15      	ldr	r4, [pc, #84]	; (c94 <sd_mmc_spi_start_write_block+0xb8>)
     c3e:	47a0      	blx	r4
     c40:	e7de      	b.n	c00 <sd_mmc_spi_start_write_block+0x24>
     c42:	4b0b      	ldr	r3, [pc, #44]	; (c70 <sd_mmc_spi_start_write_block+0x94>)
     c44:	8819      	ldrh	r1, [r3, #0]
     c46:	4b0b      	ldr	r3, [pc, #44]	; (c74 <sd_mmc_spi_start_write_block+0x98>)
     c48:	6818      	ldr	r0, [r3, #0]
     c4a:	4b0b      	ldr	r3, [pc, #44]	; (c78 <sd_mmc_spi_start_write_block+0x9c>)
     c4c:	4798      	blx	r3
     c4e:	2900      	cmp	r1, #0
     c50:	d0d6      	beq.n	c00 <sd_mmc_spi_start_write_block+0x24>
     c52:	23eb      	movs	r3, #235	; 0xeb
     c54:	4a0e      	ldr	r2, [pc, #56]	; (c90 <sd_mmc_spi_start_write_block+0xb4>)
     c56:	490c      	ldr	r1, [pc, #48]	; (c88 <sd_mmc_spi_start_write_block+0xac>)
     c58:	480f      	ldr	r0, [pc, #60]	; (c98 <sd_mmc_spi_start_write_block+0xbc>)
     c5a:	4c10      	ldr	r4, [pc, #64]	; (c9c <sd_mmc_spi_start_write_block+0xc0>)
     c5c:	47a0      	blx	r4
     c5e:	e7fe      	b.n	c5e <sd_mmc_spi_start_write_block+0x82>
		token = SPI_TOKEN_SINGLE_WRITE;
     c60:	22fe      	movs	r2, #254	; 0xfe
     c62:	330d      	adds	r3, #13
     c64:	446b      	add	r3, sp
     c66:	701a      	strb	r2, [r3, #0]
     c68:	e7d8      	b.n	c1c <sd_mmc_spi_start_write_block+0x40>
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	2000011c 	.word	0x2000011c
     c70:	200000fc 	.word	0x200000fc
     c74:	2000010c 	.word	0x2000010c
     c78:	000057d9 	.word	0x000057d9
     c7c:	200000c0 	.word	0x200000c0
     c80:	00003131 	.word	0x00003131
     c84:	20000104 	.word	0x20000104
     c88:	00006e38 	.word	0x00006e38
     c8c:	00006c40 	.word	0x00006c40
     c90:	00006dfc 	.word	0x00006dfc
     c94:	000017e1 	.word	0x000017e1
     c98:	00006c58 	.word	0x00006c58
     c9c:	00006055 	.word	0x00006055

00000ca0 <sd_mmc_spi_wait_busy>:
{
     ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca2:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     ca4:	466b      	mov	r3, sp
     ca6:	1ddc      	adds	r4, r3, #7
     ca8:	23ff      	movs	r3, #255	; 0xff
     caa:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     cac:	4e12      	ldr	r6, [pc, #72]	; (cf8 <sd_mmc_spi_wait_busy+0x58>)
     cae:	2201      	movs	r2, #1
     cb0:	0021      	movs	r1, r4
     cb2:	0030      	movs	r0, r6
     cb4:	4d11      	ldr	r5, [pc, #68]	; (cfc <sd_mmc_spi_wait_busy+0x5c>)
     cb6:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     cb8:	23ff      	movs	r3, #255	; 0xff
     cba:	2201      	movs	r2, #1
     cbc:	0021      	movs	r1, r4
     cbe:	0030      	movs	r0, r6
     cc0:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     cc2:	23ff      	movs	r3, #255	; 0xff
     cc4:	2201      	movs	r2, #1
     cc6:	0021      	movs	r1, r4
     cc8:	0030      	movs	r0, r6
     cca:	47a8      	blx	r5
     ccc:	4c0c      	ldr	r4, [pc, #48]	; (d00 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
     cce:	466b      	mov	r3, sp
     cd0:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     cd2:	4e09      	ldr	r6, [pc, #36]	; (cf8 <sd_mmc_spi_wait_busy+0x58>)
     cd4:	4f09      	ldr	r7, [pc, #36]	; (cfc <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     cd6:	782b      	ldrb	r3, [r5, #0]
     cd8:	2bff      	cmp	r3, #255	; 0xff
     cda:	d009      	beq.n	cf0 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     cdc:	23ff      	movs	r3, #255	; 0xff
     cde:	2201      	movs	r2, #1
     ce0:	0029      	movs	r1, r5
     ce2:	0030      	movs	r0, r6
     ce4:	47b8      	blx	r7
     ce6:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     ce8:	2c00      	cmp	r4, #0
     cea:	d1f4      	bne.n	cd6 <sd_mmc_spi_wait_busy+0x36>
			return false;
     cec:	2000      	movs	r0, #0
     cee:	e000      	b.n	cf2 <sd_mmc_spi_wait_busy+0x52>
	return true;
     cf0:	2001      	movs	r0, #1
}
     cf2:	b003      	add	sp, #12
     cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	200000c0 	.word	0x200000c0
     cfc:	00002775 	.word	0x00002775
     d00:	00030d40 	.word	0x00030d40

00000d04 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
     d04:	b570      	push	{r4, r5, r6, lr}
     d06:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
     d08:	4b14      	ldr	r3, [pc, #80]	; (d5c <sd_mmc_spi_stop_multiwrite_block+0x58>)
     d0a:	881c      	ldrh	r4, [r3, #0]
     d0c:	2c01      	cmp	r4, #1
     d0e:	d023      	beq.n	d58 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
     d10:	4b13      	ldr	r3, [pc, #76]	; (d60 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
     d12:	8819      	ldrh	r1, [r3, #0]
     d14:	4b13      	ldr	r3, [pc, #76]	; (d64 <sd_mmc_spi_stop_multiwrite_block+0x60>)
     d16:	6818      	ldr	r0, [r3, #0]
     d18:	4b13      	ldr	r3, [pc, #76]	; (d68 <sd_mmc_spi_stop_multiwrite_block+0x64>)
     d1a:	4798      	blx	r3
		return true; // It is not the End of multi write
     d1c:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
     d1e:	4284      	cmp	r4, r0
     d20:	d902      	bls.n	d28 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
     d22:	0018      	movs	r0, r3
     d24:	b002      	add	sp, #8
     d26:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
     d28:	466b      	mov	r3, sp
     d2a:	1ddc      	adds	r4, r3, #7
     d2c:	23ff      	movs	r3, #255	; 0xff
     d2e:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     d30:	4e0e      	ldr	r6, [pc, #56]	; (d6c <sd_mmc_spi_stop_multiwrite_block+0x68>)
     d32:	2201      	movs	r2, #1
     d34:	0021      	movs	r1, r4
     d36:	0030      	movs	r0, r6
     d38:	4d0d      	ldr	r5, [pc, #52]	; (d70 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
     d3a:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
     d3c:	23fd      	movs	r3, #253	; 0xfd
     d3e:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     d40:	2201      	movs	r2, #1
     d42:	0021      	movs	r1, r4
     d44:	0030      	movs	r0, r6
     d46:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
     d48:	4b0a      	ldr	r3, [pc, #40]	; (d74 <sd_mmc_spi_stop_multiwrite_block+0x70>)
     d4a:	4798      	blx	r3
     d4c:	1e03      	subs	r3, r0, #0
     d4e:	d1e8      	bne.n	d22 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
     d50:	2105      	movs	r1, #5
     d52:	4a09      	ldr	r2, [pc, #36]	; (d78 <sd_mmc_spi_stop_multiwrite_block+0x74>)
     d54:	7011      	strb	r1, [r2, #0]
		return false;
     d56:	e7e4      	b.n	d22 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
     d58:	2301      	movs	r3, #1
     d5a:	e7e2      	b.n	d22 <sd_mmc_spi_stop_multiwrite_block+0x1e>
     d5c:	20000104 	.word	0x20000104
     d60:	200000fc 	.word	0x200000fc
     d64:	2000010c 	.word	0x2000010c
     d68:	000056cd 	.word	0x000056cd
     d6c:	200000c0 	.word	0x200000c0
     d70:	00003131 	.word	0x00003131
     d74:	00000ca1 	.word	0x00000ca1
     d78:	20000103 	.word	0x20000103

00000d7c <sd_mmc_spi_start_read_block>:
{
     d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7e:	b085      	sub	sp, #20
     d80:	4b36      	ldr	r3, [pc, #216]	; (e5c <sd_mmc_spi_start_read_block+0xe0>)
     d82:	681c      	ldr	r4, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
     d84:	2c00      	cmp	r4, #0
     d86:	d02e      	beq.n	de6 <sd_mmc_spi_start_read_block+0x6a>
     d88:	4b35      	ldr	r3, [pc, #212]	; (e60 <sd_mmc_spi_start_read_block+0xe4>)
     d8a:	8819      	ldrh	r1, [r3, #0]
     d8c:	4b35      	ldr	r3, [pc, #212]	; (e64 <sd_mmc_spi_start_read_block+0xe8>)
     d8e:	6818      	ldr	r0, [r3, #0]
     d90:	4b35      	ldr	r3, [pc, #212]	; (e68 <sd_mmc_spi_start_read_block+0xec>)
     d92:	4798      	blx	r3
     d94:	2900      	cmp	r1, #0
     d96:	d11b      	bne.n	dd0 <sd_mmc_spi_start_read_block+0x54>
	token = 0;
     d98:	2200      	movs	r2, #0
     d9a:	230f      	movs	r3, #15
     d9c:	446b      	add	r3, sp
     d9e:	701a      	strb	r2, [r3, #0]
     da0:	4c32      	ldr	r4, [pc, #200]	; (e6c <sd_mmc_spi_start_read_block+0xf0>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
     da2:	001d      	movs	r5, r3
     da4:	4e32      	ldr	r6, [pc, #200]	; (e70 <sd_mmc_spi_start_read_block+0xf4>)
     da6:	4f33      	ldr	r7, [pc, #204]	; (e74 <sd_mmc_spi_start_read_block+0xf8>)
     da8:	23ff      	movs	r3, #255	; 0xff
     daa:	2201      	movs	r2, #1
     dac:	0029      	movs	r1, r5
     dae:	0030      	movs	r0, r6
     db0:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
     db2:	782b      	ldrb	r3, [r5, #0]
     db4:	220f      	movs	r2, #15
     db6:	0019      	movs	r1, r3
     db8:	4391      	bics	r1, r2
     dba:	d023      	beq.n	e04 <sd_mmc_spi_start_read_block+0x88>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
     dbc:	2bfe      	cmp	r3, #254	; 0xfe
     dbe:	d049      	beq.n	e54 <sd_mmc_spi_start_read_block+0xd8>
     dc0:	3c01      	subs	r4, #1
		if (i-- == 0) {
     dc2:	2c00      	cmp	r4, #0
     dc4:	d1f0      	bne.n	da8 <sd_mmc_spi_start_read_block+0x2c>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
     dc6:	2204      	movs	r2, #4
     dc8:	4b2b      	ldr	r3, [pc, #172]	; (e78 <sd_mmc_spi_start_read_block+0xfc>)
     dca:	701a      	strb	r2, [r3, #0]
			return false;
     dcc:	2000      	movs	r0, #0
     dce:	e042      	b.n	e56 <sd_mmc_spi_start_read_block+0xda>
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
     dd0:	4b2a      	ldr	r3, [pc, #168]	; (e7c <sd_mmc_spi_start_read_block+0x100>)
     dd2:	9301      	str	r3, [sp, #4]
     dd4:	4b2a      	ldr	r3, [pc, #168]	; (e80 <sd_mmc_spi_start_read_block+0x104>)
     dd6:	9300      	str	r3, [sp, #0]
     dd8:	23b2      	movs	r3, #178	; 0xb2
     dda:	4a2a      	ldr	r2, [pc, #168]	; (e84 <sd_mmc_spi_start_read_block+0x108>)
     ddc:	2101      	movs	r1, #1
     dde:	0020      	movs	r0, r4
     de0:	4c29      	ldr	r4, [pc, #164]	; (e88 <sd_mmc_spi_start_read_block+0x10c>)
     de2:	47a0      	blx	r4
     de4:	e7d8      	b.n	d98 <sd_mmc_spi_start_read_block+0x1c>
     de6:	4b1e      	ldr	r3, [pc, #120]	; (e60 <sd_mmc_spi_start_read_block+0xe4>)
     de8:	8819      	ldrh	r1, [r3, #0]
     dea:	4b1e      	ldr	r3, [pc, #120]	; (e64 <sd_mmc_spi_start_read_block+0xe8>)
     dec:	6818      	ldr	r0, [r3, #0]
     dee:	4b1e      	ldr	r3, [pc, #120]	; (e68 <sd_mmc_spi_start_read_block+0xec>)
     df0:	4798      	blx	r3
     df2:	2900      	cmp	r1, #0
     df4:	d0d0      	beq.n	d98 <sd_mmc_spi_start_read_block+0x1c>
     df6:	23b2      	movs	r3, #178	; 0xb2
     df8:	4a22      	ldr	r2, [pc, #136]	; (e84 <sd_mmc_spi_start_read_block+0x108>)
     dfa:	4920      	ldr	r1, [pc, #128]	; (e7c <sd_mmc_spi_start_read_block+0x100>)
     dfc:	4823      	ldr	r0, [pc, #140]	; (e8c <sd_mmc_spi_start_read_block+0x110>)
     dfe:	4c24      	ldr	r4, [pc, #144]	; (e90 <sd_mmc_spi_start_read_block+0x114>)
     e00:	47a0      	blx	r4
     e02:	e7fe      	b.n	e02 <sd_mmc_spi_start_read_block+0x86>
     e04:	4a15      	ldr	r2, [pc, #84]	; (e5c <sd_mmc_spi_start_read_block+0xe0>)
     e06:	6810      	ldr	r0, [r2, #0]
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
     e08:	2800      	cmp	r0, #0
     e0a:	d015      	beq.n	e38 <sd_mmc_spi_start_read_block+0xbc>
     e0c:	071b      	lsls	r3, r3, #28
     e0e:	d009      	beq.n	e24 <sd_mmc_spi_start_read_block+0xa8>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
     e10:	230f      	movs	r3, #15
     e12:	446b      	add	r3, sp
     e14:	781b      	ldrb	r3, [r3, #0]
     e16:	075b      	lsls	r3, r3, #29
     e18:	d017      	beq.n	e4a <sd_mmc_spi_start_read_block+0xce>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
     e1a:	2207      	movs	r2, #7
     e1c:	4b16      	ldr	r3, [pc, #88]	; (e78 <sd_mmc_spi_start_read_block+0xfc>)
     e1e:	701a      	strb	r2, [r3, #0]
			return false;
     e20:	2000      	movs	r0, #0
     e22:	e018      	b.n	e56 <sd_mmc_spi_start_read_block+0xda>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
     e24:	4b1b      	ldr	r3, [pc, #108]	; (e94 <sd_mmc_spi_start_read_block+0x118>)
     e26:	9301      	str	r3, [sp, #4]
     e28:	4b15      	ldr	r3, [pc, #84]	; (e80 <sd_mmc_spi_start_read_block+0x104>)
     e2a:	9300      	str	r3, [sp, #0]
     e2c:	23c8      	movs	r3, #200	; 0xc8
     e2e:	4a15      	ldr	r2, [pc, #84]	; (e84 <sd_mmc_spi_start_read_block+0x108>)
     e30:	2101      	movs	r1, #1
     e32:	4c15      	ldr	r4, [pc, #84]	; (e88 <sd_mmc_spi_start_read_block+0x10c>)
     e34:	47a0      	blx	r4
     e36:	e7eb      	b.n	e10 <sd_mmc_spi_start_read_block+0x94>
     e38:	071b      	lsls	r3, r3, #28
     e3a:	d1e9      	bne.n	e10 <sd_mmc_spi_start_read_block+0x94>
     e3c:	23c8      	movs	r3, #200	; 0xc8
     e3e:	4a11      	ldr	r2, [pc, #68]	; (e84 <sd_mmc_spi_start_read_block+0x108>)
     e40:	4914      	ldr	r1, [pc, #80]	; (e94 <sd_mmc_spi_start_read_block+0x118>)
     e42:	4812      	ldr	r0, [pc, #72]	; (e8c <sd_mmc_spi_start_read_block+0x110>)
     e44:	4c12      	ldr	r4, [pc, #72]	; (e90 <sd_mmc_spi_start_read_block+0x114>)
     e46:	47a0      	blx	r4
     e48:	e7fe      	b.n	e48 <sd_mmc_spi_start_read_block+0xcc>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
     e4a:	220b      	movs	r2, #11
     e4c:	4b0a      	ldr	r3, [pc, #40]	; (e78 <sd_mmc_spi_start_read_block+0xfc>)
     e4e:	701a      	strb	r2, [r3, #0]
			return false;
     e50:	2000      	movs	r0, #0
     e52:	e000      	b.n	e56 <sd_mmc_spi_start_read_block+0xda>
	return true;
     e54:	2001      	movs	r0, #1
}
     e56:	b005      	add	sp, #20
     e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	2000011c 	.word	0x2000011c
     e60:	200000fc 	.word	0x200000fc
     e64:	2000010c 	.word	0x2000010c
     e68:	000057d9 	.word	0x000057d9
     e6c:	0007a120 	.word	0x0007a120
     e70:	200000c0 	.word	0x200000c0
     e74:	00002775 	.word	0x00002775
     e78:	20000103 	.word	0x20000103
     e7c:	00006e38 	.word	0x00006e38
     e80:	00006c40 	.word	0x00006c40
     e84:	00006dfc 	.word	0x00006dfc
     e88:	000017e1 	.word	0x000017e1
     e8c:	00006c58 	.word	0x00006c58
     e90:	00006055 	.word	0x00006055
     e94:	00006dd8 	.word	0x00006dd8

00000e98 <sd_mmc_spi_stop_write_block>:
{
     e98:	b530      	push	{r4, r5, lr}
     e9a:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
     e9c:	a901      	add	r1, sp, #4
     e9e:	2301      	movs	r3, #1
     ea0:	425b      	negs	r3, r3
     ea2:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
     ea4:	4d14      	ldr	r5, [pc, #80]	; (ef8 <sd_mmc_spi_stop_write_block+0x60>)
     ea6:	2202      	movs	r2, #2
     ea8:	0028      	movs	r0, r5
     eaa:	4b14      	ldr	r3, [pc, #80]	; (efc <sd_mmc_spi_stop_write_block+0x64>)
     eac:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
     eae:	466b      	mov	r3, sp
     eb0:	1ddc      	adds	r4, r3, #7
     eb2:	23ff      	movs	r3, #255	; 0xff
     eb4:	2201      	movs	r2, #1
     eb6:	0021      	movs	r1, r4
     eb8:	0028      	movs	r0, r5
     eba:	4d11      	ldr	r5, [pc, #68]	; (f00 <sd_mmc_spi_stop_write_block+0x68>)
     ebc:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
     ebe:	7822      	ldrb	r2, [r4, #0]
     ec0:	2311      	movs	r3, #17
     ec2:	4013      	ands	r3, r2
     ec4:	2b01      	cmp	r3, #1
     ec6:	d005      	beq.n	ed4 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     ec8:	2201      	movs	r2, #1
     eca:	4b0e      	ldr	r3, [pc, #56]	; (f04 <sd_mmc_spi_stop_write_block+0x6c>)
     ecc:	701a      	strb	r2, [r3, #0]
		return false;
     ece:	2000      	movs	r0, #0
}
     ed0:	b003      	add	sp, #12
     ed2:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
     ed4:	231e      	movs	r3, #30
     ed6:	401a      	ands	r2, r3
     ed8:	2a04      	cmp	r2, #4
     eda:	d00b      	beq.n	ef4 <sd_mmc_spi_stop_write_block+0x5c>
     edc:	2a0a      	cmp	r2, #10
     ede:	d104      	bne.n	eea <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
     ee0:	3a02      	subs	r2, #2
     ee2:	4b08      	ldr	r3, [pc, #32]	; (f04 <sd_mmc_spi_stop_write_block+0x6c>)
     ee4:	701a      	strb	r2, [r3, #0]
		return false;
     ee6:	2000      	movs	r0, #0
     ee8:	e7f2      	b.n	ed0 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
     eea:	220a      	movs	r2, #10
     eec:	4b05      	ldr	r3, [pc, #20]	; (f04 <sd_mmc_spi_stop_write_block+0x6c>)
     eee:	701a      	strb	r2, [r3, #0]
		return false;
     ef0:	2000      	movs	r0, #0
     ef2:	e7ed      	b.n	ed0 <sd_mmc_spi_stop_write_block+0x38>
	return true;
     ef4:	2001      	movs	r0, #1
     ef6:	e7eb      	b.n	ed0 <sd_mmc_spi_stop_write_block+0x38>
     ef8:	200000c0 	.word	0x200000c0
     efc:	00003131 	.word	0x00003131
     f00:	00002775 	.word	0x00002775
     f04:	20000103 	.word	0x20000103

00000f08 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
     f08:	b5f0      	push	{r4, r5, r6, r7, lr}
     f0a:	46ce      	mov	lr, r9
     f0c:	4647      	mov	r7, r8
     f0e:	b580      	push	{r7, lr}
     f10:	b093      	sub	sp, #76	; 0x4c
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     f12:	2500      	movs	r5, #0
     f14:	4b5d      	ldr	r3, [pc, #372]	; (108c <sd_mmc_spi_init+0x184>)
     f16:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
     f18:	a911      	add	r1, sp, #68	; 0x44
     f1a:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     f1c:	2601      	movs	r6, #1
     f1e:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
     f20:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
     f22:	2025      	movs	r0, #37	; 0x25
     f24:	4b5a      	ldr	r3, [pc, #360]	; (1090 <sd_mmc_spi_init+0x188>)
     f26:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     f28:	ac03      	add	r4, sp, #12
     f2a:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     f2c:	9504      	str	r5, [sp, #16]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     f2e:	9505      	str	r5, [sp, #20]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     f30:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     f32:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     f34:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     f36:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     f38:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     f3a:	2324      	movs	r3, #36	; 0x24
     f3c:	54e5      	strb	r5, [r4, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     f3e:	220c      	movs	r2, #12
     f40:	2100      	movs	r1, #0
     f42:	a809      	add	r0, sp, #36	; 0x24
     f44:	4b53      	ldr	r3, [pc, #332]	; (1094 <sd_mmc_spi_init+0x18c>)
     f46:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
     f48:	2380      	movs	r3, #128	; 0x80
     f4a:	025b      	lsls	r3, r3, #9
     f4c:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
     f4e:	4b52      	ldr	r3, [pc, #328]	; (1098 <sd_mmc_spi_init+0x190>)
     f50:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
     f52:	4b52      	ldr	r3, [pc, #328]	; (109c <sd_mmc_spi_init+0x194>)
     f54:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
     f56:	4b52      	ldr	r3, [pc, #328]	; (10a0 <sd_mmc_spi_init+0x198>)
     f58:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
     f5a:	4b52      	ldr	r3, [pc, #328]	; (10a4 <sd_mmc_spi_init+0x19c>)
     f5c:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
     f5e:	4b52      	ldr	r3, [pc, #328]	; (10a8 <sd_mmc_spi_init+0x1a0>)
     f60:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
     f62:	0022      	movs	r2, r4
     f64:	4951      	ldr	r1, [pc, #324]	; (10ac <sd_mmc_spi_init+0x1a4>)
     f66:	4852      	ldr	r0, [pc, #328]	; (10b0 <sd_mmc_spi_init+0x1a8>)
     f68:	4b52      	ldr	r3, [pc, #328]	; (10b4 <sd_mmc_spi_init+0x1ac>)
     f6a:	4798      	blx	r3
     f6c:	4b52      	ldr	r3, [pc, #328]	; (10b8 <sd_mmc_spi_init+0x1b0>)
     f6e:	6818      	ldr	r0, [r3, #0]
static inline void spi_enable(
		struct spi_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
     f70:	2800      	cmp	r0, #0
     f72:	d01e      	beq.n	fb2 <sd_mmc_spi_init+0xaa>
     f74:	4b4e      	ldr	r3, [pc, #312]	; (10b0 <sd_mmc_spi_init+0x1a8>)
     f76:	681b      	ldr	r3, [r3, #0]
     f78:	2b00      	cmp	r3, #0
     f7a:	d00f      	beq.n	f9c <sd_mmc_spi_init+0x94>

	SercomSpi *const spi_module = &(module->hw->SPI);
     f7c:	4b4c      	ldr	r3, [pc, #304]	; (10b0 <sd_mmc_spi_init+0x1a8>)
     f7e:	681c      	ldr	r4, [r3, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     f80:	0020      	movs	r0, r4
     f82:	4b4e      	ldr	r3, [pc, #312]	; (10bc <sd_mmc_spi_init+0x1b4>)
     f84:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f86:	231f      	movs	r3, #31
     f88:	4018      	ands	r0, r3
     f8a:	3b1e      	subs	r3, #30
     f8c:	4083      	lsls	r3, r0
     f8e:	4a4c      	ldr	r2, [pc, #304]	; (10c0 <sd_mmc_spi_init+0x1b8>)
     f90:	6013      	str	r3, [r2, #0]
     f92:	4d49      	ldr	r5, [pc, #292]	; (10b8 <sd_mmc_spi_init+0x1b0>)
	Assert(module->hw);
     f94:	4b46      	ldr	r3, [pc, #280]	; (10b0 <sd_mmc_spi_init+0x1a8>)
     f96:	4699      	mov	r9, r3
     f98:	001e      	movs	r6, r3
     f9a:	e01f      	b.n	fdc <sd_mmc_spi_init+0xd4>
	Assert(module->hw);
     f9c:	4b49      	ldr	r3, [pc, #292]	; (10c4 <sd_mmc_spi_init+0x1bc>)
     f9e:	9301      	str	r3, [sp, #4]
     fa0:	4b49      	ldr	r3, [pc, #292]	; (10c8 <sd_mmc_spi_init+0x1c0>)
     fa2:	9300      	str	r3, [sp, #0]
     fa4:	2380      	movs	r3, #128	; 0x80
     fa6:	00db      	lsls	r3, r3, #3
     fa8:	4a48      	ldr	r2, [pc, #288]	; (10cc <sd_mmc_spi_init+0x1c4>)
     faa:	2101      	movs	r1, #1
     fac:	4c48      	ldr	r4, [pc, #288]	; (10d0 <sd_mmc_spi_init+0x1c8>)
     fae:	47a0      	blx	r4
     fb0:	e7e4      	b.n	f7c <sd_mmc_spi_init+0x74>
     fb2:	4b3f      	ldr	r3, [pc, #252]	; (10b0 <sd_mmc_spi_init+0x1a8>)
     fb4:	681b      	ldr	r3, [r3, #0]
     fb6:	2b00      	cmp	r3, #0
     fb8:	d1e0      	bne.n	f7c <sd_mmc_spi_init+0x74>
     fba:	2380      	movs	r3, #128	; 0x80
     fbc:	00db      	lsls	r3, r3, #3
     fbe:	4a43      	ldr	r2, [pc, #268]	; (10cc <sd_mmc_spi_init+0x1c4>)
     fc0:	4940      	ldr	r1, [pc, #256]	; (10c4 <sd_mmc_spi_init+0x1bc>)
     fc2:	4844      	ldr	r0, [pc, #272]	; (10d4 <sd_mmc_spi_init+0x1cc>)
     fc4:	4c44      	ldr	r4, [pc, #272]	; (10d8 <sd_mmc_spi_init+0x1d0>)
     fc6:	47a0      	blx	r4
     fc8:	e7fe      	b.n	fc8 <sd_mmc_spi_init+0xc0>
	Assert(module->hw);
     fca:	464b      	mov	r3, r9
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	2b00      	cmp	r3, #0
     fd0:	d014      	beq.n	ffc <sd_mmc_spi_init+0xf4>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fd2:	4b37      	ldr	r3, [pc, #220]	; (10b0 <sd_mmc_spi_init+0x1a8>)
     fd4:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     fd6:	69db      	ldr	r3, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     fd8:	2b00      	cmp	r3, #0
     fda:	d016      	beq.n	100a <sd_mmc_spi_init+0x102>
     fdc:	6828      	ldr	r0, [r5, #0]
	Assert(module->hw);
     fde:	2800      	cmp	r0, #0
     fe0:	d0f3      	beq.n	fca <sd_mmc_spi_init+0xc2>
     fe2:	6833      	ldr	r3, [r6, #0]
     fe4:	2b00      	cmp	r3, #0
     fe6:	d1f4      	bne.n	fd2 <sd_mmc_spi_init+0xca>
     fe8:	4b36      	ldr	r3, [pc, #216]	; (10c4 <sd_mmc_spi_init+0x1bc>)
     fea:	9301      	str	r3, [sp, #4]
     fec:	4b36      	ldr	r3, [pc, #216]	; (10c8 <sd_mmc_spi_init+0x1c0>)
     fee:	9300      	str	r3, [sp, #0]
     ff0:	4b3a      	ldr	r3, [pc, #232]	; (10dc <sd_mmc_spi_init+0x1d4>)
     ff2:	4a36      	ldr	r2, [pc, #216]	; (10cc <sd_mmc_spi_init+0x1c4>)
     ff4:	2101      	movs	r1, #1
     ff6:	4f36      	ldr	r7, [pc, #216]	; (10d0 <sd_mmc_spi_init+0x1c8>)
     ff8:	47b8      	blx	r7
     ffa:	e7ea      	b.n	fd2 <sd_mmc_spi_init+0xca>
     ffc:	4b37      	ldr	r3, [pc, #220]	; (10dc <sd_mmc_spi_init+0x1d4>)
     ffe:	4a33      	ldr	r2, [pc, #204]	; (10cc <sd_mmc_spi_init+0x1c4>)
    1000:	4930      	ldr	r1, [pc, #192]	; (10c4 <sd_mmc_spi_init+0x1bc>)
    1002:	4834      	ldr	r0, [pc, #208]	; (10d4 <sd_mmc_spi_init+0x1cc>)
    1004:	4c34      	ldr	r4, [pc, #208]	; (10d8 <sd_mmc_spi_init+0x1d0>)
    1006:	47a0      	blx	r4
    1008:	e7fe      	b.n	1008 <sd_mmc_spi_init+0x100>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    100a:	6823      	ldr	r3, [r4, #0]
    100c:	2202      	movs	r2, #2
    100e:	4313      	orrs	r3, r2
    1010:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    1012:	4a33      	ldr	r2, [pc, #204]	; (10e0 <sd_mmc_spi_init+0x1d8>)
    1014:	2300      	movs	r3, #0
    1016:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    1018:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    101a:	4932      	ldr	r1, [pc, #200]	; (10e4 <sd_mmc_spi_init+0x1dc>)
    101c:	7808      	ldrb	r0, [r1, #0]
    101e:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    1020:	4c31      	ldr	r4, [pc, #196]	; (10e8 <sd_mmc_spi_init+0x1e0>)
    1022:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1024:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1026:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1028:	a902      	add	r1, sp, #8
    102a:	2201      	movs	r2, #1
    102c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    102e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1030:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1032:	4b17      	ldr	r3, [pc, #92]	; (1090 <sd_mmc_spi_init+0x188>)
    1034:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1036:	7824      	ldrb	r4, [r4, #0]
    1038:	09e3      	lsrs	r3, r4, #7
    103a:	d00f      	beq.n	105c <sd_mmc_spi_init+0x154>
    103c:	4b1e      	ldr	r3, [pc, #120]	; (10b8 <sd_mmc_spi_init+0x1b0>)
    103e:	6818      	ldr	r0, [r3, #0]
		Assert(false);
    1040:	2800      	cmp	r0, #0
    1042:	d01a      	beq.n	107a <sd_mmc_spi_init+0x172>
    1044:	4b29      	ldr	r3, [pc, #164]	; (10ec <sd_mmc_spi_init+0x1e4>)
    1046:	9301      	str	r3, [sp, #4]
    1048:	4b1f      	ldr	r3, [pc, #124]	; (10c8 <sd_mmc_spi_init+0x1c0>)
    104a:	9300      	str	r3, [sp, #0]
    104c:	2362      	movs	r3, #98	; 0x62
    104e:	33ff      	adds	r3, #255	; 0xff
    1050:	4a27      	ldr	r2, [pc, #156]	; (10f0 <sd_mmc_spi_init+0x1e8>)
    1052:	2101      	movs	r1, #1
    1054:	4d1e      	ldr	r5, [pc, #120]	; (10d0 <sd_mmc_spi_init+0x1c8>)
    1056:	47a8      	blx	r5
		return NULL;
    1058:	2300      	movs	r3, #0
    105a:	e004      	b.n	1066 <sd_mmc_spi_init+0x15e>
		return &(ports[port_index]->Group[group_index]);
    105c:	0963      	lsrs	r3, r4, #5
    105e:	01db      	lsls	r3, r3, #7
    1060:	4a24      	ldr	r2, [pc, #144]	; (10f4 <sd_mmc_spi_init+0x1ec>)
    1062:	4694      	mov	ip, r2
    1064:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1066:	211f      	movs	r1, #31
    1068:	4021      	ands	r1, r4
    106a:	2201      	movs	r2, #1
    106c:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    106e:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    1070:	b013      	add	sp, #76	; 0x4c
    1072:	bc0c      	pop	{r2, r3}
    1074:	4690      	mov	r8, r2
    1076:	4699      	mov	r9, r3
    1078:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Assert(false);
    107a:	2362      	movs	r3, #98	; 0x62
    107c:	33ff      	adds	r3, #255	; 0xff
    107e:	4a1c      	ldr	r2, [pc, #112]	; (10f0 <sd_mmc_spi_init+0x1e8>)
    1080:	491a      	ldr	r1, [pc, #104]	; (10ec <sd_mmc_spi_init+0x1e4>)
    1082:	4814      	ldr	r0, [pc, #80]	; (10d4 <sd_mmc_spi_init+0x1cc>)
    1084:	4c14      	ldr	r4, [pc, #80]	; (10d8 <sd_mmc_spi_init+0x1d0>)
    1086:	47a0      	blx	r4
    1088:	e7fe      	b.n	1088 <sd_mmc_spi_init+0x180>
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	20000103 	.word	0x20000103
    1090:	000019d9 	.word	0x000019d9
    1094:	00005a95 	.word	0x00005a95
    1098:	00040003 	.word	0x00040003
    109c:	00050003 	.word	0x00050003
    10a0:	00060003 	.word	0x00060003
    10a4:	00070003 	.word	0x00070003
    10a8:	00061a80 	.word	0x00061a80
    10ac:	42000800 	.word	0x42000800
    10b0:	200000c0 	.word	0x200000c0
    10b4:	00002421 	.word	0x00002421
    10b8:	2000011c 	.word	0x2000011c
    10bc:	00001ed1 	.word	0x00001ed1
    10c0:	e000e100 	.word	0xe000e100
    10c4:	00006d80 	.word	0x00006d80
    10c8:	00006c40 	.word	0x00006c40
    10cc:	00006d54 	.word	0x00006d54
    10d0:	000017e1 	.word	0x000017e1
    10d4:	00006c58 	.word	0x00006c58
    10d8:	00006055 	.word	0x00006055
    10dc:	00000362 	.word	0x00000362
    10e0:	20000110 	.word	0x20000110
    10e4:	20000030 	.word	0x20000030
    10e8:	20000100 	.word	0x20000100
    10ec:	00006cac 	.word	0x00006cac
    10f0:	00006c7c 	.word	0x00006c7c
    10f4:	41004400 	.word	0x41004400

000010f8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10fa:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    10fc:	2200      	movs	r2, #0
    10fe:	4b0d      	ldr	r3, [pc, #52]	; (1134 <sd_mmc_spi_select_device+0x3c>)
    1100:	701a      	strb	r2, [r3, #0]
    1102:	000c      	movs	r4, r1
    1104:	4b0c      	ldr	r3, [pc, #48]	; (1138 <sd_mmc_spi_select_device+0x40>)
    1106:	4299      	cmp	r1, r3
    1108:	d900      	bls.n	110c <sd_mmc_spi_select_device+0x14>
    110a:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    110c:	4d0b      	ldr	r5, [pc, #44]	; (113c <sd_mmc_spi_select_device+0x44>)
    110e:	4e0c      	ldr	r6, [pc, #48]	; (1140 <sd_mmc_spi_select_device+0x48>)
    1110:	e001      	b.n	1116 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    1112:	08e3      	lsrs	r3, r4, #3
    1114:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    1116:	0021      	movs	r1, r4
    1118:	0028      	movs	r0, r5
    111a:	47b0      	blx	r6
    111c:	2817      	cmp	r0, #23
    111e:	d0f8      	beq.n	1112 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    1120:	0079      	lsls	r1, r7, #1
    1122:	19cf      	adds	r7, r1, r7
    1124:	4907      	ldr	r1, [pc, #28]	; (1144 <sd_mmc_spi_select_device+0x4c>)
    1126:	19c9      	adds	r1, r1, r7
    1128:	2201      	movs	r2, #1
    112a:	4804      	ldr	r0, [pc, #16]	; (113c <sd_mmc_spi_select_device+0x44>)
    112c:	4b06      	ldr	r3, [pc, #24]	; (1148 <sd_mmc_spi_select_device+0x50>)
    112e:	4798      	blx	r3
}
    1130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	20000103 	.word	0x20000103
    1138:	00989680 	.word	0x00989680
    113c:	200000c0 	.word	0x200000c0
    1140:	00001f61 	.word	0x00001f61
    1144:	20000100 	.word	0x20000100
    1148:	00002bbd 	.word	0x00002bbd

0000114c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    114c:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    114e:	2200      	movs	r2, #0
    1150:	4b04      	ldr	r3, [pc, #16]	; (1164 <sd_mmc_spi_deselect_device+0x18>)
    1152:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    1154:	0041      	lsls	r1, r0, #1
    1156:	1808      	adds	r0, r1, r0
    1158:	4903      	ldr	r1, [pc, #12]	; (1168 <sd_mmc_spi_deselect_device+0x1c>)
    115a:	1809      	adds	r1, r1, r0
    115c:	4803      	ldr	r0, [pc, #12]	; (116c <sd_mmc_spi_deselect_device+0x20>)
    115e:	4b04      	ldr	r3, [pc, #16]	; (1170 <sd_mmc_spi_deselect_device+0x24>)
    1160:	4798      	blx	r3
}
    1162:	bd10      	pop	{r4, pc}
    1164:	20000103 	.word	0x20000103
    1168:	20000100 	.word	0x20000100
    116c:	200000c0 	.word	0x200000c0
    1170:	00002bbd 	.word	0x00002bbd

00001174 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    1174:	b570      	push	{r4, r5, r6, lr}
    1176:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    1178:	22ff      	movs	r2, #255	; 0xff
    117a:	466b      	mov	r3, sp
    117c:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    117e:	2200      	movs	r2, #0
    1180:	4b07      	ldr	r3, [pc, #28]	; (11a0 <sd_mmc_spi_send_clock+0x2c>)
    1182:	701a      	strb	r2, [r3, #0]
    1184:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    1186:	4e07      	ldr	r6, [pc, #28]	; (11a4 <sd_mmc_spi_send_clock+0x30>)
    1188:	4d07      	ldr	r5, [pc, #28]	; (11a8 <sd_mmc_spi_send_clock+0x34>)
    118a:	2201      	movs	r2, #1
    118c:	466b      	mov	r3, sp
    118e:	1dd9      	adds	r1, r3, #7
    1190:	0030      	movs	r0, r6
    1192:	47a8      	blx	r5
    1194:	3c01      	subs	r4, #1
    1196:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    1198:	2c00      	cmp	r4, #0
    119a:	d1f6      	bne.n	118a <sd_mmc_spi_send_clock+0x16>
	}
}
    119c:	b002      	add	sp, #8
    119e:	bd70      	pop	{r4, r5, r6, pc}
    11a0:	20000103 	.word	0x20000103
    11a4:	200000c0 	.word	0x200000c0
    11a8:	00003131 	.word	0x00003131

000011ac <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    11ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ae:	b089      	sub	sp, #36	; 0x24
    11b0:	0004      	movs	r4, r0
    11b2:	000e      	movs	r6, r1
    11b4:	9202      	str	r2, [sp, #8]
    11b6:	9303      	str	r3, [sp, #12]
	uint8_t dummy = 0xFF;
    11b8:	22ff      	movs	r2, #255	; 0xff
    11ba:	2317      	movs	r3, #23
    11bc:	a902      	add	r1, sp, #8
    11be:	468c      	mov	ip, r1
    11c0:	4463      	add	r3, ip
    11c2:	701a      	strb	r2, [r3, #0]
    11c4:	4b5f      	ldr	r3, [pc, #380]	; (1344 <sd_mmc_spi_adtc_start+0x198>)
    11c6:	6818      	ldr	r0, [r3, #0]
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
    11c8:	2800      	cmp	r0, #0
    11ca:	d021      	beq.n	1210 <sd_mmc_spi_adtc_start+0x64>
    11cc:	05e3      	lsls	r3, r4, #23
    11ce:	d514      	bpl.n	11fa <sd_mmc_spi_adtc_start+0x4e>
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    11d0:	2200      	movs	r2, #0
    11d2:	4b5d      	ldr	r3, [pc, #372]	; (1348 <sd_mmc_spi_adtc_start+0x19c>)
    11d4:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    11d6:	ab06      	add	r3, sp, #24
    11d8:	323f      	adds	r2, #63	; 0x3f
    11da:	4022      	ands	r2, r4
    11dc:	2140      	movs	r1, #64	; 0x40
    11de:	430a      	orrs	r2, r1
    11e0:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    11e2:	0e32      	lsrs	r2, r6, #24
    11e4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    11e6:	0c32      	lsrs	r2, r6, #16
    11e8:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    11ea:	0a32      	lsrs	r2, r6, #8
    11ec:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    11ee:	711e      	strb	r6, [r3, #4]
    11f0:	2700      	movs	r7, #0
	crc = 0;
    11f2:	2300      	movs	r3, #0
		value = *buf++;
    11f4:	a906      	add	r1, sp, #24
				crc ^= 0x09;
    11f6:	2509      	movs	r5, #9
    11f8:	e026      	b.n	1248 <sd_mmc_spi_adtc_start+0x9c>
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
    11fa:	4b54      	ldr	r3, [pc, #336]	; (134c <sd_mmc_spi_adtc_start+0x1a0>)
    11fc:	9301      	str	r3, [sp, #4]
    11fe:	4b54      	ldr	r3, [pc, #336]	; (1350 <sd_mmc_spi_adtc_start+0x1a4>)
    1200:	9300      	str	r3, [sp, #0]
    1202:	23a4      	movs	r3, #164	; 0xa4
    1204:	33ff      	adds	r3, #255	; 0xff
    1206:	4a53      	ldr	r2, [pc, #332]	; (1354 <sd_mmc_spi_adtc_start+0x1a8>)
    1208:	2101      	movs	r1, #1
    120a:	4f53      	ldr	r7, [pc, #332]	; (1358 <sd_mmc_spi_adtc_start+0x1ac>)
    120c:	47b8      	blx	r7
    120e:	e7df      	b.n	11d0 <sd_mmc_spi_adtc_start+0x24>
    1210:	05e3      	lsls	r3, r4, #23
    1212:	d4dd      	bmi.n	11d0 <sd_mmc_spi_adtc_start+0x24>
    1214:	23a4      	movs	r3, #164	; 0xa4
    1216:	33ff      	adds	r3, #255	; 0xff
    1218:	4a4e      	ldr	r2, [pc, #312]	; (1354 <sd_mmc_spi_adtc_start+0x1a8>)
    121a:	494c      	ldr	r1, [pc, #304]	; (134c <sd_mmc_spi_adtc_start+0x1a0>)
    121c:	484f      	ldr	r0, [pc, #316]	; (135c <sd_mmc_spi_adtc_start+0x1b0>)
    121e:	4c50      	ldr	r4, [pc, #320]	; (1360 <sd_mmc_spi_adtc_start+0x1b4>)
    1220:	47a0      	blx	r4
    1222:	e7fe      	b.n	1222 <sd_mmc_spi_adtc_start+0x76>
			value <<= 1;
    1224:	0076      	lsls	r6, r6, #1
    1226:	b2f6      	uxtb	r6, r6
    1228:	3801      	subs	r0, #1
    122a:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    122c:	2800      	cmp	r0, #0
    122e:	d008      	beq.n	1242 <sd_mmc_spi_adtc_start+0x96>
			crc <<= 1;
    1230:	005b      	lsls	r3, r3, #1
    1232:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    1234:	001a      	movs	r2, r3
    1236:	4072      	eors	r2, r6
    1238:	0612      	lsls	r2, r2, #24
    123a:	d5f3      	bpl.n	1224 <sd_mmc_spi_adtc_start+0x78>
				crc ^= 0x09;
    123c:	406b      	eors	r3, r5
    123e:	b2db      	uxtb	r3, r3
    1240:	e7f0      	b.n	1224 <sd_mmc_spi_adtc_start+0x78>
    1242:	3701      	adds	r7, #1
	while (size--) {
    1244:	2f05      	cmp	r7, #5
    1246:	d002      	beq.n	124e <sd_mmc_spi_adtc_start+0xa2>
		value = *buf++;
    1248:	5c7e      	ldrb	r6, [r7, r1]
    124a:	2008      	movs	r0, #8
    124c:	e7f0      	b.n	1230 <sd_mmc_spi_adtc_start+0x84>
	crc = (crc << 1) | 1;
    124e:	005b      	lsls	r3, r3, #1
    1250:	2201      	movs	r2, #1
    1252:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    1254:	ad06      	add	r5, sp, #24
    1256:	716b      	strb	r3, [r5, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    1258:	4e42      	ldr	r6, [pc, #264]	; (1364 <sd_mmc_spi_adtc_start+0x1b8>)
    125a:	2201      	movs	r2, #1
    125c:	2117      	movs	r1, #23
    125e:	ab02      	add	r3, sp, #8
    1260:	469c      	mov	ip, r3
    1262:	4461      	add	r1, ip
    1264:	0030      	movs	r0, r6
    1266:	4f40      	ldr	r7, [pc, #256]	; (1368 <sd_mmc_spi_adtc_start+0x1bc>)
    1268:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    126a:	2206      	movs	r2, #6
    126c:	0029      	movs	r1, r5
    126e:	0030      	movs	r0, r6
    1270:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    1272:	210f      	movs	r1, #15
    1274:	ab02      	add	r3, sp, #8
    1276:	469c      	mov	ip, r3
    1278:	4461      	add	r1, ip
    127a:	23ff      	movs	r3, #255	; 0xff
    127c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    127e:	2201      	movs	r2, #1
    1280:	0030      	movs	r0, r6
    1282:	4e3a      	ldr	r6, [pc, #232]	; (136c <sd_mmc_spi_adtc_start+0x1c0>)
    1284:	47b0      	blx	r6
    1286:	2707      	movs	r7, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1288:	260f      	movs	r6, #15
    128a:	ab02      	add	r3, sp, #8
    128c:	469c      	mov	ip, r3
    128e:	4466      	add	r6, ip
    1290:	4d36      	ldr	r5, [pc, #216]	; (136c <sd_mmc_spi_adtc_start+0x1c0>)
    1292:	23ff      	movs	r3, #255	; 0xff
    1294:	2201      	movs	r2, #1
    1296:	0031      	movs	r1, r6
    1298:	4832      	ldr	r0, [pc, #200]	; (1364 <sd_mmc_spi_adtc_start+0x1b8>)
    129a:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    129c:	7833      	ldrb	r3, [r6, #0]
    129e:	b25a      	sxtb	r2, r3
    12a0:	2a00      	cmp	r2, #0
    12a2:	da09      	bge.n	12b8 <sd_mmc_spi_adtc_start+0x10c>
    12a4:	3f01      	subs	r7, #1
    12a6:	b2ff      	uxtb	r7, r7
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    12a8:	2f00      	cmp	r7, #0
    12aa:	d1f2      	bne.n	1292 <sd_mmc_spi_adtc_start+0xe6>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    12ac:	2202      	movs	r2, #2
    12ae:	4b26      	ldr	r3, [pc, #152]	; (1348 <sd_mmc_spi_adtc_start+0x19c>)
    12b0:	701a      	strb	r2, [r3, #0]
			return false;
    12b2:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    12b4:	b009      	add	sp, #36	; 0x24
    12b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    12b8:	4a2d      	ldr	r2, [pc, #180]	; (1370 <sd_mmc_spi_adtc_start+0x1c4>)
    12ba:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    12bc:	071a      	lsls	r2, r3, #28
    12be:	d408      	bmi.n	12d2 <sd_mmc_spi_adtc_start+0x126>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    12c0:	075a      	lsls	r2, r3, #29
    12c2:	d40b      	bmi.n	12dc <sd_mmc_spi_adtc_start+0x130>
	if (r1 & ~R1_SPI_IDLE) {
    12c4:	2201      	movs	r2, #1
    12c6:	4393      	bics	r3, r2
    12c8:	d00d      	beq.n	12e6 <sd_mmc_spi_adtc_start+0x13a>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    12ca:	4b1f      	ldr	r3, [pc, #124]	; (1348 <sd_mmc_spi_adtc_start+0x19c>)
    12cc:	701a      	strb	r2, [r3, #0]
		return false;
    12ce:	2000      	movs	r0, #0
    12d0:	e7f0      	b.n	12b4 <sd_mmc_spi_adtc_start+0x108>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    12d2:	2206      	movs	r2, #6
    12d4:	4b1c      	ldr	r3, [pc, #112]	; (1348 <sd_mmc_spi_adtc_start+0x19c>)
    12d6:	701a      	strb	r2, [r3, #0]
		return false;
    12d8:	2000      	movs	r0, #0
    12da:	e7eb      	b.n	12b4 <sd_mmc_spi_adtc_start+0x108>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    12dc:	2209      	movs	r2, #9
    12de:	4b1a      	ldr	r3, [pc, #104]	; (1348 <sd_mmc_spi_adtc_start+0x19c>)
    12e0:	701a      	strb	r2, [r3, #0]
		return false;
    12e2:	2000      	movs	r0, #0
    12e4:	e7e6      	b.n	12b4 <sd_mmc_spi_adtc_start+0x108>
	if (cmd & SDMMC_RESP_BUSY) {
    12e6:	04a3      	lsls	r3, r4, #18
    12e8:	d410      	bmi.n	130c <sd_mmc_spi_adtc_start+0x160>
	if (cmd & SDMMC_RESP_8) {
    12ea:	05a3      	lsls	r3, r4, #22
    12ec:	d416      	bmi.n	131c <sd_mmc_spi_adtc_start+0x170>
	if (cmd & SDMMC_RESP_32) {
    12ee:	0563      	lsls	r3, r4, #21
    12f0:	d41d      	bmi.n	132e <sd_mmc_spi_adtc_start+0x182>
	sd_mmc_spi_block_size = block_size;
    12f2:	4b20      	ldr	r3, [pc, #128]	; (1374 <sd_mmc_spi_adtc_start+0x1c8>)
    12f4:	466a      	mov	r2, sp
    12f6:	8912      	ldrh	r2, [r2, #8]
    12f8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    12fa:	4b1f      	ldr	r3, [pc, #124]	; (1378 <sd_mmc_spi_adtc_start+0x1cc>)
    12fc:	466a      	mov	r2, sp
    12fe:	8992      	ldrh	r2, [r2, #12]
    1300:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    1302:	2200      	movs	r2, #0
    1304:	4b1d      	ldr	r3, [pc, #116]	; (137c <sd_mmc_spi_adtc_start+0x1d0>)
    1306:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    1308:	2001      	movs	r0, #1
    130a:	e7d3      	b.n	12b4 <sd_mmc_spi_adtc_start+0x108>
		if (!sd_mmc_spi_wait_busy()) {
    130c:	4b1c      	ldr	r3, [pc, #112]	; (1380 <sd_mmc_spi_adtc_start+0x1d4>)
    130e:	4798      	blx	r3
    1310:	2800      	cmp	r0, #0
    1312:	d1ea      	bne.n	12ea <sd_mmc_spi_adtc_start+0x13e>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    1314:	2203      	movs	r2, #3
    1316:	4b0c      	ldr	r3, [pc, #48]	; (1348 <sd_mmc_spi_adtc_start+0x19c>)
    1318:	701a      	strb	r2, [r3, #0]
			return false;
    131a:	e7cb      	b.n	12b4 <sd_mmc_spi_adtc_start+0x108>
		sd_mmc_spi_response_32 = 0;
    131c:	4914      	ldr	r1, [pc, #80]	; (1370 <sd_mmc_spi_adtc_start+0x1c4>)
    131e:	2300      	movs	r3, #0
    1320:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    1322:	33ff      	adds	r3, #255	; 0xff
    1324:	2201      	movs	r2, #1
    1326:	480f      	ldr	r0, [pc, #60]	; (1364 <sd_mmc_spi_adtc_start+0x1b8>)
    1328:	4e10      	ldr	r6, [pc, #64]	; (136c <sd_mmc_spi_adtc_start+0x1c0>)
    132a:	47b0      	blx	r6
    132c:	e7df      	b.n	12ee <sd_mmc_spi_adtc_start+0x142>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    132e:	4e10      	ldr	r6, [pc, #64]	; (1370 <sd_mmc_spi_adtc_start+0x1c4>)
    1330:	23ff      	movs	r3, #255	; 0xff
    1332:	2204      	movs	r2, #4
    1334:	0031      	movs	r1, r6
    1336:	480b      	ldr	r0, [pc, #44]	; (1364 <sd_mmc_spi_adtc_start+0x1b8>)
    1338:	4f0c      	ldr	r7, [pc, #48]	; (136c <sd_mmc_spi_adtc_start+0x1c0>)
    133a:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    133c:	6833      	ldr	r3, [r6, #0]
    133e:	ba1b      	rev	r3, r3
    1340:	6033      	str	r3, [r6, #0]
    1342:	e7d6      	b.n	12f2 <sd_mmc_spi_adtc_start+0x146>
    1344:	2000011c 	.word	0x2000011c
    1348:	20000103 	.word	0x20000103
    134c:	00006d38 	.word	0x00006d38
    1350:	00006c40 	.word	0x00006c40
    1354:	00006dfc 	.word	0x00006dfc
    1358:	000017e1 	.word	0x000017e1
    135c:	00006c58 	.word	0x00006c58
    1360:	00006055 	.word	0x00006055
    1364:	200000c0 	.word	0x200000c0
    1368:	00003131 	.word	0x00003131
    136c:	00002775 	.word	0x00002775
    1370:	20000108 	.word	0x20000108
    1374:	200000fc 	.word	0x200000fc
    1378:	20000104 	.word	0x20000104
    137c:	2000010c 	.word	0x2000010c
    1380:	00000ca1 	.word	0x00000ca1

00001384 <sd_mmc_spi_send_cmd>:
{
    1384:	b510      	push	{r4, lr}
    1386:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    1388:	2300      	movs	r3, #0
    138a:	9300      	str	r3, [sp, #0]
    138c:	2200      	movs	r2, #0
    138e:	4c02      	ldr	r4, [pc, #8]	; (1398 <sd_mmc_spi_send_cmd+0x14>)
    1390:	47a0      	blx	r4
}
    1392:	b002      	add	sp, #8
    1394:	bd10      	pop	{r4, pc}
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	000011ad 	.word	0x000011ad

0000139c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    139c:	4b01      	ldr	r3, [pc, #4]	; (13a4 <sd_mmc_spi_get_response+0x8>)
    139e:	6818      	ldr	r0, [r3, #0]
}
    13a0:	4770      	bx	lr
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	20000108 	.word	0x20000108

000013a8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    13a8:	b530      	push	{r4, r5, lr}
    13aa:	b087      	sub	sp, #28
    13ac:	9003      	str	r0, [sp, #12]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    13ae:	2200      	movs	r2, #0
    13b0:	4b29      	ldr	r3, [pc, #164]	; (1458 <sd_mmc_spi_read_word+0xb0>)
    13b2:	701a      	strb	r2, [r3, #0]
    13b4:	4b29      	ldr	r3, [pc, #164]	; (145c <sd_mmc_spi_read_word+0xb4>)
    13b6:	681c      	ldr	r4, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
    13b8:	2c00      	cmp	r4, #0
    13ba:	d033      	beq.n	1424 <sd_mmc_spi_read_word+0x7c>
    13bc:	4b28      	ldr	r3, [pc, #160]	; (1460 <sd_mmc_spi_read_word+0xb8>)
    13be:	881d      	ldrh	r5, [r3, #0]
    13c0:	4b28      	ldr	r3, [pc, #160]	; (1464 <sd_mmc_spi_read_word+0xbc>)
    13c2:	8819      	ldrh	r1, [r3, #0]
    13c4:	4b28      	ldr	r3, [pc, #160]	; (1468 <sd_mmc_spi_read_word+0xc0>)
    13c6:	6818      	ldr	r0, [r3, #0]
    13c8:	4b28      	ldr	r3, [pc, #160]	; (146c <sd_mmc_spi_read_word+0xc4>)
    13ca:	4798      	blx	r3
    13cc:	4285      	cmp	r5, r0
    13ce:	d91e      	bls.n	140e <sd_mmc_spi_read_word+0x66>
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    13d0:	4b24      	ldr	r3, [pc, #144]	; (1464 <sd_mmc_spi_read_word+0xbc>)
    13d2:	8819      	ldrh	r1, [r3, #0]
    13d4:	4b24      	ldr	r3, [pc, #144]	; (1468 <sd_mmc_spi_read_word+0xc0>)
    13d6:	6818      	ldr	r0, [r3, #0]
    13d8:	4b25      	ldr	r3, [pc, #148]	; (1470 <sd_mmc_spi_read_word+0xc8>)
    13da:	4798      	blx	r3
    13dc:	2900      	cmp	r1, #0
    13de:	d103      	bne.n	13e8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    13e0:	4b24      	ldr	r3, [pc, #144]	; (1474 <sd_mmc_spi_read_word+0xcc>)
    13e2:	4798      	blx	r3
    13e4:	2800      	cmp	r0, #0
    13e6:	d010      	beq.n	140a <sd_mmc_spi_read_word+0x62>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    13e8:	23ff      	movs	r3, #255	; 0xff
    13ea:	2204      	movs	r2, #4
    13ec:	a903      	add	r1, sp, #12
    13ee:	4822      	ldr	r0, [pc, #136]	; (1478 <sd_mmc_spi_read_word+0xd0>)
    13f0:	4c22      	ldr	r4, [pc, #136]	; (147c <sd_mmc_spi_read_word+0xd4>)
    13f2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    13f4:	4b1c      	ldr	r3, [pc, #112]	; (1468 <sd_mmc_spi_read_word+0xc0>)
    13f6:	681a      	ldr	r2, [r3, #0]
    13f8:	1d10      	adds	r0, r2, #4
    13fa:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    13fc:	4b19      	ldr	r3, [pc, #100]	; (1464 <sd_mmc_spi_read_word+0xbc>)
    13fe:	8819      	ldrh	r1, [r3, #0]
    1400:	4b1b      	ldr	r3, [pc, #108]	; (1470 <sd_mmc_spi_read_word+0xc8>)
    1402:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1404:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1406:	2900      	cmp	r1, #0
    1408:	d01d      	beq.n	1446 <sd_mmc_spi_read_word+0x9e>
}
    140a:	b007      	add	sp, #28
    140c:	bd30      	pop	{r4, r5, pc}
	Assert(sd_mmc_spi_nb_block >
    140e:	4b1c      	ldr	r3, [pc, #112]	; (1480 <sd_mmc_spi_read_word+0xd8>)
    1410:	9301      	str	r3, [sp, #4]
    1412:	4b1c      	ldr	r3, [pc, #112]	; (1484 <sd_mmc_spi_read_word+0xdc>)
    1414:	9300      	str	r3, [sp, #0]
    1416:	4b1c      	ldr	r3, [pc, #112]	; (1488 <sd_mmc_spi_read_word+0xe0>)
    1418:	4a1c      	ldr	r2, [pc, #112]	; (148c <sd_mmc_spi_read_word+0xe4>)
    141a:	2101      	movs	r1, #1
    141c:	0020      	movs	r0, r4
    141e:	4c1c      	ldr	r4, [pc, #112]	; (1490 <sd_mmc_spi_read_word+0xe8>)
    1420:	47a0      	blx	r4
    1422:	e7d5      	b.n	13d0 <sd_mmc_spi_read_word+0x28>
    1424:	4b0e      	ldr	r3, [pc, #56]	; (1460 <sd_mmc_spi_read_word+0xb8>)
    1426:	881c      	ldrh	r4, [r3, #0]
    1428:	4b0e      	ldr	r3, [pc, #56]	; (1464 <sd_mmc_spi_read_word+0xbc>)
    142a:	8819      	ldrh	r1, [r3, #0]
    142c:	4b0e      	ldr	r3, [pc, #56]	; (1468 <sd_mmc_spi_read_word+0xc0>)
    142e:	6818      	ldr	r0, [r3, #0]
    1430:	4b0e      	ldr	r3, [pc, #56]	; (146c <sd_mmc_spi_read_word+0xc4>)
    1432:	4798      	blx	r3
    1434:	4284      	cmp	r4, r0
    1436:	d8cb      	bhi.n	13d0 <sd_mmc_spi_read_word+0x28>
    1438:	4b13      	ldr	r3, [pc, #76]	; (1488 <sd_mmc_spi_read_word+0xe0>)
    143a:	4a14      	ldr	r2, [pc, #80]	; (148c <sd_mmc_spi_read_word+0xe4>)
    143c:	4910      	ldr	r1, [pc, #64]	; (1480 <sd_mmc_spi_read_word+0xd8>)
    143e:	4815      	ldr	r0, [pc, #84]	; (1494 <sd_mmc_spi_read_word+0xec>)
    1440:	4c15      	ldr	r4, [pc, #84]	; (1498 <sd_mmc_spi_read_word+0xf0>)
    1442:	47a0      	blx	r4
    1444:	e7fe      	b.n	1444 <sd_mmc_spi_read_word+0x9c>
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1446:	23ff      	movs	r3, #255	; 0xff
    1448:	2202      	movs	r2, #2
    144a:	a905      	add	r1, sp, #20
    144c:	480a      	ldr	r0, [pc, #40]	; (1478 <sd_mmc_spi_read_word+0xd0>)
    144e:	4c0b      	ldr	r4, [pc, #44]	; (147c <sd_mmc_spi_read_word+0xd4>)
    1450:	47a0      	blx	r4
	return true;
    1452:	2001      	movs	r0, #1
    1454:	e7d9      	b.n	140a <sd_mmc_spi_read_word+0x62>
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	20000103 	.word	0x20000103
    145c:	2000011c 	.word	0x2000011c
    1460:	20000104 	.word	0x20000104
    1464:	200000fc 	.word	0x200000fc
    1468:	2000010c 	.word	0x2000010c
    146c:	000056cd 	.word	0x000056cd
    1470:	000057d9 	.word	0x000057d9
    1474:	00000d7d 	.word	0x00000d7d
    1478:	200000c0 	.word	0x200000c0
    147c:	00002775 	.word	0x00002775
    1480:	00006d8c 	.word	0x00006d8c
    1484:	00006c40 	.word	0x00006c40
    1488:	0000020d 	.word	0x0000020d
    148c:	00006dfc 	.word	0x00006dfc
    1490:	000017e1 	.word	0x000017e1
    1494:	00006c58 	.word	0x00006c58
    1498:	00006055 	.word	0x00006055

0000149c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    149c:	b5f0      	push	{r4, r5, r6, r7, lr}
    149e:	46de      	mov	lr, fp
    14a0:	4657      	mov	r7, sl
    14a2:	4646      	mov	r6, r8
    14a4:	b5c0      	push	{r6, r7, lr}
    14a6:	b084      	sub	sp, #16
    14a8:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    14aa:	2200      	movs	r2, #0
    14ac:	4b2d      	ldr	r3, [pc, #180]	; (1564 <sd_mmc_spi_start_read_blocks+0xc8>)
    14ae:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    14b0:	1e4c      	subs	r4, r1, #1
    14b2:	b2a4      	uxth	r4, r4
    14b4:	2900      	cmp	r1, #0
    14b6:	d04b      	beq.n	1550 <sd_mmc_spi_start_read_blocks+0xb4>
    14b8:	2600      	movs	r6, #0
    14ba:	4b2b      	ldr	r3, [pc, #172]	; (1568 <sd_mmc_spi_start_read_blocks+0xcc>)
    14bc:	469a      	mov	sl, r3
    14be:	e027      	b.n	1510 <sd_mmc_spi_start_read_blocks+0x74>
		Assert(sd_mmc_spi_nb_block >
    14c0:	4b2a      	ldr	r3, [pc, #168]	; (156c <sd_mmc_spi_start_read_blocks+0xd0>)
    14c2:	881d      	ldrh	r5, [r3, #0]
    14c4:	4b2a      	ldr	r3, [pc, #168]	; (1570 <sd_mmc_spi_start_read_blocks+0xd4>)
    14c6:	8819      	ldrh	r1, [r3, #0]
    14c8:	4b2a      	ldr	r3, [pc, #168]	; (1574 <sd_mmc_spi_start_read_blocks+0xd8>)
    14ca:	6818      	ldr	r0, [r3, #0]
    14cc:	4b2a      	ldr	r3, [pc, #168]	; (1578 <sd_mmc_spi_start_read_blocks+0xdc>)
    14ce:	4798      	blx	r3
    14d0:	4285      	cmp	r5, r0
    14d2:	d936      	bls.n	1542 <sd_mmc_spi_start_read_blocks+0xa6>
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    14d4:	4b29      	ldr	r3, [pc, #164]	; (157c <sd_mmc_spi_start_read_blocks+0xe0>)
    14d6:	4798      	blx	r3
    14d8:	4680      	mov	r8, r0
    14da:	2800      	cmp	r0, #0
    14dc:	d03a      	beq.n	1554 <sd_mmc_spi_start_read_blocks+0xb8>
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    14de:	4d24      	ldr	r5, [pc, #144]	; (1570 <sd_mmc_spi_start_read_blocks+0xd4>)
    14e0:	882a      	ldrh	r2, [r5, #0]
    14e2:	465b      	mov	r3, fp
    14e4:	1999      	adds	r1, r3, r6
    14e6:	23ff      	movs	r3, #255	; 0xff
    14e8:	4825      	ldr	r0, [pc, #148]	; (1580 <sd_mmc_spi_start_read_blocks+0xe4>)
    14ea:	4f26      	ldr	r7, [pc, #152]	; (1584 <sd_mmc_spi_start_read_blocks+0xe8>)
    14ec:	47b8      	blx	r7
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    14ee:	882b      	ldrh	r3, [r5, #0]
    14f0:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    14f2:	4a20      	ldr	r2, [pc, #128]	; (1574 <sd_mmc_spi_start_read_blocks+0xd8>)
    14f4:	6811      	ldr	r1, [r2, #0]
    14f6:	468c      	mov	ip, r1
    14f8:	4463      	add	r3, ip
    14fa:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    14fc:	23ff      	movs	r3, #255	; 0xff
    14fe:	2202      	movs	r2, #2
    1500:	a903      	add	r1, sp, #12
    1502:	481f      	ldr	r0, [pc, #124]	; (1580 <sd_mmc_spi_start_read_blocks+0xe4>)
    1504:	47b8      	blx	r7
	while (nb_block--) {
    1506:	3c01      	subs	r4, #1
    1508:	b2a4      	uxth	r4, r4
    150a:	4b1f      	ldr	r3, [pc, #124]	; (1588 <sd_mmc_spi_start_read_blocks+0xec>)
    150c:	429c      	cmp	r4, r3
    150e:	d021      	beq.n	1554 <sd_mmc_spi_start_read_blocks+0xb8>
    1510:	4653      	mov	r3, sl
    1512:	681d      	ldr	r5, [r3, #0]
		Assert(sd_mmc_spi_nb_block >
    1514:	2d00      	cmp	r5, #0
    1516:	d0d3      	beq.n	14c0 <sd_mmc_spi_start_read_blocks+0x24>
    1518:	4b14      	ldr	r3, [pc, #80]	; (156c <sd_mmc_spi_start_read_blocks+0xd0>)
    151a:	881f      	ldrh	r7, [r3, #0]
    151c:	4b14      	ldr	r3, [pc, #80]	; (1570 <sd_mmc_spi_start_read_blocks+0xd4>)
    151e:	8819      	ldrh	r1, [r3, #0]
    1520:	4b14      	ldr	r3, [pc, #80]	; (1574 <sd_mmc_spi_start_read_blocks+0xd8>)
    1522:	6818      	ldr	r0, [r3, #0]
    1524:	4b14      	ldr	r3, [pc, #80]	; (1578 <sd_mmc_spi_start_read_blocks+0xdc>)
    1526:	4798      	blx	r3
    1528:	4287      	cmp	r7, r0
    152a:	d8d3      	bhi.n	14d4 <sd_mmc_spi_start_read_blocks+0x38>
    152c:	4b17      	ldr	r3, [pc, #92]	; (158c <sd_mmc_spi_start_read_blocks+0xf0>)
    152e:	9301      	str	r3, [sp, #4]
    1530:	4b17      	ldr	r3, [pc, #92]	; (1590 <sd_mmc_spi_start_read_blocks+0xf4>)
    1532:	9300      	str	r3, [sp, #0]
    1534:	4b17      	ldr	r3, [pc, #92]	; (1594 <sd_mmc_spi_start_read_blocks+0xf8>)
    1536:	4a18      	ldr	r2, [pc, #96]	; (1598 <sd_mmc_spi_start_read_blocks+0xfc>)
    1538:	2101      	movs	r1, #1
    153a:	0028      	movs	r0, r5
    153c:	4d17      	ldr	r5, [pc, #92]	; (159c <sd_mmc_spi_start_read_blocks+0x100>)
    153e:	47a8      	blx	r5
    1540:	e7c8      	b.n	14d4 <sd_mmc_spi_start_read_blocks+0x38>
    1542:	4b14      	ldr	r3, [pc, #80]	; (1594 <sd_mmc_spi_start_read_blocks+0xf8>)
    1544:	4a14      	ldr	r2, [pc, #80]	; (1598 <sd_mmc_spi_start_read_blocks+0xfc>)
    1546:	4911      	ldr	r1, [pc, #68]	; (158c <sd_mmc_spi_start_read_blocks+0xf0>)
    1548:	4815      	ldr	r0, [pc, #84]	; (15a0 <sd_mmc_spi_start_read_blocks+0x104>)
    154a:	4c16      	ldr	r4, [pc, #88]	; (15a4 <sd_mmc_spi_start_read_blocks+0x108>)
    154c:	47a0      	blx	r4
    154e:	e7fe      	b.n	154e <sd_mmc_spi_start_read_blocks+0xb2>

		sd_mmc_spi_stop_read_block();
	}
	return true;
    1550:	2301      	movs	r3, #1
    1552:	4698      	mov	r8, r3
}
    1554:	4640      	mov	r0, r8
    1556:	b004      	add	sp, #16
    1558:	bc1c      	pop	{r2, r3, r4}
    155a:	4690      	mov	r8, r2
    155c:	469a      	mov	sl, r3
    155e:	46a3      	mov	fp, r4
    1560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	20000103 	.word	0x20000103
    1568:	2000011c 	.word	0x2000011c
    156c:	20000104 	.word	0x20000104
    1570:	200000fc 	.word	0x200000fc
    1574:	2000010c 	.word	0x2000010c
    1578:	000056cd 	.word	0x000056cd
    157c:	00000d7d 	.word	0x00000d7d
    1580:	200000c0 	.word	0x200000c0
    1584:	00002775 	.word	0x00002775
    1588:	0000ffff 	.word	0x0000ffff
    158c:	00006d8c 	.word	0x00006d8c
    1590:	00006c40 	.word	0x00006c40
    1594:	0000024a 	.word	0x0000024a
    1598:	00006dfc 	.word	0x00006dfc
    159c:	000017e1 	.word	0x000017e1
    15a0:	00006c58 	.word	0x00006c58
    15a4:	00006055 	.word	0x00006055

000015a8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    15a8:	2001      	movs	r0, #1
    15aa:	4770      	bx	lr

000015ac <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    15ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ae:	46de      	mov	lr, fp
    15b0:	464f      	mov	r7, r9
    15b2:	4646      	mov	r6, r8
    15b4:	b5c0      	push	{r6, r7, lr}
    15b6:	b082      	sub	sp, #8
    15b8:	4681      	mov	r9, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    15ba:	2200      	movs	r2, #0
    15bc:	4b2d      	ldr	r3, [pc, #180]	; (1674 <sd_mmc_spi_start_write_blocks+0xc8>)
    15be:	701a      	strb	r2, [r3, #0]
	pos = 0;
    15c0:	2600      	movs	r6, #0
    15c2:	4f2d      	ldr	r7, [pc, #180]	; (1678 <sd_mmc_spi_start_write_blocks+0xcc>)
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
    15c4:	4b2d      	ldr	r3, [pc, #180]	; (167c <sd_mmc_spi_start_write_blocks+0xd0>)
    15c6:	4698      	mov	r8, r3
	while (nb_block--) {
    15c8:	e020      	b.n	160c <sd_mmc_spi_start_write_blocks+0x60>
		Assert(sd_mmc_spi_nb_block >
    15ca:	4b2d      	ldr	r3, [pc, #180]	; (1680 <sd_mmc_spi_start_write_blocks+0xd4>)
    15cc:	881d      	ldrh	r5, [r3, #0]
    15ce:	4b2d      	ldr	r3, [pc, #180]	; (1684 <sd_mmc_spi_start_write_blocks+0xd8>)
    15d0:	8819      	ldrh	r1, [r3, #0]
    15d2:	4643      	mov	r3, r8
    15d4:	6818      	ldr	r0, [r3, #0]
    15d6:	4b2c      	ldr	r3, [pc, #176]	; (1688 <sd_mmc_spi_start_write_blocks+0xdc>)
    15d8:	4798      	blx	r3
    15da:	4285      	cmp	r5, r0
    15dc:	d933      	bls.n	1646 <sd_mmc_spi_start_write_blocks+0x9a>
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    15de:	4b2b      	ldr	r3, [pc, #172]	; (168c <sd_mmc_spi_start_write_blocks+0xe0>)
    15e0:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    15e2:	4d28      	ldr	r5, [pc, #160]	; (1684 <sd_mmc_spi_start_write_blocks+0xd8>)
    15e4:	882a      	ldrh	r2, [r5, #0]
    15e6:	464b      	mov	r3, r9
    15e8:	1999      	adds	r1, r3, r6
    15ea:	4829      	ldr	r0, [pc, #164]	; (1690 <sd_mmc_spi_start_write_blocks+0xe4>)
    15ec:	4b29      	ldr	r3, [pc, #164]	; (1694 <sd_mmc_spi_start_write_blocks+0xe8>)
    15ee:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    15f0:	882b      	ldrh	r3, [r5, #0]
    15f2:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    15f4:	4a21      	ldr	r2, [pc, #132]	; (167c <sd_mmc_spi_start_write_blocks+0xd0>)
    15f6:	6811      	ldr	r1, [r2, #0]
    15f8:	468c      	mov	ip, r1
    15fa:	4463      	add	r3, ip
    15fc:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    15fe:	4b26      	ldr	r3, [pc, #152]	; (1698 <sd_mmc_spi_start_write_blocks+0xec>)
    1600:	4798      	blx	r3
    1602:	2800      	cmp	r0, #0
    1604:	d02f      	beq.n	1666 <sd_mmc_spi_start_write_blocks+0xba>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1606:	2c00      	cmp	r4, #0
    1608:	d124      	bne.n	1654 <sd_mmc_spi_start_write_blocks+0xa8>
{
    160a:	0021      	movs	r1, r4
	while (nb_block--) {
    160c:	1e4c      	subs	r4, r1, #1
    160e:	b2a4      	uxth	r4, r4
    1610:	2900      	cmp	r1, #0
    1612:	d027      	beq.n	1664 <sd_mmc_spi_start_write_blocks+0xb8>
    1614:	683d      	ldr	r5, [r7, #0]
		Assert(sd_mmc_spi_nb_block >
    1616:	2d00      	cmp	r5, #0
    1618:	d0d7      	beq.n	15ca <sd_mmc_spi_start_write_blocks+0x1e>
    161a:	4b19      	ldr	r3, [pc, #100]	; (1680 <sd_mmc_spi_start_write_blocks+0xd4>)
    161c:	881b      	ldrh	r3, [r3, #0]
    161e:	469b      	mov	fp, r3
    1620:	4b18      	ldr	r3, [pc, #96]	; (1684 <sd_mmc_spi_start_write_blocks+0xd8>)
    1622:	8819      	ldrh	r1, [r3, #0]
    1624:	4b15      	ldr	r3, [pc, #84]	; (167c <sd_mmc_spi_start_write_blocks+0xd0>)
    1626:	6818      	ldr	r0, [r3, #0]
    1628:	4b17      	ldr	r3, [pc, #92]	; (1688 <sd_mmc_spi_start_write_blocks+0xdc>)
    162a:	4798      	blx	r3
    162c:	4583      	cmp	fp, r0
    162e:	d8d6      	bhi.n	15de <sd_mmc_spi_start_write_blocks+0x32>
    1630:	4b1a      	ldr	r3, [pc, #104]	; (169c <sd_mmc_spi_start_write_blocks+0xf0>)
    1632:	9301      	str	r3, [sp, #4]
    1634:	4b1a      	ldr	r3, [pc, #104]	; (16a0 <sd_mmc_spi_start_write_blocks+0xf4>)
    1636:	9300      	str	r3, [sp, #0]
    1638:	4b1a      	ldr	r3, [pc, #104]	; (16a4 <sd_mmc_spi_start_write_blocks+0xf8>)
    163a:	4a1b      	ldr	r2, [pc, #108]	; (16a8 <sd_mmc_spi_start_write_blocks+0xfc>)
    163c:	2101      	movs	r1, #1
    163e:	0028      	movs	r0, r5
    1640:	4d1a      	ldr	r5, [pc, #104]	; (16ac <sd_mmc_spi_start_write_blocks+0x100>)
    1642:	47a8      	blx	r5
    1644:	e7cb      	b.n	15de <sd_mmc_spi_start_write_blocks+0x32>
    1646:	4b17      	ldr	r3, [pc, #92]	; (16a4 <sd_mmc_spi_start_write_blocks+0xf8>)
    1648:	4a17      	ldr	r2, [pc, #92]	; (16a8 <sd_mmc_spi_start_write_blocks+0xfc>)
    164a:	4914      	ldr	r1, [pc, #80]	; (169c <sd_mmc_spi_start_write_blocks+0xf0>)
    164c:	4818      	ldr	r0, [pc, #96]	; (16b0 <sd_mmc_spi_start_write_blocks+0x104>)
    164e:	4c19      	ldr	r4, [pc, #100]	; (16b4 <sd_mmc_spi_start_write_blocks+0x108>)
    1650:	47a0      	blx	r4
    1652:	e7fe      	b.n	1652 <sd_mmc_spi_start_write_blocks+0xa6>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1654:	4b18      	ldr	r3, [pc, #96]	; (16b8 <sd_mmc_spi_start_write_blocks+0x10c>)
    1656:	4798      	blx	r3
    1658:	2800      	cmp	r0, #0
    165a:	d1d6      	bne.n	160a <sd_mmc_spi_start_write_blocks+0x5e>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    165c:	2205      	movs	r2, #5
    165e:	4b05      	ldr	r3, [pc, #20]	; (1674 <sd_mmc_spi_start_write_blocks+0xc8>)
    1660:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1662:	e000      	b.n	1666 <sd_mmc_spi_start_write_blocks+0xba>
			}
		}
	}
	return true;
    1664:	2001      	movs	r0, #1
}
    1666:	b002      	add	sp, #8
    1668:	bc1c      	pop	{r2, r3, r4}
    166a:	4690      	mov	r8, r2
    166c:	4699      	mov	r9, r3
    166e:	46a3      	mov	fp, r4
    1670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	20000103 	.word	0x20000103
    1678:	2000011c 	.word	0x2000011c
    167c:	2000010c 	.word	0x2000010c
    1680:	20000104 	.word	0x20000104
    1684:	200000fc 	.word	0x200000fc
    1688:	000056cd 	.word	0x000056cd
    168c:	00000bdd 	.word	0x00000bdd
    1690:	200000c0 	.word	0x200000c0
    1694:	00003131 	.word	0x00003131
    1698:	00000e99 	.word	0x00000e99
    169c:	00006d8c 	.word	0x00006d8c
    16a0:	00006c40 	.word	0x00006c40
    16a4:	00000267 	.word	0x00000267
    16a8:	00006dfc 	.word	0x00006dfc
    16ac:	000017e1 	.word	0x000017e1
    16b0:	00006c58 	.word	0x00006c58
    16b4:	00006055 	.word	0x00006055
    16b8:	00000ca1 	.word	0x00000ca1

000016bc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    16bc:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    16be:	4b05      	ldr	r3, [pc, #20]	; (16d4 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    16c0:	4798      	blx	r3
    16c2:	2800      	cmp	r0, #0
    16c4:	d103      	bne.n	16ce <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    16c6:	2205      	movs	r2, #5
    16c8:	4b03      	ldr	r3, [pc, #12]	; (16d8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    16ca:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    16cc:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    16ce:	4b03      	ldr	r3, [pc, #12]	; (16dc <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    16d0:	4798      	blx	r3
    16d2:	e7fb      	b.n	16cc <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    16d4:	00000ca1 	.word	0x00000ca1
    16d8:	20000103 	.word	0x20000103
    16dc:	00000d05 	.word	0x00000d05

000016e0 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    16e0:	4770      	bx	lr
	...

000016e4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    16e4:	4b0c      	ldr	r3, [pc, #48]	; (1718 <cpu_irq_enter_critical+0x34>)
    16e6:	681b      	ldr	r3, [r3, #0]
    16e8:	2b00      	cmp	r3, #0
    16ea:	d106      	bne.n	16fa <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    16ec:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    16f0:	2b00      	cmp	r3, #0
    16f2:	d007      	beq.n	1704 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    16f4:	2200      	movs	r2, #0
    16f6:	4b09      	ldr	r3, [pc, #36]	; (171c <cpu_irq_enter_critical+0x38>)
    16f8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    16fa:	4a07      	ldr	r2, [pc, #28]	; (1718 <cpu_irq_enter_critical+0x34>)
    16fc:	6813      	ldr	r3, [r2, #0]
    16fe:	3301      	adds	r3, #1
    1700:	6013      	str	r3, [r2, #0]
}
    1702:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1704:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1706:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    170a:	2200      	movs	r2, #0
    170c:	4b04      	ldr	r3, [pc, #16]	; (1720 <cpu_irq_enter_critical+0x3c>)
    170e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1710:	3201      	adds	r2, #1
    1712:	4b02      	ldr	r3, [pc, #8]	; (171c <cpu_irq_enter_critical+0x38>)
    1714:	701a      	strb	r2, [r3, #0]
    1716:	e7f0      	b.n	16fa <cpu_irq_enter_critical+0x16>
    1718:	20000114 	.word	0x20000114
    171c:	20000118 	.word	0x20000118
    1720:	20000031 	.word	0x20000031

00001724 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    1724:	b510      	push	{r4, lr}
    1726:	b082      	sub	sp, #8
    1728:	4b17      	ldr	r3, [pc, #92]	; (1788 <cpu_irq_leave_critical+0x64>)
    172a:	6818      	ldr	r0, [r3, #0]
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);
    172c:	2800      	cmp	r0, #0
    172e:	d020      	beq.n	1772 <cpu_irq_leave_critical+0x4e>
    1730:	4b16      	ldr	r3, [pc, #88]	; (178c <cpu_irq_leave_critical+0x68>)
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	2b00      	cmp	r3, #0
    1736:	d012      	beq.n	175e <cpu_irq_leave_critical+0x3a>

	cpu_irq_critical_section_counter--;
    1738:	4b14      	ldr	r3, [pc, #80]	; (178c <cpu_irq_leave_critical+0x68>)
    173a:	681a      	ldr	r2, [r3, #0]
    173c:	3a01      	subs	r2, #1
    173e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1740:	681b      	ldr	r3, [r3, #0]
    1742:	2b00      	cmp	r3, #0
    1744:	d109      	bne.n	175a <cpu_irq_leave_critical+0x36>
    1746:	4b12      	ldr	r3, [pc, #72]	; (1790 <cpu_irq_leave_critical+0x6c>)
    1748:	781b      	ldrb	r3, [r3, #0]
    174a:	2b00      	cmp	r3, #0
    174c:	d005      	beq.n	175a <cpu_irq_leave_critical+0x36>
		cpu_irq_enable();
    174e:	2201      	movs	r2, #1
    1750:	4b10      	ldr	r3, [pc, #64]	; (1794 <cpu_irq_leave_critical+0x70>)
    1752:	701a      	strb	r2, [r3, #0]
    1754:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1758:	b662      	cpsie	i
	}
}
    175a:	b002      	add	sp, #8
    175c:	bd10      	pop	{r4, pc}
	Assert(cpu_irq_critical_section_counter > 0);
    175e:	4b0e      	ldr	r3, [pc, #56]	; (1798 <cpu_irq_leave_critical+0x74>)
    1760:	9301      	str	r3, [sp, #4]
    1762:	4b0e      	ldr	r3, [pc, #56]	; (179c <cpu_irq_leave_critical+0x78>)
    1764:	9300      	str	r3, [sp, #0]
    1766:	234c      	movs	r3, #76	; 0x4c
    1768:	4a0d      	ldr	r2, [pc, #52]	; (17a0 <cpu_irq_leave_critical+0x7c>)
    176a:	2101      	movs	r1, #1
    176c:	4c0d      	ldr	r4, [pc, #52]	; (17a4 <cpu_irq_leave_critical+0x80>)
    176e:	47a0      	blx	r4
    1770:	e7e2      	b.n	1738 <cpu_irq_leave_critical+0x14>
    1772:	4b06      	ldr	r3, [pc, #24]	; (178c <cpu_irq_leave_critical+0x68>)
    1774:	681b      	ldr	r3, [r3, #0]
    1776:	2b00      	cmp	r3, #0
    1778:	d1de      	bne.n	1738 <cpu_irq_leave_critical+0x14>
    177a:	334c      	adds	r3, #76	; 0x4c
    177c:	4a08      	ldr	r2, [pc, #32]	; (17a0 <cpu_irq_leave_critical+0x7c>)
    177e:	4906      	ldr	r1, [pc, #24]	; (1798 <cpu_irq_leave_critical+0x74>)
    1780:	4809      	ldr	r0, [pc, #36]	; (17a8 <cpu_irq_leave_critical+0x84>)
    1782:	4c0a      	ldr	r4, [pc, #40]	; (17ac <cpu_irq_leave_critical+0x88>)
    1784:	47a0      	blx	r4
    1786:	e7fe      	b.n	1786 <cpu_irq_leave_critical+0x62>
    1788:	2000011c 	.word	0x2000011c
    178c:	20000114 	.word	0x20000114
    1790:	20000118 	.word	0x20000118
    1794:	20000031 	.word	0x20000031
    1798:	00006ea4 	.word	0x00006ea4
    179c:	00006c40 	.word	0x00006c40
    17a0:	00006e6c 	.word	0x00006e6c
    17a4:	000017e1 	.word	0x000017e1
    17a8:	00006c58 	.word	0x00006c58
    17ac:	00006055 	.word	0x00006055

000017b0 <test_call>:
 * \return #TEST_PASS if \a func was executed successfully, or the
 * result value passed to test_fail() on failure.
 */
static int test_call(void (*func)(const struct test_case *),
		const struct test_case *test)
{
    17b0:	b510      	push	{r4, lr}
    17b2:	b082      	sub	sp, #8
    17b4:	9000      	str	r0, [sp, #0]
    17b6:	9101      	str	r1, [sp, #4]
	int ret = 0;

	if (!func) {
    17b8:	2800      	cmp	r0, #0
    17ba:	d00b      	beq.n	17d4 <test_call+0x24>
	/*
	 * The first call to setjmp() always return 0. However, if the
	 * call to func() below goes wrong, we'll return here again with
	 * a nonzero value.
	 */
	ret = setjmp(test_failure_jmpbuf);
    17bc:	4806      	ldr	r0, [pc, #24]	; (17d8 <test_call+0x28>)
    17be:	4b07      	ldr	r3, [pc, #28]	; (17dc <test_call+0x2c>)
    17c0:	4798      	blx	r3
    17c2:	1e04      	subs	r4, r0, #0
	if (ret) {
    17c4:	d002      	beq.n	17cc <test_call+0x1c>
	}

	func(test);

	return TEST_PASS;
}
    17c6:	0020      	movs	r0, r4
    17c8:	b002      	add	sp, #8
    17ca:	bd10      	pop	{r4, pc}
	func(test);
    17cc:	9801      	ldr	r0, [sp, #4]
    17ce:	9b00      	ldr	r3, [sp, #0]
    17d0:	4798      	blx	r3
    17d2:	e7f8      	b.n	17c6 <test_call+0x16>
		return TEST_PASS;
    17d4:	2400      	movs	r4, #0
    17d6:	e7f6      	b.n	17c6 <test_call+0x16>
    17d8:	20000120 	.word	0x20000120
    17dc:	0000616f 	.word	0x0000616f

000017e0 <test_case_fail>:
 * \param ... Values to insert into failure message.
 */
void test_case_fail(const struct test_case *test, int result,
		const char *file, unsigned int line,
		const char *fmt, ...)
{
    17e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e2:	b083      	sub	sp, #12
    17e4:	000c      	movs	r4, r1
    17e6:	ad08      	add	r5, sp, #32
    17e8:	cd80      	ldmia	r5!, {r7}
	va_list ap;

	dbg_error("Test '%s' failed at %s:%u:\r\n\t", test->name, file, line);
    17ea:	68c1      	ldr	r1, [r0, #12]
    17ec:	4819      	ldr	r0, [pc, #100]	; (1854 <test_case_fail+0x74>)
    17ee:	4e1a      	ldr	r6, [pc, #104]	; (1858 <test_case_fail+0x78>)
    17f0:	47b0      	blx	r6

	va_start(ap, fmt);
    17f2:	9501      	str	r5, [sp, #4]
	dbg_vprintf_pgm(fmt, ap);
    17f4:	4e19      	ldr	r6, [pc, #100]	; (185c <test_case_fail+0x7c>)
    17f6:	6833      	ldr	r3, [r6, #0]
    17f8:	6898      	ldr	r0, [r3, #8]
    17fa:	002a      	movs	r2, r5
    17fc:	0039      	movs	r1, r7
    17fe:	4b18      	ldr	r3, [pc, #96]	; (1860 <test_case_fail+0x80>)
    1800:	4798      	blx	r3
	va_end(ap);
	dbg_putchar('\r');
    1802:	6830      	ldr	r0, [r6, #0]
    1804:	6882      	ldr	r2, [r0, #8]
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
    1806:	6893      	ldr	r3, [r2, #8]
    1808:	3b01      	subs	r3, #1
    180a:	6093      	str	r3, [r2, #8]
    180c:	2b00      	cmp	r3, #0
    180e:	db15      	blt.n	183c <test_case_fail+0x5c>
		return (*_p->_p++ = _c);
    1810:	6813      	ldr	r3, [r2, #0]
    1812:	1c59      	adds	r1, r3, #1
    1814:	6011      	str	r1, [r2, #0]
    1816:	220d      	movs	r2, #13
    1818:	701a      	strb	r2, [r3, #0]
	dbg_putchar('\n');
    181a:	4b10      	ldr	r3, [pc, #64]	; (185c <test_case_fail+0x7c>)
    181c:	6818      	ldr	r0, [r3, #0]
    181e:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
    1820:	6893      	ldr	r3, [r2, #8]
    1822:	3b01      	subs	r3, #1
    1824:	6093      	str	r3, [r2, #8]
    1826:	2b00      	cmp	r3, #0
    1828:	db0f      	blt.n	184a <test_case_fail+0x6a>
		return (*_p->_p++ = _c);
    182a:	6813      	ldr	r3, [r2, #0]
    182c:	1c59      	adds	r1, r3, #1
    182e:	6011      	str	r1, [r2, #0]
    1830:	220a      	movs	r2, #10
    1832:	701a      	strb	r2, [r3, #0]

	/*
	 * This will cause the setjmp() call in test_call() to return
	 * TEST_FAIL.
	 */
	longjmp(test_failure_jmpbuf, result);
    1834:	0021      	movs	r1, r4
    1836:	480b      	ldr	r0, [pc, #44]	; (1864 <test_case_fail+0x84>)
    1838:	4b0b      	ldr	r3, [pc, #44]	; (1868 <test_case_fail+0x88>)
    183a:	4798      	blx	r3
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
    183c:	6991      	ldr	r1, [r2, #24]
    183e:	428b      	cmp	r3, r1
    1840:	dae6      	bge.n	1810 <test_case_fail+0x30>
	else
		return (__swbuf_r(_ptr, _c, _p));
    1842:	210d      	movs	r1, #13
    1844:	4b09      	ldr	r3, [pc, #36]	; (186c <test_case_fail+0x8c>)
    1846:	4798      	blx	r3
    1848:	e7e7      	b.n	181a <test_case_fail+0x3a>
    184a:	210a      	movs	r1, #10
    184c:	4b07      	ldr	r3, [pc, #28]	; (186c <test_case_fail+0x8c>)
    184e:	4798      	blx	r3
    1850:	e7f0      	b.n	1834 <test_case_fail+0x54>
    1852:	46c0      	nop			; (mov r8, r8)
    1854:	00006ecc 	.word	0x00006ecc
    1858:	00006055 	.word	0x00006055
    185c:	20000034 	.word	0x20000034
    1860:	00005d2d 	.word	0x00005d2d
    1864:	20000120 	.word	0x20000120
    1868:	00006187 	.word	0x00006187
    186c:	000062fd 	.word	0x000062fd

00001870 <test_suite_run>:
 * the array.
 *
 * \return The number of tests that didn't pass.
 */
int test_suite_run(const struct test_suite *suite)
{
    1870:	b5f0      	push	{r4, r5, r6, r7, lr}
    1872:	46de      	mov	lr, fp
    1874:	4657      	mov	r7, sl
    1876:	464e      	mov	r6, r9
    1878:	4645      	mov	r5, r8
    187a:	b5e0      	push	{r5, r6, r7, lr}
    187c:	b085      	sub	sp, #20
    187e:	0007      	movs	r7, r0
	unsigned int nr_failures = 0;
	unsigned int nr_errors = 0;
	unsigned int i;
	int          ret;

	dbg_info("Running test suite '%s'...\r\n", suite->name);
    1880:	6881      	ldr	r1, [r0, #8]
    1882:	483a      	ldr	r0, [pc, #232]	; (196c <test_suite_run+0xfc>)
    1884:	4b3a      	ldr	r3, [pc, #232]	; (1970 <test_suite_run+0x100>)
    1886:	4798      	blx	r3

	for (i = 0; i < suite->nr_tests; i++) {
    1888:	683b      	ldr	r3, [r7, #0]
    188a:	4698      	mov	r8, r3
    188c:	2b00      	cmp	r3, #0
    188e:	d06a      	beq.n	1966 <test_suite_run+0xf6>
    1890:	2600      	movs	r6, #0
    1892:	2300      	movs	r3, #0
    1894:	4699      	mov	r9, r3
    1896:	4698      	mov	r8, r3
	test_case_ptr = (struct test_case *)test;
    1898:	4b36      	ldr	r3, [pc, #216]	; (1974 <test_suite_run+0x104>)
    189a:	469b      	mov	fp, r3
	dbg_info("Running test: %s\r\n", test->name);
    189c:	4b34      	ldr	r3, [pc, #208]	; (1970 <test_suite_run+0x100>)
    189e:	469a      	mov	sl, r3
    18a0:	9703      	str	r7, [sp, #12]
    18a2:	e01b      	b.n	18dc <test_suite_run+0x6c>
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
    18a4:	68e1      	ldr	r1, [r4, #12]
    18a6:	0003      	movs	r3, r0
    18a8:	4a33      	ldr	r2, [pc, #204]	; (1978 <test_suite_run+0x108>)
    18aa:	4834      	ldr	r0, [pc, #208]	; (197c <test_suite_run+0x10c>)
    18ac:	4c30      	ldr	r4, [pc, #192]	; (1970 <test_suite_run+0x100>)
    18ae:	47a0      	blx	r4
    18b0:	e009      	b.n	18c6 <test_suite_run+0x56>
    18b2:	0003      	movs	r3, r0
    18b4:	4a32      	ldr	r2, [pc, #200]	; (1980 <test_suite_run+0x110>)
    18b6:	68e1      	ldr	r1, [r4, #12]
    18b8:	4830      	ldr	r0, [pc, #192]	; (197c <test_suite_run+0x10c>)
    18ba:	4f2d      	ldr	r7, [pc, #180]	; (1970 <test_suite_run+0x100>)
    18bc:	47b8      	blx	r7
    18be:	e028      	b.n	1912 <test_suite_run+0xa2>
    18c0:	2200      	movs	r2, #0
    18c2:	4b2c      	ldr	r3, [pc, #176]	; (1974 <test_suite_run+0x104>)
    18c4:	601a      	str	r2, [r3, #0]
		const struct test_case *test;

		test = suite->tests[i];
		ret = test_case_run(test);
		if (ret < TEST_PASS) {
    18c6:	2d00      	cmp	r5, #0
    18c8:	db38      	blt.n	193c <test_suite_run+0xcc>
			nr_errors++;
		} else if (ret > TEST_PASS) {
			nr_failures++;
    18ca:	17eb      	asrs	r3, r5, #31
    18cc:	1b5d      	subs	r5, r3, r5
    18ce:	0fed      	lsrs	r5, r5, #31
    18d0:	44a8      	add	r8, r5
	for (i = 0; i < suite->nr_tests; i++) {
    18d2:	3601      	adds	r6, #1
    18d4:	9b03      	ldr	r3, [sp, #12]
    18d6:	681a      	ldr	r2, [r3, #0]
    18d8:	42b2      	cmp	r2, r6
    18da:	d933      	bls.n	1944 <test_suite_run+0xd4>
		test = suite->tests[i];
    18dc:	00b3      	lsls	r3, r6, #2
    18de:	9a03      	ldr	r2, [sp, #12]
    18e0:	6852      	ldr	r2, [r2, #4]
    18e2:	589c      	ldr	r4, [r3, r2]
    18e4:	465b      	mov	r3, fp
    18e6:	601c      	str	r4, [r3, #0]
	dbg_info("Running test: %s\r\n", test->name);
    18e8:	68e1      	ldr	r1, [r4, #12]
    18ea:	4826      	ldr	r0, [pc, #152]	; (1984 <test_suite_run+0x114>)
    18ec:	47d0      	blx	sl
	if (test->setup) {
    18ee:	6823      	ldr	r3, [r4, #0]
    18f0:	2b00      	cmp	r3, #0
    18f2:	d008      	beq.n	1906 <test_suite_run+0x96>
		dbg("Setting up fixture\r\n");
    18f4:	4824      	ldr	r0, [pc, #144]	; (1988 <test_suite_run+0x118>)
    18f6:	4b25      	ldr	r3, [pc, #148]	; (198c <test_suite_run+0x11c>)
    18f8:	4798      	blx	r3
		ret = test_call(test->setup, test);
    18fa:	0021      	movs	r1, r4
    18fc:	6820      	ldr	r0, [r4, #0]
    18fe:	4b24      	ldr	r3, [pc, #144]	; (1990 <test_suite_run+0x120>)
    1900:	4798      	blx	r3
    1902:	1e05      	subs	r5, r0, #0
		if (ret) {
    1904:	d1ce      	bne.n	18a4 <test_suite_run+0x34>
	result = test_call(test->run, test);
    1906:	0021      	movs	r1, r4
    1908:	6860      	ldr	r0, [r4, #4]
    190a:	4b21      	ldr	r3, [pc, #132]	; (1990 <test_suite_run+0x120>)
    190c:	4798      	blx	r3
    190e:	1e05      	subs	r5, r0, #0
	if (result) {
    1910:	d1cf      	bne.n	18b2 <test_suite_run+0x42>
	if (test->cleanup) {
    1912:	68a3      	ldr	r3, [r4, #8]
    1914:	2b00      	cmp	r3, #0
    1916:	d0d3      	beq.n	18c0 <test_suite_run+0x50>
		dbg("Cleaning up fixture\r\n");
    1918:	481e      	ldr	r0, [pc, #120]	; (1994 <test_suite_run+0x124>)
    191a:	4b1c      	ldr	r3, [pc, #112]	; (198c <test_suite_run+0x11c>)
    191c:	4798      	blx	r3
		ret = test_call(test->cleanup, test);
    191e:	0021      	movs	r1, r4
    1920:	68a0      	ldr	r0, [r4, #8]
    1922:	4b1b      	ldr	r3, [pc, #108]	; (1990 <test_suite_run+0x120>)
    1924:	4798      	blx	r3
    1926:	1e03      	subs	r3, r0, #0
		if (ret && !result) {
    1928:	d0ca      	beq.n	18c0 <test_suite_run+0x50>
    192a:	2d00      	cmp	r5, #0
    192c:	d1c8      	bne.n	18c0 <test_suite_run+0x50>
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
    192e:	68e1      	ldr	r1, [r4, #12]
    1930:	0005      	movs	r5, r0
    1932:	4a19      	ldr	r2, [pc, #100]	; (1998 <test_suite_run+0x128>)
    1934:	4811      	ldr	r0, [pc, #68]	; (197c <test_suite_run+0x10c>)
    1936:	4c0e      	ldr	r4, [pc, #56]	; (1970 <test_suite_run+0x100>)
    1938:	47a0      	blx	r4
    193a:	e7c1      	b.n	18c0 <test_suite_run+0x50>
			nr_errors++;
    193c:	2301      	movs	r3, #1
    193e:	469c      	mov	ip, r3
    1940:	44e1      	add	r9, ip
    1942:	e7c6      	b.n	18d2 <test_suite_run+0x62>
    1944:	001f      	movs	r7, r3
		}
	}

	dbg_info("Test suite '%s' complete: %u tests, %u failures, %u errors\r\n\r\n",
    1946:	68b9      	ldr	r1, [r7, #8]
    1948:	464b      	mov	r3, r9
    194a:	9300      	str	r3, [sp, #0]
    194c:	4643      	mov	r3, r8
    194e:	4813      	ldr	r0, [pc, #76]	; (199c <test_suite_run+0x12c>)
    1950:	4c07      	ldr	r4, [pc, #28]	; (1970 <test_suite_run+0x100>)
    1952:	47a0      	blx	r4
			suite->name, suite->nr_tests, nr_failures, nr_errors);

	return nr_errors + nr_failures;
    1954:	4640      	mov	r0, r8
    1956:	4448      	add	r0, r9
}
    1958:	b005      	add	sp, #20
    195a:	bc3c      	pop	{r2, r3, r4, r5}
    195c:	4690      	mov	r8, r2
    195e:	4699      	mov	r9, r3
    1960:	46a2      	mov	sl, r4
    1962:	46ab      	mov	fp, r5
    1964:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < suite->nr_tests; i++) {
    1966:	001a      	movs	r2, r3
	unsigned int nr_errors = 0;
    1968:	4699      	mov	r9, r3
    196a:	e7ec      	b.n	1946 <test_suite_run+0xd6>
    196c:	00006eec 	.word	0x00006eec
    1970:	00006055 	.word	0x00006055
    1974:	2000011c 	.word	0x2000011c
    1978:	00006f34 	.word	0x00006f34
    197c:	00006f3c 	.word	0x00006f3c
    1980:	00006f60 	.word	0x00006f60
    1984:	00006f0c 	.word	0x00006f0c
    1988:	00006f20 	.word	0x00006f20
    198c:	00006149 	.word	0x00006149
    1990:	000017b1 	.word	0x000017b1
    1994:	00006f68 	.word	0x00006f68
    1998:	00006f80 	.word	0x00006f80
    199c:	00006f88 	.word	0x00006f88

000019a0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    19a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19a2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    19a4:	ac01      	add	r4, sp, #4
    19a6:	2501      	movs	r5, #1
    19a8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    19aa:	2700      	movs	r7, #0
    19ac:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    19ae:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    19b0:	0021      	movs	r1, r4
    19b2:	203e      	movs	r0, #62	; 0x3e
    19b4:	4e06      	ldr	r6, [pc, #24]	; (19d0 <system_board_init+0x30>)
    19b6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    19b8:	2280      	movs	r2, #128	; 0x80
    19ba:	05d2      	lsls	r2, r2, #23
    19bc:	4b05      	ldr	r3, [pc, #20]	; (19d4 <system_board_init+0x34>)
    19be:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    19c0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    19c2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    19c4:	0021      	movs	r1, r4
    19c6:	200f      	movs	r0, #15
    19c8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    19ca:	b003      	add	sp, #12
    19cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	000019d9 	.word	0x000019d9
    19d4:	41004480 	.word	0x41004480

000019d8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    19d8:	b570      	push	{r4, r5, r6, lr}
    19da:	b084      	sub	sp, #16
    19dc:	0005      	movs	r5, r0
    19de:	000c      	movs	r4, r1
	return test_case_ptr;
    19e0:	4b13      	ldr	r3, [pc, #76]	; (1a30 <port_pin_set_config+0x58>)
    19e2:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
    19e4:	2800      	cmp	r0, #0
    19e6:	d019      	beq.n	1a1c <port_pin_set_config+0x44>
    19e8:	2900      	cmp	r1, #0
    19ea:	d00d      	beq.n	1a08 <port_pin_set_config+0x30>
	config->mux_position = SYSTEM_PINMUX_GPIO;
    19ec:	a903      	add	r1, sp, #12
    19ee:	2380      	movs	r3, #128	; 0x80
    19f0:	700b      	strb	r3, [r1, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    19f2:	7823      	ldrb	r3, [r4, #0]
    19f4:	704b      	strb	r3, [r1, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    19f6:	7863      	ldrb	r3, [r4, #1]
    19f8:	708b      	strb	r3, [r1, #2]
	pinmux_config.powersave    = config->powersave;
    19fa:	78a3      	ldrb	r3, [r4, #2]
    19fc:	70cb      	strb	r3, [r1, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    19fe:	0028      	movs	r0, r5
    1a00:	4b0c      	ldr	r3, [pc, #48]	; (1a34 <port_pin_set_config+0x5c>)
    1a02:	4798      	blx	r3
}
    1a04:	b004      	add	sp, #16
    1a06:	bd70      	pop	{r4, r5, r6, pc}
	Assert(config);
    1a08:	4b0b      	ldr	r3, [pc, #44]	; (1a38 <port_pin_set_config+0x60>)
    1a0a:	9301      	str	r3, [sp, #4]
    1a0c:	4b0b      	ldr	r3, [pc, #44]	; (1a3c <port_pin_set_config+0x64>)
    1a0e:	9300      	str	r3, [sp, #0]
    1a10:	2341      	movs	r3, #65	; 0x41
    1a12:	4a0b      	ldr	r2, [pc, #44]	; (1a40 <port_pin_set_config+0x68>)
    1a14:	2101      	movs	r1, #1
    1a16:	4e0b      	ldr	r6, [pc, #44]	; (1a44 <port_pin_set_config+0x6c>)
    1a18:	47b0      	blx	r6
    1a1a:	e7e7      	b.n	19ec <port_pin_set_config+0x14>
    1a1c:	2900      	cmp	r1, #0
    1a1e:	d1e5      	bne.n	19ec <port_pin_set_config+0x14>
    1a20:	2341      	movs	r3, #65	; 0x41
    1a22:	4a07      	ldr	r2, [pc, #28]	; (1a40 <port_pin_set_config+0x68>)
    1a24:	4904      	ldr	r1, [pc, #16]	; (1a38 <port_pin_set_config+0x60>)
    1a26:	4808      	ldr	r0, [pc, #32]	; (1a48 <port_pin_set_config+0x70>)
    1a28:	4c08      	ldr	r4, [pc, #32]	; (1a4c <port_pin_set_config+0x74>)
    1a2a:	47a0      	blx	r4
    1a2c:	e7fe      	b.n	1a2c <port_pin_set_config+0x54>
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	2000011c 	.word	0x2000011c
    1a34:	00004d19 	.word	0x00004d19
    1a38:	00006fec 	.word	0x00006fec
    1a3c:	00006c40 	.word	0x00006c40
    1a40:	00006fc8 	.word	0x00006fc8
    1a44:	000017e1 	.word	0x000017e1
    1a48:	00006c58 	.word	0x00006c58
    1a4c:	00006055 	.word	0x00006055

00001a50 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a52:	46de      	mov	lr, fp
    1a54:	4657      	mov	r7, sl
    1a56:	464e      	mov	r6, r9
    1a58:	4645      	mov	r5, r8
    1a5a:	b5e0      	push	{r5, r6, r7, lr}
    1a5c:	b087      	sub	sp, #28
    1a5e:	4680      	mov	r8, r0
    1a60:	9104      	str	r1, [sp, #16]
    1a62:	0016      	movs	r6, r2
    1a64:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1a66:	2200      	movs	r2, #0
    1a68:	2300      	movs	r3, #0
    1a6a:	2100      	movs	r1, #0
    1a6c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1a6e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1a70:	2001      	movs	r0, #1
    1a72:	0021      	movs	r1, r4
    1a74:	9600      	str	r6, [sp, #0]
    1a76:	9701      	str	r7, [sp, #4]
    1a78:	465c      	mov	r4, fp
    1a7a:	9403      	str	r4, [sp, #12]
    1a7c:	4644      	mov	r4, r8
    1a7e:	9405      	str	r4, [sp, #20]
    1a80:	e013      	b.n	1aaa <long_division+0x5a>
    1a82:	2420      	movs	r4, #32
    1a84:	1a64      	subs	r4, r4, r1
    1a86:	0005      	movs	r5, r0
    1a88:	40e5      	lsrs	r5, r4
    1a8a:	46a8      	mov	r8, r5
    1a8c:	e014      	b.n	1ab8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1a8e:	9c00      	ldr	r4, [sp, #0]
    1a90:	9d01      	ldr	r5, [sp, #4]
    1a92:	1b12      	subs	r2, r2, r4
    1a94:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1a96:	465c      	mov	r4, fp
    1a98:	464d      	mov	r5, r9
    1a9a:	432c      	orrs	r4, r5
    1a9c:	46a3      	mov	fp, r4
    1a9e:	9c03      	ldr	r4, [sp, #12]
    1aa0:	4645      	mov	r5, r8
    1aa2:	432c      	orrs	r4, r5
    1aa4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1aa6:	3901      	subs	r1, #1
    1aa8:	d325      	bcc.n	1af6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1aaa:	2420      	movs	r4, #32
    1aac:	4264      	negs	r4, r4
    1aae:	190c      	adds	r4, r1, r4
    1ab0:	d4e7      	bmi.n	1a82 <long_division+0x32>
    1ab2:	0005      	movs	r5, r0
    1ab4:	40a5      	lsls	r5, r4
    1ab6:	46a8      	mov	r8, r5
    1ab8:	0004      	movs	r4, r0
    1aba:	408c      	lsls	r4, r1
    1abc:	46a1      	mov	r9, r4
		r = r << 1;
    1abe:	1892      	adds	r2, r2, r2
    1ac0:	415b      	adcs	r3, r3
    1ac2:	0014      	movs	r4, r2
    1ac4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1ac6:	9e05      	ldr	r6, [sp, #20]
    1ac8:	464f      	mov	r7, r9
    1aca:	403e      	ands	r6, r7
    1acc:	46b4      	mov	ip, r6
    1ace:	9e04      	ldr	r6, [sp, #16]
    1ad0:	4647      	mov	r7, r8
    1ad2:	403e      	ands	r6, r7
    1ad4:	46b2      	mov	sl, r6
    1ad6:	4666      	mov	r6, ip
    1ad8:	4657      	mov	r7, sl
    1ada:	433e      	orrs	r6, r7
    1adc:	d003      	beq.n	1ae6 <long_division+0x96>
			r |= 0x01;
    1ade:	0006      	movs	r6, r0
    1ae0:	4326      	orrs	r6, r4
    1ae2:	0032      	movs	r2, r6
    1ae4:	002b      	movs	r3, r5
		if (r >= d) {
    1ae6:	9c00      	ldr	r4, [sp, #0]
    1ae8:	9d01      	ldr	r5, [sp, #4]
    1aea:	429d      	cmp	r5, r3
    1aec:	d8db      	bhi.n	1aa6 <long_division+0x56>
    1aee:	d1ce      	bne.n	1a8e <long_division+0x3e>
    1af0:	4294      	cmp	r4, r2
    1af2:	d8d8      	bhi.n	1aa6 <long_division+0x56>
    1af4:	e7cb      	b.n	1a8e <long_division+0x3e>
    1af6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1af8:	4658      	mov	r0, fp
    1afa:	0019      	movs	r1, r3
    1afc:	b007      	add	sp, #28
    1afe:	bc3c      	pop	{r2, r3, r4, r5}
    1b00:	4690      	mov	r8, r2
    1b02:	4699      	mov	r9, r3
    1b04:	46a2      	mov	sl, r4
    1b06:	46ab      	mov	fp, r5
    1b08:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001b0a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1b0a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1b0c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b0e:	2340      	movs	r3, #64	; 0x40
    1b10:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1b12:	4281      	cmp	r1, r0
    1b14:	d202      	bcs.n	1b1c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1b16:	0018      	movs	r0, r3
    1b18:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1b1a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1b1c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1b1e:	1c63      	adds	r3, r4, #1
    1b20:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1b22:	4288      	cmp	r0, r1
    1b24:	d9f9      	bls.n	1b1a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b26:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1b28:	2cff      	cmp	r4, #255	; 0xff
    1b2a:	d8f4      	bhi.n	1b16 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1b2c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1b2e:	2300      	movs	r3, #0
    1b30:	e7f1      	b.n	1b16 <_sercom_get_sync_baud_val+0xc>
	...

00001b34 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b36:	b083      	sub	sp, #12
    1b38:	000f      	movs	r7, r1
    1b3a:	0016      	movs	r6, r2
    1b3c:	aa08      	add	r2, sp, #32
    1b3e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1b40:	0004      	movs	r4, r0
    1b42:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b44:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1b46:	42bc      	cmp	r4, r7
    1b48:	d902      	bls.n	1b50 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1b4a:	0010      	movs	r0, r2
    1b4c:	b003      	add	sp, #12
    1b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1b50:	2b00      	cmp	r3, #0
    1b52:	d114      	bne.n	1b7e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1b54:	0002      	movs	r2, r0
    1b56:	0008      	movs	r0, r1
    1b58:	2100      	movs	r1, #0
    1b5a:	4c19      	ldr	r4, [pc, #100]	; (1bc0 <_sercom_get_async_baud_val+0x8c>)
    1b5c:	47a0      	blx	r4
    1b5e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1b60:	003a      	movs	r2, r7
    1b62:	2300      	movs	r3, #0
    1b64:	2000      	movs	r0, #0
    1b66:	4c17      	ldr	r4, [pc, #92]	; (1bc4 <_sercom_get_async_baud_val+0x90>)
    1b68:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1b6a:	2200      	movs	r2, #0
    1b6c:	2301      	movs	r3, #1
    1b6e:	1a12      	subs	r2, r2, r0
    1b70:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1b72:	0c12      	lsrs	r2, r2, #16
    1b74:	041b      	lsls	r3, r3, #16
    1b76:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1b78:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1b7a:	2200      	movs	r2, #0
    1b7c:	e7e5      	b.n	1b4a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1b7e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1b80:	2b01      	cmp	r3, #1
    1b82:	d1f9      	bne.n	1b78 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1b84:	000a      	movs	r2, r1
    1b86:	2300      	movs	r3, #0
    1b88:	2100      	movs	r1, #0
    1b8a:	4c0d      	ldr	r4, [pc, #52]	; (1bc0 <_sercom_get_async_baud_val+0x8c>)
    1b8c:	47a0      	blx	r4
    1b8e:	0002      	movs	r2, r0
    1b90:	000b      	movs	r3, r1
    1b92:	9200      	str	r2, [sp, #0]
    1b94:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1b96:	0038      	movs	r0, r7
    1b98:	2100      	movs	r1, #0
    1b9a:	4c0a      	ldr	r4, [pc, #40]	; (1bc4 <_sercom_get_async_baud_val+0x90>)
    1b9c:	47a0      	blx	r4
    1b9e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1ba0:	2380      	movs	r3, #128	; 0x80
    1ba2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ba4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1ba6:	4298      	cmp	r0, r3
    1ba8:	d8cf      	bhi.n	1b4a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1baa:	0f79      	lsrs	r1, r7, #29
    1bac:	00f8      	lsls	r0, r7, #3
    1bae:	9a00      	ldr	r2, [sp, #0]
    1bb0:	9b01      	ldr	r3, [sp, #4]
    1bb2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1bb4:	00ea      	lsls	r2, r5, #3
    1bb6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1bb8:	b2d2      	uxtb	r2, r2
    1bba:	0352      	lsls	r2, r2, #13
    1bbc:	432a      	orrs	r2, r5
    1bbe:	e7db      	b.n	1b78 <_sercom_get_async_baud_val+0x44>
    1bc0:	00005825 	.word	0x00005825
    1bc4:	00001a51 	.word	0x00001a51

00001bc8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1bc8:	b510      	push	{r4, lr}
    1bca:	b082      	sub	sp, #8
    1bcc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1bce:	4b0e      	ldr	r3, [pc, #56]	; (1c08 <sercom_set_gclk_generator+0x40>)
    1bd0:	781b      	ldrb	r3, [r3, #0]
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d007      	beq.n	1be6 <sercom_set_gclk_generator+0x1e>
    1bd6:	2900      	cmp	r1, #0
    1bd8:	d105      	bne.n	1be6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1bda:	4b0b      	ldr	r3, [pc, #44]	; (1c08 <sercom_set_gclk_generator+0x40>)
    1bdc:	785b      	ldrb	r3, [r3, #1]
    1bde:	4283      	cmp	r3, r0
    1be0:	d010      	beq.n	1c04 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1be2:	201d      	movs	r0, #29
    1be4:	e00c      	b.n	1c00 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1be6:	a901      	add	r1, sp, #4
    1be8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1bea:	2013      	movs	r0, #19
    1bec:	4b07      	ldr	r3, [pc, #28]	; (1c0c <sercom_set_gclk_generator+0x44>)
    1bee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1bf0:	2013      	movs	r0, #19
    1bf2:	4b07      	ldr	r3, [pc, #28]	; (1c10 <sercom_set_gclk_generator+0x48>)
    1bf4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1bf6:	4b04      	ldr	r3, [pc, #16]	; (1c08 <sercom_set_gclk_generator+0x40>)
    1bf8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1bfa:	2201      	movs	r2, #1
    1bfc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1bfe:	2000      	movs	r0, #0
}
    1c00:	b002      	add	sp, #8
    1c02:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1c04:	2000      	movs	r0, #0
    1c06:	e7fb      	b.n	1c00 <sercom_set_gclk_generator+0x38>
    1c08:	2000017c 	.word	0x2000017c
    1c0c:	00004b35 	.word	0x00004b35
    1c10:	00004a49 	.word	0x00004a49

00001c14 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1c14:	b510      	push	{r4, lr}
    1c16:	b082      	sub	sp, #8
	switch ((uintptr_t)sercom_module) {
    1c18:	4b46      	ldr	r3, [pc, #280]	; (1d34 <_sercom_get_default_pad+0x120>)
    1c1a:	4298      	cmp	r0, r3
    1c1c:	d045      	beq.n	1caa <_sercom_get_default_pad+0x96>
    1c1e:	d913      	bls.n	1c48 <_sercom_get_default_pad+0x34>
    1c20:	4b45      	ldr	r3, [pc, #276]	; (1d38 <_sercom_get_default_pad+0x124>)
    1c22:	4298      	cmp	r0, r3
    1c24:	d053      	beq.n	1cce <_sercom_get_default_pad+0xba>
    1c26:	4b45      	ldr	r3, [pc, #276]	; (1d3c <_sercom_get_default_pad+0x128>)
    1c28:	4298      	cmp	r0, r3
    1c2a:	d05e      	beq.n	1cea <_sercom_get_default_pad+0xd6>
    1c2c:	4b44      	ldr	r3, [pc, #272]	; (1d40 <_sercom_get_default_pad+0x12c>)
    1c2e:	4298      	cmp	r0, r3
    1c30:	d122      	bne.n	1c78 <_sercom_get_default_pad+0x64>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c32:	2901      	cmp	r1, #1
    1c34:	d047      	beq.n	1cc6 <_sercom_get_default_pad+0xb2>
    1c36:	2900      	cmp	r1, #0
    1c38:	d100      	bne.n	1c3c <_sercom_get_default_pad+0x28>
    1c3a:	e074      	b.n	1d26 <_sercom_get_default_pad+0x112>
    1c3c:	2902      	cmp	r1, #2
    1c3e:	d044      	beq.n	1cca <_sercom_get_default_pad+0xb6>
    1c40:	2903      	cmp	r1, #3
    1c42:	d119      	bne.n	1c78 <_sercom_get_default_pad+0x64>
    1c44:	483f      	ldr	r0, [pc, #252]	; (1d44 <_sercom_get_default_pad+0x130>)
    1c46:	e026      	b.n	1c96 <_sercom_get_default_pad+0x82>
	switch ((uintptr_t)sercom_module) {
    1c48:	4b3f      	ldr	r3, [pc, #252]	; (1d48 <_sercom_get_default_pad+0x134>)
    1c4a:	4298      	cmp	r0, r3
    1c4c:	d00c      	beq.n	1c68 <_sercom_get_default_pad+0x54>
    1c4e:	4b3f      	ldr	r3, [pc, #252]	; (1d4c <_sercom_get_default_pad+0x138>)
    1c50:	4298      	cmp	r0, r3
    1c52:	d111      	bne.n	1c78 <_sercom_get_default_pad+0x64>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c54:	2901      	cmp	r1, #1
    1c56:	d024      	beq.n	1ca2 <_sercom_get_default_pad+0x8e>
    1c58:	2900      	cmp	r1, #0
    1c5a:	d060      	beq.n	1d1e <_sercom_get_default_pad+0x10a>
    1c5c:	2902      	cmp	r1, #2
    1c5e:	d022      	beq.n	1ca6 <_sercom_get_default_pad+0x92>
    1c60:	2903      	cmp	r1, #3
    1c62:	d109      	bne.n	1c78 <_sercom_get_default_pad+0x64>
    1c64:	483a      	ldr	r0, [pc, #232]	; (1d50 <_sercom_get_default_pad+0x13c>)
    1c66:	e016      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1c68:	2901      	cmp	r1, #1
    1c6a:	d016      	beq.n	1c9a <_sercom_get_default_pad+0x86>
    1c6c:	2900      	cmp	r1, #0
    1c6e:	d052      	beq.n	1d16 <_sercom_get_default_pad+0x102>
    1c70:	2902      	cmp	r1, #2
    1c72:	d052      	beq.n	1d1a <_sercom_get_default_pad+0x106>
    1c74:	2903      	cmp	r1, #3
    1c76:	d012      	beq.n	1c9e <_sercom_get_default_pad+0x8a>
    1c78:	4b36      	ldr	r3, [pc, #216]	; (1d54 <_sercom_get_default_pad+0x140>)
    1c7a:	6818      	ldr	r0, [r3, #0]
	}

	Assert(false);
    1c7c:	2800      	cmp	r0, #0
    1c7e:	d042      	beq.n	1d06 <_sercom_get_default_pad+0xf2>
    1c80:	4b35      	ldr	r3, [pc, #212]	; (1d58 <_sercom_get_default_pad+0x144>)
    1c82:	9301      	str	r3, [sp, #4]
    1c84:	4b35      	ldr	r3, [pc, #212]	; (1d5c <_sercom_get_default_pad+0x148>)
    1c86:	9300      	str	r3, [sp, #0]
    1c88:	2383      	movs	r3, #131	; 0x83
    1c8a:	005b      	lsls	r3, r3, #1
    1c8c:	4a34      	ldr	r2, [pc, #208]	; (1d60 <_sercom_get_default_pad+0x14c>)
    1c8e:	2101      	movs	r1, #1
    1c90:	4c34      	ldr	r4, [pc, #208]	; (1d64 <_sercom_get_default_pad+0x150>)
    1c92:	47a0      	blx	r4
	return 0;
    1c94:	2000      	movs	r0, #0
}
    1c96:	b002      	add	sp, #8
    1c98:	bd10      	pop	{r4, pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c9a:	4833      	ldr	r0, [pc, #204]	; (1d68 <_sercom_get_default_pad+0x154>)
    1c9c:	e7fb      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1c9e:	4833      	ldr	r0, [pc, #204]	; (1d6c <_sercom_get_default_pad+0x158>)
    1ca0:	e7f9      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1ca2:	4833      	ldr	r0, [pc, #204]	; (1d70 <_sercom_get_default_pad+0x15c>)
    1ca4:	e7f7      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1ca6:	4833      	ldr	r0, [pc, #204]	; (1d74 <_sercom_get_default_pad+0x160>)
    1ca8:	e7f5      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1caa:	2901      	cmp	r1, #1
    1cac:	d007      	beq.n	1cbe <_sercom_get_default_pad+0xaa>
    1cae:	2900      	cmp	r1, #0
    1cb0:	d037      	beq.n	1d22 <_sercom_get_default_pad+0x10e>
    1cb2:	2902      	cmp	r1, #2
    1cb4:	d005      	beq.n	1cc2 <_sercom_get_default_pad+0xae>
    1cb6:	2903      	cmp	r1, #3
    1cb8:	d1de      	bne.n	1c78 <_sercom_get_default_pad+0x64>
    1cba:	482f      	ldr	r0, [pc, #188]	; (1d78 <_sercom_get_default_pad+0x164>)
    1cbc:	e7eb      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1cbe:	482f      	ldr	r0, [pc, #188]	; (1d7c <_sercom_get_default_pad+0x168>)
    1cc0:	e7e9      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1cc2:	482f      	ldr	r0, [pc, #188]	; (1d80 <_sercom_get_default_pad+0x16c>)
    1cc4:	e7e7      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1cc6:	482f      	ldr	r0, [pc, #188]	; (1d84 <_sercom_get_default_pad+0x170>)
    1cc8:	e7e5      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1cca:	482f      	ldr	r0, [pc, #188]	; (1d88 <_sercom_get_default_pad+0x174>)
    1ccc:	e7e3      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1cce:	2901      	cmp	r1, #1
    1cd0:	d007      	beq.n	1ce2 <_sercom_get_default_pad+0xce>
    1cd2:	2900      	cmp	r1, #0
    1cd4:	d029      	beq.n	1d2a <_sercom_get_default_pad+0x116>
    1cd6:	2902      	cmp	r1, #2
    1cd8:	d005      	beq.n	1ce6 <_sercom_get_default_pad+0xd2>
    1cda:	2903      	cmp	r1, #3
    1cdc:	d1cc      	bne.n	1c78 <_sercom_get_default_pad+0x64>
    1cde:	482b      	ldr	r0, [pc, #172]	; (1d8c <_sercom_get_default_pad+0x178>)
    1ce0:	e7d9      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1ce2:	482b      	ldr	r0, [pc, #172]	; (1d90 <_sercom_get_default_pad+0x17c>)
    1ce4:	e7d7      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1ce6:	482b      	ldr	r0, [pc, #172]	; (1d94 <_sercom_get_default_pad+0x180>)
    1ce8:	e7d5      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1cea:	2901      	cmp	r1, #1
    1cec:	d007      	beq.n	1cfe <_sercom_get_default_pad+0xea>
    1cee:	2900      	cmp	r1, #0
    1cf0:	d01d      	beq.n	1d2e <_sercom_get_default_pad+0x11a>
    1cf2:	2902      	cmp	r1, #2
    1cf4:	d005      	beq.n	1d02 <_sercom_get_default_pad+0xee>
    1cf6:	2903      	cmp	r1, #3
    1cf8:	d1be      	bne.n	1c78 <_sercom_get_default_pad+0x64>
    1cfa:	4827      	ldr	r0, [pc, #156]	; (1d98 <_sercom_get_default_pad+0x184>)
    1cfc:	e7cb      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1cfe:	4827      	ldr	r0, [pc, #156]	; (1d9c <_sercom_get_default_pad+0x188>)
    1d00:	e7c9      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1d02:	4827      	ldr	r0, [pc, #156]	; (1da0 <_sercom_get_default_pad+0x18c>)
    1d04:	e7c7      	b.n	1c96 <_sercom_get_default_pad+0x82>
	Assert(false);
    1d06:	2383      	movs	r3, #131	; 0x83
    1d08:	005b      	lsls	r3, r3, #1
    1d0a:	4a15      	ldr	r2, [pc, #84]	; (1d60 <_sercom_get_default_pad+0x14c>)
    1d0c:	4912      	ldr	r1, [pc, #72]	; (1d58 <_sercom_get_default_pad+0x144>)
    1d0e:	4825      	ldr	r0, [pc, #148]	; (1da4 <_sercom_get_default_pad+0x190>)
    1d10:	4c25      	ldr	r4, [pc, #148]	; (1da8 <_sercom_get_default_pad+0x194>)
    1d12:	47a0      	blx	r4
    1d14:	e7fe      	b.n	1d14 <_sercom_get_default_pad+0x100>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d16:	4825      	ldr	r0, [pc, #148]	; (1dac <_sercom_get_default_pad+0x198>)
    1d18:	e7bd      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1d1a:	4825      	ldr	r0, [pc, #148]	; (1db0 <_sercom_get_default_pad+0x19c>)
    1d1c:	e7bb      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1d1e:	2003      	movs	r0, #3
    1d20:	e7b9      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1d22:	4824      	ldr	r0, [pc, #144]	; (1db4 <_sercom_get_default_pad+0x1a0>)
    1d24:	e7b7      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1d26:	4824      	ldr	r0, [pc, #144]	; (1db8 <_sercom_get_default_pad+0x1a4>)
    1d28:	e7b5      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1d2a:	4824      	ldr	r0, [pc, #144]	; (1dbc <_sercom_get_default_pad+0x1a8>)
    1d2c:	e7b3      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1d2e:	4824      	ldr	r0, [pc, #144]	; (1dc0 <_sercom_get_default_pad+0x1ac>)
    1d30:	e7b1      	b.n	1c96 <_sercom_get_default_pad+0x82>
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	42001000 	.word	0x42001000
    1d38:	42001800 	.word	0x42001800
    1d3c:	42001c00 	.word	0x42001c00
    1d40:	42001400 	.word	0x42001400
    1d44:	00130003 	.word	0x00130003
    1d48:	42000800 	.word	0x42000800
    1d4c:	42000c00 	.word	0x42000c00
    1d50:	001f0003 	.word	0x001f0003
    1d54:	2000011c 	.word	0x2000011c
    1d58:	00006cac 	.word	0x00006cac
    1d5c:	00006c40 	.word	0x00006c40
    1d60:	0000700c 	.word	0x0000700c
    1d64:	000017e1 	.word	0x000017e1
    1d68:	00050003 	.word	0x00050003
    1d6c:	00070003 	.word	0x00070003
    1d70:	00010003 	.word	0x00010003
    1d74:	001e0003 	.word	0x001e0003
    1d78:	000b0003 	.word	0x000b0003
    1d7c:	00090003 	.word	0x00090003
    1d80:	000a0003 	.word	0x000a0003
    1d84:	00110003 	.word	0x00110003
    1d88:	00120003 	.word	0x00120003
    1d8c:	000f0003 	.word	0x000f0003
    1d90:	000d0003 	.word	0x000d0003
    1d94:	000e0003 	.word	0x000e0003
    1d98:	00190003 	.word	0x00190003
    1d9c:	00170003 	.word	0x00170003
    1da0:	00180003 	.word	0x00180003
    1da4:	00006c58 	.word	0x00006c58
    1da8:	00006055 	.word	0x00006055
    1dac:	00040003 	.word	0x00040003
    1db0:	00060003 	.word	0x00060003
    1db4:	00080003 	.word	0x00080003
    1db8:	00100003 	.word	0x00100003
    1dbc:	000c0003 	.word	0x000c0003
    1dc0:	00160003 	.word	0x00160003

00001dc4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1dc4:	b530      	push	{r4, r5, lr}
    1dc6:	b089      	sub	sp, #36	; 0x24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1dc8:	a902      	add	r1, sp, #8
    1dca:	4b17      	ldr	r3, [pc, #92]	; (1e28 <_sercom_get_sercom_inst_index+0x64>)
    1dcc:	000a      	movs	r2, r1
    1dce:	cb32      	ldmia	r3!, {r1, r4, r5}
    1dd0:	c232      	stmia	r2!, {r1, r4, r5}
    1dd2:	cb32      	ldmia	r3!, {r1, r4, r5}
    1dd4:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1dd6:	0003      	movs	r3, r0
    1dd8:	9a02      	ldr	r2, [sp, #8]
    1dda:	4282      	cmp	r2, r0
    1ddc:	d019      	beq.n	1e12 <_sercom_get_sercom_inst_index+0x4e>
    1dde:	2001      	movs	r0, #1
    1de0:	a902      	add	r1, sp, #8
    1de2:	0082      	lsls	r2, r0, #2
    1de4:	5852      	ldr	r2, [r2, r1]
    1de6:	429a      	cmp	r2, r3
    1de8:	d014      	beq.n	1e14 <_sercom_get_sercom_inst_index+0x50>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1dea:	3001      	adds	r0, #1
    1dec:	2806      	cmp	r0, #6
    1dee:	d1f8      	bne.n	1de2 <_sercom_get_sercom_inst_index+0x1e>
    1df0:	4b0e      	ldr	r3, [pc, #56]	; (1e2c <_sercom_get_sercom_inst_index+0x68>)
    1df2:	6818      	ldr	r0, [r3, #0]
			return i;
		}
	}

	/* Invalid data given */
	Assert(false);
    1df4:	2800      	cmp	r0, #0
    1df6:	d00f      	beq.n	1e18 <_sercom_get_sercom_inst_index+0x54>
    1df8:	4b0d      	ldr	r3, [pc, #52]	; (1e30 <_sercom_get_sercom_inst_index+0x6c>)
    1dfa:	9301      	str	r3, [sp, #4]
    1dfc:	4b0d      	ldr	r3, [pc, #52]	; (1e34 <_sercom_get_sercom_inst_index+0x70>)
    1dfe:	9300      	str	r3, [sp, #0]
    1e00:	2390      	movs	r3, #144	; 0x90
    1e02:	005b      	lsls	r3, r3, #1
    1e04:	4a0c      	ldr	r2, [pc, #48]	; (1e38 <_sercom_get_sercom_inst_index+0x74>)
    1e06:	2101      	movs	r1, #1
    1e08:	4c0c      	ldr	r4, [pc, #48]	; (1e3c <_sercom_get_sercom_inst_index+0x78>)
    1e0a:	47a0      	blx	r4
	return 0;
    1e0c:	2000      	movs	r0, #0
}
    1e0e:	b009      	add	sp, #36	; 0x24
    1e10:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e12:	2000      	movs	r0, #0
			return i;
    1e14:	b2c0      	uxtb	r0, r0
    1e16:	e7fa      	b.n	1e0e <_sercom_get_sercom_inst_index+0x4a>
	Assert(false);
    1e18:	2390      	movs	r3, #144	; 0x90
    1e1a:	005b      	lsls	r3, r3, #1
    1e1c:	4a06      	ldr	r2, [pc, #24]	; (1e38 <_sercom_get_sercom_inst_index+0x74>)
    1e1e:	4904      	ldr	r1, [pc, #16]	; (1e30 <_sercom_get_sercom_inst_index+0x6c>)
    1e20:	4807      	ldr	r0, [pc, #28]	; (1e40 <_sercom_get_sercom_inst_index+0x7c>)
    1e22:	4c08      	ldr	r4, [pc, #32]	; (1e44 <_sercom_get_sercom_inst_index+0x80>)
    1e24:	47a0      	blx	r4
    1e26:	e7fe      	b.n	1e26 <_sercom_get_sercom_inst_index+0x62>
    1e28:	00006ff4 	.word	0x00006ff4
    1e2c:	2000011c 	.word	0x2000011c
    1e30:	00006cac 	.word	0x00006cac
    1e34:	00006c40 	.word	0x00006c40
    1e38:	0000700c 	.word	0x0000700c
    1e3c:	000017e1 	.word	0x000017e1
    1e40:	00006c58 	.word	0x00006c58
    1e44:	00006055 	.word	0x00006055

00001e48 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    1e48:	b510      	push	{r4, lr}
    1e4a:	b082      	sub	sp, #8
    1e4c:	4b0a      	ldr	r3, [pc, #40]	; (1e78 <_sercom_default_handler+0x30>)
    1e4e:	6818      	ldr	r0, [r3, #0]
	Assert(false);
    1e50:	2800      	cmp	r0, #0
    1e52:	d00a      	beq.n	1e6a <_sercom_default_handler+0x22>
    1e54:	4b09      	ldr	r3, [pc, #36]	; (1e7c <_sercom_default_handler+0x34>)
    1e56:	9301      	str	r3, [sp, #4]
    1e58:	4b09      	ldr	r3, [pc, #36]	; (1e80 <_sercom_default_handler+0x38>)
    1e5a:	9300      	str	r3, [sp, #0]
    1e5c:	2341      	movs	r3, #65	; 0x41
    1e5e:	4a09      	ldr	r2, [pc, #36]	; (1e84 <_sercom_default_handler+0x3c>)
    1e60:	2101      	movs	r1, #1
    1e62:	4c09      	ldr	r4, [pc, #36]	; (1e88 <_sercom_default_handler+0x40>)
    1e64:	47a0      	blx	r4
}
    1e66:	b002      	add	sp, #8
    1e68:	bd10      	pop	{r4, pc}
	Assert(false);
    1e6a:	2341      	movs	r3, #65	; 0x41
    1e6c:	4a05      	ldr	r2, [pc, #20]	; (1e84 <_sercom_default_handler+0x3c>)
    1e6e:	4903      	ldr	r1, [pc, #12]	; (1e7c <_sercom_default_handler+0x34>)
    1e70:	4806      	ldr	r0, [pc, #24]	; (1e8c <_sercom_default_handler+0x44>)
    1e72:	4c07      	ldr	r4, [pc, #28]	; (1e90 <_sercom_default_handler+0x48>)
    1e74:	47a0      	blx	r4
    1e76:	e7fe      	b.n	1e76 <_sercom_default_handler+0x2e>
    1e78:	2000011c 	.word	0x2000011c
    1e7c:	00006cac 	.word	0x00006cac
    1e80:	00006c40 	.word	0x00006c40
    1e84:	00007034 	.word	0x00007034
    1e88:	000017e1 	.word	0x000017e1
    1e8c:	00006c58 	.word	0x00006c58
    1e90:	00006055 	.word	0x00006055

00001e94 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1e94:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1e96:	4b0a      	ldr	r3, [pc, #40]	; (1ec0 <_sercom_set_handler+0x2c>)
    1e98:	781b      	ldrb	r3, [r3, #0]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d10c      	bne.n	1eb8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e9e:	4f09      	ldr	r7, [pc, #36]	; (1ec4 <_sercom_set_handler+0x30>)
    1ea0:	4e09      	ldr	r6, [pc, #36]	; (1ec8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1ea2:	4d0a      	ldr	r5, [pc, #40]	; (1ecc <_sercom_set_handler+0x38>)
    1ea4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ea6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1ea8:	195a      	adds	r2, r3, r5
    1eaa:	6014      	str	r4, [r2, #0]
    1eac:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1eae:	2b18      	cmp	r3, #24
    1eb0:	d1f9      	bne.n	1ea6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1eb2:	2201      	movs	r2, #1
    1eb4:	4b02      	ldr	r3, [pc, #8]	; (1ec0 <_sercom_set_handler+0x2c>)
    1eb6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1eb8:	0080      	lsls	r0, r0, #2
    1eba:	4b02      	ldr	r3, [pc, #8]	; (1ec4 <_sercom_set_handler+0x30>)
    1ebc:	50c1      	str	r1, [r0, r3]
}
    1ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ec0:	2000017e 	.word	0x2000017e
    1ec4:	20000180 	.word	0x20000180
    1ec8:	00001e49 	.word	0x00001e49
    1ecc:	200009bc 	.word	0x200009bc

00001ed0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1ed0:	b500      	push	{lr}
    1ed2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1ed4:	2309      	movs	r3, #9
    1ed6:	466a      	mov	r2, sp
    1ed8:	7013      	strb	r3, [r2, #0]
    1eda:	3301      	adds	r3, #1
    1edc:	7053      	strb	r3, [r2, #1]
    1ede:	3301      	adds	r3, #1
    1ee0:	7093      	strb	r3, [r2, #2]
    1ee2:	3301      	adds	r3, #1
    1ee4:	70d3      	strb	r3, [r2, #3]
    1ee6:	3301      	adds	r3, #1
    1ee8:	7113      	strb	r3, [r2, #4]
    1eea:	3301      	adds	r3, #1
    1eec:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1eee:	4b03      	ldr	r3, [pc, #12]	; (1efc <_sercom_get_interrupt_vector+0x2c>)
    1ef0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1ef2:	466b      	mov	r3, sp
    1ef4:	5618      	ldrsb	r0, [r3, r0]
}
    1ef6:	b003      	add	sp, #12
    1ef8:	bd00      	pop	{pc}
    1efa:	46c0      	nop			; (mov r8, r8)
    1efc:	00001dc5 	.word	0x00001dc5

00001f00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1f00:	b510      	push	{r4, lr}
    1f02:	4b02      	ldr	r3, [pc, #8]	; (1f0c <SERCOM0_Handler+0xc>)
    1f04:	681b      	ldr	r3, [r3, #0]
    1f06:	2000      	movs	r0, #0
    1f08:	4798      	blx	r3
    1f0a:	bd10      	pop	{r4, pc}
    1f0c:	20000180 	.word	0x20000180

00001f10 <SERCOM1_Handler>:
    1f10:	b510      	push	{r4, lr}
    1f12:	4b02      	ldr	r3, [pc, #8]	; (1f1c <SERCOM1_Handler+0xc>)
    1f14:	685b      	ldr	r3, [r3, #4]
    1f16:	2001      	movs	r0, #1
    1f18:	4798      	blx	r3
    1f1a:	bd10      	pop	{r4, pc}
    1f1c:	20000180 	.word	0x20000180

00001f20 <SERCOM2_Handler>:
    1f20:	b510      	push	{r4, lr}
    1f22:	4b02      	ldr	r3, [pc, #8]	; (1f2c <SERCOM2_Handler+0xc>)
    1f24:	689b      	ldr	r3, [r3, #8]
    1f26:	2002      	movs	r0, #2
    1f28:	4798      	blx	r3
    1f2a:	bd10      	pop	{r4, pc}
    1f2c:	20000180 	.word	0x20000180

00001f30 <SERCOM3_Handler>:
    1f30:	b510      	push	{r4, lr}
    1f32:	4b02      	ldr	r3, [pc, #8]	; (1f3c <SERCOM3_Handler+0xc>)
    1f34:	68db      	ldr	r3, [r3, #12]
    1f36:	2003      	movs	r0, #3
    1f38:	4798      	blx	r3
    1f3a:	bd10      	pop	{r4, pc}
    1f3c:	20000180 	.word	0x20000180

00001f40 <SERCOM4_Handler>:
    1f40:	b510      	push	{r4, lr}
    1f42:	4b02      	ldr	r3, [pc, #8]	; (1f4c <SERCOM4_Handler+0xc>)
    1f44:	691b      	ldr	r3, [r3, #16]
    1f46:	2004      	movs	r0, #4
    1f48:	4798      	blx	r3
    1f4a:	bd10      	pop	{r4, pc}
    1f4c:	20000180 	.word	0x20000180

00001f50 <SERCOM5_Handler>:
    1f50:	b510      	push	{r4, lr}
    1f52:	4b02      	ldr	r3, [pc, #8]	; (1f5c <SERCOM5_Handler+0xc>)
    1f54:	695b      	ldr	r3, [r3, #20]
    1f56:	2005      	movs	r0, #5
    1f58:	4798      	blx	r3
    1f5a:	bd10      	pop	{r4, pc}
    1f5c:	20000180 	.word	0x20000180

00001f60 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    1f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f62:	46d6      	mov	lr, sl
    1f64:	464f      	mov	r7, r9
    1f66:	4646      	mov	r6, r8
    1f68:	b5c0      	push	{r6, r7, lr}
    1f6a:	b084      	sub	sp, #16
    1f6c:	0004      	movs	r4, r0
    1f6e:	468a      	mov	sl, r1
    1f70:	4bbc      	ldr	r3, [pc, #752]	; (2264 <STACK_SIZE+0x264>)
    1f72:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    1f74:	2800      	cmp	r0, #0
    1f76:	d033      	beq.n	1fe0 <spi_set_baudrate+0x80>
    1f78:	2c00      	cmp	r4, #0
    1f7a:	d023      	beq.n	1fc4 <spi_set_baudrate+0x64>
	Assert(baudrate);
    1f7c:	4653      	mov	r3, sl
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d044      	beq.n	200c <STACK_SIZE+0xc>
    1f82:	4bb8      	ldr	r3, [pc, #736]	; (2264 <STACK_SIZE+0x264>)
    1f84:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1f86:	6823      	ldr	r3, [r4, #0]
    1f88:	2b00      	cmp	r3, #0
    1f8a:	d054      	beq.n	2036 <STACK_SIZE+0x36>

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1f8c:	2200      	movs	r2, #0
    1f8e:	230e      	movs	r3, #14
    1f90:	446b      	add	r3, sp
    1f92:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f94:	6823      	ldr	r3, [r4, #0]
    1f96:	4698      	mov	r8, r3
    1f98:	4bb2      	ldr	r3, [pc, #712]	; (2264 <STACK_SIZE+0x264>)
    1f9a:	6818      	ldr	r0, [r3, #0]
 */
static inline void spi_disable(
		struct spi_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    1f9c:	2800      	cmp	r0, #0
    1f9e:	d062      	beq.n	2066 <STACK_SIZE+0x66>
    1fa0:	2c00      	cmp	r4, #0
    1fa2:	d052      	beq.n	204a <STACK_SIZE+0x4a>
	Assert(module->hw);
    1fa4:	6823      	ldr	r3, [r4, #0]
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d070      	beq.n	208c <STACK_SIZE+0x8c>

	SercomSpi *const spi_module = &(module->hw->SPI);
    1faa:	6826      	ldr	r6, [r4, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1fac:	0030      	movs	r0, r6
    1fae:	4bae      	ldr	r3, [pc, #696]	; (2268 <STACK_SIZE+0x268>)
    1fb0:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1fb2:	231f      	movs	r3, #31
    1fb4:	4018      	ands	r0, r3
    1fb6:	3b1e      	subs	r3, #30
    1fb8:	4083      	lsls	r3, r0
    1fba:	2280      	movs	r2, #128	; 0x80
    1fbc:	49ab      	ldr	r1, [pc, #684]	; (226c <STACK_SIZE+0x26c>)
    1fbe:	508b      	str	r3, [r1, r2]
    1fc0:	4fa8      	ldr	r7, [pc, #672]	; (2264 <STACK_SIZE+0x264>)
    1fc2:	e084      	b.n	20ce <STACK_SIZE+0xce>
	Assert(module);
    1fc4:	4baa      	ldr	r3, [pc, #680]	; (2270 <STACK_SIZE+0x270>)
    1fc6:	9301      	str	r3, [sp, #4]
    1fc8:	4baa      	ldr	r3, [pc, #680]	; (2274 <STACK_SIZE+0x274>)
    1fca:	9300      	str	r3, [sp, #0]
    1fcc:	235d      	movs	r3, #93	; 0x5d
    1fce:	4aaa      	ldr	r2, [pc, #680]	; (2278 <STACK_SIZE+0x278>)
    1fd0:	2101      	movs	r1, #1
    1fd2:	4eaa      	ldr	r6, [pc, #680]	; (227c <STACK_SIZE+0x27c>)
    1fd4:	47b0      	blx	r6
    1fd6:	4ba3      	ldr	r3, [pc, #652]	; (2264 <STACK_SIZE+0x264>)
    1fd8:	6818      	ldr	r0, [r3, #0]
	Assert(baudrate);
    1fda:	2800      	cmp	r0, #0
    1fdc:	d002      	beq.n	1fe4 <spi_set_baudrate+0x84>
    1fde:	e7cd      	b.n	1f7c <spi_set_baudrate+0x1c>
	Assert(module);
    1fe0:	2c00      	cmp	r4, #0
    1fe2:	d00c      	beq.n	1ffe <spi_set_baudrate+0x9e>
	Assert(baudrate);
    1fe4:	4653      	mov	r3, sl
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d01e      	beq.n	2028 <STACK_SIZE+0x28>
	Assert(module->hw);
    1fea:	6823      	ldr	r3, [r4, #0]
    1fec:	2b00      	cmp	r3, #0
    1fee:	d1cd      	bne.n	1f8c <spi_set_baudrate+0x2c>
    1ff0:	335f      	adds	r3, #95	; 0x5f
    1ff2:	4aa1      	ldr	r2, [pc, #644]	; (2278 <STACK_SIZE+0x278>)
    1ff4:	49a2      	ldr	r1, [pc, #648]	; (2280 <STACK_SIZE+0x280>)
    1ff6:	48a3      	ldr	r0, [pc, #652]	; (2284 <STACK_SIZE+0x284>)
    1ff8:	4ca3      	ldr	r4, [pc, #652]	; (2288 <STACK_SIZE+0x288>)
    1ffa:	47a0      	blx	r4
    1ffc:	e7fe      	b.n	1ffc <spi_set_baudrate+0x9c>
	Assert(module);
    1ffe:	235d      	movs	r3, #93	; 0x5d
    2000:	4a9d      	ldr	r2, [pc, #628]	; (2278 <STACK_SIZE+0x278>)
    2002:	499b      	ldr	r1, [pc, #620]	; (2270 <STACK_SIZE+0x270>)
    2004:	489f      	ldr	r0, [pc, #636]	; (2284 <STACK_SIZE+0x284>)
    2006:	4ca0      	ldr	r4, [pc, #640]	; (2288 <STACK_SIZE+0x288>)
    2008:	47a0      	blx	r4
    200a:	e7fe      	b.n	200a <STACK_SIZE+0xa>
	Assert(baudrate);
    200c:	4b9f      	ldr	r3, [pc, #636]	; (228c <STACK_SIZE+0x28c>)
    200e:	9301      	str	r3, [sp, #4]
    2010:	4b98      	ldr	r3, [pc, #608]	; (2274 <STACK_SIZE+0x274>)
    2012:	9300      	str	r3, [sp, #0]
    2014:	235e      	movs	r3, #94	; 0x5e
    2016:	4a98      	ldr	r2, [pc, #608]	; (2278 <STACK_SIZE+0x278>)
    2018:	2101      	movs	r1, #1
    201a:	4e98      	ldr	r6, [pc, #608]	; (227c <STACK_SIZE+0x27c>)
    201c:	47b0      	blx	r6
    201e:	4b91      	ldr	r3, [pc, #580]	; (2264 <STACK_SIZE+0x264>)
    2020:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2022:	2800      	cmp	r0, #0
    2024:	d1af      	bne.n	1f86 <spi_set_baudrate+0x26>
    2026:	e7e0      	b.n	1fea <spi_set_baudrate+0x8a>
	Assert(baudrate);
    2028:	335e      	adds	r3, #94	; 0x5e
    202a:	4a93      	ldr	r2, [pc, #588]	; (2278 <STACK_SIZE+0x278>)
    202c:	4997      	ldr	r1, [pc, #604]	; (228c <STACK_SIZE+0x28c>)
    202e:	4895      	ldr	r0, [pc, #596]	; (2284 <STACK_SIZE+0x284>)
    2030:	4c95      	ldr	r4, [pc, #596]	; (2288 <STACK_SIZE+0x288>)
    2032:	47a0      	blx	r4
    2034:	e7fe      	b.n	2034 <STACK_SIZE+0x34>
	Assert(module->hw);
    2036:	4b92      	ldr	r3, [pc, #584]	; (2280 <STACK_SIZE+0x280>)
    2038:	9301      	str	r3, [sp, #4]
    203a:	4b8e      	ldr	r3, [pc, #568]	; (2274 <STACK_SIZE+0x274>)
    203c:	9300      	str	r3, [sp, #0]
    203e:	235f      	movs	r3, #95	; 0x5f
    2040:	4a8d      	ldr	r2, [pc, #564]	; (2278 <STACK_SIZE+0x278>)
    2042:	2101      	movs	r1, #1
    2044:	4e8d      	ldr	r6, [pc, #564]	; (227c <STACK_SIZE+0x27c>)
    2046:	47b0      	blx	r6
    2048:	e7a0      	b.n	1f8c <spi_set_baudrate+0x2c>
	Assert(module);
    204a:	4b89      	ldr	r3, [pc, #548]	; (2270 <STACK_SIZE+0x270>)
    204c:	9301      	str	r3, [sp, #4]
    204e:	4b89      	ldr	r3, [pc, #548]	; (2274 <STACK_SIZE+0x274>)
    2050:	9300      	str	r3, [sp, #0]
    2052:	4b8f      	ldr	r3, [pc, #572]	; (2290 <STACK_SIZE+0x290>)
    2054:	4a8f      	ldr	r2, [pc, #572]	; (2294 <STACK_SIZE+0x294>)
    2056:	2101      	movs	r1, #1
    2058:	4f88      	ldr	r7, [pc, #544]	; (227c <STACK_SIZE+0x27c>)
    205a:	47b8      	blx	r7
    205c:	4b81      	ldr	r3, [pc, #516]	; (2264 <STACK_SIZE+0x264>)
    205e:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2060:	2800      	cmp	r0, #0
    2062:	d19f      	bne.n	1fa4 <spi_set_baudrate+0x44>
    2064:	e001      	b.n	206a <STACK_SIZE+0x6a>
	Assert(module);
    2066:	2c00      	cmp	r4, #0
    2068:	d009      	beq.n	207e <STACK_SIZE+0x7e>
	Assert(module->hw);
    206a:	6823      	ldr	r3, [r4, #0]
    206c:	2b00      	cmp	r3, #0
    206e:	d19c      	bne.n	1faa <spi_set_baudrate+0x4a>
    2070:	4b89      	ldr	r3, [pc, #548]	; (2298 <STACK_SIZE+0x298>)
    2072:	4a88      	ldr	r2, [pc, #544]	; (2294 <STACK_SIZE+0x294>)
    2074:	4982      	ldr	r1, [pc, #520]	; (2280 <STACK_SIZE+0x280>)
    2076:	4883      	ldr	r0, [pc, #524]	; (2284 <STACK_SIZE+0x284>)
    2078:	4c83      	ldr	r4, [pc, #524]	; (2288 <STACK_SIZE+0x288>)
    207a:	47a0      	blx	r4
    207c:	e7fe      	b.n	207c <STACK_SIZE+0x7c>
	Assert(module);
    207e:	4b84      	ldr	r3, [pc, #528]	; (2290 <STACK_SIZE+0x290>)
    2080:	4a84      	ldr	r2, [pc, #528]	; (2294 <STACK_SIZE+0x294>)
    2082:	497b      	ldr	r1, [pc, #492]	; (2270 <STACK_SIZE+0x270>)
    2084:	487f      	ldr	r0, [pc, #508]	; (2284 <STACK_SIZE+0x284>)
    2086:	4c80      	ldr	r4, [pc, #512]	; (2288 <STACK_SIZE+0x288>)
    2088:	47a0      	blx	r4
    208a:	e7fe      	b.n	208a <STACK_SIZE+0x8a>
	Assert(module->hw);
    208c:	4b7c      	ldr	r3, [pc, #496]	; (2280 <STACK_SIZE+0x280>)
    208e:	9301      	str	r3, [sp, #4]
    2090:	4b78      	ldr	r3, [pc, #480]	; (2274 <STACK_SIZE+0x274>)
    2092:	9300      	str	r3, [sp, #0]
    2094:	4b80      	ldr	r3, [pc, #512]	; (2298 <STACK_SIZE+0x298>)
    2096:	4a7f      	ldr	r2, [pc, #508]	; (2294 <STACK_SIZE+0x294>)
    2098:	2101      	movs	r1, #1
    209a:	4f78      	ldr	r7, [pc, #480]	; (227c <STACK_SIZE+0x27c>)
    209c:	47b8      	blx	r7
    209e:	e784      	b.n	1faa <spi_set_baudrate+0x4a>
	Assert(module);
    20a0:	4b73      	ldr	r3, [pc, #460]	; (2270 <STACK_SIZE+0x270>)
    20a2:	9301      	str	r3, [sp, #4]
    20a4:	4b73      	ldr	r3, [pc, #460]	; (2274 <STACK_SIZE+0x274>)
    20a6:	9300      	str	r3, [sp, #0]
    20a8:	4b7c      	ldr	r3, [pc, #496]	; (229c <STACK_SIZE+0x29c>)
    20aa:	4a7a      	ldr	r2, [pc, #488]	; (2294 <STACK_SIZE+0x294>)
    20ac:	2101      	movs	r1, #1
    20ae:	4d73      	ldr	r5, [pc, #460]	; (227c <STACK_SIZE+0x27c>)
    20b0:	47a8      	blx	r5
    20b2:	4b6c      	ldr	r3, [pc, #432]	; (2264 <STACK_SIZE+0x264>)
    20b4:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    20b6:	2800      	cmp	r0, #0
    20b8:	d10e      	bne.n	20d8 <STACK_SIZE+0xd8>
    20ba:	e001      	b.n	20c0 <STACK_SIZE+0xc0>
	Assert(module);
    20bc:	2c00      	cmp	r4, #0
    20be:	d018      	beq.n	20f2 <STACK_SIZE+0xf2>
	Assert(module->hw);
    20c0:	6823      	ldr	r3, [r4, #0]
    20c2:	2b00      	cmp	r3, #0
    20c4:	d01c      	beq.n	2100 <STACK_SIZE+0x100>
	SercomSpi *const spi_module = &(module->hw->SPI);
    20c6:	6823      	ldr	r3, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    20c8:	69db      	ldr	r3, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
    20ca:	2b00      	cmp	r3, #0
    20cc:	d01f      	beq.n	210e <STACK_SIZE+0x10e>
    20ce:	6838      	ldr	r0, [r7, #0]
	Assert(module);
    20d0:	2800      	cmp	r0, #0
    20d2:	d0f3      	beq.n	20bc <STACK_SIZE+0xbc>
    20d4:	2c00      	cmp	r4, #0
    20d6:	d0e3      	beq.n	20a0 <STACK_SIZE+0xa0>
	Assert(module->hw);
    20d8:	6823      	ldr	r3, [r4, #0]
    20da:	2b00      	cmp	r3, #0
    20dc:	d1f3      	bne.n	20c6 <STACK_SIZE+0xc6>
    20de:	4b68      	ldr	r3, [pc, #416]	; (2280 <STACK_SIZE+0x280>)
    20e0:	9301      	str	r3, [sp, #4]
    20e2:	4b64      	ldr	r3, [pc, #400]	; (2274 <STACK_SIZE+0x274>)
    20e4:	9300      	str	r3, [sp, #0]
    20e6:	4b6e      	ldr	r3, [pc, #440]	; (22a0 <STACK_SIZE+0x2a0>)
    20e8:	4a6a      	ldr	r2, [pc, #424]	; (2294 <STACK_SIZE+0x294>)
    20ea:	2101      	movs	r1, #1
    20ec:	4d63      	ldr	r5, [pc, #396]	; (227c <STACK_SIZE+0x27c>)
    20ee:	47a8      	blx	r5
    20f0:	e7e9      	b.n	20c6 <STACK_SIZE+0xc6>
	Assert(module);
    20f2:	4b6a      	ldr	r3, [pc, #424]	; (229c <STACK_SIZE+0x29c>)
    20f4:	4a67      	ldr	r2, [pc, #412]	; (2294 <STACK_SIZE+0x294>)
    20f6:	495e      	ldr	r1, [pc, #376]	; (2270 <STACK_SIZE+0x270>)
    20f8:	4862      	ldr	r0, [pc, #392]	; (2284 <STACK_SIZE+0x284>)
    20fa:	4c63      	ldr	r4, [pc, #396]	; (2288 <STACK_SIZE+0x288>)
    20fc:	47a0      	blx	r4
    20fe:	e7fe      	b.n	20fe <STACK_SIZE+0xfe>
	Assert(module->hw);
    2100:	4b67      	ldr	r3, [pc, #412]	; (22a0 <STACK_SIZE+0x2a0>)
    2102:	4a64      	ldr	r2, [pc, #400]	; (2294 <STACK_SIZE+0x294>)
    2104:	495e      	ldr	r1, [pc, #376]	; (2280 <STACK_SIZE+0x280>)
    2106:	485f      	ldr	r0, [pc, #380]	; (2284 <STACK_SIZE+0x284>)
    2108:	4c5f      	ldr	r4, [pc, #380]	; (2288 <STACK_SIZE+0x288>)
    210a:	47a0      	blx	r4
    210c:	e7fe      	b.n	210c <STACK_SIZE+0x10c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    210e:	338f      	adds	r3, #143	; 0x8f
    2110:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2112:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2114:	6833      	ldr	r3, [r6, #0]
    2116:	2202      	movs	r2, #2
    2118:	4393      	bics	r3, r2
    211a:	6033      	str	r3, [r6, #0]
    211c:	4f51      	ldr	r7, [pc, #324]	; (2264 <STACK_SIZE+0x264>)
    211e:	e016      	b.n	214e <STACK_SIZE+0x14e>
	Assert(module);
    2120:	4b53      	ldr	r3, [pc, #332]	; (2270 <STACK_SIZE+0x270>)
    2122:	9301      	str	r3, [sp, #4]
    2124:	4b53      	ldr	r3, [pc, #332]	; (2274 <STACK_SIZE+0x274>)
    2126:	9300      	str	r3, [sp, #0]
    2128:	4b5c      	ldr	r3, [pc, #368]	; (229c <STACK_SIZE+0x29c>)
    212a:	4a5a      	ldr	r2, [pc, #360]	; (2294 <STACK_SIZE+0x294>)
    212c:	2101      	movs	r1, #1
    212e:	4e53      	ldr	r6, [pc, #332]	; (227c <STACK_SIZE+0x27c>)
    2130:	47b0      	blx	r6
    2132:	4b4c      	ldr	r3, [pc, #304]	; (2264 <STACK_SIZE+0x264>)
    2134:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2136:	2800      	cmp	r0, #0
    2138:	d10e      	bne.n	2158 <STACK_SIZE+0x158>
    213a:	e001      	b.n	2140 <STACK_SIZE+0x140>
	Assert(module);
    213c:	2c00      	cmp	r4, #0
    213e:	d018      	beq.n	2172 <STACK_SIZE+0x172>
	Assert(module->hw);
    2140:	6823      	ldr	r3, [r4, #0]
    2142:	2b00      	cmp	r3, #0
    2144:	d01c      	beq.n	2180 <STACK_SIZE+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2146:	6820      	ldr	r0, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    2148:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    214a:	2b00      	cmp	r3, #0
    214c:	d01f      	beq.n	218e <STACK_SIZE+0x18e>
    214e:	6838      	ldr	r0, [r7, #0]
	Assert(module);
    2150:	2800      	cmp	r0, #0
    2152:	d0f3      	beq.n	213c <STACK_SIZE+0x13c>
    2154:	2c00      	cmp	r4, #0
    2156:	d0e3      	beq.n	2120 <STACK_SIZE+0x120>
	Assert(module->hw);
    2158:	6823      	ldr	r3, [r4, #0]
    215a:	2b00      	cmp	r3, #0
    215c:	d1f3      	bne.n	2146 <STACK_SIZE+0x146>
    215e:	4b48      	ldr	r3, [pc, #288]	; (2280 <STACK_SIZE+0x280>)
    2160:	9301      	str	r3, [sp, #4]
    2162:	4b44      	ldr	r3, [pc, #272]	; (2274 <STACK_SIZE+0x274>)
    2164:	9300      	str	r3, [sp, #0]
    2166:	4b4e      	ldr	r3, [pc, #312]	; (22a0 <STACK_SIZE+0x2a0>)
    2168:	4a4a      	ldr	r2, [pc, #296]	; (2294 <STACK_SIZE+0x294>)
    216a:	2101      	movs	r1, #1
    216c:	4e43      	ldr	r6, [pc, #268]	; (227c <STACK_SIZE+0x27c>)
    216e:	47b0      	blx	r6
    2170:	e7e9      	b.n	2146 <STACK_SIZE+0x146>
	Assert(module);
    2172:	4b4a      	ldr	r3, [pc, #296]	; (229c <STACK_SIZE+0x29c>)
    2174:	4a47      	ldr	r2, [pc, #284]	; (2294 <STACK_SIZE+0x294>)
    2176:	493e      	ldr	r1, [pc, #248]	; (2270 <STACK_SIZE+0x270>)
    2178:	4842      	ldr	r0, [pc, #264]	; (2284 <STACK_SIZE+0x284>)
    217a:	4c43      	ldr	r4, [pc, #268]	; (2288 <STACK_SIZE+0x288>)
    217c:	47a0      	blx	r4
    217e:	e7fe      	b.n	217e <STACK_SIZE+0x17e>
	Assert(module->hw);
    2180:	4b47      	ldr	r3, [pc, #284]	; (22a0 <STACK_SIZE+0x2a0>)
    2182:	4a44      	ldr	r2, [pc, #272]	; (2294 <STACK_SIZE+0x294>)
    2184:	493e      	ldr	r1, [pc, #248]	; (2280 <STACK_SIZE+0x280>)
    2186:	483f      	ldr	r0, [pc, #252]	; (2284 <STACK_SIZE+0x284>)
    2188:	4c3f      	ldr	r4, [pc, #252]	; (2288 <STACK_SIZE+0x288>)
    218a:	47a0      	blx	r4
    218c:	e7fe      	b.n	218c <STACK_SIZE+0x18c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    218e:	4b45      	ldr	r3, [pc, #276]	; (22a4 <STACK_SIZE+0x2a4>)
    2190:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2192:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2194:	b2c0      	uxtb	r0, r0
    2196:	4b44      	ldr	r3, [pc, #272]	; (22a8 <STACK_SIZE+0x2a8>)
    2198:	4798      	blx	r3
    219a:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    219c:	220e      	movs	r2, #14
    219e:	446a      	add	r2, sp
    21a0:	4650      	mov	r0, sl
    21a2:	4b42      	ldr	r3, [pc, #264]	; (22ac <STACK_SIZE+0x2ac>)
    21a4:	4798      	blx	r3
    21a6:	1e05      	subs	r5, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    21a8:	d007      	beq.n	21ba <STACK_SIZE+0x1ba>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    21aa:	2517      	movs	r5, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    21ac:	0028      	movs	r0, r5
    21ae:	b004      	add	sp, #16
    21b0:	bc1c      	pop	{r2, r3, r4}
    21b2:	4690      	mov	r8, r2
    21b4:	4699      	mov	r9, r3
    21b6:	46a2      	mov	sl, r4
    21b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    21ba:	230e      	movs	r3, #14
    21bc:	446b      	add	r3, sp
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	4642      	mov	r2, r8
    21c2:	7313      	strb	r3, [r2, #12]
    21c4:	4e27      	ldr	r6, [pc, #156]	; (2264 <STACK_SIZE+0x264>)
	while (spi_is_syncing(module)) {
    21c6:	e016      	b.n	21f6 <STACK_SIZE+0x1f6>
	Assert(module);
    21c8:	4b29      	ldr	r3, [pc, #164]	; (2270 <STACK_SIZE+0x270>)
    21ca:	9301      	str	r3, [sp, #4]
    21cc:	4b29      	ldr	r3, [pc, #164]	; (2274 <STACK_SIZE+0x274>)
    21ce:	9300      	str	r3, [sp, #0]
    21d0:	4b32      	ldr	r3, [pc, #200]	; (229c <STACK_SIZE+0x29c>)
    21d2:	4a30      	ldr	r2, [pc, #192]	; (2294 <STACK_SIZE+0x294>)
    21d4:	2101      	movs	r1, #1
    21d6:	4f29      	ldr	r7, [pc, #164]	; (227c <STACK_SIZE+0x27c>)
    21d8:	47b8      	blx	r7
    21da:	4b22      	ldr	r3, [pc, #136]	; (2264 <STACK_SIZE+0x264>)
    21dc:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    21de:	2800      	cmp	r0, #0
    21e0:	d10e      	bne.n	2200 <STACK_SIZE+0x200>
    21e2:	e001      	b.n	21e8 <STACK_SIZE+0x1e8>
	Assert(module);
    21e4:	2c00      	cmp	r4, #0
    21e6:	d018      	beq.n	221a <STACK_SIZE+0x21a>
	Assert(module->hw);
    21e8:	6823      	ldr	r3, [r4, #0]
    21ea:	2b00      	cmp	r3, #0
    21ec:	d01c      	beq.n	2228 <STACK_SIZE+0x228>
	SercomSpi *const spi_module = &(module->hw->SPI);
    21ee:	6823      	ldr	r3, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    21f0:	69db      	ldr	r3, [r3, #28]
    21f2:	2b00      	cmp	r3, #0
    21f4:	d01f      	beq.n	2236 <STACK_SIZE+0x236>
    21f6:	6830      	ldr	r0, [r6, #0]
	Assert(module);
    21f8:	2800      	cmp	r0, #0
    21fa:	d0f3      	beq.n	21e4 <STACK_SIZE+0x1e4>
    21fc:	2c00      	cmp	r4, #0
    21fe:	d0e3      	beq.n	21c8 <STACK_SIZE+0x1c8>
	Assert(module->hw);
    2200:	6823      	ldr	r3, [r4, #0]
    2202:	2b00      	cmp	r3, #0
    2204:	d1f3      	bne.n	21ee <STACK_SIZE+0x1ee>
    2206:	4b1e      	ldr	r3, [pc, #120]	; (2280 <STACK_SIZE+0x280>)
    2208:	9301      	str	r3, [sp, #4]
    220a:	4b1a      	ldr	r3, [pc, #104]	; (2274 <STACK_SIZE+0x274>)
    220c:	9300      	str	r3, [sp, #0]
    220e:	4b24      	ldr	r3, [pc, #144]	; (22a0 <STACK_SIZE+0x2a0>)
    2210:	4a20      	ldr	r2, [pc, #128]	; (2294 <STACK_SIZE+0x294>)
    2212:	2101      	movs	r1, #1
    2214:	4f19      	ldr	r7, [pc, #100]	; (227c <STACK_SIZE+0x27c>)
    2216:	47b8      	blx	r7
    2218:	e7e9      	b.n	21ee <STACK_SIZE+0x1ee>
	Assert(module);
    221a:	4b20      	ldr	r3, [pc, #128]	; (229c <STACK_SIZE+0x29c>)
    221c:	4a1d      	ldr	r2, [pc, #116]	; (2294 <STACK_SIZE+0x294>)
    221e:	4914      	ldr	r1, [pc, #80]	; (2270 <STACK_SIZE+0x270>)
    2220:	4818      	ldr	r0, [pc, #96]	; (2284 <STACK_SIZE+0x284>)
    2222:	4c19      	ldr	r4, [pc, #100]	; (2288 <STACK_SIZE+0x288>)
    2224:	47a0      	blx	r4
    2226:	e7fe      	b.n	2226 <STACK_SIZE+0x226>
	Assert(module->hw);
    2228:	4b1d      	ldr	r3, [pc, #116]	; (22a0 <STACK_SIZE+0x2a0>)
    222a:	4a1a      	ldr	r2, [pc, #104]	; (2294 <STACK_SIZE+0x294>)
    222c:	4914      	ldr	r1, [pc, #80]	; (2280 <STACK_SIZE+0x280>)
    222e:	4815      	ldr	r0, [pc, #84]	; (2284 <STACK_SIZE+0x284>)
    2230:	4c15      	ldr	r4, [pc, #84]	; (2288 <STACK_SIZE+0x288>)
    2232:	47a0      	blx	r4
    2234:	e7fe      	b.n	2234 <STACK_SIZE+0x234>
    2236:	4b0b      	ldr	r3, [pc, #44]	; (2264 <STACK_SIZE+0x264>)
    2238:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    223a:	2800      	cmp	r0, #0
    223c:	d050      	beq.n	22e0 <STACK_SIZE+0x2e0>
    223e:	2c00      	cmp	r4, #0
    2240:	d036      	beq.n	22b0 <STACK_SIZE+0x2b0>
	Assert(module->hw);
    2242:	6823      	ldr	r3, [r4, #0]
    2244:	2b00      	cmp	r3, #0
    2246:	d054      	beq.n	22f2 <STACK_SIZE+0x2f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2248:	6826      	ldr	r6, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    224a:	0030      	movs	r0, r6
    224c:	4b06      	ldr	r3, [pc, #24]	; (2268 <STACK_SIZE+0x268>)
    224e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2250:	231f      	movs	r3, #31
    2252:	4018      	ands	r0, r3
    2254:	3b1e      	subs	r3, #30
    2256:	4083      	lsls	r3, r0
    2258:	4a04      	ldr	r2, [pc, #16]	; (226c <STACK_SIZE+0x26c>)
    225a:	6013      	str	r3, [r2, #0]
    225c:	4b01      	ldr	r3, [pc, #4]	; (2264 <STACK_SIZE+0x264>)
    225e:	4699      	mov	r9, r3
    2260:	e069      	b.n	2336 <STACK_SIZE+0x336>
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	2000011c 	.word	0x2000011c
    2268:	00001ed1 	.word	0x00001ed1
    226c:	e000e100 	.word	0xe000e100
    2270:	00007094 	.word	0x00007094
    2274:	00006c40 	.word	0x00006c40
    2278:	00007068 	.word	0x00007068
    227c:	000017e1 	.word	0x000017e1
    2280:	00006d80 	.word	0x00006d80
    2284:	00006c58 	.word	0x00006c58
    2288:	00006055 	.word	0x00006055
    228c:	000070a4 	.word	0x000070a4
    2290:	0000041b 	.word	0x0000041b
    2294:	00006d54 	.word	0x00006d54
    2298:	0000041c 	.word	0x0000041c
    229c:	00000361 	.word	0x00000361
    22a0:	00000362 	.word	0x00000362
    22a4:	00001dc5 	.word	0x00001dc5
    22a8:	00004bad 	.word	0x00004bad
    22ac:	00001b0b 	.word	0x00001b0b
	Assert(module);
    22b0:	4b50      	ldr	r3, [pc, #320]	; (23f4 <STACK_SIZE+0x3f4>)
    22b2:	9301      	str	r3, [sp, #4]
    22b4:	4b50      	ldr	r3, [pc, #320]	; (23f8 <STACK_SIZE+0x3f8>)
    22b6:	9300      	str	r3, [sp, #0]
    22b8:	4b50      	ldr	r3, [pc, #320]	; (23fc <STACK_SIZE+0x3fc>)
    22ba:	4a51      	ldr	r2, [pc, #324]	; (2400 <STACK_SIZE+0x400>)
    22bc:	2101      	movs	r1, #1
    22be:	4e51      	ldr	r6, [pc, #324]	; (2404 <STACK_SIZE+0x404>)
    22c0:	47b0      	blx	r6
    22c2:	4b51      	ldr	r3, [pc, #324]	; (2408 <STACK_SIZE+0x408>)
    22c4:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    22c6:	2800      	cmp	r0, #0
    22c8:	d1bb      	bne.n	2242 <STACK_SIZE+0x242>
    22ca:	6823      	ldr	r3, [r4, #0]
    22cc:	2b00      	cmp	r3, #0
    22ce:	d1bb      	bne.n	2248 <STACK_SIZE+0x248>
    22d0:	2380      	movs	r3, #128	; 0x80
    22d2:	00db      	lsls	r3, r3, #3
    22d4:	4a4a      	ldr	r2, [pc, #296]	; (2400 <STACK_SIZE+0x400>)
    22d6:	494d      	ldr	r1, [pc, #308]	; (240c <STACK_SIZE+0x40c>)
    22d8:	484d      	ldr	r0, [pc, #308]	; (2410 <STACK_SIZE+0x410>)
    22da:	4c4e      	ldr	r4, [pc, #312]	; (2414 <STACK_SIZE+0x414>)
    22dc:	47a0      	blx	r4
    22de:	e7fe      	b.n	22de <STACK_SIZE+0x2de>
	Assert(module);
    22e0:	2c00      	cmp	r4, #0
    22e2:	d1f2      	bne.n	22ca <STACK_SIZE+0x2ca>
    22e4:	4b45      	ldr	r3, [pc, #276]	; (23fc <STACK_SIZE+0x3fc>)
    22e6:	4a46      	ldr	r2, [pc, #280]	; (2400 <STACK_SIZE+0x400>)
    22e8:	4942      	ldr	r1, [pc, #264]	; (23f4 <STACK_SIZE+0x3f4>)
    22ea:	4849      	ldr	r0, [pc, #292]	; (2410 <STACK_SIZE+0x410>)
    22ec:	4c49      	ldr	r4, [pc, #292]	; (2414 <STACK_SIZE+0x414>)
    22ee:	47a0      	blx	r4
    22f0:	e7fe      	b.n	22f0 <STACK_SIZE+0x2f0>
	Assert(module->hw);
    22f2:	4b46      	ldr	r3, [pc, #280]	; (240c <STACK_SIZE+0x40c>)
    22f4:	9301      	str	r3, [sp, #4]
    22f6:	4b40      	ldr	r3, [pc, #256]	; (23f8 <STACK_SIZE+0x3f8>)
    22f8:	9300      	str	r3, [sp, #0]
    22fa:	2380      	movs	r3, #128	; 0x80
    22fc:	00db      	lsls	r3, r3, #3
    22fe:	4a40      	ldr	r2, [pc, #256]	; (2400 <STACK_SIZE+0x400>)
    2300:	2101      	movs	r1, #1
    2302:	4e40      	ldr	r6, [pc, #256]	; (2404 <STACK_SIZE+0x404>)
    2304:	47b0      	blx	r6
    2306:	e79f      	b.n	2248 <STACK_SIZE+0x248>
	Assert(module);
    2308:	4b3a      	ldr	r3, [pc, #232]	; (23f4 <STACK_SIZE+0x3f4>)
    230a:	9301      	str	r3, [sp, #4]
    230c:	4b3a      	ldr	r3, [pc, #232]	; (23f8 <STACK_SIZE+0x3f8>)
    230e:	9300      	str	r3, [sp, #0]
    2310:	4b41      	ldr	r3, [pc, #260]	; (2418 <STACK_SIZE+0x418>)
    2312:	4a3b      	ldr	r2, [pc, #236]	; (2400 <STACK_SIZE+0x400>)
    2314:	2101      	movs	r1, #1
    2316:	4f3b      	ldr	r7, [pc, #236]	; (2404 <STACK_SIZE+0x404>)
    2318:	47b8      	blx	r7
    231a:	4b3b      	ldr	r3, [pc, #236]	; (2408 <STACK_SIZE+0x408>)
    231c:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    231e:	2800      	cmp	r0, #0
    2320:	d10f      	bne.n	2342 <STACK_SIZE+0x342>
    2322:	e001      	b.n	2328 <STACK_SIZE+0x328>
	Assert(module);
    2324:	2c00      	cmp	r4, #0
    2326:	d019      	beq.n	235c <STACK_SIZE+0x35c>
	Assert(module->hw);
    2328:	6823      	ldr	r3, [r4, #0]
    232a:	2b00      	cmp	r3, #0
    232c:	d01d      	beq.n	236a <STACK_SIZE+0x36a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    232e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    2330:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    2332:	2b00      	cmp	r3, #0
    2334:	d020      	beq.n	2378 <STACK_SIZE+0x378>
    2336:	464b      	mov	r3, r9
    2338:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    233a:	2800      	cmp	r0, #0
    233c:	d0f2      	beq.n	2324 <STACK_SIZE+0x324>
    233e:	2c00      	cmp	r4, #0
    2340:	d0e2      	beq.n	2308 <STACK_SIZE+0x308>
	Assert(module->hw);
    2342:	6823      	ldr	r3, [r4, #0]
    2344:	2b00      	cmp	r3, #0
    2346:	d1f2      	bne.n	232e <STACK_SIZE+0x32e>
    2348:	4b30      	ldr	r3, [pc, #192]	; (240c <STACK_SIZE+0x40c>)
    234a:	9301      	str	r3, [sp, #4]
    234c:	4b2a      	ldr	r3, [pc, #168]	; (23f8 <STACK_SIZE+0x3f8>)
    234e:	9300      	str	r3, [sp, #0]
    2350:	4b32      	ldr	r3, [pc, #200]	; (241c <STACK_SIZE+0x41c>)
    2352:	4a2b      	ldr	r2, [pc, #172]	; (2400 <STACK_SIZE+0x400>)
    2354:	2101      	movs	r1, #1
    2356:	4f2b      	ldr	r7, [pc, #172]	; (2404 <STACK_SIZE+0x404>)
    2358:	47b8      	blx	r7
    235a:	e7e8      	b.n	232e <STACK_SIZE+0x32e>
	Assert(module);
    235c:	4b2e      	ldr	r3, [pc, #184]	; (2418 <STACK_SIZE+0x418>)
    235e:	4a28      	ldr	r2, [pc, #160]	; (2400 <STACK_SIZE+0x400>)
    2360:	4924      	ldr	r1, [pc, #144]	; (23f4 <STACK_SIZE+0x3f4>)
    2362:	482b      	ldr	r0, [pc, #172]	; (2410 <STACK_SIZE+0x410>)
    2364:	4c2b      	ldr	r4, [pc, #172]	; (2414 <STACK_SIZE+0x414>)
    2366:	47a0      	blx	r4
    2368:	e7fe      	b.n	2368 <STACK_SIZE+0x368>
	Assert(module->hw);
    236a:	4b2c      	ldr	r3, [pc, #176]	; (241c <STACK_SIZE+0x41c>)
    236c:	4a24      	ldr	r2, [pc, #144]	; (2400 <STACK_SIZE+0x400>)
    236e:	4927      	ldr	r1, [pc, #156]	; (240c <STACK_SIZE+0x40c>)
    2370:	4827      	ldr	r0, [pc, #156]	; (2410 <STACK_SIZE+0x410>)
    2372:	4c28      	ldr	r4, [pc, #160]	; (2414 <STACK_SIZE+0x414>)
    2374:	47a0      	blx	r4
    2376:	e7fe      	b.n	2376 <STACK_SIZE+0x376>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2378:	6833      	ldr	r3, [r6, #0]
    237a:	2202      	movs	r2, #2
    237c:	4313      	orrs	r3, r2
    237e:	6033      	str	r3, [r6, #0]
    2380:	4e21      	ldr	r6, [pc, #132]	; (2408 <STACK_SIZE+0x408>)
    2382:	6830      	ldr	r0, [r6, #0]
	Assert(module);
    2384:	2800      	cmp	r0, #0
    2386:	d017      	beq.n	23b8 <STACK_SIZE+0x3b8>
    2388:	2c00      	cmp	r4, #0
    238a:	d007      	beq.n	239c <STACK_SIZE+0x39c>
	Assert(module->hw);
    238c:	6823      	ldr	r3, [r4, #0]
    238e:	2b00      	cmp	r3, #0
    2390:	d025      	beq.n	23de <STACK_SIZE+0x3de>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2392:	6823      	ldr	r3, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    2394:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    2396:	2b00      	cmp	r3, #0
    2398:	d1f3      	bne.n	2382 <STACK_SIZE+0x382>
    239a:	e707      	b.n	21ac <STACK_SIZE+0x1ac>
	Assert(module);
    239c:	4b15      	ldr	r3, [pc, #84]	; (23f4 <STACK_SIZE+0x3f4>)
    239e:	9301      	str	r3, [sp, #4]
    23a0:	4b15      	ldr	r3, [pc, #84]	; (23f8 <STACK_SIZE+0x3f8>)
    23a2:	9300      	str	r3, [sp, #0]
    23a4:	4b1c      	ldr	r3, [pc, #112]	; (2418 <STACK_SIZE+0x418>)
    23a6:	4a16      	ldr	r2, [pc, #88]	; (2400 <STACK_SIZE+0x400>)
    23a8:	2101      	movs	r1, #1
    23aa:	4f16      	ldr	r7, [pc, #88]	; (2404 <STACK_SIZE+0x404>)
    23ac:	47b8      	blx	r7
    23ae:	4b16      	ldr	r3, [pc, #88]	; (2408 <STACK_SIZE+0x408>)
    23b0:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    23b2:	2800      	cmp	r0, #0
    23b4:	d002      	beq.n	23bc <STACK_SIZE+0x3bc>
    23b6:	e7e9      	b.n	238c <STACK_SIZE+0x38c>
	Assert(module);
    23b8:	2c00      	cmp	r4, #0
    23ba:	d009      	beq.n	23d0 <STACK_SIZE+0x3d0>
	Assert(module->hw);
    23bc:	6823      	ldr	r3, [r4, #0]
    23be:	2b00      	cmp	r3, #0
    23c0:	d1e7      	bne.n	2392 <STACK_SIZE+0x392>
    23c2:	4b16      	ldr	r3, [pc, #88]	; (241c <STACK_SIZE+0x41c>)
    23c4:	4a0e      	ldr	r2, [pc, #56]	; (2400 <STACK_SIZE+0x400>)
    23c6:	4911      	ldr	r1, [pc, #68]	; (240c <STACK_SIZE+0x40c>)
    23c8:	4811      	ldr	r0, [pc, #68]	; (2410 <STACK_SIZE+0x410>)
    23ca:	4c12      	ldr	r4, [pc, #72]	; (2414 <STACK_SIZE+0x414>)
    23cc:	47a0      	blx	r4
    23ce:	e7fe      	b.n	23ce <STACK_SIZE+0x3ce>
	Assert(module);
    23d0:	4b11      	ldr	r3, [pc, #68]	; (2418 <STACK_SIZE+0x418>)
    23d2:	4a0b      	ldr	r2, [pc, #44]	; (2400 <STACK_SIZE+0x400>)
    23d4:	4907      	ldr	r1, [pc, #28]	; (23f4 <STACK_SIZE+0x3f4>)
    23d6:	480e      	ldr	r0, [pc, #56]	; (2410 <STACK_SIZE+0x410>)
    23d8:	4c0e      	ldr	r4, [pc, #56]	; (2414 <STACK_SIZE+0x414>)
    23da:	47a0      	blx	r4
    23dc:	e7fe      	b.n	23dc <STACK_SIZE+0x3dc>
	Assert(module->hw);
    23de:	4b0b      	ldr	r3, [pc, #44]	; (240c <STACK_SIZE+0x40c>)
    23e0:	9301      	str	r3, [sp, #4]
    23e2:	4b05      	ldr	r3, [pc, #20]	; (23f8 <STACK_SIZE+0x3f8>)
    23e4:	9300      	str	r3, [sp, #0]
    23e6:	4b0d      	ldr	r3, [pc, #52]	; (241c <STACK_SIZE+0x41c>)
    23e8:	4a05      	ldr	r2, [pc, #20]	; (2400 <STACK_SIZE+0x400>)
    23ea:	2101      	movs	r1, #1
    23ec:	4f05      	ldr	r7, [pc, #20]	; (2404 <STACK_SIZE+0x404>)
    23ee:	47b8      	blx	r7
    23f0:	e7cf      	b.n	2392 <STACK_SIZE+0x392>
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	00007094 	.word	0x00007094
    23f8:	00006c40 	.word	0x00006c40
    23fc:	000003ff 	.word	0x000003ff
    2400:	00006d54 	.word	0x00006d54
    2404:	000017e1 	.word	0x000017e1
    2408:	2000011c 	.word	0x2000011c
    240c:	00006d80 	.word	0x00006d80
    2410:	00006c58 	.word	0x00006c58
    2414:	00006055 	.word	0x00006055
    2418:	00000361 	.word	0x00000361
    241c:	00000362 	.word	0x00000362

00002420 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2420:	b5f0      	push	{r4, r5, r6, r7, lr}
    2422:	b08d      	sub	sp, #52	; 0x34
    2424:	0004      	movs	r4, r0
    2426:	000e      	movs	r6, r1
    2428:	0015      	movs	r5, r2
    242a:	4bbb      	ldr	r3, [pc, #748]	; (2718 <spi_init+0x2f8>)
    242c:	6818      	ldr	r0, [r3, #0]

	/* Sanity check arguments */
	Assert(module);
    242e:	2800      	cmp	r0, #0
    2430:	d01d      	beq.n	246e <spi_init+0x4e>
    2432:	2c00      	cmp	r4, #0
    2434:	d00c      	beq.n	2450 <spi_init+0x30>
	Assert(hw);
    2436:	2e00      	cmp	r6, #0
    2438:	d02f      	beq.n	249a <spi_init+0x7a>
    243a:	4bb7      	ldr	r3, [pc, #732]	; (2718 <spi_init+0x2f8>)
    243c:	6818      	ldr	r0, [r3, #0]
	Assert(config);
    243e:	2d00      	cmp	r5, #0
    2440:	d042      	beq.n	24c8 <spi_init+0xa8>

	/* Initialize device instance */
	module->hw = hw;
    2442:	6026      	str	r6, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2444:	6833      	ldr	r3, [r6, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    2446:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2448:	079b      	lsls	r3, r3, #30
    244a:	d548      	bpl.n	24de <spi_init+0xbe>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    244c:	b00d      	add	sp, #52	; 0x34
    244e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Assert(module);
    2450:	4bb2      	ldr	r3, [pc, #712]	; (271c <spi_init+0x2fc>)
    2452:	9301      	str	r3, [sp, #4]
    2454:	4bb2      	ldr	r3, [pc, #712]	; (2720 <spi_init+0x300>)
    2456:	9300      	str	r3, [sp, #0]
    2458:	23f5      	movs	r3, #245	; 0xf5
    245a:	005b      	lsls	r3, r3, #1
    245c:	4ab1      	ldr	r2, [pc, #708]	; (2724 <spi_init+0x304>)
    245e:	2101      	movs	r1, #1
    2460:	4fb1      	ldr	r7, [pc, #708]	; (2728 <spi_init+0x308>)
    2462:	47b8      	blx	r7
    2464:	4bac      	ldr	r3, [pc, #688]	; (2718 <spi_init+0x2f8>)
    2466:	6818      	ldr	r0, [r3, #0]
	Assert(hw);
    2468:	2800      	cmp	r0, #0
    246a:	d1e4      	bne.n	2436 <spi_init+0x16>
    246c:	e001      	b.n	2472 <spi_init+0x52>
	Assert(module);
    246e:	2c00      	cmp	r4, #0
    2470:	d00b      	beq.n	248a <spi_init+0x6a>
	Assert(hw);
    2472:	2e00      	cmp	r6, #0
    2474:	d020      	beq.n	24b8 <spi_init+0x98>
	Assert(config);
    2476:	2d00      	cmp	r5, #0
    2478:	d1e3      	bne.n	2442 <spi_init+0x22>
    247a:	23f6      	movs	r3, #246	; 0xf6
    247c:	005b      	lsls	r3, r3, #1
    247e:	4aa9      	ldr	r2, [pc, #676]	; (2724 <spi_init+0x304>)
    2480:	49aa      	ldr	r1, [pc, #680]	; (272c <spi_init+0x30c>)
    2482:	48ab      	ldr	r0, [pc, #684]	; (2730 <spi_init+0x310>)
    2484:	4cab      	ldr	r4, [pc, #684]	; (2734 <spi_init+0x314>)
    2486:	47a0      	blx	r4
    2488:	e7fe      	b.n	2488 <spi_init+0x68>
	Assert(module);
    248a:	23f5      	movs	r3, #245	; 0xf5
    248c:	005b      	lsls	r3, r3, #1
    248e:	4aa5      	ldr	r2, [pc, #660]	; (2724 <spi_init+0x304>)
    2490:	49a2      	ldr	r1, [pc, #648]	; (271c <spi_init+0x2fc>)
    2492:	48a7      	ldr	r0, [pc, #668]	; (2730 <spi_init+0x310>)
    2494:	4ca7      	ldr	r4, [pc, #668]	; (2734 <spi_init+0x314>)
    2496:	47a0      	blx	r4
    2498:	e7fe      	b.n	2498 <spi_init+0x78>
	Assert(hw);
    249a:	4ba7      	ldr	r3, [pc, #668]	; (2738 <spi_init+0x318>)
    249c:	9301      	str	r3, [sp, #4]
    249e:	4ba0      	ldr	r3, [pc, #640]	; (2720 <spi_init+0x300>)
    24a0:	9300      	str	r3, [sp, #0]
    24a2:	23ec      	movs	r3, #236	; 0xec
    24a4:	33ff      	adds	r3, #255	; 0xff
    24a6:	4a9f      	ldr	r2, [pc, #636]	; (2724 <spi_init+0x304>)
    24a8:	2101      	movs	r1, #1
    24aa:	4f9f      	ldr	r7, [pc, #636]	; (2728 <spi_init+0x308>)
    24ac:	47b8      	blx	r7
    24ae:	4b9a      	ldr	r3, [pc, #616]	; (2718 <spi_init+0x2f8>)
    24b0:	6818      	ldr	r0, [r3, #0]
	Assert(config);
    24b2:	2800      	cmp	r0, #0
    24b4:	d1c3      	bne.n	243e <spi_init+0x1e>
    24b6:	e7de      	b.n	2476 <spi_init+0x56>
	Assert(hw);
    24b8:	23ec      	movs	r3, #236	; 0xec
    24ba:	33ff      	adds	r3, #255	; 0xff
    24bc:	4a99      	ldr	r2, [pc, #612]	; (2724 <spi_init+0x304>)
    24be:	499e      	ldr	r1, [pc, #632]	; (2738 <spi_init+0x318>)
    24c0:	489b      	ldr	r0, [pc, #620]	; (2730 <spi_init+0x310>)
    24c2:	4c9c      	ldr	r4, [pc, #624]	; (2734 <spi_init+0x314>)
    24c4:	47a0      	blx	r4
    24c6:	e7fe      	b.n	24c6 <spi_init+0xa6>
	Assert(config);
    24c8:	4b98      	ldr	r3, [pc, #608]	; (272c <spi_init+0x30c>)
    24ca:	9301      	str	r3, [sp, #4]
    24cc:	4b94      	ldr	r3, [pc, #592]	; (2720 <spi_init+0x300>)
    24ce:	9300      	str	r3, [sp, #0]
    24d0:	23f6      	movs	r3, #246	; 0xf6
    24d2:	005b      	lsls	r3, r3, #1
    24d4:	4a93      	ldr	r2, [pc, #588]	; (2724 <spi_init+0x304>)
    24d6:	2101      	movs	r1, #1
    24d8:	4f93      	ldr	r7, [pc, #588]	; (2728 <spi_init+0x308>)
    24da:	47b8      	blx	r7
    24dc:	e7b1      	b.n	2442 <spi_init+0x22>
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    24de:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    24e0:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    24e2:	07db      	lsls	r3, r3, #31
    24e4:	d4b2      	bmi.n	244c <spi_init+0x2c>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    24e6:	0030      	movs	r0, r6
    24e8:	4b94      	ldr	r3, [pc, #592]	; (273c <spi_init+0x31c>)
    24ea:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    24ec:	4a94      	ldr	r2, [pc, #592]	; (2740 <spi_init+0x320>)
    24ee:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    24f0:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    24f2:	2301      	movs	r3, #1
    24f4:	40bb      	lsls	r3, r7
    24f6:	430b      	orrs	r3, r1
    24f8:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    24fa:	a90b      	add	r1, sp, #44	; 0x2c
    24fc:	2724      	movs	r7, #36	; 0x24
    24fe:	5deb      	ldrb	r3, [r5, r7]
    2500:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2502:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2504:	b2c3      	uxtb	r3, r0
    2506:	9303      	str	r3, [sp, #12]
    2508:	0018      	movs	r0, r3
    250a:	4b8e      	ldr	r3, [pc, #568]	; (2744 <spi_init+0x324>)
    250c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    250e:	9803      	ldr	r0, [sp, #12]
    2510:	4b8d      	ldr	r3, [pc, #564]	; (2748 <spi_init+0x328>)
    2512:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2514:	5de8      	ldrb	r0, [r5, r7]
    2516:	2100      	movs	r1, #0
    2518:	4b8c      	ldr	r3, [pc, #560]	; (274c <spi_init+0x32c>)
    251a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    251c:	782b      	ldrb	r3, [r5, #0]
    251e:	2b01      	cmp	r3, #1
    2520:	d045      	beq.n	25ae <spi_init+0x18e>
    2522:	0023      	movs	r3, r4
    2524:	330c      	adds	r3, #12
    2526:	0021      	movs	r1, r4
    2528:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    252a:	2200      	movs	r2, #0
    252c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    252e:	428b      	cmp	r3, r1
    2530:	d1fc      	bne.n	252c <spi_init+0x10c>
	module->tx_buffer_ptr              = NULL;
    2532:	2200      	movs	r2, #0
    2534:	62e2      	str	r2, [r4, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    2536:	62a2      	str	r2, [r4, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    2538:	2300      	movs	r3, #0
    253a:	86a2      	strh	r2, [r4, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    253c:	8622      	strh	r2, [r4, #48]	; 0x30
	module->registered_callback        = 0x00;
    253e:	3236      	adds	r2, #54	; 0x36
    2540:	54a3      	strb	r3, [r4, r2]
	module->enabled_callback           = 0x00;
    2542:	3201      	adds	r2, #1
    2544:	54a3      	strb	r3, [r4, r2]
	module->status                     = STATUS_OK;
    2546:	3201      	adds	r2, #1
    2548:	54a3      	strb	r3, [r4, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    254a:	3a35      	subs	r2, #53	; 0x35
    254c:	7262      	strb	r2, [r4, #9]
	module->locked                     = false;
    254e:	7123      	strb	r3, [r4, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    2550:	6820      	ldr	r0, [r4, #0]
    2552:	4b7a      	ldr	r3, [pc, #488]	; (273c <spi_init+0x31c>)
    2554:	4798      	blx	r3
    2556:	0006      	movs	r6, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    2558:	497d      	ldr	r1, [pc, #500]	; (2750 <spi_init+0x330>)
    255a:	4b7e      	ldr	r3, [pc, #504]	; (2754 <spi_init+0x334>)
    255c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    255e:	00b6      	lsls	r6, r6, #2
    2560:	4b7d      	ldr	r3, [pc, #500]	; (2758 <spi_init+0x338>)
    2562:	50f4      	str	r4, [r6, r3]
    2564:	4b6c      	ldr	r3, [pc, #432]	; (2718 <spi_init+0x2f8>)
    2566:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    2568:	2800      	cmp	r0, #0
    256a:	d033      	beq.n	25d4 <spi_init+0x1b4>
    256c:	2c00      	cmp	r4, #0
    256e:	d023      	beq.n	25b8 <spi_init+0x198>
	Assert(config);
    2570:	2d00      	cmp	r5, #0
    2572:	d044      	beq.n	25fe <spi_init+0x1de>
    2574:	4b68      	ldr	r3, [pc, #416]	; (2718 <spi_init+0x2f8>)
    2576:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2578:	6823      	ldr	r3, [r4, #0]
    257a:	2b00      	cmp	r3, #0
    257c:	d054      	beq.n	2628 <spi_init+0x208>
	SercomSpi *const spi_module = &(module->hw->SPI);
    257e:	6827      	ldr	r7, [r4, #0]
    2580:	ab06      	add	r3, sp, #24
    2582:	2280      	movs	r2, #128	; 0x80
    2584:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2586:	2200      	movs	r2, #0
    2588:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    258a:	2101      	movs	r1, #1
    258c:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    258e:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    2590:	782b      	ldrb	r3, [r5, #0]
    2592:	2b00      	cmp	r3, #0
    2594:	d101      	bne.n	259a <spi_init+0x17a>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2596:	ab06      	add	r3, sp, #24
    2598:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    259a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    259c:	9307      	str	r3, [sp, #28]
    259e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    25a0:	9308      	str	r3, [sp, #32]
    25a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    25a4:	9309      	str	r3, [sp, #36]	; 0x24
    25a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    25a8:	930a      	str	r3, [sp, #40]	; 0x28
    25aa:	2600      	movs	r6, #0
    25ac:	e04d      	b.n	264a <spi_init+0x22a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    25ae:	6833      	ldr	r3, [r6, #0]
    25b0:	220c      	movs	r2, #12
    25b2:	4313      	orrs	r3, r2
    25b4:	6033      	str	r3, [r6, #0]
    25b6:	e7b4      	b.n	2522 <spi_init+0x102>
	Assert(module);
    25b8:	4b58      	ldr	r3, [pc, #352]	; (271c <spi_init+0x2fc>)
    25ba:	9301      	str	r3, [sp, #4]
    25bc:	4b58      	ldr	r3, [pc, #352]	; (2720 <spi_init+0x300>)
    25be:	9300      	str	r3, [sp, #0]
    25c0:	23b1      	movs	r3, #177	; 0xb1
    25c2:	4a58      	ldr	r2, [pc, #352]	; (2724 <spi_init+0x304>)
    25c4:	2101      	movs	r1, #1
    25c6:	4e58      	ldr	r6, [pc, #352]	; (2728 <spi_init+0x308>)
    25c8:	47b0      	blx	r6
    25ca:	4b53      	ldr	r3, [pc, #332]	; (2718 <spi_init+0x2f8>)
    25cc:	6818      	ldr	r0, [r3, #0]
	Assert(config);
    25ce:	2800      	cmp	r0, #0
    25d0:	d002      	beq.n	25d8 <spi_init+0x1b8>
    25d2:	e7cd      	b.n	2570 <spi_init+0x150>
	Assert(module);
    25d4:	2c00      	cmp	r4, #0
    25d6:	d00b      	beq.n	25f0 <spi_init+0x1d0>
	Assert(config);
    25d8:	2d00      	cmp	r5, #0
    25da:	d01e      	beq.n	261a <spi_init+0x1fa>
	Assert(module->hw);
    25dc:	6823      	ldr	r3, [r4, #0]
    25de:	2b00      	cmp	r3, #0
    25e0:	d1cd      	bne.n	257e <spi_init+0x15e>
    25e2:	33b3      	adds	r3, #179	; 0xb3
    25e4:	4a4f      	ldr	r2, [pc, #316]	; (2724 <spi_init+0x304>)
    25e6:	495d      	ldr	r1, [pc, #372]	; (275c <spi_init+0x33c>)
    25e8:	4851      	ldr	r0, [pc, #324]	; (2730 <spi_init+0x310>)
    25ea:	4c52      	ldr	r4, [pc, #328]	; (2734 <spi_init+0x314>)
    25ec:	47a0      	blx	r4
    25ee:	e7fe      	b.n	25ee <spi_init+0x1ce>
	Assert(module);
    25f0:	23b1      	movs	r3, #177	; 0xb1
    25f2:	4a4c      	ldr	r2, [pc, #304]	; (2724 <spi_init+0x304>)
    25f4:	4949      	ldr	r1, [pc, #292]	; (271c <spi_init+0x2fc>)
    25f6:	484e      	ldr	r0, [pc, #312]	; (2730 <spi_init+0x310>)
    25f8:	4c4e      	ldr	r4, [pc, #312]	; (2734 <spi_init+0x314>)
    25fa:	47a0      	blx	r4
    25fc:	e7fe      	b.n	25fc <spi_init+0x1dc>
	Assert(config);
    25fe:	4b4b      	ldr	r3, [pc, #300]	; (272c <spi_init+0x30c>)
    2600:	9301      	str	r3, [sp, #4]
    2602:	4b47      	ldr	r3, [pc, #284]	; (2720 <spi_init+0x300>)
    2604:	9300      	str	r3, [sp, #0]
    2606:	23b2      	movs	r3, #178	; 0xb2
    2608:	4a46      	ldr	r2, [pc, #280]	; (2724 <spi_init+0x304>)
    260a:	2101      	movs	r1, #1
    260c:	4e46      	ldr	r6, [pc, #280]	; (2728 <spi_init+0x308>)
    260e:	47b0      	blx	r6
    2610:	4b41      	ldr	r3, [pc, #260]	; (2718 <spi_init+0x2f8>)
    2612:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2614:	2800      	cmp	r0, #0
    2616:	d1af      	bne.n	2578 <spi_init+0x158>
    2618:	e7e0      	b.n	25dc <spi_init+0x1bc>
	Assert(config);
    261a:	23b2      	movs	r3, #178	; 0xb2
    261c:	4a41      	ldr	r2, [pc, #260]	; (2724 <spi_init+0x304>)
    261e:	4943      	ldr	r1, [pc, #268]	; (272c <spi_init+0x30c>)
    2620:	4843      	ldr	r0, [pc, #268]	; (2730 <spi_init+0x310>)
    2622:	4c44      	ldr	r4, [pc, #272]	; (2734 <spi_init+0x314>)
    2624:	47a0      	blx	r4
    2626:	e7fe      	b.n	2626 <spi_init+0x206>
	Assert(module->hw);
    2628:	4b4c      	ldr	r3, [pc, #304]	; (275c <spi_init+0x33c>)
    262a:	9301      	str	r3, [sp, #4]
    262c:	4b3c      	ldr	r3, [pc, #240]	; (2720 <spi_init+0x300>)
    262e:	9300      	str	r3, [sp, #0]
    2630:	23b3      	movs	r3, #179	; 0xb3
    2632:	4a3c      	ldr	r2, [pc, #240]	; (2724 <spi_init+0x304>)
    2634:	2101      	movs	r1, #1
    2636:	4e3c      	ldr	r6, [pc, #240]	; (2728 <spi_init+0x308>)
    2638:	47b0      	blx	r6
    263a:	e7a0      	b.n	257e <spi_init+0x15e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    263c:	0038      	movs	r0, r7
    263e:	4b48      	ldr	r3, [pc, #288]	; (2760 <spi_init+0x340>)
    2640:	4798      	blx	r3
    2642:	e00a      	b.n	265a <spi_init+0x23a>
    2644:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2646:	2e04      	cmp	r6, #4
    2648:	d010      	beq.n	266c <spi_init+0x24c>
    264a:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    264c:	00b3      	lsls	r3, r6, #2
    264e:	aa02      	add	r2, sp, #8
    2650:	2014      	movs	r0, #20
    2652:	1812      	adds	r2, r2, r0
    2654:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    2656:	2800      	cmp	r0, #0
    2658:	d0f0      	beq.n	263c <spi_init+0x21c>
		if (current_pinmux != PINMUX_UNUSED) {
    265a:	1c43      	adds	r3, r0, #1
    265c:	d0f2      	beq.n	2644 <spi_init+0x224>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    265e:	a906      	add	r1, sp, #24
    2660:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2662:	0c00      	lsrs	r0, r0, #16
    2664:	b2c0      	uxtb	r0, r0
    2666:	4b3f      	ldr	r3, [pc, #252]	; (2764 <spi_init+0x344>)
    2668:	4798      	blx	r3
    266a:	e7eb      	b.n	2644 <spi_init+0x224>
	module->mode             = config->mode;
    266c:	782b      	ldrb	r3, [r5, #0]
    266e:	7163      	strb	r3, [r4, #5]
	module->character_size   = config->character_size;
    2670:	7c2b      	ldrb	r3, [r5, #16]
    2672:	71a3      	strb	r3, [r4, #6]
	module->receiver_enabled = config->receiver_enable;
    2674:	7cab      	ldrb	r3, [r5, #18]
    2676:	71e3      	strb	r3, [r4, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    2678:	7d2b      	ldrb	r3, [r5, #20]
    267a:	7223      	strb	r3, [r4, #8]
	uint16_t baud = 0;
    267c:	2200      	movs	r2, #0
    267e:	230e      	movs	r3, #14
    2680:	a902      	add	r1, sp, #8
    2682:	468c      	mov	ip, r1
    2684:	4463      	add	r3, ip
    2686:	801a      	strh	r2, [r3, #0]
	if (config->mode == SPI_MODE_MASTER) {
    2688:	782b      	ldrb	r3, [r5, #0]
    268a:	2b01      	cmp	r3, #1
    268c:	d028      	beq.n	26e0 <spi_init+0x2c0>
	ctrla |= config->transfer_mode;
    268e:	686a      	ldr	r2, [r5, #4]
    2690:	68ab      	ldr	r3, [r5, #8]
    2692:	431a      	orrs	r2, r3
	ctrla |= config->mux_setting;
    2694:	68eb      	ldr	r3, [r5, #12]
    2696:	431a      	orrs	r2, r3
	ctrlb |= config->character_size;
    2698:	7c2b      	ldrb	r3, [r5, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    269a:	7c69      	ldrb	r1, [r5, #17]
    269c:	2900      	cmp	r1, #0
    269e:	d103      	bne.n	26a8 <spi_init+0x288>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    26a0:	4931      	ldr	r1, [pc, #196]	; (2768 <spi_init+0x348>)
    26a2:	7889      	ldrb	r1, [r1, #2]
    26a4:	0789      	lsls	r1, r1, #30
    26a6:	d501      	bpl.n	26ac <spi_init+0x28c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    26a8:	2180      	movs	r1, #128	; 0x80
    26aa:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
    26ac:	7ca9      	ldrb	r1, [r5, #18]
    26ae:	2900      	cmp	r1, #0
    26b0:	d002      	beq.n	26b8 <spi_init+0x298>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    26b2:	2180      	movs	r1, #128	; 0x80
    26b4:	0289      	lsls	r1, r1, #10
    26b6:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
    26b8:	7ce9      	ldrb	r1, [r5, #19]
    26ba:	2900      	cmp	r1, #0
    26bc:	d002      	beq.n	26c4 <spi_init+0x2a4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    26be:	2180      	movs	r1, #128	; 0x80
    26c0:	0089      	lsls	r1, r1, #2
    26c2:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
    26c4:	7d29      	ldrb	r1, [r5, #20]
    26c6:	2900      	cmp	r1, #0
    26c8:	d002      	beq.n	26d0 <spi_init+0x2b0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    26ca:	2180      	movs	r1, #128	; 0x80
    26cc:	0189      	lsls	r1, r1, #6
    26ce:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
    26d0:	6839      	ldr	r1, [r7, #0]
    26d2:	430a      	orrs	r2, r1
    26d4:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    26d6:	687a      	ldr	r2, [r7, #4]
    26d8:	4313      	orrs	r3, r2
    26da:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    26dc:	2000      	movs	r0, #0
    26de:	e6b5      	b.n	244c <spi_init+0x2c>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    26e0:	6820      	ldr	r0, [r4, #0]
    26e2:	4b16      	ldr	r3, [pc, #88]	; (273c <spi_init+0x31c>)
    26e4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    26e6:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    26e8:	b2c0      	uxtb	r0, r0
    26ea:	4b20      	ldr	r3, [pc, #128]	; (276c <spi_init+0x34c>)
    26ec:	4798      	blx	r3
    26ee:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    26f0:	220e      	movs	r2, #14
    26f2:	ab02      	add	r3, sp, #8
    26f4:	469c      	mov	ip, r3
    26f6:	4462      	add	r2, ip
    26f8:	69a8      	ldr	r0, [r5, #24]
    26fa:	4b1d      	ldr	r3, [pc, #116]	; (2770 <spi_init+0x350>)
    26fc:	4798      	blx	r3
    26fe:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    2700:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2702:	2b00      	cmp	r3, #0
    2704:	d000      	beq.n	2708 <spi_init+0x2e8>
    2706:	e6a1      	b.n	244c <spi_init+0x2c>
		spi_module->BAUD.reg = (uint8_t)baud;
    2708:	330e      	adds	r3, #14
    270a:	aa02      	add	r2, sp, #8
    270c:	4694      	mov	ip, r2
    270e:	4463      	add	r3, ip
    2710:	781b      	ldrb	r3, [r3, #0]
    2712:	733b      	strb	r3, [r7, #12]
    2714:	e7bb      	b.n	268e <spi_init+0x26e>
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	2000011c 	.word	0x2000011c
    271c:	00007094 	.word	0x00007094
    2720:	00006c40 	.word	0x00006c40
    2724:	00007068 	.word	0x00007068
    2728:	000017e1 	.word	0x000017e1
    272c:	00006fec 	.word	0x00006fec
    2730:	00006c58 	.word	0x00006c58
    2734:	00006055 	.word	0x00006055
    2738:	00006d88 	.word	0x00006d88
    273c:	00001dc5 	.word	0x00001dc5
    2740:	40000400 	.word	0x40000400
    2744:	00004b35 	.word	0x00004b35
    2748:	00004a49 	.word	0x00004a49
    274c:	00001bc9 	.word	0x00001bc9
    2750:	000035cd 	.word	0x000035cd
    2754:	00001e95 	.word	0x00001e95
    2758:	200009bc 	.word	0x200009bc
    275c:	00006d80 	.word	0x00006d80
    2760:	00001c15 	.word	0x00001c15
    2764:	00004d19 	.word	0x00004d19
    2768:	41002000 	.word	0x41002000
    276c:	00004bad 	.word	0x00004bad
    2770:	00001b0b 	.word	0x00001b0b

00002774 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2774:	b5f0      	push	{r4, r5, r6, r7, lr}
    2776:	46de      	mov	lr, fp
    2778:	464f      	mov	r7, r9
    277a:	4646      	mov	r6, r8
    277c:	b5c0      	push	{r6, r7, lr}
    277e:	b084      	sub	sp, #16
    2780:	0004      	movs	r4, r0
    2782:	9102      	str	r1, [sp, #8]
    2784:	0015      	movs	r5, r2
    2786:	9303      	str	r3, [sp, #12]
    2788:	4bbf      	ldr	r3, [pc, #764]	; (2a88 <spi_read_buffer_wait+0x314>)
    278a:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    278c:	2800      	cmp	r0, #0
    278e:	d021      	beq.n	27d4 <spi_read_buffer_wait+0x60>
    2790:	2c00      	cmp	r4, #0
    2792:	d011      	beq.n	27b8 <spi_read_buffer_wait+0x44>
	Assert(module->hw);
    2794:	6823      	ldr	r3, [r4, #0]
    2796:	2b00      	cmp	r3, #0
    2798:	d030      	beq.n	27fc <spi_read_buffer_wait+0x88>

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    279a:	2338      	movs	r3, #56	; 0x38
    279c:	5ce3      	ldrb	r3, [r4, r3]
    279e:	2b05      	cmp	r3, #5
    27a0:	d100      	bne.n	27a4 <spi_read_buffer_wait+0x30>
    27a2:	e1e3      	b.n	2b6c <spi_read_buffer_wait+0x3f8>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    27a4:	2017      	movs	r0, #23
	if (length == 0) {
    27a6:	2d00      	cmp	r5, #0
    27a8:	d100      	bne.n	27ac <spi_read_buffer_wait+0x38>
    27aa:	e1e0      	b.n	2b6e <spi_read_buffer_wait+0x3fa>
	}

	if (!(module->receiver_enabled)) {
    27ac:	79e3      	ldrb	r3, [r4, #7]
    27ae:	2b00      	cmp	r3, #0
    27b0:	d000      	beq.n	27b4 <spi_read_buffer_wait+0x40>
    27b2:	e1e6      	b.n	2b82 <spi_read_buffer_wait+0x40e>
		return STATUS_ERR_DENIED;
    27b4:	3005      	adds	r0, #5
    27b6:	e1da      	b.n	2b6e <spi_read_buffer_wait+0x3fa>
	Assert(module);
    27b8:	4bb4      	ldr	r3, [pc, #720]	; (2a8c <spi_read_buffer_wait+0x318>)
    27ba:	9301      	str	r3, [sp, #4]
    27bc:	4bb4      	ldr	r3, [pc, #720]	; (2a90 <spi_read_buffer_wait+0x31c>)
    27be:	9300      	str	r3, [sp, #0]
    27c0:	4bb4      	ldr	r3, [pc, #720]	; (2a94 <spi_read_buffer_wait+0x320>)
    27c2:	4ab5      	ldr	r2, [pc, #724]	; (2a98 <spi_read_buffer_wait+0x324>)
    27c4:	2101      	movs	r1, #1
    27c6:	4fb5      	ldr	r7, [pc, #724]	; (2a9c <spi_read_buffer_wait+0x328>)
    27c8:	47b8      	blx	r7
    27ca:	4baf      	ldr	r3, [pc, #700]	; (2a88 <spi_read_buffer_wait+0x314>)
    27cc:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    27ce:	2800      	cmp	r0, #0
    27d0:	d1e0      	bne.n	2794 <spi_read_buffer_wait+0x20>
    27d2:	e001      	b.n	27d8 <spi_read_buffer_wait+0x64>
	Assert(module);
    27d4:	2c00      	cmp	r4, #0
    27d6:	d00a      	beq.n	27ee <spi_read_buffer_wait+0x7a>
	Assert(module->hw);
    27d8:	6823      	ldr	r3, [r4, #0]
    27da:	2b00      	cmp	r3, #0
    27dc:	d1dd      	bne.n	279a <spi_read_buffer_wait+0x26>
    27de:	23a2      	movs	r3, #162	; 0xa2
    27e0:	009b      	lsls	r3, r3, #2
    27e2:	4aad      	ldr	r2, [pc, #692]	; (2a98 <spi_read_buffer_wait+0x324>)
    27e4:	49ae      	ldr	r1, [pc, #696]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    27e6:	48af      	ldr	r0, [pc, #700]	; (2aa4 <spi_read_buffer_wait+0x330>)
    27e8:	4caf      	ldr	r4, [pc, #700]	; (2aa8 <spi_read_buffer_wait+0x334>)
    27ea:	47a0      	blx	r4
    27ec:	e7fe      	b.n	27ec <spi_read_buffer_wait+0x78>
	Assert(module);
    27ee:	4ba9      	ldr	r3, [pc, #676]	; (2a94 <spi_read_buffer_wait+0x320>)
    27f0:	4aa9      	ldr	r2, [pc, #676]	; (2a98 <spi_read_buffer_wait+0x324>)
    27f2:	49a6      	ldr	r1, [pc, #664]	; (2a8c <spi_read_buffer_wait+0x318>)
    27f4:	48ab      	ldr	r0, [pc, #684]	; (2aa4 <spi_read_buffer_wait+0x330>)
    27f6:	4cac      	ldr	r4, [pc, #688]	; (2aa8 <spi_read_buffer_wait+0x334>)
    27f8:	47a0      	blx	r4
    27fa:	e7fe      	b.n	27fa <spi_read_buffer_wait+0x86>
	Assert(module->hw);
    27fc:	4ba8      	ldr	r3, [pc, #672]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    27fe:	9301      	str	r3, [sp, #4]
    2800:	4ba3      	ldr	r3, [pc, #652]	; (2a90 <spi_read_buffer_wait+0x31c>)
    2802:	9300      	str	r3, [sp, #0]
    2804:	23a2      	movs	r3, #162	; 0xa2
    2806:	009b      	lsls	r3, r3, #2
    2808:	4aa3      	ldr	r2, [pc, #652]	; (2a98 <spi_read_buffer_wait+0x324>)
    280a:	2101      	movs	r1, #1
    280c:	4fa3      	ldr	r7, [pc, #652]	; (2a9c <spi_read_buffer_wait+0x328>)
    280e:	47b8      	blx	r7
    2810:	e7c3      	b.n	279a <spi_read_buffer_wait+0x26>
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    2812:	4b9e      	ldr	r3, [pc, #632]	; (2a8c <spi_read_buffer_wait+0x318>)
    2814:	9301      	str	r3, [sp, #4]
    2816:	4b9e      	ldr	r3, [pc, #632]	; (2a90 <spi_read_buffer_wait+0x31c>)
    2818:	9300      	str	r3, [sp, #0]
    281a:	4ba4      	ldr	r3, [pc, #656]	; (2aac <spi_read_buffer_wait+0x338>)
    281c:	4aa4      	ldr	r2, [pc, #656]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    281e:	2101      	movs	r1, #1
    2820:	4e9e      	ldr	r6, [pc, #632]	; (2a9c <spi_read_buffer_wait+0x328>)
    2822:	47b0      	blx	r6
    2824:	4b98      	ldr	r3, [pc, #608]	; (2a88 <spi_read_buffer_wait+0x314>)
    2826:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2828:	2800      	cmp	r0, #0
    282a:	d10f      	bne.n	284c <spi_read_buffer_wait+0xd8>
    282c:	e001      	b.n	2832 <spi_read_buffer_wait+0xbe>
	Assert(module);
    282e:	2c00      	cmp	r4, #0
    2830:	d019      	beq.n	2866 <spi_read_buffer_wait+0xf2>
	Assert(module->hw);
    2832:	6823      	ldr	r3, [r4, #0]
    2834:	2b00      	cmp	r3, #0
    2836:	d01d      	beq.n	2874 <spi_read_buffer_wait+0x100>

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2838:	6823      	ldr	r3, [r4, #0]
    283a:	7e1b      	ldrb	r3, [r3, #24]

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    283c:	07db      	lsls	r3, r3, #31
    283e:	d420      	bmi.n	2882 <spi_read_buffer_wait+0x10e>
    2840:	464b      	mov	r3, r9
    2842:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    2844:	2800      	cmp	r0, #0
    2846:	d0f2      	beq.n	282e <spi_read_buffer_wait+0xba>
    2848:	2c00      	cmp	r4, #0
    284a:	d0e2      	beq.n	2812 <spi_read_buffer_wait+0x9e>
	Assert(module->hw);
    284c:	6823      	ldr	r3, [r4, #0]
    284e:	2b00      	cmp	r3, #0
    2850:	d1f2      	bne.n	2838 <spi_read_buffer_wait+0xc4>
    2852:	4b93      	ldr	r3, [pc, #588]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    2854:	9301      	str	r3, [sp, #4]
    2856:	4b8e      	ldr	r3, [pc, #568]	; (2a90 <spi_read_buffer_wait+0x31c>)
    2858:	9300      	str	r3, [sp, #0]
    285a:	4b96      	ldr	r3, [pc, #600]	; (2ab4 <spi_read_buffer_wait+0x340>)
    285c:	4a94      	ldr	r2, [pc, #592]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    285e:	2101      	movs	r1, #1
    2860:	4e8e      	ldr	r6, [pc, #568]	; (2a9c <spi_read_buffer_wait+0x328>)
    2862:	47b0      	blx	r6
    2864:	e7e8      	b.n	2838 <spi_read_buffer_wait+0xc4>
	Assert(module);
    2866:	4b91      	ldr	r3, [pc, #580]	; (2aac <spi_read_buffer_wait+0x338>)
    2868:	4a91      	ldr	r2, [pc, #580]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    286a:	4988      	ldr	r1, [pc, #544]	; (2a8c <spi_read_buffer_wait+0x318>)
    286c:	488d      	ldr	r0, [pc, #564]	; (2aa4 <spi_read_buffer_wait+0x330>)
    286e:	4c8e      	ldr	r4, [pc, #568]	; (2aa8 <spi_read_buffer_wait+0x334>)
    2870:	47a0      	blx	r4
    2872:	e7fe      	b.n	2872 <spi_read_buffer_wait+0xfe>
	Assert(module->hw);
    2874:	4b8f      	ldr	r3, [pc, #572]	; (2ab4 <spi_read_buffer_wait+0x340>)
    2876:	4a8e      	ldr	r2, [pc, #568]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    2878:	4989      	ldr	r1, [pc, #548]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    287a:	488a      	ldr	r0, [pc, #552]	; (2aa4 <spi_read_buffer_wait+0x330>)
    287c:	4c8a      	ldr	r4, [pc, #552]	; (2aa8 <spi_read_buffer_wait+0x334>)
    287e:	47a0      	blx	r4
    2880:	e7fe      	b.n	2880 <spi_read_buffer_wait+0x10c>
    2882:	4b81      	ldr	r3, [pc, #516]	; (2a88 <spi_read_buffer_wait+0x314>)
    2884:	6818      	ldr	r0, [r3, #0]
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
	/* Sanity check arguments */
	Assert(module);
    2886:	2800      	cmp	r0, #0
    2888:	d01f      	beq.n	28ca <spi_read_buffer_wait+0x156>
    288a:	2c00      	cmp	r4, #0
    288c:	d005      	beq.n	289a <spi_read_buffer_wait+0x126>
	Assert(module->hw);
    288e:	6826      	ldr	r6, [r4, #0]
    2890:	2e00      	cmp	r6, #0
    2892:	d023      	beq.n	28dc <spi_read_buffer_wait+0x168>
    2894:	4b7c      	ldr	r3, [pc, #496]	; (2a88 <spi_read_buffer_wait+0x314>)
    2896:	6818      	ldr	r0, [r3, #0]
    2898:	e02e      	b.n	28f8 <spi_read_buffer_wait+0x184>
	Assert(module);
    289a:	4b7c      	ldr	r3, [pc, #496]	; (2a8c <spi_read_buffer_wait+0x318>)
    289c:	9301      	str	r3, [sp, #4]
    289e:	4b7c      	ldr	r3, [pc, #496]	; (2a90 <spi_read_buffer_wait+0x31c>)
    28a0:	9300      	str	r3, [sp, #0]
    28a2:	4b85      	ldr	r3, [pc, #532]	; (2ab8 <spi_read_buffer_wait+0x344>)
    28a4:	4a82      	ldr	r2, [pc, #520]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    28a6:	2101      	movs	r1, #1
    28a8:	4e7c      	ldr	r6, [pc, #496]	; (2a9c <spi_read_buffer_wait+0x328>)
    28aa:	47b0      	blx	r6
    28ac:	4b76      	ldr	r3, [pc, #472]	; (2a88 <spi_read_buffer_wait+0x314>)
    28ae:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    28b0:	2800      	cmp	r0, #0
    28b2:	d1ec      	bne.n	288e <spi_read_buffer_wait+0x11a>
    28b4:	6826      	ldr	r6, [r4, #0]
    28b6:	2e00      	cmp	r6, #0
    28b8:	d000      	beq.n	28bc <spi_read_buffer_wait+0x148>
    28ba:	e15e      	b.n	2b7a <spi_read_buffer_wait+0x406>
    28bc:	4b7f      	ldr	r3, [pc, #508]	; (2abc <spi_read_buffer_wait+0x348>)
    28be:	4a7c      	ldr	r2, [pc, #496]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    28c0:	4977      	ldr	r1, [pc, #476]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    28c2:	4878      	ldr	r0, [pc, #480]	; (2aa4 <spi_read_buffer_wait+0x330>)
    28c4:	4c78      	ldr	r4, [pc, #480]	; (2aa8 <spi_read_buffer_wait+0x334>)
    28c6:	47a0      	blx	r4
    28c8:	e7fe      	b.n	28c8 <spi_read_buffer_wait+0x154>
	Assert(module);
    28ca:	2c00      	cmp	r4, #0
    28cc:	d1f2      	bne.n	28b4 <spi_read_buffer_wait+0x140>
    28ce:	4b7a      	ldr	r3, [pc, #488]	; (2ab8 <spi_read_buffer_wait+0x344>)
    28d0:	4a77      	ldr	r2, [pc, #476]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    28d2:	496e      	ldr	r1, [pc, #440]	; (2a8c <spi_read_buffer_wait+0x318>)
    28d4:	4873      	ldr	r0, [pc, #460]	; (2aa4 <spi_read_buffer_wait+0x330>)
    28d6:	4c74      	ldr	r4, [pc, #464]	; (2aa8 <spi_read_buffer_wait+0x334>)
    28d8:	47a0      	blx	r4
    28da:	e7fe      	b.n	28da <spi_read_buffer_wait+0x166>
	Assert(module->hw);
    28dc:	4b70      	ldr	r3, [pc, #448]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    28de:	9301      	str	r3, [sp, #4]
    28e0:	4b6b      	ldr	r3, [pc, #428]	; (2a90 <spi_read_buffer_wait+0x31c>)
    28e2:	9300      	str	r3, [sp, #0]
    28e4:	4b75      	ldr	r3, [pc, #468]	; (2abc <spi_read_buffer_wait+0x348>)
    28e6:	4a72      	ldr	r2, [pc, #456]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    28e8:	2101      	movs	r1, #1
    28ea:	4e6c      	ldr	r6, [pc, #432]	; (2a9c <spi_read_buffer_wait+0x328>)
    28ec:	47b0      	blx	r6

	SercomSpi *const spi_module = &(module->hw->SPI);
    28ee:	6826      	ldr	r6, [r4, #0]
    28f0:	4b65      	ldr	r3, [pc, #404]	; (2a88 <spi_read_buffer_wait+0x314>)
    28f2:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    28f4:	2800      	cmp	r0, #0
    28f6:	d01e      	beq.n	2936 <spi_read_buffer_wait+0x1c2>
    28f8:	2c00      	cmp	r4, #0
    28fa:	d002      	beq.n	2902 <spi_read_buffer_wait+0x18e>
    28fc:	4b62      	ldr	r3, [pc, #392]	; (2a88 <spi_read_buffer_wait+0x314>)
    28fe:	6818      	ldr	r0, [r3, #0]
    2900:	e00c      	b.n	291c <spi_read_buffer_wait+0x1a8>
    2902:	4b62      	ldr	r3, [pc, #392]	; (2a8c <spi_read_buffer_wait+0x318>)
    2904:	9301      	str	r3, [sp, #4]
    2906:	4b62      	ldr	r3, [pc, #392]	; (2a90 <spi_read_buffer_wait+0x31c>)
    2908:	9300      	str	r3, [sp, #0]
    290a:	4b68      	ldr	r3, [pc, #416]	; (2aac <spi_read_buffer_wait+0x338>)
    290c:	4a68      	ldr	r2, [pc, #416]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    290e:	2101      	movs	r1, #1
    2910:	4d62      	ldr	r5, [pc, #392]	; (2a9c <spi_read_buffer_wait+0x328>)
    2912:	47a8      	blx	r5
    2914:	4b5c      	ldr	r3, [pc, #368]	; (2a88 <spi_read_buffer_wait+0x314>)
    2916:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2918:	2800      	cmp	r0, #0
    291a:	d01f      	beq.n	295c <spi_read_buffer_wait+0x1e8>
    291c:	6823      	ldr	r3, [r4, #0]
    291e:	2b00      	cmp	r3, #0
    2920:	d012      	beq.n	2948 <spi_read_buffer_wait+0x1d4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2922:	6823      	ldr	r3, [r4, #0]
    2924:	7e1b      	ldrb	r3, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2926:	07db      	lsls	r3, r3, #31
    2928:	d400      	bmi.n	292c <spi_read_buffer_wait+0x1b8>
    292a:	e113      	b.n	2b54 <spi_read_buffer_wait+0x3e0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    292c:	9b03      	ldr	r3, [sp, #12]
    292e:	05db      	lsls	r3, r3, #23
    2930:	0ddb      	lsrs	r3, r3, #23
    2932:	62b3      	str	r3, [r6, #40]	; 0x28
    2934:	e10e      	b.n	2b54 <spi_read_buffer_wait+0x3e0>
	Assert(module);
    2936:	2c00      	cmp	r4, #0
    2938:	d110      	bne.n	295c <spi_read_buffer_wait+0x1e8>
    293a:	4b5c      	ldr	r3, [pc, #368]	; (2aac <spi_read_buffer_wait+0x338>)
    293c:	4a5c      	ldr	r2, [pc, #368]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    293e:	4953      	ldr	r1, [pc, #332]	; (2a8c <spi_read_buffer_wait+0x318>)
    2940:	4858      	ldr	r0, [pc, #352]	; (2aa4 <spi_read_buffer_wait+0x330>)
    2942:	4c59      	ldr	r4, [pc, #356]	; (2aa8 <spi_read_buffer_wait+0x334>)
    2944:	47a0      	blx	r4
    2946:	e7fe      	b.n	2946 <spi_read_buffer_wait+0x1d2>
	Assert(module->hw);
    2948:	4b55      	ldr	r3, [pc, #340]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    294a:	9301      	str	r3, [sp, #4]
    294c:	4b50      	ldr	r3, [pc, #320]	; (2a90 <spi_read_buffer_wait+0x31c>)
    294e:	9300      	str	r3, [sp, #0]
    2950:	4b58      	ldr	r3, [pc, #352]	; (2ab4 <spi_read_buffer_wait+0x340>)
    2952:	4a57      	ldr	r2, [pc, #348]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    2954:	2101      	movs	r1, #1
    2956:	4d51      	ldr	r5, [pc, #324]	; (2a9c <spi_read_buffer_wait+0x328>)
    2958:	47a8      	blx	r5
    295a:	e7e2      	b.n	2922 <spi_read_buffer_wait+0x1ae>
    295c:	6823      	ldr	r3, [r4, #0]
    295e:	2b00      	cmp	r3, #0
    2960:	d1df      	bne.n	2922 <spi_read_buffer_wait+0x1ae>
    2962:	4b54      	ldr	r3, [pc, #336]	; (2ab4 <spi_read_buffer_wait+0x340>)
    2964:	4a52      	ldr	r2, [pc, #328]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    2966:	494e      	ldr	r1, [pc, #312]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    2968:	484e      	ldr	r0, [pc, #312]	; (2aa4 <spi_read_buffer_wait+0x330>)
    296a:	4c4f      	ldr	r4, [pc, #316]	; (2aa8 <spi_read_buffer_wait+0x334>)
    296c:	47a0      	blx	r4
    296e:	e7fe      	b.n	296e <spi_read_buffer_wait+0x1fa>
	Assert(module);
    2970:	4b46      	ldr	r3, [pc, #280]	; (2a8c <spi_read_buffer_wait+0x318>)
    2972:	9301      	str	r3, [sp, #4]
    2974:	4b46      	ldr	r3, [pc, #280]	; (2a90 <spi_read_buffer_wait+0x31c>)
    2976:	9300      	str	r3, [sp, #0]
    2978:	4b51      	ldr	r3, [pc, #324]	; (2ac0 <spi_read_buffer_wait+0x34c>)
    297a:	4a4d      	ldr	r2, [pc, #308]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    297c:	2101      	movs	r1, #1
    297e:	4d47      	ldr	r5, [pc, #284]	; (2a9c <spi_read_buffer_wait+0x328>)
    2980:	47a8      	blx	r5
    2982:	4b41      	ldr	r3, [pc, #260]	; (2a88 <spi_read_buffer_wait+0x314>)
    2984:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2986:	2800      	cmp	r0, #0
    2988:	d10e      	bne.n	29a8 <spi_read_buffer_wait+0x234>
    298a:	e001      	b.n	2990 <spi_read_buffer_wait+0x21c>
	Assert(module);
    298c:	2c00      	cmp	r4, #0
    298e:	d018      	beq.n	29c2 <spi_read_buffer_wait+0x24e>
	Assert(module->hw);
    2990:	6823      	ldr	r3, [r4, #0]
    2992:	2b00      	cmp	r3, #0
    2994:	d01c      	beq.n	29d0 <spi_read_buffer_wait+0x25c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2996:	6823      	ldr	r3, [r4, #0]
    2998:	7e1b      	ldrb	r3, [r3, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    299a:	075b      	lsls	r3, r3, #29
    299c:	d41f      	bmi.n	29de <spi_read_buffer_wait+0x26a>
    299e:	6830      	ldr	r0, [r6, #0]
	Assert(module);
    29a0:	2800      	cmp	r0, #0
    29a2:	d0f3      	beq.n	298c <spi_read_buffer_wait+0x218>
    29a4:	2c00      	cmp	r4, #0
    29a6:	d0e3      	beq.n	2970 <spi_read_buffer_wait+0x1fc>
	Assert(module->hw);
    29a8:	6823      	ldr	r3, [r4, #0]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d1f3      	bne.n	2996 <spi_read_buffer_wait+0x222>
    29ae:	4b3c      	ldr	r3, [pc, #240]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    29b0:	9301      	str	r3, [sp, #4]
    29b2:	4b37      	ldr	r3, [pc, #220]	; (2a90 <spi_read_buffer_wait+0x31c>)
    29b4:	9300      	str	r3, [sp, #0]
    29b6:	4b43      	ldr	r3, [pc, #268]	; (2ac4 <spi_read_buffer_wait+0x350>)
    29b8:	4a3d      	ldr	r2, [pc, #244]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    29ba:	2101      	movs	r1, #1
    29bc:	4d37      	ldr	r5, [pc, #220]	; (2a9c <spi_read_buffer_wait+0x328>)
    29be:	47a8      	blx	r5
    29c0:	e7e9      	b.n	2996 <spi_read_buffer_wait+0x222>
	Assert(module);
    29c2:	4b3f      	ldr	r3, [pc, #252]	; (2ac0 <spi_read_buffer_wait+0x34c>)
    29c4:	4a3a      	ldr	r2, [pc, #232]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    29c6:	4931      	ldr	r1, [pc, #196]	; (2a8c <spi_read_buffer_wait+0x318>)
    29c8:	4836      	ldr	r0, [pc, #216]	; (2aa4 <spi_read_buffer_wait+0x330>)
    29ca:	4c37      	ldr	r4, [pc, #220]	; (2aa8 <spi_read_buffer_wait+0x334>)
    29cc:	47a0      	blx	r4
    29ce:	e7fe      	b.n	29ce <spi_read_buffer_wait+0x25a>
	Assert(module->hw);
    29d0:	4b3c      	ldr	r3, [pc, #240]	; (2ac4 <spi_read_buffer_wait+0x350>)
    29d2:	4a37      	ldr	r2, [pc, #220]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    29d4:	4932      	ldr	r1, [pc, #200]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    29d6:	4833      	ldr	r0, [pc, #204]	; (2aa4 <spi_read_buffer_wait+0x330>)
    29d8:	4c33      	ldr	r4, [pc, #204]	; (2aa8 <spi_read_buffer_wait+0x334>)
    29da:	47a0      	blx	r4
    29dc:	e7fe      	b.n	29dc <spi_read_buffer_wait+0x268>
    29de:	4b2a      	ldr	r3, [pc, #168]	; (2a88 <spi_read_buffer_wait+0x314>)
    29e0:	6818      	ldr	r0, [r3, #0]
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
	/* Sanity check arguments */
	Assert(module);
    29e2:	2800      	cmp	r0, #0
    29e4:	d023      	beq.n	2a2e <spi_read_buffer_wait+0x2ba>
    29e6:	2c00      	cmp	r4, #0
    29e8:	d013      	beq.n	2a12 <spi_read_buffer_wait+0x29e>
	Assert(module->hw);
    29ea:	6826      	ldr	r6, [r4, #0]
    29ec:	2e00      	cmp	r6, #0
    29ee:	d02d      	beq.n	2a4c <spi_read_buffer_wait+0x2d8>
    29f0:	4b25      	ldr	r3, [pc, #148]	; (2a88 <spi_read_buffer_wait+0x314>)
    29f2:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    29f4:	2c00      	cmp	r4, #0
    29f6:	d06b      	beq.n	2ad0 <spi_read_buffer_wait+0x35c>
    29f8:	4b23      	ldr	r3, [pc, #140]	; (2a88 <spi_read_buffer_wait+0x314>)
    29fa:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    29fc:	6823      	ldr	r3, [r4, #0]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d100      	bne.n	2a04 <spi_read_buffer_wait+0x290>
    2a02:	e07c      	b.n	2afe <spi_read_buffer_wait+0x38a>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2a04:	6823      	ldr	r3, [r4, #0]
    2a06:	7e1b      	ldrb	r3, [r3, #24]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2a08:	075b      	lsls	r3, r3, #29
    2a0a:	d500      	bpl.n	2a0e <spi_read_buffer_wait+0x29a>
    2a0c:	e081      	b.n	2b12 <spi_read_buffer_wait+0x39e>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2a0e:	2010      	movs	r0, #16
    2a10:	e0ad      	b.n	2b6e <spi_read_buffer_wait+0x3fa>
	Assert(module);
    2a12:	4b1e      	ldr	r3, [pc, #120]	; (2a8c <spi_read_buffer_wait+0x318>)
    2a14:	9301      	str	r3, [sp, #4]
    2a16:	4b1e      	ldr	r3, [pc, #120]	; (2a90 <spi_read_buffer_wait+0x31c>)
    2a18:	9300      	str	r3, [sp, #0]
    2a1a:	4b2b      	ldr	r3, [pc, #172]	; (2ac8 <spi_read_buffer_wait+0x354>)
    2a1c:	4a24      	ldr	r2, [pc, #144]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    2a1e:	2101      	movs	r1, #1
    2a20:	4e1e      	ldr	r6, [pc, #120]	; (2a9c <spi_read_buffer_wait+0x328>)
    2a22:	47b0      	blx	r6
    2a24:	4b18      	ldr	r3, [pc, #96]	; (2a88 <spi_read_buffer_wait+0x314>)
    2a26:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2a28:	2800      	cmp	r0, #0
    2a2a:	d1de      	bne.n	29ea <spi_read_buffer_wait+0x276>
    2a2c:	e001      	b.n	2a32 <spi_read_buffer_wait+0x2be>
	Assert(module);
    2a2e:	2c00      	cmp	r4, #0
    2a30:	d005      	beq.n	2a3e <spi_read_buffer_wait+0x2ca>
	Assert(module->hw);
    2a32:	6826      	ldr	r6, [r4, #0]
    2a34:	2e00      	cmp	r6, #0
    2a36:	d020      	beq.n	2a7a <spi_read_buffer_wait+0x306>
	Assert(module);
    2a38:	2c00      	cmp	r4, #0
    2a3a:	d1e3      	bne.n	2a04 <spi_read_buffer_wait+0x290>
    2a3c:	e016      	b.n	2a6c <spi_read_buffer_wait+0x2f8>
	Assert(module);
    2a3e:	4b22      	ldr	r3, [pc, #136]	; (2ac8 <spi_read_buffer_wait+0x354>)
    2a40:	4a1b      	ldr	r2, [pc, #108]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    2a42:	4912      	ldr	r1, [pc, #72]	; (2a8c <spi_read_buffer_wait+0x318>)
    2a44:	4817      	ldr	r0, [pc, #92]	; (2aa4 <spi_read_buffer_wait+0x330>)
    2a46:	4c18      	ldr	r4, [pc, #96]	; (2aa8 <spi_read_buffer_wait+0x334>)
    2a48:	47a0      	blx	r4
    2a4a:	e7fe      	b.n	2a4a <spi_read_buffer_wait+0x2d6>
	Assert(module->hw);
    2a4c:	4b14      	ldr	r3, [pc, #80]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    2a4e:	9301      	str	r3, [sp, #4]
    2a50:	4b0f      	ldr	r3, [pc, #60]	; (2a90 <spi_read_buffer_wait+0x31c>)
    2a52:	9300      	str	r3, [sp, #0]
    2a54:	4b1d      	ldr	r3, [pc, #116]	; (2acc <spi_read_buffer_wait+0x358>)
    2a56:	4a16      	ldr	r2, [pc, #88]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    2a58:	2101      	movs	r1, #1
    2a5a:	4e10      	ldr	r6, [pc, #64]	; (2a9c <spi_read_buffer_wait+0x328>)
    2a5c:	47b0      	blx	r6
	SercomSpi *const spi_module = &(module->hw->SPI);
    2a5e:	6826      	ldr	r6, [r4, #0]
    2a60:	4b09      	ldr	r3, [pc, #36]	; (2a88 <spi_read_buffer_wait+0x314>)
    2a62:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    2a64:	2800      	cmp	r0, #0
    2a66:	d1c5      	bne.n	29f4 <spi_read_buffer_wait+0x280>
    2a68:	2c00      	cmp	r4, #0
    2a6a:	d13e      	bne.n	2aea <spi_read_buffer_wait+0x376>
    2a6c:	4b14      	ldr	r3, [pc, #80]	; (2ac0 <spi_read_buffer_wait+0x34c>)
    2a6e:	4a10      	ldr	r2, [pc, #64]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    2a70:	4906      	ldr	r1, [pc, #24]	; (2a8c <spi_read_buffer_wait+0x318>)
    2a72:	480c      	ldr	r0, [pc, #48]	; (2aa4 <spi_read_buffer_wait+0x330>)
    2a74:	4c0c      	ldr	r4, [pc, #48]	; (2aa8 <spi_read_buffer_wait+0x334>)
    2a76:	47a0      	blx	r4
    2a78:	e7fe      	b.n	2a78 <spi_read_buffer_wait+0x304>
	Assert(module->hw);
    2a7a:	4b14      	ldr	r3, [pc, #80]	; (2acc <spi_read_buffer_wait+0x358>)
    2a7c:	4a0c      	ldr	r2, [pc, #48]	; (2ab0 <spi_read_buffer_wait+0x33c>)
    2a7e:	4908      	ldr	r1, [pc, #32]	; (2aa0 <spi_read_buffer_wait+0x32c>)
    2a80:	4808      	ldr	r0, [pc, #32]	; (2aa4 <spi_read_buffer_wait+0x330>)
    2a82:	4c09      	ldr	r4, [pc, #36]	; (2aa8 <spi_read_buffer_wait+0x334>)
    2a84:	47a0      	blx	r4
    2a86:	e7fe      	b.n	2a86 <spi_read_buffer_wait+0x312>
    2a88:	2000011c 	.word	0x2000011c
    2a8c:	00007094 	.word	0x00007094
    2a90:	00006c40 	.word	0x00006c40
    2a94:	00000287 	.word	0x00000287
    2a98:	00007068 	.word	0x00007068
    2a9c:	000017e1 	.word	0x000017e1
    2aa0:	00006d80 	.word	0x00006d80
    2aa4:	00006c58 	.word	0x00006c58
    2aa8:	00006055 	.word	0x00006055
    2aac:	000004a1 	.word	0x000004a1
    2ab0:	00006d54 	.word	0x00006d54
    2ab4:	000004a2 	.word	0x000004a2
    2ab8:	000004e3 	.word	0x000004e3
    2abc:	000004e4 	.word	0x000004e4
    2ac0:	000004b9 	.word	0x000004b9
    2ac4:	000004ba 	.word	0x000004ba
    2ac8:	00000511 	.word	0x00000511
    2acc:	00000512 	.word	0x00000512
	Assert(module);
    2ad0:	4b2f      	ldr	r3, [pc, #188]	; (2b90 <spi_read_buffer_wait+0x41c>)
    2ad2:	9301      	str	r3, [sp, #4]
    2ad4:	4b2f      	ldr	r3, [pc, #188]	; (2b94 <spi_read_buffer_wait+0x420>)
    2ad6:	9300      	str	r3, [sp, #0]
    2ad8:	4b2f      	ldr	r3, [pc, #188]	; (2b98 <spi_read_buffer_wait+0x424>)
    2ada:	4a30      	ldr	r2, [pc, #192]	; (2b9c <spi_read_buffer_wait+0x428>)
    2adc:	2101      	movs	r1, #1
    2ade:	4d30      	ldr	r5, [pc, #192]	; (2ba0 <spi_read_buffer_wait+0x42c>)
    2ae0:	47a8      	blx	r5
    2ae2:	4b30      	ldr	r3, [pc, #192]	; (2ba4 <spi_read_buffer_wait+0x430>)
    2ae4:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2ae6:	2800      	cmp	r0, #0
    2ae8:	d188      	bne.n	29fc <spi_read_buffer_wait+0x288>
    2aea:	6823      	ldr	r3, [r4, #0]
    2aec:	2b00      	cmp	r3, #0
    2aee:	d189      	bne.n	2a04 <spi_read_buffer_wait+0x290>
    2af0:	4b2d      	ldr	r3, [pc, #180]	; (2ba8 <spi_read_buffer_wait+0x434>)
    2af2:	4a2a      	ldr	r2, [pc, #168]	; (2b9c <spi_read_buffer_wait+0x428>)
    2af4:	492d      	ldr	r1, [pc, #180]	; (2bac <spi_read_buffer_wait+0x438>)
    2af6:	482e      	ldr	r0, [pc, #184]	; (2bb0 <spi_read_buffer_wait+0x43c>)
    2af8:	4c2e      	ldr	r4, [pc, #184]	; (2bb4 <spi_read_buffer_wait+0x440>)
    2afa:	47a0      	blx	r4
    2afc:	e7fe      	b.n	2afc <spi_read_buffer_wait+0x388>
    2afe:	4b2b      	ldr	r3, [pc, #172]	; (2bac <spi_read_buffer_wait+0x438>)
    2b00:	9301      	str	r3, [sp, #4]
    2b02:	4b24      	ldr	r3, [pc, #144]	; (2b94 <spi_read_buffer_wait+0x420>)
    2b04:	9300      	str	r3, [sp, #0]
    2b06:	4b28      	ldr	r3, [pc, #160]	; (2ba8 <spi_read_buffer_wait+0x434>)
    2b08:	4a24      	ldr	r2, [pc, #144]	; (2b9c <spi_read_buffer_wait+0x428>)
    2b0a:	2101      	movs	r1, #1
    2b0c:	4d24      	ldr	r5, [pc, #144]	; (2ba0 <spi_read_buffer_wait+0x42c>)
    2b0e:	47a8      	blx	r5
    2b10:	e778      	b.n	2a04 <spi_read_buffer_wait+0x290>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2b12:	8b73      	ldrh	r3, [r6, #26]
	enum status_code retval = STATUS_OK;
    2b14:	2000      	movs	r0, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2b16:	075b      	lsls	r3, r3, #29
    2b18:	d502      	bpl.n	2b20 <spi_read_buffer_wait+0x3ac>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2b1a:	2304      	movs	r3, #4
    2b1c:	8373      	strh	r3, [r6, #26]
		retval = STATUS_ERR_OVERFLOW;
    2b1e:	301e      	adds	r0, #30
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2b20:	79a3      	ldrb	r3, [r4, #6]
    2b22:	2b01      	cmp	r3, #1
    2b24:	d018      	beq.n	2b58 <spi_read_buffer_wait+0x3e4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2b26:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2b28:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    2b2a:	2800      	cmp	r0, #0
    2b2c:	d11f      	bne.n	2b6e <spi_read_buffer_wait+0x3fa>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    2b2e:	1c7a      	adds	r2, r7, #1
    2b30:	b292      	uxth	r2, r2
    2b32:	9902      	ldr	r1, [sp, #8]
    2b34:	55cb      	strb	r3, [r1, r7]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2b36:	79a1      	ldrb	r1, [r4, #6]
    2b38:	2901      	cmp	r1, #1
    2b3a:	d011      	beq.n	2b60 <spi_read_buffer_wait+0x3ec>
		rx_data[rx_pos++] = received_data;
    2b3c:	0017      	movs	r7, r2
	while (length--) {
    2b3e:	4645      	mov	r5, r8
    2b40:	3d01      	subs	r5, #1
    2b42:	b2ab      	uxth	r3, r5
    2b44:	4698      	mov	r8, r3
    2b46:	4b1c      	ldr	r3, [pc, #112]	; (2bb8 <spi_read_buffer_wait+0x444>)
    2b48:	4598      	cmp	r8, r3
    2b4a:	d010      	beq.n	2b6e <spi_read_buffer_wait+0x3fa>
		if (module->mode == SPI_MODE_MASTER) {
    2b4c:	7963      	ldrb	r3, [r4, #5]
    2b4e:	2b01      	cmp	r3, #1
    2b50:	d100      	bne.n	2b54 <spi_read_buffer_wait+0x3e0>
    2b52:	e675      	b.n	2840 <spi_read_buffer_wait+0xcc>
    2b54:	4e13      	ldr	r6, [pc, #76]	; (2ba4 <spi_read_buffer_wait+0x430>)
    2b56:	e722      	b.n	299e <spi_read_buffer_wait+0x22a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2b58:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2b5a:	05db      	lsls	r3, r3, #23
    2b5c:	0ddb      	lsrs	r3, r3, #23
    2b5e:	e7e4      	b.n	2b2a <spi_read_buffer_wait+0x3b6>
			rx_data[rx_pos++] = (received_data >> 8);
    2b60:	3702      	adds	r7, #2
    2b62:	b2bf      	uxth	r7, r7
    2b64:	0a1b      	lsrs	r3, r3, #8
    2b66:	9902      	ldr	r1, [sp, #8]
    2b68:	548b      	strb	r3, [r1, r2]
    2b6a:	e7e8      	b.n	2b3e <spi_read_buffer_wait+0x3ca>
		return STATUS_BUSY;
    2b6c:	2005      	movs	r0, #5
		}
	}

	return STATUS_OK;
}
    2b6e:	b004      	add	sp, #16
    2b70:	bc1c      	pop	{r2, r3, r4}
    2b72:	4690      	mov	r8, r2
    2b74:	4699      	mov	r9, r3
    2b76:	46a3      	mov	fp, r4
    2b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Assert(module);
    2b7a:	2c00      	cmp	r4, #0
    2b7c:	d000      	beq.n	2b80 <spi_read_buffer_wait+0x40c>
    2b7e:	e6d0      	b.n	2922 <spi_read_buffer_wait+0x1ae>
    2b80:	e6db      	b.n	293a <spi_read_buffer_wait+0x1c6>
	while (length--) {
    2b82:	3d01      	subs	r5, #1
    2b84:	b2ab      	uxth	r3, r5
    2b86:	4698      	mov	r8, r3
    2b88:	2700      	movs	r7, #0
    2b8a:	4b06      	ldr	r3, [pc, #24]	; (2ba4 <spi_read_buffer_wait+0x430>)
    2b8c:	4699      	mov	r9, r3
    2b8e:	e7dd      	b.n	2b4c <spi_read_buffer_wait+0x3d8>
    2b90:	00007094 	.word	0x00007094
    2b94:	00006c40 	.word	0x00006c40
    2b98:	000004b9 	.word	0x000004b9
    2b9c:	00006d54 	.word	0x00006d54
    2ba0:	000017e1 	.word	0x000017e1
    2ba4:	2000011c 	.word	0x2000011c
    2ba8:	000004ba 	.word	0x000004ba
    2bac:	00006d80 	.word	0x00006d80
    2bb0:	00006c58 	.word	0x00006c58
    2bb4:	00006055 	.word	0x00006055
    2bb8:	0000ffff 	.word	0x0000ffff

00002bbc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bbe:	b083      	sub	sp, #12
    2bc0:	0004      	movs	r4, r0
    2bc2:	000d      	movs	r5, r1
    2bc4:	0016      	movs	r6, r2
    2bc6:	4bb6      	ldr	r3, [pc, #728]	; (2ea0 <spi_select_slave+0x2e4>)
    2bc8:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    2bca:	2800      	cmp	r0, #0
    2bcc:	d01c      	beq.n	2c08 <spi_select_slave+0x4c>
    2bce:	2c00      	cmp	r4, #0
    2bd0:	d00c      	beq.n	2bec <spi_select_slave+0x30>
	Assert(module->hw);
    2bd2:	6823      	ldr	r3, [r4, #0]
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d02d      	beq.n	2c34 <spi_select_slave+0x78>
    2bd8:	4bb1      	ldr	r3, [pc, #708]	; (2ea0 <spi_select_slave+0x2e4>)
    2bda:	6818      	ldr	r0, [r3, #0]
	Assert(slave);
    2bdc:	2d00      	cmp	r5, #0
    2bde:	d03e      	beq.n	2c5e <spi_select_slave+0xa2>

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2be0:	7963      	ldrb	r3, [r4, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2be2:	2015      	movs	r0, #21
	if (module->mode != SPI_MODE_MASTER) {
    2be4:	2b01      	cmp	r3, #1
    2be6:	d045      	beq.n	2c74 <spi_select_slave+0xb8>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    2be8:	b003      	add	sp, #12
    2bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Assert(module);
    2bec:	4bad      	ldr	r3, [pc, #692]	; (2ea4 <spi_select_slave+0x2e8>)
    2bee:	9301      	str	r3, [sp, #4]
    2bf0:	4bad      	ldr	r3, [pc, #692]	; (2ea8 <spi_select_slave+0x2ec>)
    2bf2:	9300      	str	r3, [sp, #0]
    2bf4:	4bad      	ldr	r3, [pc, #692]	; (2eac <spi_select_slave+0x2f0>)
    2bf6:	4aae      	ldr	r2, [pc, #696]	; (2eb0 <spi_select_slave+0x2f4>)
    2bf8:	2101      	movs	r1, #1
    2bfa:	4fae      	ldr	r7, [pc, #696]	; (2eb4 <spi_select_slave+0x2f8>)
    2bfc:	47b8      	blx	r7
    2bfe:	4ba8      	ldr	r3, [pc, #672]	; (2ea0 <spi_select_slave+0x2e4>)
    2c00:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2c02:	2800      	cmp	r0, #0
    2c04:	d1e5      	bne.n	2bd2 <spi_select_slave+0x16>
    2c06:	e001      	b.n	2c0c <spi_select_slave+0x50>
	Assert(module);
    2c08:	2c00      	cmp	r4, #0
    2c0a:	d00c      	beq.n	2c26 <spi_select_slave+0x6a>
	Assert(module->hw);
    2c0c:	6823      	ldr	r3, [r4, #0]
    2c0e:	2b00      	cmp	r3, #0
    2c10:	d01e      	beq.n	2c50 <spi_select_slave+0x94>
	Assert(slave);
    2c12:	2d00      	cmp	r5, #0
    2c14:	d1e4      	bne.n	2be0 <spi_select_slave+0x24>
    2c16:	23d6      	movs	r3, #214	; 0xd6
    2c18:	009b      	lsls	r3, r3, #2
    2c1a:	4aa5      	ldr	r2, [pc, #660]	; (2eb0 <spi_select_slave+0x2f4>)
    2c1c:	49a6      	ldr	r1, [pc, #664]	; (2eb8 <spi_select_slave+0x2fc>)
    2c1e:	48a7      	ldr	r0, [pc, #668]	; (2ebc <spi_select_slave+0x300>)
    2c20:	4ca7      	ldr	r4, [pc, #668]	; (2ec0 <spi_select_slave+0x304>)
    2c22:	47a0      	blx	r4
    2c24:	e7fe      	b.n	2c24 <spi_select_slave+0x68>
	Assert(module);
    2c26:	4ba1      	ldr	r3, [pc, #644]	; (2eac <spi_select_slave+0x2f0>)
    2c28:	4aa1      	ldr	r2, [pc, #644]	; (2eb0 <spi_select_slave+0x2f4>)
    2c2a:	499e      	ldr	r1, [pc, #632]	; (2ea4 <spi_select_slave+0x2e8>)
    2c2c:	48a3      	ldr	r0, [pc, #652]	; (2ebc <spi_select_slave+0x300>)
    2c2e:	4ca4      	ldr	r4, [pc, #656]	; (2ec0 <spi_select_slave+0x304>)
    2c30:	47a0      	blx	r4
    2c32:	e7fe      	b.n	2c32 <spi_select_slave+0x76>
	Assert(module->hw);
    2c34:	4ba3      	ldr	r3, [pc, #652]	; (2ec4 <spi_select_slave+0x308>)
    2c36:	9301      	str	r3, [sp, #4]
    2c38:	4b9b      	ldr	r3, [pc, #620]	; (2ea8 <spi_select_slave+0x2ec>)
    2c3a:	9300      	str	r3, [sp, #0]
    2c3c:	4ba2      	ldr	r3, [pc, #648]	; (2ec8 <spi_select_slave+0x30c>)
    2c3e:	4a9c      	ldr	r2, [pc, #624]	; (2eb0 <spi_select_slave+0x2f4>)
    2c40:	2101      	movs	r1, #1
    2c42:	4f9c      	ldr	r7, [pc, #624]	; (2eb4 <spi_select_slave+0x2f8>)
    2c44:	47b8      	blx	r7
    2c46:	4b96      	ldr	r3, [pc, #600]	; (2ea0 <spi_select_slave+0x2e4>)
    2c48:	6818      	ldr	r0, [r3, #0]
	Assert(slave);
    2c4a:	2800      	cmp	r0, #0
    2c4c:	d1c6      	bne.n	2bdc <spi_select_slave+0x20>
    2c4e:	e7e0      	b.n	2c12 <spi_select_slave+0x56>
	Assert(module->hw);
    2c50:	4b9d      	ldr	r3, [pc, #628]	; (2ec8 <spi_select_slave+0x30c>)
    2c52:	4a97      	ldr	r2, [pc, #604]	; (2eb0 <spi_select_slave+0x2f4>)
    2c54:	499b      	ldr	r1, [pc, #620]	; (2ec4 <spi_select_slave+0x308>)
    2c56:	4899      	ldr	r0, [pc, #612]	; (2ebc <spi_select_slave+0x300>)
    2c58:	4c99      	ldr	r4, [pc, #612]	; (2ec0 <spi_select_slave+0x304>)
    2c5a:	47a0      	blx	r4
    2c5c:	e7fe      	b.n	2c5c <spi_select_slave+0xa0>
	Assert(slave);
    2c5e:	4b96      	ldr	r3, [pc, #600]	; (2eb8 <spi_select_slave+0x2fc>)
    2c60:	9301      	str	r3, [sp, #4]
    2c62:	4b91      	ldr	r3, [pc, #580]	; (2ea8 <spi_select_slave+0x2ec>)
    2c64:	9300      	str	r3, [sp, #0]
    2c66:	23d6      	movs	r3, #214	; 0xd6
    2c68:	009b      	lsls	r3, r3, #2
    2c6a:	4a91      	ldr	r2, [pc, #580]	; (2eb0 <spi_select_slave+0x2f4>)
    2c6c:	2101      	movs	r1, #1
    2c6e:	4f91      	ldr	r7, [pc, #580]	; (2eb4 <spi_select_slave+0x2f8>)
    2c70:	47b8      	blx	r7
    2c72:	e7b5      	b.n	2be0 <spi_select_slave+0x24>
	if(!(module->master_slave_select_enable))
    2c74:	7a23      	ldrb	r3, [r4, #8]
    2c76:	2b00      	cmp	r3, #0
    2c78:	d000      	beq.n	2c7c <spi_select_slave+0xc0>
    2c7a:	e1f4      	b.n	3066 <spi_select_slave+0x4aa>
		if (select) {
    2c7c:	2e00      	cmp	r6, #0
    2c7e:	d100      	bne.n	2c82 <spi_select_slave+0xc6>
    2c80:	e1ca      	b.n	3018 <spi_select_slave+0x45c>
			if (slave->address_enabled) {
    2c82:	786b      	ldrb	r3, [r5, #1]
    2c84:	2b00      	cmp	r3, #0
    2c86:	d100      	bne.n	2c8a <spi_select_slave+0xce>
    2c88:	e19f      	b.n	2fca <spi_select_slave+0x40e>
    2c8a:	4b85      	ldr	r3, [pc, #532]	; (2ea0 <spi_select_slave+0x2e4>)
    2c8c:	6818      	ldr	r0, [r3, #0]
    2c8e:	2800      	cmp	r0, #0
    2c90:	d029      	beq.n	2ce6 <spi_select_slave+0x12a>
    2c92:	2c00      	cmp	r4, #0
    2c94:	d019      	beq.n	2cca <spi_select_slave+0x10e>
	Assert(module->hw);
    2c96:	6823      	ldr	r3, [r4, #0]
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d037      	beq.n	2d0c <spi_select_slave+0x150>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2c9c:	6823      	ldr	r3, [r4, #0]
    2c9e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2ca0:	07db      	lsls	r3, r3, #31
    2ca2:	d451      	bmi.n	2d48 <spi_select_slave+0x18c>
					port_pin_set_output_level(slave->ss_pin, true);
    2ca4:	782c      	ldrb	r4, [r5, #0]
	if (port_index < PORT_INST_NUM) {
    2ca6:	09e3      	lsrs	r3, r4, #7
    2ca8:	d03a      	beq.n	2d20 <spi_select_slave+0x164>
    2caa:	4b7d      	ldr	r3, [pc, #500]	; (2ea0 <spi_select_slave+0x2e4>)
    2cac:	6818      	ldr	r0, [r3, #0]
		Assert(false);
    2cae:	2800      	cmp	r0, #0
    2cb0:	d042      	beq.n	2d38 <spi_select_slave+0x17c>
    2cb2:	4b86      	ldr	r3, [pc, #536]	; (2ecc <spi_select_slave+0x310>)
    2cb4:	9301      	str	r3, [sp, #4]
    2cb6:	4b7c      	ldr	r3, [pc, #496]	; (2ea8 <spi_select_slave+0x2ec>)
    2cb8:	9300      	str	r3, [sp, #0]
    2cba:	2362      	movs	r3, #98	; 0x62
    2cbc:	33ff      	adds	r3, #255	; 0xff
    2cbe:	4a84      	ldr	r2, [pc, #528]	; (2ed0 <spi_select_slave+0x314>)
    2cc0:	2101      	movs	r1, #1
    2cc2:	4d7c      	ldr	r5, [pc, #496]	; (2eb4 <spi_select_slave+0x2f8>)
    2cc4:	47a8      	blx	r5
		return NULL;
    2cc6:	2300      	movs	r3, #0
    2cc8:	e02f      	b.n	2d2a <spi_select_slave+0x16e>
	Assert(module);
    2cca:	4b76      	ldr	r3, [pc, #472]	; (2ea4 <spi_select_slave+0x2e8>)
    2ccc:	9301      	str	r3, [sp, #4]
    2cce:	4b76      	ldr	r3, [pc, #472]	; (2ea8 <spi_select_slave+0x2ec>)
    2cd0:	9300      	str	r3, [sp, #0]
    2cd2:	4b80      	ldr	r3, [pc, #512]	; (2ed4 <spi_select_slave+0x318>)
    2cd4:	4a80      	ldr	r2, [pc, #512]	; (2ed8 <spi_select_slave+0x31c>)
    2cd6:	2101      	movs	r1, #1
    2cd8:	4e76      	ldr	r6, [pc, #472]	; (2eb4 <spi_select_slave+0x2f8>)
    2cda:	47b0      	blx	r6
    2cdc:	4b70      	ldr	r3, [pc, #448]	; (2ea0 <spi_select_slave+0x2e4>)
    2cde:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2ce0:	2800      	cmp	r0, #0
    2ce2:	d1d8      	bne.n	2c96 <spi_select_slave+0xda>
    2ce4:	e001      	b.n	2cea <spi_select_slave+0x12e>
	Assert(module);
    2ce6:	2c00      	cmp	r4, #0
    2ce8:	d009      	beq.n	2cfe <spi_select_slave+0x142>
	Assert(module->hw);
    2cea:	6823      	ldr	r3, [r4, #0]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d1d5      	bne.n	2c9c <spi_select_slave+0xe0>
    2cf0:	4b7a      	ldr	r3, [pc, #488]	; (2edc <spi_select_slave+0x320>)
    2cf2:	4a79      	ldr	r2, [pc, #484]	; (2ed8 <spi_select_slave+0x31c>)
    2cf4:	4973      	ldr	r1, [pc, #460]	; (2ec4 <spi_select_slave+0x308>)
    2cf6:	4871      	ldr	r0, [pc, #452]	; (2ebc <spi_select_slave+0x300>)
    2cf8:	4c71      	ldr	r4, [pc, #452]	; (2ec0 <spi_select_slave+0x304>)
    2cfa:	47a0      	blx	r4
    2cfc:	e7fe      	b.n	2cfc <spi_select_slave+0x140>
	Assert(module);
    2cfe:	4b75      	ldr	r3, [pc, #468]	; (2ed4 <spi_select_slave+0x318>)
    2d00:	4a75      	ldr	r2, [pc, #468]	; (2ed8 <spi_select_slave+0x31c>)
    2d02:	4968      	ldr	r1, [pc, #416]	; (2ea4 <spi_select_slave+0x2e8>)
    2d04:	486d      	ldr	r0, [pc, #436]	; (2ebc <spi_select_slave+0x300>)
    2d06:	4c6e      	ldr	r4, [pc, #440]	; (2ec0 <spi_select_slave+0x304>)
    2d08:	47a0      	blx	r4
    2d0a:	e7fe      	b.n	2d0a <spi_select_slave+0x14e>
	Assert(module->hw);
    2d0c:	4b6d      	ldr	r3, [pc, #436]	; (2ec4 <spi_select_slave+0x308>)
    2d0e:	9301      	str	r3, [sp, #4]
    2d10:	4b65      	ldr	r3, [pc, #404]	; (2ea8 <spi_select_slave+0x2ec>)
    2d12:	9300      	str	r3, [sp, #0]
    2d14:	4b71      	ldr	r3, [pc, #452]	; (2edc <spi_select_slave+0x320>)
    2d16:	4a70      	ldr	r2, [pc, #448]	; (2ed8 <spi_select_slave+0x31c>)
    2d18:	2101      	movs	r1, #1
    2d1a:	4e66      	ldr	r6, [pc, #408]	; (2eb4 <spi_select_slave+0x2f8>)
    2d1c:	47b0      	blx	r6
    2d1e:	e7bd      	b.n	2c9c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    2d20:	0963      	lsrs	r3, r4, #5
    2d22:	01db      	lsls	r3, r3, #7
    2d24:	4a6e      	ldr	r2, [pc, #440]	; (2ee0 <spi_select_slave+0x324>)
    2d26:	4694      	mov	ip, r2
    2d28:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2d2a:	211f      	movs	r1, #31
    2d2c:	4021      	ands	r1, r4
    2d2e:	2201      	movs	r2, #1
    2d30:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2d32:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    2d34:	2005      	movs	r0, #5
    2d36:	e757      	b.n	2be8 <spi_select_slave+0x2c>
		Assert(false);
    2d38:	2362      	movs	r3, #98	; 0x62
    2d3a:	33ff      	adds	r3, #255	; 0xff
    2d3c:	4a64      	ldr	r2, [pc, #400]	; (2ed0 <spi_select_slave+0x314>)
    2d3e:	4963      	ldr	r1, [pc, #396]	; (2ecc <spi_select_slave+0x310>)
    2d40:	485e      	ldr	r0, [pc, #376]	; (2ebc <spi_select_slave+0x300>)
    2d42:	4c5f      	ldr	r4, [pc, #380]	; (2ec0 <spi_select_slave+0x304>)
    2d44:	47a0      	blx	r4
    2d46:	e7fe      	b.n	2d46 <spi_select_slave+0x18a>
				port_pin_set_output_level(slave->ss_pin, false);
    2d48:	782e      	ldrb	r6, [r5, #0]
	uint8_t group_index = (gpio_pin / 32);
    2d4a:	0973      	lsrs	r3, r6, #5
	if (port_index < PORT_INST_NUM) {
    2d4c:	09f2      	lsrs	r2, r6, #7
    2d4e:	d00b      	beq.n	2d68 <spi_select_slave+0x1ac>
    2d50:	4b53      	ldr	r3, [pc, #332]	; (2ea0 <spi_select_slave+0x2e4>)
    2d52:	6818      	ldr	r0, [r3, #0]
		Assert(false);
    2d54:	2800      	cmp	r0, #0
    2d56:	d12d      	bne.n	2db4 <spi_select_slave+0x1f8>
    2d58:	2362      	movs	r3, #98	; 0x62
    2d5a:	33ff      	adds	r3, #255	; 0xff
    2d5c:	4a5c      	ldr	r2, [pc, #368]	; (2ed0 <spi_select_slave+0x314>)
    2d5e:	495b      	ldr	r1, [pc, #364]	; (2ecc <spi_select_slave+0x310>)
    2d60:	4856      	ldr	r0, [pc, #344]	; (2ebc <spi_select_slave+0x300>)
    2d62:	4c57      	ldr	r4, [pc, #348]	; (2ec0 <spi_select_slave+0x304>)
    2d64:	47a0      	blx	r4
    2d66:	e7fe      	b.n	2d66 <spi_select_slave+0x1aa>
		return &(ports[port_index]->Group[group_index]);
    2d68:	01db      	lsls	r3, r3, #7
    2d6a:	4a5d      	ldr	r2, [pc, #372]	; (2ee0 <spi_select_slave+0x324>)
    2d6c:	4694      	mov	ip, r2
    2d6e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2d70:	211f      	movs	r1, #31
    2d72:	4031      	ands	r1, r6
    2d74:	2201      	movs	r2, #1
    2d76:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2d78:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
    2d7a:	78ae      	ldrb	r6, [r5, #2]
    2d7c:	4b48      	ldr	r3, [pc, #288]	; (2ea0 <spi_select_slave+0x2e4>)
    2d7e:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    2d80:	2800      	cmp	r0, #0
    2d82:	d03b      	beq.n	2dfc <spi_select_slave+0x240>
    2d84:	2c00      	cmp	r4, #0
    2d86:	d021      	beq.n	2dcc <spi_select_slave+0x210>
	Assert(module->hw);
    2d88:	6825      	ldr	r5, [r4, #0]
    2d8a:	2d00      	cmp	r5, #0
    2d8c:	d03f      	beq.n	2e0e <spi_select_slave+0x252>
    2d8e:	4b44      	ldr	r3, [pc, #272]	; (2ea0 <spi_select_slave+0x2e4>)
    2d90:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    2d92:	2c00      	cmp	r4, #0
    2d94:	d052      	beq.n	2e3c <spi_select_slave+0x280>
    2d96:	4b42      	ldr	r3, [pc, #264]	; (2ea0 <spi_select_slave+0x2e4>)
    2d98:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2d9a:	6823      	ldr	r3, [r4, #0]
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d064      	beq.n	2e6a <spi_select_slave+0x2ae>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2da0:	6823      	ldr	r3, [r4, #0]
    2da2:	7e1b      	ldrb	r3, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2da4:	07db      	lsls	r3, r3, #31
    2da6:	d46a      	bmi.n	2e7e <spi_select_slave+0x2c2>
				if (!(module->receiver_enabled)) {
    2da8:	79e3      	ldrb	r3, [r4, #7]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d000      	beq.n	2db0 <spi_select_slave+0x1f4>
    2dae:	e15c      	b.n	306a <spi_select_slave+0x4ae>
    2db0:	4d3b      	ldr	r5, [pc, #236]	; (2ea0 <spi_select_slave+0x2e4>)
    2db2:	e0a6      	b.n	2f02 <spi_select_slave+0x346>
		Assert(false);
    2db4:	4b45      	ldr	r3, [pc, #276]	; (2ecc <spi_select_slave+0x310>)
    2db6:	9301      	str	r3, [sp, #4]
    2db8:	4b3b      	ldr	r3, [pc, #236]	; (2ea8 <spi_select_slave+0x2ec>)
    2dba:	9300      	str	r3, [sp, #0]
    2dbc:	2362      	movs	r3, #98	; 0x62
    2dbe:	33ff      	adds	r3, #255	; 0xff
    2dc0:	4a43      	ldr	r2, [pc, #268]	; (2ed0 <spi_select_slave+0x314>)
    2dc2:	2101      	movs	r1, #1
    2dc4:	4f3b      	ldr	r7, [pc, #236]	; (2eb4 <spi_select_slave+0x2f8>)
    2dc6:	47b8      	blx	r7
		return NULL;
    2dc8:	2300      	movs	r3, #0
    2dca:	e7d1      	b.n	2d70 <spi_select_slave+0x1b4>
	Assert(module);
    2dcc:	4b35      	ldr	r3, [pc, #212]	; (2ea4 <spi_select_slave+0x2e8>)
    2dce:	9301      	str	r3, [sp, #4]
    2dd0:	4b35      	ldr	r3, [pc, #212]	; (2ea8 <spi_select_slave+0x2ec>)
    2dd2:	9300      	str	r3, [sp, #0]
    2dd4:	4b43      	ldr	r3, [pc, #268]	; (2ee4 <spi_select_slave+0x328>)
    2dd6:	4a40      	ldr	r2, [pc, #256]	; (2ed8 <spi_select_slave+0x31c>)
    2dd8:	2101      	movs	r1, #1
    2dda:	4d36      	ldr	r5, [pc, #216]	; (2eb4 <spi_select_slave+0x2f8>)
    2ddc:	47a8      	blx	r5
    2dde:	4b30      	ldr	r3, [pc, #192]	; (2ea0 <spi_select_slave+0x2e4>)
    2de0:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2de2:	2800      	cmp	r0, #0
    2de4:	d1d0      	bne.n	2d88 <spi_select_slave+0x1cc>
    2de6:	6825      	ldr	r5, [r4, #0]
    2de8:	2d00      	cmp	r5, #0
    2dea:	d000      	beq.n	2dee <spi_select_slave+0x232>
    2dec:	e13f      	b.n	306e <spi_select_slave+0x4b2>
    2dee:	4b3e      	ldr	r3, [pc, #248]	; (2ee8 <spi_select_slave+0x32c>)
    2df0:	4a39      	ldr	r2, [pc, #228]	; (2ed8 <spi_select_slave+0x31c>)
    2df2:	4934      	ldr	r1, [pc, #208]	; (2ec4 <spi_select_slave+0x308>)
    2df4:	4831      	ldr	r0, [pc, #196]	; (2ebc <spi_select_slave+0x300>)
    2df6:	4c32      	ldr	r4, [pc, #200]	; (2ec0 <spi_select_slave+0x304>)
    2df8:	47a0      	blx	r4
    2dfa:	e7fe      	b.n	2dfa <spi_select_slave+0x23e>
	Assert(module);
    2dfc:	2c00      	cmp	r4, #0
    2dfe:	d1f2      	bne.n	2de6 <spi_select_slave+0x22a>
    2e00:	4b38      	ldr	r3, [pc, #224]	; (2ee4 <spi_select_slave+0x328>)
    2e02:	4a35      	ldr	r2, [pc, #212]	; (2ed8 <spi_select_slave+0x31c>)
    2e04:	4927      	ldr	r1, [pc, #156]	; (2ea4 <spi_select_slave+0x2e8>)
    2e06:	482d      	ldr	r0, [pc, #180]	; (2ebc <spi_select_slave+0x300>)
    2e08:	4c2d      	ldr	r4, [pc, #180]	; (2ec0 <spi_select_slave+0x304>)
    2e0a:	47a0      	blx	r4
    2e0c:	e7fe      	b.n	2e0c <spi_select_slave+0x250>
	Assert(module->hw);
    2e0e:	4b2d      	ldr	r3, [pc, #180]	; (2ec4 <spi_select_slave+0x308>)
    2e10:	9301      	str	r3, [sp, #4]
    2e12:	4b25      	ldr	r3, [pc, #148]	; (2ea8 <spi_select_slave+0x2ec>)
    2e14:	9300      	str	r3, [sp, #0]
    2e16:	4b34      	ldr	r3, [pc, #208]	; (2ee8 <spi_select_slave+0x32c>)
    2e18:	4a2f      	ldr	r2, [pc, #188]	; (2ed8 <spi_select_slave+0x31c>)
    2e1a:	2101      	movs	r1, #1
    2e1c:	4d25      	ldr	r5, [pc, #148]	; (2eb4 <spi_select_slave+0x2f8>)
    2e1e:	47a8      	blx	r5
	SercomSpi *const spi_module = &(module->hw->SPI);
    2e20:	6825      	ldr	r5, [r4, #0]
    2e22:	4b1f      	ldr	r3, [pc, #124]	; (2ea0 <spi_select_slave+0x2e4>)
    2e24:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    2e26:	2800      	cmp	r0, #0
    2e28:	d1b3      	bne.n	2d92 <spi_select_slave+0x1d6>
    2e2a:	2c00      	cmp	r4, #0
    2e2c:	d113      	bne.n	2e56 <spi_select_slave+0x29a>
    2e2e:	4b29      	ldr	r3, [pc, #164]	; (2ed4 <spi_select_slave+0x318>)
    2e30:	4a29      	ldr	r2, [pc, #164]	; (2ed8 <spi_select_slave+0x31c>)
    2e32:	491c      	ldr	r1, [pc, #112]	; (2ea4 <spi_select_slave+0x2e8>)
    2e34:	4821      	ldr	r0, [pc, #132]	; (2ebc <spi_select_slave+0x300>)
    2e36:	4c22      	ldr	r4, [pc, #136]	; (2ec0 <spi_select_slave+0x304>)
    2e38:	47a0      	blx	r4
    2e3a:	e7fe      	b.n	2e3a <spi_select_slave+0x27e>
    2e3c:	4b19      	ldr	r3, [pc, #100]	; (2ea4 <spi_select_slave+0x2e8>)
    2e3e:	9301      	str	r3, [sp, #4]
    2e40:	4b19      	ldr	r3, [pc, #100]	; (2ea8 <spi_select_slave+0x2ec>)
    2e42:	9300      	str	r3, [sp, #0]
    2e44:	4b23      	ldr	r3, [pc, #140]	; (2ed4 <spi_select_slave+0x318>)
    2e46:	4a24      	ldr	r2, [pc, #144]	; (2ed8 <spi_select_slave+0x31c>)
    2e48:	2101      	movs	r1, #1
    2e4a:	4f1a      	ldr	r7, [pc, #104]	; (2eb4 <spi_select_slave+0x2f8>)
    2e4c:	47b8      	blx	r7
    2e4e:	4b14      	ldr	r3, [pc, #80]	; (2ea0 <spi_select_slave+0x2e4>)
    2e50:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2e52:	2800      	cmp	r0, #0
    2e54:	d1a1      	bne.n	2d9a <spi_select_slave+0x1de>
    2e56:	6823      	ldr	r3, [r4, #0]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d1a1      	bne.n	2da0 <spi_select_slave+0x1e4>
    2e5c:	4b1f      	ldr	r3, [pc, #124]	; (2edc <spi_select_slave+0x320>)
    2e5e:	4a1e      	ldr	r2, [pc, #120]	; (2ed8 <spi_select_slave+0x31c>)
    2e60:	4918      	ldr	r1, [pc, #96]	; (2ec4 <spi_select_slave+0x308>)
    2e62:	4816      	ldr	r0, [pc, #88]	; (2ebc <spi_select_slave+0x300>)
    2e64:	4c16      	ldr	r4, [pc, #88]	; (2ec0 <spi_select_slave+0x304>)
    2e66:	47a0      	blx	r4
    2e68:	e7fe      	b.n	2e68 <spi_select_slave+0x2ac>
    2e6a:	4b16      	ldr	r3, [pc, #88]	; (2ec4 <spi_select_slave+0x308>)
    2e6c:	9301      	str	r3, [sp, #4]
    2e6e:	4b0e      	ldr	r3, [pc, #56]	; (2ea8 <spi_select_slave+0x2ec>)
    2e70:	9300      	str	r3, [sp, #0]
    2e72:	4b1a      	ldr	r3, [pc, #104]	; (2edc <spi_select_slave+0x320>)
    2e74:	4a18      	ldr	r2, [pc, #96]	; (2ed8 <spi_select_slave+0x31c>)
    2e76:	2101      	movs	r1, #1
    2e78:	4f0e      	ldr	r7, [pc, #56]	; (2eb4 <spi_select_slave+0x2f8>)
    2e7a:	47b8      	blx	r7
    2e7c:	e790      	b.n	2da0 <spi_select_slave+0x1e4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2e7e:	62ae      	str	r6, [r5, #40]	; 0x28
    2e80:	e792      	b.n	2da8 <spi_select_slave+0x1ec>
	Assert(module);
    2e82:	4b08      	ldr	r3, [pc, #32]	; (2ea4 <spi_select_slave+0x2e8>)
    2e84:	9301      	str	r3, [sp, #4]
    2e86:	4b08      	ldr	r3, [pc, #32]	; (2ea8 <spi_select_slave+0x2ec>)
    2e88:	9300      	str	r3, [sp, #0]
    2e8a:	4b18      	ldr	r3, [pc, #96]	; (2eec <spi_select_slave+0x330>)
    2e8c:	4a12      	ldr	r2, [pc, #72]	; (2ed8 <spi_select_slave+0x31c>)
    2e8e:	2101      	movs	r1, #1
    2e90:	4e08      	ldr	r6, [pc, #32]	; (2eb4 <spi_select_slave+0x2f8>)
    2e92:	47b0      	blx	r6
    2e94:	4b02      	ldr	r3, [pc, #8]	; (2ea0 <spi_select_slave+0x2e4>)
    2e96:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2e98:	2800      	cmp	r0, #0
    2e9a:	d137      	bne.n	2f0c <spi_select_slave+0x350>
    2e9c:	e02a      	b.n	2ef4 <spi_select_slave+0x338>
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	2000011c 	.word	0x2000011c
    2ea4:	00007094 	.word	0x00007094
    2ea8:	00006c40 	.word	0x00006c40
    2eac:	00000356 	.word	0x00000356
    2eb0:	00007068 	.word	0x00007068
    2eb4:	000017e1 	.word	0x000017e1
    2eb8:	0000709c 	.word	0x0000709c
    2ebc:	00006c58 	.word	0x00006c58
    2ec0:	00006055 	.word	0x00006055
    2ec4:	00006d80 	.word	0x00006d80
    2ec8:	00000357 	.word	0x00000357
    2ecc:	00006cac 	.word	0x00006cac
    2ed0:	00006c7c 	.word	0x00006c7c
    2ed4:	000004a1 	.word	0x000004a1
    2ed8:	00006d54 	.word	0x00006d54
    2edc:	000004a2 	.word	0x000004a2
    2ee0:	41004400 	.word	0x41004400
    2ee4:	000004e3 	.word	0x000004e3
    2ee8:	000004e4 	.word	0x000004e4
    2eec:	000004b9 	.word	0x000004b9
	Assert(module);
    2ef0:	2c00      	cmp	r4, #0
    2ef2:	d018      	beq.n	2f26 <spi_select_slave+0x36a>
	Assert(module->hw);
    2ef4:	6823      	ldr	r3, [r4, #0]
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d01c      	beq.n	2f34 <spi_select_slave+0x378>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2efa:	6823      	ldr	r3, [r4, #0]
    2efc:	7e1b      	ldrb	r3, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
    2efe:	075b      	lsls	r3, r3, #29
    2f00:	d41f      	bmi.n	2f42 <spi_select_slave+0x386>
    2f02:	6828      	ldr	r0, [r5, #0]
	Assert(module);
    2f04:	2800      	cmp	r0, #0
    2f06:	d0f3      	beq.n	2ef0 <spi_select_slave+0x334>
    2f08:	2c00      	cmp	r4, #0
    2f0a:	d0ba      	beq.n	2e82 <spi_select_slave+0x2c6>
	Assert(module->hw);
    2f0c:	6823      	ldr	r3, [r4, #0]
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d1f3      	bne.n	2efa <spi_select_slave+0x33e>
    2f12:	4b78      	ldr	r3, [pc, #480]	; (30f4 <spi_select_slave+0x538>)
    2f14:	9301      	str	r3, [sp, #4]
    2f16:	4b78      	ldr	r3, [pc, #480]	; (30f8 <spi_select_slave+0x53c>)
    2f18:	9300      	str	r3, [sp, #0]
    2f1a:	4b78      	ldr	r3, [pc, #480]	; (30fc <spi_select_slave+0x540>)
    2f1c:	4a78      	ldr	r2, [pc, #480]	; (3100 <spi_select_slave+0x544>)
    2f1e:	2101      	movs	r1, #1
    2f20:	4e78      	ldr	r6, [pc, #480]	; (3104 <spi_select_slave+0x548>)
    2f22:	47b0      	blx	r6
    2f24:	e7e9      	b.n	2efa <spi_select_slave+0x33e>
	Assert(module);
    2f26:	4b78      	ldr	r3, [pc, #480]	; (3108 <spi_select_slave+0x54c>)
    2f28:	4a75      	ldr	r2, [pc, #468]	; (3100 <spi_select_slave+0x544>)
    2f2a:	4978      	ldr	r1, [pc, #480]	; (310c <spi_select_slave+0x550>)
    2f2c:	4878      	ldr	r0, [pc, #480]	; (3110 <spi_select_slave+0x554>)
    2f2e:	4c79      	ldr	r4, [pc, #484]	; (3114 <spi_select_slave+0x558>)
    2f30:	47a0      	blx	r4
    2f32:	e7fe      	b.n	2f32 <spi_select_slave+0x376>
	Assert(module->hw);
    2f34:	4b71      	ldr	r3, [pc, #452]	; (30fc <spi_select_slave+0x540>)
    2f36:	4a72      	ldr	r2, [pc, #456]	; (3100 <spi_select_slave+0x544>)
    2f38:	496e      	ldr	r1, [pc, #440]	; (30f4 <spi_select_slave+0x538>)
    2f3a:	4875      	ldr	r0, [pc, #468]	; (3110 <spi_select_slave+0x554>)
    2f3c:	4c75      	ldr	r4, [pc, #468]	; (3114 <spi_select_slave+0x558>)
    2f3e:	47a0      	blx	r4
    2f40:	e7fe      	b.n	2f40 <spi_select_slave+0x384>
    2f42:	4b75      	ldr	r3, [pc, #468]	; (3118 <spi_select_slave+0x55c>)
    2f44:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    2f46:	2800      	cmp	r0, #0
    2f48:	d019      	beq.n	2f7e <spi_select_slave+0x3c2>
    2f4a:	2c00      	cmp	r4, #0
    2f4c:	d120      	bne.n	2f90 <spi_select_slave+0x3d4>
    2f4e:	4b6f      	ldr	r3, [pc, #444]	; (310c <spi_select_slave+0x550>)
    2f50:	9301      	str	r3, [sp, #4]
    2f52:	4b69      	ldr	r3, [pc, #420]	; (30f8 <spi_select_slave+0x53c>)
    2f54:	9300      	str	r3, [sp, #0]
    2f56:	4b71      	ldr	r3, [pc, #452]	; (311c <spi_select_slave+0x560>)
    2f58:	4a69      	ldr	r2, [pc, #420]	; (3100 <spi_select_slave+0x544>)
    2f5a:	2101      	movs	r1, #1
    2f5c:	4d69      	ldr	r5, [pc, #420]	; (3104 <spi_select_slave+0x548>)
    2f5e:	47a8      	blx	r5
    2f60:	4b6d      	ldr	r3, [pc, #436]	; (3118 <spi_select_slave+0x55c>)
    2f62:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2f64:	2800      	cmp	r0, #0
    2f66:	d113      	bne.n	2f90 <spi_select_slave+0x3d4>
    2f68:	6825      	ldr	r5, [r4, #0]
    2f6a:	2d00      	cmp	r5, #0
    2f6c:	d000      	beq.n	2f70 <spi_select_slave+0x3b4>
    2f6e:	e082      	b.n	3076 <spi_select_slave+0x4ba>
    2f70:	4b6b      	ldr	r3, [pc, #428]	; (3120 <spi_select_slave+0x564>)
    2f72:	4a63      	ldr	r2, [pc, #396]	; (3100 <spi_select_slave+0x544>)
    2f74:	495f      	ldr	r1, [pc, #380]	; (30f4 <spi_select_slave+0x538>)
    2f76:	4866      	ldr	r0, [pc, #408]	; (3110 <spi_select_slave+0x554>)
    2f78:	4c66      	ldr	r4, [pc, #408]	; (3114 <spi_select_slave+0x558>)
    2f7a:	47a0      	blx	r4
    2f7c:	e7fe      	b.n	2f7c <spi_select_slave+0x3c0>
	Assert(module);
    2f7e:	2c00      	cmp	r4, #0
    2f80:	d1f2      	bne.n	2f68 <spi_select_slave+0x3ac>
    2f82:	4b66      	ldr	r3, [pc, #408]	; (311c <spi_select_slave+0x560>)
    2f84:	4a5e      	ldr	r2, [pc, #376]	; (3100 <spi_select_slave+0x544>)
    2f86:	4961      	ldr	r1, [pc, #388]	; (310c <spi_select_slave+0x550>)
    2f88:	4861      	ldr	r0, [pc, #388]	; (3110 <spi_select_slave+0x554>)
    2f8a:	4c62      	ldr	r4, [pc, #392]	; (3114 <spi_select_slave+0x558>)
    2f8c:	47a0      	blx	r4
    2f8e:	e7fe      	b.n	2f8e <spi_select_slave+0x3d2>
	Assert(module->hw);
    2f90:	6825      	ldr	r5, [r4, #0]
    2f92:	2d00      	cmp	r5, #0
    2f94:	d172      	bne.n	307c <spi_select_slave+0x4c0>
    2f96:	4b57      	ldr	r3, [pc, #348]	; (30f4 <spi_select_slave+0x538>)
    2f98:	9301      	str	r3, [sp, #4]
    2f9a:	4b57      	ldr	r3, [pc, #348]	; (30f8 <spi_select_slave+0x53c>)
    2f9c:	9300      	str	r3, [sp, #0]
    2f9e:	4b60      	ldr	r3, [pc, #384]	; (3120 <spi_select_slave+0x564>)
    2fa0:	4a57      	ldr	r2, [pc, #348]	; (3100 <spi_select_slave+0x544>)
    2fa2:	2101      	movs	r1, #1
    2fa4:	4d57      	ldr	r5, [pc, #348]	; (3104 <spi_select_slave+0x548>)
    2fa6:	47a8      	blx	r5
	SercomSpi *const spi_module = &(module->hw->SPI);
    2fa8:	6825      	ldr	r5, [r4, #0]
    2faa:	4b5b      	ldr	r3, [pc, #364]	; (3118 <spi_select_slave+0x55c>)
    2fac:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    2fae:	2800      	cmp	r0, #0
    2fb0:	d166      	bne.n	3080 <spi_select_slave+0x4c4>
    2fb2:	2c00      	cmp	r4, #0
    2fb4:	d173      	bne.n	309e <spi_select_slave+0x4e2>
    2fb6:	4b54      	ldr	r3, [pc, #336]	; (3108 <spi_select_slave+0x54c>)
    2fb8:	4a51      	ldr	r2, [pc, #324]	; (3100 <spi_select_slave+0x544>)
    2fba:	4954      	ldr	r1, [pc, #336]	; (310c <spi_select_slave+0x550>)
    2fbc:	4854      	ldr	r0, [pc, #336]	; (3110 <spi_select_slave+0x554>)
    2fbe:	4c55      	ldr	r4, [pc, #340]	; (3114 <spi_select_slave+0x558>)
    2fc0:	47a0      	blx	r4
    2fc2:	e7fe      	b.n	2fc2 <spi_select_slave+0x406>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2fc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return STATUS_OK;
    2fc6:	2000      	movs	r0, #0
    2fc8:	e60e      	b.n	2be8 <spi_select_slave+0x2c>
				port_pin_set_output_level(slave->ss_pin, false);
    2fca:	782c      	ldrb	r4, [r5, #0]
	if (port_index < PORT_INST_NUM) {
    2fcc:	09e3      	lsrs	r3, r4, #7
    2fce:	d00f      	beq.n	2ff0 <spi_select_slave+0x434>
    2fd0:	4b51      	ldr	r3, [pc, #324]	; (3118 <spi_select_slave+0x55c>)
    2fd2:	6818      	ldr	r0, [r3, #0]
		Assert(false);
    2fd4:	2800      	cmp	r0, #0
    2fd6:	d017      	beq.n	3008 <spi_select_slave+0x44c>
    2fd8:	4b52      	ldr	r3, [pc, #328]	; (3124 <spi_select_slave+0x568>)
    2fda:	9301      	str	r3, [sp, #4]
    2fdc:	4b46      	ldr	r3, [pc, #280]	; (30f8 <spi_select_slave+0x53c>)
    2fde:	9300      	str	r3, [sp, #0]
    2fe0:	2362      	movs	r3, #98	; 0x62
    2fe2:	33ff      	adds	r3, #255	; 0xff
    2fe4:	4a50      	ldr	r2, [pc, #320]	; (3128 <spi_select_slave+0x56c>)
    2fe6:	2101      	movs	r1, #1
    2fe8:	4d46      	ldr	r5, [pc, #280]	; (3104 <spi_select_slave+0x548>)
    2fea:	47a8      	blx	r5
		return NULL;
    2fec:	2300      	movs	r3, #0
    2fee:	e004      	b.n	2ffa <spi_select_slave+0x43e>
		return &(ports[port_index]->Group[group_index]);
    2ff0:	0963      	lsrs	r3, r4, #5
    2ff2:	01db      	lsls	r3, r3, #7
    2ff4:	4a4d      	ldr	r2, [pc, #308]	; (312c <spi_select_slave+0x570>)
    2ff6:	4694      	mov	ip, r2
    2ff8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2ffa:	211f      	movs	r1, #31
    2ffc:	4021      	ands	r1, r4
    2ffe:	2201      	movs	r2, #1
    3000:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    3002:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    3004:	2000      	movs	r0, #0
    3006:	e5ef      	b.n	2be8 <spi_select_slave+0x2c>
		Assert(false);
    3008:	2362      	movs	r3, #98	; 0x62
    300a:	33ff      	adds	r3, #255	; 0xff
    300c:	4a46      	ldr	r2, [pc, #280]	; (3128 <spi_select_slave+0x56c>)
    300e:	4945      	ldr	r1, [pc, #276]	; (3124 <spi_select_slave+0x568>)
    3010:	483f      	ldr	r0, [pc, #252]	; (3110 <spi_select_slave+0x554>)
    3012:	4c40      	ldr	r4, [pc, #256]	; (3114 <spi_select_slave+0x558>)
    3014:	47a0      	blx	r4
    3016:	e7fe      	b.n	3016 <spi_select_slave+0x45a>
			port_pin_set_output_level(slave->ss_pin, true);
    3018:	782c      	ldrb	r4, [r5, #0]
	if (port_index < PORT_INST_NUM) {
    301a:	09e3      	lsrs	r3, r4, #7
    301c:	d00f      	beq.n	303e <spi_select_slave+0x482>
    301e:	4b3e      	ldr	r3, [pc, #248]	; (3118 <spi_select_slave+0x55c>)
    3020:	6818      	ldr	r0, [r3, #0]
		Assert(false);
    3022:	2800      	cmp	r0, #0
    3024:	d017      	beq.n	3056 <spi_select_slave+0x49a>
    3026:	4b3f      	ldr	r3, [pc, #252]	; (3124 <spi_select_slave+0x568>)
    3028:	9301      	str	r3, [sp, #4]
    302a:	4b33      	ldr	r3, [pc, #204]	; (30f8 <spi_select_slave+0x53c>)
    302c:	9300      	str	r3, [sp, #0]
    302e:	2362      	movs	r3, #98	; 0x62
    3030:	33ff      	adds	r3, #255	; 0xff
    3032:	4a3d      	ldr	r2, [pc, #244]	; (3128 <spi_select_slave+0x56c>)
    3034:	2101      	movs	r1, #1
    3036:	4d33      	ldr	r5, [pc, #204]	; (3104 <spi_select_slave+0x548>)
    3038:	47a8      	blx	r5
		return NULL;
    303a:	2300      	movs	r3, #0
    303c:	e004      	b.n	3048 <spi_select_slave+0x48c>
		return &(ports[port_index]->Group[group_index]);
    303e:	0963      	lsrs	r3, r4, #5
    3040:	01db      	lsls	r3, r3, #7
    3042:	4a3a      	ldr	r2, [pc, #232]	; (312c <spi_select_slave+0x570>)
    3044:	4694      	mov	ip, r2
    3046:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3048:	211f      	movs	r1, #31
    304a:	4021      	ands	r1, r4
    304c:	2201      	movs	r2, #1
    304e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3050:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    3052:	2000      	movs	r0, #0
    3054:	e5c8      	b.n	2be8 <spi_select_slave+0x2c>
		Assert(false);
    3056:	2362      	movs	r3, #98	; 0x62
    3058:	33ff      	adds	r3, #255	; 0xff
    305a:	4a33      	ldr	r2, [pc, #204]	; (3128 <spi_select_slave+0x56c>)
    305c:	4931      	ldr	r1, [pc, #196]	; (3124 <spi_select_slave+0x568>)
    305e:	482c      	ldr	r0, [pc, #176]	; (3110 <spi_select_slave+0x554>)
    3060:	4c2c      	ldr	r4, [pc, #176]	; (3114 <spi_select_slave+0x558>)
    3062:	47a0      	blx	r4
    3064:	e7fe      	b.n	3064 <spi_select_slave+0x4a8>
    3066:	2000      	movs	r0, #0
    3068:	e5be      	b.n	2be8 <spi_select_slave+0x2c>
    306a:	2000      	movs	r0, #0
    306c:	e5bc      	b.n	2be8 <spi_select_slave+0x2c>
	Assert(module);
    306e:	2c00      	cmp	r4, #0
    3070:	d000      	beq.n	3074 <spi_select_slave+0x4b8>
    3072:	e695      	b.n	2da0 <spi_select_slave+0x1e4>
    3074:	e6db      	b.n	2e2e <spi_select_slave+0x272>
	Assert(module);
    3076:	2c00      	cmp	r4, #0
    3078:	d129      	bne.n	30ce <spi_select_slave+0x512>
    307a:	e79c      	b.n	2fb6 <spi_select_slave+0x3fa>
    307c:	4b26      	ldr	r3, [pc, #152]	; (3118 <spi_select_slave+0x55c>)
    307e:	6818      	ldr	r0, [r3, #0]
    3080:	2c00      	cmp	r4, #0
    3082:	d116      	bne.n	30b2 <spi_select_slave+0x4f6>
    3084:	4b21      	ldr	r3, [pc, #132]	; (310c <spi_select_slave+0x550>)
    3086:	9301      	str	r3, [sp, #4]
    3088:	4b1b      	ldr	r3, [pc, #108]	; (30f8 <spi_select_slave+0x53c>)
    308a:	9300      	str	r3, [sp, #0]
    308c:	4b1e      	ldr	r3, [pc, #120]	; (3108 <spi_select_slave+0x54c>)
    308e:	4a1c      	ldr	r2, [pc, #112]	; (3100 <spi_select_slave+0x544>)
    3090:	2101      	movs	r1, #1
    3092:	4e1c      	ldr	r6, [pc, #112]	; (3104 <spi_select_slave+0x548>)
    3094:	47b0      	blx	r6
    3096:	4b20      	ldr	r3, [pc, #128]	; (3118 <spi_select_slave+0x55c>)
    3098:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    309a:	2800      	cmp	r0, #0
    309c:	d10b      	bne.n	30b6 <spi_select_slave+0x4fa>
    309e:	6823      	ldr	r3, [r4, #0]
    30a0:	2b00      	cmp	r3, #0
    30a2:	d114      	bne.n	30ce <spi_select_slave+0x512>
    30a4:	4b15      	ldr	r3, [pc, #84]	; (30fc <spi_select_slave+0x540>)
    30a6:	4a16      	ldr	r2, [pc, #88]	; (3100 <spi_select_slave+0x544>)
    30a8:	4912      	ldr	r1, [pc, #72]	; (30f4 <spi_select_slave+0x538>)
    30aa:	4819      	ldr	r0, [pc, #100]	; (3110 <spi_select_slave+0x554>)
    30ac:	4c19      	ldr	r4, [pc, #100]	; (3114 <spi_select_slave+0x558>)
    30ae:	47a0      	blx	r4
    30b0:	e7fe      	b.n	30b0 <spi_select_slave+0x4f4>
    30b2:	4b19      	ldr	r3, [pc, #100]	; (3118 <spi_select_slave+0x55c>)
    30b4:	6818      	ldr	r0, [r3, #0]
    30b6:	6823      	ldr	r3, [r4, #0]
    30b8:	2b00      	cmp	r3, #0
    30ba:	d108      	bne.n	30ce <spi_select_slave+0x512>
    30bc:	4b0d      	ldr	r3, [pc, #52]	; (30f4 <spi_select_slave+0x538>)
    30be:	9301      	str	r3, [sp, #4]
    30c0:	4b0d      	ldr	r3, [pc, #52]	; (30f8 <spi_select_slave+0x53c>)
    30c2:	9300      	str	r3, [sp, #0]
    30c4:	4b0d      	ldr	r3, [pc, #52]	; (30fc <spi_select_slave+0x540>)
    30c6:	4a0e      	ldr	r2, [pc, #56]	; (3100 <spi_select_slave+0x544>)
    30c8:	2101      	movs	r1, #1
    30ca:	4e0e      	ldr	r6, [pc, #56]	; (3104 <spi_select_slave+0x548>)
    30cc:	47b0      	blx	r6
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    30ce:	6823      	ldr	r3, [r4, #0]
    30d0:	7e1b      	ldrb	r3, [r3, #24]
    30d2:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    30d4:	075b      	lsls	r3, r3, #29
    30d6:	d400      	bmi.n	30da <spi_select_slave+0x51e>
    30d8:	e586      	b.n	2be8 <spi_select_slave+0x2c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    30da:	8b6b      	ldrh	r3, [r5, #26]
    30dc:	075b      	lsls	r3, r3, #29
    30de:	d501      	bpl.n	30e4 <spi_select_slave+0x528>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    30e0:	2304      	movs	r3, #4
    30e2:	836b      	strh	r3, [r5, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30e4:	79a3      	ldrb	r3, [r4, #6]
    30e6:	2b01      	cmp	r3, #1
    30e8:	d000      	beq.n	30ec <spi_select_slave+0x530>
    30ea:	e76b      	b.n	2fc4 <spi_select_slave+0x408>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    30ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    30ee:	2000      	movs	r0, #0
    30f0:	e57a      	b.n	2be8 <spi_select_slave+0x2c>
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	00006d80 	.word	0x00006d80
    30f8:	00006c40 	.word	0x00006c40
    30fc:	000004ba 	.word	0x000004ba
    3100:	00006d54 	.word	0x00006d54
    3104:	000017e1 	.word	0x000017e1
    3108:	000004b9 	.word	0x000004b9
    310c:	00007094 	.word	0x00007094
    3110:	00006c58 	.word	0x00006c58
    3114:	00006055 	.word	0x00006055
    3118:	2000011c 	.word	0x2000011c
    311c:	00000511 	.word	0x00000511
    3120:	00000512 	.word	0x00000512
    3124:	00006cac 	.word	0x00006cac
    3128:	00006c7c 	.word	0x00006c7c
    312c:	41004400 	.word	0x41004400

00003130 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3130:	b5f0      	push	{r4, r5, r6, r7, lr}
    3132:	46de      	mov	lr, fp
    3134:	4657      	mov	r7, sl
    3136:	464e      	mov	r6, r9
    3138:	4645      	mov	r5, r8
    313a:	b5e0      	push	{r5, r6, r7, lr}
    313c:	b085      	sub	sp, #20
    313e:	0004      	movs	r4, r0
    3140:	4689      	mov	r9, r1
    3142:	0015      	movs	r5, r2
    3144:	4bc1      	ldr	r3, [pc, #772]	; (344c <spi_write_buffer_wait+0x31c>)
    3146:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    3148:	2800      	cmp	r0, #0
    314a:	d01b      	beq.n	3184 <spi_write_buffer_wait+0x54>
    314c:	2c00      	cmp	r4, #0
    314e:	d00f      	beq.n	3170 <spi_write_buffer_wait+0x40>

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    3150:	2338      	movs	r3, #56	; 0x38
    3152:	5ce3      	ldrb	r3, [r4, r3]
    3154:	2b05      	cmp	r3, #5
    3156:	d100      	bne.n	315a <spi_write_buffer_wait+0x2a>
    3158:	e210      	b.n	357c <spi_write_buffer_wait+0x44c>
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    315a:	2017      	movs	r0, #23
	if (length == 0) {
    315c:	2d00      	cmp	r5, #0
    315e:	d100      	bne.n	3162 <spi_write_buffer_wait+0x32>
    3160:	e20d      	b.n	357e <spi_write_buffer_wait+0x44e>

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    3162:	3d01      	subs	r5, #1
    3164:	b2ab      	uxth	r3, r5
    3166:	9303      	str	r3, [sp, #12]
    3168:	2700      	movs	r7, #0
    316a:	4bb8      	ldr	r3, [pc, #736]	; (344c <spi_write_buffer_wait+0x31c>)
    316c:	4698      	mov	r8, r3
    316e:	e029      	b.n	31c4 <spi_write_buffer_wait+0x94>
	Assert(module);
    3170:	4bb7      	ldr	r3, [pc, #732]	; (3450 <spi_write_buffer_wait+0x320>)
    3172:	9301      	str	r3, [sp, #4]
    3174:	4bb7      	ldr	r3, [pc, #732]	; (3454 <spi_write_buffer_wait+0x324>)
    3176:	9300      	str	r3, [sp, #0]
    3178:	4bb7      	ldr	r3, [pc, #732]	; (3458 <spi_write_buffer_wait+0x328>)
    317a:	4ab8      	ldr	r2, [pc, #736]	; (345c <spi_write_buffer_wait+0x32c>)
    317c:	2101      	movs	r1, #1
    317e:	4eb8      	ldr	r6, [pc, #736]	; (3460 <spi_write_buffer_wait+0x330>)
    3180:	47b0      	blx	r6
    3182:	e7e5      	b.n	3150 <spi_write_buffer_wait+0x20>
    3184:	2c00      	cmp	r4, #0
    3186:	d1e3      	bne.n	3150 <spi_write_buffer_wait+0x20>
    3188:	4bb3      	ldr	r3, [pc, #716]	; (3458 <spi_write_buffer_wait+0x328>)
    318a:	4ab4      	ldr	r2, [pc, #720]	; (345c <spi_write_buffer_wait+0x32c>)
    318c:	49b0      	ldr	r1, [pc, #704]	; (3450 <spi_write_buffer_wait+0x320>)
    318e:	48b5      	ldr	r0, [pc, #724]	; (3464 <spi_write_buffer_wait+0x334>)
    3190:	4cb5      	ldr	r4, [pc, #724]	; (3468 <spi_write_buffer_wait+0x338>)
    3192:	47a0      	blx	r4
    3194:	e7fe      	b.n	3194 <spi_write_buffer_wait+0x64>
	Assert(module);
    3196:	4bae      	ldr	r3, [pc, #696]	; (3450 <spi_write_buffer_wait+0x320>)
    3198:	9301      	str	r3, [sp, #4]
    319a:	4bae      	ldr	r3, [pc, #696]	; (3454 <spi_write_buffer_wait+0x324>)
    319c:	9300      	str	r3, [sp, #0]
    319e:	4bb3      	ldr	r3, [pc, #716]	; (346c <spi_write_buffer_wait+0x33c>)
    31a0:	4ab3      	ldr	r2, [pc, #716]	; (3470 <spi_write_buffer_wait+0x340>)
    31a2:	2101      	movs	r1, #1
    31a4:	4eae      	ldr	r6, [pc, #696]	; (3460 <spi_write_buffer_wait+0x330>)
    31a6:	47b0      	blx	r6
    31a8:	4ba8      	ldr	r3, [pc, #672]	; (344c <spi_write_buffer_wait+0x31c>)
    31aa:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    31ac:	2800      	cmp	r0, #0
    31ae:	d10f      	bne.n	31d0 <spi_write_buffer_wait+0xa0>
    31b0:	e001      	b.n	31b6 <spi_write_buffer_wait+0x86>
	Assert(module);
    31b2:	2c00      	cmp	r4, #0
    31b4:	d019      	beq.n	31ea <spi_write_buffer_wait+0xba>
	Assert(module->hw);
    31b6:	6823      	ldr	r3, [r4, #0]
    31b8:	2b00      	cmp	r3, #0
    31ba:	d01d      	beq.n	31f8 <spi_write_buffer_wait+0xc8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    31bc:	6823      	ldr	r3, [r4, #0]
    31be:	7e1b      	ldrb	r3, [r3, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    31c0:	07db      	lsls	r3, r3, #31
    31c2:	d420      	bmi.n	3206 <spi_write_buffer_wait+0xd6>
    31c4:	4643      	mov	r3, r8
    31c6:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    31c8:	2800      	cmp	r0, #0
    31ca:	d0f2      	beq.n	31b2 <spi_write_buffer_wait+0x82>
    31cc:	2c00      	cmp	r4, #0
    31ce:	d0e2      	beq.n	3196 <spi_write_buffer_wait+0x66>
	Assert(module->hw);
    31d0:	6823      	ldr	r3, [r4, #0]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d1f2      	bne.n	31bc <spi_write_buffer_wait+0x8c>
    31d6:	4ba7      	ldr	r3, [pc, #668]	; (3474 <spi_write_buffer_wait+0x344>)
    31d8:	9301      	str	r3, [sp, #4]
    31da:	4b9e      	ldr	r3, [pc, #632]	; (3454 <spi_write_buffer_wait+0x324>)
    31dc:	9300      	str	r3, [sp, #0]
    31de:	4ba6      	ldr	r3, [pc, #664]	; (3478 <spi_write_buffer_wait+0x348>)
    31e0:	4aa3      	ldr	r2, [pc, #652]	; (3470 <spi_write_buffer_wait+0x340>)
    31e2:	2101      	movs	r1, #1
    31e4:	4e9e      	ldr	r6, [pc, #632]	; (3460 <spi_write_buffer_wait+0x330>)
    31e6:	47b0      	blx	r6
    31e8:	e7e8      	b.n	31bc <spi_write_buffer_wait+0x8c>
	Assert(module);
    31ea:	4ba0      	ldr	r3, [pc, #640]	; (346c <spi_write_buffer_wait+0x33c>)
    31ec:	4aa0      	ldr	r2, [pc, #640]	; (3470 <spi_write_buffer_wait+0x340>)
    31ee:	4998      	ldr	r1, [pc, #608]	; (3450 <spi_write_buffer_wait+0x320>)
    31f0:	489c      	ldr	r0, [pc, #624]	; (3464 <spi_write_buffer_wait+0x334>)
    31f2:	4c9d      	ldr	r4, [pc, #628]	; (3468 <spi_write_buffer_wait+0x338>)
    31f4:	47a0      	blx	r4
    31f6:	e7fe      	b.n	31f6 <spi_write_buffer_wait+0xc6>
	Assert(module->hw);
    31f8:	4b9f      	ldr	r3, [pc, #636]	; (3478 <spi_write_buffer_wait+0x348>)
    31fa:	4a9d      	ldr	r2, [pc, #628]	; (3470 <spi_write_buffer_wait+0x340>)
    31fc:	499d      	ldr	r1, [pc, #628]	; (3474 <spi_write_buffer_wait+0x344>)
    31fe:	4899      	ldr	r0, [pc, #612]	; (3464 <spi_write_buffer_wait+0x334>)
    3200:	4c99      	ldr	r4, [pc, #612]	; (3468 <spi_write_buffer_wait+0x338>)
    3202:	47a0      	blx	r4
    3204:	e7fe      	b.n	3204 <spi_write_buffer_wait+0xd4>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    3206:	1c7b      	adds	r3, r7, #1
    3208:	b29b      	uxth	r3, r3
    320a:	464a      	mov	r2, r9
    320c:	5dd6      	ldrb	r6, [r2, r7]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    320e:	79a2      	ldrb	r2, [r4, #6]
    3210:	2a01      	cmp	r2, #1
    3212:	d01e      	beq.n	3252 <spi_write_buffer_wait+0x122>
		uint16_t data_to_send = tx_data[tx_pos++];
    3214:	b2b6      	uxth	r6, r6
    3216:	001f      	movs	r7, r3
    3218:	4b8c      	ldr	r3, [pc, #560]	; (344c <spi_write_buffer_wait+0x31c>)
    321a:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    321c:	2800      	cmp	r0, #0
    321e:	d02d      	beq.n	327c <spi_write_buffer_wait+0x14c>
    3220:	2c00      	cmp	r4, #0
    3222:	d01d      	beq.n	3260 <spi_write_buffer_wait+0x130>
	Assert(module->hw);
    3224:	6823      	ldr	r3, [r4, #0]
    3226:	469a      	mov	sl, r3
    3228:	2b00      	cmp	r3, #0
    322a:	d037      	beq.n	329c <spi_write_buffer_wait+0x16c>
    322c:	4b87      	ldr	r3, [pc, #540]	; (344c <spi_write_buffer_wait+0x31c>)
    322e:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    3230:	2c00      	cmp	r4, #0
    3232:	d052      	beq.n	32da <spi_write_buffer_wait+0x1aa>
    3234:	4b85      	ldr	r3, [pc, #532]	; (344c <spi_write_buffer_wait+0x31c>)
    3236:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    3238:	6823      	ldr	r3, [r4, #0]
    323a:	2b00      	cmp	r3, #0
    323c:	d064      	beq.n	3308 <spi_write_buffer_wait+0x1d8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    323e:	6823      	ldr	r3, [r4, #0]
    3240:	7e1b      	ldrb	r3, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3242:	07db      	lsls	r3, r3, #31
    3244:	d46a      	bmi.n	331c <spi_write_buffer_wait+0x1ec>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    3246:	79e3      	ldrb	r3, [r4, #7]
    3248:	2b00      	cmp	r3, #0
    324a:	d100      	bne.n	324e <spi_write_buffer_wait+0x11e>
    324c:	e0c6      	b.n	33dc <spi_write_buffer_wait+0x2ac>
    324e:	4e7f      	ldr	r6, [pc, #508]	; (344c <spi_write_buffer_wait+0x31c>)
    3250:	e080      	b.n	3354 <spi_write_buffer_wait+0x224>
			data_to_send |= (tx_data[tx_pos++] << 8);
    3252:	3702      	adds	r7, #2
    3254:	b2bf      	uxth	r7, r7
    3256:	464a      	mov	r2, r9
    3258:	5cd3      	ldrb	r3, [r2, r3]
    325a:	021b      	lsls	r3, r3, #8
    325c:	431e      	orrs	r6, r3
    325e:	e7db      	b.n	3218 <spi_write_buffer_wait+0xe8>
	Assert(module);
    3260:	4b7b      	ldr	r3, [pc, #492]	; (3450 <spi_write_buffer_wait+0x320>)
    3262:	9301      	str	r3, [sp, #4]
    3264:	4b7b      	ldr	r3, [pc, #492]	; (3454 <spi_write_buffer_wait+0x324>)
    3266:	9300      	str	r3, [sp, #0]
    3268:	4b84      	ldr	r3, [pc, #528]	; (347c <spi_write_buffer_wait+0x34c>)
    326a:	4a81      	ldr	r2, [pc, #516]	; (3470 <spi_write_buffer_wait+0x340>)
    326c:	2101      	movs	r1, #1
    326e:	4d7c      	ldr	r5, [pc, #496]	; (3460 <spi_write_buffer_wait+0x330>)
    3270:	47a8      	blx	r5
    3272:	4b76      	ldr	r3, [pc, #472]	; (344c <spi_write_buffer_wait+0x31c>)
    3274:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    3276:	2800      	cmp	r0, #0
    3278:	d1d4      	bne.n	3224 <spi_write_buffer_wait+0xf4>
    327a:	e001      	b.n	3280 <spi_write_buffer_wait+0x150>
	Assert(module);
    327c:	2c00      	cmp	r4, #0
    327e:	d006      	beq.n	328e <spi_write_buffer_wait+0x15e>
	Assert(module->hw);
    3280:	6823      	ldr	r3, [r4, #0]
    3282:	469a      	mov	sl, r3
    3284:	2b00      	cmp	r3, #0
    3286:	d021      	beq.n	32cc <spi_write_buffer_wait+0x19c>
	Assert(module);
    3288:	2c00      	cmp	r4, #0
    328a:	d1d8      	bne.n	323e <spi_write_buffer_wait+0x10e>
    328c:	e017      	b.n	32be <spi_write_buffer_wait+0x18e>
	Assert(module);
    328e:	4b7b      	ldr	r3, [pc, #492]	; (347c <spi_write_buffer_wait+0x34c>)
    3290:	4a77      	ldr	r2, [pc, #476]	; (3470 <spi_write_buffer_wait+0x340>)
    3292:	496f      	ldr	r1, [pc, #444]	; (3450 <spi_write_buffer_wait+0x320>)
    3294:	4873      	ldr	r0, [pc, #460]	; (3464 <spi_write_buffer_wait+0x334>)
    3296:	4c74      	ldr	r4, [pc, #464]	; (3468 <spi_write_buffer_wait+0x338>)
    3298:	47a0      	blx	r4
    329a:	e7fe      	b.n	329a <spi_write_buffer_wait+0x16a>
	Assert(module->hw);
    329c:	4b75      	ldr	r3, [pc, #468]	; (3474 <spi_write_buffer_wait+0x344>)
    329e:	9301      	str	r3, [sp, #4]
    32a0:	4b6c      	ldr	r3, [pc, #432]	; (3454 <spi_write_buffer_wait+0x324>)
    32a2:	9300      	str	r3, [sp, #0]
    32a4:	4b76      	ldr	r3, [pc, #472]	; (3480 <spi_write_buffer_wait+0x350>)
    32a6:	4a72      	ldr	r2, [pc, #456]	; (3470 <spi_write_buffer_wait+0x340>)
    32a8:	2101      	movs	r1, #1
    32aa:	4d6d      	ldr	r5, [pc, #436]	; (3460 <spi_write_buffer_wait+0x330>)
    32ac:	47a8      	blx	r5
	SercomSpi *const spi_module = &(module->hw->SPI);
    32ae:	6823      	ldr	r3, [r4, #0]
    32b0:	469a      	mov	sl, r3
    32b2:	4b66      	ldr	r3, [pc, #408]	; (344c <spi_write_buffer_wait+0x31c>)
    32b4:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    32b6:	2800      	cmp	r0, #0
    32b8:	d1ba      	bne.n	3230 <spi_write_buffer_wait+0x100>
    32ba:	2c00      	cmp	r4, #0
    32bc:	d11a      	bne.n	32f4 <spi_write_buffer_wait+0x1c4>
    32be:	4b6b      	ldr	r3, [pc, #428]	; (346c <spi_write_buffer_wait+0x33c>)
    32c0:	4a6b      	ldr	r2, [pc, #428]	; (3470 <spi_write_buffer_wait+0x340>)
    32c2:	4963      	ldr	r1, [pc, #396]	; (3450 <spi_write_buffer_wait+0x320>)
    32c4:	4867      	ldr	r0, [pc, #412]	; (3464 <spi_write_buffer_wait+0x334>)
    32c6:	4c68      	ldr	r4, [pc, #416]	; (3468 <spi_write_buffer_wait+0x338>)
    32c8:	47a0      	blx	r4
    32ca:	e7fe      	b.n	32ca <spi_write_buffer_wait+0x19a>
	Assert(module->hw);
    32cc:	4b6c      	ldr	r3, [pc, #432]	; (3480 <spi_write_buffer_wait+0x350>)
    32ce:	4a68      	ldr	r2, [pc, #416]	; (3470 <spi_write_buffer_wait+0x340>)
    32d0:	4968      	ldr	r1, [pc, #416]	; (3474 <spi_write_buffer_wait+0x344>)
    32d2:	4864      	ldr	r0, [pc, #400]	; (3464 <spi_write_buffer_wait+0x334>)
    32d4:	4c64      	ldr	r4, [pc, #400]	; (3468 <spi_write_buffer_wait+0x338>)
    32d6:	47a0      	blx	r4
    32d8:	e7fe      	b.n	32d8 <spi_write_buffer_wait+0x1a8>
	Assert(module);
    32da:	4b5d      	ldr	r3, [pc, #372]	; (3450 <spi_write_buffer_wait+0x320>)
    32dc:	9301      	str	r3, [sp, #4]
    32de:	4b5d      	ldr	r3, [pc, #372]	; (3454 <spi_write_buffer_wait+0x324>)
    32e0:	9300      	str	r3, [sp, #0]
    32e2:	4b62      	ldr	r3, [pc, #392]	; (346c <spi_write_buffer_wait+0x33c>)
    32e4:	4a62      	ldr	r2, [pc, #392]	; (3470 <spi_write_buffer_wait+0x340>)
    32e6:	2101      	movs	r1, #1
    32e8:	4d5d      	ldr	r5, [pc, #372]	; (3460 <spi_write_buffer_wait+0x330>)
    32ea:	47a8      	blx	r5
    32ec:	4b57      	ldr	r3, [pc, #348]	; (344c <spi_write_buffer_wait+0x31c>)
    32ee:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    32f0:	2800      	cmp	r0, #0
    32f2:	d1a1      	bne.n	3238 <spi_write_buffer_wait+0x108>
    32f4:	6823      	ldr	r3, [r4, #0]
    32f6:	2b00      	cmp	r3, #0
    32f8:	d1a1      	bne.n	323e <spi_write_buffer_wait+0x10e>
    32fa:	4b5f      	ldr	r3, [pc, #380]	; (3478 <spi_write_buffer_wait+0x348>)
    32fc:	4a5c      	ldr	r2, [pc, #368]	; (3470 <spi_write_buffer_wait+0x340>)
    32fe:	495d      	ldr	r1, [pc, #372]	; (3474 <spi_write_buffer_wait+0x344>)
    3300:	4858      	ldr	r0, [pc, #352]	; (3464 <spi_write_buffer_wait+0x334>)
    3302:	4c59      	ldr	r4, [pc, #356]	; (3468 <spi_write_buffer_wait+0x338>)
    3304:	47a0      	blx	r4
    3306:	e7fe      	b.n	3306 <spi_write_buffer_wait+0x1d6>
    3308:	4b5a      	ldr	r3, [pc, #360]	; (3474 <spi_write_buffer_wait+0x344>)
    330a:	9301      	str	r3, [sp, #4]
    330c:	4b51      	ldr	r3, [pc, #324]	; (3454 <spi_write_buffer_wait+0x324>)
    330e:	9300      	str	r3, [sp, #0]
    3310:	4b59      	ldr	r3, [pc, #356]	; (3478 <spi_write_buffer_wait+0x348>)
    3312:	4a57      	ldr	r2, [pc, #348]	; (3470 <spi_write_buffer_wait+0x340>)
    3314:	2101      	movs	r1, #1
    3316:	4d52      	ldr	r5, [pc, #328]	; (3460 <spi_write_buffer_wait+0x330>)
    3318:	47a8      	blx	r5
    331a:	e790      	b.n	323e <spi_write_buffer_wait+0x10e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    331c:	05f6      	lsls	r6, r6, #23
    331e:	0df6      	lsrs	r6, r6, #23
    3320:	4653      	mov	r3, sl
    3322:	629e      	str	r6, [r3, #40]	; 0x28
    3324:	e78f      	b.n	3246 <spi_write_buffer_wait+0x116>
	Assert(module);
    3326:	4b4a      	ldr	r3, [pc, #296]	; (3450 <spi_write_buffer_wait+0x320>)
    3328:	9301      	str	r3, [sp, #4]
    332a:	4b4a      	ldr	r3, [pc, #296]	; (3454 <spi_write_buffer_wait+0x324>)
    332c:	9300      	str	r3, [sp, #0]
    332e:	4b55      	ldr	r3, [pc, #340]	; (3484 <spi_write_buffer_wait+0x354>)
    3330:	4a4f      	ldr	r2, [pc, #316]	; (3470 <spi_write_buffer_wait+0x340>)
    3332:	2101      	movs	r1, #1
    3334:	4d4a      	ldr	r5, [pc, #296]	; (3460 <spi_write_buffer_wait+0x330>)
    3336:	47a8      	blx	r5
    3338:	4b44      	ldr	r3, [pc, #272]	; (344c <spi_write_buffer_wait+0x31c>)
    333a:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    333c:	2800      	cmp	r0, #0
    333e:	d10e      	bne.n	335e <spi_write_buffer_wait+0x22e>
    3340:	e001      	b.n	3346 <spi_write_buffer_wait+0x216>
	Assert(module);
    3342:	2c00      	cmp	r4, #0
    3344:	d018      	beq.n	3378 <spi_write_buffer_wait+0x248>
	Assert(module->hw);
    3346:	6823      	ldr	r3, [r4, #0]
    3348:	2b00      	cmp	r3, #0
    334a:	d01c      	beq.n	3386 <spi_write_buffer_wait+0x256>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    334c:	6823      	ldr	r3, [r4, #0]
    334e:	7e1b      	ldrb	r3, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    3350:	075b      	lsls	r3, r3, #29
    3352:	d41f      	bmi.n	3394 <spi_write_buffer_wait+0x264>
    3354:	6830      	ldr	r0, [r6, #0]
	Assert(module);
    3356:	2800      	cmp	r0, #0
    3358:	d0f3      	beq.n	3342 <spi_write_buffer_wait+0x212>
    335a:	2c00      	cmp	r4, #0
    335c:	d0e3      	beq.n	3326 <spi_write_buffer_wait+0x1f6>
	Assert(module->hw);
    335e:	6823      	ldr	r3, [r4, #0]
    3360:	2b00      	cmp	r3, #0
    3362:	d1f3      	bne.n	334c <spi_write_buffer_wait+0x21c>
    3364:	4b43      	ldr	r3, [pc, #268]	; (3474 <spi_write_buffer_wait+0x344>)
    3366:	9301      	str	r3, [sp, #4]
    3368:	4b3a      	ldr	r3, [pc, #232]	; (3454 <spi_write_buffer_wait+0x324>)
    336a:	9300      	str	r3, [sp, #0]
    336c:	4b46      	ldr	r3, [pc, #280]	; (3488 <spi_write_buffer_wait+0x358>)
    336e:	4a40      	ldr	r2, [pc, #256]	; (3470 <spi_write_buffer_wait+0x340>)
    3370:	2101      	movs	r1, #1
    3372:	4d3b      	ldr	r5, [pc, #236]	; (3460 <spi_write_buffer_wait+0x330>)
    3374:	47a8      	blx	r5
    3376:	e7e9      	b.n	334c <spi_write_buffer_wait+0x21c>
	Assert(module);
    3378:	4b42      	ldr	r3, [pc, #264]	; (3484 <spi_write_buffer_wait+0x354>)
    337a:	4a3d      	ldr	r2, [pc, #244]	; (3470 <spi_write_buffer_wait+0x340>)
    337c:	4934      	ldr	r1, [pc, #208]	; (3450 <spi_write_buffer_wait+0x320>)
    337e:	4839      	ldr	r0, [pc, #228]	; (3464 <spi_write_buffer_wait+0x334>)
    3380:	4c39      	ldr	r4, [pc, #228]	; (3468 <spi_write_buffer_wait+0x338>)
    3382:	47a0      	blx	r4
    3384:	e7fe      	b.n	3384 <spi_write_buffer_wait+0x254>
	Assert(module->hw);
    3386:	4b40      	ldr	r3, [pc, #256]	; (3488 <spi_write_buffer_wait+0x358>)
    3388:	4a39      	ldr	r2, [pc, #228]	; (3470 <spi_write_buffer_wait+0x340>)
    338a:	493a      	ldr	r1, [pc, #232]	; (3474 <spi_write_buffer_wait+0x344>)
    338c:	4835      	ldr	r0, [pc, #212]	; (3464 <spi_write_buffer_wait+0x334>)
    338e:	4c36      	ldr	r4, [pc, #216]	; (3468 <spi_write_buffer_wait+0x338>)
    3390:	47a0      	blx	r4
    3392:	e7fe      	b.n	3392 <spi_write_buffer_wait+0x262>
    3394:	4b2d      	ldr	r3, [pc, #180]	; (344c <spi_write_buffer_wait+0x31c>)
    3396:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    3398:	2800      	cmp	r0, #0
    339a:	d100      	bne.n	339e <spi_write_buffer_wait+0x26e>
    339c:	e07c      	b.n	3498 <spi_write_buffer_wait+0x368>
    339e:	2c00      	cmp	r4, #0
    33a0:	d03b      	beq.n	341a <spi_write_buffer_wait+0x2ea>
	Assert(module->hw);
    33a2:	6826      	ldr	r6, [r4, #0]
    33a4:	2e00      	cmp	r6, #0
    33a6:	d100      	bne.n	33aa <spi_write_buffer_wait+0x27a>
    33a8:	e07f      	b.n	34aa <spi_write_buffer_wait+0x37a>
    33aa:	4b28      	ldr	r3, [pc, #160]	; (344c <spi_write_buffer_wait+0x31c>)
    33ac:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    33ae:	2c00      	cmp	r4, #0
    33b0:	d100      	bne.n	33b4 <spi_write_buffer_wait+0x284>
    33b2:	e092      	b.n	34da <spi_write_buffer_wait+0x3aa>
    33b4:	4b25      	ldr	r3, [pc, #148]	; (344c <spi_write_buffer_wait+0x31c>)
    33b6:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    33b8:	6823      	ldr	r3, [r4, #0]
    33ba:	2b00      	cmp	r3, #0
    33bc:	d100      	bne.n	33c0 <spi_write_buffer_wait+0x290>
    33be:	e0a5      	b.n	350c <spi_write_buffer_wait+0x3dc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    33c0:	6823      	ldr	r3, [r4, #0]
    33c2:	7e1b      	ldrb	r3, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    33c4:	075b      	lsls	r3, r3, #29
    33c6:	d509      	bpl.n	33dc <spi_write_buffer_wait+0x2ac>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    33c8:	8b73      	ldrh	r3, [r6, #26]
    33ca:	075b      	lsls	r3, r3, #29
    33cc:	d501      	bpl.n	33d2 <spi_write_buffer_wait+0x2a2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    33ce:	2304      	movs	r3, #4
    33d0:	8373      	strh	r3, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    33d2:	79a3      	ldrb	r3, [r4, #6]
    33d4:	2b01      	cmp	r3, #1
    33d6:	d100      	bne.n	33da <spi_write_buffer_wait+0x2aa>
    33d8:	e0a2      	b.n	3520 <spi_write_buffer_wait+0x3f0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    33da:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	while (length--) {
    33dc:	9d03      	ldr	r5, [sp, #12]
    33de:	3d01      	subs	r5, #1
    33e0:	b2aa      	uxth	r2, r5
    33e2:	9203      	str	r2, [sp, #12]
    33e4:	4b29      	ldr	r3, [pc, #164]	; (348c <spi_write_buffer_wait+0x35c>)
    33e6:	429a      	cmp	r2, r3
    33e8:	d000      	beq.n	33ec <spi_write_buffer_wait+0x2bc>
    33ea:	e6eb      	b.n	31c4 <spi_write_buffer_wait+0x94>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    33ec:	7963      	ldrb	r3, [r4, #5]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    33ee:	2000      	movs	r0, #0
	if (module->mode == SPI_MODE_MASTER) {
    33f0:	2b01      	cmp	r3, #1
    33f2:	d000      	beq.n	33f6 <spi_write_buffer_wait+0x2c6>
    33f4:	e0c3      	b.n	357e <spi_write_buffer_wait+0x44e>
    33f6:	4d15      	ldr	r5, [pc, #84]	; (344c <spi_write_buffer_wait+0x31c>)
    33f8:	6828      	ldr	r0, [r5, #0]
	Assert(module);
    33fa:	2800      	cmp	r0, #0
    33fc:	d100      	bne.n	3400 <spi_write_buffer_wait+0x2d0>
    33fe:	e0aa      	b.n	3556 <spi_write_buffer_wait+0x426>
    3400:	2c00      	cmp	r4, #0
    3402:	d100      	bne.n	3406 <spi_write_buffer_wait+0x2d6>
    3404:	e08e      	b.n	3524 <spi_write_buffer_wait+0x3f4>
	Assert(module->hw);
    3406:	6823      	ldr	r3, [r4, #0]
    3408:	2b00      	cmp	r3, #0
    340a:	d100      	bne.n	340e <spi_write_buffer_wait+0x2de>
    340c:	e0ac      	b.n	3568 <spi_write_buffer_wait+0x438>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    340e:	6823      	ldr	r3, [r4, #0]
    3410:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    3412:	079b      	lsls	r3, r3, #30
    3414:	d5f0      	bpl.n	33f8 <spi_write_buffer_wait+0x2c8>
	return STATUS_OK;
    3416:	2000      	movs	r0, #0
    3418:	e0b1      	b.n	357e <spi_write_buffer_wait+0x44e>
	Assert(module);
    341a:	4b0d      	ldr	r3, [pc, #52]	; (3450 <spi_write_buffer_wait+0x320>)
    341c:	9301      	str	r3, [sp, #4]
    341e:	4b0d      	ldr	r3, [pc, #52]	; (3454 <spi_write_buffer_wait+0x324>)
    3420:	9300      	str	r3, [sp, #0]
    3422:	4b1b      	ldr	r3, [pc, #108]	; (3490 <spi_write_buffer_wait+0x360>)
    3424:	4a12      	ldr	r2, [pc, #72]	; (3470 <spi_write_buffer_wait+0x340>)
    3426:	2101      	movs	r1, #1
    3428:	4e0d      	ldr	r6, [pc, #52]	; (3460 <spi_write_buffer_wait+0x330>)
    342a:	47b0      	blx	r6
    342c:	4b07      	ldr	r3, [pc, #28]	; (344c <spi_write_buffer_wait+0x31c>)
    342e:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    3430:	2800      	cmp	r0, #0
    3432:	d1b6      	bne.n	33a2 <spi_write_buffer_wait+0x272>
    3434:	6826      	ldr	r6, [r4, #0]
    3436:	2e00      	cmp	r6, #0
    3438:	d000      	beq.n	343c <spi_write_buffer_wait+0x30c>
    343a:	e0a7      	b.n	358c <spi_write_buffer_wait+0x45c>
    343c:	4b15      	ldr	r3, [pc, #84]	; (3494 <spi_write_buffer_wait+0x364>)
    343e:	4a0c      	ldr	r2, [pc, #48]	; (3470 <spi_write_buffer_wait+0x340>)
    3440:	490c      	ldr	r1, [pc, #48]	; (3474 <spi_write_buffer_wait+0x344>)
    3442:	4808      	ldr	r0, [pc, #32]	; (3464 <spi_write_buffer_wait+0x334>)
    3444:	4c08      	ldr	r4, [pc, #32]	; (3468 <spi_write_buffer_wait+0x338>)
    3446:	47a0      	blx	r4
    3448:	e7fe      	b.n	3448 <spi_write_buffer_wait+0x318>
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	2000011c 	.word	0x2000011c
    3450:	00007094 	.word	0x00007094
    3454:	00006c40 	.word	0x00006c40
    3458:	000003a1 	.word	0x000003a1
    345c:	00007068 	.word	0x00007068
    3460:	000017e1 	.word	0x000017e1
    3464:	00006c58 	.word	0x00006c58
    3468:	00006055 	.word	0x00006055
    346c:	000004a1 	.word	0x000004a1
    3470:	00006d54 	.word	0x00006d54
    3474:	00006d80 	.word	0x00006d80
    3478:	000004a2 	.word	0x000004a2
    347c:	000004e3 	.word	0x000004e3
    3480:	000004e4 	.word	0x000004e4
    3484:	000004b9 	.word	0x000004b9
    3488:	000004ba 	.word	0x000004ba
    348c:	0000ffff 	.word	0x0000ffff
    3490:	00000511 	.word	0x00000511
    3494:	00000512 	.word	0x00000512
	Assert(module);
    3498:	2c00      	cmp	r4, #0
    349a:	d1cb      	bne.n	3434 <spi_write_buffer_wait+0x304>
    349c:	4b3d      	ldr	r3, [pc, #244]	; (3594 <spi_write_buffer_wait+0x464>)
    349e:	4a3e      	ldr	r2, [pc, #248]	; (3598 <spi_write_buffer_wait+0x468>)
    34a0:	493e      	ldr	r1, [pc, #248]	; (359c <spi_write_buffer_wait+0x46c>)
    34a2:	483f      	ldr	r0, [pc, #252]	; (35a0 <spi_write_buffer_wait+0x470>)
    34a4:	4c3f      	ldr	r4, [pc, #252]	; (35a4 <spi_write_buffer_wait+0x474>)
    34a6:	47a0      	blx	r4
    34a8:	e7fe      	b.n	34a8 <spi_write_buffer_wait+0x378>
	Assert(module->hw);
    34aa:	4b3f      	ldr	r3, [pc, #252]	; (35a8 <spi_write_buffer_wait+0x478>)
    34ac:	9301      	str	r3, [sp, #4]
    34ae:	4b3f      	ldr	r3, [pc, #252]	; (35ac <spi_write_buffer_wait+0x47c>)
    34b0:	9300      	str	r3, [sp, #0]
    34b2:	4b3f      	ldr	r3, [pc, #252]	; (35b0 <spi_write_buffer_wait+0x480>)
    34b4:	4a38      	ldr	r2, [pc, #224]	; (3598 <spi_write_buffer_wait+0x468>)
    34b6:	2101      	movs	r1, #1
    34b8:	4e3e      	ldr	r6, [pc, #248]	; (35b4 <spi_write_buffer_wait+0x484>)
    34ba:	47b0      	blx	r6
	SercomSpi *const spi_module = &(module->hw->SPI);
    34bc:	6826      	ldr	r6, [r4, #0]
    34be:	4b3e      	ldr	r3, [pc, #248]	; (35b8 <spi_write_buffer_wait+0x488>)
    34c0:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    34c2:	2800      	cmp	r0, #0
    34c4:	d000      	beq.n	34c8 <spi_write_buffer_wait+0x398>
    34c6:	e772      	b.n	33ae <spi_write_buffer_wait+0x27e>
    34c8:	2c00      	cmp	r4, #0
    34ca:	d114      	bne.n	34f6 <spi_write_buffer_wait+0x3c6>
    34cc:	4b3b      	ldr	r3, [pc, #236]	; (35bc <spi_write_buffer_wait+0x48c>)
    34ce:	4a32      	ldr	r2, [pc, #200]	; (3598 <spi_write_buffer_wait+0x468>)
    34d0:	4932      	ldr	r1, [pc, #200]	; (359c <spi_write_buffer_wait+0x46c>)
    34d2:	4833      	ldr	r0, [pc, #204]	; (35a0 <spi_write_buffer_wait+0x470>)
    34d4:	4c33      	ldr	r4, [pc, #204]	; (35a4 <spi_write_buffer_wait+0x474>)
    34d6:	47a0      	blx	r4
    34d8:	e7fe      	b.n	34d8 <spi_write_buffer_wait+0x3a8>
    34da:	4b30      	ldr	r3, [pc, #192]	; (359c <spi_write_buffer_wait+0x46c>)
    34dc:	9301      	str	r3, [sp, #4]
    34de:	4b33      	ldr	r3, [pc, #204]	; (35ac <spi_write_buffer_wait+0x47c>)
    34e0:	9300      	str	r3, [sp, #0]
    34e2:	4b36      	ldr	r3, [pc, #216]	; (35bc <spi_write_buffer_wait+0x48c>)
    34e4:	4a2c      	ldr	r2, [pc, #176]	; (3598 <spi_write_buffer_wait+0x468>)
    34e6:	2101      	movs	r1, #1
    34e8:	4d32      	ldr	r5, [pc, #200]	; (35b4 <spi_write_buffer_wait+0x484>)
    34ea:	47a8      	blx	r5
    34ec:	4b32      	ldr	r3, [pc, #200]	; (35b8 <spi_write_buffer_wait+0x488>)
    34ee:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    34f0:	2800      	cmp	r0, #0
    34f2:	d000      	beq.n	34f6 <spi_write_buffer_wait+0x3c6>
    34f4:	e760      	b.n	33b8 <spi_write_buffer_wait+0x288>
    34f6:	6823      	ldr	r3, [r4, #0]
    34f8:	2b00      	cmp	r3, #0
    34fa:	d000      	beq.n	34fe <spi_write_buffer_wait+0x3ce>
    34fc:	e760      	b.n	33c0 <spi_write_buffer_wait+0x290>
    34fe:	4b30      	ldr	r3, [pc, #192]	; (35c0 <spi_write_buffer_wait+0x490>)
    3500:	4a25      	ldr	r2, [pc, #148]	; (3598 <spi_write_buffer_wait+0x468>)
    3502:	4929      	ldr	r1, [pc, #164]	; (35a8 <spi_write_buffer_wait+0x478>)
    3504:	4826      	ldr	r0, [pc, #152]	; (35a0 <spi_write_buffer_wait+0x470>)
    3506:	4c27      	ldr	r4, [pc, #156]	; (35a4 <spi_write_buffer_wait+0x474>)
    3508:	47a0      	blx	r4
    350a:	e7fe      	b.n	350a <spi_write_buffer_wait+0x3da>
    350c:	4b26      	ldr	r3, [pc, #152]	; (35a8 <spi_write_buffer_wait+0x478>)
    350e:	9301      	str	r3, [sp, #4]
    3510:	4b26      	ldr	r3, [pc, #152]	; (35ac <spi_write_buffer_wait+0x47c>)
    3512:	9300      	str	r3, [sp, #0]
    3514:	4b2a      	ldr	r3, [pc, #168]	; (35c0 <spi_write_buffer_wait+0x490>)
    3516:	4a20      	ldr	r2, [pc, #128]	; (3598 <spi_write_buffer_wait+0x468>)
    3518:	2101      	movs	r1, #1
    351a:	4d26      	ldr	r5, [pc, #152]	; (35b4 <spi_write_buffer_wait+0x484>)
    351c:	47a8      	blx	r5
    351e:	e74f      	b.n	33c0 <spi_write_buffer_wait+0x290>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3520:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3522:	e75b      	b.n	33dc <spi_write_buffer_wait+0x2ac>
	Assert(module);
    3524:	4b1d      	ldr	r3, [pc, #116]	; (359c <spi_write_buffer_wait+0x46c>)
    3526:	9301      	str	r3, [sp, #4]
    3528:	4b20      	ldr	r3, [pc, #128]	; (35ac <spi_write_buffer_wait+0x47c>)
    352a:	9300      	str	r3, [sp, #0]
    352c:	4b25      	ldr	r3, [pc, #148]	; (35c4 <spi_write_buffer_wait+0x494>)
    352e:	4a1a      	ldr	r2, [pc, #104]	; (3598 <spi_write_buffer_wait+0x468>)
    3530:	2101      	movs	r1, #1
    3532:	4e20      	ldr	r6, [pc, #128]	; (35b4 <spi_write_buffer_wait+0x484>)
    3534:	47b0      	blx	r6
    3536:	4b20      	ldr	r3, [pc, #128]	; (35b8 <spi_write_buffer_wait+0x488>)
    3538:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    353a:	2800      	cmp	r0, #0
    353c:	d000      	beq.n	3540 <spi_write_buffer_wait+0x410>
    353e:	e762      	b.n	3406 <spi_write_buffer_wait+0x2d6>
    3540:	6823      	ldr	r3, [r4, #0]
    3542:	2b00      	cmp	r3, #0
    3544:	d000      	beq.n	3548 <spi_write_buffer_wait+0x418>
    3546:	e762      	b.n	340e <spi_write_buffer_wait+0x2de>
    3548:	4b1f      	ldr	r3, [pc, #124]	; (35c8 <spi_write_buffer_wait+0x498>)
    354a:	4a13      	ldr	r2, [pc, #76]	; (3598 <spi_write_buffer_wait+0x468>)
    354c:	4916      	ldr	r1, [pc, #88]	; (35a8 <spi_write_buffer_wait+0x478>)
    354e:	4814      	ldr	r0, [pc, #80]	; (35a0 <spi_write_buffer_wait+0x470>)
    3550:	4c14      	ldr	r4, [pc, #80]	; (35a4 <spi_write_buffer_wait+0x474>)
    3552:	47a0      	blx	r4
    3554:	e7fe      	b.n	3554 <spi_write_buffer_wait+0x424>
	Assert(module);
    3556:	2c00      	cmp	r4, #0
    3558:	d1f2      	bne.n	3540 <spi_write_buffer_wait+0x410>
    355a:	4b1a      	ldr	r3, [pc, #104]	; (35c4 <spi_write_buffer_wait+0x494>)
    355c:	4a0e      	ldr	r2, [pc, #56]	; (3598 <spi_write_buffer_wait+0x468>)
    355e:	490f      	ldr	r1, [pc, #60]	; (359c <spi_write_buffer_wait+0x46c>)
    3560:	480f      	ldr	r0, [pc, #60]	; (35a0 <spi_write_buffer_wait+0x470>)
    3562:	4c10      	ldr	r4, [pc, #64]	; (35a4 <spi_write_buffer_wait+0x474>)
    3564:	47a0      	blx	r4
    3566:	e7fe      	b.n	3566 <spi_write_buffer_wait+0x436>
	Assert(module->hw);
    3568:	4b0f      	ldr	r3, [pc, #60]	; (35a8 <spi_write_buffer_wait+0x478>)
    356a:	9301      	str	r3, [sp, #4]
    356c:	4b0f      	ldr	r3, [pc, #60]	; (35ac <spi_write_buffer_wait+0x47c>)
    356e:	9300      	str	r3, [sp, #0]
    3570:	4b15      	ldr	r3, [pc, #84]	; (35c8 <spi_write_buffer_wait+0x498>)
    3572:	4a09      	ldr	r2, [pc, #36]	; (3598 <spi_write_buffer_wait+0x468>)
    3574:	2101      	movs	r1, #1
    3576:	4e0f      	ldr	r6, [pc, #60]	; (35b4 <spi_write_buffer_wait+0x484>)
    3578:	47b0      	blx	r6
    357a:	e748      	b.n	340e <spi_write_buffer_wait+0x2de>
		return STATUS_BUSY;
    357c:	2005      	movs	r0, #5
}
    357e:	b005      	add	sp, #20
    3580:	bc3c      	pop	{r2, r3, r4, r5}
    3582:	4690      	mov	r8, r2
    3584:	4699      	mov	r9, r3
    3586:	46a2      	mov	sl, r4
    3588:	46ab      	mov	fp, r5
    358a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Assert(module);
    358c:	2c00      	cmp	r4, #0
    358e:	d000      	beq.n	3592 <spi_write_buffer_wait+0x462>
    3590:	e716      	b.n	33c0 <spi_write_buffer_wait+0x290>
    3592:	e79b      	b.n	34cc <spi_write_buffer_wait+0x39c>
    3594:	00000511 	.word	0x00000511
    3598:	00006d54 	.word	0x00006d54
    359c:	00007094 	.word	0x00007094
    35a0:	00006c58 	.word	0x00006c58
    35a4:	00006055 	.word	0x00006055
    35a8:	00006d80 	.word	0x00006d80
    35ac:	00006c40 	.word	0x00006c40
    35b0:	00000512 	.word	0x00000512
    35b4:	000017e1 	.word	0x000017e1
    35b8:	2000011c 	.word	0x2000011c
    35bc:	000004b9 	.word	0x000004b9
    35c0:	000004ba 	.word	0x000004ba
    35c4:	00000489 	.word	0x00000489
    35c8:	0000048a 	.word	0x0000048a

000035cc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    35cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    35ce:	0080      	lsls	r0, r0, #2
    35d0:	4b70      	ldr	r3, [pc, #448]	; (3794 <_spi_interrupt_handler+0x1c8>)
    35d2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    35d4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    35d6:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    35d8:	5ce7      	ldrb	r7, [r4, r3]
    35da:	2236      	movs	r2, #54	; 0x36
    35dc:	5ca2      	ldrb	r2, [r4, r2]
    35de:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    35e0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    35e2:	7db5      	ldrb	r5, [r6, #22]
    35e4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    35e6:	07eb      	lsls	r3, r5, #31
    35e8:	d502      	bpl.n	35f0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    35ea:	7963      	ldrb	r3, [r4, #5]
    35ec:	2b01      	cmp	r3, #1
    35ee:	d01e      	beq.n	362e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    35f0:	076b      	lsls	r3, r5, #29
    35f2:	d511      	bpl.n	3618 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    35f4:	8b73      	ldrh	r3, [r6, #26]
    35f6:	075b      	lsls	r3, r3, #29
    35f8:	d55a      	bpl.n	36b0 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    35fa:	7a63      	ldrb	r3, [r4, #9]
    35fc:	2b01      	cmp	r3, #1
    35fe:	d008      	beq.n	3612 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3600:	221e      	movs	r2, #30
    3602:	2338      	movs	r3, #56	; 0x38
    3604:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3606:	3b35      	subs	r3, #53	; 0x35
    3608:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    360a:	3302      	adds	r3, #2
    360c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    360e:	073b      	lsls	r3, r7, #28
    3610:	d44a      	bmi.n	36a8 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3612:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3614:	2304      	movs	r3, #4
    3616:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3618:	07ab      	lsls	r3, r5, #30
    361a:	d503      	bpl.n	3624 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    361c:	7963      	ldrb	r3, [r4, #5]
    361e:	2b01      	cmp	r3, #1
    3620:	d100      	bne.n	3624 <_spi_interrupt_handler+0x58>
    3622:	e097      	b.n	3754 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3624:	b26d      	sxtb	r5, r5
    3626:	2d00      	cmp	r5, #0
    3628:	da00      	bge.n	362c <_spi_interrupt_handler+0x60>
    362a:	e0a9      	b.n	3780 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    362c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    362e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3630:	2b00      	cmp	r3, #0
    3632:	d022      	beq.n	367a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    3634:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    3636:	2b00      	cmp	r3, #0
    3638:	d0da      	beq.n	35f0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    363a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    363c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    363e:	7813      	ldrb	r3, [r2, #0]
    3640:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    3642:	1c50      	adds	r0, r2, #1
    3644:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3646:	79a0      	ldrb	r0, [r4, #6]
    3648:	2801      	cmp	r0, #1
    364a:	d027      	beq.n	369c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    364c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    364e:	05db      	lsls	r3, r3, #23
    3650:	0ddb      	lsrs	r3, r3, #23
    3652:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    3654:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3656:	3b01      	subs	r3, #1
    3658:	b29b      	uxth	r3, r3
    365a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    365c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    365e:	b29b      	uxth	r3, r3
    3660:	2b00      	cmp	r3, #0
    3662:	d1c5      	bne.n	35f0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3664:	3301      	adds	r3, #1
    3666:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    3668:	7a63      	ldrb	r3, [r4, #9]
    366a:	2b01      	cmp	r3, #1
    366c:	d1c0      	bne.n	35f0 <_spi_interrupt_handler+0x24>
    366e:	79e3      	ldrb	r3, [r4, #7]
    3670:	2b00      	cmp	r3, #0
    3672:	d1bd      	bne.n	35f0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3674:	3302      	adds	r3, #2
    3676:	75b3      	strb	r3, [r6, #22]
    3678:	e7ba      	b.n	35f0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    367a:	4b47      	ldr	r3, [pc, #284]	; (3798 <_spi_interrupt_handler+0x1cc>)
    367c:	881b      	ldrh	r3, [r3, #0]
    367e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    3680:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3682:	3b01      	subs	r3, #1
    3684:	b29b      	uxth	r3, r3
    3686:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    3688:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    368a:	b29b      	uxth	r3, r3
    368c:	2b00      	cmp	r3, #0
    368e:	d101      	bne.n	3694 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3690:	3301      	adds	r3, #1
    3692:	7533      	strb	r3, [r6, #20]
		if (0
    3694:	7963      	ldrb	r3, [r4, #5]
    3696:	2b01      	cmp	r3, #1
    3698:	d0cc      	beq.n	3634 <_spi_interrupt_handler+0x68>
    369a:	e7a9      	b.n	35f0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    369c:	7850      	ldrb	r0, [r2, #1]
    369e:	0200      	lsls	r0, r0, #8
    36a0:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    36a2:	3202      	adds	r2, #2
    36a4:	62e2      	str	r2, [r4, #44]	; 0x2c
    36a6:	e7d2      	b.n	364e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    36a8:	0020      	movs	r0, r4
    36aa:	69a3      	ldr	r3, [r4, #24]
    36ac:	4798      	blx	r3
    36ae:	e7b0      	b.n	3612 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    36b0:	7a63      	ldrb	r3, [r4, #9]
    36b2:	2b01      	cmp	r3, #1
    36b4:	d028      	beq.n	3708 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    36b6:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    36b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36ba:	05db      	lsls	r3, r3, #23
    36bc:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    36be:	b2da      	uxtb	r2, r3
    36c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    36c2:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    36c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    36c6:	1c51      	adds	r1, r2, #1
    36c8:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    36ca:	79a1      	ldrb	r1, [r4, #6]
    36cc:	2901      	cmp	r1, #1
    36ce:	d034      	beq.n	373a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    36d0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    36d2:	3b01      	subs	r3, #1
    36d4:	b29b      	uxth	r3, r3
    36d6:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    36d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    36da:	b29b      	uxth	r3, r3
    36dc:	2b00      	cmp	r3, #0
    36de:	d000      	beq.n	36e2 <_spi_interrupt_handler+0x116>
    36e0:	e79a      	b.n	3618 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    36e2:	2200      	movs	r2, #0
    36e4:	3338      	adds	r3, #56	; 0x38
    36e6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    36e8:	3b34      	subs	r3, #52	; 0x34
    36ea:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    36ec:	7a63      	ldrb	r3, [r4, #9]
    36ee:	2b02      	cmp	r3, #2
    36f0:	d029      	beq.n	3746 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    36f2:	7a63      	ldrb	r3, [r4, #9]
    36f4:	2b00      	cmp	r3, #0
    36f6:	d000      	beq.n	36fa <_spi_interrupt_handler+0x12e>
    36f8:	e78e      	b.n	3618 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    36fa:	07bb      	lsls	r3, r7, #30
    36fc:	d400      	bmi.n	3700 <_spi_interrupt_handler+0x134>
    36fe:	e78b      	b.n	3618 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3700:	0020      	movs	r0, r4
    3702:	6923      	ldr	r3, [r4, #16]
    3704:	4798      	blx	r3
    3706:	e787      	b.n	3618 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3708:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    370c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    370e:	3b01      	subs	r3, #1
    3710:	b29b      	uxth	r3, r3
    3712:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    3714:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3716:	b29b      	uxth	r3, r3
    3718:	2b00      	cmp	r3, #0
    371a:	d000      	beq.n	371e <_spi_interrupt_handler+0x152>
    371c:	e77c      	b.n	3618 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    371e:	3304      	adds	r3, #4
    3720:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    3722:	2200      	movs	r2, #0
    3724:	3334      	adds	r3, #52	; 0x34
    3726:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    3728:	3b35      	subs	r3, #53	; 0x35
    372a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    372c:	07fb      	lsls	r3, r7, #31
    372e:	d400      	bmi.n	3732 <_spi_interrupt_handler+0x166>
    3730:	e772      	b.n	3618 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3732:	0020      	movs	r0, r4
    3734:	68e3      	ldr	r3, [r4, #12]
    3736:	4798      	blx	r3
    3738:	e76e      	b.n	3618 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    373a:	0a1b      	lsrs	r3, r3, #8
    373c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    373e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3740:	3301      	adds	r3, #1
    3742:	62a3      	str	r3, [r4, #40]	; 0x28
    3744:	e7c4      	b.n	36d0 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    3746:	077b      	lsls	r3, r7, #29
    3748:	d400      	bmi.n	374c <_spi_interrupt_handler+0x180>
    374a:	e765      	b.n	3618 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    374c:	0020      	movs	r0, r4
    374e:	6963      	ldr	r3, [r4, #20]
    3750:	4798      	blx	r3
    3752:	e761      	b.n	3618 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3754:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3756:	2b01      	cmp	r3, #1
    3758:	d000      	beq.n	375c <_spi_interrupt_handler+0x190>
    375a:	e763      	b.n	3624 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    375c:	79e3      	ldrb	r3, [r4, #7]
    375e:	2b00      	cmp	r3, #0
    3760:	d000      	beq.n	3764 <_spi_interrupt_handler+0x198>
    3762:	e75f      	b.n	3624 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3764:	3302      	adds	r3, #2
    3766:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    3768:	3301      	adds	r3, #1
    376a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    376c:	2200      	movs	r2, #0
    376e:	3335      	adds	r3, #53	; 0x35
    3770:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3772:	07fb      	lsls	r3, r7, #31
    3774:	d400      	bmi.n	3778 <_spi_interrupt_handler+0x1ac>
    3776:	e755      	b.n	3624 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3778:	0020      	movs	r0, r4
    377a:	68e3      	ldr	r3, [r4, #12]
    377c:	4798      	blx	r3
    377e:	e751      	b.n	3624 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3780:	2380      	movs	r3, #128	; 0x80
    3782:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3784:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3786:	067b      	lsls	r3, r7, #25
    3788:	d400      	bmi.n	378c <_spi_interrupt_handler+0x1c0>
    378a:	e74f      	b.n	362c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    378c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    378e:	0020      	movs	r0, r4
    3790:	4798      	blx	r3
}
    3792:	e74b      	b.n	362c <_spi_interrupt_handler+0x60>
    3794:	200009bc 	.word	0x200009bc
    3798:	200009d4 	.word	0x200009d4

0000379c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    379c:	b5f0      	push	{r4, r5, r6, r7, lr}
    379e:	46de      	mov	lr, fp
    37a0:	4657      	mov	r7, sl
    37a2:	464e      	mov	r6, r9
    37a4:	4645      	mov	r5, r8
    37a6:	b5e0      	push	{r5, r6, r7, lr}
    37a8:	b091      	sub	sp, #68	; 0x44
    37aa:	0004      	movs	r4, r0
    37ac:	000e      	movs	r6, r1
    37ae:	0015      	movs	r5, r2
    37b0:	4bbf      	ldr	r3, [pc, #764]	; (3ab0 <usart_init+0x314>)
    37b2:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    37b4:	2800      	cmp	r0, #0
    37b6:	d026      	beq.n	3806 <usart_init+0x6a>
    37b8:	2c00      	cmp	r4, #0
    37ba:	d015      	beq.n	37e8 <usart_init+0x4c>
	Assert(hw);
    37bc:	2e00      	cmp	r6, #0
    37be:	d038      	beq.n	3832 <usart_init+0x96>
    37c0:	4bbb      	ldr	r3, [pc, #748]	; (3ab0 <usart_init+0x314>)
    37c2:	6818      	ldr	r0, [r3, #0]
	Assert(config);
    37c4:	2d00      	cmp	r5, #0
    37c6:	d04b      	beq.n	3860 <usart_init+0xc4>

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    37c8:	6026      	str	r6, [r4, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    37ca:	0030      	movs	r0, r6
    37cc:	4bb9      	ldr	r3, [pc, #740]	; (3ab4 <usart_init+0x318>)
    37ce:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    37d0:	6832      	ldr	r2, [r6, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    37d2:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    37d4:	07d2      	lsls	r2, r2, #31
    37d6:	d54e      	bpl.n	3876 <usart_init+0xda>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    37d8:	0018      	movs	r0, r3
    37da:	b011      	add	sp, #68	; 0x44
    37dc:	bc3c      	pop	{r2, r3, r4, r5}
    37de:	4690      	mov	r8, r2
    37e0:	4699      	mov	r9, r3
    37e2:	46a2      	mov	sl, r4
    37e4:	46ab      	mov	fp, r5
    37e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Assert(module);
    37e8:	4bb3      	ldr	r3, [pc, #716]	; (3ab8 <usart_init+0x31c>)
    37ea:	9301      	str	r3, [sp, #4]
    37ec:	4bb3      	ldr	r3, [pc, #716]	; (3abc <usart_init+0x320>)
    37ee:	9300      	str	r3, [sp, #0]
    37f0:	2346      	movs	r3, #70	; 0x46
    37f2:	33ff      	adds	r3, #255	; 0xff
    37f4:	4ab2      	ldr	r2, [pc, #712]	; (3ac0 <usart_init+0x324>)
    37f6:	2101      	movs	r1, #1
    37f8:	4fb2      	ldr	r7, [pc, #712]	; (3ac4 <usart_init+0x328>)
    37fa:	47b8      	blx	r7
    37fc:	4bac      	ldr	r3, [pc, #688]	; (3ab0 <usart_init+0x314>)
    37fe:	6818      	ldr	r0, [r3, #0]
	Assert(hw);
    3800:	2800      	cmp	r0, #0
    3802:	d1db      	bne.n	37bc <usart_init+0x20>
    3804:	e001      	b.n	380a <usart_init+0x6e>
	Assert(module);
    3806:	2c00      	cmp	r4, #0
    3808:	d00b      	beq.n	3822 <usart_init+0x86>
	Assert(hw);
    380a:	2e00      	cmp	r6, #0
    380c:	d020      	beq.n	3850 <usart_init+0xb4>
	Assert(config);
    380e:	2d00      	cmp	r5, #0
    3810:	d1da      	bne.n	37c8 <usart_init+0x2c>
    3812:	2348      	movs	r3, #72	; 0x48
    3814:	33ff      	adds	r3, #255	; 0xff
    3816:	4aaa      	ldr	r2, [pc, #680]	; (3ac0 <usart_init+0x324>)
    3818:	49ab      	ldr	r1, [pc, #684]	; (3ac8 <usart_init+0x32c>)
    381a:	48ac      	ldr	r0, [pc, #688]	; (3acc <usart_init+0x330>)
    381c:	4cac      	ldr	r4, [pc, #688]	; (3ad0 <usart_init+0x334>)
    381e:	47a0      	blx	r4
    3820:	e7fe      	b.n	3820 <usart_init+0x84>
	Assert(module);
    3822:	2346      	movs	r3, #70	; 0x46
    3824:	33ff      	adds	r3, #255	; 0xff
    3826:	4aa6      	ldr	r2, [pc, #664]	; (3ac0 <usart_init+0x324>)
    3828:	49a3      	ldr	r1, [pc, #652]	; (3ab8 <usart_init+0x31c>)
    382a:	48a8      	ldr	r0, [pc, #672]	; (3acc <usart_init+0x330>)
    382c:	4ca8      	ldr	r4, [pc, #672]	; (3ad0 <usart_init+0x334>)
    382e:	47a0      	blx	r4
    3830:	e7fe      	b.n	3830 <usart_init+0x94>
	Assert(hw);
    3832:	4ba8      	ldr	r3, [pc, #672]	; (3ad4 <usart_init+0x338>)
    3834:	9301      	str	r3, [sp, #4]
    3836:	4ba1      	ldr	r3, [pc, #644]	; (3abc <usart_init+0x320>)
    3838:	9300      	str	r3, [sp, #0]
    383a:	23a3      	movs	r3, #163	; 0xa3
    383c:	005b      	lsls	r3, r3, #1
    383e:	4aa0      	ldr	r2, [pc, #640]	; (3ac0 <usart_init+0x324>)
    3840:	2101      	movs	r1, #1
    3842:	4fa0      	ldr	r7, [pc, #640]	; (3ac4 <usart_init+0x328>)
    3844:	47b8      	blx	r7
    3846:	4b9a      	ldr	r3, [pc, #616]	; (3ab0 <usart_init+0x314>)
    3848:	6818      	ldr	r0, [r3, #0]
	Assert(config);
    384a:	2800      	cmp	r0, #0
    384c:	d1ba      	bne.n	37c4 <usart_init+0x28>
    384e:	e7de      	b.n	380e <usart_init+0x72>
	Assert(hw);
    3850:	23a3      	movs	r3, #163	; 0xa3
    3852:	005b      	lsls	r3, r3, #1
    3854:	4a9a      	ldr	r2, [pc, #616]	; (3ac0 <usart_init+0x324>)
    3856:	499f      	ldr	r1, [pc, #636]	; (3ad4 <usart_init+0x338>)
    3858:	489c      	ldr	r0, [pc, #624]	; (3acc <usart_init+0x330>)
    385a:	4c9d      	ldr	r4, [pc, #628]	; (3ad0 <usart_init+0x334>)
    385c:	47a0      	blx	r4
    385e:	e7fe      	b.n	385e <usart_init+0xc2>
	Assert(config);
    3860:	4b99      	ldr	r3, [pc, #612]	; (3ac8 <usart_init+0x32c>)
    3862:	9301      	str	r3, [sp, #4]
    3864:	4b95      	ldr	r3, [pc, #596]	; (3abc <usart_init+0x320>)
    3866:	9300      	str	r3, [sp, #0]
    3868:	2348      	movs	r3, #72	; 0x48
    386a:	33ff      	adds	r3, #255	; 0xff
    386c:	4a94      	ldr	r2, [pc, #592]	; (3ac0 <usart_init+0x324>)
    386e:	2101      	movs	r1, #1
    3870:	4f94      	ldr	r7, [pc, #592]	; (3ac4 <usart_init+0x328>)
    3872:	47b8      	blx	r7
    3874:	e7a8      	b.n	37c8 <usart_init+0x2c>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3876:	6832      	ldr	r2, [r6, #0]
		return STATUS_ERR_DENIED;
    3878:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    387a:	0792      	lsls	r2, r2, #30
    387c:	d4ac      	bmi.n	37d8 <usart_init+0x3c>
    387e:	4a96      	ldr	r2, [pc, #600]	; (3ad8 <usart_init+0x33c>)
    3880:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3882:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3884:	3b1b      	subs	r3, #27
    3886:	40bb      	lsls	r3, r7
    3888:	430b      	orrs	r3, r1
    388a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    388c:	a90f      	add	r1, sp, #60	; 0x3c
    388e:	272d      	movs	r7, #45	; 0x2d
    3890:	5deb      	ldrb	r3, [r5, r7]
    3892:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3894:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3896:	b2c3      	uxtb	r3, r0
    3898:	9302      	str	r3, [sp, #8]
    389a:	0018      	movs	r0, r3
    389c:	4b8f      	ldr	r3, [pc, #572]	; (3adc <usart_init+0x340>)
    389e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    38a0:	9802      	ldr	r0, [sp, #8]
    38a2:	4b8f      	ldr	r3, [pc, #572]	; (3ae0 <usart_init+0x344>)
    38a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    38a6:	5de8      	ldrb	r0, [r5, r7]
    38a8:	2100      	movs	r1, #0
    38aa:	4b8e      	ldr	r3, [pc, #568]	; (3ae4 <usart_init+0x348>)
    38ac:	4798      	blx	r3
	module->character_size = config->character_size;
    38ae:	7aeb      	ldrb	r3, [r5, #11]
    38b0:	7163      	strb	r3, [r4, #5]
	module->receiver_enabled = config->receiver_enable;
    38b2:	2324      	movs	r3, #36	; 0x24
    38b4:	5ceb      	ldrb	r3, [r5, r3]
    38b6:	71a3      	strb	r3, [r4, #6]
	module->transmitter_enabled = config->transmitter_enable;
    38b8:	2325      	movs	r3, #37	; 0x25
    38ba:	5ceb      	ldrb	r3, [r5, r3]
    38bc:	71e3      	strb	r3, [r4, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    38be:	7eeb      	ldrb	r3, [r5, #27]
    38c0:	7223      	strb	r3, [r4, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    38c2:	7f2b      	ldrb	r3, [r5, #28]
    38c4:	7263      	strb	r3, [r4, #9]
    38c6:	4b7a      	ldr	r3, [pc, #488]	; (3ab0 <usart_init+0x314>)
    38c8:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    38ca:	2800      	cmp	r0, #0
    38cc:	d031      	beq.n	3932 <usart_init+0x196>
    38ce:	2c00      	cmp	r4, #0
    38d0:	d021      	beq.n	3916 <usart_init+0x17a>
	Assert(module->hw);
    38d2:	6823      	ldr	r3, [r4, #0]
    38d4:	2b00      	cmp	r3, #0
    38d6:	d03f      	beq.n	3958 <usart_init+0x1bc>
	SercomUsart *const usart_hw = &(module->hw->USART);
    38d8:	6823      	ldr	r3, [r4, #0]
    38da:	469b      	mov	fp, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    38dc:	0018      	movs	r0, r3
    38de:	4b75      	ldr	r3, [pc, #468]	; (3ab4 <usart_init+0x318>)
    38e0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    38e2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    38e4:	2200      	movs	r2, #0
    38e6:	230e      	movs	r3, #14
    38e8:	a906      	add	r1, sp, #24
    38ea:	468c      	mov	ip, r1
    38ec:	4463      	add	r3, ip
    38ee:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    38f0:	8a2b      	ldrh	r3, [r5, #16]
    38f2:	4698      	mov	r8, r3
    38f4:	2380      	movs	r3, #128	; 0x80
    38f6:	01db      	lsls	r3, r3, #7
    38f8:	4598      	cmp	r8, r3
    38fa:	d07c      	beq.n	39f6 <usart_init+0x25a>
    38fc:	d936      	bls.n	396c <usart_init+0x1d0>
    38fe:	23c0      	movs	r3, #192	; 0xc0
    3900:	01db      	lsls	r3, r3, #7
    3902:	4598      	cmp	r8, r3
    3904:	d073      	beq.n	39ee <usart_init+0x252>
    3906:	2380      	movs	r3, #128	; 0x80
    3908:	021b      	lsls	r3, r3, #8
    390a:	4598      	cmp	r8, r3
    390c:	d132      	bne.n	3974 <usart_init+0x1d8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    390e:	2703      	movs	r7, #3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3910:	2300      	movs	r3, #0
    3912:	9302      	str	r3, [sp, #8]
    3914:	e035      	b.n	3982 <usart_init+0x1e6>
	Assert(module);
    3916:	4b68      	ldr	r3, [pc, #416]	; (3ab8 <usart_init+0x31c>)
    3918:	9301      	str	r3, [sp, #4]
    391a:	4b68      	ldr	r3, [pc, #416]	; (3abc <usart_init+0x320>)
    391c:	9300      	str	r3, [sp, #0]
    391e:	233d      	movs	r3, #61	; 0x3d
    3920:	4a67      	ldr	r2, [pc, #412]	; (3ac0 <usart_init+0x324>)
    3922:	2101      	movs	r1, #1
    3924:	4f67      	ldr	r7, [pc, #412]	; (3ac4 <usart_init+0x328>)
    3926:	47b8      	blx	r7
    3928:	4b61      	ldr	r3, [pc, #388]	; (3ab0 <usart_init+0x314>)
    392a:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    392c:	2800      	cmp	r0, #0
    392e:	d1d0      	bne.n	38d2 <usart_init+0x136>
    3930:	e001      	b.n	3936 <usart_init+0x19a>
	Assert(module);
    3932:	2c00      	cmp	r4, #0
    3934:	d009      	beq.n	394a <usart_init+0x1ae>
	Assert(module->hw);
    3936:	6823      	ldr	r3, [r4, #0]
    3938:	2b00      	cmp	r3, #0
    393a:	d1cd      	bne.n	38d8 <usart_init+0x13c>
    393c:	333e      	adds	r3, #62	; 0x3e
    393e:	4a60      	ldr	r2, [pc, #384]	; (3ac0 <usart_init+0x324>)
    3940:	4969      	ldr	r1, [pc, #420]	; (3ae8 <usart_init+0x34c>)
    3942:	4862      	ldr	r0, [pc, #392]	; (3acc <usart_init+0x330>)
    3944:	4c62      	ldr	r4, [pc, #392]	; (3ad0 <usart_init+0x334>)
    3946:	47a0      	blx	r4
    3948:	e7fe      	b.n	3948 <usart_init+0x1ac>
	Assert(module);
    394a:	233d      	movs	r3, #61	; 0x3d
    394c:	4a5c      	ldr	r2, [pc, #368]	; (3ac0 <usart_init+0x324>)
    394e:	495a      	ldr	r1, [pc, #360]	; (3ab8 <usart_init+0x31c>)
    3950:	485e      	ldr	r0, [pc, #376]	; (3acc <usart_init+0x330>)
    3952:	4c5f      	ldr	r4, [pc, #380]	; (3ad0 <usart_init+0x334>)
    3954:	47a0      	blx	r4
    3956:	e7fe      	b.n	3956 <usart_init+0x1ba>
	Assert(module->hw);
    3958:	4b63      	ldr	r3, [pc, #396]	; (3ae8 <usart_init+0x34c>)
    395a:	9301      	str	r3, [sp, #4]
    395c:	4b57      	ldr	r3, [pc, #348]	; (3abc <usart_init+0x320>)
    395e:	9300      	str	r3, [sp, #0]
    3960:	233e      	movs	r3, #62	; 0x3e
    3962:	4a57      	ldr	r2, [pc, #348]	; (3ac0 <usart_init+0x324>)
    3964:	2101      	movs	r1, #1
    3966:	4f57      	ldr	r7, [pc, #348]	; (3ac4 <usart_init+0x328>)
    3968:	47b8      	blx	r7
    396a:	e7b5      	b.n	38d8 <usart_init+0x13c>
	switch (config->sample_rate) {
    396c:	2380      	movs	r3, #128	; 0x80
    396e:	019b      	lsls	r3, r3, #6
    3970:	4598      	cmp	r8, r3
    3972:	d003      	beq.n	397c <usart_init+0x1e0>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3974:	2710      	movs	r7, #16
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3976:	2300      	movs	r3, #0
    3978:	9302      	str	r3, [sp, #8]
    397a:	e002      	b.n	3982 <usart_init+0x1e6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    397c:	2710      	movs	r7, #16
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    397e:	2301      	movs	r3, #1
    3980:	9302      	str	r3, [sp, #8]
	ctrla = (uint32_t)config->data_order |
    3982:	682b      	ldr	r3, [r5, #0]
    3984:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
    3986:	68eb      	ldr	r3, [r5, #12]
    3988:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
    398a:	696b      	ldr	r3, [r5, #20]
    398c:	9305      	str	r3, [sp, #20]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    398e:	7e2b      	ldrb	r3, [r5, #24]
    3990:	9306      	str	r3, [sp, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3992:	2326      	movs	r3, #38	; 0x26
    3994:	5ceb      	ldrb	r3, [r5, r3]
    3996:	9307      	str	r3, [sp, #28]
	transfer_mode = (uint32_t)config->transfer_mode;
    3998:	686b      	ldr	r3, [r5, #4]
    399a:	4699      	mov	r9, r3
	switch (transfer_mode)
    399c:	2b00      	cmp	r3, #0
    399e:	d042      	beq.n	3a26 <usart_init+0x28a>
    39a0:	2380      	movs	r3, #128	; 0x80
    39a2:	055b      	lsls	r3, r3, #21
    39a4:	4599      	cmp	r9, r3
    39a6:	d113      	bne.n	39d0 <usart_init+0x234>
			if (!config->use_external_clock) {
    39a8:	2327      	movs	r3, #39	; 0x27
    39aa:	5ceb      	ldrb	r3, [r5, r3]
    39ac:	2b00      	cmp	r3, #0
    39ae:	d10f      	bne.n	39d0 <usart_init+0x234>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    39b0:	6a2f      	ldr	r7, [r5, #32]
    39b2:	b2c0      	uxtb	r0, r0
    39b4:	4b4d      	ldr	r3, [pc, #308]	; (3aec <usart_init+0x350>)
    39b6:	4798      	blx	r3
    39b8:	0001      	movs	r1, r0
    39ba:	220e      	movs	r2, #14
    39bc:	ab06      	add	r3, sp, #24
    39be:	469c      	mov	ip, r3
    39c0:	4462      	add	r2, ip
    39c2:	0038      	movs	r0, r7
    39c4:	4b4a      	ldr	r3, [pc, #296]	; (3af0 <usart_init+0x354>)
    39c6:	4798      	blx	r3
    39c8:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
    39ca:	2b00      	cmp	r3, #0
    39cc:	d000      	beq.n	39d0 <usart_init+0x234>
    39ce:	e703      	b.n	37d8 <usart_init+0x3c>
	if(config->encoding_format_enable) {
    39d0:	7e6b      	ldrb	r3, [r5, #25]
    39d2:	2b00      	cmp	r3, #0
    39d4:	d002      	beq.n	39dc <usart_init+0x240>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    39d6:	7eab      	ldrb	r3, [r5, #26]
    39d8:	465a      	mov	r2, fp
    39da:	7393      	strb	r3, [r2, #14]
    39dc:	4b34      	ldr	r3, [pc, #208]	; (3ab0 <usart_init+0x314>)
    39de:	6818      	ldr	r0, [r3, #0]
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);
    39e0:	2800      	cmp	r0, #0
    39e2:	d04c      	beq.n	3a7e <usart_init+0x2e2>
    39e4:	2c00      	cmp	r4, #0
    39e6:	d03f      	beq.n	3a68 <usart_init+0x2cc>
    39e8:	4f31      	ldr	r7, [pc, #196]	; (3ab0 <usart_init+0x314>)
	Assert(module->hw);
    39ea:	9502      	str	r5, [sp, #8]
    39ec:	e091      	b.n	3b12 <usart_init+0x376>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    39ee:	2708      	movs	r7, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    39f0:	2301      	movs	r3, #1
    39f2:	9302      	str	r3, [sp, #8]
    39f4:	e7c5      	b.n	3982 <usart_init+0x1e6>
	ctrla = (uint32_t)config->data_order |
    39f6:	682b      	ldr	r3, [r5, #0]
    39f8:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
    39fa:	68eb      	ldr	r3, [r5, #12]
    39fc:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
    39fe:	696b      	ldr	r3, [r5, #20]
    3a00:	9305      	str	r3, [sp, #20]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3a02:	7e2b      	ldrb	r3, [r5, #24]
    3a04:	9306      	str	r3, [sp, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3a06:	2326      	movs	r3, #38	; 0x26
    3a08:	5ceb      	ldrb	r3, [r5, r3]
    3a0a:	9307      	str	r3, [sp, #28]
	transfer_mode = (uint32_t)config->transfer_mode;
    3a0c:	686b      	ldr	r3, [r5, #4]
    3a0e:	4699      	mov	r9, r3
	switch (transfer_mode)
    3a10:	2b00      	cmp	r3, #0
    3a12:	d005      	beq.n	3a20 <usart_init+0x284>
    3a14:	2380      	movs	r3, #128	; 0x80
    3a16:	055b      	lsls	r3, r3, #21
    3a18:	4599      	cmp	r9, r3
    3a1a:	d0c5      	beq.n	39a8 <usart_init+0x20c>
	enum status_code status_code = STATUS_OK;
    3a1c:	2300      	movs	r3, #0
    3a1e:	e7d4      	b.n	39ca <usart_init+0x22e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3a20:	2708      	movs	r7, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3a22:	2300      	movs	r3, #0
    3a24:	9302      	str	r3, [sp, #8]
			if (config->use_external_clock) {
    3a26:	2327      	movs	r3, #39	; 0x27
    3a28:	5ceb      	ldrb	r3, [r5, r3]
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d00b      	beq.n	3a46 <usart_init+0x2aa>
				status_code =
    3a2e:	9700      	str	r7, [sp, #0]
    3a30:	9b02      	ldr	r3, [sp, #8]
    3a32:	220e      	movs	r2, #14
    3a34:	a906      	add	r1, sp, #24
    3a36:	468c      	mov	ip, r1
    3a38:	4462      	add	r2, ip
    3a3a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    3a3c:	6a28      	ldr	r0, [r5, #32]
    3a3e:	4f2d      	ldr	r7, [pc, #180]	; (3af4 <usart_init+0x358>)
    3a40:	47b8      	blx	r7
    3a42:	0003      	movs	r3, r0
    3a44:	e7c1      	b.n	39ca <usart_init+0x22e>
						_sercom_get_async_baud_val(config->baudrate,
    3a46:	6a2b      	ldr	r3, [r5, #32]
    3a48:	469a      	mov	sl, r3
    3a4a:	b2c0      	uxtb	r0, r0
    3a4c:	4b27      	ldr	r3, [pc, #156]	; (3aec <usart_init+0x350>)
    3a4e:	4798      	blx	r3
    3a50:	0001      	movs	r1, r0
				status_code =
    3a52:	9700      	str	r7, [sp, #0]
    3a54:	9b02      	ldr	r3, [sp, #8]
    3a56:	220e      	movs	r2, #14
    3a58:	a806      	add	r0, sp, #24
    3a5a:	4684      	mov	ip, r0
    3a5c:	4462      	add	r2, ip
    3a5e:	4650      	mov	r0, sl
    3a60:	4f24      	ldr	r7, [pc, #144]	; (3af4 <usart_init+0x358>)
    3a62:	47b8      	blx	r7
    3a64:	0003      	movs	r3, r0
    3a66:	e7b0      	b.n	39ca <usart_init+0x22e>
	Assert(module);
    3a68:	4b13      	ldr	r3, [pc, #76]	; (3ab8 <usart_init+0x31c>)
    3a6a:	9301      	str	r3, [sp, #4]
    3a6c:	4b13      	ldr	r3, [pc, #76]	; (3abc <usart_init+0x320>)
    3a6e:	9300      	str	r3, [sp, #0]
    3a70:	2381      	movs	r3, #129	; 0x81
    3a72:	00db      	lsls	r3, r3, #3
    3a74:	4a20      	ldr	r2, [pc, #128]	; (3af8 <usart_init+0x35c>)
    3a76:	2101      	movs	r1, #1
    3a78:	4f12      	ldr	r7, [pc, #72]	; (3ac4 <usart_init+0x328>)
    3a7a:	47b8      	blx	r7
    3a7c:	e7b4      	b.n	39e8 <usart_init+0x24c>
    3a7e:	2c00      	cmp	r4, #0
    3a80:	d1b2      	bne.n	39e8 <usart_init+0x24c>
    3a82:	2381      	movs	r3, #129	; 0x81
    3a84:	00db      	lsls	r3, r3, #3
    3a86:	4a1c      	ldr	r2, [pc, #112]	; (3af8 <usart_init+0x35c>)
    3a88:	490b      	ldr	r1, [pc, #44]	; (3ab8 <usart_init+0x31c>)
    3a8a:	4810      	ldr	r0, [pc, #64]	; (3acc <usart_init+0x330>)
    3a8c:	4c10      	ldr	r4, [pc, #64]	; (3ad0 <usart_init+0x334>)
    3a8e:	47a0      	blx	r4
    3a90:	e7fe      	b.n	3a90 <usart_init+0x2f4>
	Assert(module);
    3a92:	4b09      	ldr	r3, [pc, #36]	; (3ab8 <usart_init+0x31c>)
    3a94:	9301      	str	r3, [sp, #4]
    3a96:	4b09      	ldr	r3, [pc, #36]	; (3abc <usart_init+0x320>)
    3a98:	9300      	str	r3, [sp, #0]
    3a9a:	4b18      	ldr	r3, [pc, #96]	; (3afc <usart_init+0x360>)
    3a9c:	4a16      	ldr	r2, [pc, #88]	; (3af8 <usart_init+0x35c>)
    3a9e:	2101      	movs	r1, #1
    3aa0:	4d08      	ldr	r5, [pc, #32]	; (3ac4 <usart_init+0x328>)
    3aa2:	47a8      	blx	r5
    3aa4:	4b02      	ldr	r3, [pc, #8]	; (3ab0 <usart_init+0x314>)
    3aa6:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    3aa8:	2800      	cmp	r0, #0
    3aaa:	d137      	bne.n	3b1c <usart_init+0x380>
    3aac:	e02a      	b.n	3b04 <usart_init+0x368>
    3aae:	46c0      	nop			; (mov r8, r8)
    3ab0:	2000011c 	.word	0x2000011c
    3ab4:	00001dc5 	.word	0x00001dc5
    3ab8:	00007094 	.word	0x00007094
    3abc:	00006c40 	.word	0x00006c40
    3ac0:	000070b0 	.word	0x000070b0
    3ac4:	000017e1 	.word	0x000017e1
    3ac8:	00006fec 	.word	0x00006fec
    3acc:	00006c58 	.word	0x00006c58
    3ad0:	00006055 	.word	0x00006055
    3ad4:	00006d88 	.word	0x00006d88
    3ad8:	40000400 	.word	0x40000400
    3adc:	00004b35 	.word	0x00004b35
    3ae0:	00004a49 	.word	0x00004a49
    3ae4:	00001bc9 	.word	0x00001bc9
    3ae8:	00006d80 	.word	0x00006d80
    3aec:	00004bad 	.word	0x00004bad
    3af0:	00001b0b 	.word	0x00001b0b
    3af4:	00001b35 	.word	0x00001b35
    3af8:	000070e0 	.word	0x000070e0
    3afc:	000003f3 	.word	0x000003f3
	Assert(module);
    3b00:	2c00      	cmp	r4, #0
    3b02:	d019      	beq.n	3b38 <usart_init+0x39c>
	Assert(module->hw);
    3b04:	6823      	ldr	r3, [r4, #0]
    3b06:	2b00      	cmp	r3, #0
    3b08:	d01d      	beq.n	3b46 <usart_init+0x3aa>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b0a:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3b0c:	69db      	ldr	r3, [r3, #28]

	while (usart_is_syncing(module)) {
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d021      	beq.n	3b56 <usart_init+0x3ba>
    3b12:	6838      	ldr	r0, [r7, #0]
	Assert(module);
    3b14:	2800      	cmp	r0, #0
    3b16:	d0f3      	beq.n	3b00 <usart_init+0x364>
    3b18:	2c00      	cmp	r4, #0
    3b1a:	d0ba      	beq.n	3a92 <usart_init+0x2f6>
	Assert(module->hw);
    3b1c:	6823      	ldr	r3, [r4, #0]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d1f3      	bne.n	3b0a <usart_init+0x36e>
    3b22:	4bb9      	ldr	r3, [pc, #740]	; (3e08 <usart_init+0x66c>)
    3b24:	9301      	str	r3, [sp, #4]
    3b26:	4bb9      	ldr	r3, [pc, #740]	; (3e0c <usart_init+0x670>)
    3b28:	9300      	str	r3, [sp, #0]
    3b2a:	23fd      	movs	r3, #253	; 0xfd
    3b2c:	009b      	lsls	r3, r3, #2
    3b2e:	4ab8      	ldr	r2, [pc, #736]	; (3e10 <usart_init+0x674>)
    3b30:	2101      	movs	r1, #1
    3b32:	4db8      	ldr	r5, [pc, #736]	; (3e14 <usart_init+0x678>)
    3b34:	47a8      	blx	r5
    3b36:	e7e8      	b.n	3b0a <usart_init+0x36e>
	Assert(module);
    3b38:	4bb7      	ldr	r3, [pc, #732]	; (3e18 <usart_init+0x67c>)
    3b3a:	4ab5      	ldr	r2, [pc, #724]	; (3e10 <usart_init+0x674>)
    3b3c:	49b7      	ldr	r1, [pc, #732]	; (3e1c <usart_init+0x680>)
    3b3e:	48b8      	ldr	r0, [pc, #736]	; (3e20 <usart_init+0x684>)
    3b40:	4cb8      	ldr	r4, [pc, #736]	; (3e24 <usart_init+0x688>)
    3b42:	47a0      	blx	r4
    3b44:	e7fe      	b.n	3b44 <usart_init+0x3a8>
	Assert(module->hw);
    3b46:	23fd      	movs	r3, #253	; 0xfd
    3b48:	009b      	lsls	r3, r3, #2
    3b4a:	4ab1      	ldr	r2, [pc, #708]	; (3e10 <usart_init+0x674>)
    3b4c:	49ae      	ldr	r1, [pc, #696]	; (3e08 <usart_init+0x66c>)
    3b4e:	48b4      	ldr	r0, [pc, #720]	; (3e20 <usart_init+0x684>)
    3b50:	4cb4      	ldr	r4, [pc, #720]	; (3e24 <usart_init+0x688>)
    3b52:	47a0      	blx	r4
    3b54:	e7fe      	b.n	3b54 <usart_init+0x3b8>
    3b56:	9d02      	ldr	r5, [sp, #8]
	usart_hw->BAUD.reg = baud;
    3b58:	330e      	adds	r3, #14
    3b5a:	aa06      	add	r2, sp, #24
    3b5c:	4694      	mov	ip, r2
    3b5e:	4463      	add	r3, ip
    3b60:	881b      	ldrh	r3, [r3, #0]
    3b62:	465a      	mov	r2, fp
    3b64:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    3b66:	9f03      	ldr	r7, [sp, #12]
    3b68:	9b04      	ldr	r3, [sp, #16]
    3b6a:	431f      	orrs	r7, r3
    3b6c:	9b05      	ldr	r3, [sp, #20]
    3b6e:	431f      	orrs	r7, r3
    3b70:	464b      	mov	r3, r9
    3b72:	431f      	orrs	r7, r3
    3b74:	4643      	mov	r3, r8
    3b76:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3b78:	9b06      	ldr	r3, [sp, #24]
    3b7a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    3b7c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3b7e:	9b07      	ldr	r3, [sp, #28]
    3b80:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    3b82:	431f      	orrs	r7, r3
    3b84:	46ba      	mov	sl, r7
	if (config->use_external_clock == false) {
    3b86:	2327      	movs	r3, #39	; 0x27
    3b88:	5ceb      	ldrb	r3, [r5, r3]
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d103      	bne.n	3b96 <usart_init+0x3fa>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3b8e:	3304      	adds	r3, #4
    3b90:	003a      	movs	r2, r7
    3b92:	431a      	orrs	r2, r3
    3b94:	4692      	mov	sl, r2
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3b96:	7e6b      	ldrb	r3, [r5, #25]
    3b98:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3b9a:	7f2a      	ldrb	r2, [r5, #28]
    3b9c:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3b9e:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3ba0:	7f6a      	ldrb	r2, [r5, #29]
    3ba2:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3ba4:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3ba6:	2224      	movs	r2, #36	; 0x24
    3ba8:	5caa      	ldrb	r2, [r5, r2]
    3baa:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3bac:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3bae:	2225      	movs	r2, #37	; 0x25
    3bb0:	5caa      	ldrb	r2, [r5, r2]
    3bb2:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3bb4:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    3bb6:	7aaa      	ldrb	r2, [r5, #10]
    3bb8:	7ae9      	ldrb	r1, [r5, #11]
    3bba:	430a      	orrs	r2, r1
    3bbc:	431a      	orrs	r2, r3
    3bbe:	4690      	mov	r8, r2
	if (config->parity != USART_PARITY_NONE) {
    3bc0:	892b      	ldrh	r3, [r5, #8]
    3bc2:	2bff      	cmp	r3, #255	; 0xff
    3bc4:	d01e      	beq.n	3c04 <usart_init+0x468>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3bc6:	2280      	movs	r2, #128	; 0x80
    3bc8:	0452      	lsls	r2, r2, #17
    3bca:	4651      	mov	r1, sl
    3bcc:	4311      	orrs	r1, r2
    3bce:	468a      	mov	sl, r1
		ctrlb |= config->parity;
    3bd0:	4642      	mov	r2, r8
    3bd2:	431a      	orrs	r2, r3
    3bd4:	4690      	mov	r8, r2
	if (config->run_in_standby || system_is_debugger_present()) {
    3bd6:	232c      	movs	r3, #44	; 0x2c
    3bd8:	5ceb      	ldrb	r3, [r5, r3]
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d103      	bne.n	3be6 <usart_init+0x44a>
    3bde:	4b92      	ldr	r3, [pc, #584]	; (3e28 <usart_init+0x68c>)
    3be0:	789b      	ldrb	r3, [r3, #2]
    3be2:	079b      	lsls	r3, r3, #30
    3be4:	d503      	bpl.n	3bee <usart_init+0x452>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3be6:	2380      	movs	r3, #128	; 0x80
    3be8:	4652      	mov	r2, sl
    3bea:	431a      	orrs	r2, r3
    3bec:	4692      	mov	sl, r2
    3bee:	4b8f      	ldr	r3, [pc, #572]	; (3e2c <usart_init+0x690>)
    3bf0:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    3bf2:	2800      	cmp	r0, #0
    3bf4:	d01a      	beq.n	3c2c <usart_init+0x490>
    3bf6:	2c00      	cmp	r4, #0
    3bf8:	d00d      	beq.n	3c16 <usart_init+0x47a>
    3bfa:	4b8c      	ldr	r3, [pc, #560]	; (3e2c <usart_init+0x690>)
    3bfc:	4699      	mov	r9, r3
	Assert(module->hw);
    3bfe:	4657      	mov	r7, sl
    3c00:	9502      	str	r5, [sp, #8]
    3c02:	e034      	b.n	3c6e <usart_init+0x4d2>
		if(config->lin_slave_enable) {
    3c04:	7eeb      	ldrb	r3, [r5, #27]
    3c06:	2b00      	cmp	r3, #0
    3c08:	d0e5      	beq.n	3bd6 <usart_init+0x43a>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3c0a:	2380      	movs	r3, #128	; 0x80
    3c0c:	04db      	lsls	r3, r3, #19
    3c0e:	4652      	mov	r2, sl
    3c10:	431a      	orrs	r2, r3
    3c12:	4692      	mov	sl, r2
    3c14:	e7df      	b.n	3bd6 <usart_init+0x43a>
	Assert(module);
    3c16:	4b81      	ldr	r3, [pc, #516]	; (3e1c <usart_init+0x680>)
    3c18:	9301      	str	r3, [sp, #4]
    3c1a:	4b7c      	ldr	r3, [pc, #496]	; (3e0c <usart_init+0x670>)
    3c1c:	9300      	str	r3, [sp, #0]
    3c1e:	2381      	movs	r3, #129	; 0x81
    3c20:	00db      	lsls	r3, r3, #3
    3c22:	4a7b      	ldr	r2, [pc, #492]	; (3e10 <usart_init+0x674>)
    3c24:	2101      	movs	r1, #1
    3c26:	4f7b      	ldr	r7, [pc, #492]	; (3e14 <usart_init+0x678>)
    3c28:	47b8      	blx	r7
    3c2a:	e7e6      	b.n	3bfa <usart_init+0x45e>
    3c2c:	2c00      	cmp	r4, #0
    3c2e:	d1e4      	bne.n	3bfa <usart_init+0x45e>
    3c30:	2381      	movs	r3, #129	; 0x81
    3c32:	00db      	lsls	r3, r3, #3
    3c34:	4a76      	ldr	r2, [pc, #472]	; (3e10 <usart_init+0x674>)
    3c36:	4979      	ldr	r1, [pc, #484]	; (3e1c <usart_init+0x680>)
    3c38:	4879      	ldr	r0, [pc, #484]	; (3e20 <usart_init+0x684>)
    3c3a:	4c7a      	ldr	r4, [pc, #488]	; (3e24 <usart_init+0x688>)
    3c3c:	47a0      	blx	r4
    3c3e:	e7fe      	b.n	3c3e <usart_init+0x4a2>
	Assert(module);
    3c40:	4b76      	ldr	r3, [pc, #472]	; (3e1c <usart_init+0x680>)
    3c42:	9301      	str	r3, [sp, #4]
    3c44:	4b71      	ldr	r3, [pc, #452]	; (3e0c <usart_init+0x670>)
    3c46:	9300      	str	r3, [sp, #0]
    3c48:	4b73      	ldr	r3, [pc, #460]	; (3e18 <usart_init+0x67c>)
    3c4a:	4a71      	ldr	r2, [pc, #452]	; (3e10 <usart_init+0x674>)
    3c4c:	2101      	movs	r1, #1
    3c4e:	4d71      	ldr	r5, [pc, #452]	; (3e14 <usart_init+0x678>)
    3c50:	47a8      	blx	r5
    3c52:	4b76      	ldr	r3, [pc, #472]	; (3e2c <usart_init+0x690>)
    3c54:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    3c56:	2800      	cmp	r0, #0
    3c58:	d10f      	bne.n	3c7a <usart_init+0x4de>
    3c5a:	e001      	b.n	3c60 <usart_init+0x4c4>
	Assert(module);
    3c5c:	2c00      	cmp	r4, #0
    3c5e:	d01a      	beq.n	3c96 <usart_init+0x4fa>
	Assert(module->hw);
    3c60:	6823      	ldr	r3, [r4, #0]
    3c62:	2b00      	cmp	r3, #0
    3c64:	d01e      	beq.n	3ca4 <usart_init+0x508>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c66:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3c68:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d022      	beq.n	3cb4 <usart_init+0x518>
    3c6e:	464b      	mov	r3, r9
    3c70:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    3c72:	2800      	cmp	r0, #0
    3c74:	d0f2      	beq.n	3c5c <usart_init+0x4c0>
    3c76:	2c00      	cmp	r4, #0
    3c78:	d0e2      	beq.n	3c40 <usart_init+0x4a4>
	Assert(module->hw);
    3c7a:	6823      	ldr	r3, [r4, #0]
    3c7c:	2b00      	cmp	r3, #0
    3c7e:	d1f2      	bne.n	3c66 <usart_init+0x4ca>
    3c80:	4b61      	ldr	r3, [pc, #388]	; (3e08 <usart_init+0x66c>)
    3c82:	9301      	str	r3, [sp, #4]
    3c84:	4b61      	ldr	r3, [pc, #388]	; (3e0c <usart_init+0x670>)
    3c86:	9300      	str	r3, [sp, #0]
    3c88:	23fd      	movs	r3, #253	; 0xfd
    3c8a:	009b      	lsls	r3, r3, #2
    3c8c:	4a60      	ldr	r2, [pc, #384]	; (3e10 <usart_init+0x674>)
    3c8e:	2101      	movs	r1, #1
    3c90:	4d60      	ldr	r5, [pc, #384]	; (3e14 <usart_init+0x678>)
    3c92:	47a8      	blx	r5
    3c94:	e7e7      	b.n	3c66 <usart_init+0x4ca>
	Assert(module);
    3c96:	4b60      	ldr	r3, [pc, #384]	; (3e18 <usart_init+0x67c>)
    3c98:	4a5d      	ldr	r2, [pc, #372]	; (3e10 <usart_init+0x674>)
    3c9a:	4960      	ldr	r1, [pc, #384]	; (3e1c <usart_init+0x680>)
    3c9c:	4860      	ldr	r0, [pc, #384]	; (3e20 <usart_init+0x684>)
    3c9e:	4c61      	ldr	r4, [pc, #388]	; (3e24 <usart_init+0x688>)
    3ca0:	47a0      	blx	r4
    3ca2:	e7fe      	b.n	3ca2 <usart_init+0x506>
	Assert(module->hw);
    3ca4:	23fd      	movs	r3, #253	; 0xfd
    3ca6:	009b      	lsls	r3, r3, #2
    3ca8:	4a59      	ldr	r2, [pc, #356]	; (3e10 <usart_init+0x674>)
    3caa:	4957      	ldr	r1, [pc, #348]	; (3e08 <usart_init+0x66c>)
    3cac:	485c      	ldr	r0, [pc, #368]	; (3e20 <usart_init+0x684>)
    3cae:	4c5d      	ldr	r4, [pc, #372]	; (3e24 <usart_init+0x688>)
    3cb0:	47a0      	blx	r4
    3cb2:	e7fe      	b.n	3cb2 <usart_init+0x516>
    3cb4:	46ba      	mov	sl, r7
    3cb6:	9d02      	ldr	r5, [sp, #8]
	usart_hw->CTRLB.reg = ctrlb;
    3cb8:	465b      	mov	r3, fp
    3cba:	4642      	mov	r2, r8
    3cbc:	605a      	str	r2, [r3, #4]
    3cbe:	4b5b      	ldr	r3, [pc, #364]	; (3e2c <usart_init+0x690>)
    3cc0:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    3cc2:	2800      	cmp	r0, #0
    3cc4:	d011      	beq.n	3cea <usart_init+0x54e>
    3cc6:	2c00      	cmp	r4, #0
    3cc8:	d004      	beq.n	3cd4 <usart_init+0x538>
    3cca:	4b58      	ldr	r3, [pc, #352]	; (3e2c <usart_init+0x690>)
    3ccc:	4698      	mov	r8, r3
	Assert(module->hw);
    3cce:	4657      	mov	r7, sl
    3cd0:	9502      	str	r5, [sp, #8]
    3cd2:	e02b      	b.n	3d2c <usart_init+0x590>
	Assert(module);
    3cd4:	4b51      	ldr	r3, [pc, #324]	; (3e1c <usart_init+0x680>)
    3cd6:	9301      	str	r3, [sp, #4]
    3cd8:	4b4c      	ldr	r3, [pc, #304]	; (3e0c <usart_init+0x670>)
    3cda:	9300      	str	r3, [sp, #0]
    3cdc:	2381      	movs	r3, #129	; 0x81
    3cde:	00db      	lsls	r3, r3, #3
    3ce0:	4a4b      	ldr	r2, [pc, #300]	; (3e10 <usart_init+0x674>)
    3ce2:	2101      	movs	r1, #1
    3ce4:	4f4b      	ldr	r7, [pc, #300]	; (3e14 <usart_init+0x678>)
    3ce6:	47b8      	blx	r7
    3ce8:	e7ef      	b.n	3cca <usart_init+0x52e>
    3cea:	2c00      	cmp	r4, #0
    3cec:	d1ed      	bne.n	3cca <usart_init+0x52e>
    3cee:	2381      	movs	r3, #129	; 0x81
    3cf0:	00db      	lsls	r3, r3, #3
    3cf2:	4a47      	ldr	r2, [pc, #284]	; (3e10 <usart_init+0x674>)
    3cf4:	4949      	ldr	r1, [pc, #292]	; (3e1c <usart_init+0x680>)
    3cf6:	484a      	ldr	r0, [pc, #296]	; (3e20 <usart_init+0x684>)
    3cf8:	4c4a      	ldr	r4, [pc, #296]	; (3e24 <usart_init+0x688>)
    3cfa:	47a0      	blx	r4
    3cfc:	e7fe      	b.n	3cfc <usart_init+0x560>
	Assert(module);
    3cfe:	4b47      	ldr	r3, [pc, #284]	; (3e1c <usart_init+0x680>)
    3d00:	9301      	str	r3, [sp, #4]
    3d02:	4b42      	ldr	r3, [pc, #264]	; (3e0c <usart_init+0x670>)
    3d04:	9300      	str	r3, [sp, #0]
    3d06:	4b44      	ldr	r3, [pc, #272]	; (3e18 <usart_init+0x67c>)
    3d08:	4a41      	ldr	r2, [pc, #260]	; (3e10 <usart_init+0x674>)
    3d0a:	2101      	movs	r1, #1
    3d0c:	4d41      	ldr	r5, [pc, #260]	; (3e14 <usart_init+0x678>)
    3d0e:	47a8      	blx	r5
    3d10:	4b46      	ldr	r3, [pc, #280]	; (3e2c <usart_init+0x690>)
    3d12:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    3d14:	2800      	cmp	r0, #0
    3d16:	d002      	beq.n	3d1e <usart_init+0x582>
    3d18:	e00e      	b.n	3d38 <usart_init+0x59c>
	Assert(module);
    3d1a:	2c00      	cmp	r4, #0
    3d1c:	d01a      	beq.n	3d54 <usart_init+0x5b8>
	Assert(module->hw);
    3d1e:	6823      	ldr	r3, [r4, #0]
    3d20:	2b00      	cmp	r3, #0
    3d22:	d01e      	beq.n	3d62 <usart_init+0x5c6>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3d24:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3d26:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d022      	beq.n	3d72 <usart_init+0x5d6>
    3d2c:	4643      	mov	r3, r8
    3d2e:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    3d30:	2800      	cmp	r0, #0
    3d32:	d0f2      	beq.n	3d1a <usart_init+0x57e>
    3d34:	2c00      	cmp	r4, #0
    3d36:	d0e2      	beq.n	3cfe <usart_init+0x562>
	Assert(module->hw);
    3d38:	6823      	ldr	r3, [r4, #0]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d1f2      	bne.n	3d24 <usart_init+0x588>
    3d3e:	4b32      	ldr	r3, [pc, #200]	; (3e08 <usart_init+0x66c>)
    3d40:	9301      	str	r3, [sp, #4]
    3d42:	4b32      	ldr	r3, [pc, #200]	; (3e0c <usart_init+0x670>)
    3d44:	9300      	str	r3, [sp, #0]
    3d46:	23fd      	movs	r3, #253	; 0xfd
    3d48:	009b      	lsls	r3, r3, #2
    3d4a:	4a31      	ldr	r2, [pc, #196]	; (3e10 <usart_init+0x674>)
    3d4c:	2101      	movs	r1, #1
    3d4e:	4d31      	ldr	r5, [pc, #196]	; (3e14 <usart_init+0x678>)
    3d50:	47a8      	blx	r5
    3d52:	e7e7      	b.n	3d24 <usart_init+0x588>
	Assert(module);
    3d54:	4b30      	ldr	r3, [pc, #192]	; (3e18 <usart_init+0x67c>)
    3d56:	4a2e      	ldr	r2, [pc, #184]	; (3e10 <usart_init+0x674>)
    3d58:	4930      	ldr	r1, [pc, #192]	; (3e1c <usart_init+0x680>)
    3d5a:	4831      	ldr	r0, [pc, #196]	; (3e20 <usart_init+0x684>)
    3d5c:	4c31      	ldr	r4, [pc, #196]	; (3e24 <usart_init+0x688>)
    3d5e:	47a0      	blx	r4
    3d60:	e7fe      	b.n	3d60 <usart_init+0x5c4>
	Assert(module->hw);
    3d62:	23fd      	movs	r3, #253	; 0xfd
    3d64:	009b      	lsls	r3, r3, #2
    3d66:	4a2a      	ldr	r2, [pc, #168]	; (3e10 <usart_init+0x674>)
    3d68:	4927      	ldr	r1, [pc, #156]	; (3e08 <usart_init+0x66c>)
    3d6a:	482d      	ldr	r0, [pc, #180]	; (3e20 <usart_init+0x684>)
    3d6c:	4c2d      	ldr	r4, [pc, #180]	; (3e24 <usart_init+0x688>)
    3d6e:	47a0      	blx	r4
    3d70:	e7fe      	b.n	3d70 <usart_init+0x5d4>
    3d72:	9d02      	ldr	r5, [sp, #8]
	usart_hw->CTRLA.reg = ctrla;
    3d74:	465b      	mov	r3, fp
    3d76:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3d78:	ab0e      	add	r3, sp, #56	; 0x38
    3d7a:	2280      	movs	r2, #128	; 0x80
    3d7c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3d7e:	2200      	movs	r2, #0
    3d80:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    3d82:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3d84:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3d86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    3d88:	930a      	str	r3, [sp, #40]	; 0x28
    3d8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    3d8c:	930b      	str	r3, [sp, #44]	; 0x2c
    3d8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3d90:	930c      	str	r3, [sp, #48]	; 0x30
    3d92:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    3d94:	9302      	str	r3, [sp, #8]
    3d96:	930d      	str	r3, [sp, #52]	; 0x34
    3d98:	2500      	movs	r5, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3d9a:	af0a      	add	r7, sp, #40	; 0x28
    3d9c:	e006      	b.n	3dac <usart_init+0x610>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3d9e:	0030      	movs	r0, r6
    3da0:	4b23      	ldr	r3, [pc, #140]	; (3e30 <usart_init+0x694>)
    3da2:	4798      	blx	r3
    3da4:	e007      	b.n	3db6 <usart_init+0x61a>
    3da6:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3da8:	2d04      	cmp	r5, #4
    3daa:	d00d      	beq.n	3dc8 <usart_init+0x62c>
    3dac:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3dae:	00ab      	lsls	r3, r5, #2
    3db0:	59d8      	ldr	r0, [r3, r7]
		if (current_pinmux == PINMUX_DEFAULT) {
    3db2:	2800      	cmp	r0, #0
    3db4:	d0f3      	beq.n	3d9e <usart_init+0x602>
		if (current_pinmux != PINMUX_UNUSED) {
    3db6:	1c43      	adds	r3, r0, #1
    3db8:	d0f5      	beq.n	3da6 <usart_init+0x60a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3dba:	a90e      	add	r1, sp, #56	; 0x38
    3dbc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3dbe:	0c00      	lsrs	r0, r0, #16
    3dc0:	b2c0      	uxtb	r0, r0
    3dc2:	4b1c      	ldr	r3, [pc, #112]	; (3e34 <usart_init+0x698>)
    3dc4:	4798      	blx	r3
    3dc6:	e7ee      	b.n	3da6 <usart_init+0x60a>
		module->callback[i]            = NULL;
    3dc8:	2300      	movs	r3, #0
    3dca:	60e3      	str	r3, [r4, #12]
    3dcc:	6123      	str	r3, [r4, #16]
    3dce:	6163      	str	r3, [r4, #20]
    3dd0:	61a3      	str	r3, [r4, #24]
    3dd2:	61e3      	str	r3, [r4, #28]
    3dd4:	6223      	str	r3, [r4, #32]
	module->tx_buffer_ptr              = NULL;
    3dd6:	62a3      	str	r3, [r4, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    3dd8:	6263      	str	r3, [r4, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    3dda:	2200      	movs	r2, #0
    3ddc:	85e3      	strh	r3, [r4, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    3dde:	85a3      	strh	r3, [r4, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    3de0:	3330      	adds	r3, #48	; 0x30
    3de2:	54e2      	strb	r2, [r4, r3]
	module->callback_enable_mask       = 0x00;
    3de4:	3301      	adds	r3, #1
    3de6:	54e2      	strb	r2, [r4, r3]
	module->rx_status                  = STATUS_OK;
    3de8:	3301      	adds	r3, #1
    3dea:	54e2      	strb	r2, [r4, r3]
	module->tx_status                  = STATUS_OK;
    3dec:	3301      	adds	r3, #1
    3dee:	54e2      	strb	r2, [r4, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3df0:	6820      	ldr	r0, [r4, #0]
    3df2:	4b11      	ldr	r3, [pc, #68]	; (3e38 <usart_init+0x69c>)
    3df4:	4798      	blx	r3
    3df6:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3df8:	4910      	ldr	r1, [pc, #64]	; (3e3c <usart_init+0x6a0>)
    3dfa:	4b11      	ldr	r3, [pc, #68]	; (3e40 <usart_init+0x6a4>)
    3dfc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3dfe:	00ad      	lsls	r5, r5, #2
    3e00:	4b10      	ldr	r3, [pc, #64]	; (3e44 <usart_init+0x6a8>)
    3e02:	50ec      	str	r4, [r5, r3]
	return status_code;
    3e04:	2300      	movs	r3, #0
    3e06:	e4e7      	b.n	37d8 <usart_init+0x3c>
    3e08:	00006d80 	.word	0x00006d80
    3e0c:	00006c40 	.word	0x00006c40
    3e10:	000070e0 	.word	0x000070e0
    3e14:	000017e1 	.word	0x000017e1
    3e18:	000003f3 	.word	0x000003f3
    3e1c:	00007094 	.word	0x00007094
    3e20:	00006c58 	.word	0x00006c58
    3e24:	00006055 	.word	0x00006055
    3e28:	41002000 	.word	0x41002000
    3e2c:	2000011c 	.word	0x2000011c
    3e30:	00001c15 	.word	0x00001c15
    3e34:	00004d19 	.word	0x00004d19
    3e38:	00001dc5 	.word	0x00001dc5
    3e3c:	00004195 	.word	0x00004195
    3e40:	00001e95 	.word	0x00001e95
    3e44:	200009bc 	.word	0x200009bc

00003e48 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    3e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e4a:	46ce      	mov	lr, r9
    3e4c:	4647      	mov	r7, r8
    3e4e:	b580      	push	{r7, lr}
    3e50:	b083      	sub	sp, #12
    3e52:	0004      	movs	r4, r0
    3e54:	000d      	movs	r5, r1
    3e56:	4b53      	ldr	r3, [pc, #332]	; (3fa4 <usart_write_wait+0x15c>)
    3e58:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    3e5a:	2800      	cmp	r0, #0
    3e5c:	d01c      	beq.n	3e98 <usart_write_wait+0x50>
    3e5e:	2c00      	cmp	r4, #0
    3e60:	d00b      	beq.n	3e7a <usart_write_wait+0x32>
	Assert(module->hw);
    3e62:	6823      	ldr	r3, [r4, #0]
    3e64:	2b00      	cmp	r3, #0
    3e66:	d02c      	beq.n	3ec2 <usart_write_wait+0x7a>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    3e68:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    3e6a:	201c      	movs	r0, #28
	if (!(module->transmitter_enabled)) {
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d133      	bne.n	3ed8 <usart_write_wait+0x90>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    3e70:	b003      	add	sp, #12
    3e72:	bc0c      	pop	{r2, r3}
    3e74:	4690      	mov	r8, r2
    3e76:	4699      	mov	r9, r3
    3e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Assert(module);
    3e7a:	4b4b      	ldr	r3, [pc, #300]	; (3fa8 <usart_write_wait+0x160>)
    3e7c:	9301      	str	r3, [sp, #4]
    3e7e:	4b4b      	ldr	r3, [pc, #300]	; (3fac <usart_write_wait+0x164>)
    3e80:	9300      	str	r3, [sp, #0]
    3e82:	23e4      	movs	r3, #228	; 0xe4
    3e84:	33ff      	adds	r3, #255	; 0xff
    3e86:	4a4a      	ldr	r2, [pc, #296]	; (3fb0 <usart_write_wait+0x168>)
    3e88:	2101      	movs	r1, #1
    3e8a:	4e4a      	ldr	r6, [pc, #296]	; (3fb4 <usart_write_wait+0x16c>)
    3e8c:	47b0      	blx	r6
    3e8e:	4b45      	ldr	r3, [pc, #276]	; (3fa4 <usart_write_wait+0x15c>)
    3e90:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    3e92:	2800      	cmp	r0, #0
    3e94:	d1e5      	bne.n	3e62 <usart_write_wait+0x1a>
    3e96:	e001      	b.n	3e9c <usart_write_wait+0x54>
	Assert(module);
    3e98:	2c00      	cmp	r4, #0
    3e9a:	d00a      	beq.n	3eb2 <usart_write_wait+0x6a>
	Assert(module->hw);
    3e9c:	6823      	ldr	r3, [r4, #0]
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d1e2      	bne.n	3e68 <usart_write_wait+0x20>
    3ea2:	33e5      	adds	r3, #229	; 0xe5
    3ea4:	33ff      	adds	r3, #255	; 0xff
    3ea6:	4a42      	ldr	r2, [pc, #264]	; (3fb0 <usart_write_wait+0x168>)
    3ea8:	4943      	ldr	r1, [pc, #268]	; (3fb8 <usart_write_wait+0x170>)
    3eaa:	4844      	ldr	r0, [pc, #272]	; (3fbc <usart_write_wait+0x174>)
    3eac:	4c44      	ldr	r4, [pc, #272]	; (3fc0 <usart_write_wait+0x178>)
    3eae:	47a0      	blx	r4
    3eb0:	e7fe      	b.n	3eb0 <usart_write_wait+0x68>
	Assert(module);
    3eb2:	23e4      	movs	r3, #228	; 0xe4
    3eb4:	33ff      	adds	r3, #255	; 0xff
    3eb6:	4a3e      	ldr	r2, [pc, #248]	; (3fb0 <usart_write_wait+0x168>)
    3eb8:	493b      	ldr	r1, [pc, #236]	; (3fa8 <usart_write_wait+0x160>)
    3eba:	4840      	ldr	r0, [pc, #256]	; (3fbc <usart_write_wait+0x174>)
    3ebc:	4c40      	ldr	r4, [pc, #256]	; (3fc0 <usart_write_wait+0x178>)
    3ebe:	47a0      	blx	r4
    3ec0:	e7fe      	b.n	3ec0 <usart_write_wait+0x78>
	Assert(module->hw);
    3ec2:	4b3d      	ldr	r3, [pc, #244]	; (3fb8 <usart_write_wait+0x170>)
    3ec4:	9301      	str	r3, [sp, #4]
    3ec6:	4b39      	ldr	r3, [pc, #228]	; (3fac <usart_write_wait+0x164>)
    3ec8:	9300      	str	r3, [sp, #0]
    3eca:	23f2      	movs	r3, #242	; 0xf2
    3ecc:	005b      	lsls	r3, r3, #1
    3ece:	4a38      	ldr	r2, [pc, #224]	; (3fb0 <usart_write_wait+0x168>)
    3ed0:	2101      	movs	r1, #1
    3ed2:	4e38      	ldr	r6, [pc, #224]	; (3fb4 <usart_write_wait+0x16c>)
    3ed4:	47b0      	blx	r6
    3ed6:	e7c7      	b.n	3e68 <usart_write_wait+0x20>
	if (module->remaining_tx_buffer_length > 0) {
    3ed8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    3eda:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    3edc:	3817      	subs	r0, #23
	if (module->remaining_tx_buffer_length > 0) {
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d1c6      	bne.n	3e70 <usart_write_wait+0x28>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3ee2:	6826      	ldr	r6, [r4, #0]
    3ee4:	4b2f      	ldr	r3, [pc, #188]	; (3fa4 <usart_write_wait+0x15c>)
    3ee6:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    3ee8:	2800      	cmp	r0, #0
    3eea:	d00f      	beq.n	3f0c <usart_write_wait+0xc4>
    3eec:	2c00      	cmp	r4, #0
    3eee:	d002      	beq.n	3ef6 <usart_write_wait+0xae>
    3ef0:	4b2c      	ldr	r3, [pc, #176]	; (3fa4 <usart_write_wait+0x15c>)
    3ef2:	4699      	mov	r9, r3
    3ef4:	e02b      	b.n	3f4e <usart_write_wait+0x106>
    3ef6:	4b2c      	ldr	r3, [pc, #176]	; (3fa8 <usart_write_wait+0x160>)
    3ef8:	9301      	str	r3, [sp, #4]
    3efa:	4b2c      	ldr	r3, [pc, #176]	; (3fac <usart_write_wait+0x164>)
    3efc:	9300      	str	r3, [sp, #0]
    3efe:	2381      	movs	r3, #129	; 0x81
    3f00:	00db      	lsls	r3, r3, #3
    3f02:	4a30      	ldr	r2, [pc, #192]	; (3fc4 <usart_write_wait+0x17c>)
    3f04:	2101      	movs	r1, #1
    3f06:	4f2b      	ldr	r7, [pc, #172]	; (3fb4 <usart_write_wait+0x16c>)
    3f08:	47b8      	blx	r7
    3f0a:	e7f1      	b.n	3ef0 <usart_write_wait+0xa8>
    3f0c:	2c00      	cmp	r4, #0
    3f0e:	d1ef      	bne.n	3ef0 <usart_write_wait+0xa8>
    3f10:	2381      	movs	r3, #129	; 0x81
    3f12:	00db      	lsls	r3, r3, #3
    3f14:	4a2b      	ldr	r2, [pc, #172]	; (3fc4 <usart_write_wait+0x17c>)
    3f16:	4924      	ldr	r1, [pc, #144]	; (3fa8 <usart_write_wait+0x160>)
    3f18:	4828      	ldr	r0, [pc, #160]	; (3fbc <usart_write_wait+0x174>)
    3f1a:	4c29      	ldr	r4, [pc, #164]	; (3fc0 <usart_write_wait+0x178>)
    3f1c:	47a0      	blx	r4
    3f1e:	e7fe      	b.n	3f1e <usart_write_wait+0xd6>
	Assert(module);
    3f20:	4b21      	ldr	r3, [pc, #132]	; (3fa8 <usart_write_wait+0x160>)
    3f22:	9301      	str	r3, [sp, #4]
    3f24:	4b21      	ldr	r3, [pc, #132]	; (3fac <usart_write_wait+0x164>)
    3f26:	9300      	str	r3, [sp, #0]
    3f28:	4b27      	ldr	r3, [pc, #156]	; (3fc8 <usart_write_wait+0x180>)
    3f2a:	4a26      	ldr	r2, [pc, #152]	; (3fc4 <usart_write_wait+0x17c>)
    3f2c:	2101      	movs	r1, #1
    3f2e:	4f21      	ldr	r7, [pc, #132]	; (3fb4 <usart_write_wait+0x16c>)
    3f30:	47b8      	blx	r7
    3f32:	4b1c      	ldr	r3, [pc, #112]	; (3fa4 <usart_write_wait+0x15c>)
    3f34:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    3f36:	2800      	cmp	r0, #0
    3f38:	d10f      	bne.n	3f5a <usart_write_wait+0x112>
    3f3a:	e001      	b.n	3f40 <usart_write_wait+0xf8>
	Assert(module);
    3f3c:	2c00      	cmp	r4, #0
    3f3e:	d01a      	beq.n	3f76 <usart_write_wait+0x12e>
	Assert(module->hw);
    3f40:	6823      	ldr	r3, [r4, #0]
    3f42:	2b00      	cmp	r3, #0
    3f44:	d01e      	beq.n	3f84 <usart_write_wait+0x13c>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3f46:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3f48:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d022      	beq.n	3f94 <usart_write_wait+0x14c>
    3f4e:	464b      	mov	r3, r9
    3f50:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    3f52:	2800      	cmp	r0, #0
    3f54:	d0f2      	beq.n	3f3c <usart_write_wait+0xf4>
    3f56:	2c00      	cmp	r4, #0
    3f58:	d0e2      	beq.n	3f20 <usart_write_wait+0xd8>
	Assert(module->hw);
    3f5a:	6823      	ldr	r3, [r4, #0]
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	d1f2      	bne.n	3f46 <usart_write_wait+0xfe>
    3f60:	4b15      	ldr	r3, [pc, #84]	; (3fb8 <usart_write_wait+0x170>)
    3f62:	9301      	str	r3, [sp, #4]
    3f64:	4b11      	ldr	r3, [pc, #68]	; (3fac <usart_write_wait+0x164>)
    3f66:	9300      	str	r3, [sp, #0]
    3f68:	23fd      	movs	r3, #253	; 0xfd
    3f6a:	009b      	lsls	r3, r3, #2
    3f6c:	4a15      	ldr	r2, [pc, #84]	; (3fc4 <usart_write_wait+0x17c>)
    3f6e:	2101      	movs	r1, #1
    3f70:	4f10      	ldr	r7, [pc, #64]	; (3fb4 <usart_write_wait+0x16c>)
    3f72:	47b8      	blx	r7
    3f74:	e7e7      	b.n	3f46 <usart_write_wait+0xfe>
	Assert(module);
    3f76:	4b14      	ldr	r3, [pc, #80]	; (3fc8 <usart_write_wait+0x180>)
    3f78:	4a12      	ldr	r2, [pc, #72]	; (3fc4 <usart_write_wait+0x17c>)
    3f7a:	490b      	ldr	r1, [pc, #44]	; (3fa8 <usart_write_wait+0x160>)
    3f7c:	480f      	ldr	r0, [pc, #60]	; (3fbc <usart_write_wait+0x174>)
    3f7e:	4c10      	ldr	r4, [pc, #64]	; (3fc0 <usart_write_wait+0x178>)
    3f80:	47a0      	blx	r4
    3f82:	e7fe      	b.n	3f82 <usart_write_wait+0x13a>
	Assert(module->hw);
    3f84:	23fd      	movs	r3, #253	; 0xfd
    3f86:	009b      	lsls	r3, r3, #2
    3f88:	4a0e      	ldr	r2, [pc, #56]	; (3fc4 <usart_write_wait+0x17c>)
    3f8a:	490b      	ldr	r1, [pc, #44]	; (3fb8 <usart_write_wait+0x170>)
    3f8c:	480b      	ldr	r0, [pc, #44]	; (3fbc <usart_write_wait+0x174>)
    3f8e:	4c0c      	ldr	r4, [pc, #48]	; (3fc0 <usart_write_wait+0x178>)
    3f90:	47a0      	blx	r4
    3f92:	e7fe      	b.n	3f92 <usart_write_wait+0x14a>
	usart_hw->DATA.reg = tx_data;
    3f94:	8535      	strh	r5, [r6, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    3f96:	2202      	movs	r2, #2
    3f98:	7e33      	ldrb	r3, [r6, #24]
    3f9a:	4213      	tst	r3, r2
    3f9c:	d0fc      	beq.n	3f98 <usart_write_wait+0x150>
	return STATUS_OK;
    3f9e:	2000      	movs	r0, #0
    3fa0:	e766      	b.n	3e70 <usart_write_wait+0x28>
    3fa2:	46c0      	nop			; (mov r8, r8)
    3fa4:	2000011c 	.word	0x2000011c
    3fa8:	00007094 	.word	0x00007094
    3fac:	00006c40 	.word	0x00006c40
    3fb0:	000070b0 	.word	0x000070b0
    3fb4:	000017e1 	.word	0x000017e1
    3fb8:	00006d80 	.word	0x00006d80
    3fbc:	00006c58 	.word	0x00006c58
    3fc0:	00006055 	.word	0x00006055
    3fc4:	000070e0 	.word	0x000070e0
    3fc8:	000003f3 	.word	0x000003f3

00003fcc <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    3fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fce:	46ce      	mov	lr, r9
    3fd0:	4647      	mov	r7, r8
    3fd2:	b580      	push	{r7, lr}
    3fd4:	b083      	sub	sp, #12
    3fd6:	0004      	movs	r4, r0
    3fd8:	000d      	movs	r5, r1
    3fda:	4b63      	ldr	r3, [pc, #396]	; (4168 <usart_read_wait+0x19c>)
    3fdc:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    3fde:	2800      	cmp	r0, #0
    3fe0:	d01c      	beq.n	401c <usart_read_wait+0x50>
    3fe2:	2c00      	cmp	r4, #0
    3fe4:	d00b      	beq.n	3ffe <usart_read_wait+0x32>
	Assert(module->hw);
    3fe6:	6823      	ldr	r3, [r4, #0]
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d02b      	beq.n	4044 <usart_read_wait+0x78>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3fec:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    3fee:	201c      	movs	r0, #28
	if (!(module->receiver_enabled)) {
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	d131      	bne.n	4058 <usart_read_wait+0x8c>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    3ff4:	b003      	add	sp, #12
    3ff6:	bc0c      	pop	{r2, r3}
    3ff8:	4690      	mov	r8, r2
    3ffa:	4699      	mov	r9, r3
    3ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Assert(module);
    3ffe:	4b5b      	ldr	r3, [pc, #364]	; (416c <usart_read_wait+0x1a0>)
    4000:	9301      	str	r3, [sp, #4]
    4002:	4b5b      	ldr	r3, [pc, #364]	; (4170 <usart_read_wait+0x1a4>)
    4004:	9300      	str	r3, [sp, #0]
    4006:	2389      	movs	r3, #137	; 0x89
    4008:	009b      	lsls	r3, r3, #2
    400a:	4a5a      	ldr	r2, [pc, #360]	; (4174 <usart_read_wait+0x1a8>)
    400c:	2101      	movs	r1, #1
    400e:	4e5a      	ldr	r6, [pc, #360]	; (4178 <usart_read_wait+0x1ac>)
    4010:	47b0      	blx	r6
    4012:	4b55      	ldr	r3, [pc, #340]	; (4168 <usart_read_wait+0x19c>)
    4014:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    4016:	2800      	cmp	r0, #0
    4018:	d1e5      	bne.n	3fe6 <usart_read_wait+0x1a>
    401a:	e001      	b.n	4020 <usart_read_wait+0x54>
	Assert(module);
    401c:	2c00      	cmp	r4, #0
    401e:	d009      	beq.n	4034 <usart_read_wait+0x68>
	Assert(module->hw);
    4020:	6823      	ldr	r3, [r4, #0]
    4022:	2b00      	cmp	r3, #0
    4024:	d1e2      	bne.n	3fec <usart_read_wait+0x20>
    4026:	4b55      	ldr	r3, [pc, #340]	; (417c <usart_read_wait+0x1b0>)
    4028:	4a52      	ldr	r2, [pc, #328]	; (4174 <usart_read_wait+0x1a8>)
    402a:	4955      	ldr	r1, [pc, #340]	; (4180 <usart_read_wait+0x1b4>)
    402c:	4855      	ldr	r0, [pc, #340]	; (4184 <usart_read_wait+0x1b8>)
    402e:	4c56      	ldr	r4, [pc, #344]	; (4188 <usart_read_wait+0x1bc>)
    4030:	47a0      	blx	r4
    4032:	e7fe      	b.n	4032 <usart_read_wait+0x66>
	Assert(module);
    4034:	2389      	movs	r3, #137	; 0x89
    4036:	009b      	lsls	r3, r3, #2
    4038:	4a4e      	ldr	r2, [pc, #312]	; (4174 <usart_read_wait+0x1a8>)
    403a:	494c      	ldr	r1, [pc, #304]	; (416c <usart_read_wait+0x1a0>)
    403c:	4851      	ldr	r0, [pc, #324]	; (4184 <usart_read_wait+0x1b8>)
    403e:	4c52      	ldr	r4, [pc, #328]	; (4188 <usart_read_wait+0x1bc>)
    4040:	47a0      	blx	r4
    4042:	e7fe      	b.n	4042 <usart_read_wait+0x76>
	Assert(module->hw);
    4044:	4b4e      	ldr	r3, [pc, #312]	; (4180 <usart_read_wait+0x1b4>)
    4046:	9301      	str	r3, [sp, #4]
    4048:	4b49      	ldr	r3, [pc, #292]	; (4170 <usart_read_wait+0x1a4>)
    404a:	9300      	str	r3, [sp, #0]
    404c:	4b4b      	ldr	r3, [pc, #300]	; (417c <usart_read_wait+0x1b0>)
    404e:	4a49      	ldr	r2, [pc, #292]	; (4174 <usart_read_wait+0x1a8>)
    4050:	2101      	movs	r1, #1
    4052:	4e49      	ldr	r6, [pc, #292]	; (4178 <usart_read_wait+0x1ac>)
    4054:	47b0      	blx	r6
    4056:	e7c9      	b.n	3fec <usart_read_wait+0x20>
	if (module->remaining_rx_buffer_length > 0) {
    4058:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    405a:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    405c:	3817      	subs	r0, #23
	if (module->remaining_rx_buffer_length > 0) {
    405e:	2b00      	cmp	r3, #0
    4060:	d1c8      	bne.n	3ff4 <usart_read_wait+0x28>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4062:	6826      	ldr	r6, [r4, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4064:	7e33      	ldrb	r3, [r6, #24]
    4066:	075b      	lsls	r3, r3, #29
    4068:	d5c4      	bpl.n	3ff4 <usart_read_wait+0x28>
    406a:	4b3f      	ldr	r3, [pc, #252]	; (4168 <usart_read_wait+0x19c>)
    406c:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    406e:	2800      	cmp	r0, #0
    4070:	d00f      	beq.n	4092 <usart_read_wait+0xc6>
    4072:	2c00      	cmp	r4, #0
    4074:	d002      	beq.n	407c <usart_read_wait+0xb0>
    4076:	4b3c      	ldr	r3, [pc, #240]	; (4168 <usart_read_wait+0x19c>)
    4078:	4699      	mov	r9, r3
    407a:	e02b      	b.n	40d4 <usart_read_wait+0x108>
    407c:	4b3b      	ldr	r3, [pc, #236]	; (416c <usart_read_wait+0x1a0>)
    407e:	9301      	str	r3, [sp, #4]
    4080:	4b3b      	ldr	r3, [pc, #236]	; (4170 <usart_read_wait+0x1a4>)
    4082:	9300      	str	r3, [sp, #0]
    4084:	2381      	movs	r3, #129	; 0x81
    4086:	00db      	lsls	r3, r3, #3
    4088:	4a40      	ldr	r2, [pc, #256]	; (418c <usart_read_wait+0x1c0>)
    408a:	2101      	movs	r1, #1
    408c:	4f3a      	ldr	r7, [pc, #232]	; (4178 <usart_read_wait+0x1ac>)
    408e:	47b8      	blx	r7
    4090:	e7f1      	b.n	4076 <usart_read_wait+0xaa>
    4092:	2c00      	cmp	r4, #0
    4094:	d1ef      	bne.n	4076 <usart_read_wait+0xaa>
    4096:	2381      	movs	r3, #129	; 0x81
    4098:	00db      	lsls	r3, r3, #3
    409a:	4a3c      	ldr	r2, [pc, #240]	; (418c <usart_read_wait+0x1c0>)
    409c:	4933      	ldr	r1, [pc, #204]	; (416c <usart_read_wait+0x1a0>)
    409e:	4839      	ldr	r0, [pc, #228]	; (4184 <usart_read_wait+0x1b8>)
    40a0:	4c39      	ldr	r4, [pc, #228]	; (4188 <usart_read_wait+0x1bc>)
    40a2:	47a0      	blx	r4
    40a4:	e7fe      	b.n	40a4 <usart_read_wait+0xd8>
	Assert(module);
    40a6:	4b31      	ldr	r3, [pc, #196]	; (416c <usart_read_wait+0x1a0>)
    40a8:	9301      	str	r3, [sp, #4]
    40aa:	4b31      	ldr	r3, [pc, #196]	; (4170 <usart_read_wait+0x1a4>)
    40ac:	9300      	str	r3, [sp, #0]
    40ae:	4b38      	ldr	r3, [pc, #224]	; (4190 <usart_read_wait+0x1c4>)
    40b0:	4a36      	ldr	r2, [pc, #216]	; (418c <usart_read_wait+0x1c0>)
    40b2:	2101      	movs	r1, #1
    40b4:	4f30      	ldr	r7, [pc, #192]	; (4178 <usart_read_wait+0x1ac>)
    40b6:	47b8      	blx	r7
    40b8:	4b2b      	ldr	r3, [pc, #172]	; (4168 <usart_read_wait+0x19c>)
    40ba:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    40bc:	2800      	cmp	r0, #0
    40be:	d10f      	bne.n	40e0 <usart_read_wait+0x114>
    40c0:	e001      	b.n	40c6 <usart_read_wait+0xfa>
	Assert(module);
    40c2:	2c00      	cmp	r4, #0
    40c4:	d01a      	beq.n	40fc <usart_read_wait+0x130>
	Assert(module->hw);
    40c6:	6823      	ldr	r3, [r4, #0]
    40c8:	2b00      	cmp	r3, #0
    40ca:	d01e      	beq.n	410a <usart_read_wait+0x13e>
	SercomUsart *const usart_hw = &(module->hw->USART);
    40cc:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    40ce:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    40d0:	2b00      	cmp	r3, #0
    40d2:	d022      	beq.n	411a <usart_read_wait+0x14e>
    40d4:	464b      	mov	r3, r9
    40d6:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    40d8:	2800      	cmp	r0, #0
    40da:	d0f2      	beq.n	40c2 <usart_read_wait+0xf6>
    40dc:	2c00      	cmp	r4, #0
    40de:	d0e2      	beq.n	40a6 <usart_read_wait+0xda>
	Assert(module->hw);
    40e0:	6823      	ldr	r3, [r4, #0]
    40e2:	2b00      	cmp	r3, #0
    40e4:	d1f2      	bne.n	40cc <usart_read_wait+0x100>
    40e6:	4b26      	ldr	r3, [pc, #152]	; (4180 <usart_read_wait+0x1b4>)
    40e8:	9301      	str	r3, [sp, #4]
    40ea:	4b21      	ldr	r3, [pc, #132]	; (4170 <usart_read_wait+0x1a4>)
    40ec:	9300      	str	r3, [sp, #0]
    40ee:	23fd      	movs	r3, #253	; 0xfd
    40f0:	009b      	lsls	r3, r3, #2
    40f2:	4a26      	ldr	r2, [pc, #152]	; (418c <usart_read_wait+0x1c0>)
    40f4:	2101      	movs	r1, #1
    40f6:	4f20      	ldr	r7, [pc, #128]	; (4178 <usart_read_wait+0x1ac>)
    40f8:	47b8      	blx	r7
    40fa:	e7e7      	b.n	40cc <usart_read_wait+0x100>
	Assert(module);
    40fc:	4b24      	ldr	r3, [pc, #144]	; (4190 <usart_read_wait+0x1c4>)
    40fe:	4a23      	ldr	r2, [pc, #140]	; (418c <usart_read_wait+0x1c0>)
    4100:	491a      	ldr	r1, [pc, #104]	; (416c <usart_read_wait+0x1a0>)
    4102:	4820      	ldr	r0, [pc, #128]	; (4184 <usart_read_wait+0x1b8>)
    4104:	4c20      	ldr	r4, [pc, #128]	; (4188 <usart_read_wait+0x1bc>)
    4106:	47a0      	blx	r4
    4108:	e7fe      	b.n	4108 <usart_read_wait+0x13c>
	Assert(module->hw);
    410a:	23fd      	movs	r3, #253	; 0xfd
    410c:	009b      	lsls	r3, r3, #2
    410e:	4a1f      	ldr	r2, [pc, #124]	; (418c <usart_read_wait+0x1c0>)
    4110:	491b      	ldr	r1, [pc, #108]	; (4180 <usart_read_wait+0x1b4>)
    4112:	481c      	ldr	r0, [pc, #112]	; (4184 <usart_read_wait+0x1b8>)
    4114:	4c1c      	ldr	r4, [pc, #112]	; (4188 <usart_read_wait+0x1bc>)
    4116:	47a0      	blx	r4
    4118:	e7fe      	b.n	4118 <usart_read_wait+0x14c>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    411a:	8b73      	ldrh	r3, [r6, #26]
    411c:	b2db      	uxtb	r3, r3
	if (error_code) {
    411e:	069a      	lsls	r2, r3, #26
    4120:	d01d      	beq.n	415e <usart_read_wait+0x192>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4122:	079a      	lsls	r2, r3, #30
    4124:	d503      	bpl.n	412e <usart_read_wait+0x162>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4126:	2302      	movs	r3, #2
    4128:	8373      	strh	r3, [r6, #26]
			return STATUS_ERR_BAD_FORMAT;
    412a:	201a      	movs	r0, #26
    412c:	e762      	b.n	3ff4 <usart_read_wait+0x28>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    412e:	075a      	lsls	r2, r3, #29
    4130:	d503      	bpl.n	413a <usart_read_wait+0x16e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4132:	2304      	movs	r3, #4
    4134:	8373      	strh	r3, [r6, #26]
			return STATUS_ERR_OVERFLOW;
    4136:	201e      	movs	r0, #30
    4138:	e75c      	b.n	3ff4 <usart_read_wait+0x28>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    413a:	07da      	lsls	r2, r3, #31
    413c:	d503      	bpl.n	4146 <usart_read_wait+0x17a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    413e:	2301      	movs	r3, #1
    4140:	8373      	strh	r3, [r6, #26]
			return STATUS_ERR_BAD_DATA;
    4142:	2013      	movs	r0, #19
    4144:	e756      	b.n	3ff4 <usart_read_wait+0x28>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4146:	06da      	lsls	r2, r3, #27
    4148:	d503      	bpl.n	4152 <usart_read_wait+0x186>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    414a:	2310      	movs	r3, #16
    414c:	8373      	strh	r3, [r6, #26]
			return STATUS_ERR_PROTOCOL;
    414e:	2042      	movs	r0, #66	; 0x42
    4150:	e750      	b.n	3ff4 <usart_read_wait+0x28>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4152:	069b      	lsls	r3, r3, #26
    4154:	d503      	bpl.n	415e <usart_read_wait+0x192>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4156:	2320      	movs	r3, #32
    4158:	8373      	strh	r3, [r6, #26]
			return STATUS_ERR_PACKET_COLLISION;
    415a:	2041      	movs	r0, #65	; 0x41
    415c:	e74a      	b.n	3ff4 <usart_read_wait+0x28>
	*rx_data = usart_hw->DATA.reg;
    415e:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    4160:	802b      	strh	r3, [r5, #0]
	return STATUS_OK;
    4162:	2000      	movs	r0, #0
    4164:	e746      	b.n	3ff4 <usart_read_wait+0x28>
    4166:	46c0      	nop			; (mov r8, r8)
    4168:	2000011c 	.word	0x2000011c
    416c:	00007094 	.word	0x00007094
    4170:	00006c40 	.word	0x00006c40
    4174:	000070b0 	.word	0x000070b0
    4178:	000017e1 	.word	0x000017e1
    417c:	00000225 	.word	0x00000225
    4180:	00006d80 	.word	0x00006d80
    4184:	00006c58 	.word	0x00006c58
    4188:	00006055 	.word	0x00006055
    418c:	000070e0 	.word	0x000070e0
    4190:	000003f3 	.word	0x000003f3

00004194 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4194:	b5f0      	push	{r4, r5, r6, r7, lr}
    4196:	b083      	sub	sp, #12
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4198:	0080      	lsls	r0, r0, #2
    419a:	4b8d      	ldr	r3, [pc, #564]	; (43d0 <_usart_interrupt_handler+0x23c>)
    419c:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    419e:	6825      	ldr	r5, [r4, #0]
    41a0:	4b8c      	ldr	r3, [pc, #560]	; (43d4 <_usart_interrupt_handler+0x240>)
    41a2:	6818      	ldr	r0, [r3, #0]
	Assert(module);
    41a4:	2800      	cmp	r0, #0
    41a6:	d00e      	beq.n	41c6 <_usart_interrupt_handler+0x32>
    41a8:	2c00      	cmp	r4, #0
    41aa:	d001      	beq.n	41b0 <_usart_interrupt_handler+0x1c>
    41ac:	4e89      	ldr	r6, [pc, #548]	; (43d4 <_usart_interrupt_handler+0x240>)
    41ae:	e02b      	b.n	4208 <_usart_interrupt_handler+0x74>
    41b0:	4b89      	ldr	r3, [pc, #548]	; (43d8 <_usart_interrupt_handler+0x244>)
    41b2:	9301      	str	r3, [sp, #4]
    41b4:	4b89      	ldr	r3, [pc, #548]	; (43dc <_usart_interrupt_handler+0x248>)
    41b6:	9300      	str	r3, [sp, #0]
    41b8:	2381      	movs	r3, #129	; 0x81
    41ba:	00db      	lsls	r3, r3, #3
    41bc:	4a88      	ldr	r2, [pc, #544]	; (43e0 <_usart_interrupt_handler+0x24c>)
    41be:	2101      	movs	r1, #1
    41c0:	4e88      	ldr	r6, [pc, #544]	; (43e4 <_usart_interrupt_handler+0x250>)
    41c2:	47b0      	blx	r6
    41c4:	e7f2      	b.n	41ac <_usart_interrupt_handler+0x18>
    41c6:	2c00      	cmp	r4, #0
    41c8:	d1f0      	bne.n	41ac <_usart_interrupt_handler+0x18>
    41ca:	2381      	movs	r3, #129	; 0x81
    41cc:	00db      	lsls	r3, r3, #3
    41ce:	4a84      	ldr	r2, [pc, #528]	; (43e0 <_usart_interrupt_handler+0x24c>)
    41d0:	4981      	ldr	r1, [pc, #516]	; (43d8 <_usart_interrupt_handler+0x244>)
    41d2:	4885      	ldr	r0, [pc, #532]	; (43e8 <_usart_interrupt_handler+0x254>)
    41d4:	4c85      	ldr	r4, [pc, #532]	; (43ec <_usart_interrupt_handler+0x258>)
    41d6:	47a0      	blx	r4
    41d8:	e7fe      	b.n	41d8 <_usart_interrupt_handler+0x44>
	Assert(module);
    41da:	4b7f      	ldr	r3, [pc, #508]	; (43d8 <_usart_interrupt_handler+0x244>)
    41dc:	9301      	str	r3, [sp, #4]
    41de:	4b7f      	ldr	r3, [pc, #508]	; (43dc <_usart_interrupt_handler+0x248>)
    41e0:	9300      	str	r3, [sp, #0]
    41e2:	4b83      	ldr	r3, [pc, #524]	; (43f0 <_usart_interrupt_handler+0x25c>)
    41e4:	4a7e      	ldr	r2, [pc, #504]	; (43e0 <_usart_interrupt_handler+0x24c>)
    41e6:	2101      	movs	r1, #1
    41e8:	4f7e      	ldr	r7, [pc, #504]	; (43e4 <_usart_interrupt_handler+0x250>)
    41ea:	47b8      	blx	r7
    41ec:	4b79      	ldr	r3, [pc, #484]	; (43d4 <_usart_interrupt_handler+0x240>)
    41ee:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    41f0:	2800      	cmp	r0, #0
    41f2:	d10e      	bne.n	4212 <_usart_interrupt_handler+0x7e>
    41f4:	e001      	b.n	41fa <_usart_interrupt_handler+0x66>
	Assert(module);
    41f6:	2c00      	cmp	r4, #0
    41f8:	d019      	beq.n	422e <_usart_interrupt_handler+0x9a>
	Assert(module->hw);
    41fa:	6823      	ldr	r3, [r4, #0]
    41fc:	2b00      	cmp	r3, #0
    41fe:	d01d      	beq.n	423c <_usart_interrupt_handler+0xa8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4200:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    4202:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    4204:	2b00      	cmp	r3, #0
    4206:	d021      	beq.n	424c <_usart_interrupt_handler+0xb8>
    4208:	6830      	ldr	r0, [r6, #0]
	Assert(module);
    420a:	2800      	cmp	r0, #0
    420c:	d0f3      	beq.n	41f6 <_usart_interrupt_handler+0x62>
    420e:	2c00      	cmp	r4, #0
    4210:	d0e3      	beq.n	41da <_usart_interrupt_handler+0x46>
	Assert(module->hw);
    4212:	6823      	ldr	r3, [r4, #0]
    4214:	2b00      	cmp	r3, #0
    4216:	d1f3      	bne.n	4200 <_usart_interrupt_handler+0x6c>
    4218:	4b76      	ldr	r3, [pc, #472]	; (43f4 <_usart_interrupt_handler+0x260>)
    421a:	9301      	str	r3, [sp, #4]
    421c:	4b6f      	ldr	r3, [pc, #444]	; (43dc <_usart_interrupt_handler+0x248>)
    421e:	9300      	str	r3, [sp, #0]
    4220:	23fd      	movs	r3, #253	; 0xfd
    4222:	009b      	lsls	r3, r3, #2
    4224:	4a6e      	ldr	r2, [pc, #440]	; (43e0 <_usart_interrupt_handler+0x24c>)
    4226:	2101      	movs	r1, #1
    4228:	4f6e      	ldr	r7, [pc, #440]	; (43e4 <_usart_interrupt_handler+0x250>)
    422a:	47b8      	blx	r7
    422c:	e7e8      	b.n	4200 <_usart_interrupt_handler+0x6c>
	Assert(module);
    422e:	4b70      	ldr	r3, [pc, #448]	; (43f0 <_usart_interrupt_handler+0x25c>)
    4230:	4a6b      	ldr	r2, [pc, #428]	; (43e0 <_usart_interrupt_handler+0x24c>)
    4232:	4969      	ldr	r1, [pc, #420]	; (43d8 <_usart_interrupt_handler+0x244>)
    4234:	486c      	ldr	r0, [pc, #432]	; (43e8 <_usart_interrupt_handler+0x254>)
    4236:	4c6d      	ldr	r4, [pc, #436]	; (43ec <_usart_interrupt_handler+0x258>)
    4238:	47a0      	blx	r4
    423a:	e7fe      	b.n	423a <_usart_interrupt_handler+0xa6>
	Assert(module->hw);
    423c:	23fd      	movs	r3, #253	; 0xfd
    423e:	009b      	lsls	r3, r3, #2
    4240:	4a67      	ldr	r2, [pc, #412]	; (43e0 <_usart_interrupt_handler+0x24c>)
    4242:	496c      	ldr	r1, [pc, #432]	; (43f4 <_usart_interrupt_handler+0x260>)
    4244:	4868      	ldr	r0, [pc, #416]	; (43e8 <_usart_interrupt_handler+0x254>)
    4246:	4c69      	ldr	r4, [pc, #420]	; (43ec <_usart_interrupt_handler+0x258>)
    4248:	47a0      	blx	r4
    424a:	e7fe      	b.n	424a <_usart_interrupt_handler+0xb6>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    424c:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    424e:	7daf      	ldrb	r7, [r5, #22]
    4250:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
    4252:	2330      	movs	r3, #48	; 0x30
    4254:	5ce3      	ldrb	r3, [r4, r3]
    4256:	2231      	movs	r2, #49	; 0x31
    4258:	5ca6      	ldrb	r6, [r4, r2]
    425a:	401e      	ands	r6, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    425c:	07fb      	lsls	r3, r7, #31
    425e:	d519      	bpl.n	4294 <_usart_interrupt_handler+0x100>
		if (module->remaining_tx_buffer_length) {
    4260:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    4262:	b29b      	uxth	r3, r3
    4264:	2b00      	cmp	r3, #0
    4266:	d059      	beq.n	431c <_usart_interrupt_handler+0x188>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4268:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    426a:	7811      	ldrb	r1, [r2, #0]
    426c:	b2c9      	uxtb	r1, r1
    426e:	b28b      	uxth	r3, r1
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4270:	1c50      	adds	r0, r2, #1
    4272:	62a0      	str	r0, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4274:	7960      	ldrb	r0, [r4, #5]
    4276:	2801      	cmp	r0, #1
    4278:	d04a      	beq.n	4310 <_usart_interrupt_handler+0x17c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    427a:	05db      	lsls	r3, r3, #23
    427c:	0ddb      	lsrs	r3, r3, #23
    427e:	852b      	strh	r3, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4280:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    4282:	3b01      	subs	r3, #1
    4284:	b29b      	uxth	r3, r3
    4286:	85e3      	strh	r3, [r4, #46]	; 0x2e
    4288:	2b00      	cmp	r3, #0
    428a:	d103      	bne.n	4294 <_usart_interrupt_handler+0x100>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    428c:	3301      	adds	r3, #1
    428e:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4290:	3301      	adds	r3, #1
    4292:	75ab      	strb	r3, [r5, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4294:	07bb      	lsls	r3, r7, #30
    4296:	d506      	bpl.n	42a6 <_usart_interrupt_handler+0x112>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4298:	2302      	movs	r3, #2
    429a:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
    429c:	2200      	movs	r2, #0
    429e:	3331      	adds	r3, #49	; 0x31
    42a0:	54e2      	strb	r2, [r4, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    42a2:	07f3      	lsls	r3, r6, #31
    42a4:	d43d      	bmi.n	4322 <_usart_interrupt_handler+0x18e>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    42a6:	077b      	lsls	r3, r7, #29
    42a8:	d517      	bpl.n	42da <_usart_interrupt_handler+0x146>

		if (module->remaining_rx_buffer_length) {
    42aa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    42ac:	b29b      	uxth	r3, r3
    42ae:	2b00      	cmp	r3, #0
    42b0:	d100      	bne.n	42b4 <_usart_interrupt_handler+0x120>
    42b2:	e082      	b.n	43ba <_usart_interrupt_handler+0x226>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    42b4:	8b6a      	ldrh	r2, [r5, #26]
    42b6:	b2d2      	uxtb	r2, r2
    42b8:	233f      	movs	r3, #63	; 0x3f
    42ba:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    42bc:	0711      	lsls	r1, r2, #28
    42be:	d501      	bpl.n	42c4 <_usart_interrupt_handler+0x130>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    42c0:	2337      	movs	r3, #55	; 0x37
    42c2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    42c4:	2b00      	cmp	r3, #0
    42c6:	d055      	beq.n	4374 <_usart_interrupt_handler+0x1e0>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    42c8:	079a      	lsls	r2, r3, #30
    42ca:	d52e      	bpl.n	432a <_usart_interrupt_handler+0x196>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    42cc:	221a      	movs	r2, #26
    42ce:	2332      	movs	r3, #50	; 0x32
    42d0:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    42d2:	3b30      	subs	r3, #48	; 0x30
    42d4:	836b      	strh	r3, [r5, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    42d6:	0773      	lsls	r3, r6, #29
    42d8:	d448      	bmi.n	436c <_usart_interrupt_handler+0x1d8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    42da:	06fb      	lsls	r3, r7, #27
    42dc:	d505      	bpl.n	42ea <_usart_interrupt_handler+0x156>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    42de:	2310      	movs	r3, #16
    42e0:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    42e2:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    42e4:	06f3      	lsls	r3, r6, #27
    42e6:	d500      	bpl.n	42ea <_usart_interrupt_handler+0x156>
    42e8:	e06a      	b.n	43c0 <_usart_interrupt_handler+0x22c>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    42ea:	06bb      	lsls	r3, r7, #26
    42ec:	d504      	bpl.n	42f8 <_usart_interrupt_handler+0x164>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    42ee:	2320      	movs	r3, #32
    42f0:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    42f2:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    42f4:	0733      	lsls	r3, r6, #28
    42f6:	d467      	bmi.n	43c8 <_usart_interrupt_handler+0x234>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    42f8:	073b      	lsls	r3, r7, #28
    42fa:	d507      	bpl.n	430c <_usart_interrupt_handler+0x178>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    42fc:	2308      	movs	r3, #8
    42fe:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4300:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4302:	06b3      	lsls	r3, r6, #26
    4304:	d502      	bpl.n	430c <_usart_interrupt_handler+0x178>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4306:	6a23      	ldr	r3, [r4, #32]
    4308:	0020      	movs	r0, r4
    430a:	4798      	blx	r3
		}
	}
#endif
}
    430c:	b003      	add	sp, #12
    430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4310:	7853      	ldrb	r3, [r2, #1]
    4312:	021b      	lsls	r3, r3, #8
    4314:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4316:	3202      	adds	r2, #2
    4318:	62a2      	str	r2, [r4, #40]	; 0x28
    431a:	e7ae      	b.n	427a <_usart_interrupt_handler+0xe6>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    431c:	2301      	movs	r3, #1
    431e:	752b      	strb	r3, [r5, #20]
    4320:	e7b8      	b.n	4294 <_usart_interrupt_handler+0x100>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4322:	0020      	movs	r0, r4
    4324:	68e3      	ldr	r3, [r4, #12]
    4326:	4798      	blx	r3
    4328:	e7bd      	b.n	42a6 <_usart_interrupt_handler+0x112>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    432a:	075a      	lsls	r2, r3, #29
    432c:	d505      	bpl.n	433a <_usart_interrupt_handler+0x1a6>
					module->rx_status = STATUS_ERR_OVERFLOW;
    432e:	221e      	movs	r2, #30
    4330:	2332      	movs	r3, #50	; 0x32
    4332:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4334:	3b2e      	subs	r3, #46	; 0x2e
    4336:	836b      	strh	r3, [r5, #26]
    4338:	e7cd      	b.n	42d6 <_usart_interrupt_handler+0x142>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    433a:	07da      	lsls	r2, r3, #31
    433c:	d505      	bpl.n	434a <_usart_interrupt_handler+0x1b6>
					module->rx_status = STATUS_ERR_BAD_DATA;
    433e:	2213      	movs	r2, #19
    4340:	2332      	movs	r3, #50	; 0x32
    4342:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4344:	3b31      	subs	r3, #49	; 0x31
    4346:	836b      	strh	r3, [r5, #26]
    4348:	e7c5      	b.n	42d6 <_usart_interrupt_handler+0x142>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    434a:	06da      	lsls	r2, r3, #27
    434c:	d505      	bpl.n	435a <_usart_interrupt_handler+0x1c6>
					module->rx_status = STATUS_ERR_PROTOCOL;
    434e:	2242      	movs	r2, #66	; 0x42
    4350:	2332      	movs	r3, #50	; 0x32
    4352:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4354:	3b22      	subs	r3, #34	; 0x22
    4356:	836b      	strh	r3, [r5, #26]
    4358:	e7bd      	b.n	42d6 <_usart_interrupt_handler+0x142>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    435a:	2220      	movs	r2, #32
    435c:	421a      	tst	r2, r3
    435e:	d0ba      	beq.n	42d6 <_usart_interrupt_handler+0x142>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4360:	3221      	adds	r2, #33	; 0x21
    4362:	2332      	movs	r3, #50	; 0x32
    4364:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4366:	3b12      	subs	r3, #18
    4368:	836b      	strh	r3, [r5, #26]
    436a:	e7b4      	b.n	42d6 <_usart_interrupt_handler+0x142>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    436c:	0020      	movs	r0, r4
    436e:	6963      	ldr	r3, [r4, #20]
    4370:	4798      	blx	r3
    4372:	e7b2      	b.n	42da <_usart_interrupt_handler+0x146>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4374:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    4376:	05db      	lsls	r3, r3, #23
    4378:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
    437a:	b2da      	uxtb	r2, r3
    437c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    437e:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
    4380:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4382:	1c51      	adds	r1, r2, #1
    4384:	6261      	str	r1, [r4, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4386:	7961      	ldrb	r1, [r4, #5]
    4388:	2901      	cmp	r1, #1
    438a:	d010      	beq.n	43ae <_usart_interrupt_handler+0x21a>
				if(--(module->remaining_rx_buffer_length) == 0) {
    438c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    438e:	3b01      	subs	r3, #1
    4390:	b29b      	uxth	r3, r3
    4392:	85a3      	strh	r3, [r4, #44]	; 0x2c
    4394:	2b00      	cmp	r3, #0
    4396:	d1a0      	bne.n	42da <_usart_interrupt_handler+0x146>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4398:	3304      	adds	r3, #4
    439a:	752b      	strb	r3, [r5, #20]
					module->rx_status = STATUS_OK;
    439c:	2200      	movs	r2, #0
    439e:	332e      	adds	r3, #46	; 0x2e
    43a0:	54e2      	strb	r2, [r4, r3]
					if (callback_status
    43a2:	07b3      	lsls	r3, r6, #30
    43a4:	d599      	bpl.n	42da <_usart_interrupt_handler+0x146>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    43a6:	0020      	movs	r0, r4
    43a8:	6923      	ldr	r3, [r4, #16]
    43aa:	4798      	blx	r3
    43ac:	e795      	b.n	42da <_usart_interrupt_handler+0x146>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    43ae:	0a1b      	lsrs	r3, r3, #8
    43b0:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    43b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    43b4:	3301      	adds	r3, #1
    43b6:	6263      	str	r3, [r4, #36]	; 0x24
    43b8:	e7e8      	b.n	438c <_usart_interrupt_handler+0x1f8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    43ba:	2304      	movs	r3, #4
    43bc:	752b      	strb	r3, [r5, #20]
    43be:	e78c      	b.n	42da <_usart_interrupt_handler+0x146>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    43c0:	0020      	movs	r0, r4
    43c2:	69e3      	ldr	r3, [r4, #28]
    43c4:	4798      	blx	r3
    43c6:	e790      	b.n	42ea <_usart_interrupt_handler+0x156>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    43c8:	0020      	movs	r0, r4
    43ca:	69a3      	ldr	r3, [r4, #24]
    43cc:	4798      	blx	r3
    43ce:	e793      	b.n	42f8 <_usart_interrupt_handler+0x164>
    43d0:	200009bc 	.word	0x200009bc
    43d4:	2000011c 	.word	0x2000011c
    43d8:	00007094 	.word	0x00007094
    43dc:	00006c40 	.word	0x00006c40
    43e0:	000070e0 	.word	0x000070e0
    43e4:	000017e1 	.word	0x000017e1
    43e8:	00006c58 	.word	0x00006c58
    43ec:	00006055 	.word	0x00006055
    43f0:	000003f3 	.word	0x000003f3
    43f4:	00006d80 	.word	0x00006d80

000043f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    43f8:	b510      	push	{r4, lr}
	switch (clock_source) {
    43fa:	2808      	cmp	r0, #8
    43fc:	d803      	bhi.n	4406 <system_clock_source_get_hz+0xe>
    43fe:	0080      	lsls	r0, r0, #2
    4400:	4b1b      	ldr	r3, [pc, #108]	; (4470 <system_clock_source_get_hz+0x78>)
    4402:	581b      	ldr	r3, [r3, r0]
    4404:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4406:	2000      	movs	r0, #0
    4408:	e030      	b.n	446c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    440a:	4b1a      	ldr	r3, [pc, #104]	; (4474 <system_clock_source_get_hz+0x7c>)
    440c:	6918      	ldr	r0, [r3, #16]
    440e:	e02d      	b.n	446c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4410:	4b19      	ldr	r3, [pc, #100]	; (4478 <system_clock_source_get_hz+0x80>)
    4412:	6a1b      	ldr	r3, [r3, #32]
    4414:	059b      	lsls	r3, r3, #22
    4416:	0f9b      	lsrs	r3, r3, #30
    4418:	4818      	ldr	r0, [pc, #96]	; (447c <system_clock_source_get_hz+0x84>)
    441a:	40d8      	lsrs	r0, r3
    441c:	e026      	b.n	446c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    441e:	4b15      	ldr	r3, [pc, #84]	; (4474 <system_clock_source_get_hz+0x7c>)
    4420:	6958      	ldr	r0, [r3, #20]
    4422:	e023      	b.n	446c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4424:	4b13      	ldr	r3, [pc, #76]	; (4474 <system_clock_source_get_hz+0x7c>)
    4426:	681b      	ldr	r3, [r3, #0]
			return 0;
    4428:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    442a:	079b      	lsls	r3, r3, #30
    442c:	d51e      	bpl.n	446c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    442e:	4912      	ldr	r1, [pc, #72]	; (4478 <system_clock_source_get_hz+0x80>)
    4430:	2210      	movs	r2, #16
    4432:	68cb      	ldr	r3, [r1, #12]
    4434:	421a      	tst	r2, r3
    4436:	d0fc      	beq.n	4432 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4438:	4b0e      	ldr	r3, [pc, #56]	; (4474 <system_clock_source_get_hz+0x7c>)
    443a:	681b      	ldr	r3, [r3, #0]
    443c:	075b      	lsls	r3, r3, #29
    443e:	d401      	bmi.n	4444 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    4440:	480f      	ldr	r0, [pc, #60]	; (4480 <system_clock_source_get_hz+0x88>)
    4442:	e013      	b.n	446c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4444:	2000      	movs	r0, #0
    4446:	4b0f      	ldr	r3, [pc, #60]	; (4484 <system_clock_source_get_hz+0x8c>)
    4448:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    444a:	4b0a      	ldr	r3, [pc, #40]	; (4474 <system_clock_source_get_hz+0x7c>)
    444c:	689b      	ldr	r3, [r3, #8]
    444e:	041b      	lsls	r3, r3, #16
    4450:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4452:	4358      	muls	r0, r3
    4454:	e00a      	b.n	446c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4456:	2350      	movs	r3, #80	; 0x50
    4458:	4a07      	ldr	r2, [pc, #28]	; (4478 <system_clock_source_get_hz+0x80>)
    445a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    445c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    445e:	075b      	lsls	r3, r3, #29
    4460:	d504      	bpl.n	446c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    4462:	4b04      	ldr	r3, [pc, #16]	; (4474 <system_clock_source_get_hz+0x7c>)
    4464:	68d8      	ldr	r0, [r3, #12]
    4466:	e001      	b.n	446c <system_clock_source_get_hz+0x74>
		return 32768UL;
    4468:	2080      	movs	r0, #128	; 0x80
    446a:	0200      	lsls	r0, r0, #8
	}
}
    446c:	bd10      	pop	{r4, pc}
    446e:	46c0      	nop			; (mov r8, r8)
    4470:	00007150 	.word	0x00007150
    4474:	20000198 	.word	0x20000198
    4478:	40000800 	.word	0x40000800
    447c:	007a1200 	.word	0x007a1200
    4480:	02dc6c00 	.word	0x02dc6c00
    4484:	00004bad 	.word	0x00004bad

00004488 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4488:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    448a:	490c      	ldr	r1, [pc, #48]	; (44bc <system_clock_source_osc8m_set_config+0x34>)
    448c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    448e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4490:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4492:	7840      	ldrb	r0, [r0, #1]
    4494:	2201      	movs	r2, #1
    4496:	4010      	ands	r0, r2
    4498:	0180      	lsls	r0, r0, #6
    449a:	2640      	movs	r6, #64	; 0x40
    449c:	43b3      	bics	r3, r6
    449e:	4303      	orrs	r3, r0
    44a0:	402a      	ands	r2, r5
    44a2:	01d2      	lsls	r2, r2, #7
    44a4:	2080      	movs	r0, #128	; 0x80
    44a6:	4383      	bics	r3, r0
    44a8:	4313      	orrs	r3, r2
    44aa:	2203      	movs	r2, #3
    44ac:	4022      	ands	r2, r4
    44ae:	0212      	lsls	r2, r2, #8
    44b0:	4803      	ldr	r0, [pc, #12]	; (44c0 <system_clock_source_osc8m_set_config+0x38>)
    44b2:	4003      	ands	r3, r0
    44b4:	4313      	orrs	r3, r2
    44b6:	620b      	str	r3, [r1, #32]
}
    44b8:	bd70      	pop	{r4, r5, r6, pc}
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	40000800 	.word	0x40000800
    44c0:	fffffcff 	.word	0xfffffcff

000044c4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    44c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    44c6:	46de      	mov	lr, fp
    44c8:	4657      	mov	r7, sl
    44ca:	464e      	mov	r6, r9
    44cc:	4645      	mov	r5, r8
    44ce:	b5e0      	push	{r5, r6, r7, lr}
    44d0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    44d2:	4b26      	ldr	r3, [pc, #152]	; (456c <system_clock_source_xosc32k_set_config+0xa8>)
    44d4:	469b      	mov	fp, r3
    44d6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    44d8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    44da:	7800      	ldrb	r0, [r0, #0]
    44dc:	4242      	negs	r2, r0
    44de:	4142      	adcs	r2, r0
    44e0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    44e2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    44e4:	78ca      	ldrb	r2, [r1, #3]
    44e6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    44e8:	790a      	ldrb	r2, [r1, #4]
    44ea:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    44ec:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    44ee:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    44f0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    44f2:	688a      	ldr	r2, [r1, #8]
    44f4:	491e      	ldr	r1, [pc, #120]	; (4570 <system_clock_source_xosc32k_set_config+0xac>)
    44f6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    44f8:	2101      	movs	r1, #1
    44fa:	464a      	mov	r2, r9
    44fc:	0092      	lsls	r2, r2, #2
    44fe:	4691      	mov	r9, r2
    4500:	2204      	movs	r2, #4
    4502:	4393      	bics	r3, r2
    4504:	464a      	mov	r2, r9
    4506:	4313      	orrs	r3, r2
    4508:	4642      	mov	r2, r8
    450a:	400a      	ands	r2, r1
    450c:	00d2      	lsls	r2, r2, #3
    450e:	4690      	mov	r8, r2
    4510:	2208      	movs	r2, #8
    4512:	4393      	bics	r3, r2
    4514:	4642      	mov	r2, r8
    4516:	4313      	orrs	r3, r2
    4518:	4662      	mov	r2, ip
    451a:	400a      	ands	r2, r1
    451c:	0112      	lsls	r2, r2, #4
    451e:	4694      	mov	ip, r2
    4520:	2210      	movs	r2, #16
    4522:	4393      	bics	r3, r2
    4524:	4662      	mov	r2, ip
    4526:	4313      	orrs	r3, r2
    4528:	4008      	ands	r0, r1
    452a:	0140      	lsls	r0, r0, #5
    452c:	2220      	movs	r2, #32
    452e:	4393      	bics	r3, r2
    4530:	4303      	orrs	r3, r0
    4532:	400f      	ands	r7, r1
    4534:	01bf      	lsls	r7, r7, #6
    4536:	2040      	movs	r0, #64	; 0x40
    4538:	4383      	bics	r3, r0
    453a:	433b      	orrs	r3, r7
    453c:	400e      	ands	r6, r1
    453e:	01f6      	lsls	r6, r6, #7
    4540:	3040      	adds	r0, #64	; 0x40
    4542:	4383      	bics	r3, r0
    4544:	4333      	orrs	r3, r6
    4546:	3879      	subs	r0, #121	; 0x79
    4548:	4005      	ands	r5, r0
    454a:	022d      	lsls	r5, r5, #8
    454c:	4809      	ldr	r0, [pc, #36]	; (4574 <system_clock_source_xosc32k_set_config+0xb0>)
    454e:	4003      	ands	r3, r0
    4550:	432b      	orrs	r3, r5
    4552:	4021      	ands	r1, r4
    4554:	0309      	lsls	r1, r1, #12
    4556:	4808      	ldr	r0, [pc, #32]	; (4578 <system_clock_source_xosc32k_set_config+0xb4>)
    4558:	4003      	ands	r3, r0
    455a:	430b      	orrs	r3, r1
    455c:	465a      	mov	r2, fp
    455e:	8293      	strh	r3, [r2, #20]
}
    4560:	bc3c      	pop	{r2, r3, r4, r5}
    4562:	4690      	mov	r8, r2
    4564:	4699      	mov	r9, r3
    4566:	46a2      	mov	sl, r4
    4568:	46ab      	mov	fp, r5
    456a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    456c:	40000800 	.word	0x40000800
    4570:	20000198 	.word	0x20000198
    4574:	fffff8ff 	.word	0xfffff8ff
    4578:	ffffefff 	.word	0xffffefff

0000457c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    457c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    457e:	7a03      	ldrb	r3, [r0, #8]
    4580:	069b      	lsls	r3, r3, #26
    4582:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4584:	8942      	ldrh	r2, [r0, #10]
    4586:	0592      	lsls	r2, r2, #22
    4588:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    458a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    458c:	4918      	ldr	r1, [pc, #96]	; (45f0 <system_clock_source_dfll_set_config+0x74>)
    458e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4590:	7983      	ldrb	r3, [r0, #6]
    4592:	79c2      	ldrb	r2, [r0, #7]
    4594:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4596:	8842      	ldrh	r2, [r0, #2]
    4598:	8884      	ldrh	r4, [r0, #4]
    459a:	4322      	orrs	r2, r4
    459c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    459e:	7842      	ldrb	r2, [r0, #1]
    45a0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    45a2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    45a4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    45a6:	7803      	ldrb	r3, [r0, #0]
    45a8:	2b04      	cmp	r3, #4
    45aa:	d011      	beq.n	45d0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    45ac:	2b20      	cmp	r3, #32
    45ae:	d10e      	bne.n	45ce <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    45b0:	7b03      	ldrb	r3, [r0, #12]
    45b2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    45b4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    45b6:	4313      	orrs	r3, r2
    45b8:	89c2      	ldrh	r2, [r0, #14]
    45ba:	0412      	lsls	r2, r2, #16
    45bc:	490d      	ldr	r1, [pc, #52]	; (45f4 <system_clock_source_dfll_set_config+0x78>)
    45be:	400a      	ands	r2, r1
    45c0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    45c2:	4a0b      	ldr	r2, [pc, #44]	; (45f0 <system_clock_source_dfll_set_config+0x74>)
    45c4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    45c6:	6811      	ldr	r1, [r2, #0]
    45c8:	4b0b      	ldr	r3, [pc, #44]	; (45f8 <system_clock_source_dfll_set_config+0x7c>)
    45ca:	430b      	orrs	r3, r1
    45cc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    45ce:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    45d0:	7b03      	ldrb	r3, [r0, #12]
    45d2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    45d4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    45d6:	4313      	orrs	r3, r2
    45d8:	89c2      	ldrh	r2, [r0, #14]
    45da:	0412      	lsls	r2, r2, #16
    45dc:	4905      	ldr	r1, [pc, #20]	; (45f4 <system_clock_source_dfll_set_config+0x78>)
    45de:	400a      	ands	r2, r1
    45e0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    45e2:	4a03      	ldr	r2, [pc, #12]	; (45f0 <system_clock_source_dfll_set_config+0x74>)
    45e4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    45e6:	6813      	ldr	r3, [r2, #0]
    45e8:	2104      	movs	r1, #4
    45ea:	430b      	orrs	r3, r1
    45ec:	6013      	str	r3, [r2, #0]
    45ee:	e7ee      	b.n	45ce <system_clock_source_dfll_set_config+0x52>
    45f0:	20000198 	.word	0x20000198
    45f4:	03ff0000 	.word	0x03ff0000
    45f8:	00000424 	.word	0x00000424

000045fc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    45fc:	b510      	push	{r4, lr}
    45fe:	b082      	sub	sp, #8
	switch (clock_source) {
    4600:	2808      	cmp	r0, #8
    4602:	d848      	bhi.n	4696 <system_clock_source_enable+0x9a>
    4604:	0080      	lsls	r0, r0, #2
    4606:	4b30      	ldr	r3, [pc, #192]	; (46c8 <system_clock_source_enable+0xcc>)
    4608:	581b      	ldr	r3, [r3, r0]
    460a:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    460c:	4a2f      	ldr	r2, [pc, #188]	; (46cc <system_clock_source_enable+0xd0>)
    460e:	6a13      	ldr	r3, [r2, #32]
    4610:	2102      	movs	r1, #2
    4612:	430b      	orrs	r3, r1
    4614:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4616:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    4618:	b002      	add	sp, #8
    461a:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    461c:	4a2b      	ldr	r2, [pc, #172]	; (46cc <system_clock_source_enable+0xd0>)
    461e:	6993      	ldr	r3, [r2, #24]
    4620:	2102      	movs	r1, #2
    4622:	430b      	orrs	r3, r1
    4624:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    4626:	2000      	movs	r0, #0
		break;
    4628:	e7f6      	b.n	4618 <system_clock_source_enable+0x1c>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    462a:	4a28      	ldr	r2, [pc, #160]	; (46cc <system_clock_source_enable+0xd0>)
    462c:	8a13      	ldrh	r3, [r2, #16]
    462e:	2102      	movs	r1, #2
    4630:	430b      	orrs	r3, r1
    4632:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    4634:	2000      	movs	r0, #0
		break;
    4636:	e7ef      	b.n	4618 <system_clock_source_enable+0x1c>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4638:	4a24      	ldr	r2, [pc, #144]	; (46cc <system_clock_source_enable+0xd0>)
    463a:	8a93      	ldrh	r3, [r2, #20]
    463c:	2102      	movs	r1, #2
    463e:	430b      	orrs	r3, r1
    4640:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4642:	2000      	movs	r0, #0
		break;
    4644:	e7e8      	b.n	4618 <system_clock_source_enable+0x1c>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4646:	4922      	ldr	r1, [pc, #136]	; (46d0 <system_clock_source_enable+0xd4>)
    4648:	680b      	ldr	r3, [r1, #0]
    464a:	2202      	movs	r2, #2
    464c:	4313      	orrs	r3, r2
    464e:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4650:	4b1e      	ldr	r3, [pc, #120]	; (46cc <system_clock_source_enable+0xd0>)
    4652:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4654:	0019      	movs	r1, r3
    4656:	320e      	adds	r2, #14
    4658:	68cb      	ldr	r3, [r1, #12]
    465a:	421a      	tst	r2, r3
    465c:	d0fc      	beq.n	4658 <system_clock_source_enable+0x5c>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    465e:	4a1c      	ldr	r2, [pc, #112]	; (46d0 <system_clock_source_enable+0xd4>)
    4660:	6891      	ldr	r1, [r2, #8]
    4662:	4b1a      	ldr	r3, [pc, #104]	; (46cc <system_clock_source_enable+0xd0>)
    4664:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4666:	6852      	ldr	r2, [r2, #4]
    4668:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    466a:	2200      	movs	r2, #0
    466c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    466e:	0019      	movs	r1, r3
    4670:	3210      	adds	r2, #16
    4672:	68cb      	ldr	r3, [r1, #12]
    4674:	421a      	tst	r2, r3
    4676:	d0fc      	beq.n	4672 <system_clock_source_enable+0x76>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4678:	4b15      	ldr	r3, [pc, #84]	; (46d0 <system_clock_source_enable+0xd4>)
    467a:	681b      	ldr	r3, [r3, #0]
    467c:	b29b      	uxth	r3, r3
    467e:	4a13      	ldr	r2, [pc, #76]	; (46cc <system_clock_source_enable+0xd0>)
    4680:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    4682:	2000      	movs	r0, #0
    4684:	e7c8      	b.n	4618 <system_clock_source_enable+0x1c>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4686:	4911      	ldr	r1, [pc, #68]	; (46cc <system_clock_source_enable+0xd0>)
    4688:	2244      	movs	r2, #68	; 0x44
    468a:	5c8b      	ldrb	r3, [r1, r2]
    468c:	2002      	movs	r0, #2
    468e:	4303      	orrs	r3, r0
    4690:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4692:	2000      	movs	r0, #0
		break;
    4694:	e7c0      	b.n	4618 <system_clock_source_enable+0x1c>
    4696:	4b0f      	ldr	r3, [pc, #60]	; (46d4 <system_clock_source_enable+0xd8>)
    4698:	6818      	ldr	r0, [r3, #0]
		Assert(false);
    469a:	2800      	cmp	r0, #0
    469c:	d00a      	beq.n	46b4 <system_clock_source_enable+0xb8>
    469e:	4b0e      	ldr	r3, [pc, #56]	; (46d8 <system_clock_source_enable+0xdc>)
    46a0:	9301      	str	r3, [sp, #4]
    46a2:	4b0e      	ldr	r3, [pc, #56]	; (46dc <system_clock_source_enable+0xe0>)
    46a4:	9300      	str	r3, [sp, #0]
    46a6:	4b0e      	ldr	r3, [pc, #56]	; (46e0 <system_clock_source_enable+0xe4>)
    46a8:	4a0e      	ldr	r2, [pc, #56]	; (46e4 <system_clock_source_enable+0xe8>)
    46aa:	2101      	movs	r1, #1
    46ac:	4c0e      	ldr	r4, [pc, #56]	; (46e8 <system_clock_source_enable+0xec>)
    46ae:	47a0      	blx	r4
		return STATUS_ERR_INVALID_ARG;
    46b0:	2017      	movs	r0, #23
    46b2:	e7b1      	b.n	4618 <system_clock_source_enable+0x1c>
		Assert(false);
    46b4:	4b0a      	ldr	r3, [pc, #40]	; (46e0 <system_clock_source_enable+0xe4>)
    46b6:	4a0b      	ldr	r2, [pc, #44]	; (46e4 <system_clock_source_enable+0xe8>)
    46b8:	4907      	ldr	r1, [pc, #28]	; (46d8 <system_clock_source_enable+0xdc>)
    46ba:	480c      	ldr	r0, [pc, #48]	; (46ec <system_clock_source_enable+0xf0>)
    46bc:	4c0c      	ldr	r4, [pc, #48]	; (46f0 <system_clock_source_enable+0xf4>)
    46be:	47a0      	blx	r4
    46c0:	e7fe      	b.n	46c0 <system_clock_source_enable+0xc4>
		return STATUS_OK;
    46c2:	2000      	movs	r0, #0
    46c4:	e7a8      	b.n	4618 <system_clock_source_enable+0x1c>
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	00007174 	.word	0x00007174
    46cc:	40000800 	.word	0x40000800
    46d0:	20000198 	.word	0x20000198
    46d4:	2000011c 	.word	0x2000011c
    46d8:	00006cac 	.word	0x00006cac
    46dc:	00006c40 	.word	0x00006c40
    46e0:	00000243 	.word	0x00000243
    46e4:	00007198 	.word	0x00007198
    46e8:	000017e1 	.word	0x000017e1
    46ec:	00006c58 	.word	0x00006c58
    46f0:	00006055 	.word	0x00006055

000046f4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    46f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46f6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    46f8:	22c2      	movs	r2, #194	; 0xc2
    46fa:	00d2      	lsls	r2, r2, #3
    46fc:	4b45      	ldr	r3, [pc, #276]	; (4814 <system_clock_init+0x120>)
    46fe:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4700:	4a45      	ldr	r2, [pc, #276]	; (4818 <system_clock_init+0x124>)
    4702:	6853      	ldr	r3, [r2, #4]
    4704:	211e      	movs	r1, #30
    4706:	438b      	bics	r3, r1
    4708:	391a      	subs	r1, #26
    470a:	430b      	orrs	r3, r1
    470c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    470e:	2202      	movs	r2, #2
    4710:	ab01      	add	r3, sp, #4
    4712:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4714:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4716:	4d41      	ldr	r5, [pc, #260]	; (481c <system_clock_init+0x128>)
    4718:	b2e0      	uxtb	r0, r4
    471a:	a901      	add	r1, sp, #4
    471c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    471e:	3401      	adds	r4, #1
    4720:	2c25      	cmp	r4, #37	; 0x25
    4722:	d1f9      	bne.n	4718 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4724:	a80a      	add	r0, sp, #40	; 0x28
    4726:	2300      	movs	r3, #0
    4728:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    472a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    472c:	2280      	movs	r2, #128	; 0x80
    472e:	0212      	lsls	r2, r2, #8
    4730:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    4732:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    4734:	2201      	movs	r2, #1
    4736:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    4738:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    473a:	2106      	movs	r1, #6
    473c:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    473e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    4740:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4742:	4b37      	ldr	r3, [pc, #220]	; (4820 <system_clock_init+0x12c>)
    4744:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    4746:	2005      	movs	r0, #5
    4748:	4b36      	ldr	r3, [pc, #216]	; (4824 <system_clock_init+0x130>)
    474a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    474c:	4931      	ldr	r1, [pc, #196]	; (4814 <system_clock_init+0x120>)
    474e:	2202      	movs	r2, #2
    4750:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4752:	421a      	tst	r2, r3
    4754:	d0fc      	beq.n	4750 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4756:	ab05      	add	r3, sp, #20
    4758:	2100      	movs	r1, #0
    475a:	2200      	movs	r2, #0
    475c:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    475e:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4760:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4762:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4764:	313f      	adds	r1, #63	; 0x3f
    4766:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4768:	393b      	subs	r1, #59	; 0x3b
    476a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    476c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    476e:	4b2e      	ldr	r3, [pc, #184]	; (4828 <system_clock_init+0x134>)
    4770:	681b      	ldr	r3, [r3, #0]
    4772:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4774:	2b3f      	cmp	r3, #63	; 0x3f
    4776:	d04b      	beq.n	4810 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    4778:	a805      	add	r0, sp, #20
    477a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    477c:	23b7      	movs	r3, #183	; 0xb7
    477e:	00db      	lsls	r3, r3, #3
    4780:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4782:	2303      	movs	r3, #3
    4784:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4786:	331c      	adds	r3, #28
    4788:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    478a:	4b28      	ldr	r3, [pc, #160]	; (482c <system_clock_init+0x138>)
    478c:	4798      	blx	r3
	config->on_demand       = true;
    478e:	a804      	add	r0, sp, #16
    4790:	2501      	movs	r5, #1
    4792:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4794:	2600      	movs	r6, #0
    4796:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4798:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    479a:	4b25      	ldr	r3, [pc, #148]	; (4830 <system_clock_init+0x13c>)
    479c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    479e:	2006      	movs	r0, #6
    47a0:	4f20      	ldr	r7, [pc, #128]	; (4824 <system_clock_init+0x130>)
    47a2:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    47a4:	4b23      	ldr	r3, [pc, #140]	; (4834 <system_clock_init+0x140>)
    47a6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    47a8:	ac01      	add	r4, sp, #4
    47aa:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    47ac:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    47ae:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    47b0:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    47b2:	2305      	movs	r3, #5
    47b4:	7023      	strb	r3, [r4, #0]
    47b6:	0021      	movs	r1, r4
    47b8:	2001      	movs	r0, #1
    47ba:	4b1f      	ldr	r3, [pc, #124]	; (4838 <system_clock_init+0x144>)
    47bc:	4798      	blx	r3
    47be:	2001      	movs	r0, #1
    47c0:	4b1e      	ldr	r3, [pc, #120]	; (483c <system_clock_init+0x148>)
    47c2:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    47c4:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    47c6:	0021      	movs	r1, r4
    47c8:	2000      	movs	r0, #0
    47ca:	4b14      	ldr	r3, [pc, #80]	; (481c <system_clock_init+0x128>)
    47cc:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    47ce:	2000      	movs	r0, #0
    47d0:	4b1b      	ldr	r3, [pc, #108]	; (4840 <system_clock_init+0x14c>)
    47d2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    47d4:	2007      	movs	r0, #7
    47d6:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    47d8:	490e      	ldr	r1, [pc, #56]	; (4814 <system_clock_init+0x120>)
    47da:	22d0      	movs	r2, #208	; 0xd0
    47dc:	68cb      	ldr	r3, [r1, #12]
    47de:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    47e0:	2bd0      	cmp	r3, #208	; 0xd0
    47e2:	d1fb      	bne.n	47dc <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    47e4:	4a17      	ldr	r2, [pc, #92]	; (4844 <system_clock_init+0x150>)
    47e6:	2300      	movs	r3, #0
    47e8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    47ea:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    47ec:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    47ee:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    47f0:	a901      	add	r1, sp, #4
    47f2:	2201      	movs	r2, #1
    47f4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    47f6:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    47f8:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    47fa:	3307      	adds	r3, #7
    47fc:	700b      	strb	r3, [r1, #0]
    47fe:	720a      	strb	r2, [r1, #8]
    4800:	2000      	movs	r0, #0
    4802:	4b0d      	ldr	r3, [pc, #52]	; (4838 <system_clock_init+0x144>)
    4804:	4798      	blx	r3
    4806:	2000      	movs	r0, #0
    4808:	4b0c      	ldr	r3, [pc, #48]	; (483c <system_clock_init+0x148>)
    480a:	4798      	blx	r3
#endif
}
    480c:	b00f      	add	sp, #60	; 0x3c
    480e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    4810:	3b20      	subs	r3, #32
    4812:	e7b1      	b.n	4778 <system_clock_init+0x84>
    4814:	40000800 	.word	0x40000800
    4818:	41004000 	.word	0x41004000
    481c:	00004b35 	.word	0x00004b35
    4820:	000044c5 	.word	0x000044c5
    4824:	000045fd 	.word	0x000045fd
    4828:	00806024 	.word	0x00806024
    482c:	0000457d 	.word	0x0000457d
    4830:	00004489 	.word	0x00004489
    4834:	00004849 	.word	0x00004849
    4838:	0000486d 	.word	0x0000486d
    483c:	00004979 	.word	0x00004979
    4840:	00004a49 	.word	0x00004a49
    4844:	40000400 	.word	0x40000400

00004848 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    4848:	4a06      	ldr	r2, [pc, #24]	; (4864 <system_gclk_init+0x1c>)
    484a:	6993      	ldr	r3, [r2, #24]
    484c:	2108      	movs	r1, #8
    484e:	430b      	orrs	r3, r1
    4850:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4852:	2201      	movs	r2, #1
    4854:	4b04      	ldr	r3, [pc, #16]	; (4868 <system_gclk_init+0x20>)
    4856:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4858:	0019      	movs	r1, r3
    485a:	780b      	ldrb	r3, [r1, #0]
    485c:	4213      	tst	r3, r2
    485e:	d1fc      	bne.n	485a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4860:	4770      	bx	lr
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	40000400 	.word	0x40000400
    4868:	40000c00 	.word	0x40000c00

0000486c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    486c:	b5f0      	push	{r4, r5, r6, r7, lr}
    486e:	b083      	sub	sp, #12
    4870:	0007      	movs	r7, r0
    4872:	000e      	movs	r6, r1
    4874:	4b35      	ldr	r3, [pc, #212]	; (494c <system_gclk_gen_set_config+0xe0>)
    4876:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
    4878:	2800      	cmp	r0, #0
    487a:	d108      	bne.n	488e <system_gclk_gen_set_config+0x22>
    487c:	2900      	cmp	r1, #0
    487e:	d111      	bne.n	48a4 <system_gclk_gen_set_config+0x38>
    4880:	2375      	movs	r3, #117	; 0x75
    4882:	4a33      	ldr	r2, [pc, #204]	; (4950 <system_gclk_gen_set_config+0xe4>)
    4884:	4933      	ldr	r1, [pc, #204]	; (4954 <system_gclk_gen_set_config+0xe8>)
    4886:	4834      	ldr	r0, [pc, #208]	; (4958 <system_gclk_gen_set_config+0xec>)
    4888:	4c34      	ldr	r4, [pc, #208]	; (495c <system_gclk_gen_set_config+0xf0>)
    488a:	47a0      	blx	r4
    488c:	e7fe      	b.n	488c <system_gclk_gen_set_config+0x20>
    488e:	2900      	cmp	r1, #0
    4890:	d108      	bne.n	48a4 <system_gclk_gen_set_config+0x38>
    4892:	4b30      	ldr	r3, [pc, #192]	; (4954 <system_gclk_gen_set_config+0xe8>)
    4894:	9301      	str	r3, [sp, #4]
    4896:	4b32      	ldr	r3, [pc, #200]	; (4960 <system_gclk_gen_set_config+0xf4>)
    4898:	9300      	str	r3, [sp, #0]
    489a:	2375      	movs	r3, #117	; 0x75
    489c:	4a2c      	ldr	r2, [pc, #176]	; (4950 <system_gclk_gen_set_config+0xe4>)
    489e:	2101      	movs	r1, #1
    48a0:	4c30      	ldr	r4, [pc, #192]	; (4964 <system_gclk_gen_set_config+0xf8>)
    48a2:	47a0      	blx	r4

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    48a4:	003d      	movs	r5, r7
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    48a6:	7834      	ldrb	r4, [r6, #0]
    48a8:	0224      	lsls	r4, r4, #8
    48aa:	433c      	orrs	r4, r7

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    48ac:	7873      	ldrb	r3, [r6, #1]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d002      	beq.n	48b8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    48b2:	2380      	movs	r3, #128	; 0x80
    48b4:	02db      	lsls	r3, r3, #11
    48b6:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    48b8:	7a73      	ldrb	r3, [r6, #9]
    48ba:	2b00      	cmp	r3, #0
    48bc:	d002      	beq.n	48c4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    48be:	2380      	movs	r3, #128	; 0x80
    48c0:	031b      	lsls	r3, r3, #12
    48c2:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    48c4:	6873      	ldr	r3, [r6, #4]
    48c6:	2b01      	cmp	r3, #1
    48c8:	d910      	bls.n	48ec <system_gclk_gen_set_config+0x80>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    48ca:	1e5a      	subs	r2, r3, #1
    48cc:	4213      	tst	r3, r2
    48ce:	d135      	bne.n	493c <system_gclk_gen_set_config+0xd0>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    48d0:	2b02      	cmp	r3, #2
    48d2:	d931      	bls.n	4938 <system_gclk_gen_set_config+0xcc>
    48d4:	2102      	movs	r1, #2
    48d6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    48d8:	3201      	adds	r2, #1
						mask <<= 1) {
    48da:	0049      	lsls	r1, r1, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    48dc:	428b      	cmp	r3, r1
    48de:	d8fb      	bhi.n	48d8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    48e0:	0212      	lsls	r2, r2, #8
    48e2:	433a      	orrs	r2, r7
    48e4:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    48e6:	2380      	movs	r3, #128	; 0x80
    48e8:	035b      	lsls	r3, r3, #13
    48ea:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    48ec:	7a33      	ldrb	r3, [r6, #8]
    48ee:	2b00      	cmp	r3, #0
    48f0:	d002      	beq.n	48f8 <system_gclk_gen_set_config+0x8c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    48f2:	2380      	movs	r3, #128	; 0x80
    48f4:	039b      	lsls	r3, r3, #14
    48f6:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    48f8:	4a1b      	ldr	r2, [pc, #108]	; (4968 <system_gclk_gen_set_config+0xfc>)
    48fa:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    48fc:	b25b      	sxtb	r3, r3
    48fe:	2b00      	cmp	r3, #0
    4900:	dbfb      	blt.n	48fa <system_gclk_gen_set_config+0x8e>
	cpu_irq_enter_critical();
    4902:	4b1a      	ldr	r3, [pc, #104]	; (496c <system_gclk_gen_set_config+0x100>)
    4904:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4906:	4b1a      	ldr	r3, [pc, #104]	; (4970 <system_gclk_gen_set_config+0x104>)
    4908:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    490a:	4a17      	ldr	r2, [pc, #92]	; (4968 <system_gclk_gen_set_config+0xfc>)
    490c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    490e:	b25b      	sxtb	r3, r3
    4910:	2b00      	cmp	r3, #0
    4912:	dbfb      	blt.n	490c <system_gclk_gen_set_config+0xa0>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4914:	4b14      	ldr	r3, [pc, #80]	; (4968 <system_gclk_gen_set_config+0xfc>)
    4916:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4918:	001a      	movs	r2, r3
    491a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    491c:	b25b      	sxtb	r3, r3
    491e:	2b00      	cmp	r3, #0
    4920:	dbfb      	blt.n	491a <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4922:	4a11      	ldr	r2, [pc, #68]	; (4968 <system_gclk_gen_set_config+0xfc>)
    4924:	6853      	ldr	r3, [r2, #4]
    4926:	2180      	movs	r1, #128	; 0x80
    4928:	0249      	lsls	r1, r1, #9
    492a:	400b      	ands	r3, r1
    492c:	431c      	orrs	r4, r3
    492e:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    4930:	4b10      	ldr	r3, [pc, #64]	; (4974 <system_gclk_gen_set_config+0x108>)
    4932:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4934:	b003      	add	sp, #12
    4936:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    4938:	2200      	movs	r2, #0
    493a:	e7d1      	b.n	48e0 <system_gclk_gen_set_config+0x74>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    493c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    493e:	433b      	orrs	r3, r7
    4940:	001d      	movs	r5, r3
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4942:	2380      	movs	r3, #128	; 0x80
    4944:	029b      	lsls	r3, r3, #10
    4946:	431c      	orrs	r4, r3
    4948:	e7d0      	b.n	48ec <system_gclk_gen_set_config+0x80>
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	2000011c 	.word	0x2000011c
    4950:	000071fc 	.word	0x000071fc
    4954:	00006fec 	.word	0x00006fec
    4958:	00006c58 	.word	0x00006c58
    495c:	00006055 	.word	0x00006055
    4960:	00006c40 	.word	0x00006c40
    4964:	000017e1 	.word	0x000017e1
    4968:	40000c00 	.word	0x40000c00
    496c:	000016e5 	.word	0x000016e5
    4970:	40000c08 	.word	0x40000c08
    4974:	00001725 	.word	0x00001725

00004978 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4978:	b510      	push	{r4, lr}
    497a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    497c:	4a0b      	ldr	r2, [pc, #44]	; (49ac <system_gclk_gen_enable+0x34>)
    497e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4980:	b25b      	sxtb	r3, r3
    4982:	2b00      	cmp	r3, #0
    4984:	dbfb      	blt.n	497e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    4986:	4b0a      	ldr	r3, [pc, #40]	; (49b0 <system_gclk_gen_enable+0x38>)
    4988:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    498a:	4b0a      	ldr	r3, [pc, #40]	; (49b4 <system_gclk_gen_enable+0x3c>)
    498c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    498e:	4a07      	ldr	r2, [pc, #28]	; (49ac <system_gclk_gen_enable+0x34>)
    4990:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4992:	b25b      	sxtb	r3, r3
    4994:	2b00      	cmp	r3, #0
    4996:	dbfb      	blt.n	4990 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4998:	4a04      	ldr	r2, [pc, #16]	; (49ac <system_gclk_gen_enable+0x34>)
    499a:	6851      	ldr	r1, [r2, #4]
    499c:	2380      	movs	r3, #128	; 0x80
    499e:	025b      	lsls	r3, r3, #9
    49a0:	430b      	orrs	r3, r1
    49a2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    49a4:	4b04      	ldr	r3, [pc, #16]	; (49b8 <system_gclk_gen_enable+0x40>)
    49a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    49a8:	bd10      	pop	{r4, pc}
    49aa:	46c0      	nop			; (mov r8, r8)
    49ac:	40000c00 	.word	0x40000c00
    49b0:	000016e5 	.word	0x000016e5
    49b4:	40000c04 	.word	0x40000c04
    49b8:	00001725 	.word	0x00001725

000049bc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    49bc:	b570      	push	{r4, r5, r6, lr}
    49be:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49c0:	4a1a      	ldr	r2, [pc, #104]	; (4a2c <system_gclk_gen_get_hz+0x70>)
    49c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    49c4:	b25b      	sxtb	r3, r3
    49c6:	2b00      	cmp	r3, #0
    49c8:	dbfb      	blt.n	49c2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    49ca:	4b19      	ldr	r3, [pc, #100]	; (4a30 <system_gclk_gen_get_hz+0x74>)
    49cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    49ce:	4b19      	ldr	r3, [pc, #100]	; (4a34 <system_gclk_gen_get_hz+0x78>)
    49d0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49d2:	4a16      	ldr	r2, [pc, #88]	; (4a2c <system_gclk_gen_get_hz+0x70>)
    49d4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    49d6:	b25b      	sxtb	r3, r3
    49d8:	2b00      	cmp	r3, #0
    49da:	dbfb      	blt.n	49d4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    49dc:	4e13      	ldr	r6, [pc, #76]	; (4a2c <system_gclk_gen_get_hz+0x70>)
    49de:	6870      	ldr	r0, [r6, #4]
    49e0:	04c0      	lsls	r0, r0, #19
    49e2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    49e4:	4b14      	ldr	r3, [pc, #80]	; (4a38 <system_gclk_gen_get_hz+0x7c>)
    49e6:	4798      	blx	r3
    49e8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    49ea:	4b12      	ldr	r3, [pc, #72]	; (4a34 <system_gclk_gen_get_hz+0x78>)
    49ec:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    49ee:	6876      	ldr	r6, [r6, #4]
    49f0:	02f6      	lsls	r6, r6, #11
    49f2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49f4:	4b11      	ldr	r3, [pc, #68]	; (4a3c <system_gclk_gen_get_hz+0x80>)
    49f6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49f8:	4a0c      	ldr	r2, [pc, #48]	; (4a2c <system_gclk_gen_get_hz+0x70>)
    49fa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    49fc:	b25b      	sxtb	r3, r3
    49fe:	2b00      	cmp	r3, #0
    4a00:	dbfb      	blt.n	49fa <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4a02:	4b0a      	ldr	r3, [pc, #40]	; (4a2c <system_gclk_gen_get_hz+0x70>)
    4a04:	689c      	ldr	r4, [r3, #8]
    4a06:	0224      	lsls	r4, r4, #8
    4a08:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    4a0a:	4b0d      	ldr	r3, [pc, #52]	; (4a40 <system_gclk_gen_get_hz+0x84>)
    4a0c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4a0e:	2e00      	cmp	r6, #0
    4a10:	d107      	bne.n	4a22 <system_gclk_gen_get_hz+0x66>
    4a12:	2c01      	cmp	r4, #1
    4a14:	d907      	bls.n	4a26 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    4a16:	0021      	movs	r1, r4
    4a18:	0028      	movs	r0, r5
    4a1a:	4b0a      	ldr	r3, [pc, #40]	; (4a44 <system_gclk_gen_get_hz+0x88>)
    4a1c:	4798      	blx	r3
    4a1e:	0005      	movs	r5, r0
    4a20:	e001      	b.n	4a26 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4a22:	3401      	adds	r4, #1
    4a24:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    4a26:	0028      	movs	r0, r5
    4a28:	bd70      	pop	{r4, r5, r6, pc}
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	40000c00 	.word	0x40000c00
    4a30:	000016e5 	.word	0x000016e5
    4a34:	40000c04 	.word	0x40000c04
    4a38:	000043f9 	.word	0x000043f9
    4a3c:	40000c08 	.word	0x40000c08
    4a40:	00001725 	.word	0x00001725
    4a44:	000056cd 	.word	0x000056cd

00004a48 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4a48:	b510      	push	{r4, lr}
    4a4a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4a4c:	4b06      	ldr	r3, [pc, #24]	; (4a68 <system_gclk_chan_enable+0x20>)
    4a4e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a50:	4b06      	ldr	r3, [pc, #24]	; (4a6c <system_gclk_chan_enable+0x24>)
    4a52:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4a54:	4a06      	ldr	r2, [pc, #24]	; (4a70 <system_gclk_chan_enable+0x28>)
    4a56:	8853      	ldrh	r3, [r2, #2]
    4a58:	2180      	movs	r1, #128	; 0x80
    4a5a:	01c9      	lsls	r1, r1, #7
    4a5c:	430b      	orrs	r3, r1
    4a5e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4a60:	4b04      	ldr	r3, [pc, #16]	; (4a74 <system_gclk_chan_enable+0x2c>)
    4a62:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a64:	bd10      	pop	{r4, pc}
    4a66:	46c0      	nop			; (mov r8, r8)
    4a68:	000016e5 	.word	0x000016e5
    4a6c:	40000c02 	.word	0x40000c02
    4a70:	40000c00 	.word	0x40000c00
    4a74:	00001725 	.word	0x00001725

00004a78 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4a78:	b510      	push	{r4, lr}
    4a7a:	b082      	sub	sp, #8
    4a7c:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4a7e:	4b20      	ldr	r3, [pc, #128]	; (4b00 <system_gclk_chan_disable+0x88>)
    4a80:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a82:	4b20      	ldr	r3, [pc, #128]	; (4b04 <system_gclk_chan_disable+0x8c>)
    4a84:	701c      	strb	r4, [r3, #0]
    4a86:	4b20      	ldr	r3, [pc, #128]	; (4b08 <system_gclk_chan_disable+0x90>)
    4a88:	6818      	ldr	r0, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);
    4a8a:	2800      	cmp	r0, #0
    4a8c:	d02b      	beq.n	4ae6 <system_gclk_chan_disable+0x6e>
    4a8e:	4b1f      	ldr	r3, [pc, #124]	; (4b0c <system_gclk_chan_disable+0x94>)
    4a90:	885b      	ldrh	r3, [r3, #2]
    4a92:	0bdb      	lsrs	r3, r3, #15
    4a94:	d11c      	bne.n	4ad0 <system_gclk_chan_disable+0x58>

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4a96:	4a1d      	ldr	r2, [pc, #116]	; (4b0c <system_gclk_chan_disable+0x94>)
    4a98:	8853      	ldrh	r3, [r2, #2]
    4a9a:	051b      	lsls	r3, r3, #20
    4a9c:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4a9e:	8853      	ldrh	r3, [r2, #2]
    4aa0:	491b      	ldr	r1, [pc, #108]	; (4b10 <system_gclk_chan_disable+0x98>)
    4aa2:	400b      	ands	r3, r1
    4aa4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4aa6:	8853      	ldrh	r3, [r2, #2]
    4aa8:	491a      	ldr	r1, [pc, #104]	; (4b14 <system_gclk_chan_disable+0x9c>)
    4aaa:	400b      	ands	r3, r1
    4aac:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4aae:	0011      	movs	r1, r2
    4ab0:	2280      	movs	r2, #128	; 0x80
    4ab2:	01d2      	lsls	r2, r2, #7
    4ab4:	884b      	ldrh	r3, [r1, #2]
    4ab6:	4213      	tst	r3, r2
    4ab8:	d1fc      	bne.n	4ab4 <system_gclk_chan_disable+0x3c>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4aba:	4914      	ldr	r1, [pc, #80]	; (4b0c <system_gclk_chan_disable+0x94>)
    4abc:	884a      	ldrh	r2, [r1, #2]
    4abe:	0203      	lsls	r3, r0, #8
    4ac0:	4813      	ldr	r0, [pc, #76]	; (4b10 <system_gclk_chan_disable+0x98>)
    4ac2:	4002      	ands	r2, r0
    4ac4:	4313      	orrs	r3, r2
    4ac6:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    4ac8:	4b13      	ldr	r3, [pc, #76]	; (4b18 <system_gclk_chan_disable+0xa0>)
    4aca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4acc:	b002      	add	sp, #8
    4ace:	bd10      	pop	{r4, pc}
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);
    4ad0:	4b12      	ldr	r3, [pc, #72]	; (4b1c <system_gclk_chan_disable+0xa4>)
    4ad2:	9301      	str	r3, [sp, #4]
    4ad4:	4b12      	ldr	r3, [pc, #72]	; (4b20 <system_gclk_chan_disable+0xa8>)
    4ad6:	9300      	str	r3, [sp, #0]
    4ad8:	2398      	movs	r3, #152	; 0x98
    4ada:	33ff      	adds	r3, #255	; 0xff
    4adc:	4a11      	ldr	r2, [pc, #68]	; (4b24 <system_gclk_chan_disable+0xac>)
    4ade:	2101      	movs	r1, #1
    4ae0:	4c11      	ldr	r4, [pc, #68]	; (4b28 <system_gclk_chan_disable+0xb0>)
    4ae2:	47a0      	blx	r4
    4ae4:	e7d7      	b.n	4a96 <system_gclk_chan_disable+0x1e>
    4ae6:	4b09      	ldr	r3, [pc, #36]	; (4b0c <system_gclk_chan_disable+0x94>)
    4ae8:	885b      	ldrh	r3, [r3, #2]
    4aea:	0bdb      	lsrs	r3, r3, #15
    4aec:	d0d3      	beq.n	4a96 <system_gclk_chan_disable+0x1e>
    4aee:	2398      	movs	r3, #152	; 0x98
    4af0:	33ff      	adds	r3, #255	; 0xff
    4af2:	4a0c      	ldr	r2, [pc, #48]	; (4b24 <system_gclk_chan_disable+0xac>)
    4af4:	4909      	ldr	r1, [pc, #36]	; (4b1c <system_gclk_chan_disable+0xa4>)
    4af6:	480d      	ldr	r0, [pc, #52]	; (4b2c <system_gclk_chan_disable+0xb4>)
    4af8:	4c0d      	ldr	r4, [pc, #52]	; (4b30 <system_gclk_chan_disable+0xb8>)
    4afa:	47a0      	blx	r4
    4afc:	e7fe      	b.n	4afc <system_gclk_chan_disable+0x84>
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	000016e5 	.word	0x000016e5
    4b04:	40000c02 	.word	0x40000c02
    4b08:	2000011c 	.word	0x2000011c
    4b0c:	40000c00 	.word	0x40000c00
    4b10:	fffff0ff 	.word	0xfffff0ff
    4b14:	ffffbfff 	.word	0xffffbfff
    4b18:	00001725 	.word	0x00001725
    4b1c:	000071e0 	.word	0x000071e0
    4b20:	00006c40 	.word	0x00006c40
    4b24:	000071fc 	.word	0x000071fc
    4b28:	000017e1 	.word	0x000017e1
    4b2c:	00006c58 	.word	0x00006c58
    4b30:	00006055 	.word	0x00006055

00004b34 <system_gclk_chan_set_config>:
{
    4b34:	b570      	push	{r4, r5, r6, lr}
    4b36:	b082      	sub	sp, #8
    4b38:	0005      	movs	r5, r0
    4b3a:	000c      	movs	r4, r1
    4b3c:	4b12      	ldr	r3, [pc, #72]	; (4b88 <system_gclk_chan_set_config+0x54>)
    4b3e:	6818      	ldr	r0, [r3, #0]
	Assert(config);
    4b40:	2800      	cmp	r0, #0
    4b42:	d017      	beq.n	4b74 <system_gclk_chan_set_config+0x40>
    4b44:	2900      	cmp	r1, #0
    4b46:	d00a      	beq.n	4b5e <system_gclk_chan_set_config+0x2a>
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4b48:	7824      	ldrb	r4, [r4, #0]
    4b4a:	0224      	lsls	r4, r4, #8
    4b4c:	432c      	orrs	r4, r5
	system_gclk_chan_disable(channel);
    4b4e:	0028      	movs	r0, r5
    4b50:	4b0e      	ldr	r3, [pc, #56]	; (4b8c <system_gclk_chan_set_config+0x58>)
    4b52:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4b54:	b2a4      	uxth	r4, r4
    4b56:	4b0e      	ldr	r3, [pc, #56]	; (4b90 <system_gclk_chan_set_config+0x5c>)
    4b58:	805c      	strh	r4, [r3, #2]
}
    4b5a:	b002      	add	sp, #8
    4b5c:	bd70      	pop	{r4, r5, r6, pc}
	Assert(config);
    4b5e:	4b0d      	ldr	r3, [pc, #52]	; (4b94 <system_gclk_chan_set_config+0x60>)
    4b60:	9301      	str	r3, [sp, #4]
    4b62:	4b0d      	ldr	r3, [pc, #52]	; (4b98 <system_gclk_chan_set_config+0x64>)
    4b64:	9300      	str	r3, [sp, #0]
    4b66:	2362      	movs	r3, #98	; 0x62
    4b68:	33ff      	adds	r3, #255	; 0xff
    4b6a:	4a0c      	ldr	r2, [pc, #48]	; (4b9c <system_gclk_chan_set_config+0x68>)
    4b6c:	2101      	movs	r1, #1
    4b6e:	4e0c      	ldr	r6, [pc, #48]	; (4ba0 <system_gclk_chan_set_config+0x6c>)
    4b70:	47b0      	blx	r6
    4b72:	e7e9      	b.n	4b48 <system_gclk_chan_set_config+0x14>
    4b74:	2900      	cmp	r1, #0
    4b76:	d1e7      	bne.n	4b48 <system_gclk_chan_set_config+0x14>
    4b78:	2362      	movs	r3, #98	; 0x62
    4b7a:	33ff      	adds	r3, #255	; 0xff
    4b7c:	4a07      	ldr	r2, [pc, #28]	; (4b9c <system_gclk_chan_set_config+0x68>)
    4b7e:	4905      	ldr	r1, [pc, #20]	; (4b94 <system_gclk_chan_set_config+0x60>)
    4b80:	4808      	ldr	r0, [pc, #32]	; (4ba4 <system_gclk_chan_set_config+0x70>)
    4b82:	4c09      	ldr	r4, [pc, #36]	; (4ba8 <system_gclk_chan_set_config+0x74>)
    4b84:	47a0      	blx	r4
    4b86:	e7fe      	b.n	4b86 <system_gclk_chan_set_config+0x52>
    4b88:	2000011c 	.word	0x2000011c
    4b8c:	00004a79 	.word	0x00004a79
    4b90:	40000c00 	.word	0x40000c00
    4b94:	00006fec 	.word	0x00006fec
    4b98:	00006c40 	.word	0x00006c40
    4b9c:	000071fc 	.word	0x000071fc
    4ba0:	000017e1 	.word	0x000017e1
    4ba4:	00006c58 	.word	0x00006c58
    4ba8:	00006055 	.word	0x00006055

00004bac <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4bac:	b510      	push	{r4, lr}
    4bae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4bb0:	4b06      	ldr	r3, [pc, #24]	; (4bcc <system_gclk_chan_get_hz+0x20>)
    4bb2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4bb4:	4b06      	ldr	r3, [pc, #24]	; (4bd0 <system_gclk_chan_get_hz+0x24>)
    4bb6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4bb8:	4b06      	ldr	r3, [pc, #24]	; (4bd4 <system_gclk_chan_get_hz+0x28>)
    4bba:	885c      	ldrh	r4, [r3, #2]
    4bbc:	0524      	lsls	r4, r4, #20
    4bbe:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4bc0:	4b05      	ldr	r3, [pc, #20]	; (4bd8 <system_gclk_chan_get_hz+0x2c>)
    4bc2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4bc4:	0020      	movs	r0, r4
    4bc6:	4b05      	ldr	r3, [pc, #20]	; (4bdc <system_gclk_chan_get_hz+0x30>)
    4bc8:	4798      	blx	r3
}
    4bca:	bd10      	pop	{r4, pc}
    4bcc:	000016e5 	.word	0x000016e5
    4bd0:	40000c02 	.word	0x40000c02
    4bd4:	40000c00 	.word	0x40000c00
    4bd8:	00001725 	.word	0x00001725
    4bdc:	000049bd 	.word	0x000049bd

00004be0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4be2:	b083      	sub	sp, #12
    4be4:	0005      	movs	r5, r0
    4be6:	000e      	movs	r6, r1
    4be8:	0014      	movs	r4, r2
    4bea:	4b42      	ldr	r3, [pc, #264]	; (4cf4 <_system_pinmux_config+0x114>)
    4bec:	6818      	ldr	r0, [r3, #0]
	Assert(port);
    4bee:	2800      	cmp	r0, #0
    4bf0:	d041      	beq.n	4c76 <_system_pinmux_config+0x96>
    4bf2:	2d00      	cmp	r5, #0
    4bf4:	d031      	beq.n	4c5a <_system_pinmux_config+0x7a>
	Assert(config);
    4bf6:	2c00      	cmp	r4, #0
    4bf8:	d04f      	beq.n	4c9a <_system_pinmux_config+0xba>

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4bfa:	78e3      	ldrb	r3, [r4, #3]
    4bfc:	2b00      	cmp	r3, #0
    4bfe:	d15f      	bne.n	4cc0 <_system_pinmux_config+0xe0>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4c00:	7823      	ldrb	r3, [r4, #0]
    4c02:	2b80      	cmp	r3, #128	; 0x80
    4c04:	d053      	beq.n	4cae <_system_pinmux_config+0xce>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4c06:	061b      	lsls	r3, r3, #24
    4c08:	2280      	movs	r2, #128	; 0x80
    4c0a:	0252      	lsls	r2, r2, #9
    4c0c:	4313      	orrs	r3, r2
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4c0e:	7862      	ldrb	r2, [r4, #1]
    4c10:	2102      	movs	r1, #2
    4c12:	438a      	bics	r2, r1
    4c14:	d106      	bne.n	4c24 <_system_pinmux_config+0x44>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4c16:	78a2      	ldrb	r2, [r4, #2]
    4c18:	2a00      	cmp	r2, #0
    4c1a:	d14a      	bne.n	4cb2 <_system_pinmux_config+0xd2>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4c1c:	2280      	movs	r2, #128	; 0x80
    4c1e:	0292      	lsls	r2, r2, #10
    4c20:	4313      	orrs	r3, r2
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4c22:	606e      	str	r6, [r5, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c24:	7862      	ldrb	r2, [r4, #1]
    4c26:	3a01      	subs	r2, #1
    4c28:	2a01      	cmp	r2, #1
    4c2a:	d946      	bls.n	4cba <_system_pinmux_config+0xda>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4c2c:	0431      	lsls	r1, r6, #16
    4c2e:	0c09      	lsrs	r1, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4c30:	22a0      	movs	r2, #160	; 0xa0
    4c32:	05d2      	lsls	r2, r2, #23
    4c34:	430a      	orrs	r2, r1
    4c36:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c38:	62aa      	str	r2, [r5, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4c3a:	0c31      	lsrs	r1, r6, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4c3c:	22d0      	movs	r2, #208	; 0xd0
    4c3e:	0612      	lsls	r2, r2, #24
    4c40:	430a      	orrs	r2, r1
    4c42:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c44:	62aa      	str	r2, [r5, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4c46:	78e2      	ldrb	r2, [r4, #3]
    4c48:	2a00      	cmp	r2, #0
    4c4a:	d14c      	bne.n	4ce6 <_system_pinmux_config+0x106>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4c4c:	035b      	lsls	r3, r3, #13
    4c4e:	d546      	bpl.n	4cde <_system_pinmux_config+0xfe>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4c50:	78a3      	ldrb	r3, [r4, #2]
    4c52:	2b01      	cmp	r3, #1
    4c54:	d049      	beq.n	4cea <_system_pinmux_config+0x10a>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    4c56:	616e      	str	r6, [r5, #20]
    4c58:	e041      	b.n	4cde <_system_pinmux_config+0xfe>
	Assert(port);
    4c5a:	4b27      	ldr	r3, [pc, #156]	; (4cf8 <_system_pinmux_config+0x118>)
    4c5c:	9301      	str	r3, [sp, #4]
    4c5e:	4b27      	ldr	r3, [pc, #156]	; (4cfc <_system_pinmux_config+0x11c>)
    4c60:	9300      	str	r3, [sp, #0]
    4c62:	2341      	movs	r3, #65	; 0x41
    4c64:	4a26      	ldr	r2, [pc, #152]	; (4d00 <_system_pinmux_config+0x120>)
    4c66:	2101      	movs	r1, #1
    4c68:	4f26      	ldr	r7, [pc, #152]	; (4d04 <_system_pinmux_config+0x124>)
    4c6a:	47b8      	blx	r7
    4c6c:	4b21      	ldr	r3, [pc, #132]	; (4cf4 <_system_pinmux_config+0x114>)
    4c6e:	6818      	ldr	r0, [r3, #0]
	Assert(config);
    4c70:	2800      	cmp	r0, #0
    4c72:	d1c0      	bne.n	4bf6 <_system_pinmux_config+0x16>
    4c74:	e001      	b.n	4c7a <_system_pinmux_config+0x9a>
	Assert(port);
    4c76:	2d00      	cmp	r5, #0
    4c78:	d008      	beq.n	4c8c <_system_pinmux_config+0xac>
	Assert(config);
    4c7a:	2c00      	cmp	r4, #0
    4c7c:	d1bd      	bne.n	4bfa <_system_pinmux_config+0x1a>
    4c7e:	2342      	movs	r3, #66	; 0x42
    4c80:	4a1f      	ldr	r2, [pc, #124]	; (4d00 <_system_pinmux_config+0x120>)
    4c82:	4921      	ldr	r1, [pc, #132]	; (4d08 <_system_pinmux_config+0x128>)
    4c84:	4821      	ldr	r0, [pc, #132]	; (4d0c <_system_pinmux_config+0x12c>)
    4c86:	4c22      	ldr	r4, [pc, #136]	; (4d10 <_system_pinmux_config+0x130>)
    4c88:	47a0      	blx	r4
    4c8a:	e7fe      	b.n	4c8a <_system_pinmux_config+0xaa>
	Assert(port);
    4c8c:	2341      	movs	r3, #65	; 0x41
    4c8e:	4a1c      	ldr	r2, [pc, #112]	; (4d00 <_system_pinmux_config+0x120>)
    4c90:	4919      	ldr	r1, [pc, #100]	; (4cf8 <_system_pinmux_config+0x118>)
    4c92:	481e      	ldr	r0, [pc, #120]	; (4d0c <_system_pinmux_config+0x12c>)
    4c94:	4c1e      	ldr	r4, [pc, #120]	; (4d10 <_system_pinmux_config+0x130>)
    4c96:	47a0      	blx	r4
    4c98:	e7fe      	b.n	4c98 <_system_pinmux_config+0xb8>
	Assert(config);
    4c9a:	4b1b      	ldr	r3, [pc, #108]	; (4d08 <_system_pinmux_config+0x128>)
    4c9c:	9301      	str	r3, [sp, #4]
    4c9e:	4b17      	ldr	r3, [pc, #92]	; (4cfc <_system_pinmux_config+0x11c>)
    4ca0:	9300      	str	r3, [sp, #0]
    4ca2:	2342      	movs	r3, #66	; 0x42
    4ca4:	4a16      	ldr	r2, [pc, #88]	; (4d00 <_system_pinmux_config+0x120>)
    4ca6:	2101      	movs	r1, #1
    4ca8:	4f16      	ldr	r7, [pc, #88]	; (4d04 <_system_pinmux_config+0x124>)
    4caa:	47b8      	blx	r7
    4cac:	e7a5      	b.n	4bfa <_system_pinmux_config+0x1a>
	uint32_t pin_cfg = 0;
    4cae:	2300      	movs	r3, #0
    4cb0:	e7ad      	b.n	4c0e <_system_pinmux_config+0x2e>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4cb2:	22c0      	movs	r2, #192	; 0xc0
    4cb4:	02d2      	lsls	r2, r2, #11
    4cb6:	4313      	orrs	r3, r2
    4cb8:	e7b3      	b.n	4c22 <_system_pinmux_config+0x42>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4cba:	4a16      	ldr	r2, [pc, #88]	; (4d14 <_system_pinmux_config+0x134>)
    4cbc:	4013      	ands	r3, r2
    4cbe:	e7b5      	b.n	4c2c <_system_pinmux_config+0x4c>
		port->DIRCLR.reg = pin_mask;
    4cc0:	606e      	str	r6, [r5, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4cc2:	0432      	lsls	r2, r6, #16
    4cc4:	0c12      	lsrs	r2, r2, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4cc6:	23a0      	movs	r3, #160	; 0xa0
    4cc8:	05db      	lsls	r3, r3, #23
    4cca:	4313      	orrs	r3, r2
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4ccc:	62ab      	str	r3, [r5, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4cce:	0c32      	lsrs	r2, r6, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4cd0:	23d0      	movs	r3, #208	; 0xd0
    4cd2:	061b      	lsls	r3, r3, #24
    4cd4:	4313      	orrs	r3, r2
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4cd6:	62ab      	str	r3, [r5, #40]	; 0x28
	if(!config->powersave) {
    4cd8:	78e3      	ldrb	r3, [r4, #3]
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d103      	bne.n	4ce6 <_system_pinmux_config+0x106>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4cde:	7863      	ldrb	r3, [r4, #1]
    4ce0:	3b01      	subs	r3, #1
    4ce2:	2b01      	cmp	r3, #1
    4ce4:	d903      	bls.n	4cee <_system_pinmux_config+0x10e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    4ce6:	b003      	add	sp, #12
    4ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				port->OUTSET.reg = pin_mask;
    4cea:	61ae      	str	r6, [r5, #24]
    4cec:	e7f7      	b.n	4cde <_system_pinmux_config+0xfe>
			port->DIRSET.reg = pin_mask;
    4cee:	60ae      	str	r6, [r5, #8]
}
    4cf0:	e7f9      	b.n	4ce6 <_system_pinmux_config+0x106>
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	2000011c 	.word	0x2000011c
    4cf8:	00007270 	.word	0x00007270
    4cfc:	00006c40 	.word	0x00006c40
    4d00:	00007240 	.word	0x00007240
    4d04:	000017e1 	.word	0x000017e1
    4d08:	00006fec 	.word	0x00006fec
    4d0c:	00006c58 	.word	0x00006c58
    4d10:	00006055 	.word	0x00006055
    4d14:	fffbffff 	.word	0xfffbffff

00004d18 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4d18:	b570      	push	{r4, r5, r6, lr}
    4d1a:	b082      	sub	sp, #8
    4d1c:	0005      	movs	r5, r0
    4d1e:	000c      	movs	r4, r1
	if (port_index < PORT_INST_NUM) {
    4d20:	09c3      	lsrs	r3, r0, #7
    4d22:	d00f      	beq.n	4d44 <system_pinmux_pin_set_config+0x2c>
    4d24:	4b12      	ldr	r3, [pc, #72]	; (4d70 <system_pinmux_pin_set_config+0x58>)
    4d26:	6818      	ldr	r0, [r3, #0]
		Assert(false);
    4d28:	2800      	cmp	r0, #0
    4d2a:	d019      	beq.n	4d60 <system_pinmux_pin_set_config+0x48>
    4d2c:	4b11      	ldr	r3, [pc, #68]	; (4d74 <system_pinmux_pin_set_config+0x5c>)
    4d2e:	9301      	str	r3, [sp, #4]
    4d30:	4b11      	ldr	r3, [pc, #68]	; (4d78 <system_pinmux_pin_set_config+0x60>)
    4d32:	9300      	str	r3, [sp, #0]
    4d34:	2362      	movs	r3, #98	; 0x62
    4d36:	33ff      	adds	r3, #255	; 0xff
    4d38:	4a10      	ldr	r2, [pc, #64]	; (4d7c <system_pinmux_pin_set_config+0x64>)
    4d3a:	2101      	movs	r1, #1
    4d3c:	4e10      	ldr	r6, [pc, #64]	; (4d80 <system_pinmux_pin_set_config+0x68>)
    4d3e:	47b0      	blx	r6
		return NULL;
    4d40:	2000      	movs	r0, #0
    4d42:	e004      	b.n	4d4e <system_pinmux_pin_set_config+0x36>
		return &(ports[port_index]->Group[group_index]);
    4d44:	0940      	lsrs	r0, r0, #5
    4d46:	01c0      	lsls	r0, r0, #7
    4d48:	4b0e      	ldr	r3, [pc, #56]	; (4d84 <system_pinmux_pin_set_config+0x6c>)
    4d4a:	469c      	mov	ip, r3
    4d4c:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4d4e:	231f      	movs	r3, #31
    4d50:	402b      	ands	r3, r5
    4d52:	2101      	movs	r1, #1
    4d54:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    4d56:	0022      	movs	r2, r4
    4d58:	4b0b      	ldr	r3, [pc, #44]	; (4d88 <system_pinmux_pin_set_config+0x70>)
    4d5a:	4798      	blx	r3
}
    4d5c:	b002      	add	sp, #8
    4d5e:	bd70      	pop	{r4, r5, r6, pc}
		Assert(false);
    4d60:	2362      	movs	r3, #98	; 0x62
    4d62:	33ff      	adds	r3, #255	; 0xff
    4d64:	4a05      	ldr	r2, [pc, #20]	; (4d7c <system_pinmux_pin_set_config+0x64>)
    4d66:	4903      	ldr	r1, [pc, #12]	; (4d74 <system_pinmux_pin_set_config+0x5c>)
    4d68:	4808      	ldr	r0, [pc, #32]	; (4d8c <system_pinmux_pin_set_config+0x74>)
    4d6a:	4c09      	ldr	r4, [pc, #36]	; (4d90 <system_pinmux_pin_set_config+0x78>)
    4d6c:	47a0      	blx	r4
    4d6e:	e7fe      	b.n	4d6e <system_pinmux_pin_set_config+0x56>
    4d70:	2000011c 	.word	0x2000011c
    4d74:	00006cac 	.word	0x00006cac
    4d78:	00006c40 	.word	0x00006c40
    4d7c:	00006c7c 	.word	0x00006c7c
    4d80:	000017e1 	.word	0x000017e1
    4d84:	41004400 	.word	0x41004400
    4d88:	00004be1 	.word	0x00004be1
    4d8c:	00006c58 	.word	0x00006c58
    4d90:	00006055 	.word	0x00006055

00004d94 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4d94:	4770      	bx	lr
	...

00004d98 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4d98:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4d9a:	4b05      	ldr	r3, [pc, #20]	; (4db0 <system_init+0x18>)
    4d9c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4d9e:	4b05      	ldr	r3, [pc, #20]	; (4db4 <system_init+0x1c>)
    4da0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4da2:	4b05      	ldr	r3, [pc, #20]	; (4db8 <system_init+0x20>)
    4da4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4da6:	4b05      	ldr	r3, [pc, #20]	; (4dbc <system_init+0x24>)
    4da8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4daa:	4b05      	ldr	r3, [pc, #20]	; (4dc0 <system_init+0x28>)
    4dac:	4798      	blx	r3
}
    4dae:	bd10      	pop	{r4, pc}
    4db0:	000046f5 	.word	0x000046f5
    4db4:	000019a1 	.word	0x000019a1
    4db8:	00004d95 	.word	0x00004d95
    4dbc:	00004d95 	.word	0x00004d95
    4dc0:	00004d95 	.word	0x00004d95

00004dc4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4dc4:	e7fe      	b.n	4dc4 <Dummy_Handler>
	...

00004dc8 <Reset_Handler>:
{
    4dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    4dca:	4a2a      	ldr	r2, [pc, #168]	; (4e74 <Reset_Handler+0xac>)
    4dcc:	4b2a      	ldr	r3, [pc, #168]	; (4e78 <Reset_Handler+0xb0>)
    4dce:	429a      	cmp	r2, r3
    4dd0:	d011      	beq.n	4df6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    4dd2:	001a      	movs	r2, r3
    4dd4:	4b29      	ldr	r3, [pc, #164]	; (4e7c <Reset_Handler+0xb4>)
    4dd6:	429a      	cmp	r2, r3
    4dd8:	d20d      	bcs.n	4df6 <Reset_Handler+0x2e>
    4dda:	4a29      	ldr	r2, [pc, #164]	; (4e80 <Reset_Handler+0xb8>)
    4ddc:	3303      	adds	r3, #3
    4dde:	1a9b      	subs	r3, r3, r2
    4de0:	089b      	lsrs	r3, r3, #2
    4de2:	3301      	adds	r3, #1
    4de4:	009b      	lsls	r3, r3, #2
    4de6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4de8:	4823      	ldr	r0, [pc, #140]	; (4e78 <Reset_Handler+0xb0>)
    4dea:	4922      	ldr	r1, [pc, #136]	; (4e74 <Reset_Handler+0xac>)
    4dec:	588c      	ldr	r4, [r1, r2]
    4dee:	5084      	str	r4, [r0, r2]
    4df0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    4df2:	429a      	cmp	r2, r3
    4df4:	d1fa      	bne.n	4dec <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    4df6:	4a23      	ldr	r2, [pc, #140]	; (4e84 <Reset_Handler+0xbc>)
    4df8:	4b23      	ldr	r3, [pc, #140]	; (4e88 <Reset_Handler+0xc0>)
    4dfa:	429a      	cmp	r2, r3
    4dfc:	d20a      	bcs.n	4e14 <Reset_Handler+0x4c>
    4dfe:	43d3      	mvns	r3, r2
    4e00:	4921      	ldr	r1, [pc, #132]	; (4e88 <Reset_Handler+0xc0>)
    4e02:	185b      	adds	r3, r3, r1
    4e04:	2103      	movs	r1, #3
    4e06:	438b      	bics	r3, r1
    4e08:	3304      	adds	r3, #4
    4e0a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    4e0c:	2100      	movs	r1, #0
    4e0e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    4e10:	4293      	cmp	r3, r2
    4e12:	d1fc      	bne.n	4e0e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4e14:	4a1d      	ldr	r2, [pc, #116]	; (4e8c <Reset_Handler+0xc4>)
    4e16:	21ff      	movs	r1, #255	; 0xff
    4e18:	4b1d      	ldr	r3, [pc, #116]	; (4e90 <Reset_Handler+0xc8>)
    4e1a:	438b      	bics	r3, r1
    4e1c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4e1e:	39fd      	subs	r1, #253	; 0xfd
    4e20:	2390      	movs	r3, #144	; 0x90
    4e22:	005b      	lsls	r3, r3, #1
    4e24:	4a1b      	ldr	r2, [pc, #108]	; (4e94 <Reset_Handler+0xcc>)
    4e26:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4e28:	4a1b      	ldr	r2, [pc, #108]	; (4e98 <Reset_Handler+0xd0>)
    4e2a:	78d3      	ldrb	r3, [r2, #3]
    4e2c:	2503      	movs	r5, #3
    4e2e:	43ab      	bics	r3, r5
    4e30:	2402      	movs	r4, #2
    4e32:	4323      	orrs	r3, r4
    4e34:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4e36:	78d3      	ldrb	r3, [r2, #3]
    4e38:	270c      	movs	r7, #12
    4e3a:	43bb      	bics	r3, r7
    4e3c:	2608      	movs	r6, #8
    4e3e:	4333      	orrs	r3, r6
    4e40:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    4e42:	4b16      	ldr	r3, [pc, #88]	; (4e9c <Reset_Handler+0xd4>)
    4e44:	7b98      	ldrb	r0, [r3, #14]
    4e46:	2230      	movs	r2, #48	; 0x30
    4e48:	4390      	bics	r0, r2
    4e4a:	2220      	movs	r2, #32
    4e4c:	4310      	orrs	r0, r2
    4e4e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4e50:	7b99      	ldrb	r1, [r3, #14]
    4e52:	43b9      	bics	r1, r7
    4e54:	4331      	orrs	r1, r6
    4e56:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4e58:	7b9a      	ldrb	r2, [r3, #14]
    4e5a:	43aa      	bics	r2, r5
    4e5c:	4322      	orrs	r2, r4
    4e5e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    4e60:	4a0f      	ldr	r2, [pc, #60]	; (4ea0 <Reset_Handler+0xd8>)
    4e62:	6853      	ldr	r3, [r2, #4]
    4e64:	2180      	movs	r1, #128	; 0x80
    4e66:	430b      	orrs	r3, r1
    4e68:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    4e6a:	4b0e      	ldr	r3, [pc, #56]	; (4ea4 <Reset_Handler+0xdc>)
    4e6c:	4798      	blx	r3
        main();
    4e6e:	4b0e      	ldr	r3, [pc, #56]	; (4ea8 <Reset_Handler+0xe0>)
    4e70:	4798      	blx	r3
    4e72:	e7fe      	b.n	4e72 <Reset_Handler+0xaa>
    4e74:	00007664 	.word	0x00007664
    4e78:	20000000 	.word	0x20000000
    4e7c:	20000098 	.word	0x20000098
    4e80:	20000004 	.word	0x20000004
    4e84:	20000098 	.word	0x20000098
    4e88:	20000a1c 	.word	0x20000a1c
    4e8c:	e000ed00 	.word	0xe000ed00
    4e90:	00000000 	.word	0x00000000
    4e94:	41007000 	.word	0x41007000
    4e98:	41005000 	.word	0x41005000
    4e9c:	41004800 	.word	0x41004800
    4ea0:	41004000 	.word	0x41004000
    4ea4:	00005a4d 	.word	0x00005a4d
    4ea8:	000054b9 	.word	0x000054b9

00004eac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eae:	46c6      	mov	lr, r8
    4eb0:	b500      	push	{lr}
    4eb2:	000c      	movs	r4, r1
    4eb4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    4eb6:	2800      	cmp	r0, #0
    4eb8:	d10f      	bne.n	4eda <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    4eba:	2a00      	cmp	r2, #0
    4ebc:	dd11      	ble.n	4ee2 <_read+0x36>
    4ebe:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4ec0:	4e09      	ldr	r6, [pc, #36]	; (4ee8 <_read+0x3c>)
    4ec2:	4d0a      	ldr	r5, [pc, #40]	; (4eec <_read+0x40>)
    4ec4:	6830      	ldr	r0, [r6, #0]
    4ec6:	0021      	movs	r1, r4
    4ec8:	682b      	ldr	r3, [r5, #0]
    4eca:	4798      	blx	r3
		ptr++;
    4ecc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    4ece:	42bc      	cmp	r4, r7
    4ed0:	d1f8      	bne.n	4ec4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    4ed2:	4640      	mov	r0, r8
    4ed4:	bc04      	pop	{r2}
    4ed6:	4690      	mov	r8, r2
    4ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    4eda:	2301      	movs	r3, #1
    4edc:	425b      	negs	r3, r3
    4ede:	4698      	mov	r8, r3
    4ee0:	e7f7      	b.n	4ed2 <_read+0x26>
	for (; len > 0; --len) {
    4ee2:	4680      	mov	r8, r0
    4ee4:	e7f5      	b.n	4ed2 <_read+0x26>
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	200009e0 	.word	0x200009e0
    4eec:	200009d8 	.word	0x200009d8

00004ef0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ef2:	46c6      	mov	lr, r8
    4ef4:	b500      	push	{lr}
    4ef6:	000e      	movs	r6, r1
    4ef8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4efa:	3801      	subs	r0, #1
    4efc:	2802      	cmp	r0, #2
    4efe:	d810      	bhi.n	4f22 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    4f00:	2a00      	cmp	r2, #0
    4f02:	d011      	beq.n	4f28 <_write+0x38>
    4f04:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    4f06:	4b0c      	ldr	r3, [pc, #48]	; (4f38 <_write+0x48>)
    4f08:	4698      	mov	r8, r3
    4f0a:	4f0c      	ldr	r7, [pc, #48]	; (4f3c <_write+0x4c>)
    4f0c:	4643      	mov	r3, r8
    4f0e:	6818      	ldr	r0, [r3, #0]
    4f10:	5d31      	ldrb	r1, [r6, r4]
    4f12:	683b      	ldr	r3, [r7, #0]
    4f14:	4798      	blx	r3
    4f16:	2800      	cmp	r0, #0
    4f18:	db08      	blt.n	4f2c <_write+0x3c>
			return -1;
		}
		++nChars;
    4f1a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    4f1c:	42a5      	cmp	r5, r4
    4f1e:	d1f5      	bne.n	4f0c <_write+0x1c>
    4f20:	e006      	b.n	4f30 <_write+0x40>
		return -1;
    4f22:	2401      	movs	r4, #1
    4f24:	4264      	negs	r4, r4
    4f26:	e003      	b.n	4f30 <_write+0x40>
	for (; len != 0; --len) {
    4f28:	0014      	movs	r4, r2
    4f2a:	e001      	b.n	4f30 <_write+0x40>
			return -1;
    4f2c:	2401      	movs	r4, #1
    4f2e:	4264      	negs	r4, r4
	}
	return nChars;
}
    4f30:	0020      	movs	r0, r4
    4f32:	bc04      	pop	{r2}
    4f34:	4690      	mov	r8, r2
    4f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f38:	200009e0 	.word	0x200009e0
    4f3c:	200009dc 	.word	0x200009dc

00004f40 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4f40:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4f42:	4a06      	ldr	r2, [pc, #24]	; (4f5c <_sbrk+0x1c>)
    4f44:	6812      	ldr	r2, [r2, #0]
    4f46:	2a00      	cmp	r2, #0
    4f48:	d004      	beq.n	4f54 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    4f4a:	4a04      	ldr	r2, [pc, #16]	; (4f5c <_sbrk+0x1c>)
    4f4c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4f4e:	18c3      	adds	r3, r0, r3
    4f50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4f52:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    4f54:	4902      	ldr	r1, [pc, #8]	; (4f60 <_sbrk+0x20>)
    4f56:	4a01      	ldr	r2, [pc, #4]	; (4f5c <_sbrk+0x1c>)
    4f58:	6011      	str	r1, [r2, #0]
    4f5a:	e7f6      	b.n	4f4a <_sbrk+0xa>
    4f5c:	200001b0 	.word	0x200001b0
    4f60:	20002a20 	.word	0x20002a20

00004f64 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    4f64:	2001      	movs	r0, #1
    4f66:	4240      	negs	r0, r0
    4f68:	4770      	bx	lr

00004f6a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4f6a:	2380      	movs	r3, #128	; 0x80
    4f6c:	019b      	lsls	r3, r3, #6
    4f6e:	604b      	str	r3, [r1, #4]

	return 0;
}
    4f70:	2000      	movs	r0, #0
    4f72:	4770      	bx	lr

00004f74 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    4f74:	2001      	movs	r0, #1
    4f76:	4770      	bx	lr

00004f78 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4f78:	2000      	movs	r0, #0
    4f7a:	4770      	bx	lr

00004f7c <rw_test>:
 * \param nb_block Test blocks.
 * \param split_tansfer Split transfer setting.
 */
static void rw_test(const struct test_case *test, uint16_t nb_block,
		bool split_tansfer)
{
    4f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f7e:	46de      	mov	lr, fp
    4f80:	4657      	mov	r7, sl
    4f82:	464e      	mov	r6, r9
    4f84:	4645      	mov	r5, r8
    4f86:	b5e0      	push	{r5, r6, r7, lr}
    4f88:	b087      	sub	sp, #28
    4f8a:	9003      	str	r0, [sp, #12]
    4f8c:	000e      	movs	r6, r1
    4f8e:	4690      	mov	r8, r2
	uint32_t i;
	uint32_t last_blocks_addr;
	uint16_t nb_trans;

	/* Compute the last address */
	last_blocks_addr = sd_mmc_get_capacity(0) * (1024/SD_MMC_BLOCK_SIZE) - 50;
    4f90:	2000      	movs	r0, #0
    4f92:	4bcc      	ldr	r3, [pc, #816]	; (52c4 <rw_test+0x348>)
    4f94:	4798      	blx	r3
    4f96:	4bcc      	ldr	r3, [pc, #816]	; (52c8 <rw_test+0x34c>)
    4f98:	18c4      	adds	r4, r0, r3
    4f9a:	0064      	lsls	r4, r4, #1
	test_assert_true(test, last_blocks_addr > NB_MULTI_BLOCKS,
    4f9c:	2c02      	cmp	r4, #2
    4f9e:	d917      	bls.n	4fd0 <rw_test+0x54>
			"Error: SD/MMC capacity.");

	last_blocks_addr -= NB_MULTI_BLOCKS;
    4fa0:	1ea3      	subs	r3, r4, #2
    4fa2:	9304      	str	r3, [sp, #16]
	
	/* Read (save blocks) the last blocks */
	test_assert_true(test, SD_MMC_OK ==
    4fa4:	0032      	movs	r2, r6
    4fa6:	0019      	movs	r1, r3
    4fa8:	2000      	movs	r0, #0
    4faa:	4bc8      	ldr	r3, [pc, #800]	; (52cc <rw_test+0x350>)
    4fac:	4798      	blx	r3
    4fae:	2800      	cmp	r0, #0
    4fb0:	d117      	bne.n	4fe2 <rw_test+0x66>
    4fb2:	1c33      	adds	r3, r6, #0
    4fb4:	4642      	mov	r2, r8
    4fb6:	2a00      	cmp	r2, #0
    4fb8:	d000      	beq.n	4fbc <rw_test+0x40>
    4fba:	2301      	movs	r3, #1
    4fbc:	b29b      	uxth	r3, r3
    4fbe:	9302      	str	r3, [sp, #8]
{
    4fc0:	2400      	movs	r4, #0
			sd_mmc_init_read_blocks(0, last_blocks_addr, nb_block),
			"Error: SD/MMC initialize read sector(s).");

	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
		test_assert_true(test, SD_MMC_OK ==
    4fc2:	4bc3      	ldr	r3, [pc, #780]	; (52d0 <rw_test+0x354>)
    4fc4:	469b      	mov	fp, r3
    4fc6:	469a      	mov	sl, r3
    4fc8:	4bc2      	ldr	r3, [pc, #776]	; (52d4 <rw_test+0x358>)
    4fca:	4699      	mov	r9, r3
    4fcc:	4647      	mov	r7, r8
    4fce:	e149      	b.n	5264 <rw_test+0x2e8>
	test_assert_true(test, last_blocks_addr > NB_MULTI_BLOCKS,
    4fd0:	4bc1      	ldr	r3, [pc, #772]	; (52d8 <rw_test+0x35c>)
    4fd2:	9300      	str	r3, [sp, #0]
    4fd4:	2382      	movs	r3, #130	; 0x82
    4fd6:	4ac1      	ldr	r2, [pc, #772]	; (52dc <rw_test+0x360>)
    4fd8:	2101      	movs	r1, #1
    4fda:	9803      	ldr	r0, [sp, #12]
    4fdc:	4fc0      	ldr	r7, [pc, #768]	; (52e0 <rw_test+0x364>)
    4fde:	47b8      	blx	r7
    4fe0:	e7de      	b.n	4fa0 <rw_test+0x24>
	test_assert_true(test, SD_MMC_OK ==
    4fe2:	4bc0      	ldr	r3, [pc, #768]	; (52e4 <rw_test+0x368>)
    4fe4:	9300      	str	r3, [sp, #0]
    4fe6:	2389      	movs	r3, #137	; 0x89
    4fe8:	4abc      	ldr	r2, [pc, #752]	; (52dc <rw_test+0x360>)
    4fea:	2101      	movs	r1, #1
    4fec:	9803      	ldr	r0, [sp, #12]
    4fee:	4cbc      	ldr	r4, [pc, #752]	; (52e0 <rw_test+0x364>)
    4ff0:	47a0      	blx	r4
    4ff2:	e7de      	b.n	4fb2 <rw_test+0x36>
		test_assert_true(test, SD_MMC_OK ==
    4ff4:	4bbc      	ldr	r3, [pc, #752]	; (52e8 <rw_test+0x36c>)
    4ff6:	9300      	str	r3, [sp, #0]
    4ff8:	2390      	movs	r3, #144	; 0x90
    4ffa:	4ab8      	ldr	r2, [pc, #736]	; (52dc <rw_test+0x360>)
    4ffc:	2101      	movs	r1, #1
    4ffe:	9803      	ldr	r0, [sp, #12]
    5000:	4db7      	ldr	r5, [pc, #732]	; (52e0 <rw_test+0x364>)
    5002:	47a8      	blx	r5
    5004:	e126      	b.n	5254 <rw_test+0x2d8>
				sd_mmc_start_read_blocks(
				&buf_save[nb_trans * SD_MMC_BLOCK_SIZE],
				split_tansfer? 1 : nb_block),
				"Error: SD/MMC start read sector(s).");
		test_assert_true(test, SD_MMC_OK ==
    5006:	4bb9      	ldr	r3, [pc, #740]	; (52ec <rw_test+0x370>)
    5008:	9300      	str	r3, [sp, #0]
    500a:	2393      	movs	r3, #147	; 0x93
    500c:	4ab3      	ldr	r2, [pc, #716]	; (52dc <rw_test+0x360>)
    500e:	2101      	movs	r1, #1
    5010:	9803      	ldr	r0, [sp, #12]
    5012:	4db3      	ldr	r5, [pc, #716]	; (52e0 <rw_test+0x364>)
    5014:	47a8      	blx	r5
    5016:	e123      	b.n	5260 <rw_test+0x2e4>
				sd_mmc_wait_end_of_read_blocks(false),
				"Error: SD/MMC wait end of read sector(s).");
	}

	test_assert_true(test, !sd_mmc_is_write_protected(0),
    5018:	4bb5      	ldr	r3, [pc, #724]	; (52f0 <rw_test+0x374>)
    501a:	9300      	str	r3, [sp, #0]
    501c:	2397      	movs	r3, #151	; 0x97
    501e:	4aaf      	ldr	r2, [pc, #700]	; (52dc <rw_test+0x360>)
    5020:	2101      	movs	r1, #1
    5022:	9803      	ldr	r0, [sp, #12]
    5024:	4cae      	ldr	r4, [pc, #696]	; (52e0 <rw_test+0x364>)
    5026:	47a0      	blx	r4
    5028:	e128      	b.n	527c <rw_test+0x300>
	for (i = 0; i < (SD_MMC_BLOCK_SIZE * nb_block / sizeof(uint32_t)); i++) {
		((uint32_t*)buf_test)[i] = TEST_FILL_VALUE_U32;
	}
	
	/* Write the last blocks */
	test_assert_true(test, SD_MMC_OK ==
    502a:	4bb2      	ldr	r3, [pc, #712]	; (52f4 <rw_test+0x378>)
    502c:	9300      	str	r3, [sp, #0]
    502e:	23a1      	movs	r3, #161	; 0xa1
    5030:	4aaa      	ldr	r2, [pc, #680]	; (52dc <rw_test+0x360>)
    5032:	2101      	movs	r1, #1
    5034:	9803      	ldr	r0, [sp, #12]
    5036:	4caa      	ldr	r4, [pc, #680]	; (52e0 <rw_test+0x364>)
    5038:	47a0      	blx	r4
    503a:	e131      	b.n	52a0 <rw_test+0x324>
			sd_mmc_init_write_blocks(0, last_blocks_addr, nb_block),
			"Error: SD/MMC initialize write sector(s).");

	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
		test_assert_true(test, SD_MMC_OK ==
    503c:	4bae      	ldr	r3, [pc, #696]	; (52f8 <rw_test+0x37c>)
    503e:	9300      	str	r3, [sp, #0]
    5040:	23a8      	movs	r3, #168	; 0xa8
    5042:	4aa6      	ldr	r2, [pc, #664]	; (52dc <rw_test+0x360>)
    5044:	2101      	movs	r1, #1
    5046:	9803      	ldr	r0, [sp, #12]
    5048:	4ea5      	ldr	r6, [pc, #660]	; (52e0 <rw_test+0x364>)
    504a:	47b0      	blx	r6
    504c:	e00a      	b.n	5064 <rw_test+0xe8>
	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
    504e:	3401      	adds	r4, #1
    5050:	b2a4      	uxth	r4, r4
    5052:	0020      	movs	r0, r4
    5054:	42bc      	cmp	r4, r7
    5056:	da13      	bge.n	5080 <rw_test+0x104>
		test_assert_true(test, SD_MMC_OK ==
    5058:	0240      	lsls	r0, r0, #9
    505a:	4450      	add	r0, sl
    505c:	9902      	ldr	r1, [sp, #8]
    505e:	47c8      	blx	r9
    5060:	2800      	cmp	r0, #0
    5062:	d1eb      	bne.n	503c <rw_test+0xc0>
				sd_mmc_start_write_blocks(
				&buf_test[nb_trans * SD_MMC_BLOCK_SIZE],
				split_tansfer? 1 : nb_block),
				"Error: SD/MMC start write sector(s).");
		test_assert_true(test, SD_MMC_OK ==
    5064:	2000      	movs	r0, #0
    5066:	4ba5      	ldr	r3, [pc, #660]	; (52fc <rw_test+0x380>)
    5068:	4798      	blx	r3
    506a:	2800      	cmp	r0, #0
    506c:	d0ef      	beq.n	504e <rw_test+0xd2>
    506e:	4ba4      	ldr	r3, [pc, #656]	; (5300 <rw_test+0x384>)
    5070:	9300      	str	r3, [sp, #0]
    5072:	23ab      	movs	r3, #171	; 0xab
    5074:	4a99      	ldr	r2, [pc, #612]	; (52dc <rw_test+0x360>)
    5076:	2101      	movs	r1, #1
    5078:	9803      	ldr	r0, [sp, #12]
    507a:	4e99      	ldr	r6, [pc, #612]	; (52e0 <rw_test+0x364>)
    507c:	47b0      	blx	r6
    507e:	e7e6      	b.n	504e <rw_test+0xd2>
    5080:	9e05      	ldr	r6, [sp, #20]
				sd_mmc_wait_end_of_write_blocks(false),
				"Error: SD/MMC wait end of write sector(s).");
	}

	/* Clean buffer */
	for (i = 0; i < (SD_MMC_BLOCK_SIZE * nb_block / sizeof(uint32_t)); i++) {
    5082:	2d00      	cmp	r5, #0
    5084:	d008      	beq.n	5098 <rw_test+0x11c>
    5086:	00a8      	lsls	r0, r5, #2
    5088:	2300      	movs	r3, #0
		((uint32_t*)buf_test)[i] = 0xFFFFFFFF;
    508a:	499e      	ldr	r1, [pc, #632]	; (5304 <rw_test+0x388>)
    508c:	2201      	movs	r2, #1
    508e:	4252      	negs	r2, r2
    5090:	505a      	str	r2, [r3, r1]
    5092:	3304      	adds	r3, #4
	for (i = 0; i < (SD_MMC_BLOCK_SIZE * nb_block / sizeof(uint32_t)); i++) {
    5094:	4283      	cmp	r3, r0
    5096:	d1fb      	bne.n	5090 <rw_test+0x114>
	}

	/* Read the last block */
	test_assert_true(test, SD_MMC_OK ==
    5098:	0032      	movs	r2, r6
    509a:	9904      	ldr	r1, [sp, #16]
    509c:	2000      	movs	r0, #0
    509e:	4b8b      	ldr	r3, [pc, #556]	; (52cc <rw_test+0x350>)
    50a0:	4798      	blx	r3
    50a2:	2800      	cmp	r0, #0
    50a4:	d109      	bne.n	50ba <rw_test+0x13e>
			sd_mmc_init_read_blocks(0, last_blocks_addr, nb_block),
			"Error: SD/MMC initialize read sector(s).");

	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
    50a6:	2f00      	cmp	r7, #0
    50a8:	dd33      	ble.n	5112 <rw_test+0x196>
    50aa:	2000      	movs	r0, #0
    50ac:	2400      	movs	r4, #0
		test_assert_true(test, SD_MMC_OK ==
    50ae:	4b95      	ldr	r3, [pc, #596]	; (5304 <rw_test+0x388>)
    50b0:	469a      	mov	sl, r3
    50b2:	4b88      	ldr	r3, [pc, #544]	; (52d4 <rw_test+0x358>)
    50b4:	4699      	mov	r9, r3
    50b6:	9605      	str	r6, [sp, #20]
    50b8:	e016      	b.n	50e8 <rw_test+0x16c>
	test_assert_true(test, SD_MMC_OK ==
    50ba:	4b8a      	ldr	r3, [pc, #552]	; (52e4 <rw_test+0x368>)
    50bc:	9300      	str	r3, [sp, #0]
    50be:	23b6      	movs	r3, #182	; 0xb6
    50c0:	4a86      	ldr	r2, [pc, #536]	; (52dc <rw_test+0x360>)
    50c2:	2101      	movs	r1, #1
    50c4:	9803      	ldr	r0, [sp, #12]
    50c6:	4c86      	ldr	r4, [pc, #536]	; (52e0 <rw_test+0x364>)
    50c8:	47a0      	blx	r4
    50ca:	e7ec      	b.n	50a6 <rw_test+0x12a>
		test_assert_true(test, SD_MMC_OK ==
    50cc:	4b86      	ldr	r3, [pc, #536]	; (52e8 <rw_test+0x36c>)
    50ce:	9300      	str	r3, [sp, #0]
    50d0:	23bd      	movs	r3, #189	; 0xbd
    50d2:	4a82      	ldr	r2, [pc, #520]	; (52dc <rw_test+0x360>)
    50d4:	2101      	movs	r1, #1
    50d6:	9803      	ldr	r0, [sp, #12]
    50d8:	4e81      	ldr	r6, [pc, #516]	; (52e0 <rw_test+0x364>)
    50da:	47b0      	blx	r6
    50dc:	e00a      	b.n	50f4 <rw_test+0x178>
	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
    50de:	3401      	adds	r4, #1
    50e0:	b2a4      	uxth	r4, r4
    50e2:	0020      	movs	r0, r4
    50e4:	42bc      	cmp	r4, r7
    50e6:	da13      	bge.n	5110 <rw_test+0x194>
		test_assert_true(test, SD_MMC_OK ==
    50e8:	0240      	lsls	r0, r0, #9
    50ea:	4450      	add	r0, sl
    50ec:	9902      	ldr	r1, [sp, #8]
    50ee:	47c8      	blx	r9
    50f0:	2800      	cmp	r0, #0
    50f2:	d1eb      	bne.n	50cc <rw_test+0x150>
				sd_mmc_start_read_blocks(
				&buf_test[nb_trans * SD_MMC_BLOCK_SIZE],
				split_tansfer? 1 : nb_block),
				"Error: SD/MMC start read sector(s).");
		test_assert_true(test, SD_MMC_OK ==
    50f4:	2000      	movs	r0, #0
    50f6:	4b84      	ldr	r3, [pc, #528]	; (5308 <rw_test+0x38c>)
    50f8:	4798      	blx	r3
    50fa:	2800      	cmp	r0, #0
    50fc:	d0ef      	beq.n	50de <rw_test+0x162>
    50fe:	4b7b      	ldr	r3, [pc, #492]	; (52ec <rw_test+0x370>)
    5100:	9300      	str	r3, [sp, #0]
    5102:	23c0      	movs	r3, #192	; 0xc0
    5104:	4a75      	ldr	r2, [pc, #468]	; (52dc <rw_test+0x360>)
    5106:	2101      	movs	r1, #1
    5108:	9803      	ldr	r0, [sp, #12]
    510a:	4e75      	ldr	r6, [pc, #468]	; (52e0 <rw_test+0x364>)
    510c:	47b0      	blx	r6
    510e:	e7e6      	b.n	50de <rw_test+0x162>
    5110:	9e05      	ldr	r6, [sp, #20]
				sd_mmc_wait_end_of_read_blocks(false),
				"Error: SD/MMC wait end of read sector(s).");
	}

	/* Check buffer */
	for (i = 0; i < (SD_MMC_BLOCK_SIZE * nb_block / sizeof(uint32_t)); i++) {
    5112:	2d00      	cmp	r5, #0
    5114:	d019      	beq.n	514a <rw_test+0x1ce>
    5116:	2400      	movs	r4, #0
		test_assert_true(test,
    5118:	4b7a      	ldr	r3, [pc, #488]	; (5304 <rw_test+0x388>)
    511a:	4699      	mov	r9, r3
    511c:	4b7b      	ldr	r3, [pc, #492]	; (530c <rw_test+0x390>)
    511e:	469b      	mov	fp, r3
    5120:	9605      	str	r6, [sp, #20]
    5122:	e002      	b.n	512a <rw_test+0x1ae>
	for (i = 0; i < (SD_MMC_BLOCK_SIZE * nb_block / sizeof(uint32_t)); i++) {
    5124:	3401      	adds	r4, #1
    5126:	42ac      	cmp	r4, r5
    5128:	d00e      	beq.n	5148 <rw_test+0x1cc>
		test_assert_true(test,
    512a:	00a3      	lsls	r3, r4, #2
    512c:	4a78      	ldr	r2, [pc, #480]	; (5310 <rw_test+0x394>)
    512e:	4649      	mov	r1, r9
    5130:	585b      	ldr	r3, [r3, r1]
    5132:	4293      	cmp	r3, r2
    5134:	d0f6      	beq.n	5124 <rw_test+0x1a8>
    5136:	465b      	mov	r3, fp
    5138:	9300      	str	r3, [sp, #0]
    513a:	23c7      	movs	r3, #199	; 0xc7
    513c:	4a67      	ldr	r2, [pc, #412]	; (52dc <rw_test+0x360>)
    513e:	2101      	movs	r1, #1
    5140:	9803      	ldr	r0, [sp, #12]
    5142:	4e67      	ldr	r6, [pc, #412]	; (52e0 <rw_test+0x364>)
    5144:	47b0      	blx	r6
    5146:	e7ed      	b.n	5124 <rw_test+0x1a8>
    5148:	9e05      	ldr	r6, [sp, #20]
				((uint32_t*)buf_test)[i] == TEST_FILL_VALUE_U32,
				"Error: SD/MMC verify write operation.");
	}

	/* Write (restore) the last block */
	test_assert_true(test, SD_MMC_OK ==
    514a:	0032      	movs	r2, r6
    514c:	9904      	ldr	r1, [sp, #16]
    514e:	2000      	movs	r0, #0
    5150:	4b70      	ldr	r3, [pc, #448]	; (5314 <rw_test+0x398>)
    5152:	4798      	blx	r3
    5154:	2800      	cmp	r0, #0
    5156:	d10a      	bne.n	516e <rw_test+0x1f2>
			sd_mmc_init_write_blocks(0, last_blocks_addr, nb_block),
			"Error: SD/MMC initialize write restore sector(s).");

	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
    5158:	2f00      	cmp	r7, #0
    515a:	dc00      	bgt.n	515e <rw_test+0x1e2>
    515c:	e0e8      	b.n	5330 <rw_test+0x3b4>
    515e:	2000      	movs	r0, #0
    5160:	2400      	movs	r4, #0
		test_assert_true(test, SD_MMC_OK ==
    5162:	4b5b      	ldr	r3, [pc, #364]	; (52d0 <rw_test+0x354>)
    5164:	469a      	mov	sl, r3
    5166:	4b6c      	ldr	r3, [pc, #432]	; (5318 <rw_test+0x39c>)
    5168:	4699      	mov	r9, r3
    516a:	9605      	str	r6, [sp, #20]
    516c:	e017      	b.n	519e <rw_test+0x222>
	test_assert_true(test, SD_MMC_OK ==
    516e:	4b6b      	ldr	r3, [pc, #428]	; (531c <rw_test+0x3a0>)
    5170:	9300      	str	r3, [sp, #0]
    5172:	23cd      	movs	r3, #205	; 0xcd
    5174:	4a59      	ldr	r2, [pc, #356]	; (52dc <rw_test+0x360>)
    5176:	2101      	movs	r1, #1
    5178:	9803      	ldr	r0, [sp, #12]
    517a:	4c59      	ldr	r4, [pc, #356]	; (52e0 <rw_test+0x364>)
    517c:	47a0      	blx	r4
    517e:	e7eb      	b.n	5158 <rw_test+0x1dc>
		test_assert_true(test, SD_MMC_OK ==
    5180:	4b67      	ldr	r3, [pc, #412]	; (5320 <rw_test+0x3a4>)
    5182:	9300      	str	r3, [sp, #0]
    5184:	23d4      	movs	r3, #212	; 0xd4
    5186:	4a55      	ldr	r2, [pc, #340]	; (52dc <rw_test+0x360>)
    5188:	2101      	movs	r1, #1
    518a:	9803      	ldr	r0, [sp, #12]
    518c:	4e54      	ldr	r6, [pc, #336]	; (52e0 <rw_test+0x364>)
    518e:	47b0      	blx	r6
    5190:	e00b      	b.n	51aa <rw_test+0x22e>
	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
    5192:	3401      	adds	r4, #1
    5194:	b2a4      	uxth	r4, r4
    5196:	0020      	movs	r0, r4
    5198:	42bc      	cmp	r4, r7
    519a:	db00      	blt.n	519e <rw_test+0x222>
    519c:	e0d9      	b.n	5352 <rw_test+0x3d6>
		test_assert_true(test, SD_MMC_OK ==
    519e:	0240      	lsls	r0, r0, #9
    51a0:	4450      	add	r0, sl
    51a2:	9902      	ldr	r1, [sp, #8]
    51a4:	47c8      	blx	r9
    51a6:	2800      	cmp	r0, #0
    51a8:	d1ea      	bne.n	5180 <rw_test+0x204>
				sd_mmc_start_write_blocks(
				&buf_save[nb_trans * SD_MMC_BLOCK_SIZE],
				split_tansfer? 1 : nb_block),
				"Error: SD/MMC start write restore sector(s).");
		test_assert_true(test, SD_MMC_OK ==
    51aa:	2000      	movs	r0, #0
    51ac:	4b53      	ldr	r3, [pc, #332]	; (52fc <rw_test+0x380>)
    51ae:	4798      	blx	r3
    51b0:	2800      	cmp	r0, #0
    51b2:	d0ee      	beq.n	5192 <rw_test+0x216>
    51b4:	4b5b      	ldr	r3, [pc, #364]	; (5324 <rw_test+0x3a8>)
    51b6:	9300      	str	r3, [sp, #0]
    51b8:	23d7      	movs	r3, #215	; 0xd7
    51ba:	4a48      	ldr	r2, [pc, #288]	; (52dc <rw_test+0x360>)
    51bc:	2101      	movs	r1, #1
    51be:	9803      	ldr	r0, [sp, #12]
    51c0:	4e47      	ldr	r6, [pc, #284]	; (52e0 <rw_test+0x364>)
    51c2:	47b0      	blx	r6
    51c4:	e7e5      	b.n	5192 <rw_test+0x216>
	test_assert_true(test, SD_MMC_OK ==
			sd_mmc_init_read_blocks(0, last_blocks_addr, nb_block),
			"Error: SD/MMC initialize read sector(s).");

	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
		test_assert_true(test, SD_MMC_OK ==
    51c6:	4b48      	ldr	r3, [pc, #288]	; (52e8 <rw_test+0x36c>)
    51c8:	9300      	str	r3, [sp, #0]
    51ca:	23e4      	movs	r3, #228	; 0xe4
    51cc:	4a43      	ldr	r2, [pc, #268]	; (52dc <rw_test+0x360>)
    51ce:	2101      	movs	r1, #1
    51d0:	9803      	ldr	r0, [sp, #12]
    51d2:	4d43      	ldr	r5, [pc, #268]	; (52e0 <rw_test+0x364>)
    51d4:	47a8      	blx	r5
    51d6:	e00a      	b.n	51ee <rw_test+0x272>
	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
    51d8:	3401      	adds	r4, #1
    51da:	b2a4      	uxth	r4, r4
    51dc:	0020      	movs	r0, r4
    51de:	42bc      	cmp	r4, r7
    51e0:	da13      	bge.n	520a <rw_test+0x28e>
		test_assert_true(test, SD_MMC_OK ==
    51e2:	0240      	lsls	r0, r0, #9
    51e4:	4448      	add	r0, r9
    51e6:	9902      	ldr	r1, [sp, #8]
    51e8:	47b0      	blx	r6
    51ea:	2800      	cmp	r0, #0
    51ec:	d1eb      	bne.n	51c6 <rw_test+0x24a>
				sd_mmc_start_read_blocks(
				&buf_test[nb_trans * SD_MMC_BLOCK_SIZE],
				split_tansfer? 1 : nb_block),
				"Error: SD/MMC start read sector(s).");
		test_assert_true(test, SD_MMC_OK ==
    51ee:	2000      	movs	r0, #0
    51f0:	4b45      	ldr	r3, [pc, #276]	; (5308 <rw_test+0x38c>)
    51f2:	4798      	blx	r3
    51f4:	2800      	cmp	r0, #0
    51f6:	d0ef      	beq.n	51d8 <rw_test+0x25c>
    51f8:	4b3c      	ldr	r3, [pc, #240]	; (52ec <rw_test+0x370>)
    51fa:	9300      	str	r3, [sp, #0]
    51fc:	23e7      	movs	r3, #231	; 0xe7
    51fe:	4a37      	ldr	r2, [pc, #220]	; (52dc <rw_test+0x360>)
    5200:	2101      	movs	r1, #1
    5202:	9803      	ldr	r0, [sp, #12]
    5204:	4d36      	ldr	r5, [pc, #216]	; (52e0 <rw_test+0x364>)
    5206:	47a8      	blx	r5
    5208:	e7e6      	b.n	51d8 <rw_test+0x25c>
    520a:	4655      	mov	r5, sl
				sd_mmc_wait_end_of_read_blocks(false),
				"Error: SD/MMC wait end of read sector(s).");
	}

	/* Check buffer restored */
	for (i = 0; i < (SD_MMC_BLOCK_SIZE * nb_block / sizeof(uint32_t)); i++) {
    520c:	2d00      	cmp	r5, #0
    520e:	d100      	bne.n	5212 <rw_test+0x296>
    5210:	e0b7      	b.n	5382 <rw_test+0x406>
    5212:	2400      	movs	r4, #0
    5214:	2600      	movs	r6, #0
		test_assert_true(test,
    5216:	4b3b      	ldr	r3, [pc, #236]	; (5304 <rw_test+0x388>)
    5218:	4699      	mov	r9, r3
    521a:	4f2d      	ldr	r7, [pc, #180]	; (52d0 <rw_test+0x354>)
    521c:	46a8      	mov	r8, r5
    521e:	e004      	b.n	522a <rw_test+0x2ae>
	for (i = 0; i < (SD_MMC_BLOCK_SIZE * nb_block / sizeof(uint32_t)); i++) {
    5220:	3601      	adds	r6, #1
    5222:	3404      	adds	r4, #4
    5224:	4546      	cmp	r6, r8
    5226:	d100      	bne.n	522a <rw_test+0x2ae>
    5228:	e0ab      	b.n	5382 <rw_test+0x406>
		test_assert_true(test,
    522a:	464b      	mov	r3, r9
    522c:	58e3      	ldr	r3, [r4, r3]
    522e:	59e2      	ldr	r2, [r4, r7]
    5230:	4293      	cmp	r3, r2
    5232:	d0f5      	beq.n	5220 <rw_test+0x2a4>
    5234:	4b3c      	ldr	r3, [pc, #240]	; (5328 <rw_test+0x3ac>)
    5236:	9300      	str	r3, [sp, #0]
    5238:	23ee      	movs	r3, #238	; 0xee
    523a:	4a28      	ldr	r2, [pc, #160]	; (52dc <rw_test+0x360>)
    523c:	2101      	movs	r1, #1
    523e:	9803      	ldr	r0, [sp, #12]
    5240:	4d27      	ldr	r5, [pc, #156]	; (52e0 <rw_test+0x364>)
    5242:	47a8      	blx	r5
    5244:	e7ec      	b.n	5220 <rw_test+0x2a4>
		test_assert_true(test, SD_MMC_OK ==
    5246:	0240      	lsls	r0, r0, #9
    5248:	4450      	add	r0, sl
    524a:	9902      	ldr	r1, [sp, #8]
    524c:	47c8      	blx	r9
    524e:	2800      	cmp	r0, #0
    5250:	d000      	beq.n	5254 <rw_test+0x2d8>
    5252:	e6cf      	b.n	4ff4 <rw_test+0x78>
		test_assert_true(test, SD_MMC_OK ==
    5254:	2000      	movs	r0, #0
    5256:	4b2c      	ldr	r3, [pc, #176]	; (5308 <rw_test+0x38c>)
    5258:	4798      	blx	r3
    525a:	2800      	cmp	r0, #0
    525c:	d000      	beq.n	5260 <rw_test+0x2e4>
    525e:	e6d2      	b.n	5006 <rw_test+0x8a>
	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
    5260:	3401      	adds	r4, #1
    5262:	b2a4      	uxth	r4, r4
    5264:	0020      	movs	r0, r4
    5266:	2f00      	cmp	r7, #0
    5268:	d125      	bne.n	52b6 <rw_test+0x33a>
    526a:	2c00      	cmp	r4, #0
    526c:	ddeb      	ble.n	5246 <rw_test+0x2ca>
    526e:	2701      	movs	r7, #1
	test_assert_true(test, !sd_mmc_is_write_protected(0),
    5270:	2000      	movs	r0, #0
    5272:	4b2e      	ldr	r3, [pc, #184]	; (532c <rw_test+0x3b0>)
    5274:	4798      	blx	r3
    5276:	2800      	cmp	r0, #0
    5278:	d000      	beq.n	527c <rw_test+0x300>
    527a:	e6cd      	b.n	5018 <rw_test+0x9c>
	for (i = 0; i < (SD_MMC_BLOCK_SIZE * nb_block / sizeof(uint32_t)); i++) {
    527c:	0272      	lsls	r2, r6, #9
    527e:	0895      	lsrs	r5, r2, #2
    5280:	d006      	beq.n	5290 <rw_test+0x314>
    5282:	2300      	movs	r3, #0
		((uint32_t*)buf_test)[i] = TEST_FILL_VALUE_U32;
    5284:	481f      	ldr	r0, [pc, #124]	; (5304 <rw_test+0x388>)
    5286:	4922      	ldr	r1, [pc, #136]	; (5310 <rw_test+0x394>)
    5288:	5019      	str	r1, [r3, r0]
    528a:	3304      	adds	r3, #4
	for (i = 0; i < (SD_MMC_BLOCK_SIZE * nb_block / sizeof(uint32_t)); i++) {
    528c:	429a      	cmp	r2, r3
    528e:	d1fb      	bne.n	5288 <rw_test+0x30c>
	test_assert_true(test, SD_MMC_OK ==
    5290:	0032      	movs	r2, r6
    5292:	9904      	ldr	r1, [sp, #16]
    5294:	2000      	movs	r0, #0
    5296:	4b1f      	ldr	r3, [pc, #124]	; (5314 <rw_test+0x398>)
    5298:	4798      	blx	r3
    529a:	2800      	cmp	r0, #0
    529c:	d000      	beq.n	52a0 <rw_test+0x324>
    529e:	e6c4      	b.n	502a <rw_test+0xae>
	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
    52a0:	2f00      	cmp	r7, #0
    52a2:	dc00      	bgt.n	52a6 <rw_test+0x32a>
    52a4:	e6ed      	b.n	5082 <rw_test+0x106>
    52a6:	2000      	movs	r0, #0
    52a8:	2400      	movs	r4, #0
		test_assert_true(test, SD_MMC_OK ==
    52aa:	4b16      	ldr	r3, [pc, #88]	; (5304 <rw_test+0x388>)
    52ac:	469a      	mov	sl, r3
    52ae:	4b1a      	ldr	r3, [pc, #104]	; (5318 <rw_test+0x39c>)
    52b0:	4699      	mov	r9, r3
    52b2:	9605      	str	r6, [sp, #20]
    52b4:	e6d0      	b.n	5058 <rw_test+0xdc>
	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
    52b6:	42a6      	cmp	r6, r4
    52b8:	dd02      	ble.n	52c0 <rw_test+0x344>
		test_assert_true(test, SD_MMC_OK ==
    52ba:	0240      	lsls	r0, r0, #9
    52bc:	4458      	add	r0, fp
    52be:	e7c4      	b.n	524a <rw_test+0x2ce>
    52c0:	0037      	movs	r7, r6
    52c2:	e7d5      	b.n	5270 <rw_test+0x2f4>
    52c4:	000008d9 	.word	0x000008d9
    52c8:	7fffffe7 	.word	0x7fffffe7
    52cc:	00000905 	.word	0x00000905
    52d0:	200001b4 	.word	0x200001b4
    52d4:	0000098d 	.word	0x0000098d
    52d8:	00007364 	.word	0x00007364
    52dc:	00007350 	.word	0x00007350
    52e0:	000017e1 	.word	0x000017e1
    52e4:	0000737c 	.word	0x0000737c
    52e8:	000073a8 	.word	0x000073a8
    52ec:	000073cc 	.word	0x000073cc
    52f0:	000073f8 	.word	0x000073f8
    52f4:	0000741c 	.word	0x0000741c
    52f8:	00007448 	.word	0x00007448
    52fc:	00000b8d 	.word	0x00000b8d
    5300:	00007470 	.word	0x00007470
    5304:	200005b4 	.word	0x200005b4
    5308:	00000a1d 	.word	0x00000a1d
    530c:	0000749c 	.word	0x0000749c
    5310:	5500aaff 	.word	0x5500aaff
    5314:	00000a8d 	.word	0x00000a8d
    5318:	00000afd 	.word	0x00000afd
    531c:	000074c4 	.word	0x000074c4
    5320:	000074f8 	.word	0x000074f8
    5324:	00007528 	.word	0x00007528
    5328:	0000755c 	.word	0x0000755c
    532c:	00000901 	.word	0x00000901
	test_assert_true(test, SD_MMC_OK ==
    5330:	0032      	movs	r2, r6
    5332:	9904      	ldr	r1, [sp, #16]
    5334:	2000      	movs	r0, #0
    5336:	4b16      	ldr	r3, [pc, #88]	; (5390 <rw_test+0x414>)
    5338:	4798      	blx	r3
    533a:	2800      	cmp	r0, #0
    533c:	d100      	bne.n	5340 <rw_test+0x3c4>
    533e:	e765      	b.n	520c <rw_test+0x290>
    5340:	4b14      	ldr	r3, [pc, #80]	; (5394 <rw_test+0x418>)
    5342:	9300      	str	r3, [sp, #0]
    5344:	23dd      	movs	r3, #221	; 0xdd
    5346:	4a14      	ldr	r2, [pc, #80]	; (5398 <rw_test+0x41c>)
    5348:	2101      	movs	r1, #1
    534a:	9803      	ldr	r0, [sp, #12]
    534c:	4c13      	ldr	r4, [pc, #76]	; (539c <rw_test+0x420>)
    534e:	47a0      	blx	r4
    5350:	e75c      	b.n	520c <rw_test+0x290>
    5352:	9e05      	ldr	r6, [sp, #20]
    5354:	0032      	movs	r2, r6
    5356:	9904      	ldr	r1, [sp, #16]
    5358:	2000      	movs	r0, #0
    535a:	4b0d      	ldr	r3, [pc, #52]	; (5390 <rw_test+0x414>)
    535c:	4798      	blx	r3
    535e:	2800      	cmp	r0, #0
    5360:	d106      	bne.n	5370 <rw_test+0x3f4>
	for (nb_trans = 0; nb_trans < (split_tansfer? nb_block : 1); nb_trans++) {
    5362:	2000      	movs	r0, #0
    5364:	2400      	movs	r4, #0
		test_assert_true(test, SD_MMC_OK ==
    5366:	4b0e      	ldr	r3, [pc, #56]	; (53a0 <rw_test+0x424>)
    5368:	4699      	mov	r9, r3
    536a:	4e0e      	ldr	r6, [pc, #56]	; (53a4 <rw_test+0x428>)
    536c:	46aa      	mov	sl, r5
    536e:	e738      	b.n	51e2 <rw_test+0x266>
	test_assert_true(test, SD_MMC_OK ==
    5370:	4b08      	ldr	r3, [pc, #32]	; (5394 <rw_test+0x418>)
    5372:	9300      	str	r3, [sp, #0]
    5374:	23dd      	movs	r3, #221	; 0xdd
    5376:	4a08      	ldr	r2, [pc, #32]	; (5398 <rw_test+0x41c>)
    5378:	2101      	movs	r1, #1
    537a:	9803      	ldr	r0, [sp, #12]
    537c:	4c07      	ldr	r4, [pc, #28]	; (539c <rw_test+0x420>)
    537e:	47a0      	blx	r4
    5380:	e7ef      	b.n	5362 <rw_test+0x3e6>
				((uint32_t*)buf_test)[i] == ((uint32_t*)buf_save)[i],
				"Error: SD/MMC verify restore operation.");
	}
}
    5382:	b007      	add	sp, #28
    5384:	bc3c      	pop	{r2, r3, r4, r5}
    5386:	4690      	mov	r8, r2
    5388:	4699      	mov	r9, r3
    538a:	46a2      	mov	sl, r4
    538c:	46ab      	mov	fp, r5
    538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5390:	00000905 	.word	0x00000905
    5394:	0000737c 	.word	0x0000737c
    5398:	00007350 	.word	0x00007350
    539c:	000017e1 	.word	0x000017e1
    53a0:	200005b4 	.word	0x200005b4
    53a4:	0000098d 	.word	0x0000098d

000053a8 <run_sd_mmc_rw_test>:
 * \brief SD/MMC card read and write test.
 *
 * \param test Current test case.
 */
static void run_sd_mmc_rw_test(const struct test_case *test)
{
    53a8:	b530      	push	{r4, r5, lr}
    53aa:	b083      	sub	sp, #12
    53ac:	0004      	movs	r4, r0
	test_assert_true(test, SD_MMC_OK == sd_mmc_check(0),
    53ae:	2000      	movs	r0, #0
    53b0:	4b11      	ldr	r3, [pc, #68]	; (53f8 <run_sd_mmc_rw_test+0x50>)
    53b2:	4798      	blx	r3
    53b4:	2800      	cmp	r0, #0
    53b6:	d106      	bne.n	53c6 <run_sd_mmc_rw_test+0x1e>
			"SD/MMC card is not initialized OK.");

	if (sd_mmc_get_type(0) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    53b8:	2000      	movs	r0, #0
    53ba:	4b10      	ldr	r3, [pc, #64]	; (53fc <run_sd_mmc_rw_test+0x54>)
    53bc:	4798      	blx	r3
    53be:	0783      	lsls	r3, r0, #30
    53c0:	d10b      	bne.n	53da <run_sd_mmc_rw_test+0x32>
		rw_test(test, 1, false);
		rw_test(test, NB_MULTI_BLOCKS, false);
		rw_test(test, NB_MULTI_BLOCKS, true);
	}
}
    53c2:	b003      	add	sp, #12
    53c4:	bd30      	pop	{r4, r5, pc}
	test_assert_true(test, SD_MMC_OK == sd_mmc_check(0),
    53c6:	4b0e      	ldr	r3, [pc, #56]	; (5400 <run_sd_mmc_rw_test+0x58>)
    53c8:	9300      	str	r3, [sp, #0]
    53ca:	238a      	movs	r3, #138	; 0x8a
    53cc:	005b      	lsls	r3, r3, #1
    53ce:	4a0d      	ldr	r2, [pc, #52]	; (5404 <run_sd_mmc_rw_test+0x5c>)
    53d0:	2101      	movs	r1, #1
    53d2:	0020      	movs	r0, r4
    53d4:	4d0c      	ldr	r5, [pc, #48]	; (5408 <run_sd_mmc_rw_test+0x60>)
    53d6:	47a8      	blx	r5
    53d8:	e7ee      	b.n	53b8 <run_sd_mmc_rw_test+0x10>
		rw_test(test, 1, false);
    53da:	2200      	movs	r2, #0
    53dc:	2101      	movs	r1, #1
    53de:	0020      	movs	r0, r4
    53e0:	4d0a      	ldr	r5, [pc, #40]	; (540c <run_sd_mmc_rw_test+0x64>)
    53e2:	47a8      	blx	r5
		rw_test(test, NB_MULTI_BLOCKS, false);
    53e4:	2200      	movs	r2, #0
    53e6:	2102      	movs	r1, #2
    53e8:	0020      	movs	r0, r4
    53ea:	47a8      	blx	r5
		rw_test(test, NB_MULTI_BLOCKS, true);
    53ec:	2201      	movs	r2, #1
    53ee:	2102      	movs	r1, #2
    53f0:	0020      	movs	r0, r4
    53f2:	47a8      	blx	r5
}
    53f4:	e7e5      	b.n	53c2 <run_sd_mmc_rw_test+0x1a>
    53f6:	46c0      	nop			; (mov r8, r8)
    53f8:	00000401 	.word	0x00000401
    53fc:	000008b1 	.word	0x000008b1
    5400:	0000732c 	.word	0x0000732c
    5404:	00007350 	.word	0x00007350
    5408:	000017e1 	.word	0x000017e1
    540c:	00004f7d 	.word	0x00004f7d

00005410 <run_sd_mmc_init_test>:
{
    5410:	b530      	push	{r4, r5, lr}
    5412:	b083      	sub	sp, #12
    5414:	0005      	movs	r5, r0
	sd_mmc_init();
    5416:	4b11      	ldr	r3, [pc, #68]	; (545c <run_sd_mmc_init_test+0x4c>)
    5418:	4798      	blx	r3
		err = sd_mmc_check(0);
    541a:	4c11      	ldr	r4, [pc, #68]	; (5460 <run_sd_mmc_init_test+0x50>)
    541c:	2000      	movs	r0, #0
    541e:	47a0      	blx	r4
	} while (!SD_MMC_ERR_NO_CARD == err);
    5420:	2800      	cmp	r0, #0
    5422:	d0fb      	beq.n	541c <run_sd_mmc_init_test+0xc>
	test_assert_true(test, err == SD_MMC_INIT_ONGOING,
    5424:	2801      	cmp	r0, #1
    5426:	d008      	beq.n	543a <run_sd_mmc_init_test+0x2a>
    5428:	4b0e      	ldr	r3, [pc, #56]	; (5464 <run_sd_mmc_init_test+0x54>)
    542a:	9300      	str	r3, [sp, #0]
    542c:	2306      	movs	r3, #6
    542e:	33ff      	adds	r3, #255	; 0xff
    5430:	4a0d      	ldr	r2, [pc, #52]	; (5468 <run_sd_mmc_init_test+0x58>)
    5432:	2101      	movs	r1, #1
    5434:	0028      	movs	r0, r5
    5436:	4c0d      	ldr	r4, [pc, #52]	; (546c <run_sd_mmc_init_test+0x5c>)
    5438:	47a0      	blx	r4
	test_assert_true(test, sd_mmc_check(0) == SD_MMC_OK,
    543a:	2000      	movs	r0, #0
    543c:	4b08      	ldr	r3, [pc, #32]	; (5460 <run_sd_mmc_init_test+0x50>)
    543e:	4798      	blx	r3
    5440:	2800      	cmp	r0, #0
    5442:	d101      	bne.n	5448 <run_sd_mmc_init_test+0x38>
}
    5444:	b003      	add	sp, #12
    5446:	bd30      	pop	{r4, r5, pc}
	test_assert_true(test, sd_mmc_check(0) == SD_MMC_OK,
    5448:	4b09      	ldr	r3, [pc, #36]	; (5470 <run_sd_mmc_init_test+0x60>)
    544a:	9300      	str	r3, [sp, #0]
    544c:	230a      	movs	r3, #10
    544e:	33ff      	adds	r3, #255	; 0xff
    5450:	4a05      	ldr	r2, [pc, #20]	; (5468 <run_sd_mmc_init_test+0x58>)
    5452:	2101      	movs	r1, #1
    5454:	0028      	movs	r0, r5
    5456:	4c05      	ldr	r4, [pc, #20]	; (546c <run_sd_mmc_init_test+0x5c>)
    5458:	47a0      	blx	r4
}
    545a:	e7f3      	b.n	5444 <run_sd_mmc_init_test+0x34>
    545c:	000003e1 	.word	0x000003e1
    5460:	00000401 	.word	0x00000401
    5464:	000072e0 	.word	0x000072e0
    5468:	00007350 	.word	0x00007350
    546c:	000017e1 	.word	0x000017e1
    5470:	00007308 	.word	0x00007308

00005474 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5474:	b570      	push	{r4, r5, r6, lr}
    5476:	b082      	sub	sp, #8
    5478:	0005      	movs	r5, r0
    547a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    547c:	2200      	movs	r2, #0
    547e:	466b      	mov	r3, sp
    5480:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5482:	4c06      	ldr	r4, [pc, #24]	; (549c <usart_serial_getchar+0x28>)
    5484:	466b      	mov	r3, sp
    5486:	1d99      	adds	r1, r3, #6
    5488:	0028      	movs	r0, r5
    548a:	47a0      	blx	r4
    548c:	2800      	cmp	r0, #0
    548e:	d1f9      	bne.n	5484 <usart_serial_getchar+0x10>

	*c = temp;
    5490:	466b      	mov	r3, sp
    5492:	3306      	adds	r3, #6
    5494:	881b      	ldrh	r3, [r3, #0]
    5496:	7033      	strb	r3, [r6, #0]
}
    5498:	b002      	add	sp, #8
    549a:	bd70      	pop	{r4, r5, r6, pc}
    549c:	00003fcd 	.word	0x00003fcd

000054a0 <usart_serial_putchar>:
{
    54a0:	b570      	push	{r4, r5, r6, lr}
    54a2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    54a4:	b28c      	uxth	r4, r1
    54a6:	4e03      	ldr	r6, [pc, #12]	; (54b4 <usart_serial_putchar+0x14>)
    54a8:	0021      	movs	r1, r4
    54aa:	0028      	movs	r0, r5
    54ac:	47b0      	blx	r6
    54ae:	2800      	cmp	r0, #0
    54b0:	d1fa      	bne.n	54a8 <usart_serial_putchar+0x8>
}
    54b2:	bd70      	pop	{r4, r5, r6, pc}
    54b4:	00003e49 	.word	0x00003e49

000054b8 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    54b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ba:	46ce      	mov	lr, r9
    54bc:	4647      	mov	r7, r8
    54be:	b580      	push	{r7, lr}
    54c0:	b099      	sub	sp, #100	; 0x64
	system_init();
    54c2:	4b61      	ldr	r3, [pc, #388]	; (5648 <main+0x190>)
    54c4:	4798      	blx	r3
	delay_init();
    54c6:	4b61      	ldr	r3, [pc, #388]	; (564c <main+0x194>)
    54c8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    54ca:	aa03      	add	r2, sp, #12
    54cc:	2380      	movs	r3, #128	; 0x80
    54ce:	05db      	lsls	r3, r3, #23
    54d0:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    54d2:	2300      	movs	r3, #0
    54d4:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    54d6:	21ff      	movs	r1, #255	; 0xff
    54d8:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    54da:	2100      	movs	r1, #0
    54dc:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    54de:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    54e0:	2001      	movs	r0, #1
    54e2:	2424      	movs	r4, #36	; 0x24
    54e4:	5510      	strb	r0, [r2, r4]
	config->transmitter_enable = true;
    54e6:	3401      	adds	r4, #1
    54e8:	5510      	strb	r0, [r2, r4]
	config->clock_polarity_inverted = false;
    54ea:	3025      	adds	r0, #37	; 0x25
    54ec:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    54ee:	3001      	adds	r0, #1
    54f0:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    54f2:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    54f4:	3005      	adds	r0, #5
    54f6:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    54f8:	3001      	adds	r0, #1
    54fa:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    54fc:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    54fe:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5500:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5502:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5504:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5506:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    5508:	2313      	movs	r3, #19
    550a:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    550c:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    550e:	2380      	movs	r3, #128	; 0x80
    5510:	035b      	lsls	r3, r3, #13
    5512:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    5514:	4b4e      	ldr	r3, [pc, #312]	; (5650 <main+0x198>)
    5516:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    5518:	4b4e      	ldr	r3, [pc, #312]	; (5654 <main+0x19c>)
    551a:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    551c:	2301      	movs	r3, #1
    551e:	425b      	negs	r3, r3
    5520:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    5522:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    5524:	2396      	movs	r3, #150	; 0x96
    5526:	021b      	lsls	r3, r3, #8
    5528:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    552a:	484b      	ldr	r0, [pc, #300]	; (5658 <main+0x1a0>)
    552c:	4b4b      	ldr	r3, [pc, #300]	; (565c <main+0x1a4>)
    552e:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    5530:	494b      	ldr	r1, [pc, #300]	; (5660 <main+0x1a8>)
    5532:	4b4c      	ldr	r3, [pc, #304]	; (5664 <main+0x1ac>)
    5534:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5536:	494c      	ldr	r1, [pc, #304]	; (5668 <main+0x1b0>)
    5538:	4b4c      	ldr	r3, [pc, #304]	; (566c <main+0x1b4>)
    553a:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    553c:	494c      	ldr	r1, [pc, #304]	; (5670 <main+0x1b8>)
    553e:	4b4d      	ldr	r3, [pc, #308]	; (5674 <main+0x1bc>)
    5540:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5542:	4d4d      	ldr	r5, [pc, #308]	; (5678 <main+0x1c0>)
    5544:	682b      	ldr	r3, [r5, #0]
    5546:	6898      	ldr	r0, [r3, #8]
    5548:	2100      	movs	r1, #0
    554a:	4c4c      	ldr	r4, [pc, #304]	; (567c <main+0x1c4>)
    554c:	47a0      	blx	r4
	setbuf(stdin, NULL);
    554e:	682b      	ldr	r3, [r5, #0]
    5550:	6858      	ldr	r0, [r3, #4]
    5552:	2100      	movs	r1, #0
    5554:	47a0      	blx	r4
    5556:	4b4a      	ldr	r3, [pc, #296]	; (5680 <main+0x1c8>)
    5558:	6818      	ldr	r0, [r3, #0]
static inline void usart_enable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    555a:	2800      	cmp	r0, #0
    555c:	d01c      	beq.n	5598 <main+0xe0>
    555e:	4b3e      	ldr	r3, [pc, #248]	; (5658 <main+0x1a0>)
    5560:	681b      	ldr	r3, [r3, #0]
    5562:	2b00      	cmp	r3, #0
    5564:	d00e      	beq.n	5584 <main+0xcc>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5566:	4b3c      	ldr	r3, [pc, #240]	; (5658 <main+0x1a0>)
    5568:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    556a:	0020      	movs	r0, r4
    556c:	4b45      	ldr	r3, [pc, #276]	; (5684 <main+0x1cc>)
    556e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5570:	231f      	movs	r3, #31
    5572:	4018      	ands	r0, r3
    5574:	3b1e      	subs	r3, #30
    5576:	4083      	lsls	r3, r0
    5578:	4a43      	ldr	r2, [pc, #268]	; (5688 <main+0x1d0>)
    557a:	6013      	str	r3, [r2, #0]
    557c:	4f40      	ldr	r7, [pc, #256]	; (5680 <main+0x1c8>)
	Assert(module->hw);
    557e:	4e36      	ldr	r6, [pc, #216]	; (5658 <main+0x1a0>)
    5580:	46b1      	mov	r9, r6
    5582:	e01c      	b.n	55be <main+0x106>
	Assert(module->hw);
    5584:	4b41      	ldr	r3, [pc, #260]	; (568c <main+0x1d4>)
    5586:	9301      	str	r3, [sp, #4]
    5588:	4b41      	ldr	r3, [pc, #260]	; (5690 <main+0x1d8>)
    558a:	9300      	str	r3, [sp, #0]
    558c:	4b41      	ldr	r3, [pc, #260]	; (5694 <main+0x1dc>)
    558e:	4a42      	ldr	r2, [pc, #264]	; (5698 <main+0x1e0>)
    5590:	2101      	movs	r1, #1
    5592:	4c42      	ldr	r4, [pc, #264]	; (569c <main+0x1e4>)
    5594:	47a0      	blx	r4
    5596:	e7e6      	b.n	5566 <main+0xae>
    5598:	4b2f      	ldr	r3, [pc, #188]	; (5658 <main+0x1a0>)
    559a:	681b      	ldr	r3, [r3, #0]
    559c:	2b00      	cmp	r3, #0
    559e:	d1e2      	bne.n	5566 <main+0xae>
    55a0:	4b3c      	ldr	r3, [pc, #240]	; (5694 <main+0x1dc>)
    55a2:	4a3d      	ldr	r2, [pc, #244]	; (5698 <main+0x1e0>)
    55a4:	4939      	ldr	r1, [pc, #228]	; (568c <main+0x1d4>)
    55a6:	483e      	ldr	r0, [pc, #248]	; (56a0 <main+0x1e8>)
    55a8:	4c3e      	ldr	r4, [pc, #248]	; (56a4 <main+0x1ec>)
    55aa:	47a0      	blx	r4
    55ac:	e7fe      	b.n	55ac <main+0xf4>
	Assert(module->hw);
    55ae:	6833      	ldr	r3, [r6, #0]
    55b0:	2b00      	cmp	r3, #0
    55b2:	d016      	beq.n	55e2 <main+0x12a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    55b4:	4b28      	ldr	r3, [pc, #160]	; (5658 <main+0x1a0>)
    55b6:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    55b8:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    55ba:	2b00      	cmp	r3, #0
    55bc:	d019      	beq.n	55f2 <main+0x13a>
    55be:	6838      	ldr	r0, [r7, #0]
	Assert(module->hw);
    55c0:	2800      	cmp	r0, #0
    55c2:	d0f4      	beq.n	55ae <main+0xf6>
    55c4:	464b      	mov	r3, r9
    55c6:	681b      	ldr	r3, [r3, #0]
    55c8:	2b00      	cmp	r3, #0
    55ca:	d1f3      	bne.n	55b4 <main+0xfc>
    55cc:	4b2f      	ldr	r3, [pc, #188]	; (568c <main+0x1d4>)
    55ce:	9301      	str	r3, [sp, #4]
    55d0:	4b2f      	ldr	r3, [pc, #188]	; (5690 <main+0x1d8>)
    55d2:	9300      	str	r3, [sp, #0]
    55d4:	23fd      	movs	r3, #253	; 0xfd
    55d6:	009b      	lsls	r3, r3, #2
    55d8:	4a2f      	ldr	r2, [pc, #188]	; (5698 <main+0x1e0>)
    55da:	2101      	movs	r1, #1
    55dc:	4d2f      	ldr	r5, [pc, #188]	; (569c <main+0x1e4>)
    55de:	47a8      	blx	r5
    55e0:	e7e8      	b.n	55b4 <main+0xfc>
    55e2:	23fd      	movs	r3, #253	; 0xfd
    55e4:	009b      	lsls	r3, r3, #2
    55e6:	4a2c      	ldr	r2, [pc, #176]	; (5698 <main+0x1e0>)
    55e8:	4928      	ldr	r1, [pc, #160]	; (568c <main+0x1d4>)
    55ea:	482d      	ldr	r0, [pc, #180]	; (56a0 <main+0x1e8>)
    55ec:	4c2d      	ldr	r4, [pc, #180]	; (56a4 <main+0x1ec>)
    55ee:	47a0      	blx	r4
    55f0:	e7fe      	b.n	55f0 <main+0x138>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    55f2:	6823      	ldr	r3, [r4, #0]
    55f4:	2602      	movs	r6, #2
    55f6:	4333      	orrs	r3, r6
    55f8:	6023      	str	r3, [r4, #0]
	cdc_uart_init();

	/* Wait stdio stable */
	delay_ms(5);
    55fa:	2000      	movs	r0, #0
    55fc:	4b2a      	ldr	r3, [pc, #168]	; (56a8 <main+0x1f0>)
    55fe:	4798      	blx	r3
    5600:	0004      	movs	r4, r0
    5602:	2500      	movs	r5, #0
    5604:	0f83      	lsrs	r3, r0, #30
    5606:	0082      	lsls	r2, r0, #2
    5608:	1912      	adds	r2, r2, r4
    560a:	416b      	adcs	r3, r5
    560c:	4827      	ldr	r0, [pc, #156]	; (56ac <main+0x1f4>)
    560e:	2100      	movs	r1, #0
    5610:	1880      	adds	r0, r0, r2
    5612:	4159      	adcs	r1, r3
    5614:	4a26      	ldr	r2, [pc, #152]	; (56b0 <main+0x1f8>)
    5616:	2300      	movs	r3, #0
    5618:	4c26      	ldr	r4, [pc, #152]	; (56b4 <main+0x1fc>)
    561a:	47a0      	blx	r4
    561c:	4b26      	ldr	r3, [pc, #152]	; (56b8 <main+0x200>)
    561e:	4798      	blx	r3

	irq_initialize_vectors();
	cpu_irq_enable();
    5620:	2201      	movs	r2, #1
    5622:	4b26      	ldr	r3, [pc, #152]	; (56bc <main+0x204>)
    5624:	701a      	strb	r2, [r3, #0]
    5626:	f3bf 8f5f 	dmb	sy
    562a:	b662      	cpsie	i

	DEFINE_TEST_CASE(sd_mmc_rw_test, NULL, run_sd_mmc_rw_test,
			NULL, "SD/MMC card read and write test.");

	/* Put test case addresses in an array */
	DEFINE_TEST_ARRAY(sd_mmc_tests) = {
    562c:	ab16      	add	r3, sp, #88	; 0x58
    562e:	4a24      	ldr	r2, [pc, #144]	; (56c0 <main+0x208>)
    5630:	0019      	movs	r1, r3
    5632:	ca11      	ldmia	r2!, {r0, r4}
    5634:	c111      	stmia	r1!, {r0, r4}
		&sd_mmc_init_test,
		&sd_mmc_rw_test
	};

	/* Define the test suite */
	DEFINE_TEST_SUITE(sd_mmc_suite, sd_mmc_tests,
    5636:	9613      	str	r6, [sp, #76]	; 0x4c
    5638:	9314      	str	r3, [sp, #80]	; 0x50
    563a:	4b22      	ldr	r3, [pc, #136]	; (56c4 <main+0x20c>)
    563c:	9315      	str	r3, [sp, #84]	; 0x54
			"SD/MMC stack test suite");

	/* Run all tests in the test suite */
	test_suite_run(&sd_mmc_suite);
    563e:	a813      	add	r0, sp, #76	; 0x4c
    5640:	4b21      	ldr	r3, [pc, #132]	; (56c8 <main+0x210>)
    5642:	4798      	blx	r3
    5644:	e7fe      	b.n	5644 <main+0x18c>
    5646:	46c0      	nop			; (mov r8, r8)
    5648:	00004d99 	.word	0x00004d99
    564c:	000016e1 	.word	0x000016e1
    5650:	00160002 	.word	0x00160002
    5654:	00170002 	.word	0x00170002
    5658:	200009e4 	.word	0x200009e4
    565c:	200009e0 	.word	0x200009e0
    5660:	000054a1 	.word	0x000054a1
    5664:	200009dc 	.word	0x200009dc
    5668:	00005475 	.word	0x00005475
    566c:	200009d8 	.word	0x200009d8
    5670:	42001400 	.word	0x42001400
    5674:	0000379d 	.word	0x0000379d
    5678:	20000034 	.word	0x20000034
    567c:	0000615d 	.word	0x0000615d
    5680:	2000011c 	.word	0x2000011c
    5684:	00001ed1 	.word	0x00001ed1
    5688:	e000e100 	.word	0xe000e100
    568c:	00006d80 	.word	0x00006d80
    5690:	00006c40 	.word	0x00006c40
    5694:	00000475 	.word	0x00000475
    5698:	000070e0 	.word	0x000070e0
    569c:	000017e1 	.word	0x000017e1
    56a0:	00006c58 	.word	0x00006c58
    56a4:	00006055 	.word	0x00006055
    56a8:	000049bd 	.word	0x000049bd
    56ac:	00001b57 	.word	0x00001b57
    56b0:	00001b58 	.word	0x00001b58
    56b4:	000057e5 	.word	0x000057e5
    56b8:	20000001 	.word	0x20000001
    56bc:	20000031 	.word	0x20000031
    56c0:	00007278 	.word	0x00007278
    56c4:	000072c8 	.word	0x000072c8
    56c8:	00001871 	.word	0x00001871

000056cc <__udivsi3>:
    56cc:	2200      	movs	r2, #0
    56ce:	0843      	lsrs	r3, r0, #1
    56d0:	428b      	cmp	r3, r1
    56d2:	d374      	bcc.n	57be <__udivsi3+0xf2>
    56d4:	0903      	lsrs	r3, r0, #4
    56d6:	428b      	cmp	r3, r1
    56d8:	d35f      	bcc.n	579a <__udivsi3+0xce>
    56da:	0a03      	lsrs	r3, r0, #8
    56dc:	428b      	cmp	r3, r1
    56de:	d344      	bcc.n	576a <__udivsi3+0x9e>
    56e0:	0b03      	lsrs	r3, r0, #12
    56e2:	428b      	cmp	r3, r1
    56e4:	d328      	bcc.n	5738 <__udivsi3+0x6c>
    56e6:	0c03      	lsrs	r3, r0, #16
    56e8:	428b      	cmp	r3, r1
    56ea:	d30d      	bcc.n	5708 <__udivsi3+0x3c>
    56ec:	22ff      	movs	r2, #255	; 0xff
    56ee:	0209      	lsls	r1, r1, #8
    56f0:	ba12      	rev	r2, r2
    56f2:	0c03      	lsrs	r3, r0, #16
    56f4:	428b      	cmp	r3, r1
    56f6:	d302      	bcc.n	56fe <__udivsi3+0x32>
    56f8:	1212      	asrs	r2, r2, #8
    56fa:	0209      	lsls	r1, r1, #8
    56fc:	d065      	beq.n	57ca <__udivsi3+0xfe>
    56fe:	0b03      	lsrs	r3, r0, #12
    5700:	428b      	cmp	r3, r1
    5702:	d319      	bcc.n	5738 <__udivsi3+0x6c>
    5704:	e000      	b.n	5708 <__udivsi3+0x3c>
    5706:	0a09      	lsrs	r1, r1, #8
    5708:	0bc3      	lsrs	r3, r0, #15
    570a:	428b      	cmp	r3, r1
    570c:	d301      	bcc.n	5712 <__udivsi3+0x46>
    570e:	03cb      	lsls	r3, r1, #15
    5710:	1ac0      	subs	r0, r0, r3
    5712:	4152      	adcs	r2, r2
    5714:	0b83      	lsrs	r3, r0, #14
    5716:	428b      	cmp	r3, r1
    5718:	d301      	bcc.n	571e <__udivsi3+0x52>
    571a:	038b      	lsls	r3, r1, #14
    571c:	1ac0      	subs	r0, r0, r3
    571e:	4152      	adcs	r2, r2
    5720:	0b43      	lsrs	r3, r0, #13
    5722:	428b      	cmp	r3, r1
    5724:	d301      	bcc.n	572a <__udivsi3+0x5e>
    5726:	034b      	lsls	r3, r1, #13
    5728:	1ac0      	subs	r0, r0, r3
    572a:	4152      	adcs	r2, r2
    572c:	0b03      	lsrs	r3, r0, #12
    572e:	428b      	cmp	r3, r1
    5730:	d301      	bcc.n	5736 <__udivsi3+0x6a>
    5732:	030b      	lsls	r3, r1, #12
    5734:	1ac0      	subs	r0, r0, r3
    5736:	4152      	adcs	r2, r2
    5738:	0ac3      	lsrs	r3, r0, #11
    573a:	428b      	cmp	r3, r1
    573c:	d301      	bcc.n	5742 <__udivsi3+0x76>
    573e:	02cb      	lsls	r3, r1, #11
    5740:	1ac0      	subs	r0, r0, r3
    5742:	4152      	adcs	r2, r2
    5744:	0a83      	lsrs	r3, r0, #10
    5746:	428b      	cmp	r3, r1
    5748:	d301      	bcc.n	574e <__udivsi3+0x82>
    574a:	028b      	lsls	r3, r1, #10
    574c:	1ac0      	subs	r0, r0, r3
    574e:	4152      	adcs	r2, r2
    5750:	0a43      	lsrs	r3, r0, #9
    5752:	428b      	cmp	r3, r1
    5754:	d301      	bcc.n	575a <__udivsi3+0x8e>
    5756:	024b      	lsls	r3, r1, #9
    5758:	1ac0      	subs	r0, r0, r3
    575a:	4152      	adcs	r2, r2
    575c:	0a03      	lsrs	r3, r0, #8
    575e:	428b      	cmp	r3, r1
    5760:	d301      	bcc.n	5766 <__udivsi3+0x9a>
    5762:	020b      	lsls	r3, r1, #8
    5764:	1ac0      	subs	r0, r0, r3
    5766:	4152      	adcs	r2, r2
    5768:	d2cd      	bcs.n	5706 <__udivsi3+0x3a>
    576a:	09c3      	lsrs	r3, r0, #7
    576c:	428b      	cmp	r3, r1
    576e:	d301      	bcc.n	5774 <__udivsi3+0xa8>
    5770:	01cb      	lsls	r3, r1, #7
    5772:	1ac0      	subs	r0, r0, r3
    5774:	4152      	adcs	r2, r2
    5776:	0983      	lsrs	r3, r0, #6
    5778:	428b      	cmp	r3, r1
    577a:	d301      	bcc.n	5780 <__udivsi3+0xb4>
    577c:	018b      	lsls	r3, r1, #6
    577e:	1ac0      	subs	r0, r0, r3
    5780:	4152      	adcs	r2, r2
    5782:	0943      	lsrs	r3, r0, #5
    5784:	428b      	cmp	r3, r1
    5786:	d301      	bcc.n	578c <__udivsi3+0xc0>
    5788:	014b      	lsls	r3, r1, #5
    578a:	1ac0      	subs	r0, r0, r3
    578c:	4152      	adcs	r2, r2
    578e:	0903      	lsrs	r3, r0, #4
    5790:	428b      	cmp	r3, r1
    5792:	d301      	bcc.n	5798 <__udivsi3+0xcc>
    5794:	010b      	lsls	r3, r1, #4
    5796:	1ac0      	subs	r0, r0, r3
    5798:	4152      	adcs	r2, r2
    579a:	08c3      	lsrs	r3, r0, #3
    579c:	428b      	cmp	r3, r1
    579e:	d301      	bcc.n	57a4 <__udivsi3+0xd8>
    57a0:	00cb      	lsls	r3, r1, #3
    57a2:	1ac0      	subs	r0, r0, r3
    57a4:	4152      	adcs	r2, r2
    57a6:	0883      	lsrs	r3, r0, #2
    57a8:	428b      	cmp	r3, r1
    57aa:	d301      	bcc.n	57b0 <__udivsi3+0xe4>
    57ac:	008b      	lsls	r3, r1, #2
    57ae:	1ac0      	subs	r0, r0, r3
    57b0:	4152      	adcs	r2, r2
    57b2:	0843      	lsrs	r3, r0, #1
    57b4:	428b      	cmp	r3, r1
    57b6:	d301      	bcc.n	57bc <__udivsi3+0xf0>
    57b8:	004b      	lsls	r3, r1, #1
    57ba:	1ac0      	subs	r0, r0, r3
    57bc:	4152      	adcs	r2, r2
    57be:	1a41      	subs	r1, r0, r1
    57c0:	d200      	bcs.n	57c4 <__udivsi3+0xf8>
    57c2:	4601      	mov	r1, r0
    57c4:	4152      	adcs	r2, r2
    57c6:	4610      	mov	r0, r2
    57c8:	4770      	bx	lr
    57ca:	e7ff      	b.n	57cc <__udivsi3+0x100>
    57cc:	b501      	push	{r0, lr}
    57ce:	2000      	movs	r0, #0
    57d0:	f000 f806 	bl	57e0 <__aeabi_idiv0>
    57d4:	bd02      	pop	{r1, pc}
    57d6:	46c0      	nop			; (mov r8, r8)

000057d8 <__aeabi_uidivmod>:
    57d8:	2900      	cmp	r1, #0
    57da:	d0f7      	beq.n	57cc <__udivsi3+0x100>
    57dc:	e776      	b.n	56cc <__udivsi3>
    57de:	4770      	bx	lr

000057e0 <__aeabi_idiv0>:
    57e0:	4770      	bx	lr
    57e2:	46c0      	nop			; (mov r8, r8)

000057e4 <__aeabi_uldivmod>:
    57e4:	2b00      	cmp	r3, #0
    57e6:	d111      	bne.n	580c <__aeabi_uldivmod+0x28>
    57e8:	2a00      	cmp	r2, #0
    57ea:	d10f      	bne.n	580c <__aeabi_uldivmod+0x28>
    57ec:	2900      	cmp	r1, #0
    57ee:	d100      	bne.n	57f2 <__aeabi_uldivmod+0xe>
    57f0:	2800      	cmp	r0, #0
    57f2:	d002      	beq.n	57fa <__aeabi_uldivmod+0x16>
    57f4:	2100      	movs	r1, #0
    57f6:	43c9      	mvns	r1, r1
    57f8:	1c08      	adds	r0, r1, #0
    57fa:	b407      	push	{r0, r1, r2}
    57fc:	4802      	ldr	r0, [pc, #8]	; (5808 <__aeabi_uldivmod+0x24>)
    57fe:	a102      	add	r1, pc, #8	; (adr r1, 5808 <__aeabi_uldivmod+0x24>)
    5800:	1840      	adds	r0, r0, r1
    5802:	9002      	str	r0, [sp, #8]
    5804:	bd03      	pop	{r0, r1, pc}
    5806:	46c0      	nop			; (mov r8, r8)
    5808:	ffffffd9 	.word	0xffffffd9
    580c:	b403      	push	{r0, r1}
    580e:	4668      	mov	r0, sp
    5810:	b501      	push	{r0, lr}
    5812:	9802      	ldr	r0, [sp, #8]
    5814:	f000 f830 	bl	5878 <__udivmoddi4>
    5818:	9b01      	ldr	r3, [sp, #4]
    581a:	469e      	mov	lr, r3
    581c:	b002      	add	sp, #8
    581e:	bc0c      	pop	{r2, r3}
    5820:	4770      	bx	lr
    5822:	46c0      	nop			; (mov r8, r8)

00005824 <__aeabi_lmul>:
    5824:	b5f0      	push	{r4, r5, r6, r7, lr}
    5826:	46ce      	mov	lr, r9
    5828:	4647      	mov	r7, r8
    582a:	0415      	lsls	r5, r2, #16
    582c:	0c2d      	lsrs	r5, r5, #16
    582e:	002e      	movs	r6, r5
    5830:	b580      	push	{r7, lr}
    5832:	0407      	lsls	r7, r0, #16
    5834:	0c14      	lsrs	r4, r2, #16
    5836:	0c3f      	lsrs	r7, r7, #16
    5838:	4699      	mov	r9, r3
    583a:	0c03      	lsrs	r3, r0, #16
    583c:	437e      	muls	r6, r7
    583e:	435d      	muls	r5, r3
    5840:	4367      	muls	r7, r4
    5842:	4363      	muls	r3, r4
    5844:	197f      	adds	r7, r7, r5
    5846:	0c34      	lsrs	r4, r6, #16
    5848:	19e4      	adds	r4, r4, r7
    584a:	469c      	mov	ip, r3
    584c:	42a5      	cmp	r5, r4
    584e:	d903      	bls.n	5858 <__aeabi_lmul+0x34>
    5850:	2380      	movs	r3, #128	; 0x80
    5852:	025b      	lsls	r3, r3, #9
    5854:	4698      	mov	r8, r3
    5856:	44c4      	add	ip, r8
    5858:	464b      	mov	r3, r9
    585a:	4351      	muls	r1, r2
    585c:	4343      	muls	r3, r0
    585e:	0436      	lsls	r6, r6, #16
    5860:	0c36      	lsrs	r6, r6, #16
    5862:	0c25      	lsrs	r5, r4, #16
    5864:	0424      	lsls	r4, r4, #16
    5866:	4465      	add	r5, ip
    5868:	19a4      	adds	r4, r4, r6
    586a:	1859      	adds	r1, r3, r1
    586c:	1949      	adds	r1, r1, r5
    586e:	0020      	movs	r0, r4
    5870:	bc0c      	pop	{r2, r3}
    5872:	4690      	mov	r8, r2
    5874:	4699      	mov	r9, r3
    5876:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005878 <__udivmoddi4>:
    5878:	b5f0      	push	{r4, r5, r6, r7, lr}
    587a:	4657      	mov	r7, sl
    587c:	464e      	mov	r6, r9
    587e:	4645      	mov	r5, r8
    5880:	46de      	mov	lr, fp
    5882:	b5e0      	push	{r5, r6, r7, lr}
    5884:	0004      	movs	r4, r0
    5886:	b083      	sub	sp, #12
    5888:	000d      	movs	r5, r1
    588a:	4692      	mov	sl, r2
    588c:	4699      	mov	r9, r3
    588e:	428b      	cmp	r3, r1
    5890:	d82f      	bhi.n	58f2 <__udivmoddi4+0x7a>
    5892:	d02c      	beq.n	58ee <__udivmoddi4+0x76>
    5894:	4649      	mov	r1, r9
    5896:	4650      	mov	r0, sl
    5898:	f000 f8ae 	bl	59f8 <__clzdi2>
    589c:	0029      	movs	r1, r5
    589e:	0006      	movs	r6, r0
    58a0:	0020      	movs	r0, r4
    58a2:	f000 f8a9 	bl	59f8 <__clzdi2>
    58a6:	1a33      	subs	r3, r6, r0
    58a8:	4698      	mov	r8, r3
    58aa:	3b20      	subs	r3, #32
    58ac:	469b      	mov	fp, r3
    58ae:	d500      	bpl.n	58b2 <__udivmoddi4+0x3a>
    58b0:	e074      	b.n	599c <__udivmoddi4+0x124>
    58b2:	4653      	mov	r3, sl
    58b4:	465a      	mov	r2, fp
    58b6:	4093      	lsls	r3, r2
    58b8:	001f      	movs	r7, r3
    58ba:	4653      	mov	r3, sl
    58bc:	4642      	mov	r2, r8
    58be:	4093      	lsls	r3, r2
    58c0:	001e      	movs	r6, r3
    58c2:	42af      	cmp	r7, r5
    58c4:	d829      	bhi.n	591a <__udivmoddi4+0xa2>
    58c6:	d026      	beq.n	5916 <__udivmoddi4+0x9e>
    58c8:	465b      	mov	r3, fp
    58ca:	1ba4      	subs	r4, r4, r6
    58cc:	41bd      	sbcs	r5, r7
    58ce:	2b00      	cmp	r3, #0
    58d0:	da00      	bge.n	58d4 <__udivmoddi4+0x5c>
    58d2:	e079      	b.n	59c8 <__udivmoddi4+0x150>
    58d4:	2200      	movs	r2, #0
    58d6:	2300      	movs	r3, #0
    58d8:	9200      	str	r2, [sp, #0]
    58da:	9301      	str	r3, [sp, #4]
    58dc:	2301      	movs	r3, #1
    58de:	465a      	mov	r2, fp
    58e0:	4093      	lsls	r3, r2
    58e2:	9301      	str	r3, [sp, #4]
    58e4:	2301      	movs	r3, #1
    58e6:	4642      	mov	r2, r8
    58e8:	4093      	lsls	r3, r2
    58ea:	9300      	str	r3, [sp, #0]
    58ec:	e019      	b.n	5922 <__udivmoddi4+0xaa>
    58ee:	4282      	cmp	r2, r0
    58f0:	d9d0      	bls.n	5894 <__udivmoddi4+0x1c>
    58f2:	2200      	movs	r2, #0
    58f4:	2300      	movs	r3, #0
    58f6:	9200      	str	r2, [sp, #0]
    58f8:	9301      	str	r3, [sp, #4]
    58fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    58fc:	2b00      	cmp	r3, #0
    58fe:	d001      	beq.n	5904 <__udivmoddi4+0x8c>
    5900:	601c      	str	r4, [r3, #0]
    5902:	605d      	str	r5, [r3, #4]
    5904:	9800      	ldr	r0, [sp, #0]
    5906:	9901      	ldr	r1, [sp, #4]
    5908:	b003      	add	sp, #12
    590a:	bc3c      	pop	{r2, r3, r4, r5}
    590c:	4690      	mov	r8, r2
    590e:	4699      	mov	r9, r3
    5910:	46a2      	mov	sl, r4
    5912:	46ab      	mov	fp, r5
    5914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5916:	42a3      	cmp	r3, r4
    5918:	d9d6      	bls.n	58c8 <__udivmoddi4+0x50>
    591a:	2200      	movs	r2, #0
    591c:	2300      	movs	r3, #0
    591e:	9200      	str	r2, [sp, #0]
    5920:	9301      	str	r3, [sp, #4]
    5922:	4643      	mov	r3, r8
    5924:	2b00      	cmp	r3, #0
    5926:	d0e8      	beq.n	58fa <__udivmoddi4+0x82>
    5928:	07fb      	lsls	r3, r7, #31
    592a:	0872      	lsrs	r2, r6, #1
    592c:	431a      	orrs	r2, r3
    592e:	4646      	mov	r6, r8
    5930:	087b      	lsrs	r3, r7, #1
    5932:	e00e      	b.n	5952 <__udivmoddi4+0xda>
    5934:	42ab      	cmp	r3, r5
    5936:	d101      	bne.n	593c <__udivmoddi4+0xc4>
    5938:	42a2      	cmp	r2, r4
    593a:	d80c      	bhi.n	5956 <__udivmoddi4+0xde>
    593c:	1aa4      	subs	r4, r4, r2
    593e:	419d      	sbcs	r5, r3
    5940:	2001      	movs	r0, #1
    5942:	1924      	adds	r4, r4, r4
    5944:	416d      	adcs	r5, r5
    5946:	2100      	movs	r1, #0
    5948:	3e01      	subs	r6, #1
    594a:	1824      	adds	r4, r4, r0
    594c:	414d      	adcs	r5, r1
    594e:	2e00      	cmp	r6, #0
    5950:	d006      	beq.n	5960 <__udivmoddi4+0xe8>
    5952:	42ab      	cmp	r3, r5
    5954:	d9ee      	bls.n	5934 <__udivmoddi4+0xbc>
    5956:	3e01      	subs	r6, #1
    5958:	1924      	adds	r4, r4, r4
    595a:	416d      	adcs	r5, r5
    595c:	2e00      	cmp	r6, #0
    595e:	d1f8      	bne.n	5952 <__udivmoddi4+0xda>
    5960:	465b      	mov	r3, fp
    5962:	9800      	ldr	r0, [sp, #0]
    5964:	9901      	ldr	r1, [sp, #4]
    5966:	1900      	adds	r0, r0, r4
    5968:	4169      	adcs	r1, r5
    596a:	2b00      	cmp	r3, #0
    596c:	db22      	blt.n	59b4 <__udivmoddi4+0x13c>
    596e:	002b      	movs	r3, r5
    5970:	465a      	mov	r2, fp
    5972:	40d3      	lsrs	r3, r2
    5974:	002a      	movs	r2, r5
    5976:	4644      	mov	r4, r8
    5978:	40e2      	lsrs	r2, r4
    597a:	001c      	movs	r4, r3
    597c:	465b      	mov	r3, fp
    597e:	0015      	movs	r5, r2
    5980:	2b00      	cmp	r3, #0
    5982:	db2c      	blt.n	59de <__udivmoddi4+0x166>
    5984:	0026      	movs	r6, r4
    5986:	409e      	lsls	r6, r3
    5988:	0033      	movs	r3, r6
    598a:	0026      	movs	r6, r4
    598c:	4647      	mov	r7, r8
    598e:	40be      	lsls	r6, r7
    5990:	0032      	movs	r2, r6
    5992:	1a80      	subs	r0, r0, r2
    5994:	4199      	sbcs	r1, r3
    5996:	9000      	str	r0, [sp, #0]
    5998:	9101      	str	r1, [sp, #4]
    599a:	e7ae      	b.n	58fa <__udivmoddi4+0x82>
    599c:	4642      	mov	r2, r8
    599e:	2320      	movs	r3, #32
    59a0:	1a9b      	subs	r3, r3, r2
    59a2:	4652      	mov	r2, sl
    59a4:	40da      	lsrs	r2, r3
    59a6:	4641      	mov	r1, r8
    59a8:	0013      	movs	r3, r2
    59aa:	464a      	mov	r2, r9
    59ac:	408a      	lsls	r2, r1
    59ae:	0017      	movs	r7, r2
    59b0:	431f      	orrs	r7, r3
    59b2:	e782      	b.n	58ba <__udivmoddi4+0x42>
    59b4:	4642      	mov	r2, r8
    59b6:	2320      	movs	r3, #32
    59b8:	1a9b      	subs	r3, r3, r2
    59ba:	002a      	movs	r2, r5
    59bc:	4646      	mov	r6, r8
    59be:	409a      	lsls	r2, r3
    59c0:	0023      	movs	r3, r4
    59c2:	40f3      	lsrs	r3, r6
    59c4:	4313      	orrs	r3, r2
    59c6:	e7d5      	b.n	5974 <__udivmoddi4+0xfc>
    59c8:	4642      	mov	r2, r8
    59ca:	2320      	movs	r3, #32
    59cc:	2100      	movs	r1, #0
    59ce:	1a9b      	subs	r3, r3, r2
    59d0:	2200      	movs	r2, #0
    59d2:	9100      	str	r1, [sp, #0]
    59d4:	9201      	str	r2, [sp, #4]
    59d6:	2201      	movs	r2, #1
    59d8:	40da      	lsrs	r2, r3
    59da:	9201      	str	r2, [sp, #4]
    59dc:	e782      	b.n	58e4 <__udivmoddi4+0x6c>
    59de:	4642      	mov	r2, r8
    59e0:	2320      	movs	r3, #32
    59e2:	0026      	movs	r6, r4
    59e4:	1a9b      	subs	r3, r3, r2
    59e6:	40de      	lsrs	r6, r3
    59e8:	002f      	movs	r7, r5
    59ea:	46b4      	mov	ip, r6
    59ec:	4097      	lsls	r7, r2
    59ee:	4666      	mov	r6, ip
    59f0:	003b      	movs	r3, r7
    59f2:	4333      	orrs	r3, r6
    59f4:	e7c9      	b.n	598a <__udivmoddi4+0x112>
    59f6:	46c0      	nop			; (mov r8, r8)

000059f8 <__clzdi2>:
    59f8:	b510      	push	{r4, lr}
    59fa:	2900      	cmp	r1, #0
    59fc:	d103      	bne.n	5a06 <__clzdi2+0xe>
    59fe:	f000 f807 	bl	5a10 <__clzsi2>
    5a02:	3020      	adds	r0, #32
    5a04:	e002      	b.n	5a0c <__clzdi2+0x14>
    5a06:	1c08      	adds	r0, r1, #0
    5a08:	f000 f802 	bl	5a10 <__clzsi2>
    5a0c:	bd10      	pop	{r4, pc}
    5a0e:	46c0      	nop			; (mov r8, r8)

00005a10 <__clzsi2>:
    5a10:	211c      	movs	r1, #28
    5a12:	2301      	movs	r3, #1
    5a14:	041b      	lsls	r3, r3, #16
    5a16:	4298      	cmp	r0, r3
    5a18:	d301      	bcc.n	5a1e <__clzsi2+0xe>
    5a1a:	0c00      	lsrs	r0, r0, #16
    5a1c:	3910      	subs	r1, #16
    5a1e:	0a1b      	lsrs	r3, r3, #8
    5a20:	4298      	cmp	r0, r3
    5a22:	d301      	bcc.n	5a28 <__clzsi2+0x18>
    5a24:	0a00      	lsrs	r0, r0, #8
    5a26:	3908      	subs	r1, #8
    5a28:	091b      	lsrs	r3, r3, #4
    5a2a:	4298      	cmp	r0, r3
    5a2c:	d301      	bcc.n	5a32 <__clzsi2+0x22>
    5a2e:	0900      	lsrs	r0, r0, #4
    5a30:	3904      	subs	r1, #4
    5a32:	a202      	add	r2, pc, #8	; (adr r2, 5a3c <__clzsi2+0x2c>)
    5a34:	5c10      	ldrb	r0, [r2, r0]
    5a36:	1840      	adds	r0, r0, r1
    5a38:	4770      	bx	lr
    5a3a:	46c0      	nop			; (mov r8, r8)
    5a3c:	02020304 	.word	0x02020304
    5a40:	01010101 	.word	0x01010101
	...

00005a4c <__libc_init_array>:
    5a4c:	b570      	push	{r4, r5, r6, lr}
    5a4e:	2600      	movs	r6, #0
    5a50:	4d0c      	ldr	r5, [pc, #48]	; (5a84 <__libc_init_array+0x38>)
    5a52:	4c0d      	ldr	r4, [pc, #52]	; (5a88 <__libc_init_array+0x3c>)
    5a54:	1b64      	subs	r4, r4, r5
    5a56:	10a4      	asrs	r4, r4, #2
    5a58:	42a6      	cmp	r6, r4
    5a5a:	d109      	bne.n	5a70 <__libc_init_array+0x24>
    5a5c:	2600      	movs	r6, #0
    5a5e:	f001 fded 	bl	763c <_init>
    5a62:	4d0a      	ldr	r5, [pc, #40]	; (5a8c <__libc_init_array+0x40>)
    5a64:	4c0a      	ldr	r4, [pc, #40]	; (5a90 <__libc_init_array+0x44>)
    5a66:	1b64      	subs	r4, r4, r5
    5a68:	10a4      	asrs	r4, r4, #2
    5a6a:	42a6      	cmp	r6, r4
    5a6c:	d105      	bne.n	5a7a <__libc_init_array+0x2e>
    5a6e:	bd70      	pop	{r4, r5, r6, pc}
    5a70:	00b3      	lsls	r3, r6, #2
    5a72:	58eb      	ldr	r3, [r5, r3]
    5a74:	4798      	blx	r3
    5a76:	3601      	adds	r6, #1
    5a78:	e7ee      	b.n	5a58 <__libc_init_array+0xc>
    5a7a:	00b3      	lsls	r3, r6, #2
    5a7c:	58eb      	ldr	r3, [r5, r3]
    5a7e:	4798      	blx	r3
    5a80:	3601      	adds	r6, #1
    5a82:	e7f2      	b.n	5a6a <__libc_init_array+0x1e>
    5a84:	00007648 	.word	0x00007648
    5a88:	00007648 	.word	0x00007648
    5a8c:	00007648 	.word	0x00007648
    5a90:	0000764c 	.word	0x0000764c

00005a94 <memset>:
    5a94:	0003      	movs	r3, r0
    5a96:	1882      	adds	r2, r0, r2
    5a98:	4293      	cmp	r3, r2
    5a9a:	d100      	bne.n	5a9e <memset+0xa>
    5a9c:	4770      	bx	lr
    5a9e:	7019      	strb	r1, [r3, #0]
    5aa0:	3301      	adds	r3, #1
    5aa2:	e7f9      	b.n	5a98 <memset+0x4>

00005aa4 <__sfputc_r>:
    5aa4:	6893      	ldr	r3, [r2, #8]
    5aa6:	b510      	push	{r4, lr}
    5aa8:	3b01      	subs	r3, #1
    5aaa:	6093      	str	r3, [r2, #8]
    5aac:	2b00      	cmp	r3, #0
    5aae:	da05      	bge.n	5abc <__sfputc_r+0x18>
    5ab0:	6994      	ldr	r4, [r2, #24]
    5ab2:	42a3      	cmp	r3, r4
    5ab4:	db08      	blt.n	5ac8 <__sfputc_r+0x24>
    5ab6:	b2cb      	uxtb	r3, r1
    5ab8:	2b0a      	cmp	r3, #10
    5aba:	d005      	beq.n	5ac8 <__sfputc_r+0x24>
    5abc:	6813      	ldr	r3, [r2, #0]
    5abe:	1c58      	adds	r0, r3, #1
    5ac0:	6010      	str	r0, [r2, #0]
    5ac2:	7019      	strb	r1, [r3, #0]
    5ac4:	b2c8      	uxtb	r0, r1
    5ac6:	bd10      	pop	{r4, pc}
    5ac8:	f000 fc18 	bl	62fc <__swbuf_r>
    5acc:	e7fb      	b.n	5ac6 <__sfputc_r+0x22>

00005ace <__sfputs_r>:
    5ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ad0:	0006      	movs	r6, r0
    5ad2:	000f      	movs	r7, r1
    5ad4:	0014      	movs	r4, r2
    5ad6:	18d5      	adds	r5, r2, r3
    5ad8:	42ac      	cmp	r4, r5
    5ada:	d101      	bne.n	5ae0 <__sfputs_r+0x12>
    5adc:	2000      	movs	r0, #0
    5ade:	e007      	b.n	5af0 <__sfputs_r+0x22>
    5ae0:	7821      	ldrb	r1, [r4, #0]
    5ae2:	003a      	movs	r2, r7
    5ae4:	0030      	movs	r0, r6
    5ae6:	f7ff ffdd 	bl	5aa4 <__sfputc_r>
    5aea:	3401      	adds	r4, #1
    5aec:	1c43      	adds	r3, r0, #1
    5aee:	d1f3      	bne.n	5ad8 <__sfputs_r+0xa>
    5af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005af4 <_vfiprintf_r>:
    5af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5af6:	b09f      	sub	sp, #124	; 0x7c
    5af8:	0006      	movs	r6, r0
    5afa:	000f      	movs	r7, r1
    5afc:	0014      	movs	r4, r2
    5afe:	9305      	str	r3, [sp, #20]
    5b00:	2800      	cmp	r0, #0
    5b02:	d004      	beq.n	5b0e <_vfiprintf_r+0x1a>
    5b04:	6983      	ldr	r3, [r0, #24]
    5b06:	2b00      	cmp	r3, #0
    5b08:	d101      	bne.n	5b0e <_vfiprintf_r+0x1a>
    5b0a:	f000 fdbb 	bl	6684 <__sinit>
    5b0e:	4b7f      	ldr	r3, [pc, #508]	; (5d0c <_vfiprintf_r+0x218>)
    5b10:	429f      	cmp	r7, r3
    5b12:	d15c      	bne.n	5bce <_vfiprintf_r+0xda>
    5b14:	6877      	ldr	r7, [r6, #4]
    5b16:	89bb      	ldrh	r3, [r7, #12]
    5b18:	071b      	lsls	r3, r3, #28
    5b1a:	d562      	bpl.n	5be2 <_vfiprintf_r+0xee>
    5b1c:	693b      	ldr	r3, [r7, #16]
    5b1e:	2b00      	cmp	r3, #0
    5b20:	d05f      	beq.n	5be2 <_vfiprintf_r+0xee>
    5b22:	2300      	movs	r3, #0
    5b24:	ad06      	add	r5, sp, #24
    5b26:	616b      	str	r3, [r5, #20]
    5b28:	3320      	adds	r3, #32
    5b2a:	766b      	strb	r3, [r5, #25]
    5b2c:	3310      	adds	r3, #16
    5b2e:	76ab      	strb	r3, [r5, #26]
    5b30:	9402      	str	r4, [sp, #8]
    5b32:	9c02      	ldr	r4, [sp, #8]
    5b34:	7823      	ldrb	r3, [r4, #0]
    5b36:	2b00      	cmp	r3, #0
    5b38:	d15d      	bne.n	5bf6 <_vfiprintf_r+0x102>
    5b3a:	9b02      	ldr	r3, [sp, #8]
    5b3c:	1ae3      	subs	r3, r4, r3
    5b3e:	9304      	str	r3, [sp, #16]
    5b40:	d00d      	beq.n	5b5e <_vfiprintf_r+0x6a>
    5b42:	9b04      	ldr	r3, [sp, #16]
    5b44:	9a02      	ldr	r2, [sp, #8]
    5b46:	0039      	movs	r1, r7
    5b48:	0030      	movs	r0, r6
    5b4a:	f7ff ffc0 	bl	5ace <__sfputs_r>
    5b4e:	1c43      	adds	r3, r0, #1
    5b50:	d100      	bne.n	5b54 <_vfiprintf_r+0x60>
    5b52:	e0cc      	b.n	5cee <_vfiprintf_r+0x1fa>
    5b54:	696a      	ldr	r2, [r5, #20]
    5b56:	9b04      	ldr	r3, [sp, #16]
    5b58:	4694      	mov	ip, r2
    5b5a:	4463      	add	r3, ip
    5b5c:	616b      	str	r3, [r5, #20]
    5b5e:	7823      	ldrb	r3, [r4, #0]
    5b60:	2b00      	cmp	r3, #0
    5b62:	d100      	bne.n	5b66 <_vfiprintf_r+0x72>
    5b64:	e0c3      	b.n	5cee <_vfiprintf_r+0x1fa>
    5b66:	2201      	movs	r2, #1
    5b68:	2300      	movs	r3, #0
    5b6a:	4252      	negs	r2, r2
    5b6c:	606a      	str	r2, [r5, #4]
    5b6e:	a902      	add	r1, sp, #8
    5b70:	3254      	adds	r2, #84	; 0x54
    5b72:	1852      	adds	r2, r2, r1
    5b74:	3401      	adds	r4, #1
    5b76:	602b      	str	r3, [r5, #0]
    5b78:	60eb      	str	r3, [r5, #12]
    5b7a:	60ab      	str	r3, [r5, #8]
    5b7c:	7013      	strb	r3, [r2, #0]
    5b7e:	65ab      	str	r3, [r5, #88]	; 0x58
    5b80:	7821      	ldrb	r1, [r4, #0]
    5b82:	2205      	movs	r2, #5
    5b84:	4862      	ldr	r0, [pc, #392]	; (5d10 <_vfiprintf_r+0x21c>)
    5b86:	f000 fe89 	bl	689c <memchr>
    5b8a:	1c63      	adds	r3, r4, #1
    5b8c:	469c      	mov	ip, r3
    5b8e:	2800      	cmp	r0, #0
    5b90:	d135      	bne.n	5bfe <_vfiprintf_r+0x10a>
    5b92:	6829      	ldr	r1, [r5, #0]
    5b94:	06cb      	lsls	r3, r1, #27
    5b96:	d504      	bpl.n	5ba2 <_vfiprintf_r+0xae>
    5b98:	2353      	movs	r3, #83	; 0x53
    5b9a:	aa02      	add	r2, sp, #8
    5b9c:	3020      	adds	r0, #32
    5b9e:	189b      	adds	r3, r3, r2
    5ba0:	7018      	strb	r0, [r3, #0]
    5ba2:	070b      	lsls	r3, r1, #28
    5ba4:	d504      	bpl.n	5bb0 <_vfiprintf_r+0xbc>
    5ba6:	2353      	movs	r3, #83	; 0x53
    5ba8:	202b      	movs	r0, #43	; 0x2b
    5baa:	aa02      	add	r2, sp, #8
    5bac:	189b      	adds	r3, r3, r2
    5bae:	7018      	strb	r0, [r3, #0]
    5bb0:	7823      	ldrb	r3, [r4, #0]
    5bb2:	2b2a      	cmp	r3, #42	; 0x2a
    5bb4:	d02c      	beq.n	5c10 <_vfiprintf_r+0x11c>
    5bb6:	2000      	movs	r0, #0
    5bb8:	210a      	movs	r1, #10
    5bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5bbc:	7822      	ldrb	r2, [r4, #0]
    5bbe:	3a30      	subs	r2, #48	; 0x30
    5bc0:	2a09      	cmp	r2, #9
    5bc2:	d800      	bhi.n	5bc6 <_vfiprintf_r+0xd2>
    5bc4:	e06b      	b.n	5c9e <_vfiprintf_r+0x1aa>
    5bc6:	2800      	cmp	r0, #0
    5bc8:	d02a      	beq.n	5c20 <_vfiprintf_r+0x12c>
    5bca:	9309      	str	r3, [sp, #36]	; 0x24
    5bcc:	e028      	b.n	5c20 <_vfiprintf_r+0x12c>
    5bce:	4b51      	ldr	r3, [pc, #324]	; (5d14 <_vfiprintf_r+0x220>)
    5bd0:	429f      	cmp	r7, r3
    5bd2:	d101      	bne.n	5bd8 <_vfiprintf_r+0xe4>
    5bd4:	68b7      	ldr	r7, [r6, #8]
    5bd6:	e79e      	b.n	5b16 <_vfiprintf_r+0x22>
    5bd8:	4b4f      	ldr	r3, [pc, #316]	; (5d18 <_vfiprintf_r+0x224>)
    5bda:	429f      	cmp	r7, r3
    5bdc:	d19b      	bne.n	5b16 <_vfiprintf_r+0x22>
    5bde:	68f7      	ldr	r7, [r6, #12]
    5be0:	e799      	b.n	5b16 <_vfiprintf_r+0x22>
    5be2:	0039      	movs	r1, r7
    5be4:	0030      	movs	r0, r6
    5be6:	f000 fbdf 	bl	63a8 <__swsetup_r>
    5bea:	2800      	cmp	r0, #0
    5bec:	d099      	beq.n	5b22 <_vfiprintf_r+0x2e>
    5bee:	2001      	movs	r0, #1
    5bf0:	4240      	negs	r0, r0
    5bf2:	b01f      	add	sp, #124	; 0x7c
    5bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bf6:	2b25      	cmp	r3, #37	; 0x25
    5bf8:	d09f      	beq.n	5b3a <_vfiprintf_r+0x46>
    5bfa:	3401      	adds	r4, #1
    5bfc:	e79a      	b.n	5b34 <_vfiprintf_r+0x40>
    5bfe:	4b44      	ldr	r3, [pc, #272]	; (5d10 <_vfiprintf_r+0x21c>)
    5c00:	6829      	ldr	r1, [r5, #0]
    5c02:	1ac0      	subs	r0, r0, r3
    5c04:	2301      	movs	r3, #1
    5c06:	4083      	lsls	r3, r0
    5c08:	430b      	orrs	r3, r1
    5c0a:	602b      	str	r3, [r5, #0]
    5c0c:	4664      	mov	r4, ip
    5c0e:	e7b7      	b.n	5b80 <_vfiprintf_r+0x8c>
    5c10:	9b05      	ldr	r3, [sp, #20]
    5c12:	1d18      	adds	r0, r3, #4
    5c14:	681b      	ldr	r3, [r3, #0]
    5c16:	9005      	str	r0, [sp, #20]
    5c18:	2b00      	cmp	r3, #0
    5c1a:	db3a      	blt.n	5c92 <_vfiprintf_r+0x19e>
    5c1c:	9309      	str	r3, [sp, #36]	; 0x24
    5c1e:	4664      	mov	r4, ip
    5c20:	7823      	ldrb	r3, [r4, #0]
    5c22:	2b2e      	cmp	r3, #46	; 0x2e
    5c24:	d10b      	bne.n	5c3e <_vfiprintf_r+0x14a>
    5c26:	7863      	ldrb	r3, [r4, #1]
    5c28:	1c62      	adds	r2, r4, #1
    5c2a:	2b2a      	cmp	r3, #42	; 0x2a
    5c2c:	d13f      	bne.n	5cae <_vfiprintf_r+0x1ba>
    5c2e:	9b05      	ldr	r3, [sp, #20]
    5c30:	3402      	adds	r4, #2
    5c32:	1d1a      	adds	r2, r3, #4
    5c34:	681b      	ldr	r3, [r3, #0]
    5c36:	9205      	str	r2, [sp, #20]
    5c38:	2b00      	cmp	r3, #0
    5c3a:	db35      	blt.n	5ca8 <_vfiprintf_r+0x1b4>
    5c3c:	9307      	str	r3, [sp, #28]
    5c3e:	7821      	ldrb	r1, [r4, #0]
    5c40:	2203      	movs	r2, #3
    5c42:	4836      	ldr	r0, [pc, #216]	; (5d1c <_vfiprintf_r+0x228>)
    5c44:	f000 fe2a 	bl	689c <memchr>
    5c48:	2800      	cmp	r0, #0
    5c4a:	d007      	beq.n	5c5c <_vfiprintf_r+0x168>
    5c4c:	4b33      	ldr	r3, [pc, #204]	; (5d1c <_vfiprintf_r+0x228>)
    5c4e:	682a      	ldr	r2, [r5, #0]
    5c50:	1ac0      	subs	r0, r0, r3
    5c52:	2340      	movs	r3, #64	; 0x40
    5c54:	4083      	lsls	r3, r0
    5c56:	4313      	orrs	r3, r2
    5c58:	602b      	str	r3, [r5, #0]
    5c5a:	3401      	adds	r4, #1
    5c5c:	7821      	ldrb	r1, [r4, #0]
    5c5e:	1c63      	adds	r3, r4, #1
    5c60:	2206      	movs	r2, #6
    5c62:	482f      	ldr	r0, [pc, #188]	; (5d20 <_vfiprintf_r+0x22c>)
    5c64:	9302      	str	r3, [sp, #8]
    5c66:	7629      	strb	r1, [r5, #24]
    5c68:	f000 fe18 	bl	689c <memchr>
    5c6c:	2800      	cmp	r0, #0
    5c6e:	d044      	beq.n	5cfa <_vfiprintf_r+0x206>
    5c70:	4b2c      	ldr	r3, [pc, #176]	; (5d24 <_vfiprintf_r+0x230>)
    5c72:	2b00      	cmp	r3, #0
    5c74:	d12f      	bne.n	5cd6 <_vfiprintf_r+0x1e2>
    5c76:	6829      	ldr	r1, [r5, #0]
    5c78:	9b05      	ldr	r3, [sp, #20]
    5c7a:	2207      	movs	r2, #7
    5c7c:	05c9      	lsls	r1, r1, #23
    5c7e:	d528      	bpl.n	5cd2 <_vfiprintf_r+0x1de>
    5c80:	189b      	adds	r3, r3, r2
    5c82:	4393      	bics	r3, r2
    5c84:	3308      	adds	r3, #8
    5c86:	9305      	str	r3, [sp, #20]
    5c88:	696b      	ldr	r3, [r5, #20]
    5c8a:	9a03      	ldr	r2, [sp, #12]
    5c8c:	189b      	adds	r3, r3, r2
    5c8e:	616b      	str	r3, [r5, #20]
    5c90:	e74f      	b.n	5b32 <_vfiprintf_r+0x3e>
    5c92:	425b      	negs	r3, r3
    5c94:	60eb      	str	r3, [r5, #12]
    5c96:	2302      	movs	r3, #2
    5c98:	430b      	orrs	r3, r1
    5c9a:	602b      	str	r3, [r5, #0]
    5c9c:	e7bf      	b.n	5c1e <_vfiprintf_r+0x12a>
    5c9e:	434b      	muls	r3, r1
    5ca0:	3401      	adds	r4, #1
    5ca2:	189b      	adds	r3, r3, r2
    5ca4:	2001      	movs	r0, #1
    5ca6:	e789      	b.n	5bbc <_vfiprintf_r+0xc8>
    5ca8:	2301      	movs	r3, #1
    5caa:	425b      	negs	r3, r3
    5cac:	e7c6      	b.n	5c3c <_vfiprintf_r+0x148>
    5cae:	2300      	movs	r3, #0
    5cb0:	0014      	movs	r4, r2
    5cb2:	200a      	movs	r0, #10
    5cb4:	001a      	movs	r2, r3
    5cb6:	606b      	str	r3, [r5, #4]
    5cb8:	7821      	ldrb	r1, [r4, #0]
    5cba:	3930      	subs	r1, #48	; 0x30
    5cbc:	2909      	cmp	r1, #9
    5cbe:	d903      	bls.n	5cc8 <_vfiprintf_r+0x1d4>
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d0bc      	beq.n	5c3e <_vfiprintf_r+0x14a>
    5cc4:	9207      	str	r2, [sp, #28]
    5cc6:	e7ba      	b.n	5c3e <_vfiprintf_r+0x14a>
    5cc8:	4342      	muls	r2, r0
    5cca:	3401      	adds	r4, #1
    5ccc:	1852      	adds	r2, r2, r1
    5cce:	2301      	movs	r3, #1
    5cd0:	e7f2      	b.n	5cb8 <_vfiprintf_r+0x1c4>
    5cd2:	3307      	adds	r3, #7
    5cd4:	e7d5      	b.n	5c82 <_vfiprintf_r+0x18e>
    5cd6:	ab05      	add	r3, sp, #20
    5cd8:	9300      	str	r3, [sp, #0]
    5cda:	003a      	movs	r2, r7
    5cdc:	4b12      	ldr	r3, [pc, #72]	; (5d28 <_vfiprintf_r+0x234>)
    5cde:	0029      	movs	r1, r5
    5ce0:	0030      	movs	r0, r6
    5ce2:	e000      	b.n	5ce6 <_vfiprintf_r+0x1f2>
    5ce4:	bf00      	nop
    5ce6:	9003      	str	r0, [sp, #12]
    5ce8:	9b03      	ldr	r3, [sp, #12]
    5cea:	3301      	adds	r3, #1
    5cec:	d1cc      	bne.n	5c88 <_vfiprintf_r+0x194>
    5cee:	89bb      	ldrh	r3, [r7, #12]
    5cf0:	065b      	lsls	r3, r3, #25
    5cf2:	d500      	bpl.n	5cf6 <_vfiprintf_r+0x202>
    5cf4:	e77b      	b.n	5bee <_vfiprintf_r+0xfa>
    5cf6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5cf8:	e77b      	b.n	5bf2 <_vfiprintf_r+0xfe>
    5cfa:	ab05      	add	r3, sp, #20
    5cfc:	9300      	str	r3, [sp, #0]
    5cfe:	003a      	movs	r2, r7
    5d00:	4b09      	ldr	r3, [pc, #36]	; (5d28 <_vfiprintf_r+0x234>)
    5d02:	0029      	movs	r1, r5
    5d04:	0030      	movs	r0, r6
    5d06:	f000 f88b 	bl	5e20 <_printf_i>
    5d0a:	e7ec      	b.n	5ce6 <_vfiprintf_r+0x1f2>
    5d0c:	000075fc 	.word	0x000075fc
    5d10:	000075a8 	.word	0x000075a8
    5d14:	0000761c 	.word	0x0000761c
    5d18:	000075dc 	.word	0x000075dc
    5d1c:	000075ae 	.word	0x000075ae
    5d20:	000075b2 	.word	0x000075b2
    5d24:	00000000 	.word	0x00000000
    5d28:	00005acf 	.word	0x00005acf

00005d2c <vfiprintf>:
    5d2c:	b510      	push	{r4, lr}
    5d2e:	0013      	movs	r3, r2
    5d30:	000a      	movs	r2, r1
    5d32:	0001      	movs	r1, r0
    5d34:	4802      	ldr	r0, [pc, #8]	; (5d40 <vfiprintf+0x14>)
    5d36:	6800      	ldr	r0, [r0, #0]
    5d38:	f7ff fedc 	bl	5af4 <_vfiprintf_r>
    5d3c:	bd10      	pop	{r4, pc}
    5d3e:	46c0      	nop			; (mov r8, r8)
    5d40:	20000034 	.word	0x20000034

00005d44 <_printf_common>:
    5d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5d46:	0015      	movs	r5, r2
    5d48:	9301      	str	r3, [sp, #4]
    5d4a:	688a      	ldr	r2, [r1, #8]
    5d4c:	690b      	ldr	r3, [r1, #16]
    5d4e:	9000      	str	r0, [sp, #0]
    5d50:	000c      	movs	r4, r1
    5d52:	4293      	cmp	r3, r2
    5d54:	da00      	bge.n	5d58 <_printf_common+0x14>
    5d56:	0013      	movs	r3, r2
    5d58:	0022      	movs	r2, r4
    5d5a:	602b      	str	r3, [r5, #0]
    5d5c:	3243      	adds	r2, #67	; 0x43
    5d5e:	7812      	ldrb	r2, [r2, #0]
    5d60:	2a00      	cmp	r2, #0
    5d62:	d001      	beq.n	5d68 <_printf_common+0x24>
    5d64:	3301      	adds	r3, #1
    5d66:	602b      	str	r3, [r5, #0]
    5d68:	6823      	ldr	r3, [r4, #0]
    5d6a:	069b      	lsls	r3, r3, #26
    5d6c:	d502      	bpl.n	5d74 <_printf_common+0x30>
    5d6e:	682b      	ldr	r3, [r5, #0]
    5d70:	3302      	adds	r3, #2
    5d72:	602b      	str	r3, [r5, #0]
    5d74:	2706      	movs	r7, #6
    5d76:	6823      	ldr	r3, [r4, #0]
    5d78:	401f      	ands	r7, r3
    5d7a:	d027      	beq.n	5dcc <_printf_common+0x88>
    5d7c:	0023      	movs	r3, r4
    5d7e:	3343      	adds	r3, #67	; 0x43
    5d80:	781b      	ldrb	r3, [r3, #0]
    5d82:	1e5a      	subs	r2, r3, #1
    5d84:	4193      	sbcs	r3, r2
    5d86:	6822      	ldr	r2, [r4, #0]
    5d88:	0692      	lsls	r2, r2, #26
    5d8a:	d430      	bmi.n	5dee <_printf_common+0xaa>
    5d8c:	0022      	movs	r2, r4
    5d8e:	9901      	ldr	r1, [sp, #4]
    5d90:	3243      	adds	r2, #67	; 0x43
    5d92:	9800      	ldr	r0, [sp, #0]
    5d94:	9e08      	ldr	r6, [sp, #32]
    5d96:	47b0      	blx	r6
    5d98:	1c43      	adds	r3, r0, #1
    5d9a:	d025      	beq.n	5de8 <_printf_common+0xa4>
    5d9c:	2306      	movs	r3, #6
    5d9e:	6820      	ldr	r0, [r4, #0]
    5da0:	682a      	ldr	r2, [r5, #0]
    5da2:	68e1      	ldr	r1, [r4, #12]
    5da4:	4003      	ands	r3, r0
    5da6:	2500      	movs	r5, #0
    5da8:	2b04      	cmp	r3, #4
    5daa:	d103      	bne.n	5db4 <_printf_common+0x70>
    5dac:	1a8d      	subs	r5, r1, r2
    5dae:	43eb      	mvns	r3, r5
    5db0:	17db      	asrs	r3, r3, #31
    5db2:	401d      	ands	r5, r3
    5db4:	68a3      	ldr	r3, [r4, #8]
    5db6:	6922      	ldr	r2, [r4, #16]
    5db8:	4293      	cmp	r3, r2
    5dba:	dd01      	ble.n	5dc0 <_printf_common+0x7c>
    5dbc:	1a9b      	subs	r3, r3, r2
    5dbe:	18ed      	adds	r5, r5, r3
    5dc0:	2700      	movs	r7, #0
    5dc2:	42bd      	cmp	r5, r7
    5dc4:	d120      	bne.n	5e08 <_printf_common+0xc4>
    5dc6:	2000      	movs	r0, #0
    5dc8:	e010      	b.n	5dec <_printf_common+0xa8>
    5dca:	3701      	adds	r7, #1
    5dcc:	68e3      	ldr	r3, [r4, #12]
    5dce:	682a      	ldr	r2, [r5, #0]
    5dd0:	1a9b      	subs	r3, r3, r2
    5dd2:	429f      	cmp	r7, r3
    5dd4:	dad2      	bge.n	5d7c <_printf_common+0x38>
    5dd6:	0022      	movs	r2, r4
    5dd8:	2301      	movs	r3, #1
    5dda:	3219      	adds	r2, #25
    5ddc:	9901      	ldr	r1, [sp, #4]
    5dde:	9800      	ldr	r0, [sp, #0]
    5de0:	9e08      	ldr	r6, [sp, #32]
    5de2:	47b0      	blx	r6
    5de4:	1c43      	adds	r3, r0, #1
    5de6:	d1f0      	bne.n	5dca <_printf_common+0x86>
    5de8:	2001      	movs	r0, #1
    5dea:	4240      	negs	r0, r0
    5dec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5dee:	2030      	movs	r0, #48	; 0x30
    5df0:	18e1      	adds	r1, r4, r3
    5df2:	3143      	adds	r1, #67	; 0x43
    5df4:	7008      	strb	r0, [r1, #0]
    5df6:	0021      	movs	r1, r4
    5df8:	1c5a      	adds	r2, r3, #1
    5dfa:	3145      	adds	r1, #69	; 0x45
    5dfc:	7809      	ldrb	r1, [r1, #0]
    5dfe:	18a2      	adds	r2, r4, r2
    5e00:	3243      	adds	r2, #67	; 0x43
    5e02:	3302      	adds	r3, #2
    5e04:	7011      	strb	r1, [r2, #0]
    5e06:	e7c1      	b.n	5d8c <_printf_common+0x48>
    5e08:	0022      	movs	r2, r4
    5e0a:	2301      	movs	r3, #1
    5e0c:	321a      	adds	r2, #26
    5e0e:	9901      	ldr	r1, [sp, #4]
    5e10:	9800      	ldr	r0, [sp, #0]
    5e12:	9e08      	ldr	r6, [sp, #32]
    5e14:	47b0      	blx	r6
    5e16:	1c43      	adds	r3, r0, #1
    5e18:	d0e6      	beq.n	5de8 <_printf_common+0xa4>
    5e1a:	3701      	adds	r7, #1
    5e1c:	e7d1      	b.n	5dc2 <_printf_common+0x7e>
	...

00005e20 <_printf_i>:
    5e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e22:	b08b      	sub	sp, #44	; 0x2c
    5e24:	9206      	str	r2, [sp, #24]
    5e26:	000a      	movs	r2, r1
    5e28:	3243      	adds	r2, #67	; 0x43
    5e2a:	9307      	str	r3, [sp, #28]
    5e2c:	9005      	str	r0, [sp, #20]
    5e2e:	9204      	str	r2, [sp, #16]
    5e30:	7e0a      	ldrb	r2, [r1, #24]
    5e32:	000c      	movs	r4, r1
    5e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5e36:	2a6e      	cmp	r2, #110	; 0x6e
    5e38:	d100      	bne.n	5e3c <_printf_i+0x1c>
    5e3a:	e08f      	b.n	5f5c <_printf_i+0x13c>
    5e3c:	d817      	bhi.n	5e6e <_printf_i+0x4e>
    5e3e:	2a63      	cmp	r2, #99	; 0x63
    5e40:	d02c      	beq.n	5e9c <_printf_i+0x7c>
    5e42:	d808      	bhi.n	5e56 <_printf_i+0x36>
    5e44:	2a00      	cmp	r2, #0
    5e46:	d100      	bne.n	5e4a <_printf_i+0x2a>
    5e48:	e099      	b.n	5f7e <_printf_i+0x15e>
    5e4a:	2a58      	cmp	r2, #88	; 0x58
    5e4c:	d054      	beq.n	5ef8 <_printf_i+0xd8>
    5e4e:	0026      	movs	r6, r4
    5e50:	3642      	adds	r6, #66	; 0x42
    5e52:	7032      	strb	r2, [r6, #0]
    5e54:	e029      	b.n	5eaa <_printf_i+0x8a>
    5e56:	2a64      	cmp	r2, #100	; 0x64
    5e58:	d001      	beq.n	5e5e <_printf_i+0x3e>
    5e5a:	2a69      	cmp	r2, #105	; 0x69
    5e5c:	d1f7      	bne.n	5e4e <_printf_i+0x2e>
    5e5e:	6821      	ldr	r1, [r4, #0]
    5e60:	681a      	ldr	r2, [r3, #0]
    5e62:	0608      	lsls	r0, r1, #24
    5e64:	d523      	bpl.n	5eae <_printf_i+0x8e>
    5e66:	1d11      	adds	r1, r2, #4
    5e68:	6019      	str	r1, [r3, #0]
    5e6a:	6815      	ldr	r5, [r2, #0]
    5e6c:	e025      	b.n	5eba <_printf_i+0x9a>
    5e6e:	2a73      	cmp	r2, #115	; 0x73
    5e70:	d100      	bne.n	5e74 <_printf_i+0x54>
    5e72:	e088      	b.n	5f86 <_printf_i+0x166>
    5e74:	d808      	bhi.n	5e88 <_printf_i+0x68>
    5e76:	2a6f      	cmp	r2, #111	; 0x6f
    5e78:	d029      	beq.n	5ece <_printf_i+0xae>
    5e7a:	2a70      	cmp	r2, #112	; 0x70
    5e7c:	d1e7      	bne.n	5e4e <_printf_i+0x2e>
    5e7e:	2220      	movs	r2, #32
    5e80:	6809      	ldr	r1, [r1, #0]
    5e82:	430a      	orrs	r2, r1
    5e84:	6022      	str	r2, [r4, #0]
    5e86:	e003      	b.n	5e90 <_printf_i+0x70>
    5e88:	2a75      	cmp	r2, #117	; 0x75
    5e8a:	d020      	beq.n	5ece <_printf_i+0xae>
    5e8c:	2a78      	cmp	r2, #120	; 0x78
    5e8e:	d1de      	bne.n	5e4e <_printf_i+0x2e>
    5e90:	0022      	movs	r2, r4
    5e92:	2178      	movs	r1, #120	; 0x78
    5e94:	3245      	adds	r2, #69	; 0x45
    5e96:	7011      	strb	r1, [r2, #0]
    5e98:	4a6c      	ldr	r2, [pc, #432]	; (604c <_printf_i+0x22c>)
    5e9a:	e030      	b.n	5efe <_printf_i+0xde>
    5e9c:	000e      	movs	r6, r1
    5e9e:	681a      	ldr	r2, [r3, #0]
    5ea0:	3642      	adds	r6, #66	; 0x42
    5ea2:	1d11      	adds	r1, r2, #4
    5ea4:	6019      	str	r1, [r3, #0]
    5ea6:	6813      	ldr	r3, [r2, #0]
    5ea8:	7033      	strb	r3, [r6, #0]
    5eaa:	2301      	movs	r3, #1
    5eac:	e079      	b.n	5fa2 <_printf_i+0x182>
    5eae:	0649      	lsls	r1, r1, #25
    5eb0:	d5d9      	bpl.n	5e66 <_printf_i+0x46>
    5eb2:	1d11      	adds	r1, r2, #4
    5eb4:	6019      	str	r1, [r3, #0]
    5eb6:	2300      	movs	r3, #0
    5eb8:	5ed5      	ldrsh	r5, [r2, r3]
    5eba:	2d00      	cmp	r5, #0
    5ebc:	da03      	bge.n	5ec6 <_printf_i+0xa6>
    5ebe:	232d      	movs	r3, #45	; 0x2d
    5ec0:	9a04      	ldr	r2, [sp, #16]
    5ec2:	426d      	negs	r5, r5
    5ec4:	7013      	strb	r3, [r2, #0]
    5ec6:	4b62      	ldr	r3, [pc, #392]	; (6050 <_printf_i+0x230>)
    5ec8:	270a      	movs	r7, #10
    5eca:	9303      	str	r3, [sp, #12]
    5ecc:	e02f      	b.n	5f2e <_printf_i+0x10e>
    5ece:	6820      	ldr	r0, [r4, #0]
    5ed0:	6819      	ldr	r1, [r3, #0]
    5ed2:	0605      	lsls	r5, r0, #24
    5ed4:	d503      	bpl.n	5ede <_printf_i+0xbe>
    5ed6:	1d08      	adds	r0, r1, #4
    5ed8:	6018      	str	r0, [r3, #0]
    5eda:	680d      	ldr	r5, [r1, #0]
    5edc:	e005      	b.n	5eea <_printf_i+0xca>
    5ede:	0640      	lsls	r0, r0, #25
    5ee0:	d5f9      	bpl.n	5ed6 <_printf_i+0xb6>
    5ee2:	680d      	ldr	r5, [r1, #0]
    5ee4:	1d08      	adds	r0, r1, #4
    5ee6:	6018      	str	r0, [r3, #0]
    5ee8:	b2ad      	uxth	r5, r5
    5eea:	4b59      	ldr	r3, [pc, #356]	; (6050 <_printf_i+0x230>)
    5eec:	2708      	movs	r7, #8
    5eee:	9303      	str	r3, [sp, #12]
    5ef0:	2a6f      	cmp	r2, #111	; 0x6f
    5ef2:	d018      	beq.n	5f26 <_printf_i+0x106>
    5ef4:	270a      	movs	r7, #10
    5ef6:	e016      	b.n	5f26 <_printf_i+0x106>
    5ef8:	3145      	adds	r1, #69	; 0x45
    5efa:	700a      	strb	r2, [r1, #0]
    5efc:	4a54      	ldr	r2, [pc, #336]	; (6050 <_printf_i+0x230>)
    5efe:	9203      	str	r2, [sp, #12]
    5f00:	681a      	ldr	r2, [r3, #0]
    5f02:	6821      	ldr	r1, [r4, #0]
    5f04:	1d10      	adds	r0, r2, #4
    5f06:	6018      	str	r0, [r3, #0]
    5f08:	6815      	ldr	r5, [r2, #0]
    5f0a:	0608      	lsls	r0, r1, #24
    5f0c:	d522      	bpl.n	5f54 <_printf_i+0x134>
    5f0e:	07cb      	lsls	r3, r1, #31
    5f10:	d502      	bpl.n	5f18 <_printf_i+0xf8>
    5f12:	2320      	movs	r3, #32
    5f14:	4319      	orrs	r1, r3
    5f16:	6021      	str	r1, [r4, #0]
    5f18:	2710      	movs	r7, #16
    5f1a:	2d00      	cmp	r5, #0
    5f1c:	d103      	bne.n	5f26 <_printf_i+0x106>
    5f1e:	2320      	movs	r3, #32
    5f20:	6822      	ldr	r2, [r4, #0]
    5f22:	439a      	bics	r2, r3
    5f24:	6022      	str	r2, [r4, #0]
    5f26:	0023      	movs	r3, r4
    5f28:	2200      	movs	r2, #0
    5f2a:	3343      	adds	r3, #67	; 0x43
    5f2c:	701a      	strb	r2, [r3, #0]
    5f2e:	6863      	ldr	r3, [r4, #4]
    5f30:	60a3      	str	r3, [r4, #8]
    5f32:	2b00      	cmp	r3, #0
    5f34:	db5c      	blt.n	5ff0 <_printf_i+0x1d0>
    5f36:	2204      	movs	r2, #4
    5f38:	6821      	ldr	r1, [r4, #0]
    5f3a:	4391      	bics	r1, r2
    5f3c:	6021      	str	r1, [r4, #0]
    5f3e:	2d00      	cmp	r5, #0
    5f40:	d158      	bne.n	5ff4 <_printf_i+0x1d4>
    5f42:	9e04      	ldr	r6, [sp, #16]
    5f44:	2b00      	cmp	r3, #0
    5f46:	d064      	beq.n	6012 <_printf_i+0x1f2>
    5f48:	0026      	movs	r6, r4
    5f4a:	9b03      	ldr	r3, [sp, #12]
    5f4c:	3642      	adds	r6, #66	; 0x42
    5f4e:	781b      	ldrb	r3, [r3, #0]
    5f50:	7033      	strb	r3, [r6, #0]
    5f52:	e05e      	b.n	6012 <_printf_i+0x1f2>
    5f54:	0648      	lsls	r0, r1, #25
    5f56:	d5da      	bpl.n	5f0e <_printf_i+0xee>
    5f58:	b2ad      	uxth	r5, r5
    5f5a:	e7d8      	b.n	5f0e <_printf_i+0xee>
    5f5c:	6809      	ldr	r1, [r1, #0]
    5f5e:	681a      	ldr	r2, [r3, #0]
    5f60:	0608      	lsls	r0, r1, #24
    5f62:	d505      	bpl.n	5f70 <_printf_i+0x150>
    5f64:	1d11      	adds	r1, r2, #4
    5f66:	6019      	str	r1, [r3, #0]
    5f68:	6813      	ldr	r3, [r2, #0]
    5f6a:	6962      	ldr	r2, [r4, #20]
    5f6c:	601a      	str	r2, [r3, #0]
    5f6e:	e006      	b.n	5f7e <_printf_i+0x15e>
    5f70:	0649      	lsls	r1, r1, #25
    5f72:	d5f7      	bpl.n	5f64 <_printf_i+0x144>
    5f74:	1d11      	adds	r1, r2, #4
    5f76:	6019      	str	r1, [r3, #0]
    5f78:	6813      	ldr	r3, [r2, #0]
    5f7a:	8aa2      	ldrh	r2, [r4, #20]
    5f7c:	801a      	strh	r2, [r3, #0]
    5f7e:	2300      	movs	r3, #0
    5f80:	9e04      	ldr	r6, [sp, #16]
    5f82:	6123      	str	r3, [r4, #16]
    5f84:	e054      	b.n	6030 <_printf_i+0x210>
    5f86:	681a      	ldr	r2, [r3, #0]
    5f88:	1d11      	adds	r1, r2, #4
    5f8a:	6019      	str	r1, [r3, #0]
    5f8c:	6816      	ldr	r6, [r2, #0]
    5f8e:	2100      	movs	r1, #0
    5f90:	6862      	ldr	r2, [r4, #4]
    5f92:	0030      	movs	r0, r6
    5f94:	f000 fc82 	bl	689c <memchr>
    5f98:	2800      	cmp	r0, #0
    5f9a:	d001      	beq.n	5fa0 <_printf_i+0x180>
    5f9c:	1b80      	subs	r0, r0, r6
    5f9e:	6060      	str	r0, [r4, #4]
    5fa0:	6863      	ldr	r3, [r4, #4]
    5fa2:	6123      	str	r3, [r4, #16]
    5fa4:	2300      	movs	r3, #0
    5fa6:	9a04      	ldr	r2, [sp, #16]
    5fa8:	7013      	strb	r3, [r2, #0]
    5faa:	e041      	b.n	6030 <_printf_i+0x210>
    5fac:	6923      	ldr	r3, [r4, #16]
    5fae:	0032      	movs	r2, r6
    5fb0:	9906      	ldr	r1, [sp, #24]
    5fb2:	9805      	ldr	r0, [sp, #20]
    5fb4:	9d07      	ldr	r5, [sp, #28]
    5fb6:	47a8      	blx	r5
    5fb8:	1c43      	adds	r3, r0, #1
    5fba:	d043      	beq.n	6044 <_printf_i+0x224>
    5fbc:	6823      	ldr	r3, [r4, #0]
    5fbe:	2500      	movs	r5, #0
    5fc0:	079b      	lsls	r3, r3, #30
    5fc2:	d40f      	bmi.n	5fe4 <_printf_i+0x1c4>
    5fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5fc6:	68e0      	ldr	r0, [r4, #12]
    5fc8:	4298      	cmp	r0, r3
    5fca:	da3d      	bge.n	6048 <_printf_i+0x228>
    5fcc:	0018      	movs	r0, r3
    5fce:	e03b      	b.n	6048 <_printf_i+0x228>
    5fd0:	0022      	movs	r2, r4
    5fd2:	2301      	movs	r3, #1
    5fd4:	3219      	adds	r2, #25
    5fd6:	9906      	ldr	r1, [sp, #24]
    5fd8:	9805      	ldr	r0, [sp, #20]
    5fda:	9e07      	ldr	r6, [sp, #28]
    5fdc:	47b0      	blx	r6
    5fde:	1c43      	adds	r3, r0, #1
    5fe0:	d030      	beq.n	6044 <_printf_i+0x224>
    5fe2:	3501      	adds	r5, #1
    5fe4:	68e3      	ldr	r3, [r4, #12]
    5fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5fe8:	1a9b      	subs	r3, r3, r2
    5fea:	429d      	cmp	r5, r3
    5fec:	dbf0      	blt.n	5fd0 <_printf_i+0x1b0>
    5fee:	e7e9      	b.n	5fc4 <_printf_i+0x1a4>
    5ff0:	2d00      	cmp	r5, #0
    5ff2:	d0a9      	beq.n	5f48 <_printf_i+0x128>
    5ff4:	9e04      	ldr	r6, [sp, #16]
    5ff6:	0028      	movs	r0, r5
    5ff8:	0039      	movs	r1, r7
    5ffa:	f7ff fbed 	bl	57d8 <__aeabi_uidivmod>
    5ffe:	9b03      	ldr	r3, [sp, #12]
    6000:	3e01      	subs	r6, #1
    6002:	5c5b      	ldrb	r3, [r3, r1]
    6004:	0028      	movs	r0, r5
    6006:	7033      	strb	r3, [r6, #0]
    6008:	0039      	movs	r1, r7
    600a:	f7ff fb5f 	bl	56cc <__udivsi3>
    600e:	1e05      	subs	r5, r0, #0
    6010:	d1f1      	bne.n	5ff6 <_printf_i+0x1d6>
    6012:	2f08      	cmp	r7, #8
    6014:	d109      	bne.n	602a <_printf_i+0x20a>
    6016:	6823      	ldr	r3, [r4, #0]
    6018:	07db      	lsls	r3, r3, #31
    601a:	d506      	bpl.n	602a <_printf_i+0x20a>
    601c:	6863      	ldr	r3, [r4, #4]
    601e:	6922      	ldr	r2, [r4, #16]
    6020:	4293      	cmp	r3, r2
    6022:	dc02      	bgt.n	602a <_printf_i+0x20a>
    6024:	2330      	movs	r3, #48	; 0x30
    6026:	3e01      	subs	r6, #1
    6028:	7033      	strb	r3, [r6, #0]
    602a:	9b04      	ldr	r3, [sp, #16]
    602c:	1b9b      	subs	r3, r3, r6
    602e:	6123      	str	r3, [r4, #16]
    6030:	9b07      	ldr	r3, [sp, #28]
    6032:	aa09      	add	r2, sp, #36	; 0x24
    6034:	9300      	str	r3, [sp, #0]
    6036:	0021      	movs	r1, r4
    6038:	9b06      	ldr	r3, [sp, #24]
    603a:	9805      	ldr	r0, [sp, #20]
    603c:	f7ff fe82 	bl	5d44 <_printf_common>
    6040:	1c43      	adds	r3, r0, #1
    6042:	d1b3      	bne.n	5fac <_printf_i+0x18c>
    6044:	2001      	movs	r0, #1
    6046:	4240      	negs	r0, r0
    6048:	b00b      	add	sp, #44	; 0x2c
    604a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    604c:	000075ca 	.word	0x000075ca
    6050:	000075b9 	.word	0x000075b9

00006054 <iprintf>:
    6054:	b40f      	push	{r0, r1, r2, r3}
    6056:	4b0b      	ldr	r3, [pc, #44]	; (6084 <iprintf+0x30>)
    6058:	b513      	push	{r0, r1, r4, lr}
    605a:	681c      	ldr	r4, [r3, #0]
    605c:	2c00      	cmp	r4, #0
    605e:	d005      	beq.n	606c <iprintf+0x18>
    6060:	69a3      	ldr	r3, [r4, #24]
    6062:	2b00      	cmp	r3, #0
    6064:	d102      	bne.n	606c <iprintf+0x18>
    6066:	0020      	movs	r0, r4
    6068:	f000 fb0c 	bl	6684 <__sinit>
    606c:	ab05      	add	r3, sp, #20
    606e:	9a04      	ldr	r2, [sp, #16]
    6070:	68a1      	ldr	r1, [r4, #8]
    6072:	0020      	movs	r0, r4
    6074:	9301      	str	r3, [sp, #4]
    6076:	f7ff fd3d 	bl	5af4 <_vfiprintf_r>
    607a:	bc16      	pop	{r1, r2, r4}
    607c:	bc08      	pop	{r3}
    607e:	b004      	add	sp, #16
    6080:	4718      	bx	r3
    6082:	46c0      	nop			; (mov r8, r8)
    6084:	20000034 	.word	0x20000034

00006088 <_puts_r>:
    6088:	b570      	push	{r4, r5, r6, lr}
    608a:	0005      	movs	r5, r0
    608c:	000e      	movs	r6, r1
    608e:	2800      	cmp	r0, #0
    6090:	d004      	beq.n	609c <_puts_r+0x14>
    6092:	6983      	ldr	r3, [r0, #24]
    6094:	2b00      	cmp	r3, #0
    6096:	d101      	bne.n	609c <_puts_r+0x14>
    6098:	f000 faf4 	bl	6684 <__sinit>
    609c:	69ab      	ldr	r3, [r5, #24]
    609e:	68ac      	ldr	r4, [r5, #8]
    60a0:	2b00      	cmp	r3, #0
    60a2:	d102      	bne.n	60aa <_puts_r+0x22>
    60a4:	0028      	movs	r0, r5
    60a6:	f000 faed 	bl	6684 <__sinit>
    60aa:	4b24      	ldr	r3, [pc, #144]	; (613c <_puts_r+0xb4>)
    60ac:	429c      	cmp	r4, r3
    60ae:	d10f      	bne.n	60d0 <_puts_r+0x48>
    60b0:	686c      	ldr	r4, [r5, #4]
    60b2:	89a3      	ldrh	r3, [r4, #12]
    60b4:	071b      	lsls	r3, r3, #28
    60b6:	d502      	bpl.n	60be <_puts_r+0x36>
    60b8:	6923      	ldr	r3, [r4, #16]
    60ba:	2b00      	cmp	r3, #0
    60bc:	d120      	bne.n	6100 <_puts_r+0x78>
    60be:	0021      	movs	r1, r4
    60c0:	0028      	movs	r0, r5
    60c2:	f000 f971 	bl	63a8 <__swsetup_r>
    60c6:	2800      	cmp	r0, #0
    60c8:	d01a      	beq.n	6100 <_puts_r+0x78>
    60ca:	2001      	movs	r0, #1
    60cc:	4240      	negs	r0, r0
    60ce:	bd70      	pop	{r4, r5, r6, pc}
    60d0:	4b1b      	ldr	r3, [pc, #108]	; (6140 <_puts_r+0xb8>)
    60d2:	429c      	cmp	r4, r3
    60d4:	d101      	bne.n	60da <_puts_r+0x52>
    60d6:	68ac      	ldr	r4, [r5, #8]
    60d8:	e7eb      	b.n	60b2 <_puts_r+0x2a>
    60da:	4b1a      	ldr	r3, [pc, #104]	; (6144 <_puts_r+0xbc>)
    60dc:	429c      	cmp	r4, r3
    60de:	d1e8      	bne.n	60b2 <_puts_r+0x2a>
    60e0:	68ec      	ldr	r4, [r5, #12]
    60e2:	e7e6      	b.n	60b2 <_puts_r+0x2a>
    60e4:	3b01      	subs	r3, #1
    60e6:	3601      	adds	r6, #1
    60e8:	60a3      	str	r3, [r4, #8]
    60ea:	2b00      	cmp	r3, #0
    60ec:	da04      	bge.n	60f8 <_puts_r+0x70>
    60ee:	69a2      	ldr	r2, [r4, #24]
    60f0:	4293      	cmp	r3, r2
    60f2:	db16      	blt.n	6122 <_puts_r+0x9a>
    60f4:	290a      	cmp	r1, #10
    60f6:	d014      	beq.n	6122 <_puts_r+0x9a>
    60f8:	6823      	ldr	r3, [r4, #0]
    60fa:	1c5a      	adds	r2, r3, #1
    60fc:	6022      	str	r2, [r4, #0]
    60fe:	7019      	strb	r1, [r3, #0]
    6100:	7831      	ldrb	r1, [r6, #0]
    6102:	68a3      	ldr	r3, [r4, #8]
    6104:	2900      	cmp	r1, #0
    6106:	d1ed      	bne.n	60e4 <_puts_r+0x5c>
    6108:	3b01      	subs	r3, #1
    610a:	60a3      	str	r3, [r4, #8]
    610c:	2b00      	cmp	r3, #0
    610e:	da0f      	bge.n	6130 <_puts_r+0xa8>
    6110:	0022      	movs	r2, r4
    6112:	310a      	adds	r1, #10
    6114:	0028      	movs	r0, r5
    6116:	f000 f8f1 	bl	62fc <__swbuf_r>
    611a:	1c43      	adds	r3, r0, #1
    611c:	d0d5      	beq.n	60ca <_puts_r+0x42>
    611e:	200a      	movs	r0, #10
    6120:	e7d5      	b.n	60ce <_puts_r+0x46>
    6122:	0022      	movs	r2, r4
    6124:	0028      	movs	r0, r5
    6126:	f000 f8e9 	bl	62fc <__swbuf_r>
    612a:	1c43      	adds	r3, r0, #1
    612c:	d1e8      	bne.n	6100 <_puts_r+0x78>
    612e:	e7cc      	b.n	60ca <_puts_r+0x42>
    6130:	200a      	movs	r0, #10
    6132:	6823      	ldr	r3, [r4, #0]
    6134:	1c5a      	adds	r2, r3, #1
    6136:	6022      	str	r2, [r4, #0]
    6138:	7018      	strb	r0, [r3, #0]
    613a:	e7c8      	b.n	60ce <_puts_r+0x46>
    613c:	000075fc 	.word	0x000075fc
    6140:	0000761c 	.word	0x0000761c
    6144:	000075dc 	.word	0x000075dc

00006148 <puts>:
    6148:	b510      	push	{r4, lr}
    614a:	4b03      	ldr	r3, [pc, #12]	; (6158 <puts+0x10>)
    614c:	0001      	movs	r1, r0
    614e:	6818      	ldr	r0, [r3, #0]
    6150:	f7ff ff9a 	bl	6088 <_puts_r>
    6154:	bd10      	pop	{r4, pc}
    6156:	46c0      	nop			; (mov r8, r8)
    6158:	20000034 	.word	0x20000034

0000615c <setbuf>:
    615c:	424a      	negs	r2, r1
    615e:	414a      	adcs	r2, r1
    6160:	2380      	movs	r3, #128	; 0x80
    6162:	b510      	push	{r4, lr}
    6164:	0052      	lsls	r2, r2, #1
    6166:	00db      	lsls	r3, r3, #3
    6168:	f000 f81c 	bl	61a4 <setvbuf>
    616c:	bd10      	pop	{r4, pc}

0000616e <setjmp>:
    616e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    6170:	4641      	mov	r1, r8
    6172:	464a      	mov	r2, r9
    6174:	4653      	mov	r3, sl
    6176:	465c      	mov	r4, fp
    6178:	466d      	mov	r5, sp
    617a:	4676      	mov	r6, lr
    617c:	c07e      	stmia	r0!, {r1, r2, r3, r4, r5, r6}
    617e:	3828      	subs	r0, #40	; 0x28
    6180:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    6182:	2000      	movs	r0, #0
    6184:	4770      	bx	lr

00006186 <longjmp>:
    6186:	3010      	adds	r0, #16
    6188:	c87c      	ldmia	r0!, {r2, r3, r4, r5, r6}
    618a:	4690      	mov	r8, r2
    618c:	4699      	mov	r9, r3
    618e:	46a2      	mov	sl, r4
    6190:	46ab      	mov	fp, r5
    6192:	46b5      	mov	sp, r6
    6194:	c808      	ldmia	r0!, {r3}
    6196:	3828      	subs	r0, #40	; 0x28
    6198:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    619a:	1c08      	adds	r0, r1, #0
    619c:	d100      	bne.n	61a0 <longjmp+0x1a>
    619e:	2001      	movs	r0, #1
    61a0:	4718      	bx	r3
	...

000061a4 <setvbuf>:
    61a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    61a6:	001d      	movs	r5, r3
    61a8:	4b4f      	ldr	r3, [pc, #316]	; (62e8 <setvbuf+0x144>)
    61aa:	b085      	sub	sp, #20
    61ac:	681e      	ldr	r6, [r3, #0]
    61ae:	0004      	movs	r4, r0
    61b0:	000f      	movs	r7, r1
    61b2:	9200      	str	r2, [sp, #0]
    61b4:	2e00      	cmp	r6, #0
    61b6:	d005      	beq.n	61c4 <setvbuf+0x20>
    61b8:	69b3      	ldr	r3, [r6, #24]
    61ba:	2b00      	cmp	r3, #0
    61bc:	d102      	bne.n	61c4 <setvbuf+0x20>
    61be:	0030      	movs	r0, r6
    61c0:	f000 fa60 	bl	6684 <__sinit>
    61c4:	4b49      	ldr	r3, [pc, #292]	; (62ec <setvbuf+0x148>)
    61c6:	429c      	cmp	r4, r3
    61c8:	d150      	bne.n	626c <setvbuf+0xc8>
    61ca:	6874      	ldr	r4, [r6, #4]
    61cc:	9b00      	ldr	r3, [sp, #0]
    61ce:	2b02      	cmp	r3, #2
    61d0:	d005      	beq.n	61de <setvbuf+0x3a>
    61d2:	2b01      	cmp	r3, #1
    61d4:	d900      	bls.n	61d8 <setvbuf+0x34>
    61d6:	e084      	b.n	62e2 <setvbuf+0x13e>
    61d8:	2d00      	cmp	r5, #0
    61da:	da00      	bge.n	61de <setvbuf+0x3a>
    61dc:	e081      	b.n	62e2 <setvbuf+0x13e>
    61de:	0021      	movs	r1, r4
    61e0:	0030      	movs	r0, r6
    61e2:	f000 f9e1 	bl	65a8 <_fflush_r>
    61e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    61e8:	2900      	cmp	r1, #0
    61ea:	d008      	beq.n	61fe <setvbuf+0x5a>
    61ec:	0023      	movs	r3, r4
    61ee:	3344      	adds	r3, #68	; 0x44
    61f0:	4299      	cmp	r1, r3
    61f2:	d002      	beq.n	61fa <setvbuf+0x56>
    61f4:	0030      	movs	r0, r6
    61f6:	f000 fb5d 	bl	68b4 <_free_r>
    61fa:	2300      	movs	r3, #0
    61fc:	6363      	str	r3, [r4, #52]	; 0x34
    61fe:	2300      	movs	r3, #0
    6200:	61a3      	str	r3, [r4, #24]
    6202:	6063      	str	r3, [r4, #4]
    6204:	89a3      	ldrh	r3, [r4, #12]
    6206:	061b      	lsls	r3, r3, #24
    6208:	d503      	bpl.n	6212 <setvbuf+0x6e>
    620a:	6921      	ldr	r1, [r4, #16]
    620c:	0030      	movs	r0, r6
    620e:	f000 fb51 	bl	68b4 <_free_r>
    6212:	89a3      	ldrh	r3, [r4, #12]
    6214:	4a36      	ldr	r2, [pc, #216]	; (62f0 <setvbuf+0x14c>)
    6216:	4013      	ands	r3, r2
    6218:	81a3      	strh	r3, [r4, #12]
    621a:	9b00      	ldr	r3, [sp, #0]
    621c:	2b02      	cmp	r3, #2
    621e:	d05a      	beq.n	62d6 <setvbuf+0x132>
    6220:	ab03      	add	r3, sp, #12
    6222:	aa02      	add	r2, sp, #8
    6224:	0021      	movs	r1, r4
    6226:	0030      	movs	r0, r6
    6228:	f000 fac2 	bl	67b0 <__swhatbuf_r>
    622c:	89a3      	ldrh	r3, [r4, #12]
    622e:	4318      	orrs	r0, r3
    6230:	81a0      	strh	r0, [r4, #12]
    6232:	2d00      	cmp	r5, #0
    6234:	d124      	bne.n	6280 <setvbuf+0xdc>
    6236:	9d02      	ldr	r5, [sp, #8]
    6238:	0028      	movs	r0, r5
    623a:	f000 fb25 	bl	6888 <malloc>
    623e:	9501      	str	r5, [sp, #4]
    6240:	1e07      	subs	r7, r0, #0
    6242:	d142      	bne.n	62ca <setvbuf+0x126>
    6244:	9b02      	ldr	r3, [sp, #8]
    6246:	9301      	str	r3, [sp, #4]
    6248:	42ab      	cmp	r3, r5
    624a:	d139      	bne.n	62c0 <setvbuf+0x11c>
    624c:	2001      	movs	r0, #1
    624e:	4240      	negs	r0, r0
    6250:	2302      	movs	r3, #2
    6252:	89a2      	ldrh	r2, [r4, #12]
    6254:	4313      	orrs	r3, r2
    6256:	81a3      	strh	r3, [r4, #12]
    6258:	2300      	movs	r3, #0
    625a:	60a3      	str	r3, [r4, #8]
    625c:	0023      	movs	r3, r4
    625e:	3347      	adds	r3, #71	; 0x47
    6260:	6023      	str	r3, [r4, #0]
    6262:	6123      	str	r3, [r4, #16]
    6264:	2301      	movs	r3, #1
    6266:	6163      	str	r3, [r4, #20]
    6268:	b005      	add	sp, #20
    626a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    626c:	4b21      	ldr	r3, [pc, #132]	; (62f4 <setvbuf+0x150>)
    626e:	429c      	cmp	r4, r3
    6270:	d101      	bne.n	6276 <setvbuf+0xd2>
    6272:	68b4      	ldr	r4, [r6, #8]
    6274:	e7aa      	b.n	61cc <setvbuf+0x28>
    6276:	4b20      	ldr	r3, [pc, #128]	; (62f8 <setvbuf+0x154>)
    6278:	429c      	cmp	r4, r3
    627a:	d1a7      	bne.n	61cc <setvbuf+0x28>
    627c:	68f4      	ldr	r4, [r6, #12]
    627e:	e7a5      	b.n	61cc <setvbuf+0x28>
    6280:	2f00      	cmp	r7, #0
    6282:	d0d9      	beq.n	6238 <setvbuf+0x94>
    6284:	69b3      	ldr	r3, [r6, #24]
    6286:	2b00      	cmp	r3, #0
    6288:	d102      	bne.n	6290 <setvbuf+0xec>
    628a:	0030      	movs	r0, r6
    628c:	f000 f9fa 	bl	6684 <__sinit>
    6290:	9b00      	ldr	r3, [sp, #0]
    6292:	2b01      	cmp	r3, #1
    6294:	d103      	bne.n	629e <setvbuf+0xfa>
    6296:	89a3      	ldrh	r3, [r4, #12]
    6298:	9a00      	ldr	r2, [sp, #0]
    629a:	431a      	orrs	r2, r3
    629c:	81a2      	strh	r2, [r4, #12]
    629e:	2008      	movs	r0, #8
    62a0:	89a3      	ldrh	r3, [r4, #12]
    62a2:	6027      	str	r7, [r4, #0]
    62a4:	6127      	str	r7, [r4, #16]
    62a6:	6165      	str	r5, [r4, #20]
    62a8:	4018      	ands	r0, r3
    62aa:	d018      	beq.n	62de <setvbuf+0x13a>
    62ac:	2001      	movs	r0, #1
    62ae:	4018      	ands	r0, r3
    62b0:	2300      	movs	r3, #0
    62b2:	4298      	cmp	r0, r3
    62b4:	d011      	beq.n	62da <setvbuf+0x136>
    62b6:	426d      	negs	r5, r5
    62b8:	60a3      	str	r3, [r4, #8]
    62ba:	61a5      	str	r5, [r4, #24]
    62bc:	0018      	movs	r0, r3
    62be:	e7d3      	b.n	6268 <setvbuf+0xc4>
    62c0:	9801      	ldr	r0, [sp, #4]
    62c2:	f000 fae1 	bl	6888 <malloc>
    62c6:	1e07      	subs	r7, r0, #0
    62c8:	d0c0      	beq.n	624c <setvbuf+0xa8>
    62ca:	2380      	movs	r3, #128	; 0x80
    62cc:	89a2      	ldrh	r2, [r4, #12]
    62ce:	9d01      	ldr	r5, [sp, #4]
    62d0:	4313      	orrs	r3, r2
    62d2:	81a3      	strh	r3, [r4, #12]
    62d4:	e7d6      	b.n	6284 <setvbuf+0xe0>
    62d6:	2000      	movs	r0, #0
    62d8:	e7ba      	b.n	6250 <setvbuf+0xac>
    62da:	60a5      	str	r5, [r4, #8]
    62dc:	e7c4      	b.n	6268 <setvbuf+0xc4>
    62de:	60a0      	str	r0, [r4, #8]
    62e0:	e7c2      	b.n	6268 <setvbuf+0xc4>
    62e2:	2001      	movs	r0, #1
    62e4:	4240      	negs	r0, r0
    62e6:	e7bf      	b.n	6268 <setvbuf+0xc4>
    62e8:	20000034 	.word	0x20000034
    62ec:	000075fc 	.word	0x000075fc
    62f0:	fffff35c 	.word	0xfffff35c
    62f4:	0000761c 	.word	0x0000761c
    62f8:	000075dc 	.word	0x000075dc

000062fc <__swbuf_r>:
    62fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62fe:	0005      	movs	r5, r0
    6300:	000e      	movs	r6, r1
    6302:	0014      	movs	r4, r2
    6304:	2800      	cmp	r0, #0
    6306:	d004      	beq.n	6312 <__swbuf_r+0x16>
    6308:	6983      	ldr	r3, [r0, #24]
    630a:	2b00      	cmp	r3, #0
    630c:	d101      	bne.n	6312 <__swbuf_r+0x16>
    630e:	f000 f9b9 	bl	6684 <__sinit>
    6312:	4b22      	ldr	r3, [pc, #136]	; (639c <__swbuf_r+0xa0>)
    6314:	429c      	cmp	r4, r3
    6316:	d12d      	bne.n	6374 <__swbuf_r+0x78>
    6318:	686c      	ldr	r4, [r5, #4]
    631a:	69a3      	ldr	r3, [r4, #24]
    631c:	60a3      	str	r3, [r4, #8]
    631e:	89a3      	ldrh	r3, [r4, #12]
    6320:	071b      	lsls	r3, r3, #28
    6322:	d531      	bpl.n	6388 <__swbuf_r+0x8c>
    6324:	6923      	ldr	r3, [r4, #16]
    6326:	2b00      	cmp	r3, #0
    6328:	d02e      	beq.n	6388 <__swbuf_r+0x8c>
    632a:	6823      	ldr	r3, [r4, #0]
    632c:	6922      	ldr	r2, [r4, #16]
    632e:	b2f7      	uxtb	r7, r6
    6330:	1a98      	subs	r0, r3, r2
    6332:	6963      	ldr	r3, [r4, #20]
    6334:	b2f6      	uxtb	r6, r6
    6336:	4298      	cmp	r0, r3
    6338:	db05      	blt.n	6346 <__swbuf_r+0x4a>
    633a:	0021      	movs	r1, r4
    633c:	0028      	movs	r0, r5
    633e:	f000 f933 	bl	65a8 <_fflush_r>
    6342:	2800      	cmp	r0, #0
    6344:	d126      	bne.n	6394 <__swbuf_r+0x98>
    6346:	68a3      	ldr	r3, [r4, #8]
    6348:	3001      	adds	r0, #1
    634a:	3b01      	subs	r3, #1
    634c:	60a3      	str	r3, [r4, #8]
    634e:	6823      	ldr	r3, [r4, #0]
    6350:	1c5a      	adds	r2, r3, #1
    6352:	6022      	str	r2, [r4, #0]
    6354:	701f      	strb	r7, [r3, #0]
    6356:	6963      	ldr	r3, [r4, #20]
    6358:	4298      	cmp	r0, r3
    635a:	d004      	beq.n	6366 <__swbuf_r+0x6a>
    635c:	89a3      	ldrh	r3, [r4, #12]
    635e:	07db      	lsls	r3, r3, #31
    6360:	d51a      	bpl.n	6398 <__swbuf_r+0x9c>
    6362:	2e0a      	cmp	r6, #10
    6364:	d118      	bne.n	6398 <__swbuf_r+0x9c>
    6366:	0021      	movs	r1, r4
    6368:	0028      	movs	r0, r5
    636a:	f000 f91d 	bl	65a8 <_fflush_r>
    636e:	2800      	cmp	r0, #0
    6370:	d012      	beq.n	6398 <__swbuf_r+0x9c>
    6372:	e00f      	b.n	6394 <__swbuf_r+0x98>
    6374:	4b0a      	ldr	r3, [pc, #40]	; (63a0 <__swbuf_r+0xa4>)
    6376:	429c      	cmp	r4, r3
    6378:	d101      	bne.n	637e <__swbuf_r+0x82>
    637a:	68ac      	ldr	r4, [r5, #8]
    637c:	e7cd      	b.n	631a <__swbuf_r+0x1e>
    637e:	4b09      	ldr	r3, [pc, #36]	; (63a4 <__swbuf_r+0xa8>)
    6380:	429c      	cmp	r4, r3
    6382:	d1ca      	bne.n	631a <__swbuf_r+0x1e>
    6384:	68ec      	ldr	r4, [r5, #12]
    6386:	e7c8      	b.n	631a <__swbuf_r+0x1e>
    6388:	0021      	movs	r1, r4
    638a:	0028      	movs	r0, r5
    638c:	f000 f80c 	bl	63a8 <__swsetup_r>
    6390:	2800      	cmp	r0, #0
    6392:	d0ca      	beq.n	632a <__swbuf_r+0x2e>
    6394:	2601      	movs	r6, #1
    6396:	4276      	negs	r6, r6
    6398:	0030      	movs	r0, r6
    639a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    639c:	000075fc 	.word	0x000075fc
    63a0:	0000761c 	.word	0x0000761c
    63a4:	000075dc 	.word	0x000075dc

000063a8 <__swsetup_r>:
    63a8:	4b36      	ldr	r3, [pc, #216]	; (6484 <__swsetup_r+0xdc>)
    63aa:	b570      	push	{r4, r5, r6, lr}
    63ac:	681d      	ldr	r5, [r3, #0]
    63ae:	0006      	movs	r6, r0
    63b0:	000c      	movs	r4, r1
    63b2:	2d00      	cmp	r5, #0
    63b4:	d005      	beq.n	63c2 <__swsetup_r+0x1a>
    63b6:	69ab      	ldr	r3, [r5, #24]
    63b8:	2b00      	cmp	r3, #0
    63ba:	d102      	bne.n	63c2 <__swsetup_r+0x1a>
    63bc:	0028      	movs	r0, r5
    63be:	f000 f961 	bl	6684 <__sinit>
    63c2:	4b31      	ldr	r3, [pc, #196]	; (6488 <__swsetup_r+0xe0>)
    63c4:	429c      	cmp	r4, r3
    63c6:	d10f      	bne.n	63e8 <__swsetup_r+0x40>
    63c8:	686c      	ldr	r4, [r5, #4]
    63ca:	230c      	movs	r3, #12
    63cc:	5ee2      	ldrsh	r2, [r4, r3]
    63ce:	b293      	uxth	r3, r2
    63d0:	0719      	lsls	r1, r3, #28
    63d2:	d42d      	bmi.n	6430 <__swsetup_r+0x88>
    63d4:	06d9      	lsls	r1, r3, #27
    63d6:	d411      	bmi.n	63fc <__swsetup_r+0x54>
    63d8:	2309      	movs	r3, #9
    63da:	2001      	movs	r0, #1
    63dc:	6033      	str	r3, [r6, #0]
    63de:	3337      	adds	r3, #55	; 0x37
    63e0:	4313      	orrs	r3, r2
    63e2:	81a3      	strh	r3, [r4, #12]
    63e4:	4240      	negs	r0, r0
    63e6:	bd70      	pop	{r4, r5, r6, pc}
    63e8:	4b28      	ldr	r3, [pc, #160]	; (648c <__swsetup_r+0xe4>)
    63ea:	429c      	cmp	r4, r3
    63ec:	d101      	bne.n	63f2 <__swsetup_r+0x4a>
    63ee:	68ac      	ldr	r4, [r5, #8]
    63f0:	e7eb      	b.n	63ca <__swsetup_r+0x22>
    63f2:	4b27      	ldr	r3, [pc, #156]	; (6490 <__swsetup_r+0xe8>)
    63f4:	429c      	cmp	r4, r3
    63f6:	d1e8      	bne.n	63ca <__swsetup_r+0x22>
    63f8:	68ec      	ldr	r4, [r5, #12]
    63fa:	e7e6      	b.n	63ca <__swsetup_r+0x22>
    63fc:	075b      	lsls	r3, r3, #29
    63fe:	d513      	bpl.n	6428 <__swsetup_r+0x80>
    6400:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6402:	2900      	cmp	r1, #0
    6404:	d008      	beq.n	6418 <__swsetup_r+0x70>
    6406:	0023      	movs	r3, r4
    6408:	3344      	adds	r3, #68	; 0x44
    640a:	4299      	cmp	r1, r3
    640c:	d002      	beq.n	6414 <__swsetup_r+0x6c>
    640e:	0030      	movs	r0, r6
    6410:	f000 fa50 	bl	68b4 <_free_r>
    6414:	2300      	movs	r3, #0
    6416:	6363      	str	r3, [r4, #52]	; 0x34
    6418:	2224      	movs	r2, #36	; 0x24
    641a:	89a3      	ldrh	r3, [r4, #12]
    641c:	4393      	bics	r3, r2
    641e:	81a3      	strh	r3, [r4, #12]
    6420:	2300      	movs	r3, #0
    6422:	6063      	str	r3, [r4, #4]
    6424:	6923      	ldr	r3, [r4, #16]
    6426:	6023      	str	r3, [r4, #0]
    6428:	2308      	movs	r3, #8
    642a:	89a2      	ldrh	r2, [r4, #12]
    642c:	4313      	orrs	r3, r2
    642e:	81a3      	strh	r3, [r4, #12]
    6430:	6923      	ldr	r3, [r4, #16]
    6432:	2b00      	cmp	r3, #0
    6434:	d10b      	bne.n	644e <__swsetup_r+0xa6>
    6436:	21a0      	movs	r1, #160	; 0xa0
    6438:	2280      	movs	r2, #128	; 0x80
    643a:	89a3      	ldrh	r3, [r4, #12]
    643c:	0089      	lsls	r1, r1, #2
    643e:	0092      	lsls	r2, r2, #2
    6440:	400b      	ands	r3, r1
    6442:	4293      	cmp	r3, r2
    6444:	d003      	beq.n	644e <__swsetup_r+0xa6>
    6446:	0021      	movs	r1, r4
    6448:	0030      	movs	r0, r6
    644a:	f000 f9d9 	bl	6800 <__smakebuf_r>
    644e:	2301      	movs	r3, #1
    6450:	89a2      	ldrh	r2, [r4, #12]
    6452:	4013      	ands	r3, r2
    6454:	d011      	beq.n	647a <__swsetup_r+0xd2>
    6456:	2300      	movs	r3, #0
    6458:	60a3      	str	r3, [r4, #8]
    645a:	6963      	ldr	r3, [r4, #20]
    645c:	425b      	negs	r3, r3
    645e:	61a3      	str	r3, [r4, #24]
    6460:	2000      	movs	r0, #0
    6462:	6923      	ldr	r3, [r4, #16]
    6464:	4283      	cmp	r3, r0
    6466:	d1be      	bne.n	63e6 <__swsetup_r+0x3e>
    6468:	230c      	movs	r3, #12
    646a:	5ee2      	ldrsh	r2, [r4, r3]
    646c:	0613      	lsls	r3, r2, #24
    646e:	d5ba      	bpl.n	63e6 <__swsetup_r+0x3e>
    6470:	2340      	movs	r3, #64	; 0x40
    6472:	4313      	orrs	r3, r2
    6474:	81a3      	strh	r3, [r4, #12]
    6476:	3801      	subs	r0, #1
    6478:	e7b5      	b.n	63e6 <__swsetup_r+0x3e>
    647a:	0792      	lsls	r2, r2, #30
    647c:	d400      	bmi.n	6480 <__swsetup_r+0xd8>
    647e:	6963      	ldr	r3, [r4, #20]
    6480:	60a3      	str	r3, [r4, #8]
    6482:	e7ed      	b.n	6460 <__swsetup_r+0xb8>
    6484:	20000034 	.word	0x20000034
    6488:	000075fc 	.word	0x000075fc
    648c:	0000761c 	.word	0x0000761c
    6490:	000075dc 	.word	0x000075dc

00006494 <__sflush_r>:
    6494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6496:	898a      	ldrh	r2, [r1, #12]
    6498:	0005      	movs	r5, r0
    649a:	000c      	movs	r4, r1
    649c:	0713      	lsls	r3, r2, #28
    649e:	d460      	bmi.n	6562 <__sflush_r+0xce>
    64a0:	684b      	ldr	r3, [r1, #4]
    64a2:	2b00      	cmp	r3, #0
    64a4:	dc04      	bgt.n	64b0 <__sflush_r+0x1c>
    64a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    64a8:	2b00      	cmp	r3, #0
    64aa:	dc01      	bgt.n	64b0 <__sflush_r+0x1c>
    64ac:	2000      	movs	r0, #0
    64ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    64b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    64b2:	2f00      	cmp	r7, #0
    64b4:	d0fa      	beq.n	64ac <__sflush_r+0x18>
    64b6:	2300      	movs	r3, #0
    64b8:	682e      	ldr	r6, [r5, #0]
    64ba:	602b      	str	r3, [r5, #0]
    64bc:	2380      	movs	r3, #128	; 0x80
    64be:	015b      	lsls	r3, r3, #5
    64c0:	401a      	ands	r2, r3
    64c2:	d034      	beq.n	652e <__sflush_r+0x9a>
    64c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    64c6:	89a3      	ldrh	r3, [r4, #12]
    64c8:	075b      	lsls	r3, r3, #29
    64ca:	d506      	bpl.n	64da <__sflush_r+0x46>
    64cc:	6863      	ldr	r3, [r4, #4]
    64ce:	1ac0      	subs	r0, r0, r3
    64d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    64d2:	2b00      	cmp	r3, #0
    64d4:	d001      	beq.n	64da <__sflush_r+0x46>
    64d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    64d8:	1ac0      	subs	r0, r0, r3
    64da:	0002      	movs	r2, r0
    64dc:	6a21      	ldr	r1, [r4, #32]
    64de:	2300      	movs	r3, #0
    64e0:	0028      	movs	r0, r5
    64e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    64e4:	47b8      	blx	r7
    64e6:	89a1      	ldrh	r1, [r4, #12]
    64e8:	1c43      	adds	r3, r0, #1
    64ea:	d106      	bne.n	64fa <__sflush_r+0x66>
    64ec:	682b      	ldr	r3, [r5, #0]
    64ee:	2b1d      	cmp	r3, #29
    64f0:	d831      	bhi.n	6556 <__sflush_r+0xc2>
    64f2:	4a2c      	ldr	r2, [pc, #176]	; (65a4 <__sflush_r+0x110>)
    64f4:	40da      	lsrs	r2, r3
    64f6:	07d3      	lsls	r3, r2, #31
    64f8:	d52d      	bpl.n	6556 <__sflush_r+0xc2>
    64fa:	2300      	movs	r3, #0
    64fc:	6063      	str	r3, [r4, #4]
    64fe:	6923      	ldr	r3, [r4, #16]
    6500:	6023      	str	r3, [r4, #0]
    6502:	04cb      	lsls	r3, r1, #19
    6504:	d505      	bpl.n	6512 <__sflush_r+0x7e>
    6506:	1c43      	adds	r3, r0, #1
    6508:	d102      	bne.n	6510 <__sflush_r+0x7c>
    650a:	682b      	ldr	r3, [r5, #0]
    650c:	2b00      	cmp	r3, #0
    650e:	d100      	bne.n	6512 <__sflush_r+0x7e>
    6510:	6560      	str	r0, [r4, #84]	; 0x54
    6512:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6514:	602e      	str	r6, [r5, #0]
    6516:	2900      	cmp	r1, #0
    6518:	d0c8      	beq.n	64ac <__sflush_r+0x18>
    651a:	0023      	movs	r3, r4
    651c:	3344      	adds	r3, #68	; 0x44
    651e:	4299      	cmp	r1, r3
    6520:	d002      	beq.n	6528 <__sflush_r+0x94>
    6522:	0028      	movs	r0, r5
    6524:	f000 f9c6 	bl	68b4 <_free_r>
    6528:	2000      	movs	r0, #0
    652a:	6360      	str	r0, [r4, #52]	; 0x34
    652c:	e7bf      	b.n	64ae <__sflush_r+0x1a>
    652e:	2301      	movs	r3, #1
    6530:	6a21      	ldr	r1, [r4, #32]
    6532:	0028      	movs	r0, r5
    6534:	47b8      	blx	r7
    6536:	1c43      	adds	r3, r0, #1
    6538:	d1c5      	bne.n	64c6 <__sflush_r+0x32>
    653a:	682b      	ldr	r3, [r5, #0]
    653c:	2b00      	cmp	r3, #0
    653e:	d0c2      	beq.n	64c6 <__sflush_r+0x32>
    6540:	2b1d      	cmp	r3, #29
    6542:	d001      	beq.n	6548 <__sflush_r+0xb4>
    6544:	2b16      	cmp	r3, #22
    6546:	d101      	bne.n	654c <__sflush_r+0xb8>
    6548:	602e      	str	r6, [r5, #0]
    654a:	e7af      	b.n	64ac <__sflush_r+0x18>
    654c:	2340      	movs	r3, #64	; 0x40
    654e:	89a2      	ldrh	r2, [r4, #12]
    6550:	4313      	orrs	r3, r2
    6552:	81a3      	strh	r3, [r4, #12]
    6554:	e7ab      	b.n	64ae <__sflush_r+0x1a>
    6556:	2340      	movs	r3, #64	; 0x40
    6558:	430b      	orrs	r3, r1
    655a:	2001      	movs	r0, #1
    655c:	81a3      	strh	r3, [r4, #12]
    655e:	4240      	negs	r0, r0
    6560:	e7a5      	b.n	64ae <__sflush_r+0x1a>
    6562:	690f      	ldr	r7, [r1, #16]
    6564:	2f00      	cmp	r7, #0
    6566:	d0a1      	beq.n	64ac <__sflush_r+0x18>
    6568:	680b      	ldr	r3, [r1, #0]
    656a:	600f      	str	r7, [r1, #0]
    656c:	1bdb      	subs	r3, r3, r7
    656e:	9301      	str	r3, [sp, #4]
    6570:	2300      	movs	r3, #0
    6572:	0792      	lsls	r2, r2, #30
    6574:	d100      	bne.n	6578 <__sflush_r+0xe4>
    6576:	694b      	ldr	r3, [r1, #20]
    6578:	60a3      	str	r3, [r4, #8]
    657a:	9b01      	ldr	r3, [sp, #4]
    657c:	2b00      	cmp	r3, #0
    657e:	dc00      	bgt.n	6582 <__sflush_r+0xee>
    6580:	e794      	b.n	64ac <__sflush_r+0x18>
    6582:	9b01      	ldr	r3, [sp, #4]
    6584:	003a      	movs	r2, r7
    6586:	6a21      	ldr	r1, [r4, #32]
    6588:	0028      	movs	r0, r5
    658a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    658c:	47b0      	blx	r6
    658e:	2800      	cmp	r0, #0
    6590:	dc03      	bgt.n	659a <__sflush_r+0x106>
    6592:	2340      	movs	r3, #64	; 0x40
    6594:	89a2      	ldrh	r2, [r4, #12]
    6596:	4313      	orrs	r3, r2
    6598:	e7df      	b.n	655a <__sflush_r+0xc6>
    659a:	9b01      	ldr	r3, [sp, #4]
    659c:	183f      	adds	r7, r7, r0
    659e:	1a1b      	subs	r3, r3, r0
    65a0:	9301      	str	r3, [sp, #4]
    65a2:	e7ea      	b.n	657a <__sflush_r+0xe6>
    65a4:	20400001 	.word	0x20400001

000065a8 <_fflush_r>:
    65a8:	690b      	ldr	r3, [r1, #16]
    65aa:	b570      	push	{r4, r5, r6, lr}
    65ac:	0005      	movs	r5, r0
    65ae:	000c      	movs	r4, r1
    65b0:	2b00      	cmp	r3, #0
    65b2:	d101      	bne.n	65b8 <_fflush_r+0x10>
    65b4:	2000      	movs	r0, #0
    65b6:	bd70      	pop	{r4, r5, r6, pc}
    65b8:	2800      	cmp	r0, #0
    65ba:	d004      	beq.n	65c6 <_fflush_r+0x1e>
    65bc:	6983      	ldr	r3, [r0, #24]
    65be:	2b00      	cmp	r3, #0
    65c0:	d101      	bne.n	65c6 <_fflush_r+0x1e>
    65c2:	f000 f85f 	bl	6684 <__sinit>
    65c6:	4b0b      	ldr	r3, [pc, #44]	; (65f4 <_fflush_r+0x4c>)
    65c8:	429c      	cmp	r4, r3
    65ca:	d109      	bne.n	65e0 <_fflush_r+0x38>
    65cc:	686c      	ldr	r4, [r5, #4]
    65ce:	220c      	movs	r2, #12
    65d0:	5ea3      	ldrsh	r3, [r4, r2]
    65d2:	2b00      	cmp	r3, #0
    65d4:	d0ee      	beq.n	65b4 <_fflush_r+0xc>
    65d6:	0021      	movs	r1, r4
    65d8:	0028      	movs	r0, r5
    65da:	f7ff ff5b 	bl	6494 <__sflush_r>
    65de:	e7ea      	b.n	65b6 <_fflush_r+0xe>
    65e0:	4b05      	ldr	r3, [pc, #20]	; (65f8 <_fflush_r+0x50>)
    65e2:	429c      	cmp	r4, r3
    65e4:	d101      	bne.n	65ea <_fflush_r+0x42>
    65e6:	68ac      	ldr	r4, [r5, #8]
    65e8:	e7f1      	b.n	65ce <_fflush_r+0x26>
    65ea:	4b04      	ldr	r3, [pc, #16]	; (65fc <_fflush_r+0x54>)
    65ec:	429c      	cmp	r4, r3
    65ee:	d1ee      	bne.n	65ce <_fflush_r+0x26>
    65f0:	68ec      	ldr	r4, [r5, #12]
    65f2:	e7ec      	b.n	65ce <_fflush_r+0x26>
    65f4:	000075fc 	.word	0x000075fc
    65f8:	0000761c 	.word	0x0000761c
    65fc:	000075dc 	.word	0x000075dc

00006600 <_cleanup_r>:
    6600:	b510      	push	{r4, lr}
    6602:	4902      	ldr	r1, [pc, #8]	; (660c <_cleanup_r+0xc>)
    6604:	f000 f8b2 	bl	676c <_fwalk_reent>
    6608:	bd10      	pop	{r4, pc}
    660a:	46c0      	nop			; (mov r8, r8)
    660c:	000065a9 	.word	0x000065a9

00006610 <std.isra.0>:
    6610:	2300      	movs	r3, #0
    6612:	b510      	push	{r4, lr}
    6614:	0004      	movs	r4, r0
    6616:	6003      	str	r3, [r0, #0]
    6618:	6043      	str	r3, [r0, #4]
    661a:	6083      	str	r3, [r0, #8]
    661c:	8181      	strh	r1, [r0, #12]
    661e:	6643      	str	r3, [r0, #100]	; 0x64
    6620:	81c2      	strh	r2, [r0, #14]
    6622:	6103      	str	r3, [r0, #16]
    6624:	6143      	str	r3, [r0, #20]
    6626:	6183      	str	r3, [r0, #24]
    6628:	0019      	movs	r1, r3
    662a:	2208      	movs	r2, #8
    662c:	305c      	adds	r0, #92	; 0x5c
    662e:	f7ff fa31 	bl	5a94 <memset>
    6632:	4b05      	ldr	r3, [pc, #20]	; (6648 <std.isra.0+0x38>)
    6634:	6224      	str	r4, [r4, #32]
    6636:	6263      	str	r3, [r4, #36]	; 0x24
    6638:	4b04      	ldr	r3, [pc, #16]	; (664c <std.isra.0+0x3c>)
    663a:	62a3      	str	r3, [r4, #40]	; 0x28
    663c:	4b04      	ldr	r3, [pc, #16]	; (6650 <std.isra.0+0x40>)
    663e:	62e3      	str	r3, [r4, #44]	; 0x2c
    6640:	4b04      	ldr	r3, [pc, #16]	; (6654 <std.isra.0+0x44>)
    6642:	6323      	str	r3, [r4, #48]	; 0x30
    6644:	bd10      	pop	{r4, pc}
    6646:	46c0      	nop			; (mov r8, r8)
    6648:	00006a29 	.word	0x00006a29
    664c:	00006a51 	.word	0x00006a51
    6650:	00006a89 	.word	0x00006a89
    6654:	00006ab5 	.word	0x00006ab5

00006658 <__sfmoreglue>:
    6658:	b570      	push	{r4, r5, r6, lr}
    665a:	2568      	movs	r5, #104	; 0x68
    665c:	1e4a      	subs	r2, r1, #1
    665e:	4355      	muls	r5, r2
    6660:	000e      	movs	r6, r1
    6662:	0029      	movs	r1, r5
    6664:	3174      	adds	r1, #116	; 0x74
    6666:	f000 f96f 	bl	6948 <_malloc_r>
    666a:	1e04      	subs	r4, r0, #0
    666c:	d008      	beq.n	6680 <__sfmoreglue+0x28>
    666e:	2100      	movs	r1, #0
    6670:	002a      	movs	r2, r5
    6672:	6001      	str	r1, [r0, #0]
    6674:	6046      	str	r6, [r0, #4]
    6676:	300c      	adds	r0, #12
    6678:	60a0      	str	r0, [r4, #8]
    667a:	3268      	adds	r2, #104	; 0x68
    667c:	f7ff fa0a 	bl	5a94 <memset>
    6680:	0020      	movs	r0, r4
    6682:	bd70      	pop	{r4, r5, r6, pc}

00006684 <__sinit>:
    6684:	6983      	ldr	r3, [r0, #24]
    6686:	b513      	push	{r0, r1, r4, lr}
    6688:	0004      	movs	r4, r0
    668a:	2b00      	cmp	r3, #0
    668c:	d128      	bne.n	66e0 <__sinit+0x5c>
    668e:	6483      	str	r3, [r0, #72]	; 0x48
    6690:	64c3      	str	r3, [r0, #76]	; 0x4c
    6692:	6503      	str	r3, [r0, #80]	; 0x50
    6694:	4b13      	ldr	r3, [pc, #76]	; (66e4 <__sinit+0x60>)
    6696:	4a14      	ldr	r2, [pc, #80]	; (66e8 <__sinit+0x64>)
    6698:	681b      	ldr	r3, [r3, #0]
    669a:	6282      	str	r2, [r0, #40]	; 0x28
    669c:	9301      	str	r3, [sp, #4]
    669e:	4298      	cmp	r0, r3
    66a0:	d101      	bne.n	66a6 <__sinit+0x22>
    66a2:	2301      	movs	r3, #1
    66a4:	6183      	str	r3, [r0, #24]
    66a6:	0020      	movs	r0, r4
    66a8:	f000 f820 	bl	66ec <__sfp>
    66ac:	6060      	str	r0, [r4, #4]
    66ae:	0020      	movs	r0, r4
    66b0:	f000 f81c 	bl	66ec <__sfp>
    66b4:	60a0      	str	r0, [r4, #8]
    66b6:	0020      	movs	r0, r4
    66b8:	f000 f818 	bl	66ec <__sfp>
    66bc:	2200      	movs	r2, #0
    66be:	60e0      	str	r0, [r4, #12]
    66c0:	2104      	movs	r1, #4
    66c2:	6860      	ldr	r0, [r4, #4]
    66c4:	f7ff ffa4 	bl	6610 <std.isra.0>
    66c8:	2201      	movs	r2, #1
    66ca:	2109      	movs	r1, #9
    66cc:	68a0      	ldr	r0, [r4, #8]
    66ce:	f7ff ff9f 	bl	6610 <std.isra.0>
    66d2:	2202      	movs	r2, #2
    66d4:	2112      	movs	r1, #18
    66d6:	68e0      	ldr	r0, [r4, #12]
    66d8:	f7ff ff9a 	bl	6610 <std.isra.0>
    66dc:	2301      	movs	r3, #1
    66de:	61a3      	str	r3, [r4, #24]
    66e0:	bd13      	pop	{r0, r1, r4, pc}
    66e2:	46c0      	nop			; (mov r8, r8)
    66e4:	000075a4 	.word	0x000075a4
    66e8:	00006601 	.word	0x00006601

000066ec <__sfp>:
    66ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66ee:	4b1e      	ldr	r3, [pc, #120]	; (6768 <__sfp+0x7c>)
    66f0:	0007      	movs	r7, r0
    66f2:	681e      	ldr	r6, [r3, #0]
    66f4:	69b3      	ldr	r3, [r6, #24]
    66f6:	2b00      	cmp	r3, #0
    66f8:	d102      	bne.n	6700 <__sfp+0x14>
    66fa:	0030      	movs	r0, r6
    66fc:	f7ff ffc2 	bl	6684 <__sinit>
    6700:	3648      	adds	r6, #72	; 0x48
    6702:	68b4      	ldr	r4, [r6, #8]
    6704:	6873      	ldr	r3, [r6, #4]
    6706:	3b01      	subs	r3, #1
    6708:	d504      	bpl.n	6714 <__sfp+0x28>
    670a:	6833      	ldr	r3, [r6, #0]
    670c:	2b00      	cmp	r3, #0
    670e:	d007      	beq.n	6720 <__sfp+0x34>
    6710:	6836      	ldr	r6, [r6, #0]
    6712:	e7f6      	b.n	6702 <__sfp+0x16>
    6714:	220c      	movs	r2, #12
    6716:	5ea5      	ldrsh	r5, [r4, r2]
    6718:	2d00      	cmp	r5, #0
    671a:	d00d      	beq.n	6738 <__sfp+0x4c>
    671c:	3468      	adds	r4, #104	; 0x68
    671e:	e7f2      	b.n	6706 <__sfp+0x1a>
    6720:	2104      	movs	r1, #4
    6722:	0038      	movs	r0, r7
    6724:	f7ff ff98 	bl	6658 <__sfmoreglue>
    6728:	6030      	str	r0, [r6, #0]
    672a:	2800      	cmp	r0, #0
    672c:	d1f0      	bne.n	6710 <__sfp+0x24>
    672e:	230c      	movs	r3, #12
    6730:	0004      	movs	r4, r0
    6732:	603b      	str	r3, [r7, #0]
    6734:	0020      	movs	r0, r4
    6736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6738:	2301      	movs	r3, #1
    673a:	0020      	movs	r0, r4
    673c:	425b      	negs	r3, r3
    673e:	81e3      	strh	r3, [r4, #14]
    6740:	3302      	adds	r3, #2
    6742:	81a3      	strh	r3, [r4, #12]
    6744:	6665      	str	r5, [r4, #100]	; 0x64
    6746:	6025      	str	r5, [r4, #0]
    6748:	60a5      	str	r5, [r4, #8]
    674a:	6065      	str	r5, [r4, #4]
    674c:	6125      	str	r5, [r4, #16]
    674e:	6165      	str	r5, [r4, #20]
    6750:	61a5      	str	r5, [r4, #24]
    6752:	2208      	movs	r2, #8
    6754:	0029      	movs	r1, r5
    6756:	305c      	adds	r0, #92	; 0x5c
    6758:	f7ff f99c 	bl	5a94 <memset>
    675c:	6365      	str	r5, [r4, #52]	; 0x34
    675e:	63a5      	str	r5, [r4, #56]	; 0x38
    6760:	64a5      	str	r5, [r4, #72]	; 0x48
    6762:	64e5      	str	r5, [r4, #76]	; 0x4c
    6764:	e7e6      	b.n	6734 <__sfp+0x48>
    6766:	46c0      	nop			; (mov r8, r8)
    6768:	000075a4 	.word	0x000075a4

0000676c <_fwalk_reent>:
    676c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    676e:	0004      	movs	r4, r0
    6770:	0007      	movs	r7, r0
    6772:	2600      	movs	r6, #0
    6774:	9101      	str	r1, [sp, #4]
    6776:	3448      	adds	r4, #72	; 0x48
    6778:	2c00      	cmp	r4, #0
    677a:	d101      	bne.n	6780 <_fwalk_reent+0x14>
    677c:	0030      	movs	r0, r6
    677e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6780:	6863      	ldr	r3, [r4, #4]
    6782:	68a5      	ldr	r5, [r4, #8]
    6784:	9300      	str	r3, [sp, #0]
    6786:	9b00      	ldr	r3, [sp, #0]
    6788:	3b01      	subs	r3, #1
    678a:	9300      	str	r3, [sp, #0]
    678c:	d501      	bpl.n	6792 <_fwalk_reent+0x26>
    678e:	6824      	ldr	r4, [r4, #0]
    6790:	e7f2      	b.n	6778 <_fwalk_reent+0xc>
    6792:	89ab      	ldrh	r3, [r5, #12]
    6794:	2b01      	cmp	r3, #1
    6796:	d908      	bls.n	67aa <_fwalk_reent+0x3e>
    6798:	220e      	movs	r2, #14
    679a:	5eab      	ldrsh	r3, [r5, r2]
    679c:	3301      	adds	r3, #1
    679e:	d004      	beq.n	67aa <_fwalk_reent+0x3e>
    67a0:	0029      	movs	r1, r5
    67a2:	0038      	movs	r0, r7
    67a4:	9b01      	ldr	r3, [sp, #4]
    67a6:	4798      	blx	r3
    67a8:	4306      	orrs	r6, r0
    67aa:	3568      	adds	r5, #104	; 0x68
    67ac:	e7eb      	b.n	6786 <_fwalk_reent+0x1a>
	...

000067b0 <__swhatbuf_r>:
    67b0:	b570      	push	{r4, r5, r6, lr}
    67b2:	000e      	movs	r6, r1
    67b4:	001d      	movs	r5, r3
    67b6:	230e      	movs	r3, #14
    67b8:	5ec9      	ldrsh	r1, [r1, r3]
    67ba:	b090      	sub	sp, #64	; 0x40
    67bc:	0014      	movs	r4, r2
    67be:	2900      	cmp	r1, #0
    67c0:	da07      	bge.n	67d2 <__swhatbuf_r+0x22>
    67c2:	2300      	movs	r3, #0
    67c4:	602b      	str	r3, [r5, #0]
    67c6:	89b3      	ldrh	r3, [r6, #12]
    67c8:	061b      	lsls	r3, r3, #24
    67ca:	d411      	bmi.n	67f0 <__swhatbuf_r+0x40>
    67cc:	2380      	movs	r3, #128	; 0x80
    67ce:	00db      	lsls	r3, r3, #3
    67d0:	e00f      	b.n	67f2 <__swhatbuf_r+0x42>
    67d2:	aa01      	add	r2, sp, #4
    67d4:	f000 f99a 	bl	6b0c <_fstat_r>
    67d8:	2800      	cmp	r0, #0
    67da:	dbf2      	blt.n	67c2 <__swhatbuf_r+0x12>
    67dc:	22f0      	movs	r2, #240	; 0xf0
    67de:	9b02      	ldr	r3, [sp, #8]
    67e0:	0212      	lsls	r2, r2, #8
    67e2:	4013      	ands	r3, r2
    67e4:	4a05      	ldr	r2, [pc, #20]	; (67fc <__swhatbuf_r+0x4c>)
    67e6:	189b      	adds	r3, r3, r2
    67e8:	425a      	negs	r2, r3
    67ea:	4153      	adcs	r3, r2
    67ec:	602b      	str	r3, [r5, #0]
    67ee:	e7ed      	b.n	67cc <__swhatbuf_r+0x1c>
    67f0:	2340      	movs	r3, #64	; 0x40
    67f2:	2000      	movs	r0, #0
    67f4:	6023      	str	r3, [r4, #0]
    67f6:	b010      	add	sp, #64	; 0x40
    67f8:	bd70      	pop	{r4, r5, r6, pc}
    67fa:	46c0      	nop			; (mov r8, r8)
    67fc:	ffffe000 	.word	0xffffe000

00006800 <__smakebuf_r>:
    6800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6802:	2602      	movs	r6, #2
    6804:	898b      	ldrh	r3, [r1, #12]
    6806:	0005      	movs	r5, r0
    6808:	000c      	movs	r4, r1
    680a:	4233      	tst	r3, r6
    680c:	d006      	beq.n	681c <__smakebuf_r+0x1c>
    680e:	0023      	movs	r3, r4
    6810:	3347      	adds	r3, #71	; 0x47
    6812:	6023      	str	r3, [r4, #0]
    6814:	6123      	str	r3, [r4, #16]
    6816:	2301      	movs	r3, #1
    6818:	6163      	str	r3, [r4, #20]
    681a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    681c:	ab01      	add	r3, sp, #4
    681e:	466a      	mov	r2, sp
    6820:	f7ff ffc6 	bl	67b0 <__swhatbuf_r>
    6824:	9900      	ldr	r1, [sp, #0]
    6826:	0007      	movs	r7, r0
    6828:	0028      	movs	r0, r5
    682a:	f000 f88d 	bl	6948 <_malloc_r>
    682e:	2800      	cmp	r0, #0
    6830:	d108      	bne.n	6844 <__smakebuf_r+0x44>
    6832:	220c      	movs	r2, #12
    6834:	5ea3      	ldrsh	r3, [r4, r2]
    6836:	059a      	lsls	r2, r3, #22
    6838:	d4ef      	bmi.n	681a <__smakebuf_r+0x1a>
    683a:	2203      	movs	r2, #3
    683c:	4393      	bics	r3, r2
    683e:	431e      	orrs	r6, r3
    6840:	81a6      	strh	r6, [r4, #12]
    6842:	e7e4      	b.n	680e <__smakebuf_r+0xe>
    6844:	4b0f      	ldr	r3, [pc, #60]	; (6884 <__smakebuf_r+0x84>)
    6846:	62ab      	str	r3, [r5, #40]	; 0x28
    6848:	2380      	movs	r3, #128	; 0x80
    684a:	89a2      	ldrh	r2, [r4, #12]
    684c:	6020      	str	r0, [r4, #0]
    684e:	4313      	orrs	r3, r2
    6850:	81a3      	strh	r3, [r4, #12]
    6852:	9b00      	ldr	r3, [sp, #0]
    6854:	6120      	str	r0, [r4, #16]
    6856:	6163      	str	r3, [r4, #20]
    6858:	9b01      	ldr	r3, [sp, #4]
    685a:	2b00      	cmp	r3, #0
    685c:	d00d      	beq.n	687a <__smakebuf_r+0x7a>
    685e:	230e      	movs	r3, #14
    6860:	5ee1      	ldrsh	r1, [r4, r3]
    6862:	0028      	movs	r0, r5
    6864:	f000 f964 	bl	6b30 <_isatty_r>
    6868:	2800      	cmp	r0, #0
    686a:	d006      	beq.n	687a <__smakebuf_r+0x7a>
    686c:	2203      	movs	r2, #3
    686e:	89a3      	ldrh	r3, [r4, #12]
    6870:	4393      	bics	r3, r2
    6872:	001a      	movs	r2, r3
    6874:	2301      	movs	r3, #1
    6876:	4313      	orrs	r3, r2
    6878:	81a3      	strh	r3, [r4, #12]
    687a:	89a0      	ldrh	r0, [r4, #12]
    687c:	4338      	orrs	r0, r7
    687e:	81a0      	strh	r0, [r4, #12]
    6880:	e7cb      	b.n	681a <__smakebuf_r+0x1a>
    6882:	46c0      	nop			; (mov r8, r8)
    6884:	00006601 	.word	0x00006601

00006888 <malloc>:
    6888:	b510      	push	{r4, lr}
    688a:	4b03      	ldr	r3, [pc, #12]	; (6898 <malloc+0x10>)
    688c:	0001      	movs	r1, r0
    688e:	6818      	ldr	r0, [r3, #0]
    6890:	f000 f85a 	bl	6948 <_malloc_r>
    6894:	bd10      	pop	{r4, pc}
    6896:	46c0      	nop			; (mov r8, r8)
    6898:	20000034 	.word	0x20000034

0000689c <memchr>:
    689c:	b2c9      	uxtb	r1, r1
    689e:	1882      	adds	r2, r0, r2
    68a0:	4290      	cmp	r0, r2
    68a2:	d101      	bne.n	68a8 <memchr+0xc>
    68a4:	2000      	movs	r0, #0
    68a6:	4770      	bx	lr
    68a8:	7803      	ldrb	r3, [r0, #0]
    68aa:	428b      	cmp	r3, r1
    68ac:	d0fb      	beq.n	68a6 <memchr+0xa>
    68ae:	3001      	adds	r0, #1
    68b0:	e7f6      	b.n	68a0 <memchr+0x4>
	...

000068b4 <_free_r>:
    68b4:	b570      	push	{r4, r5, r6, lr}
    68b6:	0005      	movs	r5, r0
    68b8:	2900      	cmp	r1, #0
    68ba:	d010      	beq.n	68de <_free_r+0x2a>
    68bc:	1f0c      	subs	r4, r1, #4
    68be:	6823      	ldr	r3, [r4, #0]
    68c0:	2b00      	cmp	r3, #0
    68c2:	da00      	bge.n	68c6 <_free_r+0x12>
    68c4:	18e4      	adds	r4, r4, r3
    68c6:	0028      	movs	r0, r5
    68c8:	f000 f958 	bl	6b7c <__malloc_lock>
    68cc:	4a1d      	ldr	r2, [pc, #116]	; (6944 <_free_r+0x90>)
    68ce:	6813      	ldr	r3, [r2, #0]
    68d0:	2b00      	cmp	r3, #0
    68d2:	d105      	bne.n	68e0 <_free_r+0x2c>
    68d4:	6063      	str	r3, [r4, #4]
    68d6:	6014      	str	r4, [r2, #0]
    68d8:	0028      	movs	r0, r5
    68da:	f000 f950 	bl	6b7e <__malloc_unlock>
    68de:	bd70      	pop	{r4, r5, r6, pc}
    68e0:	42a3      	cmp	r3, r4
    68e2:	d909      	bls.n	68f8 <_free_r+0x44>
    68e4:	6821      	ldr	r1, [r4, #0]
    68e6:	1860      	adds	r0, r4, r1
    68e8:	4283      	cmp	r3, r0
    68ea:	d1f3      	bne.n	68d4 <_free_r+0x20>
    68ec:	6818      	ldr	r0, [r3, #0]
    68ee:	685b      	ldr	r3, [r3, #4]
    68f0:	1841      	adds	r1, r0, r1
    68f2:	6021      	str	r1, [r4, #0]
    68f4:	e7ee      	b.n	68d4 <_free_r+0x20>
    68f6:	0013      	movs	r3, r2
    68f8:	685a      	ldr	r2, [r3, #4]
    68fa:	2a00      	cmp	r2, #0
    68fc:	d001      	beq.n	6902 <_free_r+0x4e>
    68fe:	42a2      	cmp	r2, r4
    6900:	d9f9      	bls.n	68f6 <_free_r+0x42>
    6902:	6819      	ldr	r1, [r3, #0]
    6904:	1858      	adds	r0, r3, r1
    6906:	42a0      	cmp	r0, r4
    6908:	d10b      	bne.n	6922 <_free_r+0x6e>
    690a:	6820      	ldr	r0, [r4, #0]
    690c:	1809      	adds	r1, r1, r0
    690e:	1858      	adds	r0, r3, r1
    6910:	6019      	str	r1, [r3, #0]
    6912:	4282      	cmp	r2, r0
    6914:	d1e0      	bne.n	68d8 <_free_r+0x24>
    6916:	6810      	ldr	r0, [r2, #0]
    6918:	6852      	ldr	r2, [r2, #4]
    691a:	1841      	adds	r1, r0, r1
    691c:	6019      	str	r1, [r3, #0]
    691e:	605a      	str	r2, [r3, #4]
    6920:	e7da      	b.n	68d8 <_free_r+0x24>
    6922:	42a0      	cmp	r0, r4
    6924:	d902      	bls.n	692c <_free_r+0x78>
    6926:	230c      	movs	r3, #12
    6928:	602b      	str	r3, [r5, #0]
    692a:	e7d5      	b.n	68d8 <_free_r+0x24>
    692c:	6821      	ldr	r1, [r4, #0]
    692e:	1860      	adds	r0, r4, r1
    6930:	4282      	cmp	r2, r0
    6932:	d103      	bne.n	693c <_free_r+0x88>
    6934:	6810      	ldr	r0, [r2, #0]
    6936:	6852      	ldr	r2, [r2, #4]
    6938:	1841      	adds	r1, r0, r1
    693a:	6021      	str	r1, [r4, #0]
    693c:	6062      	str	r2, [r4, #4]
    693e:	605c      	str	r4, [r3, #4]
    6940:	e7ca      	b.n	68d8 <_free_r+0x24>
    6942:	46c0      	nop			; (mov r8, r8)
    6944:	200009b4 	.word	0x200009b4

00006948 <_malloc_r>:
    6948:	2303      	movs	r3, #3
    694a:	b570      	push	{r4, r5, r6, lr}
    694c:	1ccd      	adds	r5, r1, #3
    694e:	439d      	bics	r5, r3
    6950:	3508      	adds	r5, #8
    6952:	0006      	movs	r6, r0
    6954:	2d0c      	cmp	r5, #12
    6956:	d21e      	bcs.n	6996 <_malloc_r+0x4e>
    6958:	250c      	movs	r5, #12
    695a:	42a9      	cmp	r1, r5
    695c:	d81d      	bhi.n	699a <_malloc_r+0x52>
    695e:	0030      	movs	r0, r6
    6960:	f000 f90c 	bl	6b7c <__malloc_lock>
    6964:	4a25      	ldr	r2, [pc, #148]	; (69fc <_malloc_r+0xb4>)
    6966:	6814      	ldr	r4, [r2, #0]
    6968:	0021      	movs	r1, r4
    696a:	2900      	cmp	r1, #0
    696c:	d119      	bne.n	69a2 <_malloc_r+0x5a>
    696e:	4c24      	ldr	r4, [pc, #144]	; (6a00 <_malloc_r+0xb8>)
    6970:	6823      	ldr	r3, [r4, #0]
    6972:	2b00      	cmp	r3, #0
    6974:	d103      	bne.n	697e <_malloc_r+0x36>
    6976:	0030      	movs	r0, r6
    6978:	f000 f844 	bl	6a04 <_sbrk_r>
    697c:	6020      	str	r0, [r4, #0]
    697e:	0029      	movs	r1, r5
    6980:	0030      	movs	r0, r6
    6982:	f000 f83f 	bl	6a04 <_sbrk_r>
    6986:	1c43      	adds	r3, r0, #1
    6988:	d12c      	bne.n	69e4 <_malloc_r+0x9c>
    698a:	230c      	movs	r3, #12
    698c:	0030      	movs	r0, r6
    698e:	6033      	str	r3, [r6, #0]
    6990:	f000 f8f5 	bl	6b7e <__malloc_unlock>
    6994:	e003      	b.n	699e <_malloc_r+0x56>
    6996:	2d00      	cmp	r5, #0
    6998:	dadf      	bge.n	695a <_malloc_r+0x12>
    699a:	230c      	movs	r3, #12
    699c:	6033      	str	r3, [r6, #0]
    699e:	2000      	movs	r0, #0
    69a0:	bd70      	pop	{r4, r5, r6, pc}
    69a2:	680b      	ldr	r3, [r1, #0]
    69a4:	1b5b      	subs	r3, r3, r5
    69a6:	d41a      	bmi.n	69de <_malloc_r+0x96>
    69a8:	2b0b      	cmp	r3, #11
    69aa:	d903      	bls.n	69b4 <_malloc_r+0x6c>
    69ac:	600b      	str	r3, [r1, #0]
    69ae:	18cc      	adds	r4, r1, r3
    69b0:	6025      	str	r5, [r4, #0]
    69b2:	e003      	b.n	69bc <_malloc_r+0x74>
    69b4:	428c      	cmp	r4, r1
    69b6:	d10e      	bne.n	69d6 <_malloc_r+0x8e>
    69b8:	6863      	ldr	r3, [r4, #4]
    69ba:	6013      	str	r3, [r2, #0]
    69bc:	0030      	movs	r0, r6
    69be:	f000 f8de 	bl	6b7e <__malloc_unlock>
    69c2:	0020      	movs	r0, r4
    69c4:	2207      	movs	r2, #7
    69c6:	300b      	adds	r0, #11
    69c8:	1d23      	adds	r3, r4, #4
    69ca:	4390      	bics	r0, r2
    69cc:	1ac3      	subs	r3, r0, r3
    69ce:	d0e7      	beq.n	69a0 <_malloc_r+0x58>
    69d0:	425a      	negs	r2, r3
    69d2:	50e2      	str	r2, [r4, r3]
    69d4:	e7e4      	b.n	69a0 <_malloc_r+0x58>
    69d6:	684b      	ldr	r3, [r1, #4]
    69d8:	6063      	str	r3, [r4, #4]
    69da:	000c      	movs	r4, r1
    69dc:	e7ee      	b.n	69bc <_malloc_r+0x74>
    69de:	000c      	movs	r4, r1
    69e0:	6849      	ldr	r1, [r1, #4]
    69e2:	e7c2      	b.n	696a <_malloc_r+0x22>
    69e4:	2303      	movs	r3, #3
    69e6:	1cc4      	adds	r4, r0, #3
    69e8:	439c      	bics	r4, r3
    69ea:	42a0      	cmp	r0, r4
    69ec:	d0e0      	beq.n	69b0 <_malloc_r+0x68>
    69ee:	1a21      	subs	r1, r4, r0
    69f0:	0030      	movs	r0, r6
    69f2:	f000 f807 	bl	6a04 <_sbrk_r>
    69f6:	1c43      	adds	r3, r0, #1
    69f8:	d1da      	bne.n	69b0 <_malloc_r+0x68>
    69fa:	e7c6      	b.n	698a <_malloc_r+0x42>
    69fc:	200009b4 	.word	0x200009b4
    6a00:	200009b8 	.word	0x200009b8

00006a04 <_sbrk_r>:
    6a04:	2300      	movs	r3, #0
    6a06:	b570      	push	{r4, r5, r6, lr}
    6a08:	4c06      	ldr	r4, [pc, #24]	; (6a24 <_sbrk_r+0x20>)
    6a0a:	0005      	movs	r5, r0
    6a0c:	0008      	movs	r0, r1
    6a0e:	6023      	str	r3, [r4, #0]
    6a10:	f7fe fa96 	bl	4f40 <_sbrk>
    6a14:	1c43      	adds	r3, r0, #1
    6a16:	d103      	bne.n	6a20 <_sbrk_r+0x1c>
    6a18:	6823      	ldr	r3, [r4, #0]
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	d000      	beq.n	6a20 <_sbrk_r+0x1c>
    6a1e:	602b      	str	r3, [r5, #0]
    6a20:	bd70      	pop	{r4, r5, r6, pc}
    6a22:	46c0      	nop			; (mov r8, r8)
    6a24:	20000a18 	.word	0x20000a18

00006a28 <__sread>:
    6a28:	b570      	push	{r4, r5, r6, lr}
    6a2a:	000c      	movs	r4, r1
    6a2c:	250e      	movs	r5, #14
    6a2e:	5f49      	ldrsh	r1, [r1, r5]
    6a30:	f000 f8a6 	bl	6b80 <_read_r>
    6a34:	2800      	cmp	r0, #0
    6a36:	db03      	blt.n	6a40 <__sread+0x18>
    6a38:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6a3a:	181b      	adds	r3, r3, r0
    6a3c:	6563      	str	r3, [r4, #84]	; 0x54
    6a3e:	bd70      	pop	{r4, r5, r6, pc}
    6a40:	89a3      	ldrh	r3, [r4, #12]
    6a42:	4a02      	ldr	r2, [pc, #8]	; (6a4c <__sread+0x24>)
    6a44:	4013      	ands	r3, r2
    6a46:	81a3      	strh	r3, [r4, #12]
    6a48:	e7f9      	b.n	6a3e <__sread+0x16>
    6a4a:	46c0      	nop			; (mov r8, r8)
    6a4c:	ffffefff 	.word	0xffffefff

00006a50 <__swrite>:
    6a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a52:	001f      	movs	r7, r3
    6a54:	898b      	ldrh	r3, [r1, #12]
    6a56:	0005      	movs	r5, r0
    6a58:	000c      	movs	r4, r1
    6a5a:	0016      	movs	r6, r2
    6a5c:	05db      	lsls	r3, r3, #23
    6a5e:	d505      	bpl.n	6a6c <__swrite+0x1c>
    6a60:	230e      	movs	r3, #14
    6a62:	5ec9      	ldrsh	r1, [r1, r3]
    6a64:	2200      	movs	r2, #0
    6a66:	2302      	movs	r3, #2
    6a68:	f000 f874 	bl	6b54 <_lseek_r>
    6a6c:	89a3      	ldrh	r3, [r4, #12]
    6a6e:	4a05      	ldr	r2, [pc, #20]	; (6a84 <__swrite+0x34>)
    6a70:	0028      	movs	r0, r5
    6a72:	4013      	ands	r3, r2
    6a74:	81a3      	strh	r3, [r4, #12]
    6a76:	0032      	movs	r2, r6
    6a78:	230e      	movs	r3, #14
    6a7a:	5ee1      	ldrsh	r1, [r4, r3]
    6a7c:	003b      	movs	r3, r7
    6a7e:	f000 f81f 	bl	6ac0 <_write_r>
    6a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a84:	ffffefff 	.word	0xffffefff

00006a88 <__sseek>:
    6a88:	b570      	push	{r4, r5, r6, lr}
    6a8a:	000c      	movs	r4, r1
    6a8c:	250e      	movs	r5, #14
    6a8e:	5f49      	ldrsh	r1, [r1, r5]
    6a90:	f000 f860 	bl	6b54 <_lseek_r>
    6a94:	89a3      	ldrh	r3, [r4, #12]
    6a96:	1c42      	adds	r2, r0, #1
    6a98:	d103      	bne.n	6aa2 <__sseek+0x1a>
    6a9a:	4a05      	ldr	r2, [pc, #20]	; (6ab0 <__sseek+0x28>)
    6a9c:	4013      	ands	r3, r2
    6a9e:	81a3      	strh	r3, [r4, #12]
    6aa0:	bd70      	pop	{r4, r5, r6, pc}
    6aa2:	2280      	movs	r2, #128	; 0x80
    6aa4:	0152      	lsls	r2, r2, #5
    6aa6:	4313      	orrs	r3, r2
    6aa8:	81a3      	strh	r3, [r4, #12]
    6aaa:	6560      	str	r0, [r4, #84]	; 0x54
    6aac:	e7f8      	b.n	6aa0 <__sseek+0x18>
    6aae:	46c0      	nop			; (mov r8, r8)
    6ab0:	ffffefff 	.word	0xffffefff

00006ab4 <__sclose>:
    6ab4:	b510      	push	{r4, lr}
    6ab6:	230e      	movs	r3, #14
    6ab8:	5ec9      	ldrsh	r1, [r1, r3]
    6aba:	f000 f815 	bl	6ae8 <_close_r>
    6abe:	bd10      	pop	{r4, pc}

00006ac0 <_write_r>:
    6ac0:	b570      	push	{r4, r5, r6, lr}
    6ac2:	0005      	movs	r5, r0
    6ac4:	0008      	movs	r0, r1
    6ac6:	0011      	movs	r1, r2
    6ac8:	2200      	movs	r2, #0
    6aca:	4c06      	ldr	r4, [pc, #24]	; (6ae4 <_write_r+0x24>)
    6acc:	6022      	str	r2, [r4, #0]
    6ace:	001a      	movs	r2, r3
    6ad0:	f7fe fa0e 	bl	4ef0 <_write>
    6ad4:	1c43      	adds	r3, r0, #1
    6ad6:	d103      	bne.n	6ae0 <_write_r+0x20>
    6ad8:	6823      	ldr	r3, [r4, #0]
    6ada:	2b00      	cmp	r3, #0
    6adc:	d000      	beq.n	6ae0 <_write_r+0x20>
    6ade:	602b      	str	r3, [r5, #0]
    6ae0:	bd70      	pop	{r4, r5, r6, pc}
    6ae2:	46c0      	nop			; (mov r8, r8)
    6ae4:	20000a18 	.word	0x20000a18

00006ae8 <_close_r>:
    6ae8:	2300      	movs	r3, #0
    6aea:	b570      	push	{r4, r5, r6, lr}
    6aec:	4c06      	ldr	r4, [pc, #24]	; (6b08 <_close_r+0x20>)
    6aee:	0005      	movs	r5, r0
    6af0:	0008      	movs	r0, r1
    6af2:	6023      	str	r3, [r4, #0]
    6af4:	f7fe fa36 	bl	4f64 <_close>
    6af8:	1c43      	adds	r3, r0, #1
    6afa:	d103      	bne.n	6b04 <_close_r+0x1c>
    6afc:	6823      	ldr	r3, [r4, #0]
    6afe:	2b00      	cmp	r3, #0
    6b00:	d000      	beq.n	6b04 <_close_r+0x1c>
    6b02:	602b      	str	r3, [r5, #0]
    6b04:	bd70      	pop	{r4, r5, r6, pc}
    6b06:	46c0      	nop			; (mov r8, r8)
    6b08:	20000a18 	.word	0x20000a18

00006b0c <_fstat_r>:
    6b0c:	2300      	movs	r3, #0
    6b0e:	b570      	push	{r4, r5, r6, lr}
    6b10:	4c06      	ldr	r4, [pc, #24]	; (6b2c <_fstat_r+0x20>)
    6b12:	0005      	movs	r5, r0
    6b14:	0008      	movs	r0, r1
    6b16:	0011      	movs	r1, r2
    6b18:	6023      	str	r3, [r4, #0]
    6b1a:	f7fe fa26 	bl	4f6a <_fstat>
    6b1e:	1c43      	adds	r3, r0, #1
    6b20:	d103      	bne.n	6b2a <_fstat_r+0x1e>
    6b22:	6823      	ldr	r3, [r4, #0]
    6b24:	2b00      	cmp	r3, #0
    6b26:	d000      	beq.n	6b2a <_fstat_r+0x1e>
    6b28:	602b      	str	r3, [r5, #0]
    6b2a:	bd70      	pop	{r4, r5, r6, pc}
    6b2c:	20000a18 	.word	0x20000a18

00006b30 <_isatty_r>:
    6b30:	2300      	movs	r3, #0
    6b32:	b570      	push	{r4, r5, r6, lr}
    6b34:	4c06      	ldr	r4, [pc, #24]	; (6b50 <_isatty_r+0x20>)
    6b36:	0005      	movs	r5, r0
    6b38:	0008      	movs	r0, r1
    6b3a:	6023      	str	r3, [r4, #0]
    6b3c:	f7fe fa1a 	bl	4f74 <_isatty>
    6b40:	1c43      	adds	r3, r0, #1
    6b42:	d103      	bne.n	6b4c <_isatty_r+0x1c>
    6b44:	6823      	ldr	r3, [r4, #0]
    6b46:	2b00      	cmp	r3, #0
    6b48:	d000      	beq.n	6b4c <_isatty_r+0x1c>
    6b4a:	602b      	str	r3, [r5, #0]
    6b4c:	bd70      	pop	{r4, r5, r6, pc}
    6b4e:	46c0      	nop			; (mov r8, r8)
    6b50:	20000a18 	.word	0x20000a18

00006b54 <_lseek_r>:
    6b54:	b570      	push	{r4, r5, r6, lr}
    6b56:	0005      	movs	r5, r0
    6b58:	0008      	movs	r0, r1
    6b5a:	0011      	movs	r1, r2
    6b5c:	2200      	movs	r2, #0
    6b5e:	4c06      	ldr	r4, [pc, #24]	; (6b78 <_lseek_r+0x24>)
    6b60:	6022      	str	r2, [r4, #0]
    6b62:	001a      	movs	r2, r3
    6b64:	f7fe fa08 	bl	4f78 <_lseek>
    6b68:	1c43      	adds	r3, r0, #1
    6b6a:	d103      	bne.n	6b74 <_lseek_r+0x20>
    6b6c:	6823      	ldr	r3, [r4, #0]
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d000      	beq.n	6b74 <_lseek_r+0x20>
    6b72:	602b      	str	r3, [r5, #0]
    6b74:	bd70      	pop	{r4, r5, r6, pc}
    6b76:	46c0      	nop			; (mov r8, r8)
    6b78:	20000a18 	.word	0x20000a18

00006b7c <__malloc_lock>:
    6b7c:	4770      	bx	lr

00006b7e <__malloc_unlock>:
    6b7e:	4770      	bx	lr

00006b80 <_read_r>:
    6b80:	b570      	push	{r4, r5, r6, lr}
    6b82:	0005      	movs	r5, r0
    6b84:	0008      	movs	r0, r1
    6b86:	0011      	movs	r1, r2
    6b88:	2200      	movs	r2, #0
    6b8a:	4c06      	ldr	r4, [pc, #24]	; (6ba4 <_read_r+0x24>)
    6b8c:	6022      	str	r2, [r4, #0]
    6b8e:	001a      	movs	r2, r3
    6b90:	f7fe f98c 	bl	4eac <_read>
    6b94:	1c43      	adds	r3, r0, #1
    6b96:	d103      	bne.n	6ba0 <_read_r+0x20>
    6b98:	6823      	ldr	r3, [r4, #0]
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d000      	beq.n	6ba0 <_read_r+0x20>
    6b9e:	602b      	str	r3, [r5, #0]
    6ba0:	bd70      	pop	{r4, r5, r6, pc}
    6ba2:	46c0      	nop			; (mov r8, r8)
    6ba4:	20000a18 	.word	0x20000a18

00006ba8 <mmc_trans_multipliers>:
    6ba8:	00000000 0000000a 0000000c 0000000d     ................
    6bb8:	0000000f 00000014 0000001a 0000001e     ................
    6bc8:	00000023 00000028 0000002d 00000034     #...(...-...4...
    6bd8:	00000037 0000003c 00000046 00000050     7...<...F...P...
    6be8:	732f2e2e 412f6372 632f4653 6f6d6d6f     ../src/ASF/commo
    6bf8:	632f326e 6f706d6f 746e656e 656d2f73     n2/components/me
    6c08:	79726f6d 5f64732f 2f636d6d 6d5f6473     mory/sd_mmc/sd_m
    6c18:	632e636d 00000000 6d5f6473 6e5f636d     mc.c....sd_mmc_n
    6c28:	6c625f62 5f6b636f 616d6572 6e696e69     b_block_remainin
    6c38:	3d3d2067 00003020 65737341 6f697472     g == 0..Assertio
    6c48:	6166206e 64656c69 7325203a 00000000     n failed: %s....
    6c58:	65737341 6f697472 2527206e 66202773     Assertion '%s' f
    6c68:	656c6961 74612064 3a732520 0a0d6425     ailed at %s:%d..
    6c78:	00000000 732f2e2e 412f6372 732f4653     ....../src/ASF/s
    6c88:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
    6c98:	702f6d65 756d6e69 69702f78 78756d6e     em/pinmux/pinmux
    6ca8:	0000682e 736c6166 00000065 6d5f6473     .h..false...sd_m
    6cb8:	6e5f636d 6c625f62 5f6b636f 616d6572     mc_nb_block_rema
    6cc8:	6e696e69 3d3e2067 5f626e20 636f6c62     ining >= nb_bloc
    6cd8:	0000006b                                k...

00006cdc <sd_mmc_trans_units>:
    6cdc:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00006cf8 <sd_trans_multipliers>:
    6cf8:	00000000 0000000a 0000000c 0000000d     ................
    6d08:	0000000f 00000014 00000019 0000001e     ................
    6d18:	00000023 00000028 0000002d 00000032     #...(...-...2...
    6d28:	00000037 0000003c 00000046 00000050     7...<...F...P...
    6d38:	20646d63 44532026 5f434d4d 50534552     cmd & SDMMC_RESP
    6d48:	4552505f 544e4553 00000000 732f2e2e     _PRESENT....../s
    6d58:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
    6d68:	2f737265 63726573 732f6d6f 732f6970     ers/sercom/spi/s
    6d78:	682e6970 00000000 75646f6d 3e2d656c     pi.h....module->
    6d88:	00007768 6d5f6473 735f636d 6e5f6970     hw..sd_mmc_spi_n
    6d98:	6c625f62 206b636f 7328203e 6d6d5f64     b_block > (sd_mm
    6da8:	70735f63 72745f69 66736e61 5f747265     c_spi_transfert_
    6db8:	20736f70 6473202f 636d6d5f 6970735f     pos / sd_mmc_spi
    6dc8:	6f6c625f 735f6b63 29657a69 00000000     _block_size)....
    6dd8:	5f495053 454b4f54 41445f4e 455f4154     SPI_TOKEN_DATA_E
    6de8:	524f5252 5252455f 2053524f 6f742026     RROR_ERRORS & to
    6df8:	006e656b 732f2e2e 412f6372 632f4653     ken.../src/ASF/c
    6e08:	6f6d6d6f 632f326e 6f706d6f 746e656e     ommon2/component
    6e18:	656d2f73 79726f6d 5f64732f 2f636d6d     s/memory/sd_mmc/
    6e28:	6d5f6473 735f636d 632e6970 00000000     sd_mmc_spi.c....
    6e38:	64732821 636d6d5f 6970735f 6172745f     !(sd_mmc_spi_tra
    6e48:	6566736e 705f7472 2520736f 5f647320     nsfert_pos % sd_
    6e58:	5f636d6d 5f697073 636f6c62 69735f6b     mmc_spi_block_si
    6e68:	0029657a 732f2e2e 412f6372 632f4653     ze).../src/ASF/c
    6e78:	6f6d6d6f 74752f6e 2f736c69 65746e69     ommon/utils/inte
    6e88:	70757272 6e692f74 72726574 5f747075     rrupt/interrupt_
    6e98:	5f6d6173 6369766e 0000632e 5f757063     sam_nvic.c..cpu_
    6ea8:	5f717269 74697263 6c616369 6365735f     irq_critical_sec
    6eb8:	6e6f6974 756f635f 7265746e 30203e20     tion_counter > 0
    6ec8:	00000000 74736554 73252720 61662027     ....Test '%s' fa
    6ed8:	64656c69 20746120 253a7325 0a0d3a75     iled at %s:%u:..
    6ee8:	00000009 6e6e7552 20676e69 74736574     ....Running test
    6ef8:	69757320 27206574 2e277325 0a0d2e2e      suite '%s'.....
    6f08:	00000000 6e6e7552 20676e69 74736574     ....Running test
    6f18:	7325203a 00000a0d 74746553 20676e69     : %s....Setting 
    6f28:	66207075 75747869 000d6572 75746573     up fixture..setu
    6f38:	00000070 74736554 73252720 61662027     p...Test '%s' fa
    6f48:	64656c69 72756420 20676e69 27732527     iled during '%s'
    6f58:	6425203a 00000a0d 74736574 00000000     : %d....test....
    6f68:	61656c43 676e696e 20707520 74786966     Cleaning up fixt
    6f78:	0d657275 00000000 61656c63 0070756e     ure.....cleanup.
    6f88:	74736554 69757320 27206574 20277325     Test suite '%s' 
    6f98:	706d6f63 6574656c 7525203a 73657420     complete: %u tes
    6fa8:	202c7374 66207525 756c6961 2c736572     ts, %u failures,
    6fb8:	20752520 6f727265 0a0d7372 00000a0d      %u errors......
    6fc8:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
    6fd8:	76697264 2f737265 74726f70 726f702f     drivers/port/por
    6fe8:	00632e74 666e6f63 00006769 42000800     t.c.config.....B
    6ff8:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    7008:	42001c00 732f2e2e 412f6372 732f4653     ...B../src/ASF/s
    7018:	2f306d61 76697264 2f737265 63726573     am0/drivers/serc
    7028:	732f6d6f 6f637265 00632e6d 732f2e2e     om/sercom.c.../s
    7038:	412f6372 732f4653 2f306d61 76697264     rc/ASF/sam0/driv
    7048:	2f737265 63726573 732f6d6f 6f637265     ers/sercom/serco
    7058:	6e695f6d 72726574 2e747075 00000063     m_interrupt.c...
    7068:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
    7078:	76697264 2f737265 63726573 732f6d6f     drivers/sercom/s
    7088:	732f6970 632e6970 00000000 75646f6d     pi/spi.c....modu
    7098:	0000656c 76616c73 00000065 64756162     le..slave...baud
    70a8:	65746172 00000000 732f2e2e 412f6372     rate....../src/A
    70b8:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
    70c8:	63726573 752f6d6f 74726173 6173752f     sercom/usart/usa
    70d8:	632e7472 00000000 732f2e2e 412f6372     rt.c....../src/A
    70e8:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
    70f8:	63726573 752f6d6f 74726173 6173752f     sercom/usart/usa
    7108:	682e7472 00000000 732f2e2e 412f6372     rt.h....../src/A
    7118:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
    7128:	63726573 752f6d6f 74726173 6173752f     sercom/usart/usa
    7138:	695f7472 7265746e 74707572 0000632e     rt_interrupt.c..
    7148:	645f7874 00617461 0000440a 00004406     tx_data..D...D..
    7158:	00004406 00004468 00004468 0000441e     .D..hD..hD...D..
    7168:	00004410 00004424 00004456 0000462a     .D..$D..VD..*F..
    7178:	00004696 00004696 000046c2 0000461c     .F...F...F...F..
    7188:	00004638 0000460c 00004646 00004686     8F...F..FF...F..
    7198:	732f2e2e 412f6372 732f4653 2f306d61     ../src/ASF/sam0/
    71a8:	76697264 2f737265 74737973 632f6d65     drivers/system/c
    71b8:	6b636f6c 6f6c632f 735f6b63 32646d61     lock/clock_samd2
    71c8:	32725f31 61645f31 3161685f 6f6c632f     1_r21_da_ha1/clo
    71d8:	632e6b63 00000000 4c434721 433e2d4b     ck.c....!GCLK->C
    71e8:	54434b4c 622e4c52 572e7469 4f4c5452     LKCTRL.bit.WRTLO
    71f8:	00004b43 732f2e2e 412f6372 732f4653     CK..../src/ASF/s
    7208:	2f306d61 76697264 2f737265 74737973     am0/drivers/syst
    7218:	632f6d65 6b636f6c 6f6c632f 735f6b63     em/clock/clock_s
    7228:	32646d61 32725f31 61645f31 3161685f     amd21_r21_da_ha1
    7238:	6c63672f 00632e6b 732f2e2e 412f6372     /gclk.c.../src/A
    7248:	732f4653 2f306d61 76697264 2f737265     SF/sam0/drivers/
    7258:	74737973 702f6d65 756d6e69 69702f78     system/pinmux/pi
    7268:	78756d6e 0000632e 74726f70 00000000     nmux.c..port....
    7278:	00007584 00007594                       .u...u..

00007280 <_test_str_sd_mmc_init_test.13095>:
    7280:	4d2f4453 6320434d 20647261 74696e69     SD/MMC card init
    7290:	696c6169 6974617a 74206e6f 2e747365     ialization test.
    72a0:	00000000                                ....

000072a4 <_test_str_sd_mmc_rw_test.13097>:
    72a4:	4d2f4453 6320434d 20647261 64616572     SD/MMC card read
    72b4:	646e6120 69727720 74206574 2e747365      and write test.
    72c4:	00000000                                ....

000072c8 <_test_str_sd_mmc_suite.13100>:
    72c8:	4d2f4453 7320434d 6b636174 73657420     SD/MMC stack tes
    72d8:	75732074 00657469 63206f4e 20647261     t suite.No card 
    72e8:	74696e69 696c6169 6974617a 70206e6f     initialization p
    72f8:	65736168 74656420 65746365 00002e64     hase detected...
    7308:	4d2f4453 6320434d 20647261 74696e69     SD/MMC card init
    7318:	696c6169 6974617a 66206e6f 656c6961     ialization faile
    7328:	00002e64 4d2f4453 6320434d 20647261     d...SD/MMC card 
    7338:	6e207369 6920746f 6974696e 7a696c61     is not initializ
    7348:	4f206465 00002e4b 732f2e2e 752f6372     ed OK...../src/u
    7358:	5f74696e 74736574 00632e73 6f727245     nit_tests.c.Erro
    7368:	53203a72 4d4d2f44 61632043 69636170     r: SD/MMC capaci
    7378:	002e7974 6f727245 53203a72 4d4d2f44     ty..Error: SD/MM
    7388:	6e692043 61697469 657a696c 61657220     C initialize rea
    7398:	65732064 726f7463 2e297328 00000000     d sector(s).....
    73a8:	6f727245 53203a72 4d4d2f44 74732043     Error: SD/MMC st
    73b8:	20747261 64616572 63657320 28726f74     art read sector(
    73c8:	002e2973 6f727245 53203a72 4d4d2f44     s)..Error: SD/MM
    73d8:	61772043 65207469 6f20646e 65722066     C wait end of re
    73e8:	73206461 6f746365 29732872 0000002e     ad sector(s)....
    73f8:	6f727245 53203a72 4d4d2f44 73692043     Error: SD/MMC is
    7408:	69727720 70206574 65746f72 64657463      write protected
    7418:	0000002e 6f727245 53203a72 4d4d2f44     ....Error: SD/MM
    7428:	6e692043 61697469 657a696c 69727720     C initialize wri
    7438:	73206574 6f746365 29732872 0000002e     te sector(s)....
    7448:	6f727245 53203a72 4d4d2f44 74732043     Error: SD/MMC st
    7458:	20747261 74697277 65732065 726f7463     art write sector
    7468:	2e297328 00000000 6f727245 53203a72     (s).....Error: S
    7478:	4d4d2f44 61772043 65207469 6f20646e     D/MMC wait end o
    7488:	72772066 20657469 74636573 7328726f     f write sector(s
    7498:	00002e29 6f727245 53203a72 4d4d2f44     )...Error: SD/MM
    74a8:	65762043 79666972 69727720 6f206574     C verify write o
    74b8:	61726570 6e6f6974 0000002e 6f727245     peration....Erro
    74c8:	53203a72 4d4d2f44 6e692043 61697469     r: SD/MMC initia
    74d8:	657a696c 69727720 72206574 6f747365     lize write resto
    74e8:	73206572 6f746365 29732872 0000002e     re sector(s)....
    74f8:	6f727245 53203a72 4d4d2f44 74732043     Error: SD/MMC st
    7508:	20747261 74697277 65722065 726f7473     art write restor
    7518:	65732065 726f7463 2e297328 00000000     e sector(s).....
    7528:	6f727245 53203a72 4d4d2f44 61772043     Error: SD/MMC wa
    7538:	65207469 6f20646e 72772066 20657469     it end of write 
    7548:	74736572 2065726f 74636573 7328726f     restore sector(s
    7558:	00002e29 6f727245 53203a72 4d4d2f44     )...Error: SD/MM
    7568:	65762043 79666972 73657220 65726f74     C verify restore
    7578:	65706f20 69746172 002e6e6f               operation..

00007584 <sd_mmc_init_test.13096>:
    7584:	00000000 00005411 00000000 00007280     .....T.......r..

00007594 <sd_mmc_rw_test.13098>:
    7594:	00000000 000053a9 00000000 000072a4     .....S.......r..

000075a4 <_global_impure_ptr>:
    75a4:	20000038 2b302d23 6c680020 6665004c     8.. #-0+ .hlL.ef
    75b4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    75c4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    75d4:	64636261 00006665                       abcdef..

000075dc <__sf_fake_stderr>:
	...

000075fc <__sf_fake_stdin>:
	...

0000761c <__sf_fake_stdout>:
	...

0000763c <_init>:
    763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    763e:	46c0      	nop			; (mov r8, r8)
    7640:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7642:	bc08      	pop	{r3}
    7644:	469e      	mov	lr, r3
    7646:	4770      	bx	lr

00007648 <__init_array_start>:
    7648:	000000dd 	.word	0x000000dd

0000764c <_fini>:
    764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    764e:	46c0      	nop			; (mov r8, r8)
    7650:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7652:	bc08      	pop	{r3}
    7654:	469e      	mov	lr, r3
    7656:	4770      	bx	lr

00007658 <__fini_array_start>:
    7658:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <ss_pins>:
20000030:	0105                                             .

20000031 <g_interrupt_enabled>:
20000031:	0001 3800                                        ...

20000034 <_impure_ptr>:
20000034:	0038 2000                                   8.. 

20000038 <impure_data>:
20000038:	0000 0000 75fc 0000 761c 0000 75dc 0000     .....u...v...u..
	...
