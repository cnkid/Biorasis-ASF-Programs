
samd20E sanity test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000294c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000090  20000000  0000294c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000130  20000090  000029dc  00020090  2**2
                  ALLOC
  3 .stack        00002000  200001c0  00002b0c  00020090  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00028af7  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004505  00000000  00000000  00048c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000640  00000000  00000000  0004d10d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000728  00000000  00000000  0004d74d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00013742  00000000  00000000  0004de75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d6cb  00000000  00000000  000615b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0005a815  00000000  00000000  0006ec82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001128  00000000  00000000  000c9498  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005cde  00000000  00000000  000ca5c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 21 00 20 75 18 00 00 71 18 00 00 71 18 00 00     .!. u...q...q...
	...
      2c:	71 18 00 00 00 00 00 00 00 00 00 00 71 18 00 00     q...........q...
      3c:	71 18 00 00 71 18 00 00 71 18 00 00 71 18 00 00     q...q...q...q...
      4c:	71 18 00 00 fd 02 00 00 71 18 00 00 b9 01 00 00     q.......q.......
      5c:	21 08 00 00 31 08 00 00 41 08 00 00 51 08 00 00     !...1...A...Q...
	...
      74:	89 15 00 00 99 15 00 00 a9 15 00 00 b9 15 00 00     ................
      84:	c9 15 00 00 d9 15 00 00 00 00 00 00 00 00 00 00     ................
      94:	71 18 00 00 71 18 00 00 71 18 00 00 71 18 00 00     q...q...q...q...

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000090 	.word	0x20000090
      c4:	00000000 	.word	0x00000000
      c8:	0000294c 	.word	0x0000294c

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000094 	.word	0x20000094
      f8:	0000294c 	.word	0x0000294c
      fc:	0000294c 	.word	0x0000294c
     100:	00000000 	.word	0x00000000

00000104 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     104:	4770      	bx	lr
	...

00000108 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     108:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     10a:	2000      	movs	r0, #0
     10c:	4b08      	ldr	r3, [pc, #32]	; (130 <delay_init+0x28>)
     10e:	4798      	blx	r3
     110:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     112:	4c08      	ldr	r4, [pc, #32]	; (134 <delay_init+0x2c>)
     114:	21fa      	movs	r1, #250	; 0xfa
     116:	0089      	lsls	r1, r1, #2
     118:	47a0      	blx	r4
     11a:	4b07      	ldr	r3, [pc, #28]	; (138 <delay_init+0x30>)
     11c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     11e:	4907      	ldr	r1, [pc, #28]	; (13c <delay_init+0x34>)
     120:	0028      	movs	r0, r5
     122:	47a0      	blx	r4
     124:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_init+0x38>)
     126:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     128:	2205      	movs	r2, #5
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_init+0x3c>)
     12c:	601a      	str	r2, [r3, #0]
}
     12e:	bd70      	pop	{r4, r5, r6, pc}
     130:	00001281 	.word	0x00001281
     134:	00001c91 	.word	0x00001c91
     138:	20000000 	.word	0x20000000
     13c:	000f4240 	.word	0x000f4240
     140:	20000004 	.word	0x20000004
     144:	e000e010 	.word	0xe000e010

00000148 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     148:	4b0c      	ldr	r3, [pc, #48]	; (17c <cpu_irq_enter_critical+0x34>)
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	2b00      	cmp	r3, #0
     14e:	d106      	bne.n	15e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     150:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     154:	2b00      	cmp	r3, #0
     156:	d007      	beq.n	168 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     158:	2200      	movs	r2, #0
     15a:	4b09      	ldr	r3, [pc, #36]	; (180 <cpu_irq_enter_critical+0x38>)
     15c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     15e:	4a07      	ldr	r2, [pc, #28]	; (17c <cpu_irq_enter_critical+0x34>)
     160:	6813      	ldr	r3, [r2, #0]
     162:	3301      	adds	r3, #1
     164:	6013      	str	r3, [r2, #0]
}
     166:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     168:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     16a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     16e:	2200      	movs	r2, #0
     170:	4b04      	ldr	r3, [pc, #16]	; (184 <cpu_irq_enter_critical+0x3c>)
     172:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     174:	3201      	adds	r2, #1
     176:	4b02      	ldr	r3, [pc, #8]	; (180 <cpu_irq_enter_critical+0x38>)
     178:	701a      	strb	r2, [r3, #0]
     17a:	e7f0      	b.n	15e <cpu_irq_enter_critical+0x16>
     17c:	200000ac 	.word	0x200000ac
     180:	200000b0 	.word	0x200000b0
     184:	20000008 	.word	0x20000008

00000188 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     188:	4b08      	ldr	r3, [pc, #32]	; (1ac <cpu_irq_leave_critical+0x24>)
     18a:	681a      	ldr	r2, [r3, #0]
     18c:	3a01      	subs	r2, #1
     18e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     190:	681b      	ldr	r3, [r3, #0]
     192:	2b00      	cmp	r3, #0
     194:	d109      	bne.n	1aa <cpu_irq_leave_critical+0x22>
     196:	4b06      	ldr	r3, [pc, #24]	; (1b0 <cpu_irq_leave_critical+0x28>)
     198:	781b      	ldrb	r3, [r3, #0]
     19a:	2b00      	cmp	r3, #0
     19c:	d005      	beq.n	1aa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     19e:	2201      	movs	r2, #1
     1a0:	4b04      	ldr	r3, [pc, #16]	; (1b4 <cpu_irq_leave_critical+0x2c>)
     1a2:	701a      	strb	r2, [r3, #0]
     1a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1a8:	b662      	cpsie	i
	}
}
     1aa:	4770      	bx	lr
     1ac:	200000ac 	.word	0x200000ac
     1b0:	200000b0 	.word	0x200000b0
     1b4:	20000008 	.word	0x20000008

000001b8 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     1b8:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     1ba:	4b0b      	ldr	r3, [pc, #44]	; (1e8 <EVSYS_Handler+0x30>)
     1bc:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     1be:	490b      	ldr	r1, [pc, #44]	; (1ec <EVSYS_Handler+0x34>)
     1c0:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     1c2:	6898      	ldr	r0, [r3, #8]
     1c4:	4302      	orrs	r2, r0
     1c6:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     1c8:	4b09      	ldr	r3, [pc, #36]	; (1f0 <EVSYS_Handler+0x38>)
     1ca:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     1cc:	2c00      	cmp	r4, #0
     1ce:	d005      	beq.n	1dc <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     1d0:	6820      	ldr	r0, [r4, #0]
     1d2:	6863      	ldr	r3, [r4, #4]
     1d4:	4798      	blx	r3
		current_hook = current_hook->next;
     1d6:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     1d8:	2c00      	cmp	r4, #0
     1da:	d1f9      	bne.n	1d0 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     1dc:	4b02      	ldr	r3, [pc, #8]	; (1e8 <EVSYS_Handler+0x30>)
     1de:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     1e0:	689a      	ldr	r2, [r3, #8]
     1e2:	438a      	bics	r2, r1
     1e4:	609a      	str	r2, [r3, #8]
}
     1e6:	bd10      	pop	{r4, pc}
     1e8:	2000000c 	.word	0x2000000c
     1ec:	42000400 	.word	0x42000400
     1f0:	0f0fffff 	.word	0x0f0fffff

000001f4 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1f4:	4a06      	ldr	r2, [pc, #24]	; (210 <_system_events_init+0x1c>)
     1f6:	6a13      	ldr	r3, [r2, #32]
     1f8:	2102      	movs	r1, #2
     1fa:	430b      	orrs	r3, r1
     1fc:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     1fe:	2201      	movs	r2, #1
     200:	4b04      	ldr	r3, [pc, #16]	; (214 <_system_events_init+0x20>)
     202:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     204:	0019      	movs	r1, r3
     206:	780b      	ldrb	r3, [r1, #0]
     208:	4213      	tst	r3, r2
     20a:	d1fc      	bne.n	206 <_system_events_init+0x12>
	}
}
     20c:	4770      	bx	lr
     20e:	46c0      	nop			; (mov r8, r8)
     210:	40000400 	.word	0x40000400
     214:	42000400 	.word	0x42000400

00000218 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     218:	2301      	movs	r3, #1
     21a:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     21c:	2300      	movs	r3, #0
     21e:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     220:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     222:	70c3      	strb	r3, [r0, #3]
}
     224:	4770      	bx	lr
	...

00000228 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     228:	b5f0      	push	{r4, r5, r6, r7, lr}
     22a:	b083      	sub	sp, #12
     22c:	0005      	movs	r5, r0
     22e:	000e      	movs	r6, r1
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     230:	4b24      	ldr	r3, [pc, #144]	; (2c4 <events_allocate+0x9c>)
     232:	4798      	blx	r3
	tmp = _events_inst.allocated_channels;
     234:	4b24      	ldr	r3, [pc, #144]	; (2c8 <events_allocate+0xa0>)
     236:	681b      	ldr	r3, [r3, #0]
		if(!(tmp & 0x00000001)) {
     238:	07da      	lsls	r2, r3, #31
     23a:	d50e      	bpl.n	25a <events_allocate+0x32>
		tmp = tmp >> 1;
     23c:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     23e:	2401      	movs	r4, #1
		if(!(tmp & 0x00000001)) {
     240:	2201      	movs	r2, #1
     242:	421a      	tst	r2, r3
     244:	d00a      	beq.n	25c <events_allocate+0x34>
		tmp = tmp >> 1;
     246:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     248:	3401      	adds	r4, #1
     24a:	b2e4      	uxtb	r4, r4
     24c:	2c08      	cmp	r4, #8
     24e:	d1f8      	bne.n	242 <events_allocate+0x1a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     250:	4b1e      	ldr	r3, [pc, #120]	; (2cc <events_allocate+0xa4>)
     252:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     254:	2014      	movs	r0, #20
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);


	return STATUS_OK;
}
     256:	b003      	add	sp, #12
     258:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     25a:	2400      	movs	r4, #0
			_events_inst.allocated_channels |= 1 << count;
     25c:	4a1a      	ldr	r2, [pc, #104]	; (2c8 <events_allocate+0xa0>)
     25e:	6811      	ldr	r1, [r2, #0]
     260:	2301      	movs	r3, #1
     262:	40a3      	lsls	r3, r4
     264:	430b      	orrs	r3, r1
     266:	6013      	str	r3, [r2, #0]
			_events_inst.free_channels--;
     268:	7913      	ldrb	r3, [r2, #4]
     26a:	3b01      	subs	r3, #1
     26c:	7113      	strb	r3, [r2, #4]
     26e:	4b17      	ldr	r3, [pc, #92]	; (2cc <events_allocate+0xa4>)
     270:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
     272:	2014      	movs	r0, #20
	if(new_channel == EVENTS_INVALID_CHANNEL) {
     274:	2cff      	cmp	r4, #255	; 0xff
     276:	d0ee      	beq.n	256 <events_allocate+0x2e>
	resource->channel = new_channel;
     278:	702c      	strb	r4, [r5, #0]
	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     27a:	7873      	ldrb	r3, [r6, #1]
     27c:	2b02      	cmp	r3, #2
     27e:	d00a      	beq.n	296 <events_allocate+0x6e>
		gclk_chan_conf.source_generator =
     280:	a901      	add	r1, sp, #4
     282:	78f3      	ldrb	r3, [r6, #3]
     284:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     286:	1d27      	adds	r7, r4, #4
     288:	b2ff      	uxtb	r7, r7
     28a:	0038      	movs	r0, r7
     28c:	4b10      	ldr	r3, [pc, #64]	; (2d0 <events_allocate+0xa8>)
     28e:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     290:	0038      	movs	r0, r7
     292:	4b10      	ldr	r3, [pc, #64]	; (2d4 <events_allocate+0xac>)
     294:	4798      	blx	r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
     296:	78b3      	ldrb	r3, [r6, #2]
     298:	041b      	lsls	r3, r3, #16
     29a:	22fc      	movs	r2, #252	; 0xfc
     29c:	0392      	lsls	r2, r2, #14
     29e:	4013      	ands	r3, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     2a0:	7872      	ldrb	r2, [r6, #1]
     2a2:	0612      	lsls	r2, r2, #24
     2a4:	21c0      	movs	r1, #192	; 0xc0
     2a6:	0489      	lsls	r1, r1, #18
     2a8:	400a      	ands	r2, r1
     2aa:	4313      	orrs	r3, r2
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
     2ac:	7832      	ldrb	r2, [r6, #0]
     2ae:	0692      	lsls	r2, r2, #26
     2b0:	21c0      	movs	r1, #192	; 0xc0
     2b2:	0509      	lsls	r1, r1, #20
     2b4:	400a      	ands	r2, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
     2b6:	4313      	orrs	r3, r2
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     2b8:	2207      	movs	r2, #7
     2ba:	4014      	ands	r4, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     2bc:	431c      	orrs	r4, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     2be:	606c      	str	r4, [r5, #4]
	return STATUS_OK;
     2c0:	2000      	movs	r0, #0
     2c2:	e7c8      	b.n	256 <events_allocate+0x2e>
     2c4:	00000149 	.word	0x00000149
     2c8:	2000000c 	.word	0x2000000c
     2cc:	00000189 	.word	0x00000189
     2d0:	00001399 	.word	0x00001399
     2d4:	0000130d 	.word	0x0000130d

000002d8 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     2d8:	7803      	ldrb	r3, [r0, #0]
     2da:	3301      	adds	r3, #1
     2dc:	021b      	lsls	r3, r3, #8
     2de:	22f0      	movs	r2, #240	; 0xf0
     2e0:	0112      	lsls	r2, r2, #4
     2e2:	4013      	ands	r3, r2
			  EVSYS_USER_USER(user_id);
     2e4:	220f      	movs	r2, #15
     2e6:	4011      	ands	r1, r2
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     2e8:	430b      	orrs	r3, r1
     2ea:	4a03      	ldr	r2, [pc, #12]	; (2f8 <events_attach_user+0x20>)
     2ec:	8113      	strh	r3, [r2, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
     2ee:	6843      	ldr	r3, [r0, #4]
     2f0:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
}
     2f2:	2000      	movs	r0, #0
     2f4:	4770      	bx	lr
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	42000400 	.word	0x42000400

000002fc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2fc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2fe:	2200      	movs	r2, #0
     300:	4b10      	ldr	r3, [pc, #64]	; (344 <EIC_Handler+0x48>)
     302:	701a      	strb	r2, [r3, #0]
     304:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     306:	4910      	ldr	r1, [pc, #64]	; (348 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     308:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     30a:	4e10      	ldr	r6, [pc, #64]	; (34c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     30c:	4c0d      	ldr	r4, [pc, #52]	; (344 <EIC_Handler+0x48>)
     30e:	e00a      	b.n	326 <EIC_Handler+0x2a>
		return eics[eic_index];
     310:	490d      	ldr	r1, [pc, #52]	; (348 <EIC_Handler+0x4c>)
     312:	e008      	b.n	326 <EIC_Handler+0x2a>
     314:	7823      	ldrb	r3, [r4, #0]
     316:	3301      	adds	r3, #1
     318:	b2db      	uxtb	r3, r3
     31a:	7023      	strb	r3, [r4, #0]
     31c:	2b0f      	cmp	r3, #15
     31e:	d810      	bhi.n	342 <EIC_Handler+0x46>
		return NULL;
     320:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     322:	2b1f      	cmp	r3, #31
     324:	d9f4      	bls.n	310 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     326:	0028      	movs	r0, r5
     328:	4018      	ands	r0, r3
     32a:	2201      	movs	r2, #1
     32c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     32e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     330:	4210      	tst	r0, r2
     332:	d0ef      	beq.n	314 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     334:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     336:	009b      	lsls	r3, r3, #2
     338:	599b      	ldr	r3, [r3, r6]
     33a:	2b00      	cmp	r3, #0
     33c:	d0ea      	beq.n	314 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     33e:	4798      	blx	r3
     340:	e7e8      	b.n	314 <EIC_Handler+0x18>
			}
		}
	}
}
     342:	bd70      	pop	{r4, r5, r6, pc}
     344:	200000e8 	.word	0x200000e8
     348:	40001800 	.word	0x40001800
     34c:	200000ec 	.word	0x200000ec

00000350 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     350:	4a04      	ldr	r2, [pc, #16]	; (364 <_extint_enable+0x14>)
     352:	7813      	ldrb	r3, [r2, #0]
     354:	2102      	movs	r1, #2
     356:	430b      	orrs	r3, r1
     358:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     35a:	7853      	ldrb	r3, [r2, #1]
     35c:	b25b      	sxtb	r3, r3
     35e:	2b00      	cmp	r3, #0
     360:	dbfb      	blt.n	35a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     362:	4770      	bx	lr
     364:	40001800 	.word	0x40001800

00000368 <_system_extint_init>:
{
     368:	b500      	push	{lr}
     36a:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     36c:	4a12      	ldr	r2, [pc, #72]	; (3b8 <_system_extint_init+0x50>)
     36e:	6993      	ldr	r3, [r2, #24]
     370:	2140      	movs	r1, #64	; 0x40
     372:	430b      	orrs	r3, r1
     374:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     376:	a901      	add	r1, sp, #4
     378:	2300      	movs	r3, #0
     37a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     37c:	2003      	movs	r0, #3
     37e:	4b0f      	ldr	r3, [pc, #60]	; (3bc <_system_extint_init+0x54>)
     380:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     382:	2003      	movs	r0, #3
     384:	4b0e      	ldr	r3, [pc, #56]	; (3c0 <_system_extint_init+0x58>)
     386:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     388:	4a0e      	ldr	r2, [pc, #56]	; (3c4 <_system_extint_init+0x5c>)
     38a:	7813      	ldrb	r3, [r2, #0]
     38c:	2101      	movs	r1, #1
     38e:	430b      	orrs	r3, r1
     390:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     392:	7853      	ldrb	r3, [r2, #1]
     394:	b25b      	sxtb	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	dbfb      	blt.n	392 <_system_extint_init+0x2a>
     39a:	4b0b      	ldr	r3, [pc, #44]	; (3c8 <_system_extint_init+0x60>)
     39c:	0019      	movs	r1, r3
     39e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     3a0:	2200      	movs	r2, #0
     3a2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     3a4:	4299      	cmp	r1, r3
     3a6:	d1fc      	bne.n	3a2 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3a8:	2210      	movs	r2, #16
     3aa:	4b08      	ldr	r3, [pc, #32]	; (3cc <_system_extint_init+0x64>)
     3ac:	601a      	str	r2, [r3, #0]
	_extint_enable();
     3ae:	4b08      	ldr	r3, [pc, #32]	; (3d0 <_system_extint_init+0x68>)
     3b0:	4798      	blx	r3
}
     3b2:	b003      	add	sp, #12
     3b4:	bd00      	pop	{pc}
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	40000400 	.word	0x40000400
     3bc:	00001399 	.word	0x00001399
     3c0:	0000130d 	.word	0x0000130d
     3c4:	40001800 	.word	0x40001800
     3c8:	200000ec 	.word	0x200000ec
     3cc:	e000e100 	.word	0xe000e100
     3d0:	00000351 	.word	0x00000351

000003d4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     3d4:	2300      	movs	r3, #0
     3d6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     3d8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3da:	2201      	movs	r2, #1
     3dc:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     3de:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     3e0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3e2:	3302      	adds	r3, #2
     3e4:	72c3      	strb	r3, [r0, #11]
}
     3e6:	4770      	bx	lr

000003e8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ea:	b083      	sub	sp, #12
     3ec:	0005      	movs	r5, r0
     3ee:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3f0:	a901      	add	r1, sp, #4
     3f2:	2300      	movs	r3, #0
     3f4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3f6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3f8:	7923      	ldrb	r3, [r4, #4]
     3fa:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3fc:	7a23      	ldrb	r3, [r4, #8]
     3fe:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     400:	7820      	ldrb	r0, [r4, #0]
     402:	4b15      	ldr	r3, [pc, #84]	; (458 <extint_chan_set_config+0x70>)
     404:	4798      	blx	r3
		return NULL;
     406:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     408:	2d1f      	cmp	r5, #31
     40a:	d800      	bhi.n	40e <extint_chan_set_config+0x26>
		return eics[eic_index];
     40c:	4813      	ldr	r0, [pc, #76]	; (45c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     40e:	2207      	movs	r2, #7
     410:	402a      	ands	r2, r5
     412:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     414:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     416:	7aa3      	ldrb	r3, [r4, #10]
     418:	2b00      	cmp	r3, #0
     41a:	d001      	beq.n	420 <extint_chan_set_config+0x38>
     41c:	2308      	movs	r3, #8
     41e:	431f      	orrs	r7, r3
     420:	08eb      	lsrs	r3, r5, #3
     422:	009b      	lsls	r3, r3, #2
     424:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     426:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     428:	260f      	movs	r6, #15
     42a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     42c:	43b1      	bics	r1, r6
			(new_config << config_pos);
     42e:	4097      	lsls	r7, r2
     430:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     432:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     434:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     436:	7a63      	ldrb	r3, [r4, #9]
     438:	2b00      	cmp	r3, #0
     43a:	d106      	bne.n	44a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     43c:	6943      	ldr	r3, [r0, #20]
     43e:	2201      	movs	r2, #1
     440:	40aa      	lsls	r2, r5
     442:	4393      	bics	r3, r2
     444:	6143      	str	r3, [r0, #20]
	}
}
     446:	b003      	add	sp, #12
     448:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     44a:	6942      	ldr	r2, [r0, #20]
     44c:	2301      	movs	r3, #1
     44e:	40ab      	lsls	r3, r5
     450:	4313      	orrs	r3, r2
     452:	6143      	str	r3, [r0, #20]
     454:	e7f7      	b.n	446 <extint_chan_set_config+0x5e>
     456:	46c0      	nop			; (mov r8, r8)
     458:	00001491 	.word	0x00001491
     45c:	40001800 	.word	0x40001800

00000460 <extint_enable_events>:
 *
 *  \param[in] events    Struct containing flags of events to enable
 */
void extint_enable_events(
		struct extint_events *const events)
{
     460:	b510      	push	{r4, lr}
     462:	2300      	movs	r3, #0
     464:	2100      	movs	r1, #0
		uint32_t event_mask = 0;

		/* Create an enable mask for the current EIC module */
		for (uint32_t j = 0; j < 32; j++) {
			if (events->generate_event_on_detect[(32 * i) + j]) {
				event_mask |= (1UL << j);
     466:	2401      	movs	r4, #1
     468:	e002      	b.n	470 <extint_enable_events+0x10>
		for (uint32_t j = 0; j < 32; j++) {
     46a:	3301      	adds	r3, #1
     46c:	2b20      	cmp	r3, #32
     46e:	d006      	beq.n	47e <extint_enable_events+0x1e>
			if (events->generate_event_on_detect[(32 * i) + j]) {
     470:	5cc2      	ldrb	r2, [r0, r3]
     472:	2a00      	cmp	r2, #0
     474:	d0f9      	beq.n	46a <extint_enable_events+0xa>
				event_mask |= (1UL << j);
     476:	0022      	movs	r2, r4
     478:	409a      	lsls	r2, r3
     47a:	4311      	orrs	r1, r2
     47c:	e7f5      	b.n	46a <extint_enable_events+0xa>
			}
		}

		/* Enable the masked events */
		eics[i]->EVCTRL.reg |= event_mask;
     47e:	4b02      	ldr	r3, [pc, #8]	; (488 <extint_enable_events+0x28>)
     480:	685a      	ldr	r2, [r3, #4]
     482:	4311      	orrs	r1, r2
     484:	6059      	str	r1, [r3, #4]
	}
}
     486:	bd10      	pop	{r4, pc}
     488:	40001800 	.word	0x40001800

0000048c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     48c:	b500      	push	{lr}
     48e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     490:	ab01      	add	r3, sp, #4
     492:	2280      	movs	r2, #128	; 0x80
     494:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     496:	780a      	ldrb	r2, [r1, #0]
     498:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     49a:	784a      	ldrb	r2, [r1, #1]
     49c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     49e:	788a      	ldrb	r2, [r1, #2]
     4a0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4a2:	0019      	movs	r1, r3
     4a4:	4b01      	ldr	r3, [pc, #4]	; (4ac <port_pin_set_config+0x20>)
     4a6:	4798      	blx	r3
}
     4a8:	b003      	add	sp, #12
     4aa:	bd00      	pop	{pc}
     4ac:	00001491 	.word	0x00001491

000004b0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4b2:	46de      	mov	lr, fp
     4b4:	4657      	mov	r7, sl
     4b6:	464e      	mov	r6, r9
     4b8:	4645      	mov	r5, r8
     4ba:	b5e0      	push	{r5, r6, r7, lr}
     4bc:	b087      	sub	sp, #28
     4be:	4680      	mov	r8, r0
     4c0:	9104      	str	r1, [sp, #16]
     4c2:	0016      	movs	r6, r2
     4c4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     4c6:	2200      	movs	r2, #0
     4c8:	2300      	movs	r3, #0
     4ca:	2100      	movs	r1, #0
     4cc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     4ce:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     4d0:	2001      	movs	r0, #1
     4d2:	0021      	movs	r1, r4
     4d4:	9600      	str	r6, [sp, #0]
     4d6:	9701      	str	r7, [sp, #4]
     4d8:	465c      	mov	r4, fp
     4da:	9403      	str	r4, [sp, #12]
     4dc:	4644      	mov	r4, r8
     4de:	9405      	str	r4, [sp, #20]
     4e0:	e013      	b.n	50a <long_division+0x5a>
     4e2:	2420      	movs	r4, #32
     4e4:	1a64      	subs	r4, r4, r1
     4e6:	0005      	movs	r5, r0
     4e8:	40e5      	lsrs	r5, r4
     4ea:	46a8      	mov	r8, r5
     4ec:	e014      	b.n	518 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     4ee:	9c00      	ldr	r4, [sp, #0]
     4f0:	9d01      	ldr	r5, [sp, #4]
     4f2:	1b12      	subs	r2, r2, r4
     4f4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     4f6:	465c      	mov	r4, fp
     4f8:	464d      	mov	r5, r9
     4fa:	432c      	orrs	r4, r5
     4fc:	46a3      	mov	fp, r4
     4fe:	9c03      	ldr	r4, [sp, #12]
     500:	4645      	mov	r5, r8
     502:	432c      	orrs	r4, r5
     504:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     506:	3901      	subs	r1, #1
     508:	d325      	bcc.n	556 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     50a:	2420      	movs	r4, #32
     50c:	4264      	negs	r4, r4
     50e:	190c      	adds	r4, r1, r4
     510:	d4e7      	bmi.n	4e2 <long_division+0x32>
     512:	0005      	movs	r5, r0
     514:	40a5      	lsls	r5, r4
     516:	46a8      	mov	r8, r5
     518:	0004      	movs	r4, r0
     51a:	408c      	lsls	r4, r1
     51c:	46a1      	mov	r9, r4
		r = r << 1;
     51e:	1892      	adds	r2, r2, r2
     520:	415b      	adcs	r3, r3
     522:	0014      	movs	r4, r2
     524:	001d      	movs	r5, r3
		if (n & bit_shift) {
     526:	9e05      	ldr	r6, [sp, #20]
     528:	464f      	mov	r7, r9
     52a:	403e      	ands	r6, r7
     52c:	46b4      	mov	ip, r6
     52e:	9e04      	ldr	r6, [sp, #16]
     530:	4647      	mov	r7, r8
     532:	403e      	ands	r6, r7
     534:	46b2      	mov	sl, r6
     536:	4666      	mov	r6, ip
     538:	4657      	mov	r7, sl
     53a:	433e      	orrs	r6, r7
     53c:	d003      	beq.n	546 <long_division+0x96>
			r |= 0x01;
     53e:	0006      	movs	r6, r0
     540:	4326      	orrs	r6, r4
     542:	0032      	movs	r2, r6
     544:	002b      	movs	r3, r5
		if (r >= d) {
     546:	9c00      	ldr	r4, [sp, #0]
     548:	9d01      	ldr	r5, [sp, #4]
     54a:	429d      	cmp	r5, r3
     54c:	d8db      	bhi.n	506 <long_division+0x56>
     54e:	d1ce      	bne.n	4ee <long_division+0x3e>
     550:	4294      	cmp	r4, r2
     552:	d8d8      	bhi.n	506 <long_division+0x56>
     554:	e7cb      	b.n	4ee <long_division+0x3e>
     556:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     558:	4658      	mov	r0, fp
     55a:	0019      	movs	r1, r3
     55c:	b007      	add	sp, #28
     55e:	bc3c      	pop	{r2, r3, r4, r5}
     560:	4690      	mov	r8, r2
     562:	4699      	mov	r9, r3
     564:	46a2      	mov	sl, r4
     566:	46ab      	mov	fp, r5
     568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000056a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     56a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     56c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     56e:	2340      	movs	r3, #64	; 0x40
     570:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     572:	4281      	cmp	r1, r0
     574:	d202      	bcs.n	57c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     576:	0018      	movs	r0, r3
     578:	bd10      	pop	{r4, pc}
		baud_calculated++;
     57a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     57c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     57e:	1c63      	adds	r3, r4, #1
     580:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     582:	4288      	cmp	r0, r1
     584:	d9f9      	bls.n	57a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     586:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     588:	2cff      	cmp	r4, #255	; 0xff
     58a:	d8f4      	bhi.n	576 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     58c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     58e:	2300      	movs	r3, #0
     590:	e7f1      	b.n	576 <_sercom_get_sync_baud_val+0xc>
	...

00000594 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     594:	b5f0      	push	{r4, r5, r6, r7, lr}
     596:	b083      	sub	sp, #12
     598:	000f      	movs	r7, r1
     59a:	0016      	movs	r6, r2
     59c:	aa08      	add	r2, sp, #32
     59e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     5a0:	0004      	movs	r4, r0
     5a2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5a4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     5a6:	42bc      	cmp	r4, r7
     5a8:	d902      	bls.n	5b0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     5aa:	0010      	movs	r0, r2
     5ac:	b003      	add	sp, #12
     5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     5b0:	2b00      	cmp	r3, #0
     5b2:	d114      	bne.n	5de <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     5b4:	0002      	movs	r2, r0
     5b6:	0008      	movs	r0, r1
     5b8:	2100      	movs	r1, #0
     5ba:	4c19      	ldr	r4, [pc, #100]	; (620 <_sercom_get_async_baud_val+0x8c>)
     5bc:	47a0      	blx	r4
     5be:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     5c0:	003a      	movs	r2, r7
     5c2:	2300      	movs	r3, #0
     5c4:	2000      	movs	r0, #0
     5c6:	4c17      	ldr	r4, [pc, #92]	; (624 <_sercom_get_async_baud_val+0x90>)
     5c8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5ca:	2200      	movs	r2, #0
     5cc:	2301      	movs	r3, #1
     5ce:	1a12      	subs	r2, r2, r0
     5d0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     5d2:	0c12      	lsrs	r2, r2, #16
     5d4:	041b      	lsls	r3, r3, #16
     5d6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     5d8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     5da:	2200      	movs	r2, #0
     5dc:	e7e5      	b.n	5aa <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     5de:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5e0:	2b01      	cmp	r3, #1
     5e2:	d1f9      	bne.n	5d8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     5e4:	000a      	movs	r2, r1
     5e6:	2300      	movs	r3, #0
     5e8:	2100      	movs	r1, #0
     5ea:	4c0d      	ldr	r4, [pc, #52]	; (620 <_sercom_get_async_baud_val+0x8c>)
     5ec:	47a0      	blx	r4
     5ee:	0002      	movs	r2, r0
     5f0:	000b      	movs	r3, r1
     5f2:	9200      	str	r2, [sp, #0]
     5f4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     5f6:	0038      	movs	r0, r7
     5f8:	2100      	movs	r1, #0
     5fa:	4c0a      	ldr	r4, [pc, #40]	; (624 <_sercom_get_async_baud_val+0x90>)
     5fc:	47a0      	blx	r4
     5fe:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     600:	2380      	movs	r3, #128	; 0x80
     602:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     604:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     606:	4298      	cmp	r0, r3
     608:	d8cf      	bhi.n	5aa <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     60a:	0f79      	lsrs	r1, r7, #29
     60c:	00f8      	lsls	r0, r7, #3
     60e:	9a00      	ldr	r2, [sp, #0]
     610:	9b01      	ldr	r3, [sp, #4]
     612:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     614:	00ea      	lsls	r2, r5, #3
     616:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     618:	b2d2      	uxtb	r2, r2
     61a:	0352      	lsls	r2, r2, #13
     61c:	432a      	orrs	r2, r5
     61e:	e7db      	b.n	5d8 <_sercom_get_async_baud_val+0x44>
     620:	00001f7d 	.word	0x00001f7d
     624:	000004b1 	.word	0x000004b1

00000628 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     628:	b510      	push	{r4, lr}
     62a:	b082      	sub	sp, #8
     62c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     62e:	4b0e      	ldr	r3, [pc, #56]	; (668 <sercom_set_gclk_generator+0x40>)
     630:	781b      	ldrb	r3, [r3, #0]
     632:	2b00      	cmp	r3, #0
     634:	d007      	beq.n	646 <sercom_set_gclk_generator+0x1e>
     636:	2900      	cmp	r1, #0
     638:	d105      	bne.n	646 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     63a:	4b0b      	ldr	r3, [pc, #44]	; (668 <sercom_set_gclk_generator+0x40>)
     63c:	785b      	ldrb	r3, [r3, #1]
     63e:	4283      	cmp	r3, r0
     640:	d010      	beq.n	664 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     642:	201d      	movs	r0, #29
     644:	e00c      	b.n	660 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     646:	a901      	add	r1, sp, #4
     648:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     64a:	200c      	movs	r0, #12
     64c:	4b07      	ldr	r3, [pc, #28]	; (66c <sercom_set_gclk_generator+0x44>)
     64e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     650:	200c      	movs	r0, #12
     652:	4b07      	ldr	r3, [pc, #28]	; (670 <sercom_set_gclk_generator+0x48>)
     654:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     656:	4b04      	ldr	r3, [pc, #16]	; (668 <sercom_set_gclk_generator+0x40>)
     658:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     65a:	2201      	movs	r2, #1
     65c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     65e:	2000      	movs	r0, #0
}
     660:	b002      	add	sp, #8
     662:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     664:	2000      	movs	r0, #0
     666:	e7fb      	b.n	660 <sercom_set_gclk_generator+0x38>
     668:	200000b4 	.word	0x200000b4
     66c:	00001399 	.word	0x00001399
     670:	0000130d 	.word	0x0000130d

00000674 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     674:	4b2b      	ldr	r3, [pc, #172]	; (724 <_sercom_get_default_pad+0xb0>)
     676:	4298      	cmp	r0, r3
     678:	d023      	beq.n	6c2 <_sercom_get_default_pad+0x4e>
     67a:	d90f      	bls.n	69c <_sercom_get_default_pad+0x28>
     67c:	4b2a      	ldr	r3, [pc, #168]	; (728 <_sercom_get_default_pad+0xb4>)
     67e:	4298      	cmp	r0, r3
     680:	d02f      	beq.n	6e2 <_sercom_get_default_pad+0x6e>
     682:	4b2a      	ldr	r3, [pc, #168]	; (72c <_sercom_get_default_pad+0xb8>)
     684:	4298      	cmp	r0, r3
     686:	d142      	bne.n	70e <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     688:	2901      	cmp	r1, #1
     68a:	d03a      	beq.n	702 <_sercom_get_default_pad+0x8e>
     68c:	2900      	cmp	r1, #0
     68e:	d046      	beq.n	71e <_sercom_get_default_pad+0xaa>
     690:	2902      	cmp	r1, #2
     692:	d038      	beq.n	706 <_sercom_get_default_pad+0x92>
     694:	2903      	cmp	r1, #3
     696:	d038      	beq.n	70a <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
     698:	2000      	movs	r0, #0
     69a:	e039      	b.n	710 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
     69c:	4b24      	ldr	r3, [pc, #144]	; (730 <_sercom_get_default_pad+0xbc>)
     69e:	4298      	cmp	r0, r3
     6a0:	d135      	bne.n	70e <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6a2:	2901      	cmp	r1, #1
     6a4:	d007      	beq.n	6b6 <_sercom_get_default_pad+0x42>
     6a6:	2900      	cmp	r1, #0
     6a8:	d033      	beq.n	712 <_sercom_get_default_pad+0x9e>
     6aa:	2902      	cmp	r1, #2
     6ac:	d005      	beq.n	6ba <_sercom_get_default_pad+0x46>
     6ae:	2903      	cmp	r1, #3
     6b0:	d005      	beq.n	6be <_sercom_get_default_pad+0x4a>
	return 0;
     6b2:	2000      	movs	r0, #0
     6b4:	e02c      	b.n	710 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6b6:	481f      	ldr	r0, [pc, #124]	; (734 <_sercom_get_default_pad+0xc0>)
     6b8:	e02a      	b.n	710 <_sercom_get_default_pad+0x9c>
     6ba:	481f      	ldr	r0, [pc, #124]	; (738 <_sercom_get_default_pad+0xc4>)
     6bc:	e028      	b.n	710 <_sercom_get_default_pad+0x9c>
     6be:	481f      	ldr	r0, [pc, #124]	; (73c <_sercom_get_default_pad+0xc8>)
     6c0:	e026      	b.n	710 <_sercom_get_default_pad+0x9c>
     6c2:	2901      	cmp	r1, #1
     6c4:	d007      	beq.n	6d6 <_sercom_get_default_pad+0x62>
     6c6:	2900      	cmp	r1, #0
     6c8:	d025      	beq.n	716 <_sercom_get_default_pad+0xa2>
     6ca:	2902      	cmp	r1, #2
     6cc:	d005      	beq.n	6da <_sercom_get_default_pad+0x66>
     6ce:	2903      	cmp	r1, #3
     6d0:	d005      	beq.n	6de <_sercom_get_default_pad+0x6a>
	return 0;
     6d2:	2000      	movs	r0, #0
     6d4:	e01c      	b.n	710 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6d6:	481a      	ldr	r0, [pc, #104]	; (740 <_sercom_get_default_pad+0xcc>)
     6d8:	e01a      	b.n	710 <_sercom_get_default_pad+0x9c>
     6da:	481a      	ldr	r0, [pc, #104]	; (744 <_sercom_get_default_pad+0xd0>)
     6dc:	e018      	b.n	710 <_sercom_get_default_pad+0x9c>
     6de:	481a      	ldr	r0, [pc, #104]	; (748 <_sercom_get_default_pad+0xd4>)
     6e0:	e016      	b.n	710 <_sercom_get_default_pad+0x9c>
     6e2:	2901      	cmp	r1, #1
     6e4:	d007      	beq.n	6f6 <_sercom_get_default_pad+0x82>
     6e6:	2900      	cmp	r1, #0
     6e8:	d017      	beq.n	71a <_sercom_get_default_pad+0xa6>
     6ea:	2902      	cmp	r1, #2
     6ec:	d005      	beq.n	6fa <_sercom_get_default_pad+0x86>
     6ee:	2903      	cmp	r1, #3
     6f0:	d005      	beq.n	6fe <_sercom_get_default_pad+0x8a>
	return 0;
     6f2:	2000      	movs	r0, #0
     6f4:	e00c      	b.n	710 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6f6:	4815      	ldr	r0, [pc, #84]	; (74c <_sercom_get_default_pad+0xd8>)
     6f8:	e00a      	b.n	710 <_sercom_get_default_pad+0x9c>
     6fa:	4815      	ldr	r0, [pc, #84]	; (750 <_sercom_get_default_pad+0xdc>)
     6fc:	e008      	b.n	710 <_sercom_get_default_pad+0x9c>
     6fe:	4815      	ldr	r0, [pc, #84]	; (754 <_sercom_get_default_pad+0xe0>)
     700:	e006      	b.n	710 <_sercom_get_default_pad+0x9c>
     702:	4815      	ldr	r0, [pc, #84]	; (758 <_sercom_get_default_pad+0xe4>)
     704:	e004      	b.n	710 <_sercom_get_default_pad+0x9c>
     706:	4815      	ldr	r0, [pc, #84]	; (75c <_sercom_get_default_pad+0xe8>)
     708:	e002      	b.n	710 <_sercom_get_default_pad+0x9c>
     70a:	4815      	ldr	r0, [pc, #84]	; (760 <_sercom_get_default_pad+0xec>)
     70c:	e000      	b.n	710 <_sercom_get_default_pad+0x9c>
	return 0;
     70e:	2000      	movs	r0, #0
}
     710:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     712:	4814      	ldr	r0, [pc, #80]	; (764 <_sercom_get_default_pad+0xf0>)
     714:	e7fc      	b.n	710 <_sercom_get_default_pad+0x9c>
     716:	2003      	movs	r0, #3
     718:	e7fa      	b.n	710 <_sercom_get_default_pad+0x9c>
     71a:	4813      	ldr	r0, [pc, #76]	; (768 <_sercom_get_default_pad+0xf4>)
     71c:	e7f8      	b.n	710 <_sercom_get_default_pad+0x9c>
     71e:	4813      	ldr	r0, [pc, #76]	; (76c <_sercom_get_default_pad+0xf8>)
     720:	e7f6      	b.n	710 <_sercom_get_default_pad+0x9c>
     722:	46c0      	nop			; (mov r8, r8)
     724:	42000c00 	.word	0x42000c00
     728:	42001000 	.word	0x42001000
     72c:	42001400 	.word	0x42001400
     730:	42000800 	.word	0x42000800
     734:	00050003 	.word	0x00050003
     738:	00060003 	.word	0x00060003
     73c:	00070003 	.word	0x00070003
     740:	00010003 	.word	0x00010003
     744:	001e0003 	.word	0x001e0003
     748:	001f0003 	.word	0x001f0003
     74c:	00090003 	.word	0x00090003
     750:	000a0003 	.word	0x000a0003
     754:	000b0003 	.word	0x000b0003
     758:	00110003 	.word	0x00110003
     75c:	00120003 	.word	0x00120003
     760:	00130003 	.word	0x00130003
     764:	00040003 	.word	0x00040003
     768:	00080003 	.word	0x00080003
     76c:	00100003 	.word	0x00100003

00000770 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     770:	b530      	push	{r4, r5, lr}
     772:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     774:	466a      	mov	r2, sp
     776:	4b0f      	ldr	r3, [pc, #60]	; (7b4 <_sercom_get_sercom_inst_index+0x44>)
     778:	cb32      	ldmia	r3!, {r1, r4, r5}
     77a:	c232      	stmia	r2!, {r1, r4, r5}
     77c:	681b      	ldr	r3, [r3, #0]
     77e:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     780:	0003      	movs	r3, r0
     782:	9a00      	ldr	r2, [sp, #0]
     784:	4282      	cmp	r2, r0
     786:	d011      	beq.n	7ac <_sercom_get_sercom_inst_index+0x3c>
     788:	9a01      	ldr	r2, [sp, #4]
     78a:	4282      	cmp	r2, r0
     78c:	d00a      	beq.n	7a4 <_sercom_get_sercom_inst_index+0x34>
     78e:	9a02      	ldr	r2, [sp, #8]
     790:	4282      	cmp	r2, r0
     792:	d009      	beq.n	7a8 <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     794:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     796:	9a03      	ldr	r2, [sp, #12]
     798:	429a      	cmp	r2, r3
     79a:	d001      	beq.n	7a0 <_sercom_get_sercom_inst_index+0x30>
}
     79c:	b005      	add	sp, #20
     79e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7a0:	3003      	adds	r0, #3
     7a2:	e004      	b.n	7ae <_sercom_get_sercom_inst_index+0x3e>
     7a4:	2001      	movs	r0, #1
     7a6:	e002      	b.n	7ae <_sercom_get_sercom_inst_index+0x3e>
     7a8:	2002      	movs	r0, #2
     7aa:	e000      	b.n	7ae <_sercom_get_sercom_inst_index+0x3e>
     7ac:	2000      	movs	r0, #0
			return i;
     7ae:	b2c0      	uxtb	r0, r0
     7b0:	e7f4      	b.n	79c <_sercom_get_sercom_inst_index+0x2c>
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	0000286c 	.word	0x0000286c

000007b8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     7b8:	4770      	bx	lr
	...

000007bc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     7bc:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     7be:	4b0b      	ldr	r3, [pc, #44]	; (7ec <_sercom_set_handler+0x30>)
     7c0:	781b      	ldrb	r3, [r3, #0]
     7c2:	2b00      	cmp	r3, #0
     7c4:	d10e      	bne.n	7e4 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     7c6:	4c0a      	ldr	r4, [pc, #40]	; (7f0 <_sercom_set_handler+0x34>)
     7c8:	4d0a      	ldr	r5, [pc, #40]	; (7f4 <_sercom_set_handler+0x38>)
     7ca:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     7cc:	4b0a      	ldr	r3, [pc, #40]	; (7f8 <_sercom_set_handler+0x3c>)
     7ce:	2200      	movs	r2, #0
     7d0:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     7d2:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     7d4:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     7d6:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     7d8:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     7da:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
     7dc:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
     7de:	3201      	adds	r2, #1
     7e0:	4b02      	ldr	r3, [pc, #8]	; (7ec <_sercom_set_handler+0x30>)
     7e2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     7e4:	0080      	lsls	r0, r0, #2
     7e6:	4b02      	ldr	r3, [pc, #8]	; (7f0 <_sercom_set_handler+0x34>)
     7e8:	50c1      	str	r1, [r0, r3]
}
     7ea:	bd30      	pop	{r4, r5, pc}
     7ec:	200000b6 	.word	0x200000b6
     7f0:	200000b8 	.word	0x200000b8
     7f4:	000007b9 	.word	0x000007b9
     7f8:	2000012c 	.word	0x2000012c

000007fc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     7fc:	b510      	push	{r4, lr}
     7fe:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     800:	ac01      	add	r4, sp, #4
     802:	2307      	movs	r3, #7
     804:	7023      	strb	r3, [r4, #0]
     806:	3301      	adds	r3, #1
     808:	7063      	strb	r3, [r4, #1]
     80a:	3301      	adds	r3, #1
     80c:	70a3      	strb	r3, [r4, #2]
     80e:	3301      	adds	r3, #1
     810:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     812:	4b02      	ldr	r3, [pc, #8]	; (81c <_sercom_get_interrupt_vector+0x20>)
     814:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     816:	5620      	ldrsb	r0, [r4, r0]
}
     818:	b002      	add	sp, #8
     81a:	bd10      	pop	{r4, pc}
     81c:	00000771 	.word	0x00000771

00000820 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     820:	b510      	push	{r4, lr}
     822:	4b02      	ldr	r3, [pc, #8]	; (82c <SERCOM0_Handler+0xc>)
     824:	681b      	ldr	r3, [r3, #0]
     826:	2000      	movs	r0, #0
     828:	4798      	blx	r3
     82a:	bd10      	pop	{r4, pc}
     82c:	200000b8 	.word	0x200000b8

00000830 <SERCOM1_Handler>:
     830:	b510      	push	{r4, lr}
     832:	4b02      	ldr	r3, [pc, #8]	; (83c <SERCOM1_Handler+0xc>)
     834:	685b      	ldr	r3, [r3, #4]
     836:	2001      	movs	r0, #1
     838:	4798      	blx	r3
     83a:	bd10      	pop	{r4, pc}
     83c:	200000b8 	.word	0x200000b8

00000840 <SERCOM2_Handler>:
     840:	b510      	push	{r4, lr}
     842:	4b02      	ldr	r3, [pc, #8]	; (84c <SERCOM2_Handler+0xc>)
     844:	689b      	ldr	r3, [r3, #8]
     846:	2002      	movs	r0, #2
     848:	4798      	blx	r3
     84a:	bd10      	pop	{r4, pc}
     84c:	200000b8 	.word	0x200000b8

00000850 <SERCOM3_Handler>:
     850:	b510      	push	{r4, lr}
     852:	4b02      	ldr	r3, [pc, #8]	; (85c <SERCOM3_Handler+0xc>)
     854:	68db      	ldr	r3, [r3, #12]
     856:	2003      	movs	r0, #3
     858:	4798      	blx	r3
     85a:	bd10      	pop	{r4, pc}
     85c:	200000b8 	.word	0x200000b8

00000860 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     860:	b5f0      	push	{r4, r5, r6, r7, lr}
     862:	46de      	mov	lr, fp
     864:	4657      	mov	r7, sl
     866:	464e      	mov	r6, r9
     868:	4645      	mov	r5, r8
     86a:	b5e0      	push	{r5, r6, r7, lr}
     86c:	b08d      	sub	sp, #52	; 0x34
     86e:	0005      	movs	r5, r0
     870:	000c      	movs	r4, r1
     872:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     874:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     876:	0008      	movs	r0, r1
     878:	4b80      	ldr	r3, [pc, #512]	; (a7c <usart_init+0x21c>)
     87a:	4798      	blx	r3
     87c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     87e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     880:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     882:	07db      	lsls	r3, r3, #31
     884:	d506      	bpl.n	894 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     886:	b00d      	add	sp, #52	; 0x34
     888:	bc3c      	pop	{r2, r3, r4, r5}
     88a:	4690      	mov	r8, r2
     88c:	4699      	mov	r9, r3
     88e:	46a2      	mov	sl, r4
     890:	46ab      	mov	fp, r5
     892:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     894:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     896:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     898:	079b      	lsls	r3, r3, #30
     89a:	d4f4      	bmi.n	886 <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
     89c:	4978      	ldr	r1, [pc, #480]	; (a80 <usart_init+0x220>)
     89e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     8a0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     8a2:	2301      	movs	r3, #1
     8a4:	40bb      	lsls	r3, r7
     8a6:	4303      	orrs	r3, r0
     8a8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     8aa:	a90b      	add	r1, sp, #44	; 0x2c
     8ac:	7f73      	ldrb	r3, [r6, #29]
     8ae:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8b0:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     8b2:	b2d7      	uxtb	r7, r2
     8b4:	0038      	movs	r0, r7
     8b6:	4b73      	ldr	r3, [pc, #460]	; (a84 <usart_init+0x224>)
     8b8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     8ba:	0038      	movs	r0, r7
     8bc:	4b72      	ldr	r3, [pc, #456]	; (a88 <usart_init+0x228>)
     8be:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     8c0:	7f70      	ldrb	r0, [r6, #29]
     8c2:	2100      	movs	r1, #0
     8c4:	4b71      	ldr	r3, [pc, #452]	; (a8c <usart_init+0x22c>)
     8c6:	4798      	blx	r3
	module->character_size = config->character_size;
     8c8:	7af3      	ldrb	r3, [r6, #11]
     8ca:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     8cc:	7d33      	ldrb	r3, [r6, #20]
     8ce:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     8d0:	7d73      	ldrb	r3, [r6, #21]
     8d2:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
     8d4:	682b      	ldr	r3, [r5, #0]
     8d6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8d8:	0018      	movs	r0, r3
     8da:	4b68      	ldr	r3, [pc, #416]	; (a7c <usart_init+0x21c>)
     8dc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8de:	300d      	adds	r0, #13
	uint16_t baud  = 0;
     8e0:	2200      	movs	r2, #0
     8e2:	230e      	movs	r3, #14
     8e4:	a902      	add	r1, sp, #8
     8e6:	468c      	mov	ip, r1
     8e8:	4463      	add	r3, ip
     8ea:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
     8ec:	6833      	ldr	r3, [r6, #0]
     8ee:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     8f0:	68f3      	ldr	r3, [r6, #12]
     8f2:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8f4:	7db3      	ldrb	r3, [r6, #22]
     8f6:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     8f8:	6873      	ldr	r3, [r6, #4]
     8fa:	4699      	mov	r9, r3
	switch (transfer_mode)
     8fc:	2b00      	cmp	r3, #0
     8fe:	d014      	beq.n	92a <usart_init+0xca>
     900:	2380      	movs	r3, #128	; 0x80
     902:	055b      	lsls	r3, r3, #21
     904:	4599      	cmp	r9, r3
     906:	d130      	bne.n	96a <usart_init+0x10a>
			if (!config->use_external_clock) {
     908:	7df3      	ldrb	r3, [r6, #23]
     90a:	2b00      	cmp	r3, #0
     90c:	d131      	bne.n	972 <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     90e:	6933      	ldr	r3, [r6, #16]
     910:	001f      	movs	r7, r3
     912:	b2c0      	uxtb	r0, r0
     914:	4b5e      	ldr	r3, [pc, #376]	; (a90 <usart_init+0x230>)
     916:	4798      	blx	r3
     918:	0001      	movs	r1, r0
     91a:	220e      	movs	r2, #14
     91c:	ab02      	add	r3, sp, #8
     91e:	469c      	mov	ip, r3
     920:	4462      	add	r2, ip
     922:	0038      	movs	r0, r7
     924:	4b5b      	ldr	r3, [pc, #364]	; (a94 <usart_init+0x234>)
     926:	4798      	blx	r3
     928:	e020      	b.n	96c <usart_init+0x10c>
			if (config->use_external_clock) {
     92a:	7df3      	ldrb	r3, [r6, #23]
     92c:	2b00      	cmp	r3, #0
     92e:	d00b      	beq.n	948 <usart_init+0xe8>
				status_code =
     930:	2310      	movs	r3, #16
     932:	9300      	str	r3, [sp, #0]
     934:	2300      	movs	r3, #0
     936:	220e      	movs	r2, #14
     938:	a902      	add	r1, sp, #8
     93a:	468c      	mov	ip, r1
     93c:	4462      	add	r2, ip
     93e:	69b1      	ldr	r1, [r6, #24]
     940:	6930      	ldr	r0, [r6, #16]
     942:	4f55      	ldr	r7, [pc, #340]	; (a98 <usart_init+0x238>)
     944:	47b8      	blx	r7
     946:	e011      	b.n	96c <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
     948:	6933      	ldr	r3, [r6, #16]
     94a:	001f      	movs	r7, r3
     94c:	b2c0      	uxtb	r0, r0
     94e:	4b50      	ldr	r3, [pc, #320]	; (a90 <usart_init+0x230>)
     950:	4798      	blx	r3
     952:	0001      	movs	r1, r0
				status_code =
     954:	2310      	movs	r3, #16
     956:	9300      	str	r3, [sp, #0]
     958:	2300      	movs	r3, #0
     95a:	220e      	movs	r2, #14
     95c:	a802      	add	r0, sp, #8
     95e:	4684      	mov	ip, r0
     960:	4462      	add	r2, ip
     962:	0038      	movs	r0, r7
     964:	4f4c      	ldr	r7, [pc, #304]	; (a98 <usart_init+0x238>)
     966:	47b8      	blx	r7
     968:	e000      	b.n	96c <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
     96a:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
     96c:	2800      	cmp	r0, #0
     96e:	d000      	beq.n	972 <usart_init+0x112>
     970:	e789      	b.n	886 <usart_init+0x26>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     972:	682a      	ldr	r2, [r5, #0]
     974:	9f03      	ldr	r7, [sp, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     976:	8a13      	ldrh	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     978:	b21b      	sxth	r3, r3
     97a:	2b00      	cmp	r3, #0
     97c:	dbfb      	blt.n	976 <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
     97e:	230e      	movs	r3, #14
     980:	aa02      	add	r2, sp, #8
     982:	4694      	mov	ip, r2
     984:	4463      	add	r3, ip
     986:	881b      	ldrh	r3, [r3, #0]
     988:	4642      	mov	r2, r8
     98a:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
     98c:	4653      	mov	r3, sl
     98e:	431f      	orrs	r7, r3
     990:	464b      	mov	r3, r9
     992:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     994:	465b      	mov	r3, fp
     996:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     998:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     99a:	7df3      	ldrb	r3, [r6, #23]
     99c:	2b00      	cmp	r3, #0
     99e:	d101      	bne.n	9a4 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     9a0:	3304      	adds	r3, #4
     9a2:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9a4:	7d31      	ldrb	r1, [r6, #20]
     9a6:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     9a8:	7d73      	ldrb	r3, [r6, #21]
     9aa:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9ac:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     9ae:	7ab1      	ldrb	r1, [r6, #10]
     9b0:	7af2      	ldrb	r2, [r6, #11]
     9b2:	4311      	orrs	r1, r2
     9b4:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     9b6:	8933      	ldrh	r3, [r6, #8]
     9b8:	2bff      	cmp	r3, #255	; 0xff
     9ba:	d003      	beq.n	9c4 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     9bc:	2280      	movs	r2, #128	; 0x80
     9be:	0452      	lsls	r2, r2, #17
     9c0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     9c2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     9c4:	7f33      	ldrb	r3, [r6, #28]
     9c6:	2b00      	cmp	r3, #0
     9c8:	d103      	bne.n	9d2 <usart_init+0x172>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     9ca:	4b34      	ldr	r3, [pc, #208]	; (a9c <usart_init+0x23c>)
     9cc:	789b      	ldrb	r3, [r3, #2]
     9ce:	079b      	lsls	r3, r3, #30
     9d0:	d501      	bpl.n	9d6 <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     9d2:	2380      	movs	r3, #128	; 0x80
     9d4:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     9d6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     9d8:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     9da:	b21b      	sxth	r3, r3
     9dc:	2b00      	cmp	r3, #0
     9de:	dbfb      	blt.n	9d8 <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
     9e0:	4643      	mov	r3, r8
     9e2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     9e6:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     9e8:	b21b      	sxth	r3, r3
     9ea:	2b00      	cmp	r3, #0
     9ec:	dbfb      	blt.n	9e6 <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
     9ee:	4643      	mov	r3, r8
     9f0:	601f      	str	r7, [r3, #0]
     9f2:	ab0a      	add	r3, sp, #40	; 0x28
     9f4:	2280      	movs	r2, #128	; 0x80
     9f6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9f8:	2200      	movs	r2, #0
     9fa:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     9fc:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9fe:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     a00:	6a33      	ldr	r3, [r6, #32]
     a02:	9306      	str	r3, [sp, #24]
     a04:	6a73      	ldr	r3, [r6, #36]	; 0x24
     a06:	9307      	str	r3, [sp, #28]
     a08:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     a0a:	9308      	str	r3, [sp, #32]
     a0c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     a0e:	9303      	str	r3, [sp, #12]
     a10:	9309      	str	r3, [sp, #36]	; 0x24
     a12:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a14:	ae06      	add	r6, sp, #24
     a16:	e006      	b.n	a26 <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a18:	0020      	movs	r0, r4
     a1a:	4b21      	ldr	r3, [pc, #132]	; (aa0 <usart_init+0x240>)
     a1c:	4798      	blx	r3
     a1e:	e007      	b.n	a30 <usart_init+0x1d0>
     a20:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     a22:	2f04      	cmp	r7, #4
     a24:	d00d      	beq.n	a42 <usart_init+0x1e2>
     a26:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a28:	00bb      	lsls	r3, r7, #2
     a2a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     a2c:	2800      	cmp	r0, #0
     a2e:	d0f3      	beq.n	a18 <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
     a30:	1c43      	adds	r3, r0, #1
     a32:	d0f5      	beq.n	a20 <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a34:	a90a      	add	r1, sp, #40	; 0x28
     a36:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a38:	0c00      	lsrs	r0, r0, #16
     a3a:	b2c0      	uxtb	r0, r0
     a3c:	4b19      	ldr	r3, [pc, #100]	; (aa4 <usart_init+0x244>)
     a3e:	4798      	blx	r3
     a40:	e7ee      	b.n	a20 <usart_init+0x1c0>
		module->callback[i]            = NULL;
     a42:	2300      	movs	r3, #0
     a44:	60ab      	str	r3, [r5, #8]
     a46:	60eb      	str	r3, [r5, #12]
     a48:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
     a4a:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     a4c:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     a4e:	2200      	movs	r2, #0
     a50:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     a52:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     a54:	3320      	adds	r3, #32
     a56:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     a58:	3301      	adds	r3, #1
     a5a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     a5c:	3301      	adds	r3, #1
     a5e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     a60:	3301      	adds	r3, #1
     a62:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a64:	6828      	ldr	r0, [r5, #0]
     a66:	4b05      	ldr	r3, [pc, #20]	; (a7c <usart_init+0x21c>)
     a68:	4798      	blx	r3
     a6a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     a6c:	490e      	ldr	r1, [pc, #56]	; (aa8 <usart_init+0x248>)
     a6e:	4b0f      	ldr	r3, [pc, #60]	; (aac <usart_init+0x24c>)
     a70:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     a72:	00a4      	lsls	r4, r4, #2
     a74:	4b0e      	ldr	r3, [pc, #56]	; (ab0 <usart_init+0x250>)
     a76:	50e5      	str	r5, [r4, r3]
	return status_code;
     a78:	2000      	movs	r0, #0
     a7a:	e704      	b.n	886 <usart_init+0x26>
     a7c:	00000771 	.word	0x00000771
     a80:	40000400 	.word	0x40000400
     a84:	00001399 	.word	0x00001399
     a88:	0000130d 	.word	0x0000130d
     a8c:	00000629 	.word	0x00000629
     a90:	000013b5 	.word	0x000013b5
     a94:	0000056b 	.word	0x0000056b
     a98:	00000595 	.word	0x00000595
     a9c:	41002000 	.word	0x41002000
     aa0:	00000675 	.word	0x00000675
     aa4:	00001491 	.word	0x00001491
     aa8:	00000c79 	.word	0x00000c79
     aac:	000007bd 	.word	0x000007bd
     ab0:	2000012c 	.word	0x2000012c

00000ab4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     ab4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     ab6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     ab8:	2a00      	cmp	r2, #0
     aba:	d101      	bne.n	ac0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     abc:	0018      	movs	r0, r3
     abe:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     ac0:	8bc2      	ldrh	r2, [r0, #30]
     ac2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     ac4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     ac6:	2a00      	cmp	r2, #0
     ac8:	d1f8      	bne.n	abc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     aca:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     acc:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     ace:	b21b      	sxth	r3, r3
     ad0:	2b00      	cmp	r3, #0
     ad2:	dbfb      	blt.n	acc <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     ad4:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     ad6:	2102      	movs	r1, #2
     ad8:	7b93      	ldrb	r3, [r2, #14]
     ada:	420b      	tst	r3, r1
     adc:	d0fc      	beq.n	ad8 <usart_write_wait+0x24>
	return STATUS_OK;
     ade:	2300      	movs	r3, #0
     ae0:	e7ec      	b.n	abc <usart_write_wait+0x8>
	...

00000ae4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ae6:	46ce      	mov	lr, r9
     ae8:	4647      	mov	r7, r8
     aea:	b580      	push	{r7, lr}
     aec:	b083      	sub	sp, #12
     aee:	0005      	movs	r5, r0
     af0:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     af2:	2017      	movs	r0, #23
	if (length == 0) {
     af4:	2a00      	cmp	r2, #0
     af6:	d104      	bne.n	b02 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     af8:	b003      	add	sp, #12
     afa:	bc0c      	pop	{r2, r3}
     afc:	4690      	mov	r8, r2
     afe:	4699      	mov	r9, r3
     b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     b02:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     b04:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     b06:	2b00      	cmp	r3, #0
     b08:	d0f6      	beq.n	af8 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     b0a:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     b0c:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     b0e:	b21b      	sxth	r3, r3
     b10:	2b00      	cmp	r3, #0
     b12:	dbfb      	blt.n	b0c <usart_write_buffer_wait+0x28>
	while (length--) {
     b14:	3a01      	subs	r2, #1
     b16:	b293      	uxth	r3, r2
     b18:	4699      	mov	r9, r3
     b1a:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     b1c:	2701      	movs	r7, #1
	while (length--) {
     b1e:	4b20      	ldr	r3, [pc, #128]	; (ba0 <usart_write_buffer_wait+0xbc>)
     b20:	4698      	mov	r8, r3
     b22:	e011      	b.n	b48 <usart_write_buffer_wait+0x64>
		uint16_t data_to_send = tx_data[tx_pos++];
     b24:	1c73      	adds	r3, r6, #1
     b26:	b29b      	uxth	r3, r3
     b28:	9a01      	ldr	r2, [sp, #4]
     b2a:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b2c:	796a      	ldrb	r2, [r5, #5]
     b2e:	2a01      	cmp	r2, #1
     b30:	d017      	beq.n	b62 <usart_write_buffer_wait+0x7e>
		uint16_t data_to_send = tx_data[tx_pos++];
     b32:	b289      	uxth	r1, r1
     b34:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     b36:	0028      	movs	r0, r5
     b38:	4b1a      	ldr	r3, [pc, #104]	; (ba4 <usart_write_buffer_wait+0xc0>)
     b3a:	4798      	blx	r3
	while (length--) {
     b3c:	464b      	mov	r3, r9
     b3e:	3b01      	subs	r3, #1
     b40:	b29b      	uxth	r3, r3
     b42:	4699      	mov	r9, r3
     b44:	4543      	cmp	r3, r8
     b46:	d013      	beq.n	b70 <usart_write_buffer_wait+0x8c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     b48:	7ba3      	ldrb	r3, [r4, #14]
     b4a:	423b      	tst	r3, r7
     b4c:	d1ea      	bne.n	b24 <usart_write_buffer_wait+0x40>
     b4e:	4b14      	ldr	r3, [pc, #80]	; (ba0 <usart_write_buffer_wait+0xbc>)
     b50:	7ba2      	ldrb	r2, [r4, #14]
     b52:	423a      	tst	r2, r7
     b54:	d1e6      	bne.n	b24 <usart_write_buffer_wait+0x40>
			} else if (i == USART_TIMEOUT) {
     b56:	2b01      	cmp	r3, #1
     b58:	d019      	beq.n	b8e <usart_write_buffer_wait+0xaa>
     b5a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     b5c:	2b00      	cmp	r3, #0
     b5e:	d1f7      	bne.n	b50 <usart_write_buffer_wait+0x6c>
     b60:	e7e0      	b.n	b24 <usart_write_buffer_wait+0x40>
			data_to_send |= (tx_data[tx_pos++] << 8);
     b62:	3602      	adds	r6, #2
     b64:	b2b6      	uxth	r6, r6
     b66:	9a01      	ldr	r2, [sp, #4]
     b68:	5cd3      	ldrb	r3, [r2, r3]
     b6a:	021b      	lsls	r3, r3, #8
     b6c:	4319      	orrs	r1, r3
     b6e:	e7e2      	b.n	b36 <usart_write_buffer_wait+0x52>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     b70:	7ba3      	ldrb	r3, [r4, #14]
     b72:	079b      	lsls	r3, r3, #30
     b74:	d40d      	bmi.n	b92 <usart_write_buffer_wait+0xae>
     b76:	4b0a      	ldr	r3, [pc, #40]	; (ba0 <usart_write_buffer_wait+0xbc>)
     b78:	2102      	movs	r1, #2
     b7a:	7ba2      	ldrb	r2, [r4, #14]
     b7c:	420a      	tst	r2, r1
     b7e:	d10a      	bne.n	b96 <usart_write_buffer_wait+0xb2>
		} else if (i == USART_TIMEOUT) {
     b80:	2b01      	cmp	r3, #1
     b82:	d00a      	beq.n	b9a <usart_write_buffer_wait+0xb6>
     b84:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     b86:	2b00      	cmp	r3, #0
     b88:	d1f7      	bne.n	b7a <usart_write_buffer_wait+0x96>
	return STATUS_OK;
     b8a:	2000      	movs	r0, #0
     b8c:	e7b4      	b.n	af8 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     b8e:	2012      	movs	r0, #18
     b90:	e7b2      	b.n	af8 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     b92:	2000      	movs	r0, #0
     b94:	e7b0      	b.n	af8 <usart_write_buffer_wait+0x14>
     b96:	2000      	movs	r0, #0
     b98:	e7ae      	b.n	af8 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     b9a:	2012      	movs	r0, #18
     b9c:	e7ac      	b.n	af8 <usart_write_buffer_wait+0x14>
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	0000ffff 	.word	0x0000ffff
     ba4:	00000ab5 	.word	0x00000ab5

00000ba8 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     baa:	0006      	movs	r6, r0
     bac:	000c      	movs	r4, r1
     bae:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bb0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     bb2:	4b0a      	ldr	r3, [pc, #40]	; (bdc <_usart_write_buffer+0x34>)
     bb4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     bb6:	8bf3      	ldrh	r3, [r6, #30]
     bb8:	b29b      	uxth	r3, r3
     bba:	2b00      	cmp	r3, #0
     bbc:	d003      	beq.n	bc6 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
     bbe:	4b08      	ldr	r3, [pc, #32]	; (be0 <_usart_write_buffer+0x38>)
     bc0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     bc2:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     bc6:	83f5      	strh	r5, [r6, #30]
     bc8:	4b05      	ldr	r3, [pc, #20]	; (be0 <_usart_write_buffer+0x38>)
     bca:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     bcc:	61b4      	str	r4, [r6, #24]
	module->tx_status                  = STATUS_BUSY;
     bce:	2205      	movs	r2, #5
     bd0:	2323      	movs	r3, #35	; 0x23
     bd2:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     bd4:	3b22      	subs	r3, #34	; 0x22
     bd6:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
     bd8:	2000      	movs	r0, #0
     bda:	e7f3      	b.n	bc4 <_usart_write_buffer+0x1c>
     bdc:	00000149 	.word	0x00000149
     be0:	00000189 	.word	0x00000189

00000be4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     be6:	0006      	movs	r6, r0
     be8:	000c      	movs	r4, r1
     bea:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bec:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     bee:	4b0a      	ldr	r3, [pc, #40]	; (c18 <_usart_read_buffer+0x34>)
     bf0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     bf2:	8bb3      	ldrh	r3, [r6, #28]
     bf4:	b29b      	uxth	r3, r3
     bf6:	2b00      	cmp	r3, #0
     bf8:	d003      	beq.n	c02 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     bfa:	4b08      	ldr	r3, [pc, #32]	; (c1c <_usart_read_buffer+0x38>)
     bfc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     bfe:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     c02:	83b5      	strh	r5, [r6, #28]
     c04:	4b05      	ldr	r3, [pc, #20]	; (c1c <_usart_read_buffer+0x38>)
     c06:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     c08:	6174      	str	r4, [r6, #20]
	module->rx_status                  = STATUS_BUSY;
     c0a:	2205      	movs	r2, #5
     c0c:	2322      	movs	r3, #34	; 0x22
     c0e:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     c10:	3b1e      	subs	r3, #30
     c12:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
     c14:	2000      	movs	r0, #0
     c16:	e7f3      	b.n	c00 <_usart_read_buffer+0x1c>
     c18:	00000149 	.word	0x00000149
     c1c:	00000189 	.word	0x00000189

00000c20 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     c20:	1c93      	adds	r3, r2, #2
     c22:	009b      	lsls	r3, r3, #2
     c24:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     c26:	2120      	movs	r1, #32
     c28:	2301      	movs	r3, #1
     c2a:	4093      	lsls	r3, r2
     c2c:	001a      	movs	r2, r3
     c2e:	5c43      	ldrb	r3, [r0, r1]
     c30:	4313      	orrs	r3, r2
     c32:	5443      	strb	r3, [r0, r1]
}
     c34:	4770      	bx	lr
	...

00000c38 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     c38:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     c3a:	2317      	movs	r3, #23
	if (length == 0) {
     c3c:	2a00      	cmp	r2, #0
     c3e:	d101      	bne.n	c44 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     c40:	0018      	movs	r0, r3
     c42:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     c44:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     c46:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     c48:	2c00      	cmp	r4, #0
     c4a:	d0f9      	beq.n	c40 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     c4c:	4b01      	ldr	r3, [pc, #4]	; (c54 <usart_write_buffer_job+0x1c>)
     c4e:	4798      	blx	r3
     c50:	0003      	movs	r3, r0
     c52:	e7f5      	b.n	c40 <usart_write_buffer_job+0x8>
     c54:	00000ba9 	.word	0x00000ba9

00000c58 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     c58:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     c5a:	2317      	movs	r3, #23
	if (length == 0) {
     c5c:	2a00      	cmp	r2, #0
     c5e:	d101      	bne.n	c64 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     c60:	0018      	movs	r0, r3
     c62:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     c64:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     c66:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     c68:	2c00      	cmp	r4, #0
     c6a:	d0f9      	beq.n	c60 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     c6c:	4b01      	ldr	r3, [pc, #4]	; (c74 <usart_read_buffer_job+0x1c>)
     c6e:	4798      	blx	r3
     c70:	0003      	movs	r3, r0
     c72:	e7f5      	b.n	c60 <usart_read_buffer_job+0x8>
     c74:	00000be5 	.word	0x00000be5

00000c78 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     c7a:	0080      	lsls	r0, r0, #2
     c7c:	4b46      	ldr	r3, [pc, #280]	; (d98 <_usart_interrupt_handler+0x120>)
     c7e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c80:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     c82:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     c84:	b21b      	sxth	r3, r3
     c86:	2b00      	cmp	r3, #0
     c88:	dbfb      	blt.n	c82 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c8a:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
     c8c:	7b66      	ldrb	r6, [r4, #13]
     c8e:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     c90:	2320      	movs	r3, #32
     c92:	5ceb      	ldrb	r3, [r5, r3]
     c94:	2221      	movs	r2, #33	; 0x21
     c96:	5caf      	ldrb	r7, [r5, r2]
     c98:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c9a:	07f3      	lsls	r3, r6, #31
     c9c:	d522      	bpl.n	ce4 <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
     c9e:	8beb      	ldrh	r3, [r5, #30]
     ca0:	b29b      	uxth	r3, r3
     ca2:	2b00      	cmp	r3, #0
     ca4:	d01c      	beq.n	ce0 <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ca6:	69aa      	ldr	r2, [r5, #24]
     ca8:	7813      	ldrb	r3, [r2, #0]
     caa:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     cac:	1c51      	adds	r1, r2, #1
     cae:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     cb0:	7969      	ldrb	r1, [r5, #5]
     cb2:	2901      	cmp	r1, #1
     cb4:	d00e      	beq.n	cd4 <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     cb6:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     cb8:	05db      	lsls	r3, r3, #23
     cba:	0ddb      	lsrs	r3, r3, #23
     cbc:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     cbe:	8beb      	ldrh	r3, [r5, #30]
     cc0:	3b01      	subs	r3, #1
     cc2:	b29b      	uxth	r3, r3
     cc4:	83eb      	strh	r3, [r5, #30]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d10c      	bne.n	ce4 <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     cca:	3301      	adds	r3, #1
     ccc:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     cce:	3301      	adds	r3, #1
     cd0:	7363      	strb	r3, [r4, #13]
     cd2:	e007      	b.n	ce4 <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     cd4:	7851      	ldrb	r1, [r2, #1]
     cd6:	0209      	lsls	r1, r1, #8
     cd8:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     cda:	3202      	adds	r2, #2
     cdc:	61aa      	str	r2, [r5, #24]
     cde:	e7eb      	b.n	cb8 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ce0:	2301      	movs	r3, #1
     ce2:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     ce4:	07b3      	lsls	r3, r6, #30
     ce6:	d506      	bpl.n	cf6 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     ce8:	2302      	movs	r3, #2
     cea:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     cec:	2200      	movs	r2, #0
     cee:	3321      	adds	r3, #33	; 0x21
     cf0:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     cf2:	07fb      	lsls	r3, r7, #31
     cf4:	d416      	bmi.n	d24 <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     cf6:	0773      	lsls	r3, r6, #29
     cf8:	d54d      	bpl.n	d96 <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
     cfa:	8bab      	ldrh	r3, [r5, #28]
     cfc:	b29b      	uxth	r3, r3
     cfe:	2b00      	cmp	r3, #0
     d00:	d047      	beq.n	d92 <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d02:	8a23      	ldrh	r3, [r4, #16]
     d04:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     d06:	075a      	lsls	r2, r3, #29
     d08:	d020      	beq.n	d4c <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     d0a:	079a      	lsls	r2, r3, #30
     d0c:	d50e      	bpl.n	d2c <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     d0e:	221a      	movs	r2, #26
     d10:	2322      	movs	r3, #34	; 0x22
     d12:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d14:	3b20      	subs	r3, #32
     d16:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     d18:	077b      	lsls	r3, r7, #29
     d1a:	d53c      	bpl.n	d96 <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     d1c:	692b      	ldr	r3, [r5, #16]
     d1e:	0028      	movs	r0, r5
     d20:	4798      	blx	r3
     d22:	e038      	b.n	d96 <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     d24:	0028      	movs	r0, r5
     d26:	68ab      	ldr	r3, [r5, #8]
     d28:	4798      	blx	r3
     d2a:	e7e4      	b.n	cf6 <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d2c:	075a      	lsls	r2, r3, #29
     d2e:	d505      	bpl.n	d3c <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
     d30:	221e      	movs	r2, #30
     d32:	2322      	movs	r3, #34	; 0x22
     d34:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     d36:	3b1e      	subs	r3, #30
     d38:	8223      	strh	r3, [r4, #16]
     d3a:	e7ed      	b.n	d18 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d3c:	07db      	lsls	r3, r3, #31
     d3e:	d5eb      	bpl.n	d18 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     d40:	2213      	movs	r2, #19
     d42:	2322      	movs	r3, #34	; 0x22
     d44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     d46:	3b21      	subs	r3, #33	; 0x21
     d48:	8223      	strh	r3, [r4, #16]
     d4a:	e7e5      	b.n	d18 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d4c:	8b23      	ldrh	r3, [r4, #24]
     d4e:	05db      	lsls	r3, r3, #23
     d50:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     d52:	b2da      	uxtb	r2, r3
     d54:	6969      	ldr	r1, [r5, #20]
     d56:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     d58:	696a      	ldr	r2, [r5, #20]
     d5a:	1c51      	adds	r1, r2, #1
     d5c:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d5e:	7969      	ldrb	r1, [r5, #5]
     d60:	2901      	cmp	r1, #1
     d62:	d010      	beq.n	d86 <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     d64:	8bab      	ldrh	r3, [r5, #28]
     d66:	3b01      	subs	r3, #1
     d68:	b29b      	uxth	r3, r3
     d6a:	83ab      	strh	r3, [r5, #28]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d112      	bne.n	d96 <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d70:	3304      	adds	r3, #4
     d72:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
     d74:	2200      	movs	r2, #0
     d76:	331e      	adds	r3, #30
     d78:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     d7a:	07bb      	lsls	r3, r7, #30
     d7c:	d50b      	bpl.n	d96 <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     d7e:	68eb      	ldr	r3, [r5, #12]
     d80:	0028      	movs	r0, r5
     d82:	4798      	blx	r3
     d84:	e007      	b.n	d96 <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     d86:	0a1b      	lsrs	r3, r3, #8
     d88:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     d8a:	696b      	ldr	r3, [r5, #20]
     d8c:	3301      	adds	r3, #1
     d8e:	616b      	str	r3, [r5, #20]
     d90:	e7e8      	b.n	d64 <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d92:	2304      	movs	r3, #4
     d94:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d98:	2000012c 	.word	0x2000012c

00000d9c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     d9c:	b510      	push	{r4, lr}
	switch (clock_source) {
     d9e:	2807      	cmp	r0, #7
     da0:	d803      	bhi.n	daa <system_clock_source_get_hz+0xe>
     da2:	0080      	lsls	r0, r0, #2
     da4:	4b16      	ldr	r3, [pc, #88]	; (e00 <system_clock_source_get_hz+0x64>)
     da6:	581b      	ldr	r3, [r3, r0]
     da8:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
     daa:	2000      	movs	r0, #0
     dac:	e027      	b.n	dfe <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
     dae:	4b15      	ldr	r3, [pc, #84]	; (e04 <system_clock_source_get_hz+0x68>)
     db0:	68d8      	ldr	r0, [r3, #12]
     db2:	e024      	b.n	dfe <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     db4:	4b14      	ldr	r3, [pc, #80]	; (e08 <system_clock_source_get_hz+0x6c>)
     db6:	6a1b      	ldr	r3, [r3, #32]
     db8:	059b      	lsls	r3, r3, #22
     dba:	0f9b      	lsrs	r3, r3, #30
     dbc:	4813      	ldr	r0, [pc, #76]	; (e0c <system_clock_source_get_hz+0x70>)
     dbe:	40d8      	lsrs	r0, r3
     dc0:	e01d      	b.n	dfe <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
     dc2:	4b10      	ldr	r3, [pc, #64]	; (e04 <system_clock_source_get_hz+0x68>)
     dc4:	6918      	ldr	r0, [r3, #16]
     dc6:	e01a      	b.n	dfe <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     dc8:	4b0e      	ldr	r3, [pc, #56]	; (e04 <system_clock_source_get_hz+0x68>)
     dca:	681b      	ldr	r3, [r3, #0]
			return 0;
     dcc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     dce:	079b      	lsls	r3, r3, #30
     dd0:	d515      	bpl.n	dfe <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dd2:	490d      	ldr	r1, [pc, #52]	; (e08 <system_clock_source_get_hz+0x6c>)
     dd4:	2210      	movs	r2, #16
     dd6:	68cb      	ldr	r3, [r1, #12]
     dd8:	421a      	tst	r2, r3
     dda:	d0fc      	beq.n	dd6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     ddc:	4b09      	ldr	r3, [pc, #36]	; (e04 <system_clock_source_get_hz+0x68>)
     dde:	681b      	ldr	r3, [r3, #0]
     de0:	075b      	lsls	r3, r3, #29
     de2:	d401      	bmi.n	de8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     de4:	480a      	ldr	r0, [pc, #40]	; (e10 <system_clock_source_get_hz+0x74>)
     de6:	e00a      	b.n	dfe <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     de8:	2000      	movs	r0, #0
     dea:	4b0a      	ldr	r3, [pc, #40]	; (e14 <system_clock_source_get_hz+0x78>)
     dec:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     dee:	4b05      	ldr	r3, [pc, #20]	; (e04 <system_clock_source_get_hz+0x68>)
     df0:	689b      	ldr	r3, [r3, #8]
     df2:	041b      	lsls	r3, r3, #16
     df4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     df6:	4358      	muls	r0, r3
     df8:	e001      	b.n	dfe <system_clock_source_get_hz+0x62>
		return 32768UL;
     dfa:	2080      	movs	r0, #128	; 0x80
     dfc:	0200      	lsls	r0, r0, #8
	}
}
     dfe:	bd10      	pop	{r4, pc}
     e00:	0000287c 	.word	0x0000287c
     e04:	200000c8 	.word	0x200000c8
     e08:	40000800 	.word	0x40000800
     e0c:	007a1200 	.word	0x007a1200
     e10:	02dc6c00 	.word	0x02dc6c00
     e14:	000013b5 	.word	0x000013b5

00000e18 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     e18:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     e1a:	490c      	ldr	r1, [pc, #48]	; (e4c <system_clock_source_osc8m_set_config+0x34>)
     e1c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     e1e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e20:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     e22:	7840      	ldrb	r0, [r0, #1]
     e24:	2201      	movs	r2, #1
     e26:	4010      	ands	r0, r2
     e28:	0180      	lsls	r0, r0, #6
     e2a:	2640      	movs	r6, #64	; 0x40
     e2c:	43b3      	bics	r3, r6
     e2e:	4303      	orrs	r3, r0
     e30:	402a      	ands	r2, r5
     e32:	01d2      	lsls	r2, r2, #7
     e34:	2080      	movs	r0, #128	; 0x80
     e36:	4383      	bics	r3, r0
     e38:	4313      	orrs	r3, r2
     e3a:	2203      	movs	r2, #3
     e3c:	4022      	ands	r2, r4
     e3e:	0212      	lsls	r2, r2, #8
     e40:	4803      	ldr	r0, [pc, #12]	; (e50 <system_clock_source_osc8m_set_config+0x38>)
     e42:	4003      	ands	r3, r0
     e44:	4313      	orrs	r3, r2
     e46:	620b      	str	r3, [r1, #32]
}
     e48:	bd70      	pop	{r4, r5, r6, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	40000800 	.word	0x40000800
     e50:	fffffcff 	.word	0xfffffcff

00000e54 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     e54:	b5f0      	push	{r4, r5, r6, r7, lr}
     e56:	46ce      	mov	lr, r9
     e58:	4647      	mov	r7, r8
     e5a:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     e5c:	4b19      	ldr	r3, [pc, #100]	; (ec4 <system_clock_source_osc32k_set_config+0x70>)
     e5e:	4699      	mov	r9, r3
     e60:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     e62:	7841      	ldrb	r1, [r0, #1]
     e64:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     e66:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e68:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     e6a:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     e6c:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
     e6e:	7880      	ldrb	r0, [r0, #2]
     e70:	2101      	movs	r1, #1
     e72:	4008      	ands	r0, r1
     e74:	0080      	lsls	r0, r0, #2
     e76:	2204      	movs	r2, #4
     e78:	4393      	bics	r3, r2
     e7a:	4303      	orrs	r3, r0
     e7c:	4660      	mov	r0, ip
     e7e:	4008      	ands	r0, r1
     e80:	00c0      	lsls	r0, r0, #3
     e82:	3204      	adds	r2, #4
     e84:	4393      	bics	r3, r2
     e86:	4303      	orrs	r3, r0
     e88:	0038      	movs	r0, r7
     e8a:	4008      	ands	r0, r1
     e8c:	0180      	lsls	r0, r0, #6
     e8e:	2740      	movs	r7, #64	; 0x40
     e90:	43bb      	bics	r3, r7
     e92:	4303      	orrs	r3, r0
     e94:	0030      	movs	r0, r6
     e96:	4008      	ands	r0, r1
     e98:	01c0      	lsls	r0, r0, #7
     e9a:	2680      	movs	r6, #128	; 0x80
     e9c:	43b3      	bics	r3, r6
     e9e:	4303      	orrs	r3, r0
     ea0:	2007      	movs	r0, #7
     ea2:	4005      	ands	r5, r0
     ea4:	022d      	lsls	r5, r5, #8
     ea6:	4808      	ldr	r0, [pc, #32]	; (ec8 <system_clock_source_osc32k_set_config+0x74>)
     ea8:	4003      	ands	r3, r0
     eaa:	432b      	orrs	r3, r5
     eac:	4021      	ands	r1, r4
     eae:	0309      	lsls	r1, r1, #12
     eb0:	4806      	ldr	r0, [pc, #24]	; (ecc <system_clock_source_osc32k_set_config+0x78>)
     eb2:	4003      	ands	r3, r0
     eb4:	430b      	orrs	r3, r1
     eb6:	464a      	mov	r2, r9
     eb8:	6193      	str	r3, [r2, #24]
}
     eba:	bc0c      	pop	{r2, r3}
     ebc:	4690      	mov	r8, r2
     ebe:	4699      	mov	r9, r3
     ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	40000800 	.word	0x40000800
     ec8:	fffff8ff 	.word	0xfffff8ff
     ecc:	ffffefff 	.word	0xffffefff

00000ed0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     ed0:	b510      	push	{r4, lr}
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
	return DSU->DID.reg;
     ed2:	4b26      	ldr	r3, [pc, #152]	; (f6c <system_clock_source_dfll_set_config+0x9c>)
     ed4:	699a      	ldr	r2, [r3, #24]

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
     ed6:	0512      	lsls	r2, r2, #20
     ed8:	0f12      	lsrs	r2, r2, #28

	if (rev < _SYSTEM_MCU_REVISION_D) {
     eda:	2a02      	cmp	r2, #2
     edc:	d818      	bhi.n	f10 <system_clock_source_dfll_set_config+0x40>
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
     ede:	7a03      	ldrb	r3, [r0, #8]
     ee0:	021b      	lsls	r3, r3, #8
     ee2:	21f8      	movs	r1, #248	; 0xf8
     ee4:	0149      	lsls	r1, r1, #5
     ee6:	400b      	ands	r3, r1
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
     ee8:	7a81      	ldrb	r1, [r0, #10]
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
     eea:	430b      	orrs	r3, r1
		_system_clock_inst.dfll.val =
     eec:	4920      	ldr	r1, [pc, #128]	; (f70 <system_clock_source_dfll_set_config+0xa0>)
     eee:	604b      	str	r3, [r1, #4]
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     ef0:	7983      	ldrb	r3, [r0, #6]
     ef2:	79c1      	ldrb	r1, [r0, #7]
     ef4:	430b      	orrs	r3, r1
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     ef6:	8841      	ldrh	r1, [r0, #2]
     ef8:	8884      	ldrh	r4, [r0, #4]
     efa:	4321      	orrs	r1, r4
     efc:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     efe:	7841      	ldrb	r1, [r0, #1]
     f00:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
     f02:	430b      	orrs	r3, r1
	_system_clock_inst.dfll.control =
     f04:	491a      	ldr	r1, [pc, #104]	; (f70 <system_clock_source_dfll_set_config+0xa0>)
     f06:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     f08:	7803      	ldrb	r3, [r0, #0]
     f0a:	2b04      	cmp	r3, #4
     f0c:	d00a      	beq.n	f24 <system_clock_source_dfll_set_config+0x54>
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
}
     f0e:	bd10      	pop	{r4, pc}
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
     f10:	7a03      	ldrb	r3, [r0, #8]
     f12:	069b      	lsls	r3, r3, #26
     f14:	0c1b      	lsrs	r3, r3, #16
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
     f16:	8941      	ldrh	r1, [r0, #10]
     f18:	0589      	lsls	r1, r1, #22
     f1a:	0d89      	lsrs	r1, r1, #22
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
     f1c:	430b      	orrs	r3, r1
		_system_clock_inst.dfll.val =
     f1e:	4914      	ldr	r1, [pc, #80]	; (f70 <system_clock_source_dfll_set_config+0xa0>)
     f20:	604b      	str	r3, [r1, #4]
     f22:	e7e5      	b.n	ef0 <system_clock_source_dfll_set_config+0x20>
		if(rev < _SYSTEM_MCU_REVISION_D) {
     f24:	2a02      	cmp	r2, #2
     f26:	d814      	bhi.n	f52 <system_clock_source_dfll_set_config+0x82>
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
     f28:	7b03      	ldrb	r3, [r0, #12]
     f2a:	061b      	lsls	r3, r3, #24
     f2c:	22f8      	movs	r2, #248	; 0xf8
     f2e:	0552      	lsls	r2, r2, #21
     f30:	4013      	ands	r3, r2
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
     f32:	89c2      	ldrh	r2, [r0, #14]
     f34:	0412      	lsls	r2, r2, #16
     f36:	21ff      	movs	r1, #255	; 0xff
     f38:	0409      	lsls	r1, r1, #16
     f3a:	400a      	ands	r2, r1
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
     f3c:	4313      	orrs	r3, r2
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     f3e:	8a02      	ldrh	r2, [r0, #16]
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
     f40:	4313      	orrs	r3, r2
			_system_clock_inst.dfll.mul =
     f42:	4a0b      	ldr	r2, [pc, #44]	; (f70 <system_clock_source_dfll_set_config+0xa0>)
     f44:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     f46:	4a0a      	ldr	r2, [pc, #40]	; (f70 <system_clock_source_dfll_set_config+0xa0>)
     f48:	6813      	ldr	r3, [r2, #0]
     f4a:	2104      	movs	r1, #4
     f4c:	430b      	orrs	r3, r1
     f4e:	6013      	str	r3, [r2, #0]
}
     f50:	e7dd      	b.n	f0e <system_clock_source_dfll_set_config+0x3e>
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
     f52:	7b03      	ldrb	r3, [r0, #12]
     f54:	069b      	lsls	r3, r3, #26
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     f56:	8a02      	ldrh	r2, [r0, #16]
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
     f58:	4313      	orrs	r3, r2
     f5a:	89c2      	ldrh	r2, [r0, #14]
     f5c:	0412      	lsls	r2, r2, #16
     f5e:	4905      	ldr	r1, [pc, #20]	; (f74 <system_clock_source_dfll_set_config+0xa4>)
     f60:	400a      	ands	r2, r1
     f62:	4313      	orrs	r3, r2
			_system_clock_inst.dfll.mul =
     f64:	4a02      	ldr	r2, [pc, #8]	; (f70 <system_clock_source_dfll_set_config+0xa0>)
     f66:	6093      	str	r3, [r2, #8]
     f68:	e7ed      	b.n	f46 <system_clock_source_dfll_set_config+0x76>
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	41002000 	.word	0x41002000
     f70:	200000c8 	.word	0x200000c8
     f74:	03ff0000 	.word	0x03ff0000

00000f78 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     f78:	2807      	cmp	r0, #7
     f7a:	d803      	bhi.n	f84 <system_clock_source_enable+0xc>
     f7c:	0080      	lsls	r0, r0, #2
     f7e:	4b1e      	ldr	r3, [pc, #120]	; (ff8 <system_clock_source_enable+0x80>)
     f80:	581b      	ldr	r3, [r3, r0]
     f82:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f84:	2017      	movs	r0, #23
     f86:	e036      	b.n	ff6 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     f88:	4a1c      	ldr	r2, [pc, #112]	; (ffc <system_clock_source_enable+0x84>)
     f8a:	6a13      	ldr	r3, [r2, #32]
     f8c:	2102      	movs	r1, #2
     f8e:	430b      	orrs	r3, r1
     f90:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     f92:	2000      	movs	r0, #0
     f94:	e02f      	b.n	ff6 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     f96:	4a19      	ldr	r2, [pc, #100]	; (ffc <system_clock_source_enable+0x84>)
     f98:	6993      	ldr	r3, [r2, #24]
     f9a:	2102      	movs	r1, #2
     f9c:	430b      	orrs	r3, r1
     f9e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     fa0:	2000      	movs	r0, #0
		break;
     fa2:	e028      	b.n	ff6 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     fa4:	4a15      	ldr	r2, [pc, #84]	; (ffc <system_clock_source_enable+0x84>)
     fa6:	8a13      	ldrh	r3, [r2, #16]
     fa8:	2102      	movs	r1, #2
     faa:	430b      	orrs	r3, r1
     fac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     fae:	2000      	movs	r0, #0
		break;
     fb0:	e021      	b.n	ff6 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     fb2:	4a12      	ldr	r2, [pc, #72]	; (ffc <system_clock_source_enable+0x84>)
     fb4:	8a93      	ldrh	r3, [r2, #20]
     fb6:	2102      	movs	r1, #2
     fb8:	430b      	orrs	r3, r1
     fba:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     fbc:	2000      	movs	r0, #0
		break;
     fbe:	e01a      	b.n	ff6 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     fc0:	4b0f      	ldr	r3, [pc, #60]	; (1000 <system_clock_source_enable+0x88>)
     fc2:	681a      	ldr	r2, [r3, #0]
     fc4:	2102      	movs	r1, #2
     fc6:	430a      	orrs	r2, r1
     fc8:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     fca:	681b      	ldr	r3, [r3, #0]
     fcc:	4a0d      	ldr	r2, [pc, #52]	; (1004 <system_clock_source_enable+0x8c>)
     fce:	4013      	ands	r3, r2
     fd0:	4a0a      	ldr	r2, [pc, #40]	; (ffc <system_clock_source_enable+0x84>)
     fd2:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     fd4:	0011      	movs	r1, r2
     fd6:	2210      	movs	r2, #16
     fd8:	68cb      	ldr	r3, [r1, #12]
     fda:	421a      	tst	r2, r3
     fdc:	d0fc      	beq.n	fd8 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     fde:	4a08      	ldr	r2, [pc, #32]	; (1000 <system_clock_source_enable+0x88>)
     fe0:	6891      	ldr	r1, [r2, #8]
     fe2:	4b06      	ldr	r3, [pc, #24]	; (ffc <system_clock_source_enable+0x84>)
     fe4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     fe6:	6851      	ldr	r1, [r2, #4]
     fe8:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     fea:	6812      	ldr	r2, [r2, #0]
     fec:	b292      	uxth	r2, r2
     fee:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
     ff0:	2000      	movs	r0, #0
     ff2:	e000      	b.n	ff6 <system_clock_source_enable+0x7e>
		return STATUS_OK;
     ff4:	2000      	movs	r0, #0
}
     ff6:	4770      	bx	lr
     ff8:	0000289c 	.word	0x0000289c
     ffc:	40000800 	.word	0x40000800
    1000:	200000c8 	.word	0x200000c8
    1004:	0000ff7f 	.word	0x0000ff7f

00001008 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1008:	b570      	push	{r4, r5, r6, lr}
    100a:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    100c:	22c2      	movs	r2, #194	; 0xc2
    100e:	00d2      	lsls	r2, r2, #3
    1010:	4b45      	ldr	r3, [pc, #276]	; (1128 <system_clock_init+0x120>)
    1012:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1014:	4a45      	ldr	r2, [pc, #276]	; (112c <system_clock_init+0x124>)
    1016:	6853      	ldr	r3, [r2, #4]
    1018:	211e      	movs	r1, #30
    101a:	438b      	bics	r3, r1
    101c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    101e:	2201      	movs	r2, #1
    1020:	ab01      	add	r3, sp, #4
    1022:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1024:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1026:	4d42      	ldr	r5, [pc, #264]	; (1130 <system_clock_init+0x128>)
    1028:	b2e0      	uxtb	r0, r4
    102a:	a901      	add	r1, sp, #4
    102c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    102e:	3401      	adds	r4, #1
    1030:	2c1c      	cmp	r4, #28
    1032:	d1f9      	bne.n	1028 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32KCAL_ADDR >> FUSES_OSC32KCAL_Pos);
    1034:	4b3f      	ldr	r3, [pc, #252]	; (1134 <system_clock_init+0x12c>)
    1036:	681b      	ldr	r3, [r3, #0]
    1038:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    103a:	493b      	ldr	r1, [pc, #236]	; (1128 <system_clock_init+0x120>)
    103c:	698a      	ldr	r2, [r1, #24]
    103e:	0e5b      	lsrs	r3, r3, #25
    1040:	041b      	lsls	r3, r3, #16
    1042:	483d      	ldr	r0, [pc, #244]	; (1138 <system_clock_init+0x130>)
    1044:	4002      	ands	r2, r0
    1046:	4313      	orrs	r3, r2
    1048:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    104a:	a80a      	add	r0, sp, #40	; 0x28
    104c:	3c1b      	subs	r4, #27
    104e:	7044      	strb	r4, [r0, #1]
	config->enable_32khz_output = true;
    1050:	7084      	strb	r4, [r0, #2]
	config->run_in_standby      = false;
    1052:	2500      	movs	r5, #0
    1054:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    1056:	7104      	strb	r4, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1058:	2607      	movs	r6, #7
    105a:	7006      	strb	r6, [r0, #0]
	config->write_once          = false;
    105c:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    105e:	4b37      	ldr	r3, [pc, #220]	; (113c <system_clock_init+0x134>)
    1060:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1062:	2004      	movs	r0, #4
    1064:	4b36      	ldr	r3, [pc, #216]	; (1140 <system_clock_init+0x138>)
    1066:	4798      	blx	r3
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    1068:	ab05      	add	r3, sp, #20
    106a:	701d      	strb	r5, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    106c:	2200      	movs	r2, #0
    106e:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1070:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1072:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1074:	71da      	strb	r2, [r3, #7]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    1076:	721e      	strb	r6, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1078:	213f      	movs	r1, #63	; 0x3f
    107a:	8159      	strh	r1, [r3, #10]
	config->coarse_max_step = 1;
    107c:	731c      	strb	r4, [r3, #12]
	config->fine_max_step   = 1;
    107e:	81dc      	strh	r4, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    1080:	3939      	subs	r1, #57	; 0x39
    1082:	8219      	strh	r1, [r3, #16]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    1084:	705a      	strb	r2, [r3, #1]
    1086:	4b2f      	ldr	r3, [pc, #188]	; (1144 <system_clock_init+0x13c>)
    1088:	699b      	ldr	r3, [r3, #24]

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    108a:	051b      	lsls	r3, r3, #20
    108c:	0f1b      	lsrs	r3, r3, #28

	if (rev >= _SYSTEM_MCU_REVISION_D) {
    108e:	2b02      	cmp	r3, #2
    1090:	d906      	bls.n	10a0 <system_clock_init+0x98>
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

		uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1092:	4b28      	ldr	r3, [pc, #160]	; (1134 <system_clock_init+0x12c>)
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	0e9b      	lsrs	r3, r3, #26
				+ (NVM_DFLL_COARSE_POS / 32))
			>> (NVM_DFLL_COARSE_POS % 32))
			& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
		/* In some revision chip, the coarse calibration value is not correct. */
		if (coarse == 0x3f) {
    1098:	2b3f      	cmp	r3, #63	; 0x3f
    109a:	d043      	beq.n	1124 <system_clock_init+0x11c>
			coarse = 0x1f;
		}
		dfll_conf.coarse_value = coarse;
    109c:	aa05      	add	r2, sp, #20
    109e:	7213      	strb	r3, [r2, #8]
	}

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    10a0:	a805      	add	r0, sp, #20
    10a2:	2380      	movs	r3, #128	; 0x80
    10a4:	009b      	lsls	r3, r3, #2
    10a6:	8143      	strh	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    10a8:	3bfa      	subs	r3, #250	; 0xfa
    10aa:	3bff      	subs	r3, #255	; 0xff
    10ac:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    10ae:	3338      	adds	r3, #56	; 0x38
    10b0:	81c3      	strh	r3, [r0, #14]

	system_clock_source_dfll_set_config(&dfll_conf);
    10b2:	4b25      	ldr	r3, [pc, #148]	; (1148 <system_clock_init+0x140>)
    10b4:	4798      	blx	r3
	config->run_in_standby  = false;
    10b6:	a804      	add	r0, sp, #16
    10b8:	2400      	movs	r4, #0
    10ba:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    10bc:	2601      	movs	r6, #1
    10be:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    10c0:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    10c2:	4b22      	ldr	r3, [pc, #136]	; (114c <system_clock_init+0x144>)
    10c4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    10c6:	2006      	movs	r0, #6
    10c8:	4d1d      	ldr	r5, [pc, #116]	; (1140 <system_clock_init+0x138>)
    10ca:	47a8      	blx	r5


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    10cc:	4b20      	ldr	r3, [pc, #128]	; (1150 <system_clock_init+0x148>)
    10ce:	4798      	blx	r3
	config->division_factor    = 1;
    10d0:	a901      	add	r1, sp, #4
    10d2:	604e      	str	r6, [r1, #4]
	config->high_when_disabled = false;
    10d4:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    10d6:	2306      	movs	r3, #6
    10d8:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    10da:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    10dc:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    10de:	2003      	movs	r0, #3
    10e0:	4b1c      	ldr	r3, [pc, #112]	; (1154 <system_clock_init+0x14c>)
    10e2:	4798      	blx	r3
    10e4:	2003      	movs	r0, #3
    10e6:	4b1c      	ldr	r3, [pc, #112]	; (1158 <system_clock_init+0x150>)
    10e8:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    10ea:	2007      	movs	r0, #7
    10ec:	47a8      	blx	r5
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    10ee:	490e      	ldr	r1, [pc, #56]	; (1128 <system_clock_init+0x120>)
    10f0:	2210      	movs	r2, #16
    10f2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    10f4:	421a      	tst	r2, r3
    10f6:	d0fc      	beq.n	10f2 <system_clock_init+0xea>
	PM->CPUSEL.reg = (uint32_t)divider;
    10f8:	4a18      	ldr	r2, [pc, #96]	; (115c <system_clock_init+0x154>)
    10fa:	2300      	movs	r3, #0
    10fc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    10fe:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1100:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1102:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1104:	a901      	add	r1, sp, #4
    1106:	2201      	movs	r2, #1
    1108:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    110a:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    110c:	3205      	adds	r2, #5
    110e:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    1110:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1112:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1114:	2000      	movs	r0, #0
    1116:	4b0f      	ldr	r3, [pc, #60]	; (1154 <system_clock_init+0x14c>)
    1118:	4798      	blx	r3
    111a:	2000      	movs	r0, #0
    111c:	4b0e      	ldr	r3, [pc, #56]	; (1158 <system_clock_init+0x150>)
    111e:	4798      	blx	r3
#endif
}
    1120:	b00c      	add	sp, #48	; 0x30
    1122:	bd70      	pop	{r4, r5, r6, pc}
			coarse = 0x1f;
    1124:	3b20      	subs	r3, #32
    1126:	e7b9      	b.n	109c <system_clock_init+0x94>
    1128:	40000800 	.word	0x40000800
    112c:	41004000 	.word	0x41004000
    1130:	00001399 	.word	0x00001399
    1134:	00806024 	.word	0x00806024
    1138:	ff80ffff 	.word	0xff80ffff
    113c:	00000e55 	.word	0x00000e55
    1140:	00000f79 	.word	0x00000f79
    1144:	41002000 	.word	0x41002000
    1148:	00000ed1 	.word	0x00000ed1
    114c:	00000e19 	.word	0x00000e19
    1150:	00001161 	.word	0x00001161
    1154:	00001185 	.word	0x00001185
    1158:	0000123d 	.word	0x0000123d
    115c:	40000400 	.word	0x40000400

00001160 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1160:	4a06      	ldr	r2, [pc, #24]	; (117c <system_gclk_init+0x1c>)
    1162:	6993      	ldr	r3, [r2, #24]
    1164:	2108      	movs	r1, #8
    1166:	430b      	orrs	r3, r1
    1168:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    116a:	2201      	movs	r2, #1
    116c:	4b04      	ldr	r3, [pc, #16]	; (1180 <system_gclk_init+0x20>)
    116e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1170:	0019      	movs	r1, r3
    1172:	780b      	ldrb	r3, [r1, #0]
    1174:	4213      	tst	r3, r2
    1176:	d1fc      	bne.n	1172 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1178:	4770      	bx	lr
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	40000400 	.word	0x40000400
    1180:	40000c00 	.word	0x40000c00

00001184 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1184:	b570      	push	{r4, r5, r6, lr}
    1186:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1188:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    118a:	780d      	ldrb	r5, [r1, #0]
    118c:	022d      	lsls	r5, r5, #8
    118e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1190:	784b      	ldrb	r3, [r1, #1]
    1192:	2b00      	cmp	r3, #0
    1194:	d002      	beq.n	119c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1196:	2380      	movs	r3, #128	; 0x80
    1198:	02db      	lsls	r3, r3, #11
    119a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    119c:	7a4b      	ldrb	r3, [r1, #9]
    119e:	2b00      	cmp	r3, #0
    11a0:	d002      	beq.n	11a8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    11a2:	2380      	movs	r3, #128	; 0x80
    11a4:	031b      	lsls	r3, r3, #12
    11a6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    11a8:	6848      	ldr	r0, [r1, #4]
    11aa:	2801      	cmp	r0, #1
    11ac:	d910      	bls.n	11d0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    11ae:	1e43      	subs	r3, r0, #1
    11b0:	4218      	tst	r0, r3
    11b2:	d134      	bne.n	121e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    11b4:	2802      	cmp	r0, #2
    11b6:	d930      	bls.n	121a <system_gclk_gen_set_config+0x96>
    11b8:	2302      	movs	r3, #2
    11ba:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    11bc:	3201      	adds	r2, #1
						mask <<= 1) {
    11be:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    11c0:	4298      	cmp	r0, r3
    11c2:	d8fb      	bhi.n	11bc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    11c4:	0212      	lsls	r2, r2, #8
    11c6:	4332      	orrs	r2, r6
    11c8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    11ca:	2380      	movs	r3, #128	; 0x80
    11cc:	035b      	lsls	r3, r3, #13
    11ce:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    11d0:	7a0b      	ldrb	r3, [r1, #8]
    11d2:	2b00      	cmp	r3, #0
    11d4:	d002      	beq.n	11dc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    11d6:	2380      	movs	r3, #128	; 0x80
    11d8:	039b      	lsls	r3, r3, #14
    11da:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11dc:	4a13      	ldr	r2, [pc, #76]	; (122c <system_gclk_gen_set_config+0xa8>)
    11de:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    11e0:	b25b      	sxtb	r3, r3
    11e2:	2b00      	cmp	r3, #0
    11e4:	dbfb      	blt.n	11de <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    11e6:	4b12      	ldr	r3, [pc, #72]	; (1230 <system_gclk_gen_set_config+0xac>)
    11e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    11ea:	4b12      	ldr	r3, [pc, #72]	; (1234 <system_gclk_gen_set_config+0xb0>)
    11ec:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11ee:	4a0f      	ldr	r2, [pc, #60]	; (122c <system_gclk_gen_set_config+0xa8>)
    11f0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    11f2:	b25b      	sxtb	r3, r3
    11f4:	2b00      	cmp	r3, #0
    11f6:	dbfb      	blt.n	11f0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    11f8:	4b0c      	ldr	r3, [pc, #48]	; (122c <system_gclk_gen_set_config+0xa8>)
    11fa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11fc:	001a      	movs	r2, r3
    11fe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1200:	b25b      	sxtb	r3, r3
    1202:	2b00      	cmp	r3, #0
    1204:	dbfb      	blt.n	11fe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1206:	4a09      	ldr	r2, [pc, #36]	; (122c <system_gclk_gen_set_config+0xa8>)
    1208:	6853      	ldr	r3, [r2, #4]
    120a:	2180      	movs	r1, #128	; 0x80
    120c:	0249      	lsls	r1, r1, #9
    120e:	400b      	ands	r3, r1
    1210:	431d      	orrs	r5, r3
    1212:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1214:	4b08      	ldr	r3, [pc, #32]	; (1238 <system_gclk_gen_set_config+0xb4>)
    1216:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1218:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    121a:	2200      	movs	r2, #0
    121c:	e7d2      	b.n	11c4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    121e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1220:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1222:	2380      	movs	r3, #128	; 0x80
    1224:	029b      	lsls	r3, r3, #10
    1226:	431d      	orrs	r5, r3
    1228:	e7d2      	b.n	11d0 <system_gclk_gen_set_config+0x4c>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	40000c00 	.word	0x40000c00
    1230:	00000149 	.word	0x00000149
    1234:	40000c08 	.word	0x40000c08
    1238:	00000189 	.word	0x00000189

0000123c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    123c:	b510      	push	{r4, lr}
    123e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1240:	4a0b      	ldr	r2, [pc, #44]	; (1270 <system_gclk_gen_enable+0x34>)
    1242:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1244:	b25b      	sxtb	r3, r3
    1246:	2b00      	cmp	r3, #0
    1248:	dbfb      	blt.n	1242 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    124a:	4b0a      	ldr	r3, [pc, #40]	; (1274 <system_gclk_gen_enable+0x38>)
    124c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    124e:	4b0a      	ldr	r3, [pc, #40]	; (1278 <system_gclk_gen_enable+0x3c>)
    1250:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1252:	4a07      	ldr	r2, [pc, #28]	; (1270 <system_gclk_gen_enable+0x34>)
    1254:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1256:	b25b      	sxtb	r3, r3
    1258:	2b00      	cmp	r3, #0
    125a:	dbfb      	blt.n	1254 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    125c:	4a04      	ldr	r2, [pc, #16]	; (1270 <system_gclk_gen_enable+0x34>)
    125e:	6851      	ldr	r1, [r2, #4]
    1260:	2380      	movs	r3, #128	; 0x80
    1262:	025b      	lsls	r3, r3, #9
    1264:	430b      	orrs	r3, r1
    1266:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <system_gclk_gen_enable+0x40>)
    126a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    126c:	bd10      	pop	{r4, pc}
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	40000c00 	.word	0x40000c00
    1274:	00000149 	.word	0x00000149
    1278:	40000c04 	.word	0x40000c04
    127c:	00000189 	.word	0x00000189

00001280 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1280:	b570      	push	{r4, r5, r6, lr}
    1282:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1284:	4a1a      	ldr	r2, [pc, #104]	; (12f0 <system_gclk_gen_get_hz+0x70>)
    1286:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1288:	b25b      	sxtb	r3, r3
    128a:	2b00      	cmp	r3, #0
    128c:	dbfb      	blt.n	1286 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    128e:	4b19      	ldr	r3, [pc, #100]	; (12f4 <system_gclk_gen_get_hz+0x74>)
    1290:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1292:	4b19      	ldr	r3, [pc, #100]	; (12f8 <system_gclk_gen_get_hz+0x78>)
    1294:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1296:	4a16      	ldr	r2, [pc, #88]	; (12f0 <system_gclk_gen_get_hz+0x70>)
    1298:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    129a:	b25b      	sxtb	r3, r3
    129c:	2b00      	cmp	r3, #0
    129e:	dbfb      	blt.n	1298 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    12a0:	4e13      	ldr	r6, [pc, #76]	; (12f0 <system_gclk_gen_get_hz+0x70>)
    12a2:	6870      	ldr	r0, [r6, #4]
    12a4:	04c0      	lsls	r0, r0, #19
    12a6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    12a8:	4b14      	ldr	r3, [pc, #80]	; (12fc <system_gclk_gen_get_hz+0x7c>)
    12aa:	4798      	blx	r3
    12ac:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12ae:	4b12      	ldr	r3, [pc, #72]	; (12f8 <system_gclk_gen_get_hz+0x78>)
    12b0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    12b2:	6876      	ldr	r6, [r6, #4]
    12b4:	02f6      	lsls	r6, r6, #11
    12b6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    12b8:	4b11      	ldr	r3, [pc, #68]	; (1300 <system_gclk_gen_get_hz+0x80>)
    12ba:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12bc:	4a0c      	ldr	r2, [pc, #48]	; (12f0 <system_gclk_gen_get_hz+0x70>)
    12be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12c0:	b25b      	sxtb	r3, r3
    12c2:	2b00      	cmp	r3, #0
    12c4:	dbfb      	blt.n	12be <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    12c6:	4b0a      	ldr	r3, [pc, #40]	; (12f0 <system_gclk_gen_get_hz+0x70>)
    12c8:	689c      	ldr	r4, [r3, #8]
    12ca:	0224      	lsls	r4, r4, #8
    12cc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    12ce:	4b0d      	ldr	r3, [pc, #52]	; (1304 <system_gclk_gen_get_hz+0x84>)
    12d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    12d2:	2e00      	cmp	r6, #0
    12d4:	d107      	bne.n	12e6 <system_gclk_gen_get_hz+0x66>
    12d6:	2c01      	cmp	r4, #1
    12d8:	d907      	bls.n	12ea <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    12da:	0021      	movs	r1, r4
    12dc:	0028      	movs	r0, r5
    12de:	4b0a      	ldr	r3, [pc, #40]	; (1308 <system_gclk_gen_get_hz+0x88>)
    12e0:	4798      	blx	r3
    12e2:	0005      	movs	r5, r0
    12e4:	e001      	b.n	12ea <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    12e6:	3401      	adds	r4, #1
    12e8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    12ea:	0028      	movs	r0, r5
    12ec:	bd70      	pop	{r4, r5, r6, pc}
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	40000c00 	.word	0x40000c00
    12f4:	00000149 	.word	0x00000149
    12f8:	40000c04 	.word	0x40000c04
    12fc:	00000d9d 	.word	0x00000d9d
    1300:	40000c08 	.word	0x40000c08
    1304:	00000189 	.word	0x00000189
    1308:	00001c91 	.word	0x00001c91

0000130c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    130c:	b510      	push	{r4, lr}
    130e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1310:	4b06      	ldr	r3, [pc, #24]	; (132c <system_gclk_chan_enable+0x20>)
    1312:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <system_gclk_chan_enable+0x24>)
    1316:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1318:	4a06      	ldr	r2, [pc, #24]	; (1334 <system_gclk_chan_enable+0x28>)
    131a:	8853      	ldrh	r3, [r2, #2]
    131c:	2180      	movs	r1, #128	; 0x80
    131e:	01c9      	lsls	r1, r1, #7
    1320:	430b      	orrs	r3, r1
    1322:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1324:	4b04      	ldr	r3, [pc, #16]	; (1338 <system_gclk_chan_enable+0x2c>)
    1326:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1328:	bd10      	pop	{r4, pc}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	00000149 	.word	0x00000149
    1330:	40000c02 	.word	0x40000c02
    1334:	40000c00 	.word	0x40000c00
    1338:	00000189 	.word	0x00000189

0000133c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    133c:	b510      	push	{r4, lr}
    133e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1340:	4b0f      	ldr	r3, [pc, #60]	; (1380 <system_gclk_chan_disable+0x44>)
    1342:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1344:	4b0f      	ldr	r3, [pc, #60]	; (1384 <system_gclk_chan_disable+0x48>)
    1346:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1348:	4a0f      	ldr	r2, [pc, #60]	; (1388 <system_gclk_chan_disable+0x4c>)
    134a:	8853      	ldrh	r3, [r2, #2]
    134c:	051b      	lsls	r3, r3, #20
    134e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1350:	8853      	ldrh	r3, [r2, #2]
    1352:	490e      	ldr	r1, [pc, #56]	; (138c <system_gclk_chan_disable+0x50>)
    1354:	400b      	ands	r3, r1
    1356:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1358:	8853      	ldrh	r3, [r2, #2]
    135a:	490d      	ldr	r1, [pc, #52]	; (1390 <system_gclk_chan_disable+0x54>)
    135c:	400b      	ands	r3, r1
    135e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1360:	0011      	movs	r1, r2
    1362:	2280      	movs	r2, #128	; 0x80
    1364:	01d2      	lsls	r2, r2, #7
    1366:	884b      	ldrh	r3, [r1, #2]
    1368:	4213      	tst	r3, r2
    136a:	d1fc      	bne.n	1366 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    136c:	4906      	ldr	r1, [pc, #24]	; (1388 <system_gclk_chan_disable+0x4c>)
    136e:	884a      	ldrh	r2, [r1, #2]
    1370:	0203      	lsls	r3, r0, #8
    1372:	4806      	ldr	r0, [pc, #24]	; (138c <system_gclk_chan_disable+0x50>)
    1374:	4002      	ands	r2, r0
    1376:	4313      	orrs	r3, r2
    1378:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    137a:	4b06      	ldr	r3, [pc, #24]	; (1394 <system_gclk_chan_disable+0x58>)
    137c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    137e:	bd10      	pop	{r4, pc}
    1380:	00000149 	.word	0x00000149
    1384:	40000c02 	.word	0x40000c02
    1388:	40000c00 	.word	0x40000c00
    138c:	fffff0ff 	.word	0xfffff0ff
    1390:	ffffbfff 	.word	0xffffbfff
    1394:	00000189 	.word	0x00000189

00001398 <system_gclk_chan_set_config>:
{
    1398:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    139a:	780c      	ldrb	r4, [r1, #0]
    139c:	0224      	lsls	r4, r4, #8
    139e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    13a0:	4b02      	ldr	r3, [pc, #8]	; (13ac <system_gclk_chan_set_config+0x14>)
    13a2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    13a4:	b2a4      	uxth	r4, r4
    13a6:	4b02      	ldr	r3, [pc, #8]	; (13b0 <system_gclk_chan_set_config+0x18>)
    13a8:	805c      	strh	r4, [r3, #2]
}
    13aa:	bd10      	pop	{r4, pc}
    13ac:	0000133d 	.word	0x0000133d
    13b0:	40000c00 	.word	0x40000c00

000013b4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    13b4:	b510      	push	{r4, lr}
    13b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13b8:	4b06      	ldr	r3, [pc, #24]	; (13d4 <system_gclk_chan_get_hz+0x20>)
    13ba:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    13bc:	4b06      	ldr	r3, [pc, #24]	; (13d8 <system_gclk_chan_get_hz+0x24>)
    13be:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    13c0:	4b06      	ldr	r3, [pc, #24]	; (13dc <system_gclk_chan_get_hz+0x28>)
    13c2:	885c      	ldrh	r4, [r3, #2]
    13c4:	0524      	lsls	r4, r4, #20
    13c6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    13c8:	4b05      	ldr	r3, [pc, #20]	; (13e0 <system_gclk_chan_get_hz+0x2c>)
    13ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    13cc:	0020      	movs	r0, r4
    13ce:	4b05      	ldr	r3, [pc, #20]	; (13e4 <system_gclk_chan_get_hz+0x30>)
    13d0:	4798      	blx	r3
}
    13d2:	bd10      	pop	{r4, pc}
    13d4:	00000149 	.word	0x00000149
    13d8:	40000c02 	.word	0x40000c02
    13dc:	40000c00 	.word	0x40000c00
    13e0:	00000189 	.word	0x00000189
    13e4:	00001281 	.word	0x00001281

000013e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    13e8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    13ea:	78d3      	ldrb	r3, [r2, #3]
    13ec:	2b00      	cmp	r3, #0
    13ee:	d135      	bne.n	145c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    13f0:	7813      	ldrb	r3, [r2, #0]
    13f2:	2b80      	cmp	r3, #128	; 0x80
    13f4:	d029      	beq.n	144a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    13f6:	061b      	lsls	r3, r3, #24
    13f8:	2480      	movs	r4, #128	; 0x80
    13fa:	0264      	lsls	r4, r4, #9
    13fc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    13fe:	7854      	ldrb	r4, [r2, #1]
    1400:	2502      	movs	r5, #2
    1402:	43ac      	bics	r4, r5
    1404:	d106      	bne.n	1414 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1406:	7894      	ldrb	r4, [r2, #2]
    1408:	2c00      	cmp	r4, #0
    140a:	d120      	bne.n	144e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    140c:	2480      	movs	r4, #128	; 0x80
    140e:	02a4      	lsls	r4, r4, #10
    1410:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1412:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1414:	7854      	ldrb	r4, [r2, #1]
    1416:	3c01      	subs	r4, #1
    1418:	2c01      	cmp	r4, #1
    141a:	d91c      	bls.n	1456 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    141c:	040d      	lsls	r5, r1, #16
    141e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1420:	24a0      	movs	r4, #160	; 0xa0
    1422:	05e4      	lsls	r4, r4, #23
    1424:	432c      	orrs	r4, r5
    1426:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1428:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    142a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    142c:	24d0      	movs	r4, #208	; 0xd0
    142e:	0624      	lsls	r4, r4, #24
    1430:	432c      	orrs	r4, r5
    1432:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1434:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1436:	78d4      	ldrb	r4, [r2, #3]
    1438:	2c00      	cmp	r4, #0
    143a:	d122      	bne.n	1482 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    143c:	035b      	lsls	r3, r3, #13
    143e:	d51c      	bpl.n	147a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1440:	7893      	ldrb	r3, [r2, #2]
    1442:	2b01      	cmp	r3, #1
    1444:	d01e      	beq.n	1484 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1446:	6141      	str	r1, [r0, #20]
    1448:	e017      	b.n	147a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    144a:	2300      	movs	r3, #0
    144c:	e7d7      	b.n	13fe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    144e:	24c0      	movs	r4, #192	; 0xc0
    1450:	02e4      	lsls	r4, r4, #11
    1452:	4323      	orrs	r3, r4
    1454:	e7dd      	b.n	1412 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1456:	4c0d      	ldr	r4, [pc, #52]	; (148c <_system_pinmux_config+0xa4>)
    1458:	4023      	ands	r3, r4
    145a:	e7df      	b.n	141c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    145c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    145e:	040c      	lsls	r4, r1, #16
    1460:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1462:	23a0      	movs	r3, #160	; 0xa0
    1464:	05db      	lsls	r3, r3, #23
    1466:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1468:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    146a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    146c:	23d0      	movs	r3, #208	; 0xd0
    146e:	061b      	lsls	r3, r3, #24
    1470:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1472:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1474:	78d3      	ldrb	r3, [r2, #3]
    1476:	2b00      	cmp	r3, #0
    1478:	d103      	bne.n	1482 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    147a:	7853      	ldrb	r3, [r2, #1]
    147c:	3b01      	subs	r3, #1
    147e:	2b01      	cmp	r3, #1
    1480:	d902      	bls.n	1488 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1482:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1484:	6181      	str	r1, [r0, #24]
    1486:	e7f8      	b.n	147a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1488:	6081      	str	r1, [r0, #8]
}
    148a:	e7fa      	b.n	1482 <_system_pinmux_config+0x9a>
    148c:	fffbffff 	.word	0xfffbffff

00001490 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1490:	b510      	push	{r4, lr}
    1492:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1494:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1496:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1498:	2900      	cmp	r1, #0
    149a:	d104      	bne.n	14a6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    149c:	0943      	lsrs	r3, r0, #5
    149e:	01db      	lsls	r3, r3, #7
    14a0:	4905      	ldr	r1, [pc, #20]	; (14b8 <system_pinmux_pin_set_config+0x28>)
    14a2:	468c      	mov	ip, r1
    14a4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    14a6:	241f      	movs	r4, #31
    14a8:	4020      	ands	r0, r4
    14aa:	2101      	movs	r1, #1
    14ac:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    14ae:	0018      	movs	r0, r3
    14b0:	4b02      	ldr	r3, [pc, #8]	; (14bc <system_pinmux_pin_set_config+0x2c>)
    14b2:	4798      	blx	r3
}
    14b4:	bd10      	pop	{r4, pc}
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	41004400 	.word	0x41004400
    14bc:	000013e9 	.word	0x000013e9

000014c0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    14c0:	4770      	bx	lr
	...

000014c4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    14c4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    14c6:	4b05      	ldr	r3, [pc, #20]	; (14dc <system_init+0x18>)
    14c8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    14ca:	4b05      	ldr	r3, [pc, #20]	; (14e0 <system_init+0x1c>)
    14cc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <system_init+0x20>)
    14d0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    14d2:	4b05      	ldr	r3, [pc, #20]	; (14e8 <system_init+0x24>)
    14d4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    14d6:	4b05      	ldr	r3, [pc, #20]	; (14ec <system_init+0x28>)
    14d8:	4798      	blx	r3
}
    14da:	bd10      	pop	{r4, pc}
    14dc:	00001009 	.word	0x00001009
    14e0:	00000105 	.word	0x00000105
    14e4:	000001f5 	.word	0x000001f5
    14e8:	00000369 	.word	0x00000369
    14ec:	000014c1 	.word	0x000014c1

000014f0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    14f0:	1c93      	adds	r3, r2, #2
    14f2:	009b      	lsls	r3, r3, #2
    14f4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    14f6:	2a02      	cmp	r2, #2
    14f8:	d009      	beq.n	150e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    14fa:	2a03      	cmp	r2, #3
    14fc:	d00c      	beq.n	1518 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    14fe:	2301      	movs	r3, #1
    1500:	4093      	lsls	r3, r2
    1502:	001a      	movs	r2, r3
    1504:	7e03      	ldrb	r3, [r0, #24]
    1506:	4313      	orrs	r3, r2
    1508:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    150a:	2000      	movs	r0, #0
    150c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    150e:	7e03      	ldrb	r3, [r0, #24]
    1510:	2210      	movs	r2, #16
    1512:	4313      	orrs	r3, r2
    1514:	7603      	strb	r3, [r0, #24]
    1516:	e7f8      	b.n	150a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1518:	7e03      	ldrb	r3, [r0, #24]
    151a:	2220      	movs	r2, #32
    151c:	4313      	orrs	r3, r2
    151e:	7603      	strb	r3, [r0, #24]
    1520:	e7f3      	b.n	150a <tc_register_callback+0x1a>
	...

00001524 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1524:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1526:	0080      	lsls	r0, r0, #2
    1528:	4b16      	ldr	r3, [pc, #88]	; (1584 <_tc_interrupt_handler+0x60>)
    152a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    152c:	6823      	ldr	r3, [r4, #0]
    152e:	7b9d      	ldrb	r5, [r3, #14]
    1530:	7e22      	ldrb	r2, [r4, #24]
    1532:	7e63      	ldrb	r3, [r4, #25]
    1534:	4013      	ands	r3, r2
    1536:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1538:	07eb      	lsls	r3, r5, #31
    153a:	d406      	bmi.n	154a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    153c:	07ab      	lsls	r3, r5, #30
    153e:	d40b      	bmi.n	1558 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1540:	06eb      	lsls	r3, r5, #27
    1542:	d410      	bmi.n	1566 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1544:	06ab      	lsls	r3, r5, #26
    1546:	d415      	bmi.n	1574 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1548:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    154a:	0020      	movs	r0, r4
    154c:	68a3      	ldr	r3, [r4, #8]
    154e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1550:	2301      	movs	r3, #1
    1552:	6822      	ldr	r2, [r4, #0]
    1554:	7393      	strb	r3, [r2, #14]
    1556:	e7f1      	b.n	153c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1558:	0020      	movs	r0, r4
    155a:	68e3      	ldr	r3, [r4, #12]
    155c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    155e:	2302      	movs	r3, #2
    1560:	6822      	ldr	r2, [r4, #0]
    1562:	7393      	strb	r3, [r2, #14]
    1564:	e7ec      	b.n	1540 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1566:	0020      	movs	r0, r4
    1568:	6923      	ldr	r3, [r4, #16]
    156a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    156c:	2310      	movs	r3, #16
    156e:	6822      	ldr	r2, [r4, #0]
    1570:	7393      	strb	r3, [r2, #14]
    1572:	e7e7      	b.n	1544 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1574:	0020      	movs	r0, r4
    1576:	6963      	ldr	r3, [r4, #20]
    1578:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    157a:	6823      	ldr	r3, [r4, #0]
    157c:	2220      	movs	r2, #32
    157e:	739a      	strb	r2, [r3, #14]
}
    1580:	e7e2      	b.n	1548 <_tc_interrupt_handler+0x24>
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	2000013c 	.word	0x2000013c

00001588 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1588:	b510      	push	{r4, lr}
    158a:	2000      	movs	r0, #0
    158c:	4b01      	ldr	r3, [pc, #4]	; (1594 <TC0_Handler+0xc>)
    158e:	4798      	blx	r3
    1590:	bd10      	pop	{r4, pc}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	00001525 	.word	0x00001525

00001598 <TC1_Handler>:
    1598:	b510      	push	{r4, lr}
    159a:	2001      	movs	r0, #1
    159c:	4b01      	ldr	r3, [pc, #4]	; (15a4 <TC1_Handler+0xc>)
    159e:	4798      	blx	r3
    15a0:	bd10      	pop	{r4, pc}
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	00001525 	.word	0x00001525

000015a8 <TC2_Handler>:
    15a8:	b510      	push	{r4, lr}
    15aa:	2002      	movs	r0, #2
    15ac:	4b01      	ldr	r3, [pc, #4]	; (15b4 <TC2_Handler+0xc>)
    15ae:	4798      	blx	r3
    15b0:	bd10      	pop	{r4, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	00001525 	.word	0x00001525

000015b8 <TC3_Handler>:
    15b8:	b510      	push	{r4, lr}
    15ba:	2003      	movs	r0, #3
    15bc:	4b01      	ldr	r3, [pc, #4]	; (15c4 <TC3_Handler+0xc>)
    15be:	4798      	blx	r3
    15c0:	bd10      	pop	{r4, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	00001525 	.word	0x00001525

000015c8 <TC4_Handler>:
    15c8:	b510      	push	{r4, lr}
    15ca:	2004      	movs	r0, #4
    15cc:	4b01      	ldr	r3, [pc, #4]	; (15d4 <TC4_Handler+0xc>)
    15ce:	4798      	blx	r3
    15d0:	bd10      	pop	{r4, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	00001525 	.word	0x00001525

000015d8 <TC5_Handler>:
    15d8:	b510      	push	{r4, lr}
    15da:	2005      	movs	r0, #5
    15dc:	4b01      	ldr	r3, [pc, #4]	; (15e4 <TC5_Handler+0xc>)
    15de:	4798      	blx	r3
    15e0:	bd10      	pop	{r4, pc}
    15e2:	46c0      	nop			; (mov r8, r8)
    15e4:	00001525 	.word	0x00001525

000015e8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    15e8:	b530      	push	{r4, r5, lr}
    15ea:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    15ec:	4b0b      	ldr	r3, [pc, #44]	; (161c <_tc_get_inst_index+0x34>)
    15ee:	466a      	mov	r2, sp
    15f0:	cb32      	ldmia	r3!, {r1, r4, r5}
    15f2:	c232      	stmia	r2!, {r1, r4, r5}
    15f4:	cb32      	ldmia	r3!, {r1, r4, r5}
    15f6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    15f8:	9b00      	ldr	r3, [sp, #0]
    15fa:	4298      	cmp	r0, r3
    15fc:	d00b      	beq.n	1616 <_tc_get_inst_index+0x2e>
    15fe:	2301      	movs	r3, #1
    1600:	009a      	lsls	r2, r3, #2
    1602:	4669      	mov	r1, sp
    1604:	5852      	ldr	r2, [r2, r1]
    1606:	4282      	cmp	r2, r0
    1608:	d006      	beq.n	1618 <_tc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    160a:	3301      	adds	r3, #1
    160c:	2b06      	cmp	r3, #6
    160e:	d1f7      	bne.n	1600 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1610:	2000      	movs	r0, #0
}
    1612:	b007      	add	sp, #28
    1614:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1616:	2300      	movs	r3, #0
			return i;
    1618:	b2d8      	uxtb	r0, r3
    161a:	e7fa      	b.n	1612 <_tc_get_inst_index+0x2a>
    161c:	000028bc 	.word	0x000028bc

00001620 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1620:	b5f0      	push	{r4, r5, r6, r7, lr}
    1622:	46c6      	mov	lr, r8
    1624:	b500      	push	{lr}
    1626:	b088      	sub	sp, #32
    1628:	0004      	movs	r4, r0
    162a:	000d      	movs	r5, r1
    162c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    162e:	0008      	movs	r0, r1
    1630:	4b88      	ldr	r3, [pc, #544]	; (1854 <tc_init+0x234>)
    1632:	4798      	blx	r3
    1634:	4680      	mov	r8, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1636:	ab06      	add	r3, sp, #24
    1638:	2213      	movs	r2, #19
    163a:	701a      	strb	r2, [r3, #0]
    163c:	705a      	strb	r2, [r3, #1]
    163e:	3201      	adds	r2, #1
    1640:	709a      	strb	r2, [r3, #2]
    1642:	70da      	strb	r2, [r3, #3]
    1644:	3201      	adds	r2, #1
    1646:	711a      	strb	r2, [r3, #4]
    1648:	715a      	strb	r2, [r3, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    164a:	aa03      	add	r2, sp, #12
    164c:	4b82      	ldr	r3, [pc, #520]	; (1858 <tc_init+0x238>)
    164e:	3318      	adds	r3, #24
    1650:	cb83      	ldmia	r3!, {r0, r1, r7}
    1652:	c283      	stmia	r2!, {r0, r1, r7}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1654:	2300      	movs	r3, #0
    1656:	60a3      	str	r3, [r4, #8]
    1658:	60e3      	str	r3, [r4, #12]
    165a:	6123      	str	r3, [r4, #16]
    165c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    165e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1660:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1662:	4643      	mov	r3, r8
    1664:	009a      	lsls	r2, r3, #2
    1666:	4b7d      	ldr	r3, [pc, #500]	; (185c <tc_init+0x23c>)
    1668:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    166a:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    166c:	78b3      	ldrb	r3, [r6, #2]
    166e:	2b08      	cmp	r3, #8
    1670:	d008      	beq.n	1684 <tc_init+0x64>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1672:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1674:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1676:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1678:	07db      	lsls	r3, r3, #31
    167a:	d508      	bpl.n	168e <tc_init+0x6e>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    167c:	b008      	add	sp, #32
    167e:	bc04      	pop	{r2}
    1680:	4690      	mov	r8, r2
    1682:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1684:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1686:	4642      	mov	r2, r8
    1688:	07d2      	lsls	r2, r2, #31
    168a:	d4f7      	bmi.n	167c <tc_init+0x5c>
    168c:	e7f1      	b.n	1672 <tc_init+0x52>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    168e:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1690:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1692:	06db      	lsls	r3, r3, #27
    1694:	d4f2      	bmi.n	167c <tc_init+0x5c>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1696:	882b      	ldrh	r3, [r5, #0]
    1698:	079b      	lsls	r3, r3, #30
    169a:	d4ef      	bmi.n	167c <tc_init+0x5c>
	if (config->pwm_channel[0].enabled) {
    169c:	7c33      	ldrb	r3, [r6, #16]
    169e:	2b00      	cmp	r3, #0
    16a0:	d000      	beq.n	16a4 <tc_init+0x84>
    16a2:	e07b      	b.n	179c <tc_init+0x17c>
	if (config->pwm_channel[1].enabled) {
    16a4:	7f33      	ldrb	r3, [r6, #28]
    16a6:	2b00      	cmp	r3, #0
    16a8:	d000      	beq.n	16ac <tc_init+0x8c>
    16aa:	e083      	b.n	17b4 <tc_init+0x194>
			PM->APBCMASK.reg |= mask;
    16ac:	496c      	ldr	r1, [pc, #432]	; (1860 <tc_init+0x240>)
    16ae:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    16b0:	4643      	mov	r3, r8
    16b2:	005a      	lsls	r2, r3, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    16b4:	ab03      	add	r3, sp, #12
    16b6:	5ad3      	ldrh	r3, [r2, r3]
    16b8:	4303      	orrs	r3, r0
    16ba:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    16bc:	78b3      	ldrb	r3, [r6, #2]
    16be:	2b08      	cmp	r3, #8
    16c0:	d100      	bne.n	16c4 <tc_init+0xa4>
    16c2:	e087      	b.n	17d4 <tc_init+0x1b4>
	gclk_chan_config.source_generator = config->clock_source;
    16c4:	a901      	add	r1, sp, #4
    16c6:	7833      	ldrb	r3, [r6, #0]
    16c8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    16ca:	ab06      	add	r3, sp, #24
    16cc:	4642      	mov	r2, r8
    16ce:	5c9f      	ldrb	r7, [r3, r2]
    16d0:	0038      	movs	r0, r7
    16d2:	4b64      	ldr	r3, [pc, #400]	; (1864 <tc_init+0x244>)
    16d4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    16d6:	0038      	movs	r0, r7
    16d8:	4b63      	ldr	r3, [pc, #396]	; (1868 <tc_init+0x248>)
    16da:	4798      	blx	r3
	ctrla_tmp =
    16dc:	8931      	ldrh	r1, [r6, #8]
    16de:	88b3      	ldrh	r3, [r6, #4]
    16e0:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    16e2:	78b1      	ldrb	r1, [r6, #2]
    16e4:	79b2      	ldrb	r2, [r6, #6]
    16e6:	4311      	orrs	r1, r2
	ctrla_tmp =
    16e8:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    16ea:	7873      	ldrb	r3, [r6, #1]
    16ec:	2b00      	cmp	r3, #0
    16ee:	d002      	beq.n	16f6 <tc_init+0xd6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    16f0:	2380      	movs	r3, #128	; 0x80
    16f2:	011b      	lsls	r3, r3, #4
    16f4:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16f6:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16f8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    16fa:	b25b      	sxtb	r3, r3
    16fc:	2b00      	cmp	r3, #0
    16fe:	dbfb      	blt.n	16f8 <tc_init+0xd8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1700:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1702:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1704:	1e4b      	subs	r3, r1, #1
    1706:	4199      	sbcs	r1, r3
    1708:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    170a:	7bb3      	ldrb	r3, [r6, #14]
    170c:	2b00      	cmp	r3, #0
    170e:	d001      	beq.n	1714 <tc_init+0xf4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1710:	2301      	movs	r3, #1
    1712:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1714:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1716:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1718:	b25b      	sxtb	r3, r3
    171a:	2b00      	cmp	r3, #0
    171c:	dbfb      	blt.n	1716 <tc_init+0xf6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    171e:	23ff      	movs	r3, #255	; 0xff
    1720:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1722:	2900      	cmp	r1, #0
    1724:	d005      	beq.n	1732 <tc_init+0x112>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1726:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1728:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    172a:	b25b      	sxtb	r3, r3
    172c:	2b00      	cmp	r3, #0
    172e:	dbfb      	blt.n	1728 <tc_init+0x108>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1730:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1732:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1734:	7af3      	ldrb	r3, [r6, #11]
    1736:	2b00      	cmp	r3, #0
    1738:	d001      	beq.n	173e <tc_init+0x11e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    173a:	2310      	movs	r3, #16
    173c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    173e:	7b33      	ldrb	r3, [r6, #12]
    1740:	2b00      	cmp	r3, #0
    1742:	d001      	beq.n	1748 <tc_init+0x128>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1744:	2320      	movs	r3, #32
    1746:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1748:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    174a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    174c:	b25b      	sxtb	r3, r3
    174e:	2b00      	cmp	r3, #0
    1750:	dbfb      	blt.n	174a <tc_init+0x12a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1752:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1754:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1756:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1758:	b25b      	sxtb	r3, r3
    175a:	2b00      	cmp	r3, #0
    175c:	dbfb      	blt.n	1756 <tc_init+0x136>
	switch (module_inst->counter_size) {
    175e:	7923      	ldrb	r3, [r4, #4]
    1760:	2b04      	cmp	r3, #4
    1762:	d040      	beq.n	17e6 <tc_init+0x1c6>
    1764:	2b08      	cmp	r3, #8
    1766:	d05f      	beq.n	1828 <tc_init+0x208>
	return STATUS_ERR_INVALID_ARG;
    1768:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    176a:	2b00      	cmp	r3, #0
    176c:	d000      	beq.n	1770 <tc_init+0x150>
    176e:	e785      	b.n	167c <tc_init+0x5c>
    1770:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1772:	b25b      	sxtb	r3, r3
    1774:	2b00      	cmp	r3, #0
    1776:	dbfb      	blt.n	1770 <tc_init+0x150>
				= config->counter_16_bit.value;
    1778:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    177a:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    177c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    177e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1780:	b25b      	sxtb	r3, r3
    1782:	2b00      	cmp	r3, #0
    1784:	dbfb      	blt.n	177e <tc_init+0x15e>
					config->counter_16_bit.compare_capture_channel[0];
    1786:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1788:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    178a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    178c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    178e:	b25b      	sxtb	r3, r3
    1790:	2b00      	cmp	r3, #0
    1792:	dbfb      	blt.n	178c <tc_init+0x16c>
					config->counter_16_bit.compare_capture_channel[1];
    1794:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1796:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1798:	2000      	movs	r0, #0
    179a:	e76f      	b.n	167c <tc_init+0x5c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    179c:	a902      	add	r1, sp, #8
    179e:	2301      	movs	r3, #1
    17a0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    17a2:	2200      	movs	r2, #0
    17a4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    17a6:	7e32      	ldrb	r2, [r6, #24]
    17a8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    17aa:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    17ac:	7d30      	ldrb	r0, [r6, #20]
    17ae:	4b2f      	ldr	r3, [pc, #188]	; (186c <tc_init+0x24c>)
    17b0:	4798      	blx	r3
    17b2:	e777      	b.n	16a4 <tc_init+0x84>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    17b4:	a902      	add	r1, sp, #8
    17b6:	2301      	movs	r3, #1
    17b8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    17ba:	2200      	movs	r2, #0
    17bc:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    17be:	3224      	adds	r2, #36	; 0x24
    17c0:	18b2      	adds	r2, r6, r2
    17c2:	7812      	ldrb	r2, [r2, #0]
    17c4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    17c6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    17c8:	331f      	adds	r3, #31
    17ca:	18f3      	adds	r3, r6, r3
    17cc:	7818      	ldrb	r0, [r3, #0]
    17ce:	4b27      	ldr	r3, [pc, #156]	; (186c <tc_init+0x24c>)
    17d0:	4798      	blx	r3
    17d2:	e76b      	b.n	16ac <tc_init+0x8c>
    17d4:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    17d6:	4643      	mov	r3, r8
    17d8:	1c5a      	adds	r2, r3, #1
    17da:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    17dc:	ab03      	add	r3, sp, #12
    17de:	5ad3      	ldrh	r3, [r2, r3]
    17e0:	4303      	orrs	r3, r0
    17e2:	620b      	str	r3, [r1, #32]
    17e4:	e76e      	b.n	16c4 <tc_init+0xa4>
    17e6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17e8:	b25b      	sxtb	r3, r3
    17ea:	2b00      	cmp	r3, #0
    17ec:	dbfb      	blt.n	17e6 <tc_init+0x1c6>
					config->counter_8_bit.value;
    17ee:	2328      	movs	r3, #40	; 0x28
    17f0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    17f2:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17f4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    17f6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17f8:	b25b      	sxtb	r3, r3
    17fa:	2b00      	cmp	r3, #0
    17fc:	dbfb      	blt.n	17f6 <tc_init+0x1d6>
					config->counter_8_bit.period;
    17fe:	2329      	movs	r3, #41	; 0x29
    1800:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1802:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1804:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1806:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1808:	b25b      	sxtb	r3, r3
    180a:	2b00      	cmp	r3, #0
    180c:	dbfb      	blt.n	1806 <tc_init+0x1e6>
					config->counter_8_bit.compare_capture_channel[0];
    180e:	232a      	movs	r3, #42	; 0x2a
    1810:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1812:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1814:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1816:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1818:	b25b      	sxtb	r3, r3
    181a:	2b00      	cmp	r3, #0
    181c:	dbfb      	blt.n	1816 <tc_init+0x1f6>
					config->counter_8_bit.compare_capture_channel[1];
    181e:	232b      	movs	r3, #43	; 0x2b
    1820:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1822:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1824:	2000      	movs	r0, #0
    1826:	e729      	b.n	167c <tc_init+0x5c>
    1828:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    182a:	b25b      	sxtb	r3, r3
    182c:	2b00      	cmp	r3, #0
    182e:	dbfb      	blt.n	1828 <tc_init+0x208>
				= config->counter_32_bit.value;
    1830:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1832:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1834:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1836:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1838:	b25b      	sxtb	r3, r3
    183a:	2b00      	cmp	r3, #0
    183c:	dbfb      	blt.n	1836 <tc_init+0x216>
			hw->COUNT32.CC[0].reg =
    183e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1840:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1842:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1844:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1846:	b25b      	sxtb	r3, r3
    1848:	2b00      	cmp	r3, #0
    184a:	dbfb      	blt.n	1844 <tc_init+0x224>
					config->counter_32_bit.compare_capture_channel[1];
    184c:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    184e:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1850:	2000      	movs	r0, #0
    1852:	e713      	b.n	167c <tc_init+0x5c>
    1854:	000015e9 	.word	0x000015e9
    1858:	000028bc 	.word	0x000028bc
    185c:	2000013c 	.word	0x2000013c
    1860:	40000400 	.word	0x40000400
    1864:	00001399 	.word	0x00001399
    1868:	0000130d 	.word	0x0000130d
    186c:	00001491 	.word	0x00001491

00001870 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1870:	e7fe      	b.n	1870 <Dummy_Handler>
	...

00001874 <Reset_Handler>:
{
    1874:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1876:	4a1a      	ldr	r2, [pc, #104]	; (18e0 <Reset_Handler+0x6c>)
    1878:	4b1a      	ldr	r3, [pc, #104]	; (18e4 <Reset_Handler+0x70>)
    187a:	429a      	cmp	r2, r3
    187c:	d011      	beq.n	18a2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    187e:	001a      	movs	r2, r3
    1880:	4b19      	ldr	r3, [pc, #100]	; (18e8 <Reset_Handler+0x74>)
    1882:	429a      	cmp	r2, r3
    1884:	d20d      	bcs.n	18a2 <Reset_Handler+0x2e>
    1886:	4a19      	ldr	r2, [pc, #100]	; (18ec <Reset_Handler+0x78>)
    1888:	3303      	adds	r3, #3
    188a:	1a9b      	subs	r3, r3, r2
    188c:	089b      	lsrs	r3, r3, #2
    188e:	3301      	adds	r3, #1
    1890:	009b      	lsls	r3, r3, #2
    1892:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1894:	4813      	ldr	r0, [pc, #76]	; (18e4 <Reset_Handler+0x70>)
    1896:	4912      	ldr	r1, [pc, #72]	; (18e0 <Reset_Handler+0x6c>)
    1898:	588c      	ldr	r4, [r1, r2]
    189a:	5084      	str	r4, [r0, r2]
    189c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    189e:	429a      	cmp	r2, r3
    18a0:	d1fa      	bne.n	1898 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    18a2:	4a13      	ldr	r2, [pc, #76]	; (18f0 <Reset_Handler+0x7c>)
    18a4:	4b13      	ldr	r3, [pc, #76]	; (18f4 <Reset_Handler+0x80>)
    18a6:	429a      	cmp	r2, r3
    18a8:	d20a      	bcs.n	18c0 <Reset_Handler+0x4c>
    18aa:	43d3      	mvns	r3, r2
    18ac:	4911      	ldr	r1, [pc, #68]	; (18f4 <Reset_Handler+0x80>)
    18ae:	185b      	adds	r3, r3, r1
    18b0:	2103      	movs	r1, #3
    18b2:	438b      	bics	r3, r1
    18b4:	3304      	adds	r3, #4
    18b6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    18b8:	2100      	movs	r1, #0
    18ba:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    18bc:	4293      	cmp	r3, r2
    18be:	d1fc      	bne.n	18ba <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    18c0:	4a0d      	ldr	r2, [pc, #52]	; (18f8 <Reset_Handler+0x84>)
    18c2:	21ff      	movs	r1, #255	; 0xff
    18c4:	4b0d      	ldr	r3, [pc, #52]	; (18fc <Reset_Handler+0x88>)
    18c6:	438b      	bics	r3, r1
    18c8:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    18ca:	4a0d      	ldr	r2, [pc, #52]	; (1900 <Reset_Handler+0x8c>)
    18cc:	6853      	ldr	r3, [r2, #4]
    18ce:	397f      	subs	r1, #127	; 0x7f
    18d0:	430b      	orrs	r3, r1
    18d2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    18d4:	4b0b      	ldr	r3, [pc, #44]	; (1904 <Reset_Handler+0x90>)
    18d6:	4798      	blx	r3
        main();
    18d8:	4b0b      	ldr	r3, [pc, #44]	; (1908 <Reset_Handler+0x94>)
    18da:	4798      	blx	r3
    18dc:	e7fe      	b.n	18dc <Reset_Handler+0x68>
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	0000294c 	.word	0x0000294c
    18e4:	20000000 	.word	0x20000000
    18e8:	20000090 	.word	0x20000090
    18ec:	20000004 	.word	0x20000004
    18f0:	20000090 	.word	0x20000090
    18f4:	200001c0 	.word	0x200001c0
    18f8:	e000ed00 	.word	0xe000ed00
    18fc:	00000000 	.word	0x00000000
    1900:	41004000 	.word	0x41004000
    1904:	00001fd1 	.word	0x00001fd1
    1908:	00001c11 	.word	0x00001c11

0000190c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    190c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    190e:	4a06      	ldr	r2, [pc, #24]	; (1928 <_sbrk+0x1c>)
    1910:	6812      	ldr	r2, [r2, #0]
    1912:	2a00      	cmp	r2, #0
    1914:	d004      	beq.n	1920 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1916:	4a04      	ldr	r2, [pc, #16]	; (1928 <_sbrk+0x1c>)
    1918:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    191a:	18c3      	adds	r3, r0, r3
    191c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    191e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1920:	4902      	ldr	r1, [pc, #8]	; (192c <_sbrk+0x20>)
    1922:	4a01      	ldr	r2, [pc, #4]	; (1928 <_sbrk+0x1c>)
    1924:	6011      	str	r1, [r2, #0]
    1926:	e7f6      	b.n	1916 <_sbrk+0xa>
    1928:	200000dc 	.word	0x200000dc
    192c:	200021c0 	.word	0x200021c0

00001930 <usart_read_callback>:
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA14, &config_port_pin);
}
//uart config
void usart_read_callback(struct usart_module *const usart_module)
{
    1930:	b510      	push	{r4, lr}
	usart_write_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    1932:	2205      	movs	r2, #5
    1934:	4902      	ldr	r1, [pc, #8]	; (1940 <usart_read_callback+0x10>)
    1936:	4803      	ldr	r0, [pc, #12]	; (1944 <usart_read_callback+0x14>)
    1938:	4b03      	ldr	r3, [pc, #12]	; (1948 <usart_read_callback+0x18>)
    193a:	4798      	blx	r3
}
    193c:	bd10      	pop	{r4, pc}
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	20000198 	.word	0x20000198
    1944:	20000174 	.word	0x20000174
    1948:	00000c39 	.word	0x00000c39

0000194c <capture_event_callback>:
	config_tc.enable_capture_on_channel[1] = 1;
	config_tc.clock_source = GCLK_GENERATOR_3;
	tc_init(&capture_instance, TC4, &config_tc);
}

void capture_event_callback(void){
    194c:	b570      	push	{r4, r5, r6, lr}
	Number = Captureclock/(TC4->COUNT16.CC[0].bit.CC);
    194e:	4b10      	ldr	r3, [pc, #64]	; (1990 <capture_event_callback+0x44>)
    1950:	8b19      	ldrh	r1, [r3, #24]
    1952:	b289      	uxth	r1, r1
    1954:	480f      	ldr	r0, [pc, #60]	; (1994 <capture_event_callback+0x48>)
    1956:	4b10      	ldr	r3, [pc, #64]	; (1998 <capture_event_callback+0x4c>)
    1958:	4798      	blx	r3
    195a:	0002      	movs	r2, r0
    195c:	4b0f      	ldr	r3, [pc, #60]	; (199c <capture_event_callback+0x50>)
    195e:	6018      	str	r0, [r3, #0]
	sprintf ( Result, "%d", Number ); // %d makes the result be a decimal integer
    1960:	4c0f      	ldr	r4, [pc, #60]	; (19a0 <capture_event_callback+0x54>)
    1962:	4910      	ldr	r1, [pc, #64]	; (19a4 <capture_event_callback+0x58>)
    1964:	0020      	movs	r0, r4
    1966:	4b10      	ldr	r3, [pc, #64]	; (19a8 <capture_event_callback+0x5c>)
    1968:	4798      	blx	r3
	strcat(Result,"\n\r");
    196a:	0020      	movs	r0, r4
    196c:	4b0f      	ldr	r3, [pc, #60]	; (19ac <capture_event_callback+0x60>)
    196e:	4798      	blx	r3
    1970:	1900      	adds	r0, r0, r4
    1972:	2203      	movs	r2, #3
    1974:	490e      	ldr	r1, [pc, #56]	; (19b0 <capture_event_callback+0x64>)
    1976:	4b0f      	ldr	r3, [pc, #60]	; (19b4 <capture_event_callback+0x68>)
    1978:	4798      	blx	r3
	usart_write_buffer_wait(&usart_instance, clearterm, sizeof(clearterm));
    197a:	4e0f      	ldr	r6, [pc, #60]	; (19b8 <capture_event_callback+0x6c>)
    197c:	2205      	movs	r2, #5
    197e:	490f      	ldr	r1, [pc, #60]	; (19bc <capture_event_callback+0x70>)
    1980:	0030      	movs	r0, r6
    1982:	4d0f      	ldr	r5, [pc, #60]	; (19c0 <capture_event_callback+0x74>)
    1984:	47a8      	blx	r5
	usart_write_buffer_wait(&usart_instance, Result, sizeof(Result));
    1986:	2220      	movs	r2, #32
    1988:	0021      	movs	r1, r4
    198a:	0030      	movs	r0, r6
    198c:	47a8      	blx	r5
}
    198e:	bd70      	pop	{r4, r5, r6, pc}
    1990:	42003000 	.word	0x42003000
    1994:	02dc6c00 	.word	0x02dc6c00
    1998:	00001da5 	.word	0x00001da5
    199c:	20000020 	.word	0x20000020
    19a0:	20000154 	.word	0x20000154
    19a4:	000028e0 	.word	0x000028e0
    19a8:	0000202d 	.word	0x0000202d
    19ac:	00002071 	.word	0x00002071
    19b0:	000028e4 	.word	0x000028e4
    19b4:	00002019 	.word	0x00002019
    19b8:	20000174 	.word	0x20000174
    19bc:	20000024 	.word	0x20000024
    19c0:	00000ae5 	.word	0x00000ae5

000019c4 <configure_port_pins>:
{
    19c4:	b570      	push	{r4, r5, r6, lr}
    19c6:	b082      	sub	sp, #8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    19c8:	ac01      	add	r4, sp, #4
    19ca:	2300      	movs	r3, #0
    19cc:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    19ce:	2601      	movs	r6, #1
    19d0:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    19d2:	70a3      	strb	r3, [r4, #2]
	port_pin_set_config(PIN_PA15, &config_port_pin);
    19d4:	0021      	movs	r1, r4
    19d6:	200f      	movs	r0, #15
    19d8:	4d03      	ldr	r5, [pc, #12]	; (19e8 <configure_port_pins+0x24>)
    19da:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    19dc:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(PIN_PA14, &config_port_pin);
    19de:	0021      	movs	r1, r4
    19e0:	200e      	movs	r0, #14
    19e2:	47a8      	blx	r5
}
    19e4:	b002      	add	sp, #8
    19e6:	bd70      	pop	{r4, r5, r6, pc}
    19e8:	0000048d 	.word	0x0000048d

000019ec <configure_usart>:
{
    19ec:	b530      	push	{r4, r5, lr}
    19ee:	b08d      	sub	sp, #52	; 0x34
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    19f0:	2380      	movs	r3, #128	; 0x80
    19f2:	05db      	lsls	r3, r3, #23
    19f4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    19f6:	2300      	movs	r3, #0
    19f8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    19fa:	22ff      	movs	r2, #255	; 0xff
    19fc:	4669      	mov	r1, sp
    19fe:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1a00:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1a02:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1a04:	2201      	movs	r2, #1
    1a06:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    1a08:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    1a0a:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    1a0c:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    1a0e:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1a10:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    1a12:	774b      	strb	r3, [r1, #29]
	config_usart.baudrate    = 115200;
    1a14:	23e1      	movs	r3, #225	; 0xe1
    1a16:	025b      	lsls	r3, r3, #9
    1a18:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    1a1a:	23c4      	movs	r3, #196	; 0xc4
    1a1c:	039b      	lsls	r3, r3, #14
    1a1e:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1a20:	2301      	movs	r3, #1
    1a22:	425b      	negs	r3, r3
    1a24:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1a26:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA14C_SERCOM2_PAD2;
    1a28:	4b10      	ldr	r3, [pc, #64]	; (1a6c <configure_usart+0x80>)
    1a2a:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA15C_SERCOM2_PAD3;
    1a2c:	4b10      	ldr	r3, [pc, #64]	; (1a70 <configure_usart+0x84>)
    1a2e:	930b      	str	r3, [sp, #44]	; 0x2c
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    1a30:	4d10      	ldr	r5, [pc, #64]	; (1a74 <configure_usart+0x88>)
    1a32:	4c11      	ldr	r4, [pc, #68]	; (1a78 <configure_usart+0x8c>)
    1a34:	466a      	mov	r2, sp
    1a36:	4911      	ldr	r1, [pc, #68]	; (1a7c <configure_usart+0x90>)
    1a38:	0028      	movs	r0, r5
    1a3a:	47a0      	blx	r4
    1a3c:	2800      	cmp	r0, #0
    1a3e:	d1f9      	bne.n	1a34 <configure_usart+0x48>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a40:	4d0c      	ldr	r5, [pc, #48]	; (1a74 <configure_usart+0x88>)
    1a42:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1a44:	0020      	movs	r0, r4
    1a46:	4b0e      	ldr	r3, [pc, #56]	; (1a80 <configure_usart+0x94>)
    1a48:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1a4a:	231f      	movs	r3, #31
    1a4c:	4018      	ands	r0, r3
    1a4e:	3b1e      	subs	r3, #30
    1a50:	4083      	lsls	r3, r0
    1a52:	4a0c      	ldr	r2, [pc, #48]	; (1a84 <configure_usart+0x98>)
    1a54:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a56:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1a58:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1a5a:	b21b      	sxth	r3, r3
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	dbfb      	blt.n	1a58 <configure_usart+0x6c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1a60:	6823      	ldr	r3, [r4, #0]
    1a62:	2202      	movs	r2, #2
    1a64:	4313      	orrs	r3, r2
    1a66:	6023      	str	r3, [r4, #0]
}
    1a68:	b00d      	add	sp, #52	; 0x34
    1a6a:	bd30      	pop	{r4, r5, pc}
    1a6c:	000e0002 	.word	0x000e0002
    1a70:	000f0002 	.word	0x000f0002
    1a74:	20000174 	.word	0x20000174
    1a78:	00000861 	.word	0x00000861
    1a7c:	42001000 	.word	0x42001000
    1a80:	000007fd 	.word	0x000007fd
    1a84:	e000e100 	.word	0xe000e100

00001a88 <configure_usart_callbacks>:
{
    1a88:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    1a8a:	4c06      	ldr	r4, [pc, #24]	; (1aa4 <configure_usart_callbacks+0x1c>)
    1a8c:	2201      	movs	r2, #1
    1a8e:	4906      	ldr	r1, [pc, #24]	; (1aa8 <configure_usart_callbacks+0x20>)
    1a90:	0020      	movs	r0, r4
    1a92:	4b06      	ldr	r3, [pc, #24]	; (1aac <configure_usart_callbacks+0x24>)
    1a94:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1a96:	2221      	movs	r2, #33	; 0x21
    1a98:	5ca3      	ldrb	r3, [r4, r2]
    1a9a:	2102      	movs	r1, #2
    1a9c:	430b      	orrs	r3, r1
    1a9e:	54a3      	strb	r3, [r4, r2]
}
    1aa0:	bd10      	pop	{r4, pc}
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	20000174 	.word	0x20000174
    1aa8:	00001931 	.word	0x00001931
    1aac:	00000c21 	.word	0x00000c21

00001ab0 <configure_tc>:
{
    1ab0:	b500      	push	{lr}
    1ab2:	b08f      	sub	sp, #60	; 0x3c
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1ab4:	aa01      	add	r2, sp, #4
    1ab6:	2300      	movs	r3, #0
    1ab8:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    1aba:	2100      	movs	r1, #0
    1abc:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1abe:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1ac0:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1ac2:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1ac4:	7291      	strb	r1, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1ac6:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1ac8:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1aca:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1acc:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1ace:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1ad0:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1ad2:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1ad4:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1ad6:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1ad8:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1ada:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0] = 1;
    1adc:	3301      	adds	r3, #1
    1ade:	72d3      	strb	r3, [r2, #11]
	config_tc.enable_capture_on_channel[1] = 1;
    1ae0:	7313      	strb	r3, [r2, #12]
	config_tc.clock_source = GCLK_GENERATOR_3;
    1ae2:	3302      	adds	r3, #2
    1ae4:	7013      	strb	r3, [r2, #0]
	tc_init(&capture_instance, TC4, &config_tc);
    1ae6:	4903      	ldr	r1, [pc, #12]	; (1af4 <configure_tc+0x44>)
    1ae8:	4803      	ldr	r0, [pc, #12]	; (1af8 <configure_tc+0x48>)
    1aea:	4b04      	ldr	r3, [pc, #16]	; (1afc <configure_tc+0x4c>)
    1aec:	4798      	blx	r3
}
    1aee:	b00f      	add	sp, #60	; 0x3c
    1af0:	bd00      	pop	{pc}
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	42003000 	.word	0x42003000
    1af8:	200001a0 	.word	0x200001a0
    1afc:	00001621 	.word	0x00001621

00001b00 <configure_event_controller>:
void configure_event_controller(void){
    1b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b02:	b091      	sub	sp, #68	; 0x44
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Tc *const tc_module = module_inst->hw;
    1b04:	4b36      	ldr	r3, [pc, #216]	; (1be0 <configure_event_controller+0xe0>)
    1b06:	6819      	ldr	r1, [r3, #0]

	uint32_t event_mask = 0;

	if (events->invert_event_input == true) {
    1b08:	ab06      	add	r3, sp, #24
    1b0a:	791b      	ldrb	r3, [r3, #4]
		event_mask |= TC_EVCTRL_TCINV;
    1b0c:	1e5a      	subs	r2, r3, #1
    1b0e:	4193      	sbcs	r3, r2
    1b10:	011b      	lsls	r3, r3, #4

	if (events->on_event_perform_action == true) {
		event_mask |= TC_EVCTRL_TCEI;
	}

	if (events->generate_event_on_overflow == true) {
    1b12:	aa06      	add	r2, sp, #24
    1b14:	7892      	ldrb	r2, [r2, #2]
    1b16:	2a00      	cmp	r2, #0
    1b18:	d15e      	bne.n	1bd8 <configure_event_controller+0xd8>
		event_mask |= TC_EVCTRL_TCEI;
    1b1a:	3220      	adds	r2, #32
    1b1c:	4313      	orrs	r3, r2
		event_mask |= TC_EVCTRL_OVFEO;
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (events->generate_event_on_compare_channel[i] == true) {
    1b1e:	aa06      	add	r2, sp, #24
    1b20:	7812      	ldrb	r2, [r2, #0]
    1b22:	2a00      	cmp	r2, #0
    1b24:	d002      	beq.n	1b2c <configure_event_controller+0x2c>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    1b26:	2280      	movs	r2, #128	; 0x80
    1b28:	0152      	lsls	r2, r2, #5
    1b2a:	4313      	orrs	r3, r2
		if (events->generate_event_on_compare_channel[i] == true) {
    1b2c:	aa06      	add	r2, sp, #24
    1b2e:	7852      	ldrb	r2, [r2, #1]
    1b30:	2a00      	cmp	r2, #0
    1b32:	d002      	beq.n	1b3a <configure_event_controller+0x3a>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    1b34:	2280      	movs	r2, #128	; 0x80
    1b36:	0192      	lsls	r2, r2, #6
    1b38:	4313      	orrs	r3, r2
		}
	}

	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
    1b3a:	894a      	ldrh	r2, [r1, #10]
    1b3c:	2005      	movs	r0, #5
    1b3e:	4302      	orrs	r2, r0
    1b40:	4313      	orrs	r3, r2
    1b42:	b29b      	uxth	r3, r3
    1b44:	814b      	strh	r3, [r1, #10]
	// f = 1/T, dutyCycle = tp / T
	events_tc.event_action = TC_EVENT_ACTION_PPW;
	// Enable the event action
	events_tc.on_event_perform_action = 1;
	tc_enable_events(&capture_instance, &events_tc);
	tc_register_callback(&capture_instance, capture_event_callback, TC_CALLBACK_CC_CHANNEL0);
    1b46:	4c26      	ldr	r4, [pc, #152]	; (1be0 <configure_event_controller+0xe0>)
    1b48:	2202      	movs	r2, #2
    1b4a:	4926      	ldr	r1, [pc, #152]	; (1be4 <configure_event_controller+0xe4>)
    1b4c:	0020      	movs	r0, r4
    1b4e:	4b26      	ldr	r3, [pc, #152]	; (1be8 <configure_event_controller+0xe8>)
    1b50:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1b52:	6820      	ldr	r0, [r4, #0]
    1b54:	4b25      	ldr	r3, [pc, #148]	; (1bec <configure_event_controller+0xec>)
    1b56:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1b58:	4b25      	ldr	r3, [pc, #148]	; (1bf0 <configure_event_controller+0xf0>)
    1b5a:	5c1a      	ldrb	r2, [r3, r0]
    1b5c:	231f      	movs	r3, #31
    1b5e:	4013      	ands	r3, r2
    1b60:	2701      	movs	r7, #1
    1b62:	003a      	movs	r2, r7
    1b64:	409a      	lsls	r2, r3
    1b66:	4b23      	ldr	r3, [pc, #140]	; (1bf4 <configure_event_controller+0xf4>)
    1b68:	601a      	str	r2, [r3, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1b6a:	7e63      	ldrb	r3, [r4, #25]
    1b6c:	2210      	movs	r2, #16
    1b6e:	4313      	orrs	r3, r2
    1b70:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1b72:	2310      	movs	r3, #16
    1b74:	6822      	ldr	r2, [r4, #0]
    1b76:	7353      	strb	r3, [r2, #13]
	tc_enable_callback(&capture_instance, TC_CALLBACK_CC_CHANNEL0);

	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    1b78:	ad03      	add	r5, sp, #12
    1b7a:	0028      	movs	r0, r5
    1b7c:	4b1e      	ldr	r3, [pc, #120]	; (1bf8 <configure_event_controller+0xf8>)
    1b7e:	4798      	blx	r3

	config_extint_chan.gpio_pin           = FREQ_PIN;
    1b80:	2311      	movs	r3, #17
    1b82:	9303      	str	r3, [sp, #12]
	config_extint_chan.gpio_pin_mux       = FREQ_MUX;
    1b84:	2600      	movs	r6, #0
    1b86:	606e      	str	r6, [r5, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    1b88:	722e      	strb	r6, [r5, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_HIGH;
    1b8a:	3b0d      	subs	r3, #13
    1b8c:	72eb      	strb	r3, [r5, #11]
	config_extint_chan.wake_if_sleeping   = 0;
    1b8e:	726e      	strb	r6, [r5, #9]
	extint_chan_set_config(1, &config_extint_chan);
    1b90:	0029      	movs	r1, r5
    1b92:	2001      	movs	r0, #1
    1b94:	4b19      	ldr	r3, [pc, #100]	; (1bfc <configure_event_controller+0xfc>)
    1b96:	4798      	blx	r3
	eic_events.generate_event_on_detect[1] = 1;
    1b98:	a808      	add	r0, sp, #32
    1b9a:	7047      	strb	r7, [r0, #1]
	extint_enable_events(&eic_events);
    1b9c:	4b18      	ldr	r3, [pc, #96]	; (1c00 <configure_event_controller+0x100>)
    1b9e:	4798      	blx	r3
	struct events_resource capture_event;
	struct events_config config_evt;
	events_get_config_defaults(&config_evt);
    1ba0:	4668      	mov	r0, sp
    1ba2:	4b18      	ldr	r3, [pc, #96]	; (1c04 <configure_event_controller+0x104>)
    1ba4:	4798      	blx	r3
	config_evt.generator      = BOARD_PHOTODIODE_GEN;
    1ba6:	230d      	movs	r3, #13
    1ba8:	466a      	mov	r2, sp
    1baa:	7093      	strb	r3, [r2, #2]
	config_evt.edge_detect    = EVENTS_EDGE_DETECT_NONE;
    1bac:	7016      	strb	r6, [r2, #0]
	config_evt.path           = EVENTS_PATH_ASYNCHRONOUS;
    1bae:	2302      	movs	r3, #2
    1bb0:	7053      	strb	r3, [r2, #1]
	events_allocate(&capture_event, &config_evt);
    1bb2:	4669      	mov	r1, sp
    1bb4:	a801      	add	r0, sp, #4
    1bb6:	4b14      	ldr	r3, [pc, #80]	; (1c08 <configure_event_controller+0x108>)
    1bb8:	4798      	blx	r3
	events_attach_user(&capture_event, EVSYS_ID_USER_TC4_EVU);
    1bba:	2104      	movs	r1, #4
    1bbc:	a801      	add	r0, sp, #4
    1bbe:	4b13      	ldr	r3, [pc, #76]	; (1c0c <configure_event_controller+0x10c>)
    1bc0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bc2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bc4:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1bc6:	b25b      	sxtb	r3, r3
    1bc8:	2b00      	cmp	r3, #0
    1bca:	dbfb      	blt.n	1bc4 <configure_event_controller+0xc4>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1bcc:	8813      	ldrh	r3, [r2, #0]
    1bce:	2102      	movs	r1, #2
    1bd0:	430b      	orrs	r3, r1
    1bd2:	8013      	strh	r3, [r2, #0]
	tc_enable(&capture_instance);
}
    1bd4:	b011      	add	sp, #68	; 0x44
    1bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		event_mask |= TC_EVCTRL_OVFEO;
    1bd8:	2290      	movs	r2, #144	; 0x90
    1bda:	0052      	lsls	r2, r2, #1
    1bdc:	4313      	orrs	r3, r2
    1bde:	e79e      	b.n	1b1e <configure_event_controller+0x1e>
    1be0:	200001a0 	.word	0x200001a0
    1be4:	0000194d 	.word	0x0000194d
    1be8:	000014f1 	.word	0x000014f1
    1bec:	000015e9 	.word	0x000015e9
    1bf0:	000028f0 	.word	0x000028f0
    1bf4:	e000e100 	.word	0xe000e100
    1bf8:	000003d5 	.word	0x000003d5
    1bfc:	000003e9 	.word	0x000003e9
    1c00:	00000461 	.word	0x00000461
    1c04:	00000219 	.word	0x00000219
    1c08:	00000229 	.word	0x00000229
    1c0c:	000002d9 	.word	0x000002d9

00001c10 <main>:


// main
int main (void)
{
    1c10:	b570      	push	{r4, r5, r6, lr}
	
	
	system_init();
    1c12:	4b11      	ldr	r3, [pc, #68]	; (1c58 <main+0x48>)
    1c14:	4798      	blx	r3
	delay_init();
    1c16:	4b11      	ldr	r3, [pc, #68]	; (1c5c <main+0x4c>)
    1c18:	4798      	blx	r3
	board_init();
    1c1a:	4b11      	ldr	r3, [pc, #68]	; (1c60 <main+0x50>)
    1c1c:	4798      	blx	r3
	configure_port_pins();
    1c1e:	4b11      	ldr	r3, [pc, #68]	; (1c64 <main+0x54>)
    1c20:	4798      	blx	r3
	configure_usart();
    1c22:	4b11      	ldr	r3, [pc, #68]	; (1c68 <main+0x58>)
    1c24:	4798      	blx	r3
	configure_usart_callbacks();
    1c26:	4b11      	ldr	r3, [pc, #68]	; (1c6c <main+0x5c>)
    1c28:	4798      	blx	r3
	configure_tc();
    1c2a:	4b11      	ldr	r3, [pc, #68]	; (1c70 <main+0x60>)
    1c2c:	4798      	blx	r3
	configure_event_controller();
    1c2e:	4b11      	ldr	r3, [pc, #68]	; (1c74 <main+0x64>)
    1c30:	4798      	blx	r3
	cpu_irq_enable();
    1c32:	2201      	movs	r2, #1
    1c34:	4b10      	ldr	r3, [pc, #64]	; (1c78 <main+0x68>)
    1c36:	701a      	strb	r2, [r3, #0]
    1c38:	f3bf 8f5f 	dmb	sy
    1c3c:	b662      	cpsie	i
	system_interrupt_enable_global();
	usart_write_buffer_wait(&usart_instance, "Hello", sizeof("Hello"));
    1c3e:	3205      	adds	r2, #5
    1c40:	490e      	ldr	r1, [pc, #56]	; (1c7c <main+0x6c>)
    1c42:	480f      	ldr	r0, [pc, #60]	; (1c80 <main+0x70>)
    1c44:	4b0f      	ldr	r3, [pc, #60]	; (1c84 <main+0x74>)
    1c46:	4798      	blx	r3
	
	

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		usart_read_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    1c48:	4e0f      	ldr	r6, [pc, #60]	; (1c88 <main+0x78>)
    1c4a:	4d0d      	ldr	r5, [pc, #52]	; (1c80 <main+0x70>)
    1c4c:	4c0f      	ldr	r4, [pc, #60]	; (1c8c <main+0x7c>)
    1c4e:	2205      	movs	r2, #5
    1c50:	0031      	movs	r1, r6
    1c52:	0028      	movs	r0, r5
    1c54:	47a0      	blx	r4
    1c56:	e7fa      	b.n	1c4e <main+0x3e>
    1c58:	000014c5 	.word	0x000014c5
    1c5c:	00000109 	.word	0x00000109
    1c60:	00000105 	.word	0x00000105
    1c64:	000019c5 	.word	0x000019c5
    1c68:	000019ed 	.word	0x000019ed
    1c6c:	00001a89 	.word	0x00001a89
    1c70:	00001ab1 	.word	0x00001ab1
    1c74:	00001b01 	.word	0x00001b01
    1c78:	20000008 	.word	0x20000008
    1c7c:	000028e8 	.word	0x000028e8
    1c80:	20000174 	.word	0x20000174
    1c84:	00000ae5 	.word	0x00000ae5
    1c88:	20000198 	.word	0x20000198
    1c8c:	00000c59 	.word	0x00000c59

00001c90 <__udivsi3>:
    1c90:	2200      	movs	r2, #0
    1c92:	0843      	lsrs	r3, r0, #1
    1c94:	428b      	cmp	r3, r1
    1c96:	d374      	bcc.n	1d82 <__udivsi3+0xf2>
    1c98:	0903      	lsrs	r3, r0, #4
    1c9a:	428b      	cmp	r3, r1
    1c9c:	d35f      	bcc.n	1d5e <__udivsi3+0xce>
    1c9e:	0a03      	lsrs	r3, r0, #8
    1ca0:	428b      	cmp	r3, r1
    1ca2:	d344      	bcc.n	1d2e <__udivsi3+0x9e>
    1ca4:	0b03      	lsrs	r3, r0, #12
    1ca6:	428b      	cmp	r3, r1
    1ca8:	d328      	bcc.n	1cfc <__udivsi3+0x6c>
    1caa:	0c03      	lsrs	r3, r0, #16
    1cac:	428b      	cmp	r3, r1
    1cae:	d30d      	bcc.n	1ccc <__udivsi3+0x3c>
    1cb0:	22ff      	movs	r2, #255	; 0xff
    1cb2:	0209      	lsls	r1, r1, #8
    1cb4:	ba12      	rev	r2, r2
    1cb6:	0c03      	lsrs	r3, r0, #16
    1cb8:	428b      	cmp	r3, r1
    1cba:	d302      	bcc.n	1cc2 <__udivsi3+0x32>
    1cbc:	1212      	asrs	r2, r2, #8
    1cbe:	0209      	lsls	r1, r1, #8
    1cc0:	d065      	beq.n	1d8e <__udivsi3+0xfe>
    1cc2:	0b03      	lsrs	r3, r0, #12
    1cc4:	428b      	cmp	r3, r1
    1cc6:	d319      	bcc.n	1cfc <__udivsi3+0x6c>
    1cc8:	e000      	b.n	1ccc <__udivsi3+0x3c>
    1cca:	0a09      	lsrs	r1, r1, #8
    1ccc:	0bc3      	lsrs	r3, r0, #15
    1cce:	428b      	cmp	r3, r1
    1cd0:	d301      	bcc.n	1cd6 <__udivsi3+0x46>
    1cd2:	03cb      	lsls	r3, r1, #15
    1cd4:	1ac0      	subs	r0, r0, r3
    1cd6:	4152      	adcs	r2, r2
    1cd8:	0b83      	lsrs	r3, r0, #14
    1cda:	428b      	cmp	r3, r1
    1cdc:	d301      	bcc.n	1ce2 <__udivsi3+0x52>
    1cde:	038b      	lsls	r3, r1, #14
    1ce0:	1ac0      	subs	r0, r0, r3
    1ce2:	4152      	adcs	r2, r2
    1ce4:	0b43      	lsrs	r3, r0, #13
    1ce6:	428b      	cmp	r3, r1
    1ce8:	d301      	bcc.n	1cee <__udivsi3+0x5e>
    1cea:	034b      	lsls	r3, r1, #13
    1cec:	1ac0      	subs	r0, r0, r3
    1cee:	4152      	adcs	r2, r2
    1cf0:	0b03      	lsrs	r3, r0, #12
    1cf2:	428b      	cmp	r3, r1
    1cf4:	d301      	bcc.n	1cfa <__udivsi3+0x6a>
    1cf6:	030b      	lsls	r3, r1, #12
    1cf8:	1ac0      	subs	r0, r0, r3
    1cfa:	4152      	adcs	r2, r2
    1cfc:	0ac3      	lsrs	r3, r0, #11
    1cfe:	428b      	cmp	r3, r1
    1d00:	d301      	bcc.n	1d06 <__udivsi3+0x76>
    1d02:	02cb      	lsls	r3, r1, #11
    1d04:	1ac0      	subs	r0, r0, r3
    1d06:	4152      	adcs	r2, r2
    1d08:	0a83      	lsrs	r3, r0, #10
    1d0a:	428b      	cmp	r3, r1
    1d0c:	d301      	bcc.n	1d12 <__udivsi3+0x82>
    1d0e:	028b      	lsls	r3, r1, #10
    1d10:	1ac0      	subs	r0, r0, r3
    1d12:	4152      	adcs	r2, r2
    1d14:	0a43      	lsrs	r3, r0, #9
    1d16:	428b      	cmp	r3, r1
    1d18:	d301      	bcc.n	1d1e <__udivsi3+0x8e>
    1d1a:	024b      	lsls	r3, r1, #9
    1d1c:	1ac0      	subs	r0, r0, r3
    1d1e:	4152      	adcs	r2, r2
    1d20:	0a03      	lsrs	r3, r0, #8
    1d22:	428b      	cmp	r3, r1
    1d24:	d301      	bcc.n	1d2a <__udivsi3+0x9a>
    1d26:	020b      	lsls	r3, r1, #8
    1d28:	1ac0      	subs	r0, r0, r3
    1d2a:	4152      	adcs	r2, r2
    1d2c:	d2cd      	bcs.n	1cca <__udivsi3+0x3a>
    1d2e:	09c3      	lsrs	r3, r0, #7
    1d30:	428b      	cmp	r3, r1
    1d32:	d301      	bcc.n	1d38 <__udivsi3+0xa8>
    1d34:	01cb      	lsls	r3, r1, #7
    1d36:	1ac0      	subs	r0, r0, r3
    1d38:	4152      	adcs	r2, r2
    1d3a:	0983      	lsrs	r3, r0, #6
    1d3c:	428b      	cmp	r3, r1
    1d3e:	d301      	bcc.n	1d44 <__udivsi3+0xb4>
    1d40:	018b      	lsls	r3, r1, #6
    1d42:	1ac0      	subs	r0, r0, r3
    1d44:	4152      	adcs	r2, r2
    1d46:	0943      	lsrs	r3, r0, #5
    1d48:	428b      	cmp	r3, r1
    1d4a:	d301      	bcc.n	1d50 <__udivsi3+0xc0>
    1d4c:	014b      	lsls	r3, r1, #5
    1d4e:	1ac0      	subs	r0, r0, r3
    1d50:	4152      	adcs	r2, r2
    1d52:	0903      	lsrs	r3, r0, #4
    1d54:	428b      	cmp	r3, r1
    1d56:	d301      	bcc.n	1d5c <__udivsi3+0xcc>
    1d58:	010b      	lsls	r3, r1, #4
    1d5a:	1ac0      	subs	r0, r0, r3
    1d5c:	4152      	adcs	r2, r2
    1d5e:	08c3      	lsrs	r3, r0, #3
    1d60:	428b      	cmp	r3, r1
    1d62:	d301      	bcc.n	1d68 <__udivsi3+0xd8>
    1d64:	00cb      	lsls	r3, r1, #3
    1d66:	1ac0      	subs	r0, r0, r3
    1d68:	4152      	adcs	r2, r2
    1d6a:	0883      	lsrs	r3, r0, #2
    1d6c:	428b      	cmp	r3, r1
    1d6e:	d301      	bcc.n	1d74 <__udivsi3+0xe4>
    1d70:	008b      	lsls	r3, r1, #2
    1d72:	1ac0      	subs	r0, r0, r3
    1d74:	4152      	adcs	r2, r2
    1d76:	0843      	lsrs	r3, r0, #1
    1d78:	428b      	cmp	r3, r1
    1d7a:	d301      	bcc.n	1d80 <__udivsi3+0xf0>
    1d7c:	004b      	lsls	r3, r1, #1
    1d7e:	1ac0      	subs	r0, r0, r3
    1d80:	4152      	adcs	r2, r2
    1d82:	1a41      	subs	r1, r0, r1
    1d84:	d200      	bcs.n	1d88 <__udivsi3+0xf8>
    1d86:	4601      	mov	r1, r0
    1d88:	4152      	adcs	r2, r2
    1d8a:	4610      	mov	r0, r2
    1d8c:	4770      	bx	lr
    1d8e:	e7ff      	b.n	1d90 <__udivsi3+0x100>
    1d90:	b501      	push	{r0, lr}
    1d92:	2000      	movs	r0, #0
    1d94:	f000 f8f0 	bl	1f78 <__aeabi_idiv0>
    1d98:	bd02      	pop	{r1, pc}
    1d9a:	46c0      	nop			; (mov r8, r8)

00001d9c <__aeabi_uidivmod>:
    1d9c:	2900      	cmp	r1, #0
    1d9e:	d0f7      	beq.n	1d90 <__udivsi3+0x100>
    1da0:	e776      	b.n	1c90 <__udivsi3>
    1da2:	4770      	bx	lr

00001da4 <__divsi3>:
    1da4:	4603      	mov	r3, r0
    1da6:	430b      	orrs	r3, r1
    1da8:	d47f      	bmi.n	1eaa <__divsi3+0x106>
    1daa:	2200      	movs	r2, #0
    1dac:	0843      	lsrs	r3, r0, #1
    1dae:	428b      	cmp	r3, r1
    1db0:	d374      	bcc.n	1e9c <__divsi3+0xf8>
    1db2:	0903      	lsrs	r3, r0, #4
    1db4:	428b      	cmp	r3, r1
    1db6:	d35f      	bcc.n	1e78 <__divsi3+0xd4>
    1db8:	0a03      	lsrs	r3, r0, #8
    1dba:	428b      	cmp	r3, r1
    1dbc:	d344      	bcc.n	1e48 <__divsi3+0xa4>
    1dbe:	0b03      	lsrs	r3, r0, #12
    1dc0:	428b      	cmp	r3, r1
    1dc2:	d328      	bcc.n	1e16 <__divsi3+0x72>
    1dc4:	0c03      	lsrs	r3, r0, #16
    1dc6:	428b      	cmp	r3, r1
    1dc8:	d30d      	bcc.n	1de6 <__divsi3+0x42>
    1dca:	22ff      	movs	r2, #255	; 0xff
    1dcc:	0209      	lsls	r1, r1, #8
    1dce:	ba12      	rev	r2, r2
    1dd0:	0c03      	lsrs	r3, r0, #16
    1dd2:	428b      	cmp	r3, r1
    1dd4:	d302      	bcc.n	1ddc <__divsi3+0x38>
    1dd6:	1212      	asrs	r2, r2, #8
    1dd8:	0209      	lsls	r1, r1, #8
    1dda:	d065      	beq.n	1ea8 <__divsi3+0x104>
    1ddc:	0b03      	lsrs	r3, r0, #12
    1dde:	428b      	cmp	r3, r1
    1de0:	d319      	bcc.n	1e16 <__divsi3+0x72>
    1de2:	e000      	b.n	1de6 <__divsi3+0x42>
    1de4:	0a09      	lsrs	r1, r1, #8
    1de6:	0bc3      	lsrs	r3, r0, #15
    1de8:	428b      	cmp	r3, r1
    1dea:	d301      	bcc.n	1df0 <__divsi3+0x4c>
    1dec:	03cb      	lsls	r3, r1, #15
    1dee:	1ac0      	subs	r0, r0, r3
    1df0:	4152      	adcs	r2, r2
    1df2:	0b83      	lsrs	r3, r0, #14
    1df4:	428b      	cmp	r3, r1
    1df6:	d301      	bcc.n	1dfc <__divsi3+0x58>
    1df8:	038b      	lsls	r3, r1, #14
    1dfa:	1ac0      	subs	r0, r0, r3
    1dfc:	4152      	adcs	r2, r2
    1dfe:	0b43      	lsrs	r3, r0, #13
    1e00:	428b      	cmp	r3, r1
    1e02:	d301      	bcc.n	1e08 <__divsi3+0x64>
    1e04:	034b      	lsls	r3, r1, #13
    1e06:	1ac0      	subs	r0, r0, r3
    1e08:	4152      	adcs	r2, r2
    1e0a:	0b03      	lsrs	r3, r0, #12
    1e0c:	428b      	cmp	r3, r1
    1e0e:	d301      	bcc.n	1e14 <__divsi3+0x70>
    1e10:	030b      	lsls	r3, r1, #12
    1e12:	1ac0      	subs	r0, r0, r3
    1e14:	4152      	adcs	r2, r2
    1e16:	0ac3      	lsrs	r3, r0, #11
    1e18:	428b      	cmp	r3, r1
    1e1a:	d301      	bcc.n	1e20 <__divsi3+0x7c>
    1e1c:	02cb      	lsls	r3, r1, #11
    1e1e:	1ac0      	subs	r0, r0, r3
    1e20:	4152      	adcs	r2, r2
    1e22:	0a83      	lsrs	r3, r0, #10
    1e24:	428b      	cmp	r3, r1
    1e26:	d301      	bcc.n	1e2c <__divsi3+0x88>
    1e28:	028b      	lsls	r3, r1, #10
    1e2a:	1ac0      	subs	r0, r0, r3
    1e2c:	4152      	adcs	r2, r2
    1e2e:	0a43      	lsrs	r3, r0, #9
    1e30:	428b      	cmp	r3, r1
    1e32:	d301      	bcc.n	1e38 <__divsi3+0x94>
    1e34:	024b      	lsls	r3, r1, #9
    1e36:	1ac0      	subs	r0, r0, r3
    1e38:	4152      	adcs	r2, r2
    1e3a:	0a03      	lsrs	r3, r0, #8
    1e3c:	428b      	cmp	r3, r1
    1e3e:	d301      	bcc.n	1e44 <__divsi3+0xa0>
    1e40:	020b      	lsls	r3, r1, #8
    1e42:	1ac0      	subs	r0, r0, r3
    1e44:	4152      	adcs	r2, r2
    1e46:	d2cd      	bcs.n	1de4 <__divsi3+0x40>
    1e48:	09c3      	lsrs	r3, r0, #7
    1e4a:	428b      	cmp	r3, r1
    1e4c:	d301      	bcc.n	1e52 <__divsi3+0xae>
    1e4e:	01cb      	lsls	r3, r1, #7
    1e50:	1ac0      	subs	r0, r0, r3
    1e52:	4152      	adcs	r2, r2
    1e54:	0983      	lsrs	r3, r0, #6
    1e56:	428b      	cmp	r3, r1
    1e58:	d301      	bcc.n	1e5e <__divsi3+0xba>
    1e5a:	018b      	lsls	r3, r1, #6
    1e5c:	1ac0      	subs	r0, r0, r3
    1e5e:	4152      	adcs	r2, r2
    1e60:	0943      	lsrs	r3, r0, #5
    1e62:	428b      	cmp	r3, r1
    1e64:	d301      	bcc.n	1e6a <__divsi3+0xc6>
    1e66:	014b      	lsls	r3, r1, #5
    1e68:	1ac0      	subs	r0, r0, r3
    1e6a:	4152      	adcs	r2, r2
    1e6c:	0903      	lsrs	r3, r0, #4
    1e6e:	428b      	cmp	r3, r1
    1e70:	d301      	bcc.n	1e76 <__divsi3+0xd2>
    1e72:	010b      	lsls	r3, r1, #4
    1e74:	1ac0      	subs	r0, r0, r3
    1e76:	4152      	adcs	r2, r2
    1e78:	08c3      	lsrs	r3, r0, #3
    1e7a:	428b      	cmp	r3, r1
    1e7c:	d301      	bcc.n	1e82 <__divsi3+0xde>
    1e7e:	00cb      	lsls	r3, r1, #3
    1e80:	1ac0      	subs	r0, r0, r3
    1e82:	4152      	adcs	r2, r2
    1e84:	0883      	lsrs	r3, r0, #2
    1e86:	428b      	cmp	r3, r1
    1e88:	d301      	bcc.n	1e8e <__divsi3+0xea>
    1e8a:	008b      	lsls	r3, r1, #2
    1e8c:	1ac0      	subs	r0, r0, r3
    1e8e:	4152      	adcs	r2, r2
    1e90:	0843      	lsrs	r3, r0, #1
    1e92:	428b      	cmp	r3, r1
    1e94:	d301      	bcc.n	1e9a <__divsi3+0xf6>
    1e96:	004b      	lsls	r3, r1, #1
    1e98:	1ac0      	subs	r0, r0, r3
    1e9a:	4152      	adcs	r2, r2
    1e9c:	1a41      	subs	r1, r0, r1
    1e9e:	d200      	bcs.n	1ea2 <__divsi3+0xfe>
    1ea0:	4601      	mov	r1, r0
    1ea2:	4152      	adcs	r2, r2
    1ea4:	4610      	mov	r0, r2
    1ea6:	4770      	bx	lr
    1ea8:	e05d      	b.n	1f66 <__divsi3+0x1c2>
    1eaa:	0fca      	lsrs	r2, r1, #31
    1eac:	d000      	beq.n	1eb0 <__divsi3+0x10c>
    1eae:	4249      	negs	r1, r1
    1eb0:	1003      	asrs	r3, r0, #32
    1eb2:	d300      	bcc.n	1eb6 <__divsi3+0x112>
    1eb4:	4240      	negs	r0, r0
    1eb6:	4053      	eors	r3, r2
    1eb8:	2200      	movs	r2, #0
    1eba:	469c      	mov	ip, r3
    1ebc:	0903      	lsrs	r3, r0, #4
    1ebe:	428b      	cmp	r3, r1
    1ec0:	d32d      	bcc.n	1f1e <__divsi3+0x17a>
    1ec2:	0a03      	lsrs	r3, r0, #8
    1ec4:	428b      	cmp	r3, r1
    1ec6:	d312      	bcc.n	1eee <__divsi3+0x14a>
    1ec8:	22fc      	movs	r2, #252	; 0xfc
    1eca:	0189      	lsls	r1, r1, #6
    1ecc:	ba12      	rev	r2, r2
    1ece:	0a03      	lsrs	r3, r0, #8
    1ed0:	428b      	cmp	r3, r1
    1ed2:	d30c      	bcc.n	1eee <__divsi3+0x14a>
    1ed4:	0189      	lsls	r1, r1, #6
    1ed6:	1192      	asrs	r2, r2, #6
    1ed8:	428b      	cmp	r3, r1
    1eda:	d308      	bcc.n	1eee <__divsi3+0x14a>
    1edc:	0189      	lsls	r1, r1, #6
    1ede:	1192      	asrs	r2, r2, #6
    1ee0:	428b      	cmp	r3, r1
    1ee2:	d304      	bcc.n	1eee <__divsi3+0x14a>
    1ee4:	0189      	lsls	r1, r1, #6
    1ee6:	d03a      	beq.n	1f5e <__divsi3+0x1ba>
    1ee8:	1192      	asrs	r2, r2, #6
    1eea:	e000      	b.n	1eee <__divsi3+0x14a>
    1eec:	0989      	lsrs	r1, r1, #6
    1eee:	09c3      	lsrs	r3, r0, #7
    1ef0:	428b      	cmp	r3, r1
    1ef2:	d301      	bcc.n	1ef8 <__divsi3+0x154>
    1ef4:	01cb      	lsls	r3, r1, #7
    1ef6:	1ac0      	subs	r0, r0, r3
    1ef8:	4152      	adcs	r2, r2
    1efa:	0983      	lsrs	r3, r0, #6
    1efc:	428b      	cmp	r3, r1
    1efe:	d301      	bcc.n	1f04 <__divsi3+0x160>
    1f00:	018b      	lsls	r3, r1, #6
    1f02:	1ac0      	subs	r0, r0, r3
    1f04:	4152      	adcs	r2, r2
    1f06:	0943      	lsrs	r3, r0, #5
    1f08:	428b      	cmp	r3, r1
    1f0a:	d301      	bcc.n	1f10 <__divsi3+0x16c>
    1f0c:	014b      	lsls	r3, r1, #5
    1f0e:	1ac0      	subs	r0, r0, r3
    1f10:	4152      	adcs	r2, r2
    1f12:	0903      	lsrs	r3, r0, #4
    1f14:	428b      	cmp	r3, r1
    1f16:	d301      	bcc.n	1f1c <__divsi3+0x178>
    1f18:	010b      	lsls	r3, r1, #4
    1f1a:	1ac0      	subs	r0, r0, r3
    1f1c:	4152      	adcs	r2, r2
    1f1e:	08c3      	lsrs	r3, r0, #3
    1f20:	428b      	cmp	r3, r1
    1f22:	d301      	bcc.n	1f28 <__divsi3+0x184>
    1f24:	00cb      	lsls	r3, r1, #3
    1f26:	1ac0      	subs	r0, r0, r3
    1f28:	4152      	adcs	r2, r2
    1f2a:	0883      	lsrs	r3, r0, #2
    1f2c:	428b      	cmp	r3, r1
    1f2e:	d301      	bcc.n	1f34 <__divsi3+0x190>
    1f30:	008b      	lsls	r3, r1, #2
    1f32:	1ac0      	subs	r0, r0, r3
    1f34:	4152      	adcs	r2, r2
    1f36:	d2d9      	bcs.n	1eec <__divsi3+0x148>
    1f38:	0843      	lsrs	r3, r0, #1
    1f3a:	428b      	cmp	r3, r1
    1f3c:	d301      	bcc.n	1f42 <__divsi3+0x19e>
    1f3e:	004b      	lsls	r3, r1, #1
    1f40:	1ac0      	subs	r0, r0, r3
    1f42:	4152      	adcs	r2, r2
    1f44:	1a41      	subs	r1, r0, r1
    1f46:	d200      	bcs.n	1f4a <__divsi3+0x1a6>
    1f48:	4601      	mov	r1, r0
    1f4a:	4663      	mov	r3, ip
    1f4c:	4152      	adcs	r2, r2
    1f4e:	105b      	asrs	r3, r3, #1
    1f50:	4610      	mov	r0, r2
    1f52:	d301      	bcc.n	1f58 <__divsi3+0x1b4>
    1f54:	4240      	negs	r0, r0
    1f56:	2b00      	cmp	r3, #0
    1f58:	d500      	bpl.n	1f5c <__divsi3+0x1b8>
    1f5a:	4249      	negs	r1, r1
    1f5c:	4770      	bx	lr
    1f5e:	4663      	mov	r3, ip
    1f60:	105b      	asrs	r3, r3, #1
    1f62:	d300      	bcc.n	1f66 <__divsi3+0x1c2>
    1f64:	4240      	negs	r0, r0
    1f66:	b501      	push	{r0, lr}
    1f68:	2000      	movs	r0, #0
    1f6a:	f000 f805 	bl	1f78 <__aeabi_idiv0>
    1f6e:	bd02      	pop	{r1, pc}

00001f70 <__aeabi_idivmod>:
    1f70:	2900      	cmp	r1, #0
    1f72:	d0f8      	beq.n	1f66 <__divsi3+0x1c2>
    1f74:	e716      	b.n	1da4 <__divsi3>
    1f76:	4770      	bx	lr

00001f78 <__aeabi_idiv0>:
    1f78:	4770      	bx	lr
    1f7a:	46c0      	nop			; (mov r8, r8)

00001f7c <__aeabi_lmul>:
    1f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7e:	46ce      	mov	lr, r9
    1f80:	4647      	mov	r7, r8
    1f82:	0415      	lsls	r5, r2, #16
    1f84:	0c2d      	lsrs	r5, r5, #16
    1f86:	002e      	movs	r6, r5
    1f88:	b580      	push	{r7, lr}
    1f8a:	0407      	lsls	r7, r0, #16
    1f8c:	0c14      	lsrs	r4, r2, #16
    1f8e:	0c3f      	lsrs	r7, r7, #16
    1f90:	4699      	mov	r9, r3
    1f92:	0c03      	lsrs	r3, r0, #16
    1f94:	437e      	muls	r6, r7
    1f96:	435d      	muls	r5, r3
    1f98:	4367      	muls	r7, r4
    1f9a:	4363      	muls	r3, r4
    1f9c:	197f      	adds	r7, r7, r5
    1f9e:	0c34      	lsrs	r4, r6, #16
    1fa0:	19e4      	adds	r4, r4, r7
    1fa2:	469c      	mov	ip, r3
    1fa4:	42a5      	cmp	r5, r4
    1fa6:	d903      	bls.n	1fb0 <__aeabi_lmul+0x34>
    1fa8:	2380      	movs	r3, #128	; 0x80
    1faa:	025b      	lsls	r3, r3, #9
    1fac:	4698      	mov	r8, r3
    1fae:	44c4      	add	ip, r8
    1fb0:	464b      	mov	r3, r9
    1fb2:	4351      	muls	r1, r2
    1fb4:	4343      	muls	r3, r0
    1fb6:	0436      	lsls	r6, r6, #16
    1fb8:	0c36      	lsrs	r6, r6, #16
    1fba:	0c25      	lsrs	r5, r4, #16
    1fbc:	0424      	lsls	r4, r4, #16
    1fbe:	4465      	add	r5, ip
    1fc0:	19a4      	adds	r4, r4, r6
    1fc2:	1859      	adds	r1, r3, r1
    1fc4:	1949      	adds	r1, r1, r5
    1fc6:	0020      	movs	r0, r4
    1fc8:	bc0c      	pop	{r2, r3}
    1fca:	4690      	mov	r8, r2
    1fcc:	4699      	mov	r9, r3
    1fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001fd0 <__libc_init_array>:
    1fd0:	b570      	push	{r4, r5, r6, lr}
    1fd2:	2600      	movs	r6, #0
    1fd4:	4d0c      	ldr	r5, [pc, #48]	; (2008 <STACK_SIZE+0x8>)
    1fd6:	4c0d      	ldr	r4, [pc, #52]	; (200c <STACK_SIZE+0xc>)
    1fd8:	1b64      	subs	r4, r4, r5
    1fda:	10a4      	asrs	r4, r4, #2
    1fdc:	42a6      	cmp	r6, r4
    1fde:	d109      	bne.n	1ff4 <__libc_init_array+0x24>
    1fe0:	2600      	movs	r6, #0
    1fe2:	f000 fca3 	bl	292c <_init>
    1fe6:	4d0a      	ldr	r5, [pc, #40]	; (2010 <STACK_SIZE+0x10>)
    1fe8:	4c0a      	ldr	r4, [pc, #40]	; (2014 <STACK_SIZE+0x14>)
    1fea:	1b64      	subs	r4, r4, r5
    1fec:	10a4      	asrs	r4, r4, #2
    1fee:	42a6      	cmp	r6, r4
    1ff0:	d105      	bne.n	1ffe <__libc_init_array+0x2e>
    1ff2:	bd70      	pop	{r4, r5, r6, pc}
    1ff4:	00b3      	lsls	r3, r6, #2
    1ff6:	58eb      	ldr	r3, [r5, r3]
    1ff8:	4798      	blx	r3
    1ffa:	3601      	adds	r6, #1
    1ffc:	e7ee      	b.n	1fdc <__libc_init_array+0xc>
    1ffe:	00b3      	lsls	r3, r6, #2
    2000:	58eb      	ldr	r3, [r5, r3]
    2002:	4798      	blx	r3
    2004:	3601      	adds	r6, #1
    2006:	e7f2      	b.n	1fee <__libc_init_array+0x1e>
    2008:	00002938 	.word	0x00002938
    200c:	00002938 	.word	0x00002938
    2010:	00002938 	.word	0x00002938
    2014:	0000293c 	.word	0x0000293c

00002018 <memcpy>:
    2018:	2300      	movs	r3, #0
    201a:	b510      	push	{r4, lr}
    201c:	429a      	cmp	r2, r3
    201e:	d100      	bne.n	2022 <memcpy+0xa>
    2020:	bd10      	pop	{r4, pc}
    2022:	5ccc      	ldrb	r4, [r1, r3]
    2024:	54c4      	strb	r4, [r0, r3]
    2026:	3301      	adds	r3, #1
    2028:	e7f8      	b.n	201c <memcpy+0x4>
	...

0000202c <siprintf>:
    202c:	b40e      	push	{r1, r2, r3}
    202e:	b510      	push	{r4, lr}
    2030:	b09d      	sub	sp, #116	; 0x74
    2032:	a902      	add	r1, sp, #8
    2034:	9002      	str	r0, [sp, #8]
    2036:	6108      	str	r0, [r1, #16]
    2038:	480b      	ldr	r0, [pc, #44]	; (2068 <siprintf+0x3c>)
    203a:	2482      	movs	r4, #130	; 0x82
    203c:	6088      	str	r0, [r1, #8]
    203e:	6148      	str	r0, [r1, #20]
    2040:	2001      	movs	r0, #1
    2042:	4240      	negs	r0, r0
    2044:	ab1f      	add	r3, sp, #124	; 0x7c
    2046:	81c8      	strh	r0, [r1, #14]
    2048:	4808      	ldr	r0, [pc, #32]	; (206c <siprintf+0x40>)
    204a:	cb04      	ldmia	r3!, {r2}
    204c:	00a4      	lsls	r4, r4, #2
    204e:	6800      	ldr	r0, [r0, #0]
    2050:	9301      	str	r3, [sp, #4]
    2052:	818c      	strh	r4, [r1, #12]
    2054:	f000 f876 	bl	2144 <_svfiprintf_r>
    2058:	2300      	movs	r3, #0
    205a:	9a02      	ldr	r2, [sp, #8]
    205c:	7013      	strb	r3, [r2, #0]
    205e:	b01d      	add	sp, #116	; 0x74
    2060:	bc10      	pop	{r4}
    2062:	bc08      	pop	{r3}
    2064:	b003      	add	sp, #12
    2066:	4718      	bx	r3
    2068:	7fffffff 	.word	0x7fffffff
    206c:	2000002c 	.word	0x2000002c

00002070 <strlen>:
    2070:	2300      	movs	r3, #0
    2072:	5cc2      	ldrb	r2, [r0, r3]
    2074:	3301      	adds	r3, #1
    2076:	2a00      	cmp	r2, #0
    2078:	d1fb      	bne.n	2072 <strlen+0x2>
    207a:	1e58      	subs	r0, r3, #1
    207c:	4770      	bx	lr
	...

00002080 <__ssputs_r>:
    2080:	b5f0      	push	{r4, r5, r6, r7, lr}
    2082:	688e      	ldr	r6, [r1, #8]
    2084:	b085      	sub	sp, #20
    2086:	0007      	movs	r7, r0
    2088:	000c      	movs	r4, r1
    208a:	9203      	str	r2, [sp, #12]
    208c:	9301      	str	r3, [sp, #4]
    208e:	429e      	cmp	r6, r3
    2090:	d839      	bhi.n	2106 <__ssputs_r+0x86>
    2092:	2390      	movs	r3, #144	; 0x90
    2094:	898a      	ldrh	r2, [r1, #12]
    2096:	00db      	lsls	r3, r3, #3
    2098:	421a      	tst	r2, r3
    209a:	d034      	beq.n	2106 <__ssputs_r+0x86>
    209c:	2503      	movs	r5, #3
    209e:	6909      	ldr	r1, [r1, #16]
    20a0:	6823      	ldr	r3, [r4, #0]
    20a2:	1a5b      	subs	r3, r3, r1
    20a4:	9302      	str	r3, [sp, #8]
    20a6:	6963      	ldr	r3, [r4, #20]
    20a8:	9802      	ldr	r0, [sp, #8]
    20aa:	435d      	muls	r5, r3
    20ac:	0feb      	lsrs	r3, r5, #31
    20ae:	195d      	adds	r5, r3, r5
    20b0:	9b01      	ldr	r3, [sp, #4]
    20b2:	106d      	asrs	r5, r5, #1
    20b4:	3301      	adds	r3, #1
    20b6:	181b      	adds	r3, r3, r0
    20b8:	42ab      	cmp	r3, r5
    20ba:	d900      	bls.n	20be <__ssputs_r+0x3e>
    20bc:	001d      	movs	r5, r3
    20be:	0553      	lsls	r3, r2, #21
    20c0:	d532      	bpl.n	2128 <__ssputs_r+0xa8>
    20c2:	0029      	movs	r1, r5
    20c4:	0038      	movs	r0, r7
    20c6:	f000 fb31 	bl	272c <_malloc_r>
    20ca:	1e06      	subs	r6, r0, #0
    20cc:	d109      	bne.n	20e2 <__ssputs_r+0x62>
    20ce:	230c      	movs	r3, #12
    20d0:	603b      	str	r3, [r7, #0]
    20d2:	2340      	movs	r3, #64	; 0x40
    20d4:	2001      	movs	r0, #1
    20d6:	89a2      	ldrh	r2, [r4, #12]
    20d8:	4240      	negs	r0, r0
    20da:	4313      	orrs	r3, r2
    20dc:	81a3      	strh	r3, [r4, #12]
    20de:	b005      	add	sp, #20
    20e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20e2:	9a02      	ldr	r2, [sp, #8]
    20e4:	6921      	ldr	r1, [r4, #16]
    20e6:	f7ff ff97 	bl	2018 <memcpy>
    20ea:	89a3      	ldrh	r3, [r4, #12]
    20ec:	4a14      	ldr	r2, [pc, #80]	; (2140 <__ssputs_r+0xc0>)
    20ee:	401a      	ands	r2, r3
    20f0:	2380      	movs	r3, #128	; 0x80
    20f2:	4313      	orrs	r3, r2
    20f4:	81a3      	strh	r3, [r4, #12]
    20f6:	9b02      	ldr	r3, [sp, #8]
    20f8:	6126      	str	r6, [r4, #16]
    20fa:	18f6      	adds	r6, r6, r3
    20fc:	6026      	str	r6, [r4, #0]
    20fe:	6165      	str	r5, [r4, #20]
    2100:	9e01      	ldr	r6, [sp, #4]
    2102:	1aed      	subs	r5, r5, r3
    2104:	60a5      	str	r5, [r4, #8]
    2106:	9b01      	ldr	r3, [sp, #4]
    2108:	42b3      	cmp	r3, r6
    210a:	d200      	bcs.n	210e <__ssputs_r+0x8e>
    210c:	001e      	movs	r6, r3
    210e:	0032      	movs	r2, r6
    2110:	9903      	ldr	r1, [sp, #12]
    2112:	6820      	ldr	r0, [r4, #0]
    2114:	f000 faad 	bl	2672 <memmove>
    2118:	68a3      	ldr	r3, [r4, #8]
    211a:	2000      	movs	r0, #0
    211c:	1b9b      	subs	r3, r3, r6
    211e:	60a3      	str	r3, [r4, #8]
    2120:	6823      	ldr	r3, [r4, #0]
    2122:	199e      	adds	r6, r3, r6
    2124:	6026      	str	r6, [r4, #0]
    2126:	e7da      	b.n	20de <__ssputs_r+0x5e>
    2128:	002a      	movs	r2, r5
    212a:	0038      	movs	r0, r7
    212c:	f000 fb5c 	bl	27e8 <_realloc_r>
    2130:	1e06      	subs	r6, r0, #0
    2132:	d1e0      	bne.n	20f6 <__ssputs_r+0x76>
    2134:	6921      	ldr	r1, [r4, #16]
    2136:	0038      	movs	r0, r7
    2138:	f000 faae 	bl	2698 <_free_r>
    213c:	e7c7      	b.n	20ce <__ssputs_r+0x4e>
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	fffffb7f 	.word	0xfffffb7f

00002144 <_svfiprintf_r>:
    2144:	b5f0      	push	{r4, r5, r6, r7, lr}
    2146:	b09f      	sub	sp, #124	; 0x7c
    2148:	9002      	str	r0, [sp, #8]
    214a:	9305      	str	r3, [sp, #20]
    214c:	898b      	ldrh	r3, [r1, #12]
    214e:	000f      	movs	r7, r1
    2150:	0016      	movs	r6, r2
    2152:	061b      	lsls	r3, r3, #24
    2154:	d511      	bpl.n	217a <_svfiprintf_r+0x36>
    2156:	690b      	ldr	r3, [r1, #16]
    2158:	2b00      	cmp	r3, #0
    215a:	d10e      	bne.n	217a <_svfiprintf_r+0x36>
    215c:	2140      	movs	r1, #64	; 0x40
    215e:	f000 fae5 	bl	272c <_malloc_r>
    2162:	6038      	str	r0, [r7, #0]
    2164:	6138      	str	r0, [r7, #16]
    2166:	2800      	cmp	r0, #0
    2168:	d105      	bne.n	2176 <_svfiprintf_r+0x32>
    216a:	230c      	movs	r3, #12
    216c:	9a02      	ldr	r2, [sp, #8]
    216e:	3801      	subs	r0, #1
    2170:	6013      	str	r3, [r2, #0]
    2172:	b01f      	add	sp, #124	; 0x7c
    2174:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2176:	2340      	movs	r3, #64	; 0x40
    2178:	617b      	str	r3, [r7, #20]
    217a:	2300      	movs	r3, #0
    217c:	ad06      	add	r5, sp, #24
    217e:	616b      	str	r3, [r5, #20]
    2180:	3320      	adds	r3, #32
    2182:	766b      	strb	r3, [r5, #25]
    2184:	3310      	adds	r3, #16
    2186:	76ab      	strb	r3, [r5, #26]
    2188:	0034      	movs	r4, r6
    218a:	7823      	ldrb	r3, [r4, #0]
    218c:	2b00      	cmp	r3, #0
    218e:	d147      	bne.n	2220 <_svfiprintf_r+0xdc>
    2190:	1ba3      	subs	r3, r4, r6
    2192:	9304      	str	r3, [sp, #16]
    2194:	d00d      	beq.n	21b2 <_svfiprintf_r+0x6e>
    2196:	1ba3      	subs	r3, r4, r6
    2198:	0032      	movs	r2, r6
    219a:	0039      	movs	r1, r7
    219c:	9802      	ldr	r0, [sp, #8]
    219e:	f7ff ff6f 	bl	2080 <__ssputs_r>
    21a2:	1c43      	adds	r3, r0, #1
    21a4:	d100      	bne.n	21a8 <_svfiprintf_r+0x64>
    21a6:	e0b5      	b.n	2314 <_svfiprintf_r+0x1d0>
    21a8:	696a      	ldr	r2, [r5, #20]
    21aa:	9b04      	ldr	r3, [sp, #16]
    21ac:	4694      	mov	ip, r2
    21ae:	4463      	add	r3, ip
    21b0:	616b      	str	r3, [r5, #20]
    21b2:	7823      	ldrb	r3, [r4, #0]
    21b4:	2b00      	cmp	r3, #0
    21b6:	d100      	bne.n	21ba <_svfiprintf_r+0x76>
    21b8:	e0ac      	b.n	2314 <_svfiprintf_r+0x1d0>
    21ba:	2201      	movs	r2, #1
    21bc:	2300      	movs	r3, #0
    21be:	4252      	negs	r2, r2
    21c0:	606a      	str	r2, [r5, #4]
    21c2:	a902      	add	r1, sp, #8
    21c4:	3254      	adds	r2, #84	; 0x54
    21c6:	1852      	adds	r2, r2, r1
    21c8:	3401      	adds	r4, #1
    21ca:	602b      	str	r3, [r5, #0]
    21cc:	60eb      	str	r3, [r5, #12]
    21ce:	60ab      	str	r3, [r5, #8]
    21d0:	7013      	strb	r3, [r2, #0]
    21d2:	65ab      	str	r3, [r5, #88]	; 0x58
    21d4:	4e58      	ldr	r6, [pc, #352]	; (2338 <_svfiprintf_r+0x1f4>)
    21d6:	2205      	movs	r2, #5
    21d8:	7821      	ldrb	r1, [r4, #0]
    21da:	0030      	movs	r0, r6
    21dc:	f000 fa3e 	bl	265c <memchr>
    21e0:	1c62      	adds	r2, r4, #1
    21e2:	2800      	cmp	r0, #0
    21e4:	d120      	bne.n	2228 <_svfiprintf_r+0xe4>
    21e6:	6829      	ldr	r1, [r5, #0]
    21e8:	06cb      	lsls	r3, r1, #27
    21ea:	d504      	bpl.n	21f6 <_svfiprintf_r+0xb2>
    21ec:	2353      	movs	r3, #83	; 0x53
    21ee:	ae02      	add	r6, sp, #8
    21f0:	3020      	adds	r0, #32
    21f2:	199b      	adds	r3, r3, r6
    21f4:	7018      	strb	r0, [r3, #0]
    21f6:	070b      	lsls	r3, r1, #28
    21f8:	d504      	bpl.n	2204 <_svfiprintf_r+0xc0>
    21fa:	2353      	movs	r3, #83	; 0x53
    21fc:	202b      	movs	r0, #43	; 0x2b
    21fe:	ae02      	add	r6, sp, #8
    2200:	199b      	adds	r3, r3, r6
    2202:	7018      	strb	r0, [r3, #0]
    2204:	7823      	ldrb	r3, [r4, #0]
    2206:	2b2a      	cmp	r3, #42	; 0x2a
    2208:	d016      	beq.n	2238 <_svfiprintf_r+0xf4>
    220a:	2000      	movs	r0, #0
    220c:	210a      	movs	r1, #10
    220e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2210:	7822      	ldrb	r2, [r4, #0]
    2212:	3a30      	subs	r2, #48	; 0x30
    2214:	2a09      	cmp	r2, #9
    2216:	d955      	bls.n	22c4 <_svfiprintf_r+0x180>
    2218:	2800      	cmp	r0, #0
    221a:	d015      	beq.n	2248 <_svfiprintf_r+0x104>
    221c:	9309      	str	r3, [sp, #36]	; 0x24
    221e:	e013      	b.n	2248 <_svfiprintf_r+0x104>
    2220:	2b25      	cmp	r3, #37	; 0x25
    2222:	d0b5      	beq.n	2190 <_svfiprintf_r+0x4c>
    2224:	3401      	adds	r4, #1
    2226:	e7b0      	b.n	218a <_svfiprintf_r+0x46>
    2228:	2301      	movs	r3, #1
    222a:	1b80      	subs	r0, r0, r6
    222c:	4083      	lsls	r3, r0
    222e:	6829      	ldr	r1, [r5, #0]
    2230:	0014      	movs	r4, r2
    2232:	430b      	orrs	r3, r1
    2234:	602b      	str	r3, [r5, #0]
    2236:	e7cd      	b.n	21d4 <_svfiprintf_r+0x90>
    2238:	9b05      	ldr	r3, [sp, #20]
    223a:	1d18      	adds	r0, r3, #4
    223c:	681b      	ldr	r3, [r3, #0]
    223e:	9005      	str	r0, [sp, #20]
    2240:	2b00      	cmp	r3, #0
    2242:	db39      	blt.n	22b8 <_svfiprintf_r+0x174>
    2244:	9309      	str	r3, [sp, #36]	; 0x24
    2246:	0014      	movs	r4, r2
    2248:	7823      	ldrb	r3, [r4, #0]
    224a:	2b2e      	cmp	r3, #46	; 0x2e
    224c:	d10b      	bne.n	2266 <_svfiprintf_r+0x122>
    224e:	7863      	ldrb	r3, [r4, #1]
    2250:	1c62      	adds	r2, r4, #1
    2252:	2b2a      	cmp	r3, #42	; 0x2a
    2254:	d13e      	bne.n	22d4 <_svfiprintf_r+0x190>
    2256:	9b05      	ldr	r3, [sp, #20]
    2258:	3402      	adds	r4, #2
    225a:	1d1a      	adds	r2, r3, #4
    225c:	681b      	ldr	r3, [r3, #0]
    225e:	9205      	str	r2, [sp, #20]
    2260:	2b00      	cmp	r3, #0
    2262:	db34      	blt.n	22ce <_svfiprintf_r+0x18a>
    2264:	9307      	str	r3, [sp, #28]
    2266:	4e35      	ldr	r6, [pc, #212]	; (233c <_svfiprintf_r+0x1f8>)
    2268:	7821      	ldrb	r1, [r4, #0]
    226a:	2203      	movs	r2, #3
    226c:	0030      	movs	r0, r6
    226e:	f000 f9f5 	bl	265c <memchr>
    2272:	2800      	cmp	r0, #0
    2274:	d006      	beq.n	2284 <_svfiprintf_r+0x140>
    2276:	2340      	movs	r3, #64	; 0x40
    2278:	1b80      	subs	r0, r0, r6
    227a:	4083      	lsls	r3, r0
    227c:	682a      	ldr	r2, [r5, #0]
    227e:	3401      	adds	r4, #1
    2280:	4313      	orrs	r3, r2
    2282:	602b      	str	r3, [r5, #0]
    2284:	7821      	ldrb	r1, [r4, #0]
    2286:	2206      	movs	r2, #6
    2288:	482d      	ldr	r0, [pc, #180]	; (2340 <_svfiprintf_r+0x1fc>)
    228a:	1c66      	adds	r6, r4, #1
    228c:	7629      	strb	r1, [r5, #24]
    228e:	f000 f9e5 	bl	265c <memchr>
    2292:	2800      	cmp	r0, #0
    2294:	d046      	beq.n	2324 <_svfiprintf_r+0x1e0>
    2296:	4b2b      	ldr	r3, [pc, #172]	; (2344 <_svfiprintf_r+0x200>)
    2298:	2b00      	cmp	r3, #0
    229a:	d12f      	bne.n	22fc <_svfiprintf_r+0x1b8>
    229c:	6829      	ldr	r1, [r5, #0]
    229e:	9b05      	ldr	r3, [sp, #20]
    22a0:	2207      	movs	r2, #7
    22a2:	05c9      	lsls	r1, r1, #23
    22a4:	d528      	bpl.n	22f8 <_svfiprintf_r+0x1b4>
    22a6:	189b      	adds	r3, r3, r2
    22a8:	4393      	bics	r3, r2
    22aa:	3308      	adds	r3, #8
    22ac:	9305      	str	r3, [sp, #20]
    22ae:	696b      	ldr	r3, [r5, #20]
    22b0:	9a03      	ldr	r2, [sp, #12]
    22b2:	189b      	adds	r3, r3, r2
    22b4:	616b      	str	r3, [r5, #20]
    22b6:	e767      	b.n	2188 <_svfiprintf_r+0x44>
    22b8:	425b      	negs	r3, r3
    22ba:	60eb      	str	r3, [r5, #12]
    22bc:	2302      	movs	r3, #2
    22be:	430b      	orrs	r3, r1
    22c0:	602b      	str	r3, [r5, #0]
    22c2:	e7c0      	b.n	2246 <_svfiprintf_r+0x102>
    22c4:	434b      	muls	r3, r1
    22c6:	3401      	adds	r4, #1
    22c8:	189b      	adds	r3, r3, r2
    22ca:	2001      	movs	r0, #1
    22cc:	e7a0      	b.n	2210 <_svfiprintf_r+0xcc>
    22ce:	2301      	movs	r3, #1
    22d0:	425b      	negs	r3, r3
    22d2:	e7c7      	b.n	2264 <_svfiprintf_r+0x120>
    22d4:	2300      	movs	r3, #0
    22d6:	0014      	movs	r4, r2
    22d8:	200a      	movs	r0, #10
    22da:	001a      	movs	r2, r3
    22dc:	606b      	str	r3, [r5, #4]
    22de:	7821      	ldrb	r1, [r4, #0]
    22e0:	3930      	subs	r1, #48	; 0x30
    22e2:	2909      	cmp	r1, #9
    22e4:	d903      	bls.n	22ee <_svfiprintf_r+0x1aa>
    22e6:	2b00      	cmp	r3, #0
    22e8:	d0bd      	beq.n	2266 <_svfiprintf_r+0x122>
    22ea:	9207      	str	r2, [sp, #28]
    22ec:	e7bb      	b.n	2266 <_svfiprintf_r+0x122>
    22ee:	4342      	muls	r2, r0
    22f0:	3401      	adds	r4, #1
    22f2:	1852      	adds	r2, r2, r1
    22f4:	2301      	movs	r3, #1
    22f6:	e7f2      	b.n	22de <_svfiprintf_r+0x19a>
    22f8:	3307      	adds	r3, #7
    22fa:	e7d5      	b.n	22a8 <_svfiprintf_r+0x164>
    22fc:	ab05      	add	r3, sp, #20
    22fe:	9300      	str	r3, [sp, #0]
    2300:	003a      	movs	r2, r7
    2302:	4b11      	ldr	r3, [pc, #68]	; (2348 <_svfiprintf_r+0x204>)
    2304:	0029      	movs	r1, r5
    2306:	9802      	ldr	r0, [sp, #8]
    2308:	e000      	b.n	230c <_svfiprintf_r+0x1c8>
    230a:	bf00      	nop
    230c:	9003      	str	r0, [sp, #12]
    230e:	9b03      	ldr	r3, [sp, #12]
    2310:	3301      	adds	r3, #1
    2312:	d1cc      	bne.n	22ae <_svfiprintf_r+0x16a>
    2314:	89bb      	ldrh	r3, [r7, #12]
    2316:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2318:	065b      	lsls	r3, r3, #25
    231a:	d400      	bmi.n	231e <_svfiprintf_r+0x1da>
    231c:	e729      	b.n	2172 <_svfiprintf_r+0x2e>
    231e:	2001      	movs	r0, #1
    2320:	4240      	negs	r0, r0
    2322:	e726      	b.n	2172 <_svfiprintf_r+0x2e>
    2324:	ab05      	add	r3, sp, #20
    2326:	9300      	str	r3, [sp, #0]
    2328:	003a      	movs	r2, r7
    232a:	4b07      	ldr	r3, [pc, #28]	; (2348 <_svfiprintf_r+0x204>)
    232c:	0029      	movs	r1, r5
    232e:	9802      	ldr	r0, [sp, #8]
    2330:	f000 f87a 	bl	2428 <_printf_i>
    2334:	e7ea      	b.n	230c <_svfiprintf_r+0x1c8>
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	000028f6 	.word	0x000028f6
    233c:	000028fc 	.word	0x000028fc
    2340:	00002900 	.word	0x00002900
    2344:	00000000 	.word	0x00000000
    2348:	00002081 	.word	0x00002081

0000234c <_printf_common>:
    234c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    234e:	0015      	movs	r5, r2
    2350:	9301      	str	r3, [sp, #4]
    2352:	688a      	ldr	r2, [r1, #8]
    2354:	690b      	ldr	r3, [r1, #16]
    2356:	9000      	str	r0, [sp, #0]
    2358:	000c      	movs	r4, r1
    235a:	4293      	cmp	r3, r2
    235c:	da00      	bge.n	2360 <_printf_common+0x14>
    235e:	0013      	movs	r3, r2
    2360:	0022      	movs	r2, r4
    2362:	602b      	str	r3, [r5, #0]
    2364:	3243      	adds	r2, #67	; 0x43
    2366:	7812      	ldrb	r2, [r2, #0]
    2368:	2a00      	cmp	r2, #0
    236a:	d001      	beq.n	2370 <_printf_common+0x24>
    236c:	3301      	adds	r3, #1
    236e:	602b      	str	r3, [r5, #0]
    2370:	6823      	ldr	r3, [r4, #0]
    2372:	069b      	lsls	r3, r3, #26
    2374:	d502      	bpl.n	237c <_printf_common+0x30>
    2376:	682b      	ldr	r3, [r5, #0]
    2378:	3302      	adds	r3, #2
    237a:	602b      	str	r3, [r5, #0]
    237c:	2706      	movs	r7, #6
    237e:	6823      	ldr	r3, [r4, #0]
    2380:	401f      	ands	r7, r3
    2382:	d027      	beq.n	23d4 <_printf_common+0x88>
    2384:	0023      	movs	r3, r4
    2386:	3343      	adds	r3, #67	; 0x43
    2388:	781b      	ldrb	r3, [r3, #0]
    238a:	1e5a      	subs	r2, r3, #1
    238c:	4193      	sbcs	r3, r2
    238e:	6822      	ldr	r2, [r4, #0]
    2390:	0692      	lsls	r2, r2, #26
    2392:	d430      	bmi.n	23f6 <_printf_common+0xaa>
    2394:	0022      	movs	r2, r4
    2396:	9901      	ldr	r1, [sp, #4]
    2398:	3243      	adds	r2, #67	; 0x43
    239a:	9800      	ldr	r0, [sp, #0]
    239c:	9e08      	ldr	r6, [sp, #32]
    239e:	47b0      	blx	r6
    23a0:	1c43      	adds	r3, r0, #1
    23a2:	d025      	beq.n	23f0 <_printf_common+0xa4>
    23a4:	2306      	movs	r3, #6
    23a6:	6820      	ldr	r0, [r4, #0]
    23a8:	682a      	ldr	r2, [r5, #0]
    23aa:	68e1      	ldr	r1, [r4, #12]
    23ac:	4003      	ands	r3, r0
    23ae:	2500      	movs	r5, #0
    23b0:	2b04      	cmp	r3, #4
    23b2:	d103      	bne.n	23bc <_printf_common+0x70>
    23b4:	1a8d      	subs	r5, r1, r2
    23b6:	43eb      	mvns	r3, r5
    23b8:	17db      	asrs	r3, r3, #31
    23ba:	401d      	ands	r5, r3
    23bc:	68a3      	ldr	r3, [r4, #8]
    23be:	6922      	ldr	r2, [r4, #16]
    23c0:	4293      	cmp	r3, r2
    23c2:	dd01      	ble.n	23c8 <_printf_common+0x7c>
    23c4:	1a9b      	subs	r3, r3, r2
    23c6:	18ed      	adds	r5, r5, r3
    23c8:	2700      	movs	r7, #0
    23ca:	42bd      	cmp	r5, r7
    23cc:	d120      	bne.n	2410 <_printf_common+0xc4>
    23ce:	2000      	movs	r0, #0
    23d0:	e010      	b.n	23f4 <_printf_common+0xa8>
    23d2:	3701      	adds	r7, #1
    23d4:	68e3      	ldr	r3, [r4, #12]
    23d6:	682a      	ldr	r2, [r5, #0]
    23d8:	1a9b      	subs	r3, r3, r2
    23da:	429f      	cmp	r7, r3
    23dc:	dad2      	bge.n	2384 <_printf_common+0x38>
    23de:	0022      	movs	r2, r4
    23e0:	2301      	movs	r3, #1
    23e2:	3219      	adds	r2, #25
    23e4:	9901      	ldr	r1, [sp, #4]
    23e6:	9800      	ldr	r0, [sp, #0]
    23e8:	9e08      	ldr	r6, [sp, #32]
    23ea:	47b0      	blx	r6
    23ec:	1c43      	adds	r3, r0, #1
    23ee:	d1f0      	bne.n	23d2 <_printf_common+0x86>
    23f0:	2001      	movs	r0, #1
    23f2:	4240      	negs	r0, r0
    23f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    23f6:	2030      	movs	r0, #48	; 0x30
    23f8:	18e1      	adds	r1, r4, r3
    23fa:	3143      	adds	r1, #67	; 0x43
    23fc:	7008      	strb	r0, [r1, #0]
    23fe:	0021      	movs	r1, r4
    2400:	1c5a      	adds	r2, r3, #1
    2402:	3145      	adds	r1, #69	; 0x45
    2404:	7809      	ldrb	r1, [r1, #0]
    2406:	18a2      	adds	r2, r4, r2
    2408:	3243      	adds	r2, #67	; 0x43
    240a:	3302      	adds	r3, #2
    240c:	7011      	strb	r1, [r2, #0]
    240e:	e7c1      	b.n	2394 <_printf_common+0x48>
    2410:	0022      	movs	r2, r4
    2412:	2301      	movs	r3, #1
    2414:	321a      	adds	r2, #26
    2416:	9901      	ldr	r1, [sp, #4]
    2418:	9800      	ldr	r0, [sp, #0]
    241a:	9e08      	ldr	r6, [sp, #32]
    241c:	47b0      	blx	r6
    241e:	1c43      	adds	r3, r0, #1
    2420:	d0e6      	beq.n	23f0 <_printf_common+0xa4>
    2422:	3701      	adds	r7, #1
    2424:	e7d1      	b.n	23ca <_printf_common+0x7e>
	...

00002428 <_printf_i>:
    2428:	b5f0      	push	{r4, r5, r6, r7, lr}
    242a:	b08b      	sub	sp, #44	; 0x2c
    242c:	9206      	str	r2, [sp, #24]
    242e:	000a      	movs	r2, r1
    2430:	3243      	adds	r2, #67	; 0x43
    2432:	9307      	str	r3, [sp, #28]
    2434:	9005      	str	r0, [sp, #20]
    2436:	9204      	str	r2, [sp, #16]
    2438:	7e0a      	ldrb	r2, [r1, #24]
    243a:	000c      	movs	r4, r1
    243c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    243e:	2a6e      	cmp	r2, #110	; 0x6e
    2440:	d100      	bne.n	2444 <_printf_i+0x1c>
    2442:	e08f      	b.n	2564 <_printf_i+0x13c>
    2444:	d817      	bhi.n	2476 <_printf_i+0x4e>
    2446:	2a63      	cmp	r2, #99	; 0x63
    2448:	d02c      	beq.n	24a4 <_printf_i+0x7c>
    244a:	d808      	bhi.n	245e <_printf_i+0x36>
    244c:	2a00      	cmp	r2, #0
    244e:	d100      	bne.n	2452 <_printf_i+0x2a>
    2450:	e099      	b.n	2586 <_printf_i+0x15e>
    2452:	2a58      	cmp	r2, #88	; 0x58
    2454:	d054      	beq.n	2500 <_printf_i+0xd8>
    2456:	0026      	movs	r6, r4
    2458:	3642      	adds	r6, #66	; 0x42
    245a:	7032      	strb	r2, [r6, #0]
    245c:	e029      	b.n	24b2 <_printf_i+0x8a>
    245e:	2a64      	cmp	r2, #100	; 0x64
    2460:	d001      	beq.n	2466 <_printf_i+0x3e>
    2462:	2a69      	cmp	r2, #105	; 0x69
    2464:	d1f7      	bne.n	2456 <_printf_i+0x2e>
    2466:	6821      	ldr	r1, [r4, #0]
    2468:	681a      	ldr	r2, [r3, #0]
    246a:	0608      	lsls	r0, r1, #24
    246c:	d523      	bpl.n	24b6 <_printf_i+0x8e>
    246e:	1d11      	adds	r1, r2, #4
    2470:	6019      	str	r1, [r3, #0]
    2472:	6815      	ldr	r5, [r2, #0]
    2474:	e025      	b.n	24c2 <_printf_i+0x9a>
    2476:	2a73      	cmp	r2, #115	; 0x73
    2478:	d100      	bne.n	247c <_printf_i+0x54>
    247a:	e088      	b.n	258e <_printf_i+0x166>
    247c:	d808      	bhi.n	2490 <_printf_i+0x68>
    247e:	2a6f      	cmp	r2, #111	; 0x6f
    2480:	d029      	beq.n	24d6 <_printf_i+0xae>
    2482:	2a70      	cmp	r2, #112	; 0x70
    2484:	d1e7      	bne.n	2456 <_printf_i+0x2e>
    2486:	2220      	movs	r2, #32
    2488:	6809      	ldr	r1, [r1, #0]
    248a:	430a      	orrs	r2, r1
    248c:	6022      	str	r2, [r4, #0]
    248e:	e003      	b.n	2498 <_printf_i+0x70>
    2490:	2a75      	cmp	r2, #117	; 0x75
    2492:	d020      	beq.n	24d6 <_printf_i+0xae>
    2494:	2a78      	cmp	r2, #120	; 0x78
    2496:	d1de      	bne.n	2456 <_printf_i+0x2e>
    2498:	0022      	movs	r2, r4
    249a:	2178      	movs	r1, #120	; 0x78
    249c:	3245      	adds	r2, #69	; 0x45
    249e:	7011      	strb	r1, [r2, #0]
    24a0:	4a6c      	ldr	r2, [pc, #432]	; (2654 <_printf_i+0x22c>)
    24a2:	e030      	b.n	2506 <_printf_i+0xde>
    24a4:	000e      	movs	r6, r1
    24a6:	681a      	ldr	r2, [r3, #0]
    24a8:	3642      	adds	r6, #66	; 0x42
    24aa:	1d11      	adds	r1, r2, #4
    24ac:	6019      	str	r1, [r3, #0]
    24ae:	6813      	ldr	r3, [r2, #0]
    24b0:	7033      	strb	r3, [r6, #0]
    24b2:	2301      	movs	r3, #1
    24b4:	e079      	b.n	25aa <_printf_i+0x182>
    24b6:	0649      	lsls	r1, r1, #25
    24b8:	d5d9      	bpl.n	246e <_printf_i+0x46>
    24ba:	1d11      	adds	r1, r2, #4
    24bc:	6019      	str	r1, [r3, #0]
    24be:	2300      	movs	r3, #0
    24c0:	5ed5      	ldrsh	r5, [r2, r3]
    24c2:	2d00      	cmp	r5, #0
    24c4:	da03      	bge.n	24ce <_printf_i+0xa6>
    24c6:	232d      	movs	r3, #45	; 0x2d
    24c8:	9a04      	ldr	r2, [sp, #16]
    24ca:	426d      	negs	r5, r5
    24cc:	7013      	strb	r3, [r2, #0]
    24ce:	4b62      	ldr	r3, [pc, #392]	; (2658 <_printf_i+0x230>)
    24d0:	270a      	movs	r7, #10
    24d2:	9303      	str	r3, [sp, #12]
    24d4:	e02f      	b.n	2536 <_printf_i+0x10e>
    24d6:	6820      	ldr	r0, [r4, #0]
    24d8:	6819      	ldr	r1, [r3, #0]
    24da:	0605      	lsls	r5, r0, #24
    24dc:	d503      	bpl.n	24e6 <_printf_i+0xbe>
    24de:	1d08      	adds	r0, r1, #4
    24e0:	6018      	str	r0, [r3, #0]
    24e2:	680d      	ldr	r5, [r1, #0]
    24e4:	e005      	b.n	24f2 <_printf_i+0xca>
    24e6:	0640      	lsls	r0, r0, #25
    24e8:	d5f9      	bpl.n	24de <_printf_i+0xb6>
    24ea:	680d      	ldr	r5, [r1, #0]
    24ec:	1d08      	adds	r0, r1, #4
    24ee:	6018      	str	r0, [r3, #0]
    24f0:	b2ad      	uxth	r5, r5
    24f2:	4b59      	ldr	r3, [pc, #356]	; (2658 <_printf_i+0x230>)
    24f4:	2708      	movs	r7, #8
    24f6:	9303      	str	r3, [sp, #12]
    24f8:	2a6f      	cmp	r2, #111	; 0x6f
    24fa:	d018      	beq.n	252e <_printf_i+0x106>
    24fc:	270a      	movs	r7, #10
    24fe:	e016      	b.n	252e <_printf_i+0x106>
    2500:	3145      	adds	r1, #69	; 0x45
    2502:	700a      	strb	r2, [r1, #0]
    2504:	4a54      	ldr	r2, [pc, #336]	; (2658 <_printf_i+0x230>)
    2506:	9203      	str	r2, [sp, #12]
    2508:	681a      	ldr	r2, [r3, #0]
    250a:	6821      	ldr	r1, [r4, #0]
    250c:	1d10      	adds	r0, r2, #4
    250e:	6018      	str	r0, [r3, #0]
    2510:	6815      	ldr	r5, [r2, #0]
    2512:	0608      	lsls	r0, r1, #24
    2514:	d522      	bpl.n	255c <_printf_i+0x134>
    2516:	07cb      	lsls	r3, r1, #31
    2518:	d502      	bpl.n	2520 <_printf_i+0xf8>
    251a:	2320      	movs	r3, #32
    251c:	4319      	orrs	r1, r3
    251e:	6021      	str	r1, [r4, #0]
    2520:	2710      	movs	r7, #16
    2522:	2d00      	cmp	r5, #0
    2524:	d103      	bne.n	252e <_printf_i+0x106>
    2526:	2320      	movs	r3, #32
    2528:	6822      	ldr	r2, [r4, #0]
    252a:	439a      	bics	r2, r3
    252c:	6022      	str	r2, [r4, #0]
    252e:	0023      	movs	r3, r4
    2530:	2200      	movs	r2, #0
    2532:	3343      	adds	r3, #67	; 0x43
    2534:	701a      	strb	r2, [r3, #0]
    2536:	6863      	ldr	r3, [r4, #4]
    2538:	60a3      	str	r3, [r4, #8]
    253a:	2b00      	cmp	r3, #0
    253c:	db5c      	blt.n	25f8 <_printf_i+0x1d0>
    253e:	2204      	movs	r2, #4
    2540:	6821      	ldr	r1, [r4, #0]
    2542:	4391      	bics	r1, r2
    2544:	6021      	str	r1, [r4, #0]
    2546:	2d00      	cmp	r5, #0
    2548:	d158      	bne.n	25fc <_printf_i+0x1d4>
    254a:	9e04      	ldr	r6, [sp, #16]
    254c:	2b00      	cmp	r3, #0
    254e:	d064      	beq.n	261a <_printf_i+0x1f2>
    2550:	0026      	movs	r6, r4
    2552:	9b03      	ldr	r3, [sp, #12]
    2554:	3642      	adds	r6, #66	; 0x42
    2556:	781b      	ldrb	r3, [r3, #0]
    2558:	7033      	strb	r3, [r6, #0]
    255a:	e05e      	b.n	261a <_printf_i+0x1f2>
    255c:	0648      	lsls	r0, r1, #25
    255e:	d5da      	bpl.n	2516 <_printf_i+0xee>
    2560:	b2ad      	uxth	r5, r5
    2562:	e7d8      	b.n	2516 <_printf_i+0xee>
    2564:	6809      	ldr	r1, [r1, #0]
    2566:	681a      	ldr	r2, [r3, #0]
    2568:	0608      	lsls	r0, r1, #24
    256a:	d505      	bpl.n	2578 <_printf_i+0x150>
    256c:	1d11      	adds	r1, r2, #4
    256e:	6019      	str	r1, [r3, #0]
    2570:	6813      	ldr	r3, [r2, #0]
    2572:	6962      	ldr	r2, [r4, #20]
    2574:	601a      	str	r2, [r3, #0]
    2576:	e006      	b.n	2586 <_printf_i+0x15e>
    2578:	0649      	lsls	r1, r1, #25
    257a:	d5f7      	bpl.n	256c <_printf_i+0x144>
    257c:	1d11      	adds	r1, r2, #4
    257e:	6019      	str	r1, [r3, #0]
    2580:	6813      	ldr	r3, [r2, #0]
    2582:	8aa2      	ldrh	r2, [r4, #20]
    2584:	801a      	strh	r2, [r3, #0]
    2586:	2300      	movs	r3, #0
    2588:	9e04      	ldr	r6, [sp, #16]
    258a:	6123      	str	r3, [r4, #16]
    258c:	e054      	b.n	2638 <_printf_i+0x210>
    258e:	681a      	ldr	r2, [r3, #0]
    2590:	1d11      	adds	r1, r2, #4
    2592:	6019      	str	r1, [r3, #0]
    2594:	6816      	ldr	r6, [r2, #0]
    2596:	2100      	movs	r1, #0
    2598:	6862      	ldr	r2, [r4, #4]
    259a:	0030      	movs	r0, r6
    259c:	f000 f85e 	bl	265c <memchr>
    25a0:	2800      	cmp	r0, #0
    25a2:	d001      	beq.n	25a8 <_printf_i+0x180>
    25a4:	1b80      	subs	r0, r0, r6
    25a6:	6060      	str	r0, [r4, #4]
    25a8:	6863      	ldr	r3, [r4, #4]
    25aa:	6123      	str	r3, [r4, #16]
    25ac:	2300      	movs	r3, #0
    25ae:	9a04      	ldr	r2, [sp, #16]
    25b0:	7013      	strb	r3, [r2, #0]
    25b2:	e041      	b.n	2638 <_printf_i+0x210>
    25b4:	6923      	ldr	r3, [r4, #16]
    25b6:	0032      	movs	r2, r6
    25b8:	9906      	ldr	r1, [sp, #24]
    25ba:	9805      	ldr	r0, [sp, #20]
    25bc:	9d07      	ldr	r5, [sp, #28]
    25be:	47a8      	blx	r5
    25c0:	1c43      	adds	r3, r0, #1
    25c2:	d043      	beq.n	264c <_printf_i+0x224>
    25c4:	6823      	ldr	r3, [r4, #0]
    25c6:	2500      	movs	r5, #0
    25c8:	079b      	lsls	r3, r3, #30
    25ca:	d40f      	bmi.n	25ec <_printf_i+0x1c4>
    25cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25ce:	68e0      	ldr	r0, [r4, #12]
    25d0:	4298      	cmp	r0, r3
    25d2:	da3d      	bge.n	2650 <_printf_i+0x228>
    25d4:	0018      	movs	r0, r3
    25d6:	e03b      	b.n	2650 <_printf_i+0x228>
    25d8:	0022      	movs	r2, r4
    25da:	2301      	movs	r3, #1
    25dc:	3219      	adds	r2, #25
    25de:	9906      	ldr	r1, [sp, #24]
    25e0:	9805      	ldr	r0, [sp, #20]
    25e2:	9e07      	ldr	r6, [sp, #28]
    25e4:	47b0      	blx	r6
    25e6:	1c43      	adds	r3, r0, #1
    25e8:	d030      	beq.n	264c <_printf_i+0x224>
    25ea:	3501      	adds	r5, #1
    25ec:	68e3      	ldr	r3, [r4, #12]
    25ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    25f0:	1a9b      	subs	r3, r3, r2
    25f2:	429d      	cmp	r5, r3
    25f4:	dbf0      	blt.n	25d8 <_printf_i+0x1b0>
    25f6:	e7e9      	b.n	25cc <_printf_i+0x1a4>
    25f8:	2d00      	cmp	r5, #0
    25fa:	d0a9      	beq.n	2550 <_printf_i+0x128>
    25fc:	9e04      	ldr	r6, [sp, #16]
    25fe:	0028      	movs	r0, r5
    2600:	0039      	movs	r1, r7
    2602:	f7ff fbcb 	bl	1d9c <__aeabi_uidivmod>
    2606:	9b03      	ldr	r3, [sp, #12]
    2608:	3e01      	subs	r6, #1
    260a:	5c5b      	ldrb	r3, [r3, r1]
    260c:	0028      	movs	r0, r5
    260e:	7033      	strb	r3, [r6, #0]
    2610:	0039      	movs	r1, r7
    2612:	f7ff fb3d 	bl	1c90 <__udivsi3>
    2616:	1e05      	subs	r5, r0, #0
    2618:	d1f1      	bne.n	25fe <_printf_i+0x1d6>
    261a:	2f08      	cmp	r7, #8
    261c:	d109      	bne.n	2632 <_printf_i+0x20a>
    261e:	6823      	ldr	r3, [r4, #0]
    2620:	07db      	lsls	r3, r3, #31
    2622:	d506      	bpl.n	2632 <_printf_i+0x20a>
    2624:	6863      	ldr	r3, [r4, #4]
    2626:	6922      	ldr	r2, [r4, #16]
    2628:	4293      	cmp	r3, r2
    262a:	dc02      	bgt.n	2632 <_printf_i+0x20a>
    262c:	2330      	movs	r3, #48	; 0x30
    262e:	3e01      	subs	r6, #1
    2630:	7033      	strb	r3, [r6, #0]
    2632:	9b04      	ldr	r3, [sp, #16]
    2634:	1b9b      	subs	r3, r3, r6
    2636:	6123      	str	r3, [r4, #16]
    2638:	9b07      	ldr	r3, [sp, #28]
    263a:	aa09      	add	r2, sp, #36	; 0x24
    263c:	9300      	str	r3, [sp, #0]
    263e:	0021      	movs	r1, r4
    2640:	9b06      	ldr	r3, [sp, #24]
    2642:	9805      	ldr	r0, [sp, #20]
    2644:	f7ff fe82 	bl	234c <_printf_common>
    2648:	1c43      	adds	r3, r0, #1
    264a:	d1b3      	bne.n	25b4 <_printf_i+0x18c>
    264c:	2001      	movs	r0, #1
    264e:	4240      	negs	r0, r0
    2650:	b00b      	add	sp, #44	; 0x2c
    2652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2654:	00002918 	.word	0x00002918
    2658:	00002907 	.word	0x00002907

0000265c <memchr>:
    265c:	b2c9      	uxtb	r1, r1
    265e:	1882      	adds	r2, r0, r2
    2660:	4290      	cmp	r0, r2
    2662:	d101      	bne.n	2668 <memchr+0xc>
    2664:	2000      	movs	r0, #0
    2666:	4770      	bx	lr
    2668:	7803      	ldrb	r3, [r0, #0]
    266a:	428b      	cmp	r3, r1
    266c:	d0fb      	beq.n	2666 <memchr+0xa>
    266e:	3001      	adds	r0, #1
    2670:	e7f6      	b.n	2660 <memchr+0x4>

00002672 <memmove>:
    2672:	b510      	push	{r4, lr}
    2674:	4288      	cmp	r0, r1
    2676:	d902      	bls.n	267e <memmove+0xc>
    2678:	188b      	adds	r3, r1, r2
    267a:	4298      	cmp	r0, r3
    267c:	d308      	bcc.n	2690 <memmove+0x1e>
    267e:	2300      	movs	r3, #0
    2680:	429a      	cmp	r2, r3
    2682:	d007      	beq.n	2694 <memmove+0x22>
    2684:	5ccc      	ldrb	r4, [r1, r3]
    2686:	54c4      	strb	r4, [r0, r3]
    2688:	3301      	adds	r3, #1
    268a:	e7f9      	b.n	2680 <memmove+0xe>
    268c:	5c8b      	ldrb	r3, [r1, r2]
    268e:	5483      	strb	r3, [r0, r2]
    2690:	3a01      	subs	r2, #1
    2692:	d2fb      	bcs.n	268c <memmove+0x1a>
    2694:	bd10      	pop	{r4, pc}
	...

00002698 <_free_r>:
    2698:	b570      	push	{r4, r5, r6, lr}
    269a:	0005      	movs	r5, r0
    269c:	2900      	cmp	r1, #0
    269e:	d010      	beq.n	26c2 <_free_r+0x2a>
    26a0:	1f0c      	subs	r4, r1, #4
    26a2:	6823      	ldr	r3, [r4, #0]
    26a4:	2b00      	cmp	r3, #0
    26a6:	da00      	bge.n	26aa <_free_r+0x12>
    26a8:	18e4      	adds	r4, r4, r3
    26aa:	0028      	movs	r0, r5
    26ac:	f000 f8d4 	bl	2858 <__malloc_lock>
    26b0:	4a1d      	ldr	r2, [pc, #116]	; (2728 <_free_r+0x90>)
    26b2:	6813      	ldr	r3, [r2, #0]
    26b4:	2b00      	cmp	r3, #0
    26b6:	d105      	bne.n	26c4 <_free_r+0x2c>
    26b8:	6063      	str	r3, [r4, #4]
    26ba:	6014      	str	r4, [r2, #0]
    26bc:	0028      	movs	r0, r5
    26be:	f000 f8cc 	bl	285a <__malloc_unlock>
    26c2:	bd70      	pop	{r4, r5, r6, pc}
    26c4:	42a3      	cmp	r3, r4
    26c6:	d909      	bls.n	26dc <_free_r+0x44>
    26c8:	6821      	ldr	r1, [r4, #0]
    26ca:	1860      	adds	r0, r4, r1
    26cc:	4283      	cmp	r3, r0
    26ce:	d1f3      	bne.n	26b8 <_free_r+0x20>
    26d0:	6818      	ldr	r0, [r3, #0]
    26d2:	685b      	ldr	r3, [r3, #4]
    26d4:	1841      	adds	r1, r0, r1
    26d6:	6021      	str	r1, [r4, #0]
    26d8:	e7ee      	b.n	26b8 <_free_r+0x20>
    26da:	0013      	movs	r3, r2
    26dc:	685a      	ldr	r2, [r3, #4]
    26de:	2a00      	cmp	r2, #0
    26e0:	d001      	beq.n	26e6 <_free_r+0x4e>
    26e2:	42a2      	cmp	r2, r4
    26e4:	d9f9      	bls.n	26da <_free_r+0x42>
    26e6:	6819      	ldr	r1, [r3, #0]
    26e8:	1858      	adds	r0, r3, r1
    26ea:	42a0      	cmp	r0, r4
    26ec:	d10b      	bne.n	2706 <_free_r+0x6e>
    26ee:	6820      	ldr	r0, [r4, #0]
    26f0:	1809      	adds	r1, r1, r0
    26f2:	1858      	adds	r0, r3, r1
    26f4:	6019      	str	r1, [r3, #0]
    26f6:	4282      	cmp	r2, r0
    26f8:	d1e0      	bne.n	26bc <_free_r+0x24>
    26fa:	6810      	ldr	r0, [r2, #0]
    26fc:	6852      	ldr	r2, [r2, #4]
    26fe:	1841      	adds	r1, r0, r1
    2700:	6019      	str	r1, [r3, #0]
    2702:	605a      	str	r2, [r3, #4]
    2704:	e7da      	b.n	26bc <_free_r+0x24>
    2706:	42a0      	cmp	r0, r4
    2708:	d902      	bls.n	2710 <_free_r+0x78>
    270a:	230c      	movs	r3, #12
    270c:	602b      	str	r3, [r5, #0]
    270e:	e7d5      	b.n	26bc <_free_r+0x24>
    2710:	6821      	ldr	r1, [r4, #0]
    2712:	1860      	adds	r0, r4, r1
    2714:	4282      	cmp	r2, r0
    2716:	d103      	bne.n	2720 <_free_r+0x88>
    2718:	6810      	ldr	r0, [r2, #0]
    271a:	6852      	ldr	r2, [r2, #4]
    271c:	1841      	adds	r1, r0, r1
    271e:	6021      	str	r1, [r4, #0]
    2720:	6062      	str	r2, [r4, #4]
    2722:	605c      	str	r4, [r3, #4]
    2724:	e7ca      	b.n	26bc <_free_r+0x24>
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	200000e0 	.word	0x200000e0

0000272c <_malloc_r>:
    272c:	2303      	movs	r3, #3
    272e:	b570      	push	{r4, r5, r6, lr}
    2730:	1ccd      	adds	r5, r1, #3
    2732:	439d      	bics	r5, r3
    2734:	3508      	adds	r5, #8
    2736:	0006      	movs	r6, r0
    2738:	2d0c      	cmp	r5, #12
    273a:	d21e      	bcs.n	277a <_malloc_r+0x4e>
    273c:	250c      	movs	r5, #12
    273e:	42a9      	cmp	r1, r5
    2740:	d81d      	bhi.n	277e <_malloc_r+0x52>
    2742:	0030      	movs	r0, r6
    2744:	f000 f888 	bl	2858 <__malloc_lock>
    2748:	4a25      	ldr	r2, [pc, #148]	; (27e0 <_malloc_r+0xb4>)
    274a:	6814      	ldr	r4, [r2, #0]
    274c:	0021      	movs	r1, r4
    274e:	2900      	cmp	r1, #0
    2750:	d119      	bne.n	2786 <_malloc_r+0x5a>
    2752:	4c24      	ldr	r4, [pc, #144]	; (27e4 <_malloc_r+0xb8>)
    2754:	6823      	ldr	r3, [r4, #0]
    2756:	2b00      	cmp	r3, #0
    2758:	d103      	bne.n	2762 <_malloc_r+0x36>
    275a:	0030      	movs	r0, r6
    275c:	f000 f86a 	bl	2834 <_sbrk_r>
    2760:	6020      	str	r0, [r4, #0]
    2762:	0029      	movs	r1, r5
    2764:	0030      	movs	r0, r6
    2766:	f000 f865 	bl	2834 <_sbrk_r>
    276a:	1c43      	adds	r3, r0, #1
    276c:	d12c      	bne.n	27c8 <_malloc_r+0x9c>
    276e:	230c      	movs	r3, #12
    2770:	0030      	movs	r0, r6
    2772:	6033      	str	r3, [r6, #0]
    2774:	f000 f871 	bl	285a <__malloc_unlock>
    2778:	e003      	b.n	2782 <_malloc_r+0x56>
    277a:	2d00      	cmp	r5, #0
    277c:	dadf      	bge.n	273e <_malloc_r+0x12>
    277e:	230c      	movs	r3, #12
    2780:	6033      	str	r3, [r6, #0]
    2782:	2000      	movs	r0, #0
    2784:	bd70      	pop	{r4, r5, r6, pc}
    2786:	680b      	ldr	r3, [r1, #0]
    2788:	1b5b      	subs	r3, r3, r5
    278a:	d41a      	bmi.n	27c2 <_malloc_r+0x96>
    278c:	2b0b      	cmp	r3, #11
    278e:	d903      	bls.n	2798 <_malloc_r+0x6c>
    2790:	600b      	str	r3, [r1, #0]
    2792:	18cc      	adds	r4, r1, r3
    2794:	6025      	str	r5, [r4, #0]
    2796:	e003      	b.n	27a0 <_malloc_r+0x74>
    2798:	428c      	cmp	r4, r1
    279a:	d10e      	bne.n	27ba <_malloc_r+0x8e>
    279c:	6863      	ldr	r3, [r4, #4]
    279e:	6013      	str	r3, [r2, #0]
    27a0:	0030      	movs	r0, r6
    27a2:	f000 f85a 	bl	285a <__malloc_unlock>
    27a6:	0020      	movs	r0, r4
    27a8:	2207      	movs	r2, #7
    27aa:	300b      	adds	r0, #11
    27ac:	1d23      	adds	r3, r4, #4
    27ae:	4390      	bics	r0, r2
    27b0:	1ac3      	subs	r3, r0, r3
    27b2:	d0e7      	beq.n	2784 <_malloc_r+0x58>
    27b4:	425a      	negs	r2, r3
    27b6:	50e2      	str	r2, [r4, r3]
    27b8:	e7e4      	b.n	2784 <_malloc_r+0x58>
    27ba:	684b      	ldr	r3, [r1, #4]
    27bc:	6063      	str	r3, [r4, #4]
    27be:	000c      	movs	r4, r1
    27c0:	e7ee      	b.n	27a0 <_malloc_r+0x74>
    27c2:	000c      	movs	r4, r1
    27c4:	6849      	ldr	r1, [r1, #4]
    27c6:	e7c2      	b.n	274e <_malloc_r+0x22>
    27c8:	2303      	movs	r3, #3
    27ca:	1cc4      	adds	r4, r0, #3
    27cc:	439c      	bics	r4, r3
    27ce:	42a0      	cmp	r0, r4
    27d0:	d0e0      	beq.n	2794 <_malloc_r+0x68>
    27d2:	1a21      	subs	r1, r4, r0
    27d4:	0030      	movs	r0, r6
    27d6:	f000 f82d 	bl	2834 <_sbrk_r>
    27da:	1c43      	adds	r3, r0, #1
    27dc:	d1da      	bne.n	2794 <_malloc_r+0x68>
    27de:	e7c6      	b.n	276e <_malloc_r+0x42>
    27e0:	200000e0 	.word	0x200000e0
    27e4:	200000e4 	.word	0x200000e4

000027e8 <_realloc_r>:
    27e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ea:	0007      	movs	r7, r0
    27ec:	000d      	movs	r5, r1
    27ee:	0016      	movs	r6, r2
    27f0:	2900      	cmp	r1, #0
    27f2:	d105      	bne.n	2800 <_realloc_r+0x18>
    27f4:	0011      	movs	r1, r2
    27f6:	f7ff ff99 	bl	272c <_malloc_r>
    27fa:	0004      	movs	r4, r0
    27fc:	0020      	movs	r0, r4
    27fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2800:	2a00      	cmp	r2, #0
    2802:	d103      	bne.n	280c <_realloc_r+0x24>
    2804:	f7ff ff48 	bl	2698 <_free_r>
    2808:	0034      	movs	r4, r6
    280a:	e7f7      	b.n	27fc <_realloc_r+0x14>
    280c:	f000 f826 	bl	285c <_malloc_usable_size_r>
    2810:	002c      	movs	r4, r5
    2812:	4286      	cmp	r6, r0
    2814:	d9f2      	bls.n	27fc <_realloc_r+0x14>
    2816:	0031      	movs	r1, r6
    2818:	0038      	movs	r0, r7
    281a:	f7ff ff87 	bl	272c <_malloc_r>
    281e:	1e04      	subs	r4, r0, #0
    2820:	d0ec      	beq.n	27fc <_realloc_r+0x14>
    2822:	0029      	movs	r1, r5
    2824:	0032      	movs	r2, r6
    2826:	f7ff fbf7 	bl	2018 <memcpy>
    282a:	0029      	movs	r1, r5
    282c:	0038      	movs	r0, r7
    282e:	f7ff ff33 	bl	2698 <_free_r>
    2832:	e7e3      	b.n	27fc <_realloc_r+0x14>

00002834 <_sbrk_r>:
    2834:	2300      	movs	r3, #0
    2836:	b570      	push	{r4, r5, r6, lr}
    2838:	4c06      	ldr	r4, [pc, #24]	; (2854 <_sbrk_r+0x20>)
    283a:	0005      	movs	r5, r0
    283c:	0008      	movs	r0, r1
    283e:	6023      	str	r3, [r4, #0]
    2840:	f7ff f864 	bl	190c <_sbrk>
    2844:	1c43      	adds	r3, r0, #1
    2846:	d103      	bne.n	2850 <_sbrk_r+0x1c>
    2848:	6823      	ldr	r3, [r4, #0]
    284a:	2b00      	cmp	r3, #0
    284c:	d000      	beq.n	2850 <_sbrk_r+0x1c>
    284e:	602b      	str	r3, [r5, #0]
    2850:	bd70      	pop	{r4, r5, r6, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	200001bc 	.word	0x200001bc

00002858 <__malloc_lock>:
    2858:	4770      	bx	lr

0000285a <__malloc_unlock>:
    285a:	4770      	bx	lr

0000285c <_malloc_usable_size_r>:
    285c:	1f0b      	subs	r3, r1, #4
    285e:	681b      	ldr	r3, [r3, #0]
    2860:	1f18      	subs	r0, r3, #4
    2862:	2b00      	cmp	r3, #0
    2864:	da01      	bge.n	286a <_malloc_usable_size_r+0xe>
    2866:	580b      	ldr	r3, [r1, r0]
    2868:	18c0      	adds	r0, r0, r3
    286a:	4770      	bx	lr
    286c:	42000800 	.word	0x42000800
    2870:	42000c00 	.word	0x42000c00
    2874:	42001000 	.word	0x42001000
    2878:	42001400 	.word	0x42001400
    287c:	00000dae 	.word	0x00000dae
    2880:	00000daa 	.word	0x00000daa
    2884:	00000daa 	.word	0x00000daa
    2888:	00000dfa 	.word	0x00000dfa
    288c:	00000dfa 	.word	0x00000dfa
    2890:	00000dc2 	.word	0x00000dc2
    2894:	00000db4 	.word	0x00000db4
    2898:	00000dc8 	.word	0x00000dc8
    289c:	00000fa4 	.word	0x00000fa4
    28a0:	00000f84 	.word	0x00000f84
    28a4:	00000f84 	.word	0x00000f84
    28a8:	00000ff4 	.word	0x00000ff4
    28ac:	00000f96 	.word	0x00000f96
    28b0:	00000fb2 	.word	0x00000fb2
    28b4:	00000f88 	.word	0x00000f88
    28b8:	00000fc0 	.word	0x00000fc0
    28bc:	42002000 	.word	0x42002000
    28c0:	42002400 	.word	0x42002400
    28c4:	42002800 	.word	0x42002800
    28c8:	42002c00 	.word	0x42002c00
    28cc:	42003000 	.word	0x42003000
    28d0:	42003400 	.word	0x42003400
    28d4:	02000100 	.word	0x02000100
    28d8:	08000400 	.word	0x08000400
    28dc:	20001000 	.word	0x20001000
    28e0:	00006425 	.word	0x00006425
    28e4:	00000d0a 	.word	0x00000d0a
    28e8:	6c6c6548 	.word	0x6c6c6548
    28ec:	0000006f 	.word	0x0000006f

000028f0 <tc_interrupt_vectors.10306>:
    28f0:	100f0e0d 2d231211 00202b30 004c6c68     ......#-0+ .hlL.
    2900:	45676665 30004746 34333231 38373635     efgEFG.012345678
    2910:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    2920:	62613938 66656463 00000000              89abcdef....

0000292c <_init>:
    292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    292e:	46c0      	nop			; (mov r8, r8)
    2930:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2932:	bc08      	pop	{r3}
    2934:	469e      	mov	lr, r3
    2936:	4770      	bx	lr

00002938 <__init_array_start>:
    2938:	000000cd 	.word	0x000000cd

0000293c <_fini>:
    293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    293e:	46c0      	nop			; (mov r8, r8)
    2940:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2942:	bc08      	pop	{r3}
    2944:	469e      	mov	lr, r3
    2946:	4770      	bx	lr

00002948 <__fini_array_start>:
    2948:	000000a5 	.word	0x000000a5
