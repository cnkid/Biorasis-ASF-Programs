
xplained board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039ac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000090  20000000  000039ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017c  20000090  00003a3c  00020090  2**2
                  ALLOC
  3 .stack        00002004  2000020c  00003bb8  00020090  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002fb93  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004686  00000000  00000000  0004fca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006154  00000000  00000000  0005432a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000660  00000000  00000000  0005a47e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000768  00000000  00000000  0005aade  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c304  00000000  00000000  0005b246  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e1da  00000000  00000000  0007754a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008ef7a  00000000  00000000  00085724  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012a0  00000000  00000000  001146a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 22 00 20 65 1b 00 00 61 1b 00 00 61 1b 00 00     .". e...a...a...
	...
      2c:	61 1b 00 00 00 00 00 00 00 00 00 00 61 1b 00 00     a...........a...
      3c:	61 1b 00 00 61 1b 00 00 61 1b 00 00 61 1b 00 00     a...a...a...a...
      4c:	61 1b 00 00 6d 03 00 00 61 1b 00 00 61 1b 00 00     a...m...a...a...
      5c:	61 1b 00 00 29 02 00 00 31 09 00 00 41 09 00 00     a...)...1...A...
      6c:	51 09 00 00 61 09 00 00 71 09 00 00 81 09 00 00     Q...a...q.......
      7c:	61 1b 00 00 61 1b 00 00 61 1b 00 00 95 18 00 00     a...a...a.......
      8c:	a5 18 00 00 b5 18 00 00 c5 18 00 00 d5 18 00 00     ................
      9c:	61 1b 00 00 61 1b 00 00 61 1b 00 00 61 1b 00 00     a...a...a...a...
      ac:	61 1b 00 00 00 00 00 00                             a.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000090 	.word	0x20000090
      d4:	00000000 	.word	0x00000000
      d8:	000039ac 	.word	0x000039ac

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000094 	.word	0x20000094
     108:	000039ac 	.word	0x000039ac
     10c:	000039ac 	.word	0x000039ac
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	0000158d 	.word	0x0000158d
     140:	000020a9 	.word	0x000020a9
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	200000ac 	.word	0x200000ac
     1b8:	200000b0 	.word	0x200000b0
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	200000ac 	.word	0x200000ac
     1e8:	200000b0 	.word	0x200000b0
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000529 	.word	0x00000529
     224:	41004480 	.word	0x41004480

00000228 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     228:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     22a:	4b0b      	ldr	r3, [pc, #44]	; (258 <EVSYS_Handler+0x30>)
     22c:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     22e:	490b      	ldr	r1, [pc, #44]	; (25c <EVSYS_Handler+0x34>)
     230:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     232:	6898      	ldr	r0, [r3, #8]
     234:	4302      	orrs	r2, r0
     236:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     238:	4b09      	ldr	r3, [pc, #36]	; (260 <EVSYS_Handler+0x38>)
     23a:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     23c:	2c00      	cmp	r4, #0
     23e:	d005      	beq.n	24c <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     240:	6820      	ldr	r0, [r4, #0]
     242:	6863      	ldr	r3, [r4, #4]
     244:	4798      	blx	r3
		current_hook = current_hook->next;
     246:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     248:	2c00      	cmp	r4, #0
     24a:	d1f9      	bne.n	240 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     24c:	4b02      	ldr	r3, [pc, #8]	; (258 <EVSYS_Handler+0x30>)
     24e:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     250:	689a      	ldr	r2, [r3, #8]
     252:	438a      	bics	r2, r1
     254:	609a      	str	r2, [r3, #8]
}
     256:	bd10      	pop	{r4, pc}
     258:	2000000c 	.word	0x2000000c
     25c:	42000400 	.word	0x42000400
     260:	0f0fffff 	.word	0x0f0fffff

00000264 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     264:	4a06      	ldr	r2, [pc, #24]	; (280 <_system_events_init+0x1c>)
     266:	6a13      	ldr	r3, [r2, #32]
     268:	2102      	movs	r1, #2
     26a:	430b      	orrs	r3, r1
     26c:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     26e:	2201      	movs	r2, #1
     270:	4b04      	ldr	r3, [pc, #16]	; (284 <_system_events_init+0x20>)
     272:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     274:	0019      	movs	r1, r3
     276:	780b      	ldrb	r3, [r1, #0]
     278:	4213      	tst	r3, r2
     27a:	d1fc      	bne.n	276 <_system_events_init+0x12>
	}
}
     27c:	4770      	bx	lr
     27e:	46c0      	nop			; (mov r8, r8)
     280:	40000400 	.word	0x40000400
     284:	42000400 	.word	0x42000400

00000288 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     288:	2301      	movs	r3, #1
     28a:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     28c:	2300      	movs	r3, #0
     28e:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     290:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     292:	70c3      	strb	r3, [r0, #3]
}
     294:	4770      	bx	lr
	...

00000298 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     298:	b5f0      	push	{r4, r5, r6, r7, lr}
     29a:	b083      	sub	sp, #12
     29c:	0005      	movs	r5, r0
     29e:	000e      	movs	r6, r1
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     2a0:	4b24      	ldr	r3, [pc, #144]	; (334 <events_allocate+0x9c>)
     2a2:	4798      	blx	r3
	tmp = _events_inst.allocated_channels;
     2a4:	4b24      	ldr	r3, [pc, #144]	; (338 <events_allocate+0xa0>)
     2a6:	681b      	ldr	r3, [r3, #0]
		if(!(tmp & 0x00000001)) {
     2a8:	07da      	lsls	r2, r3, #31
     2aa:	d50e      	bpl.n	2ca <events_allocate+0x32>
		tmp = tmp >> 1;
     2ac:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     2ae:	2401      	movs	r4, #1
		if(!(tmp & 0x00000001)) {
     2b0:	2201      	movs	r2, #1
     2b2:	421a      	tst	r2, r3
     2b4:	d00a      	beq.n	2cc <events_allocate+0x34>
		tmp = tmp >> 1;
     2b6:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     2b8:	3401      	adds	r4, #1
     2ba:	b2e4      	uxtb	r4, r4
     2bc:	2c0c      	cmp	r4, #12
     2be:	d1f8      	bne.n	2b2 <events_allocate+0x1a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     2c0:	4b1e      	ldr	r3, [pc, #120]	; (33c <events_allocate+0xa4>)
     2c2:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     2c4:	2014      	movs	r0, #20
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);


	return STATUS_OK;
}
     2c6:	b003      	add	sp, #12
     2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     2ca:	2400      	movs	r4, #0
			_events_inst.allocated_channels |= 1 << count;
     2cc:	4a1a      	ldr	r2, [pc, #104]	; (338 <events_allocate+0xa0>)
     2ce:	6811      	ldr	r1, [r2, #0]
     2d0:	2301      	movs	r3, #1
     2d2:	40a3      	lsls	r3, r4
     2d4:	430b      	orrs	r3, r1
     2d6:	6013      	str	r3, [r2, #0]
			_events_inst.free_channels--;
     2d8:	7913      	ldrb	r3, [r2, #4]
     2da:	3b01      	subs	r3, #1
     2dc:	7113      	strb	r3, [r2, #4]
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <events_allocate+0xa4>)
     2e0:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
     2e2:	2014      	movs	r0, #20
	if(new_channel == EVENTS_INVALID_CHANNEL) {
     2e4:	2cff      	cmp	r4, #255	; 0xff
     2e6:	d0ee      	beq.n	2c6 <events_allocate+0x2e>
	resource->channel = new_channel;
     2e8:	702c      	strb	r4, [r5, #0]
	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     2ea:	7873      	ldrb	r3, [r6, #1]
     2ec:	2b02      	cmp	r3, #2
     2ee:	d00a      	beq.n	306 <events_allocate+0x6e>
		gclk_chan_conf.source_generator =
     2f0:	a901      	add	r1, sp, #4
     2f2:	78f3      	ldrb	r3, [r6, #3]
     2f4:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     2f6:	1de7      	adds	r7, r4, #7
     2f8:	b2ff      	uxtb	r7, r7
     2fa:	0038      	movs	r0, r7
     2fc:	4b10      	ldr	r3, [pc, #64]	; (340 <events_allocate+0xa8>)
     2fe:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     300:	0038      	movs	r0, r7
     302:	4b10      	ldr	r3, [pc, #64]	; (344 <events_allocate+0xac>)
     304:	4798      	blx	r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
     306:	78b3      	ldrb	r3, [r6, #2]
     308:	041b      	lsls	r3, r3, #16
     30a:	22fe      	movs	r2, #254	; 0xfe
     30c:	03d2      	lsls	r2, r2, #15
     30e:	4013      	ands	r3, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     310:	7872      	ldrb	r2, [r6, #1]
     312:	0612      	lsls	r2, r2, #24
     314:	21c0      	movs	r1, #192	; 0xc0
     316:	0489      	lsls	r1, r1, #18
     318:	400a      	ands	r2, r1
     31a:	4313      	orrs	r3, r2
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
     31c:	7832      	ldrb	r2, [r6, #0]
     31e:	0692      	lsls	r2, r2, #26
     320:	21c0      	movs	r1, #192	; 0xc0
     322:	0509      	lsls	r1, r1, #20
     324:	400a      	ands	r2, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
     326:	4313      	orrs	r3, r2
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     328:	220f      	movs	r2, #15
     32a:	4014      	ands	r4, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     32c:	431c      	orrs	r4, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     32e:	606c      	str	r4, [r5, #4]
	return STATUS_OK;
     330:	2000      	movs	r0, #0
     332:	e7c8      	b.n	2c6 <events_allocate+0x2e>
     334:	00000181 	.word	0x00000181
     338:	2000000c 	.word	0x2000000c
     33c:	000001c1 	.word	0x000001c1
     340:	000016a5 	.word	0x000016a5
     344:	00001619 	.word	0x00001619

00000348 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     348:	7803      	ldrb	r3, [r0, #0]
     34a:	3301      	adds	r3, #1
     34c:	021b      	lsls	r3, r3, #8
     34e:	22f8      	movs	r2, #248	; 0xf8
     350:	0152      	lsls	r2, r2, #5
     352:	4013      	ands	r3, r2
			  EVSYS_USER_USER(user_id);
     354:	221f      	movs	r2, #31
     356:	4011      	ands	r1, r2
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     358:	430b      	orrs	r3, r1
     35a:	4a03      	ldr	r2, [pc, #12]	; (368 <events_attach_user+0x20>)
     35c:	8113      	strh	r3, [r2, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
     35e:	6843      	ldr	r3, [r0, #4]
     360:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
}
     362:	2000      	movs	r0, #0
     364:	4770      	bx	lr
     366:	46c0      	nop			; (mov r8, r8)
     368:	42000400 	.word	0x42000400

0000036c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     36c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     36e:	2200      	movs	r2, #0
     370:	4b10      	ldr	r3, [pc, #64]	; (3b4 <EIC_Handler+0x48>)
     372:	701a      	strb	r2, [r3, #0]
     374:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     376:	4910      	ldr	r1, [pc, #64]	; (3b8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     378:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     37a:	4e10      	ldr	r6, [pc, #64]	; (3bc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     37c:	4c0d      	ldr	r4, [pc, #52]	; (3b4 <EIC_Handler+0x48>)
     37e:	e00a      	b.n	396 <EIC_Handler+0x2a>
		return eics[eic_index];
     380:	490d      	ldr	r1, [pc, #52]	; (3b8 <EIC_Handler+0x4c>)
     382:	e008      	b.n	396 <EIC_Handler+0x2a>
     384:	7823      	ldrb	r3, [r4, #0]
     386:	3301      	adds	r3, #1
     388:	b2db      	uxtb	r3, r3
     38a:	7023      	strb	r3, [r4, #0]
     38c:	2b0f      	cmp	r3, #15
     38e:	d810      	bhi.n	3b2 <EIC_Handler+0x46>
		return NULL;
     390:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     392:	2b1f      	cmp	r3, #31
     394:	d9f4      	bls.n	380 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     396:	0028      	movs	r0, r5
     398:	4018      	ands	r0, r3
     39a:	2201      	movs	r2, #1
     39c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     39e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     3a0:	4210      	tst	r0, r2
     3a2:	d0ef      	beq.n	384 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     3a4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     3a6:	009b      	lsls	r3, r3, #2
     3a8:	599b      	ldr	r3, [r3, r6]
     3aa:	2b00      	cmp	r3, #0
     3ac:	d0ea      	beq.n	384 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     3ae:	4798      	blx	r3
     3b0:	e7e8      	b.n	384 <EIC_Handler+0x18>
			}
		}
	}
}
     3b2:	bd70      	pop	{r4, r5, r6, pc}
     3b4:	200000f4 	.word	0x200000f4
     3b8:	40001800 	.word	0x40001800
     3bc:	200000f8 	.word	0x200000f8

000003c0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     3c0:	4a04      	ldr	r2, [pc, #16]	; (3d4 <_extint_enable+0x14>)
     3c2:	7813      	ldrb	r3, [r2, #0]
     3c4:	2102      	movs	r1, #2
     3c6:	430b      	orrs	r3, r1
     3c8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3ca:	7853      	ldrb	r3, [r2, #1]
     3cc:	b25b      	sxtb	r3, r3
     3ce:	2b00      	cmp	r3, #0
     3d0:	dbfb      	blt.n	3ca <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3d2:	4770      	bx	lr
     3d4:	40001800 	.word	0x40001800

000003d8 <_system_extint_init>:
{
     3d8:	b500      	push	{lr}
     3da:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     3dc:	4a12      	ldr	r2, [pc, #72]	; (428 <_system_extint_init+0x50>)
     3de:	6993      	ldr	r3, [r2, #24]
     3e0:	2140      	movs	r1, #64	; 0x40
     3e2:	430b      	orrs	r3, r1
     3e4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3e6:	a901      	add	r1, sp, #4
     3e8:	2300      	movs	r3, #0
     3ea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3ec:	2005      	movs	r0, #5
     3ee:	4b0f      	ldr	r3, [pc, #60]	; (42c <_system_extint_init+0x54>)
     3f0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     3f2:	2005      	movs	r0, #5
     3f4:	4b0e      	ldr	r3, [pc, #56]	; (430 <_system_extint_init+0x58>)
     3f6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3f8:	4a0e      	ldr	r2, [pc, #56]	; (434 <_system_extint_init+0x5c>)
     3fa:	7813      	ldrb	r3, [r2, #0]
     3fc:	2101      	movs	r1, #1
     3fe:	430b      	orrs	r3, r1
     400:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     402:	7853      	ldrb	r3, [r2, #1]
     404:	b25b      	sxtb	r3, r3
     406:	2b00      	cmp	r3, #0
     408:	dbfb      	blt.n	402 <_system_extint_init+0x2a>
     40a:	4b0b      	ldr	r3, [pc, #44]	; (438 <_system_extint_init+0x60>)
     40c:	0019      	movs	r1, r3
     40e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     410:	2200      	movs	r2, #0
     412:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     414:	4299      	cmp	r1, r3
     416:	d1fc      	bne.n	412 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     418:	2210      	movs	r2, #16
     41a:	4b08      	ldr	r3, [pc, #32]	; (43c <_system_extint_init+0x64>)
     41c:	601a      	str	r2, [r3, #0]
	_extint_enable();
     41e:	4b08      	ldr	r3, [pc, #32]	; (440 <_system_extint_init+0x68>)
     420:	4798      	blx	r3
}
     422:	b003      	add	sp, #12
     424:	bd00      	pop	{pc}
     426:	46c0      	nop			; (mov r8, r8)
     428:	40000400 	.word	0x40000400
     42c:	000016a5 	.word	0x000016a5
     430:	00001619 	.word	0x00001619
     434:	40001800 	.word	0x40001800
     438:	200000f8 	.word	0x200000f8
     43c:	e000e100 	.word	0xe000e100
     440:	000003c1 	.word	0x000003c1

00000444 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     444:	2300      	movs	r3, #0
     446:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     448:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     44a:	2201      	movs	r2, #1
     44c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     44e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     450:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     452:	3302      	adds	r3, #2
     454:	72c3      	strb	r3, [r0, #11]
}
     456:	4770      	bx	lr

00000458 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     458:	b5f0      	push	{r4, r5, r6, r7, lr}
     45a:	b083      	sub	sp, #12
     45c:	0005      	movs	r5, r0
     45e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     460:	a901      	add	r1, sp, #4
     462:	2300      	movs	r3, #0
     464:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     466:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     468:	7923      	ldrb	r3, [r4, #4]
     46a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     46c:	7a23      	ldrb	r3, [r4, #8]
     46e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     470:	7820      	ldrb	r0, [r4, #0]
     472:	4b15      	ldr	r3, [pc, #84]	; (4c8 <extint_chan_set_config+0x70>)
     474:	4798      	blx	r3
		return NULL;
     476:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     478:	2d1f      	cmp	r5, #31
     47a:	d800      	bhi.n	47e <extint_chan_set_config+0x26>
		return eics[eic_index];
     47c:	4813      	ldr	r0, [pc, #76]	; (4cc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     47e:	2207      	movs	r2, #7
     480:	402a      	ands	r2, r5
     482:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     484:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     486:	7aa3      	ldrb	r3, [r4, #10]
     488:	2b00      	cmp	r3, #0
     48a:	d001      	beq.n	490 <extint_chan_set_config+0x38>
     48c:	2308      	movs	r3, #8
     48e:	431f      	orrs	r7, r3
     490:	08eb      	lsrs	r3, r5, #3
     492:	009b      	lsls	r3, r3, #2
     494:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     496:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     498:	260f      	movs	r6, #15
     49a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     49c:	43b1      	bics	r1, r6
			(new_config << config_pos);
     49e:	4097      	lsls	r7, r2
     4a0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     4a2:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     4a4:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     4a6:	7a63      	ldrb	r3, [r4, #9]
     4a8:	2b00      	cmp	r3, #0
     4aa:	d106      	bne.n	4ba <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4ac:	6943      	ldr	r3, [r0, #20]
     4ae:	2201      	movs	r2, #1
     4b0:	40aa      	lsls	r2, r5
     4b2:	4393      	bics	r3, r2
     4b4:	6143      	str	r3, [r0, #20]
	}
}
     4b6:	b003      	add	sp, #12
     4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     4ba:	6942      	ldr	r2, [r0, #20]
     4bc:	2301      	movs	r3, #1
     4be:	40ab      	lsls	r3, r5
     4c0:	4313      	orrs	r3, r2
     4c2:	6143      	str	r3, [r0, #20]
     4c4:	e7f7      	b.n	4b6 <extint_chan_set_config+0x5e>
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	0000179d 	.word	0x0000179d
     4cc:	40001800 	.word	0x40001800

000004d0 <extint_enable_events>:
 *
 *  \param[in] events    Struct containing flags of events to enable
 */
void extint_enable_events(
		struct extint_events *const events)
{
     4d0:	b510      	push	{r4, lr}
     4d2:	2300      	movs	r3, #0
     4d4:	2100      	movs	r1, #0
		uint32_t event_mask = 0;

		/* Create an enable mask for the current EIC module */
		for (uint32_t j = 0; j < 32; j++) {
			if (events->generate_event_on_detect[(32 * i) + j]) {
				event_mask |= (1UL << j);
     4d6:	2401      	movs	r4, #1
     4d8:	e002      	b.n	4e0 <extint_enable_events+0x10>
		for (uint32_t j = 0; j < 32; j++) {
     4da:	3301      	adds	r3, #1
     4dc:	2b20      	cmp	r3, #32
     4de:	d006      	beq.n	4ee <extint_enable_events+0x1e>
			if (events->generate_event_on_detect[(32 * i) + j]) {
     4e0:	5cc2      	ldrb	r2, [r0, r3]
     4e2:	2a00      	cmp	r2, #0
     4e4:	d0f9      	beq.n	4da <extint_enable_events+0xa>
				event_mask |= (1UL << j);
     4e6:	0022      	movs	r2, r4
     4e8:	409a      	lsls	r2, r3
     4ea:	4311      	orrs	r1, r2
     4ec:	e7f5      	b.n	4da <extint_enable_events+0xa>
			}
		}

		/* Enable the masked events */
		eics[i]->EVCTRL.reg |= event_mask;
     4ee:	4b02      	ldr	r3, [pc, #8]	; (4f8 <extint_enable_events+0x28>)
     4f0:	685a      	ldr	r2, [r3, #4]
     4f2:	4311      	orrs	r1, r2
     4f4:	6059      	str	r1, [r3, #4]
	}
}
     4f6:	bd10      	pop	{r4, pc}
     4f8:	40001800 	.word	0x40001800

000004fc <extint_disable_events>:
 *
 *  \param[in] events    Struct containing flags of events to disable
 */
void extint_disable_events(
		struct extint_events *const events)
{
     4fc:	b510      	push	{r4, lr}
     4fe:	2300      	movs	r3, #0
     500:	2100      	movs	r1, #0
		uint32_t event_mask = 0;

		/* Create a disable mask for the current EIC module */
		for (uint32_t j = 0; j < 32; j++) {
			if (events->generate_event_on_detect[(32 * i) + j]) {
				event_mask |= (1UL << j);
     502:	2401      	movs	r4, #1
     504:	e002      	b.n	50c <extint_disable_events+0x10>
		for (uint32_t j = 0; j < 32; j++) {
     506:	3301      	adds	r3, #1
     508:	2b20      	cmp	r3, #32
     50a:	d006      	beq.n	51a <extint_disable_events+0x1e>
			if (events->generate_event_on_detect[(32 * i) + j]) {
     50c:	5cc2      	ldrb	r2, [r0, r3]
     50e:	2a00      	cmp	r2, #0
     510:	d0f9      	beq.n	506 <extint_disable_events+0xa>
				event_mask |= (1UL << j);
     512:	0022      	movs	r2, r4
     514:	409a      	lsls	r2, r3
     516:	4311      	orrs	r1, r2
     518:	e7f5      	b.n	506 <extint_disable_events+0xa>
			}
		}

		/* Disable the masked events */
		eics[i]->EVCTRL.reg &= ~event_mask;
     51a:	4a02      	ldr	r2, [pc, #8]	; (524 <extint_disable_events+0x28>)
     51c:	6853      	ldr	r3, [r2, #4]
     51e:	438b      	bics	r3, r1
     520:	6053      	str	r3, [r2, #4]
	}
}
     522:	bd10      	pop	{r4, pc}
     524:	40001800 	.word	0x40001800

00000528 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     528:	b500      	push	{lr}
     52a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     52c:	ab01      	add	r3, sp, #4
     52e:	2280      	movs	r2, #128	; 0x80
     530:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     532:	780a      	ldrb	r2, [r1, #0]
     534:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     536:	784a      	ldrb	r2, [r1, #1]
     538:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     53a:	788a      	ldrb	r2, [r1, #2]
     53c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     53e:	0019      	movs	r1, r3
     540:	4b01      	ldr	r3, [pc, #4]	; (548 <port_pin_set_config+0x20>)
     542:	4798      	blx	r3
}
     544:	b003      	add	sp, #12
     546:	bd00      	pop	{pc}
     548:	0000179d 	.word	0x0000179d

0000054c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     54c:	b5f0      	push	{r4, r5, r6, r7, lr}
     54e:	46de      	mov	lr, fp
     550:	4657      	mov	r7, sl
     552:	464e      	mov	r6, r9
     554:	4645      	mov	r5, r8
     556:	b5e0      	push	{r5, r6, r7, lr}
     558:	b087      	sub	sp, #28
     55a:	4680      	mov	r8, r0
     55c:	9104      	str	r1, [sp, #16]
     55e:	0016      	movs	r6, r2
     560:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     562:	2200      	movs	r2, #0
     564:	2300      	movs	r3, #0
     566:	2100      	movs	r1, #0
     568:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     56a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     56c:	2001      	movs	r0, #1
     56e:	0021      	movs	r1, r4
     570:	9600      	str	r6, [sp, #0]
     572:	9701      	str	r7, [sp, #4]
     574:	465c      	mov	r4, fp
     576:	9403      	str	r4, [sp, #12]
     578:	4644      	mov	r4, r8
     57a:	9405      	str	r4, [sp, #20]
     57c:	e013      	b.n	5a6 <long_division+0x5a>
     57e:	2420      	movs	r4, #32
     580:	1a64      	subs	r4, r4, r1
     582:	0005      	movs	r5, r0
     584:	40e5      	lsrs	r5, r4
     586:	46a8      	mov	r8, r5
     588:	e014      	b.n	5b4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     58a:	9c00      	ldr	r4, [sp, #0]
     58c:	9d01      	ldr	r5, [sp, #4]
     58e:	1b12      	subs	r2, r2, r4
     590:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     592:	465c      	mov	r4, fp
     594:	464d      	mov	r5, r9
     596:	432c      	orrs	r4, r5
     598:	46a3      	mov	fp, r4
     59a:	9c03      	ldr	r4, [sp, #12]
     59c:	4645      	mov	r5, r8
     59e:	432c      	orrs	r4, r5
     5a0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     5a2:	3901      	subs	r1, #1
     5a4:	d325      	bcc.n	5f2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     5a6:	2420      	movs	r4, #32
     5a8:	4264      	negs	r4, r4
     5aa:	190c      	adds	r4, r1, r4
     5ac:	d4e7      	bmi.n	57e <long_division+0x32>
     5ae:	0005      	movs	r5, r0
     5b0:	40a5      	lsls	r5, r4
     5b2:	46a8      	mov	r8, r5
     5b4:	0004      	movs	r4, r0
     5b6:	408c      	lsls	r4, r1
     5b8:	46a1      	mov	r9, r4
		r = r << 1;
     5ba:	1892      	adds	r2, r2, r2
     5bc:	415b      	adcs	r3, r3
     5be:	0014      	movs	r4, r2
     5c0:	001d      	movs	r5, r3
		if (n & bit_shift) {
     5c2:	9e05      	ldr	r6, [sp, #20]
     5c4:	464f      	mov	r7, r9
     5c6:	403e      	ands	r6, r7
     5c8:	46b4      	mov	ip, r6
     5ca:	9e04      	ldr	r6, [sp, #16]
     5cc:	4647      	mov	r7, r8
     5ce:	403e      	ands	r6, r7
     5d0:	46b2      	mov	sl, r6
     5d2:	4666      	mov	r6, ip
     5d4:	4657      	mov	r7, sl
     5d6:	433e      	orrs	r6, r7
     5d8:	d003      	beq.n	5e2 <long_division+0x96>
			r |= 0x01;
     5da:	0006      	movs	r6, r0
     5dc:	4326      	orrs	r6, r4
     5de:	0032      	movs	r2, r6
     5e0:	002b      	movs	r3, r5
		if (r >= d) {
     5e2:	9c00      	ldr	r4, [sp, #0]
     5e4:	9d01      	ldr	r5, [sp, #4]
     5e6:	429d      	cmp	r5, r3
     5e8:	d8db      	bhi.n	5a2 <long_division+0x56>
     5ea:	d1ce      	bne.n	58a <long_division+0x3e>
     5ec:	4294      	cmp	r4, r2
     5ee:	d8d8      	bhi.n	5a2 <long_division+0x56>
     5f0:	e7cb      	b.n	58a <long_division+0x3e>
     5f2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     5f4:	4658      	mov	r0, fp
     5f6:	0019      	movs	r1, r3
     5f8:	b007      	add	sp, #28
     5fa:	bc3c      	pop	{r2, r3, r4, r5}
     5fc:	4690      	mov	r8, r2
     5fe:	4699      	mov	r9, r3
     600:	46a2      	mov	sl, r4
     602:	46ab      	mov	fp, r5
     604:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000606 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     606:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     608:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     60a:	2340      	movs	r3, #64	; 0x40
     60c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     60e:	4281      	cmp	r1, r0
     610:	d202      	bcs.n	618 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     612:	0018      	movs	r0, r3
     614:	bd10      	pop	{r4, pc}
		baud_calculated++;
     616:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     618:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     61a:	1c63      	adds	r3, r4, #1
     61c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     61e:	4288      	cmp	r0, r1
     620:	d9f9      	bls.n	616 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     622:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     624:	2cff      	cmp	r4, #255	; 0xff
     626:	d8f4      	bhi.n	612 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     628:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     62a:	2300      	movs	r3, #0
     62c:	e7f1      	b.n	612 <_sercom_get_sync_baud_val+0xc>
	...

00000630 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     630:	b5f0      	push	{r4, r5, r6, r7, lr}
     632:	b083      	sub	sp, #12
     634:	000f      	movs	r7, r1
     636:	0016      	movs	r6, r2
     638:	aa08      	add	r2, sp, #32
     63a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     63c:	0004      	movs	r4, r0
     63e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     640:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     642:	42bc      	cmp	r4, r7
     644:	d902      	bls.n	64c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     646:	0010      	movs	r0, r2
     648:	b003      	add	sp, #12
     64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     64c:	2b00      	cmp	r3, #0
     64e:	d114      	bne.n	67a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     650:	0002      	movs	r2, r0
     652:	0008      	movs	r0, r1
     654:	2100      	movs	r1, #0
     656:	4c19      	ldr	r4, [pc, #100]	; (6bc <_sercom_get_async_baud_val+0x8c>)
     658:	47a0      	blx	r4
     65a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     65c:	003a      	movs	r2, r7
     65e:	2300      	movs	r3, #0
     660:	2000      	movs	r0, #0
     662:	4c17      	ldr	r4, [pc, #92]	; (6c0 <_sercom_get_async_baud_val+0x90>)
     664:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     666:	2200      	movs	r2, #0
     668:	2301      	movs	r3, #1
     66a:	1a12      	subs	r2, r2, r0
     66c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     66e:	0c12      	lsrs	r2, r2, #16
     670:	041b      	lsls	r3, r3, #16
     672:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     674:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     676:	2200      	movs	r2, #0
     678:	e7e5      	b.n	646 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     67a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     67c:	2b01      	cmp	r3, #1
     67e:	d1f9      	bne.n	674 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     680:	000a      	movs	r2, r1
     682:	2300      	movs	r3, #0
     684:	2100      	movs	r1, #0
     686:	4c0d      	ldr	r4, [pc, #52]	; (6bc <_sercom_get_async_baud_val+0x8c>)
     688:	47a0      	blx	r4
     68a:	0002      	movs	r2, r0
     68c:	000b      	movs	r3, r1
     68e:	9200      	str	r2, [sp, #0]
     690:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     692:	0038      	movs	r0, r7
     694:	2100      	movs	r1, #0
     696:	4c0a      	ldr	r4, [pc, #40]	; (6c0 <_sercom_get_async_baud_val+0x90>)
     698:	47a0      	blx	r4
     69a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     69c:	2380      	movs	r3, #128	; 0x80
     69e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6a0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     6a2:	4298      	cmp	r0, r3
     6a4:	d8cf      	bhi.n	646 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     6a6:	0f79      	lsrs	r1, r7, #29
     6a8:	00f8      	lsls	r0, r7, #3
     6aa:	9a00      	ldr	r2, [sp, #0]
     6ac:	9b01      	ldr	r3, [sp, #4]
     6ae:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     6b0:	00ea      	lsls	r2, r5, #3
     6b2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     6b4:	b2d2      	uxtb	r2, r2
     6b6:	0352      	lsls	r2, r2, #13
     6b8:	432a      	orrs	r2, r5
     6ba:	e7db      	b.n	674 <_sercom_get_async_baud_val+0x44>
     6bc:	000021c1 	.word	0x000021c1
     6c0:	0000054d 	.word	0x0000054d

000006c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6c4:	b510      	push	{r4, lr}
     6c6:	b082      	sub	sp, #8
     6c8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6ca:	4b0e      	ldr	r3, [pc, #56]	; (704 <sercom_set_gclk_generator+0x40>)
     6cc:	781b      	ldrb	r3, [r3, #0]
     6ce:	2b00      	cmp	r3, #0
     6d0:	d007      	beq.n	6e2 <sercom_set_gclk_generator+0x1e>
     6d2:	2900      	cmp	r1, #0
     6d4:	d105      	bne.n	6e2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     6d6:	4b0b      	ldr	r3, [pc, #44]	; (704 <sercom_set_gclk_generator+0x40>)
     6d8:	785b      	ldrb	r3, [r3, #1]
     6da:	4283      	cmp	r3, r0
     6dc:	d010      	beq.n	700 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6de:	201d      	movs	r0, #29
     6e0:	e00c      	b.n	6fc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     6e2:	a901      	add	r1, sp, #4
     6e4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6e6:	2013      	movs	r0, #19
     6e8:	4b07      	ldr	r3, [pc, #28]	; (708 <sercom_set_gclk_generator+0x44>)
     6ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6ec:	2013      	movs	r0, #19
     6ee:	4b07      	ldr	r3, [pc, #28]	; (70c <sercom_set_gclk_generator+0x48>)
     6f0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     6f2:	4b04      	ldr	r3, [pc, #16]	; (704 <sercom_set_gclk_generator+0x40>)
     6f4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6f6:	2201      	movs	r2, #1
     6f8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     6fa:	2000      	movs	r0, #0
}
     6fc:	b002      	add	sp, #8
     6fe:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     700:	2000      	movs	r0, #0
     702:	e7fb      	b.n	6fc <sercom_set_gclk_generator+0x38>
     704:	200000b4 	.word	0x200000b4
     708:	000016a5 	.word	0x000016a5
     70c:	00001619 	.word	0x00001619

00000710 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     710:	4b40      	ldr	r3, [pc, #256]	; (814 <_sercom_get_default_pad+0x104>)
     712:	4298      	cmp	r0, r3
     714:	d031      	beq.n	77a <_sercom_get_default_pad+0x6a>
     716:	d90a      	bls.n	72e <_sercom_get_default_pad+0x1e>
     718:	4b3f      	ldr	r3, [pc, #252]	; (818 <_sercom_get_default_pad+0x108>)
     71a:	4298      	cmp	r0, r3
     71c:	d04d      	beq.n	7ba <_sercom_get_default_pad+0xaa>
     71e:	4b3f      	ldr	r3, [pc, #252]	; (81c <_sercom_get_default_pad+0x10c>)
     720:	4298      	cmp	r0, r3
     722:	d05a      	beq.n	7da <_sercom_get_default_pad+0xca>
     724:	4b3e      	ldr	r3, [pc, #248]	; (820 <_sercom_get_default_pad+0x110>)
     726:	4298      	cmp	r0, r3
     728:	d037      	beq.n	79a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     72a:	2000      	movs	r0, #0
}
     72c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     72e:	4b3d      	ldr	r3, [pc, #244]	; (824 <_sercom_get_default_pad+0x114>)
     730:	4298      	cmp	r0, r3
     732:	d00c      	beq.n	74e <_sercom_get_default_pad+0x3e>
     734:	4b3c      	ldr	r3, [pc, #240]	; (828 <_sercom_get_default_pad+0x118>)
     736:	4298      	cmp	r0, r3
     738:	d1f7      	bne.n	72a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     73a:	2901      	cmp	r1, #1
     73c:	d017      	beq.n	76e <_sercom_get_default_pad+0x5e>
     73e:	2900      	cmp	r1, #0
     740:	d05d      	beq.n	7fe <_sercom_get_default_pad+0xee>
     742:	2902      	cmp	r1, #2
     744:	d015      	beq.n	772 <_sercom_get_default_pad+0x62>
     746:	2903      	cmp	r1, #3
     748:	d015      	beq.n	776 <_sercom_get_default_pad+0x66>
	return 0;
     74a:	2000      	movs	r0, #0
     74c:	e7ee      	b.n	72c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     74e:	2901      	cmp	r1, #1
     750:	d007      	beq.n	762 <_sercom_get_default_pad+0x52>
     752:	2900      	cmp	r1, #0
     754:	d051      	beq.n	7fa <_sercom_get_default_pad+0xea>
     756:	2902      	cmp	r1, #2
     758:	d005      	beq.n	766 <_sercom_get_default_pad+0x56>
     75a:	2903      	cmp	r1, #3
     75c:	d005      	beq.n	76a <_sercom_get_default_pad+0x5a>
	return 0;
     75e:	2000      	movs	r0, #0
     760:	e7e4      	b.n	72c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     762:	4832      	ldr	r0, [pc, #200]	; (82c <_sercom_get_default_pad+0x11c>)
     764:	e7e2      	b.n	72c <_sercom_get_default_pad+0x1c>
     766:	4832      	ldr	r0, [pc, #200]	; (830 <_sercom_get_default_pad+0x120>)
     768:	e7e0      	b.n	72c <_sercom_get_default_pad+0x1c>
     76a:	4832      	ldr	r0, [pc, #200]	; (834 <_sercom_get_default_pad+0x124>)
     76c:	e7de      	b.n	72c <_sercom_get_default_pad+0x1c>
     76e:	4832      	ldr	r0, [pc, #200]	; (838 <_sercom_get_default_pad+0x128>)
     770:	e7dc      	b.n	72c <_sercom_get_default_pad+0x1c>
     772:	4832      	ldr	r0, [pc, #200]	; (83c <_sercom_get_default_pad+0x12c>)
     774:	e7da      	b.n	72c <_sercom_get_default_pad+0x1c>
     776:	4832      	ldr	r0, [pc, #200]	; (840 <_sercom_get_default_pad+0x130>)
     778:	e7d8      	b.n	72c <_sercom_get_default_pad+0x1c>
     77a:	2901      	cmp	r1, #1
     77c:	d007      	beq.n	78e <_sercom_get_default_pad+0x7e>
     77e:	2900      	cmp	r1, #0
     780:	d03f      	beq.n	802 <_sercom_get_default_pad+0xf2>
     782:	2902      	cmp	r1, #2
     784:	d005      	beq.n	792 <_sercom_get_default_pad+0x82>
     786:	2903      	cmp	r1, #3
     788:	d005      	beq.n	796 <_sercom_get_default_pad+0x86>
	return 0;
     78a:	2000      	movs	r0, #0
     78c:	e7ce      	b.n	72c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     78e:	482d      	ldr	r0, [pc, #180]	; (844 <_sercom_get_default_pad+0x134>)
     790:	e7cc      	b.n	72c <_sercom_get_default_pad+0x1c>
     792:	482d      	ldr	r0, [pc, #180]	; (848 <_sercom_get_default_pad+0x138>)
     794:	e7ca      	b.n	72c <_sercom_get_default_pad+0x1c>
     796:	482d      	ldr	r0, [pc, #180]	; (84c <_sercom_get_default_pad+0x13c>)
     798:	e7c8      	b.n	72c <_sercom_get_default_pad+0x1c>
     79a:	2901      	cmp	r1, #1
     79c:	d007      	beq.n	7ae <_sercom_get_default_pad+0x9e>
     79e:	2900      	cmp	r1, #0
     7a0:	d031      	beq.n	806 <_sercom_get_default_pad+0xf6>
     7a2:	2902      	cmp	r1, #2
     7a4:	d005      	beq.n	7b2 <_sercom_get_default_pad+0xa2>
     7a6:	2903      	cmp	r1, #3
     7a8:	d005      	beq.n	7b6 <_sercom_get_default_pad+0xa6>
	return 0;
     7aa:	2000      	movs	r0, #0
     7ac:	e7be      	b.n	72c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ae:	4828      	ldr	r0, [pc, #160]	; (850 <_sercom_get_default_pad+0x140>)
     7b0:	e7bc      	b.n	72c <_sercom_get_default_pad+0x1c>
     7b2:	4828      	ldr	r0, [pc, #160]	; (854 <_sercom_get_default_pad+0x144>)
     7b4:	e7ba      	b.n	72c <_sercom_get_default_pad+0x1c>
     7b6:	4828      	ldr	r0, [pc, #160]	; (858 <_sercom_get_default_pad+0x148>)
     7b8:	e7b8      	b.n	72c <_sercom_get_default_pad+0x1c>
     7ba:	2901      	cmp	r1, #1
     7bc:	d007      	beq.n	7ce <_sercom_get_default_pad+0xbe>
     7be:	2900      	cmp	r1, #0
     7c0:	d023      	beq.n	80a <_sercom_get_default_pad+0xfa>
     7c2:	2902      	cmp	r1, #2
     7c4:	d005      	beq.n	7d2 <_sercom_get_default_pad+0xc2>
     7c6:	2903      	cmp	r1, #3
     7c8:	d005      	beq.n	7d6 <_sercom_get_default_pad+0xc6>
	return 0;
     7ca:	2000      	movs	r0, #0
     7cc:	e7ae      	b.n	72c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ce:	4823      	ldr	r0, [pc, #140]	; (85c <_sercom_get_default_pad+0x14c>)
     7d0:	e7ac      	b.n	72c <_sercom_get_default_pad+0x1c>
     7d2:	4823      	ldr	r0, [pc, #140]	; (860 <_sercom_get_default_pad+0x150>)
     7d4:	e7aa      	b.n	72c <_sercom_get_default_pad+0x1c>
     7d6:	4823      	ldr	r0, [pc, #140]	; (864 <_sercom_get_default_pad+0x154>)
     7d8:	e7a8      	b.n	72c <_sercom_get_default_pad+0x1c>
     7da:	2901      	cmp	r1, #1
     7dc:	d007      	beq.n	7ee <_sercom_get_default_pad+0xde>
     7de:	2900      	cmp	r1, #0
     7e0:	d015      	beq.n	80e <_sercom_get_default_pad+0xfe>
     7e2:	2902      	cmp	r1, #2
     7e4:	d005      	beq.n	7f2 <_sercom_get_default_pad+0xe2>
     7e6:	2903      	cmp	r1, #3
     7e8:	d005      	beq.n	7f6 <_sercom_get_default_pad+0xe6>
	return 0;
     7ea:	2000      	movs	r0, #0
     7ec:	e79e      	b.n	72c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ee:	481e      	ldr	r0, [pc, #120]	; (868 <_sercom_get_default_pad+0x158>)
     7f0:	e79c      	b.n	72c <_sercom_get_default_pad+0x1c>
     7f2:	481e      	ldr	r0, [pc, #120]	; (86c <_sercom_get_default_pad+0x15c>)
     7f4:	e79a      	b.n	72c <_sercom_get_default_pad+0x1c>
     7f6:	481e      	ldr	r0, [pc, #120]	; (870 <_sercom_get_default_pad+0x160>)
     7f8:	e798      	b.n	72c <_sercom_get_default_pad+0x1c>
     7fa:	481e      	ldr	r0, [pc, #120]	; (874 <_sercom_get_default_pad+0x164>)
     7fc:	e796      	b.n	72c <_sercom_get_default_pad+0x1c>
     7fe:	2003      	movs	r0, #3
     800:	e794      	b.n	72c <_sercom_get_default_pad+0x1c>
     802:	481d      	ldr	r0, [pc, #116]	; (878 <_sercom_get_default_pad+0x168>)
     804:	e792      	b.n	72c <_sercom_get_default_pad+0x1c>
     806:	481d      	ldr	r0, [pc, #116]	; (87c <_sercom_get_default_pad+0x16c>)
     808:	e790      	b.n	72c <_sercom_get_default_pad+0x1c>
     80a:	481d      	ldr	r0, [pc, #116]	; (880 <_sercom_get_default_pad+0x170>)
     80c:	e78e      	b.n	72c <_sercom_get_default_pad+0x1c>
     80e:	481d      	ldr	r0, [pc, #116]	; (884 <_sercom_get_default_pad+0x174>)
     810:	e78c      	b.n	72c <_sercom_get_default_pad+0x1c>
     812:	46c0      	nop			; (mov r8, r8)
     814:	42001000 	.word	0x42001000
     818:	42001800 	.word	0x42001800
     81c:	42001c00 	.word	0x42001c00
     820:	42001400 	.word	0x42001400
     824:	42000800 	.word	0x42000800
     828:	42000c00 	.word	0x42000c00
     82c:	00050003 	.word	0x00050003
     830:	00060003 	.word	0x00060003
     834:	00070003 	.word	0x00070003
     838:	00010003 	.word	0x00010003
     83c:	001e0003 	.word	0x001e0003
     840:	001f0003 	.word	0x001f0003
     844:	00090003 	.word	0x00090003
     848:	000a0003 	.word	0x000a0003
     84c:	000b0003 	.word	0x000b0003
     850:	00110003 	.word	0x00110003
     854:	00120003 	.word	0x00120003
     858:	00130003 	.word	0x00130003
     85c:	000d0003 	.word	0x000d0003
     860:	000e0003 	.word	0x000e0003
     864:	000f0003 	.word	0x000f0003
     868:	00170003 	.word	0x00170003
     86c:	00180003 	.word	0x00180003
     870:	00190003 	.word	0x00190003
     874:	00040003 	.word	0x00040003
     878:	00080003 	.word	0x00080003
     87c:	00100003 	.word	0x00100003
     880:	000c0003 	.word	0x000c0003
     884:	00160003 	.word	0x00160003

00000888 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     888:	b530      	push	{r4, r5, lr}
     88a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     88c:	4b0b      	ldr	r3, [pc, #44]	; (8bc <_sercom_get_sercom_inst_index+0x34>)
     88e:	466a      	mov	r2, sp
     890:	cb32      	ldmia	r3!, {r1, r4, r5}
     892:	c232      	stmia	r2!, {r1, r4, r5}
     894:	cb32      	ldmia	r3!, {r1, r4, r5}
     896:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     898:	9b00      	ldr	r3, [sp, #0]
     89a:	4283      	cmp	r3, r0
     89c:	d00b      	beq.n	8b6 <_sercom_get_sercom_inst_index+0x2e>
     89e:	2301      	movs	r3, #1
     8a0:	009a      	lsls	r2, r3, #2
     8a2:	4669      	mov	r1, sp
     8a4:	5852      	ldr	r2, [r2, r1]
     8a6:	4282      	cmp	r2, r0
     8a8:	d006      	beq.n	8b8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8aa:	3301      	adds	r3, #1
     8ac:	2b06      	cmp	r3, #6
     8ae:	d1f7      	bne.n	8a0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     8b0:	2000      	movs	r0, #0
}
     8b2:	b007      	add	sp, #28
     8b4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8b6:	2300      	movs	r3, #0
			return i;
     8b8:	b2d8      	uxtb	r0, r3
     8ba:	e7fa      	b.n	8b2 <_sercom_get_sercom_inst_index+0x2a>
     8bc:	00003880 	.word	0x00003880

000008c0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     8c0:	4770      	bx	lr
	...

000008c4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     8c6:	4b0a      	ldr	r3, [pc, #40]	; (8f0 <_sercom_set_handler+0x2c>)
     8c8:	781b      	ldrb	r3, [r3, #0]
     8ca:	2b00      	cmp	r3, #0
     8cc:	d10c      	bne.n	8e8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8ce:	4f09      	ldr	r7, [pc, #36]	; (8f4 <_sercom_set_handler+0x30>)
     8d0:	4e09      	ldr	r6, [pc, #36]	; (8f8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     8d2:	4d0a      	ldr	r5, [pc, #40]	; (8fc <_sercom_set_handler+0x38>)
     8d4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8d6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     8d8:	195a      	adds	r2, r3, r5
     8da:	6014      	str	r4, [r2, #0]
     8dc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8de:	2b18      	cmp	r3, #24
     8e0:	d1f9      	bne.n	8d6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     8e2:	2201      	movs	r2, #1
     8e4:	4b02      	ldr	r3, [pc, #8]	; (8f0 <_sercom_set_handler+0x2c>)
     8e6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     8e8:	0080      	lsls	r0, r0, #2
     8ea:	4b02      	ldr	r3, [pc, #8]	; (8f4 <_sercom_set_handler+0x30>)
     8ec:	50c1      	str	r1, [r0, r3]
}
     8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f0:	200000b6 	.word	0x200000b6
     8f4:	200000b8 	.word	0x200000b8
     8f8:	000008c1 	.word	0x000008c1
     8fc:	20000138 	.word	0x20000138

00000900 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     900:	b500      	push	{lr}
     902:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     904:	2309      	movs	r3, #9
     906:	466a      	mov	r2, sp
     908:	7013      	strb	r3, [r2, #0]
     90a:	3301      	adds	r3, #1
     90c:	7053      	strb	r3, [r2, #1]
     90e:	3301      	adds	r3, #1
     910:	7093      	strb	r3, [r2, #2]
     912:	3301      	adds	r3, #1
     914:	70d3      	strb	r3, [r2, #3]
     916:	3301      	adds	r3, #1
     918:	7113      	strb	r3, [r2, #4]
     91a:	3301      	adds	r3, #1
     91c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     91e:	4b03      	ldr	r3, [pc, #12]	; (92c <_sercom_get_interrupt_vector+0x2c>)
     920:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     922:	466b      	mov	r3, sp
     924:	5618      	ldrsb	r0, [r3, r0]
}
     926:	b003      	add	sp, #12
     928:	bd00      	pop	{pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	00000889 	.word	0x00000889

00000930 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     930:	b510      	push	{r4, lr}
     932:	4b02      	ldr	r3, [pc, #8]	; (93c <SERCOM0_Handler+0xc>)
     934:	681b      	ldr	r3, [r3, #0]
     936:	2000      	movs	r0, #0
     938:	4798      	blx	r3
     93a:	bd10      	pop	{r4, pc}
     93c:	200000b8 	.word	0x200000b8

00000940 <SERCOM1_Handler>:
     940:	b510      	push	{r4, lr}
     942:	4b02      	ldr	r3, [pc, #8]	; (94c <SERCOM1_Handler+0xc>)
     944:	685b      	ldr	r3, [r3, #4]
     946:	2001      	movs	r0, #1
     948:	4798      	blx	r3
     94a:	bd10      	pop	{r4, pc}
     94c:	200000b8 	.word	0x200000b8

00000950 <SERCOM2_Handler>:
     950:	b510      	push	{r4, lr}
     952:	4b02      	ldr	r3, [pc, #8]	; (95c <SERCOM2_Handler+0xc>)
     954:	689b      	ldr	r3, [r3, #8]
     956:	2002      	movs	r0, #2
     958:	4798      	blx	r3
     95a:	bd10      	pop	{r4, pc}
     95c:	200000b8 	.word	0x200000b8

00000960 <SERCOM3_Handler>:
     960:	b510      	push	{r4, lr}
     962:	4b02      	ldr	r3, [pc, #8]	; (96c <SERCOM3_Handler+0xc>)
     964:	68db      	ldr	r3, [r3, #12]
     966:	2003      	movs	r0, #3
     968:	4798      	blx	r3
     96a:	bd10      	pop	{r4, pc}
     96c:	200000b8 	.word	0x200000b8

00000970 <SERCOM4_Handler>:
     970:	b510      	push	{r4, lr}
     972:	4b02      	ldr	r3, [pc, #8]	; (97c <SERCOM4_Handler+0xc>)
     974:	691b      	ldr	r3, [r3, #16]
     976:	2004      	movs	r0, #4
     978:	4798      	blx	r3
     97a:	bd10      	pop	{r4, pc}
     97c:	200000b8 	.word	0x200000b8

00000980 <SERCOM5_Handler>:
     980:	b510      	push	{r4, lr}
     982:	4b02      	ldr	r3, [pc, #8]	; (98c <SERCOM5_Handler+0xc>)
     984:	695b      	ldr	r3, [r3, #20]
     986:	2005      	movs	r0, #5
     988:	4798      	blx	r3
     98a:	bd10      	pop	{r4, pc}
     98c:	200000b8 	.word	0x200000b8

00000990 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     990:	b5f0      	push	{r4, r5, r6, r7, lr}
     992:	46de      	mov	lr, fp
     994:	4657      	mov	r7, sl
     996:	464e      	mov	r6, r9
     998:	4645      	mov	r5, r8
     99a:	b5e0      	push	{r5, r6, r7, lr}
     99c:	b091      	sub	sp, #68	; 0x44
     99e:	0005      	movs	r5, r0
     9a0:	000c      	movs	r4, r1
     9a2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     9a4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9a6:	0008      	movs	r0, r1
     9a8:	4bbc      	ldr	r3, [pc, #752]	; (c9c <usart_init+0x30c>)
     9aa:	4798      	blx	r3
     9ac:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     9ae:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     9b0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     9b2:	07db      	lsls	r3, r3, #31
     9b4:	d506      	bpl.n	9c4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     9b6:	b011      	add	sp, #68	; 0x44
     9b8:	bc3c      	pop	{r2, r3, r4, r5}
     9ba:	4690      	mov	r8, r2
     9bc:	4699      	mov	r9, r3
     9be:	46a2      	mov	sl, r4
     9c0:	46ab      	mov	fp, r5
     9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     9c4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     9c6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     9c8:	079b      	lsls	r3, r3, #30
     9ca:	d4f4      	bmi.n	9b6 <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
     9cc:	49b4      	ldr	r1, [pc, #720]	; (ca0 <usart_init+0x310>)
     9ce:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     9d0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     9d2:	2301      	movs	r3, #1
     9d4:	40bb      	lsls	r3, r7
     9d6:	4303      	orrs	r3, r0
     9d8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     9da:	a90f      	add	r1, sp, #60	; 0x3c
     9dc:	272d      	movs	r7, #45	; 0x2d
     9de:	5df3      	ldrb	r3, [r6, r7]
     9e0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     9e2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     9e4:	b2d3      	uxtb	r3, r2
     9e6:	9302      	str	r3, [sp, #8]
     9e8:	0018      	movs	r0, r3
     9ea:	4bae      	ldr	r3, [pc, #696]	; (ca4 <usart_init+0x314>)
     9ec:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     9ee:	9802      	ldr	r0, [sp, #8]
     9f0:	4bad      	ldr	r3, [pc, #692]	; (ca8 <usart_init+0x318>)
     9f2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     9f4:	5df0      	ldrb	r0, [r6, r7]
     9f6:	2100      	movs	r1, #0
     9f8:	4bac      	ldr	r3, [pc, #688]	; (cac <usart_init+0x31c>)
     9fa:	4798      	blx	r3
	module->character_size = config->character_size;
     9fc:	7af3      	ldrb	r3, [r6, #11]
     9fe:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     a00:	2324      	movs	r3, #36	; 0x24
     a02:	5cf3      	ldrb	r3, [r6, r3]
     a04:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     a06:	2325      	movs	r3, #37	; 0x25
     a08:	5cf3      	ldrb	r3, [r6, r3]
     a0a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     a0c:	7ef3      	ldrb	r3, [r6, #27]
     a0e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     a10:	7f33      	ldrb	r3, [r6, #28]
     a12:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a14:	682b      	ldr	r3, [r5, #0]
     a16:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a18:	0018      	movs	r0, r3
     a1a:	4ba0      	ldr	r3, [pc, #640]	; (c9c <usart_init+0x30c>)
     a1c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a1e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     a20:	2200      	movs	r2, #0
     a22:	230e      	movs	r3, #14
     a24:	a906      	add	r1, sp, #24
     a26:	468c      	mov	ip, r1
     a28:	4463      	add	r3, ip
     a2a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     a2c:	8a32      	ldrh	r2, [r6, #16]
     a2e:	9202      	str	r2, [sp, #8]
     a30:	2380      	movs	r3, #128	; 0x80
     a32:	01db      	lsls	r3, r3, #7
     a34:	429a      	cmp	r2, r3
     a36:	d100      	bne.n	a3a <usart_init+0xaa>
     a38:	e09e      	b.n	b78 <usart_init+0x1e8>
     a3a:	d90f      	bls.n	a5c <usart_init+0xcc>
     a3c:	23c0      	movs	r3, #192	; 0xc0
     a3e:	01db      	lsls	r3, r3, #7
     a40:	9a02      	ldr	r2, [sp, #8]
     a42:	429a      	cmp	r2, r3
     a44:	d100      	bne.n	a48 <usart_init+0xb8>
     a46:	e092      	b.n	b6e <usart_init+0x1de>
     a48:	2380      	movs	r3, #128	; 0x80
     a4a:	021b      	lsls	r3, r3, #8
     a4c:	429a      	cmp	r2, r3
     a4e:	d000      	beq.n	a52 <usart_init+0xc2>
     a50:	e11f      	b.n	c92 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     a52:	2303      	movs	r3, #3
     a54:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a56:	2300      	movs	r3, #0
     a58:	9307      	str	r3, [sp, #28]
     a5a:	e008      	b.n	a6e <usart_init+0xde>
	switch (config->sample_rate) {
     a5c:	2380      	movs	r3, #128	; 0x80
     a5e:	019b      	lsls	r3, r3, #6
     a60:	429a      	cmp	r2, r3
     a62:	d000      	beq.n	a66 <usart_init+0xd6>
     a64:	e115      	b.n	c92 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a66:	2310      	movs	r3, #16
     a68:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a6a:	3b0f      	subs	r3, #15
     a6c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     a6e:	6833      	ldr	r3, [r6, #0]
     a70:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     a72:	68f3      	ldr	r3, [r6, #12]
     a74:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     a76:	6973      	ldr	r3, [r6, #20]
     a78:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a7a:	7e33      	ldrb	r3, [r6, #24]
     a7c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a7e:	2326      	movs	r3, #38	; 0x26
     a80:	5cf3      	ldrb	r3, [r6, r3]
     a82:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     a84:	6873      	ldr	r3, [r6, #4]
     a86:	4699      	mov	r9, r3
	switch (transfer_mode)
     a88:	2b00      	cmp	r3, #0
     a8a:	d100      	bne.n	a8e <usart_init+0xfe>
     a8c:	e0a0      	b.n	bd0 <usart_init+0x240>
     a8e:	2380      	movs	r3, #128	; 0x80
     a90:	055b      	lsls	r3, r3, #21
     a92:	4599      	cmp	r9, r3
     a94:	d100      	bne.n	a98 <usart_init+0x108>
     a96:	e084      	b.n	ba2 <usart_init+0x212>
	if(config->encoding_format_enable) {
     a98:	7e73      	ldrb	r3, [r6, #25]
     a9a:	2b00      	cmp	r3, #0
     a9c:	d002      	beq.n	aa4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     a9e:	7eb3      	ldrb	r3, [r6, #26]
     aa0:	4642      	mov	r2, r8
     aa2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     aa4:	682a      	ldr	r2, [r5, #0]
     aa6:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     aa8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     aaa:	2b00      	cmp	r3, #0
     aac:	d1fc      	bne.n	aa8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     aae:	330e      	adds	r3, #14
     ab0:	aa06      	add	r2, sp, #24
     ab2:	4694      	mov	ip, r2
     ab4:	4463      	add	r3, ip
     ab6:	881b      	ldrh	r3, [r3, #0]
     ab8:	4642      	mov	r2, r8
     aba:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     abc:	9b05      	ldr	r3, [sp, #20]
     abe:	9a03      	ldr	r2, [sp, #12]
     ac0:	4313      	orrs	r3, r2
     ac2:	9a04      	ldr	r2, [sp, #16]
     ac4:	4313      	orrs	r3, r2
     ac6:	464a      	mov	r2, r9
     ac8:	4313      	orrs	r3, r2
     aca:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     acc:	465b      	mov	r3, fp
     ace:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     ad0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ad2:	4653      	mov	r3, sl
     ad4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     ad6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     ad8:	2327      	movs	r3, #39	; 0x27
     ada:	5cf3      	ldrb	r3, [r6, r3]
     adc:	2b00      	cmp	r3, #0
     ade:	d101      	bne.n	ae4 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     ae0:	3304      	adds	r3, #4
     ae2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     ae4:	7e73      	ldrb	r3, [r6, #25]
     ae6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ae8:	7f32      	ldrb	r2, [r6, #28]
     aea:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     aec:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     aee:	7f72      	ldrb	r2, [r6, #29]
     af0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     af2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     af4:	2224      	movs	r2, #36	; 0x24
     af6:	5cb2      	ldrb	r2, [r6, r2]
     af8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     afa:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     afc:	2225      	movs	r2, #37	; 0x25
     afe:	5cb2      	ldrb	r2, [r6, r2]
     b00:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b02:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     b04:	7ab1      	ldrb	r1, [r6, #10]
     b06:	7af2      	ldrb	r2, [r6, #11]
     b08:	4311      	orrs	r1, r2
     b0a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     b0c:	8933      	ldrh	r3, [r6, #8]
     b0e:	2bff      	cmp	r3, #255	; 0xff
     b10:	d100      	bne.n	b14 <usart_init+0x184>
     b12:	e081      	b.n	c18 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     b14:	2280      	movs	r2, #128	; 0x80
     b16:	0452      	lsls	r2, r2, #17
     b18:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     b1a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     b1c:	232c      	movs	r3, #44	; 0x2c
     b1e:	5cf3      	ldrb	r3, [r6, r3]
     b20:	2b00      	cmp	r3, #0
     b22:	d103      	bne.n	b2c <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b24:	4b62      	ldr	r3, [pc, #392]	; (cb0 <usart_init+0x320>)
     b26:	789b      	ldrb	r3, [r3, #2]
     b28:	079b      	lsls	r3, r3, #30
     b2a:	d501      	bpl.n	b30 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     b2c:	2380      	movs	r3, #128	; 0x80
     b2e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     b30:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     b32:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     b34:	2b00      	cmp	r3, #0
     b36:	d1fc      	bne.n	b32 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     b38:	4643      	mov	r3, r8
     b3a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b3c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     b3e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     b40:	2b00      	cmp	r3, #0
     b42:	d1fc      	bne.n	b3e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     b44:	4643      	mov	r3, r8
     b46:	601f      	str	r7, [r3, #0]
     b48:	ab0e      	add	r3, sp, #56	; 0x38
     b4a:	2280      	movs	r2, #128	; 0x80
     b4c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b4e:	2200      	movs	r2, #0
     b50:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     b52:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b54:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     b56:	6b33      	ldr	r3, [r6, #48]	; 0x30
     b58:	930a      	str	r3, [sp, #40]	; 0x28
     b5a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     b5c:	930b      	str	r3, [sp, #44]	; 0x2c
     b5e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     b60:	930c      	str	r3, [sp, #48]	; 0x30
     b62:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     b64:	9302      	str	r3, [sp, #8]
     b66:	930d      	str	r3, [sp, #52]	; 0x34
     b68:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b6a:	ae0a      	add	r6, sp, #40	; 0x28
     b6c:	e063      	b.n	c36 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b6e:	2308      	movs	r3, #8
     b70:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b72:	3b07      	subs	r3, #7
     b74:	9307      	str	r3, [sp, #28]
     b76:	e77a      	b.n	a6e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     b78:	6833      	ldr	r3, [r6, #0]
     b7a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     b7c:	68f3      	ldr	r3, [r6, #12]
     b7e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     b80:	6973      	ldr	r3, [r6, #20]
     b82:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b84:	7e33      	ldrb	r3, [r6, #24]
     b86:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b88:	2326      	movs	r3, #38	; 0x26
     b8a:	5cf3      	ldrb	r3, [r6, r3]
     b8c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     b8e:	6873      	ldr	r3, [r6, #4]
     b90:	4699      	mov	r9, r3
	switch (transfer_mode)
     b92:	2b00      	cmp	r3, #0
     b94:	d018      	beq.n	bc8 <usart_init+0x238>
     b96:	2380      	movs	r3, #128	; 0x80
     b98:	055b      	lsls	r3, r3, #21
     b9a:	4599      	cmp	r9, r3
     b9c:	d001      	beq.n	ba2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     b9e:	2000      	movs	r0, #0
     ba0:	e025      	b.n	bee <usart_init+0x25e>
			if (!config->use_external_clock) {
     ba2:	2327      	movs	r3, #39	; 0x27
     ba4:	5cf3      	ldrb	r3, [r6, r3]
     ba6:	2b00      	cmp	r3, #0
     ba8:	d000      	beq.n	bac <usart_init+0x21c>
     baa:	e775      	b.n	a98 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     bac:	6a33      	ldr	r3, [r6, #32]
     bae:	001f      	movs	r7, r3
     bb0:	b2c0      	uxtb	r0, r0
     bb2:	4b40      	ldr	r3, [pc, #256]	; (cb4 <usart_init+0x324>)
     bb4:	4798      	blx	r3
     bb6:	0001      	movs	r1, r0
     bb8:	220e      	movs	r2, #14
     bba:	ab06      	add	r3, sp, #24
     bbc:	469c      	mov	ip, r3
     bbe:	4462      	add	r2, ip
     bc0:	0038      	movs	r0, r7
     bc2:	4b3d      	ldr	r3, [pc, #244]	; (cb8 <usart_init+0x328>)
     bc4:	4798      	blx	r3
     bc6:	e012      	b.n	bee <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     bc8:	2308      	movs	r3, #8
     bca:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     bcc:	2300      	movs	r3, #0
     bce:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     bd0:	2327      	movs	r3, #39	; 0x27
     bd2:	5cf3      	ldrb	r3, [r6, r3]
     bd4:	2b00      	cmp	r3, #0
     bd6:	d00e      	beq.n	bf6 <usart_init+0x266>
				status_code =
     bd8:	9b06      	ldr	r3, [sp, #24]
     bda:	9300      	str	r3, [sp, #0]
     bdc:	9b07      	ldr	r3, [sp, #28]
     bde:	220e      	movs	r2, #14
     be0:	a906      	add	r1, sp, #24
     be2:	468c      	mov	ip, r1
     be4:	4462      	add	r2, ip
     be6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     be8:	6a30      	ldr	r0, [r6, #32]
     bea:	4f34      	ldr	r7, [pc, #208]	; (cbc <usart_init+0x32c>)
     bec:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     bee:	2800      	cmp	r0, #0
     bf0:	d000      	beq.n	bf4 <usart_init+0x264>
     bf2:	e6e0      	b.n	9b6 <usart_init+0x26>
     bf4:	e750      	b.n	a98 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     bf6:	6a33      	ldr	r3, [r6, #32]
     bf8:	001f      	movs	r7, r3
     bfa:	b2c0      	uxtb	r0, r0
     bfc:	4b2d      	ldr	r3, [pc, #180]	; (cb4 <usart_init+0x324>)
     bfe:	4798      	blx	r3
     c00:	0001      	movs	r1, r0
				status_code =
     c02:	9b06      	ldr	r3, [sp, #24]
     c04:	9300      	str	r3, [sp, #0]
     c06:	9b07      	ldr	r3, [sp, #28]
     c08:	220e      	movs	r2, #14
     c0a:	a806      	add	r0, sp, #24
     c0c:	4684      	mov	ip, r0
     c0e:	4462      	add	r2, ip
     c10:	0038      	movs	r0, r7
     c12:	4f2a      	ldr	r7, [pc, #168]	; (cbc <usart_init+0x32c>)
     c14:	47b8      	blx	r7
     c16:	e7ea      	b.n	bee <usart_init+0x25e>
		if(config->lin_slave_enable) {
     c18:	7ef3      	ldrb	r3, [r6, #27]
     c1a:	2b00      	cmp	r3, #0
     c1c:	d100      	bne.n	c20 <usart_init+0x290>
     c1e:	e77d      	b.n	b1c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     c20:	2380      	movs	r3, #128	; 0x80
     c22:	04db      	lsls	r3, r3, #19
     c24:	431f      	orrs	r7, r3
     c26:	e779      	b.n	b1c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c28:	0020      	movs	r0, r4
     c2a:	4b25      	ldr	r3, [pc, #148]	; (cc0 <usart_init+0x330>)
     c2c:	4798      	blx	r3
     c2e:	e007      	b.n	c40 <usart_init+0x2b0>
     c30:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     c32:	2f04      	cmp	r7, #4
     c34:	d00d      	beq.n	c52 <usart_init+0x2c2>
     c36:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c38:	00bb      	lsls	r3, r7, #2
     c3a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     c3c:	2800      	cmp	r0, #0
     c3e:	d0f3      	beq.n	c28 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     c40:	1c43      	adds	r3, r0, #1
     c42:	d0f5      	beq.n	c30 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c44:	a90e      	add	r1, sp, #56	; 0x38
     c46:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c48:	0c00      	lsrs	r0, r0, #16
     c4a:	b2c0      	uxtb	r0, r0
     c4c:	4b1d      	ldr	r3, [pc, #116]	; (cc4 <usart_init+0x334>)
     c4e:	4798      	blx	r3
     c50:	e7ee      	b.n	c30 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     c52:	2300      	movs	r3, #0
     c54:	60eb      	str	r3, [r5, #12]
     c56:	612b      	str	r3, [r5, #16]
     c58:	616b      	str	r3, [r5, #20]
     c5a:	61ab      	str	r3, [r5, #24]
     c5c:	61eb      	str	r3, [r5, #28]
     c5e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     c60:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     c62:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     c64:	2200      	movs	r2, #0
     c66:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     c68:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     c6a:	3330      	adds	r3, #48	; 0x30
     c6c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     c6e:	3301      	adds	r3, #1
     c70:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     c72:	3301      	adds	r3, #1
     c74:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     c76:	3301      	adds	r3, #1
     c78:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     c7a:	6828      	ldr	r0, [r5, #0]
     c7c:	4b07      	ldr	r3, [pc, #28]	; (c9c <usart_init+0x30c>)
     c7e:	4798      	blx	r3
     c80:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     c82:	4911      	ldr	r1, [pc, #68]	; (cc8 <usart_init+0x338>)
     c84:	4b11      	ldr	r3, [pc, #68]	; (ccc <usart_init+0x33c>)
     c86:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c88:	00a4      	lsls	r4, r4, #2
     c8a:	4b11      	ldr	r3, [pc, #68]	; (cd0 <usart_init+0x340>)
     c8c:	50e5      	str	r5, [r4, r3]
	return status_code;
     c8e:	2000      	movs	r0, #0
     c90:	e691      	b.n	9b6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c92:	2310      	movs	r3, #16
     c94:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c96:	2300      	movs	r3, #0
     c98:	9307      	str	r3, [sp, #28]
     c9a:	e6e8      	b.n	a6e <usart_init+0xde>
     c9c:	00000889 	.word	0x00000889
     ca0:	40000400 	.word	0x40000400
     ca4:	000016a5 	.word	0x000016a5
     ca8:	00001619 	.word	0x00001619
     cac:	000006c5 	.word	0x000006c5
     cb0:	41002000 	.word	0x41002000
     cb4:	000016c1 	.word	0x000016c1
     cb8:	00000607 	.word	0x00000607
     cbc:	00000631 	.word	0x00000631
     cc0:	00000711 	.word	0x00000711
     cc4:	0000179d 	.word	0x0000179d
     cc8:	00000e35 	.word	0x00000e35
     ccc:	000008c5 	.word	0x000008c5
     cd0:	20000138 	.word	0x20000138

00000cd4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     cd4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     cd6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     cd8:	2a00      	cmp	r2, #0
     cda:	d101      	bne.n	ce0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     cdc:	0018      	movs	r0, r3
     cde:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     ce0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     ce2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     ce4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     ce6:	2a00      	cmp	r2, #0
     ce8:	d1f8      	bne.n	cdc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     cea:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     cec:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     cee:	2a00      	cmp	r2, #0
     cf0:	d1fc      	bne.n	cec <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     cf2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     cf4:	2102      	movs	r1, #2
     cf6:	7e1a      	ldrb	r2, [r3, #24]
     cf8:	420a      	tst	r2, r1
     cfa:	d0fc      	beq.n	cf6 <usart_write_wait+0x22>
	return STATUS_OK;
     cfc:	2300      	movs	r3, #0
     cfe:	e7ed      	b.n	cdc <usart_write_wait+0x8>

00000d00 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     d00:	b5f0      	push	{r4, r5, r6, r7, lr}
     d02:	46ce      	mov	lr, r9
     d04:	4647      	mov	r7, r8
     d06:	b580      	push	{r7, lr}
     d08:	b083      	sub	sp, #12
     d0a:	0005      	movs	r5, r0
     d0c:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     d0e:	2017      	movs	r0, #23
	if (length == 0) {
     d10:	2a00      	cmp	r2, #0
     d12:	d104      	bne.n	d1e <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     d14:	b003      	add	sp, #12
     d16:	bc0c      	pop	{r2, r3}
     d18:	4690      	mov	r8, r2
     d1a:	4699      	mov	r9, r3
     d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     d1e:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     d20:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     d22:	2b00      	cmp	r3, #0
     d24:	d0f6      	beq.n	d14 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     d26:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     d28:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     d2a:	2b00      	cmp	r3, #0
     d2c:	d1fc      	bne.n	d28 <usart_write_buffer_wait+0x28>
	while (length--) {
     d2e:	3a01      	subs	r2, #1
     d30:	b293      	uxth	r3, r2
     d32:	4699      	mov	r9, r3
     d34:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     d36:	2701      	movs	r7, #1
	while (length--) {
     d38:	4b1f      	ldr	r3, [pc, #124]	; (db8 <usart_write_buffer_wait+0xb8>)
     d3a:	4698      	mov	r8, r3
     d3c:	e011      	b.n	d62 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     d3e:	1c73      	adds	r3, r6, #1
     d40:	b29b      	uxth	r3, r3
     d42:	9a01      	ldr	r2, [sp, #4]
     d44:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d46:	796a      	ldrb	r2, [r5, #5]
     d48:	2a01      	cmp	r2, #1
     d4a:	d017      	beq.n	d7c <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     d4c:	b289      	uxth	r1, r1
     d4e:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     d50:	0028      	movs	r0, r5
     d52:	4b1a      	ldr	r3, [pc, #104]	; (dbc <usart_write_buffer_wait+0xbc>)
     d54:	4798      	blx	r3
	while (length--) {
     d56:	464b      	mov	r3, r9
     d58:	3b01      	subs	r3, #1
     d5a:	b29b      	uxth	r3, r3
     d5c:	4699      	mov	r9, r3
     d5e:	4543      	cmp	r3, r8
     d60:	d013      	beq.n	d8a <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     d62:	7e23      	ldrb	r3, [r4, #24]
     d64:	423b      	tst	r3, r7
     d66:	d1ea      	bne.n	d3e <usart_write_buffer_wait+0x3e>
     d68:	4b13      	ldr	r3, [pc, #76]	; (db8 <usart_write_buffer_wait+0xb8>)
     d6a:	7e22      	ldrb	r2, [r4, #24]
     d6c:	423a      	tst	r2, r7
     d6e:	d1e6      	bne.n	d3e <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     d70:	2b01      	cmp	r3, #1
     d72:	d019      	beq.n	da8 <usart_write_buffer_wait+0xa8>
     d74:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     d76:	2b00      	cmp	r3, #0
     d78:	d1f7      	bne.n	d6a <usart_write_buffer_wait+0x6a>
     d7a:	e7e0      	b.n	d3e <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     d7c:	3602      	adds	r6, #2
     d7e:	b2b6      	uxth	r6, r6
     d80:	9a01      	ldr	r2, [sp, #4]
     d82:	5cd3      	ldrb	r3, [r2, r3]
     d84:	021b      	lsls	r3, r3, #8
     d86:	4319      	orrs	r1, r3
     d88:	e7e2      	b.n	d50 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     d8a:	7e23      	ldrb	r3, [r4, #24]
     d8c:	079b      	lsls	r3, r3, #30
     d8e:	d40d      	bmi.n	dac <usart_write_buffer_wait+0xac>
     d90:	4b09      	ldr	r3, [pc, #36]	; (db8 <usart_write_buffer_wait+0xb8>)
     d92:	2102      	movs	r1, #2
     d94:	7e22      	ldrb	r2, [r4, #24]
     d96:	420a      	tst	r2, r1
     d98:	d10a      	bne.n	db0 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     d9a:	2b01      	cmp	r3, #1
     d9c:	d00a      	beq.n	db4 <usart_write_buffer_wait+0xb4>
     d9e:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     da0:	2b00      	cmp	r3, #0
     da2:	d1f7      	bne.n	d94 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     da4:	2000      	movs	r0, #0
     da6:	e7b5      	b.n	d14 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     da8:	2012      	movs	r0, #18
     daa:	e7b3      	b.n	d14 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     dac:	2000      	movs	r0, #0
     dae:	e7b1      	b.n	d14 <usart_write_buffer_wait+0x14>
     db0:	2000      	movs	r0, #0
     db2:	e7af      	b.n	d14 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     db4:	2012      	movs	r0, #18
     db6:	e7ad      	b.n	d14 <usart_write_buffer_wait+0x14>
     db8:	0000ffff 	.word	0x0000ffff
     dbc:	00000cd5 	.word	0x00000cd5

00000dc0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dc2:	0006      	movs	r6, r0
     dc4:	000c      	movs	r4, r1
     dc6:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     dc8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     dca:	4b0a      	ldr	r3, [pc, #40]	; (df4 <_usart_write_buffer+0x34>)
     dcc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     dce:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     dd0:	b29b      	uxth	r3, r3
     dd2:	2b00      	cmp	r3, #0
     dd4:	d003      	beq.n	dde <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
     dd6:	4b08      	ldr	r3, [pc, #32]	; (df8 <_usart_write_buffer+0x38>)
     dd8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     dda:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     dde:	85f5      	strh	r5, [r6, #46]	; 0x2e
     de0:	4b05      	ldr	r3, [pc, #20]	; (df8 <_usart_write_buffer+0x38>)
     de2:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     de4:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     de6:	2205      	movs	r2, #5
     de8:	2333      	movs	r3, #51	; 0x33
     dea:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     dec:	3b32      	subs	r3, #50	; 0x32
     dee:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     df0:	2000      	movs	r0, #0
     df2:	e7f3      	b.n	ddc <_usart_write_buffer+0x1c>
     df4:	00000181 	.word	0x00000181
     df8:	000001c1 	.word	0x000001c1

00000dfc <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     dfc:	1c93      	adds	r3, r2, #2
     dfe:	009b      	lsls	r3, r3, #2
     e00:	18c3      	adds	r3, r0, r3
     e02:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     e04:	2130      	movs	r1, #48	; 0x30
     e06:	2301      	movs	r3, #1
     e08:	4093      	lsls	r3, r2
     e0a:	001a      	movs	r2, r3
     e0c:	5c43      	ldrb	r3, [r0, r1]
     e0e:	4313      	orrs	r3, r2
     e10:	5443      	strb	r3, [r0, r1]
}
     e12:	4770      	bx	lr

00000e14 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     e14:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e16:	2317      	movs	r3, #23
	if (length == 0) {
     e18:	2a00      	cmp	r2, #0
     e1a:	d101      	bne.n	e20 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     e1c:	0018      	movs	r0, r3
     e1e:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     e20:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     e22:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     e24:	2c00      	cmp	r4, #0
     e26:	d0f9      	beq.n	e1c <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     e28:	4b01      	ldr	r3, [pc, #4]	; (e30 <usart_write_buffer_job+0x1c>)
     e2a:	4798      	blx	r3
     e2c:	0003      	movs	r3, r0
     e2e:	e7f5      	b.n	e1c <usart_write_buffer_job+0x8>
     e30:	00000dc1 	.word	0x00000dc1

00000e34 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     e36:	0080      	lsls	r0, r0, #2
     e38:	4b62      	ldr	r3, [pc, #392]	; (fc4 <_usart_interrupt_handler+0x190>)
     e3a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     e3c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e3e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     e40:	2b00      	cmp	r3, #0
     e42:	d1fc      	bne.n	e3e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     e44:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     e46:	7da6      	ldrb	r6, [r4, #22]
     e48:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     e4a:	2330      	movs	r3, #48	; 0x30
     e4c:	5ceb      	ldrb	r3, [r5, r3]
     e4e:	2231      	movs	r2, #49	; 0x31
     e50:	5caf      	ldrb	r7, [r5, r2]
     e52:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     e54:	07f3      	lsls	r3, r6, #31
     e56:	d522      	bpl.n	e9e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     e58:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e5a:	b29b      	uxth	r3, r3
     e5c:	2b00      	cmp	r3, #0
     e5e:	d01c      	beq.n	e9a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     e62:	7813      	ldrb	r3, [r2, #0]
     e64:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     e66:	1c51      	adds	r1, r2, #1
     e68:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e6a:	7969      	ldrb	r1, [r5, #5]
     e6c:	2901      	cmp	r1, #1
     e6e:	d00e      	beq.n	e8e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e70:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     e72:	05db      	lsls	r3, r3, #23
     e74:	0ddb      	lsrs	r3, r3, #23
     e76:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     e78:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e7a:	3b01      	subs	r3, #1
     e7c:	b29b      	uxth	r3, r3
     e7e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     e80:	2b00      	cmp	r3, #0
     e82:	d10c      	bne.n	e9e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e84:	3301      	adds	r3, #1
     e86:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     e88:	3301      	adds	r3, #1
     e8a:	75a3      	strb	r3, [r4, #22]
     e8c:	e007      	b.n	e9e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     e8e:	7851      	ldrb	r1, [r2, #1]
     e90:	0209      	lsls	r1, r1, #8
     e92:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     e94:	3202      	adds	r2, #2
     e96:	62aa      	str	r2, [r5, #40]	; 0x28
     e98:	e7eb      	b.n	e72 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e9a:	2301      	movs	r3, #1
     e9c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     e9e:	07b3      	lsls	r3, r6, #30
     ea0:	d506      	bpl.n	eb0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     ea2:	2302      	movs	r3, #2
     ea4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     ea6:	2200      	movs	r2, #0
     ea8:	3331      	adds	r3, #49	; 0x31
     eaa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     eac:	07fb      	lsls	r3, r7, #31
     eae:	d41a      	bmi.n	ee6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     eb0:	0773      	lsls	r3, r6, #29
     eb2:	d565      	bpl.n	f80 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     eb4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     eb6:	b29b      	uxth	r3, r3
     eb8:	2b00      	cmp	r3, #0
     eba:	d05f      	beq.n	f7c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ebc:	8b63      	ldrh	r3, [r4, #26]
     ebe:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     ec0:	071a      	lsls	r2, r3, #28
     ec2:	d414      	bmi.n	eee <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ec4:	223f      	movs	r2, #63	; 0x3f
     ec6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     ec8:	2b00      	cmp	r3, #0
     eca:	d034      	beq.n	f36 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     ecc:	079a      	lsls	r2, r3, #30
     ece:	d511      	bpl.n	ef4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     ed0:	221a      	movs	r2, #26
     ed2:	2332      	movs	r3, #50	; 0x32
     ed4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ed6:	3b30      	subs	r3, #48	; 0x30
     ed8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     eda:	077b      	lsls	r3, r7, #29
     edc:	d550      	bpl.n	f80 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     ede:	0028      	movs	r0, r5
     ee0:	696b      	ldr	r3, [r5, #20]
     ee2:	4798      	blx	r3
     ee4:	e04c      	b.n	f80 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     ee6:	0028      	movs	r0, r5
     ee8:	68eb      	ldr	r3, [r5, #12]
     eea:	4798      	blx	r3
     eec:	e7e0      	b.n	eb0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     eee:	2237      	movs	r2, #55	; 0x37
     ef0:	4013      	ands	r3, r2
     ef2:	e7e9      	b.n	ec8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ef4:	075a      	lsls	r2, r3, #29
     ef6:	d505      	bpl.n	f04 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     ef8:	221e      	movs	r2, #30
     efa:	2332      	movs	r3, #50	; 0x32
     efc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     efe:	3b2e      	subs	r3, #46	; 0x2e
     f00:	8363      	strh	r3, [r4, #26]
     f02:	e7ea      	b.n	eda <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f04:	07da      	lsls	r2, r3, #31
     f06:	d505      	bpl.n	f14 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     f08:	2213      	movs	r2, #19
     f0a:	2332      	movs	r3, #50	; 0x32
     f0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     f0e:	3b31      	subs	r3, #49	; 0x31
     f10:	8363      	strh	r3, [r4, #26]
     f12:	e7e2      	b.n	eda <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     f14:	06da      	lsls	r2, r3, #27
     f16:	d505      	bpl.n	f24 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     f18:	2242      	movs	r2, #66	; 0x42
     f1a:	2332      	movs	r3, #50	; 0x32
     f1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     f1e:	3b22      	subs	r3, #34	; 0x22
     f20:	8363      	strh	r3, [r4, #26]
     f22:	e7da      	b.n	eda <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     f24:	2220      	movs	r2, #32
     f26:	421a      	tst	r2, r3
     f28:	d0d7      	beq.n	eda <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     f2a:	3221      	adds	r2, #33	; 0x21
     f2c:	2332      	movs	r3, #50	; 0x32
     f2e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     f30:	3b12      	subs	r3, #18
     f32:	8363      	strh	r3, [r4, #26]
     f34:	e7d1      	b.n	eda <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     f36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     f38:	05db      	lsls	r3, r3, #23
     f3a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     f3c:	b2da      	uxtb	r2, r3
     f3e:	6a69      	ldr	r1, [r5, #36]	; 0x24
     f40:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     f42:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     f44:	1c51      	adds	r1, r2, #1
     f46:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f48:	7969      	ldrb	r1, [r5, #5]
     f4a:	2901      	cmp	r1, #1
     f4c:	d010      	beq.n	f70 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     f4e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f50:	3b01      	subs	r3, #1
     f52:	b29b      	uxth	r3, r3
     f54:	85ab      	strh	r3, [r5, #44]	; 0x2c
     f56:	2b00      	cmp	r3, #0
     f58:	d112      	bne.n	f80 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f5a:	3304      	adds	r3, #4
     f5c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     f5e:	2200      	movs	r2, #0
     f60:	332e      	adds	r3, #46	; 0x2e
     f62:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     f64:	07bb      	lsls	r3, r7, #30
     f66:	d50b      	bpl.n	f80 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     f68:	0028      	movs	r0, r5
     f6a:	692b      	ldr	r3, [r5, #16]
     f6c:	4798      	blx	r3
     f6e:	e007      	b.n	f80 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     f70:	0a1b      	lsrs	r3, r3, #8
     f72:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     f74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f76:	3301      	adds	r3, #1
     f78:	626b      	str	r3, [r5, #36]	; 0x24
     f7a:	e7e8      	b.n	f4e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f7c:	2304      	movs	r3, #4
     f7e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     f80:	06f3      	lsls	r3, r6, #27
     f82:	d504      	bpl.n	f8e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     f84:	2310      	movs	r3, #16
     f86:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     f88:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     f8a:	06fb      	lsls	r3, r7, #27
     f8c:	d40e      	bmi.n	fac <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     f8e:	06b3      	lsls	r3, r6, #26
     f90:	d504      	bpl.n	f9c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     f92:	2320      	movs	r3, #32
     f94:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     f96:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     f98:	073b      	lsls	r3, r7, #28
     f9a:	d40b      	bmi.n	fb4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     f9c:	0733      	lsls	r3, r6, #28
     f9e:	d504      	bpl.n	faa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     fa0:	2308      	movs	r3, #8
     fa2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     fa4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     fa6:	06bb      	lsls	r3, r7, #26
     fa8:	d408      	bmi.n	fbc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     fac:	0028      	movs	r0, r5
     fae:	69eb      	ldr	r3, [r5, #28]
     fb0:	4798      	blx	r3
     fb2:	e7ec      	b.n	f8e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     fb4:	0028      	movs	r0, r5
     fb6:	69ab      	ldr	r3, [r5, #24]
     fb8:	4798      	blx	r3
     fba:	e7ef      	b.n	f9c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     fbc:	6a2b      	ldr	r3, [r5, #32]
     fbe:	0028      	movs	r0, r5
     fc0:	4798      	blx	r3
}
     fc2:	e7f2      	b.n	faa <_usart_interrupt_handler+0x176>
     fc4:	20000138 	.word	0x20000138

00000fc8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     fc8:	b510      	push	{r4, lr}
	switch (clock_source) {
     fca:	2808      	cmp	r0, #8
     fcc:	d803      	bhi.n	fd6 <system_clock_source_get_hz+0xe>
     fce:	0080      	lsls	r0, r0, #2
     fd0:	4b1b      	ldr	r3, [pc, #108]	; (1040 <system_clock_source_get_hz+0x78>)
     fd2:	581b      	ldr	r3, [r3, r0]
     fd4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     fd6:	2000      	movs	r0, #0
     fd8:	e030      	b.n	103c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     fda:	4b1a      	ldr	r3, [pc, #104]	; (1044 <system_clock_source_get_hz+0x7c>)
     fdc:	6918      	ldr	r0, [r3, #16]
     fde:	e02d      	b.n	103c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     fe0:	4b19      	ldr	r3, [pc, #100]	; (1048 <system_clock_source_get_hz+0x80>)
     fe2:	6a1b      	ldr	r3, [r3, #32]
     fe4:	059b      	lsls	r3, r3, #22
     fe6:	0f9b      	lsrs	r3, r3, #30
     fe8:	4818      	ldr	r0, [pc, #96]	; (104c <system_clock_source_get_hz+0x84>)
     fea:	40d8      	lsrs	r0, r3
     fec:	e026      	b.n	103c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     fee:	4b15      	ldr	r3, [pc, #84]	; (1044 <system_clock_source_get_hz+0x7c>)
     ff0:	6958      	ldr	r0, [r3, #20]
     ff2:	e023      	b.n	103c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ff4:	4b13      	ldr	r3, [pc, #76]	; (1044 <system_clock_source_get_hz+0x7c>)
     ff6:	681b      	ldr	r3, [r3, #0]
			return 0;
     ff8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ffa:	079b      	lsls	r3, r3, #30
     ffc:	d51e      	bpl.n	103c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ffe:	4912      	ldr	r1, [pc, #72]	; (1048 <system_clock_source_get_hz+0x80>)
    1000:	2210      	movs	r2, #16
    1002:	68cb      	ldr	r3, [r1, #12]
    1004:	421a      	tst	r2, r3
    1006:	d0fc      	beq.n	1002 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1008:	4b0e      	ldr	r3, [pc, #56]	; (1044 <system_clock_source_get_hz+0x7c>)
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	075b      	lsls	r3, r3, #29
    100e:	d401      	bmi.n	1014 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1010:	480f      	ldr	r0, [pc, #60]	; (1050 <system_clock_source_get_hz+0x88>)
    1012:	e013      	b.n	103c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1014:	2000      	movs	r0, #0
    1016:	4b0f      	ldr	r3, [pc, #60]	; (1054 <system_clock_source_get_hz+0x8c>)
    1018:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <system_clock_source_get_hz+0x7c>)
    101c:	689b      	ldr	r3, [r3, #8]
    101e:	041b      	lsls	r3, r3, #16
    1020:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1022:	4358      	muls	r0, r3
    1024:	e00a      	b.n	103c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1026:	2350      	movs	r3, #80	; 0x50
    1028:	4a07      	ldr	r2, [pc, #28]	; (1048 <system_clock_source_get_hz+0x80>)
    102a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    102c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    102e:	075b      	lsls	r3, r3, #29
    1030:	d504      	bpl.n	103c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1032:	4b04      	ldr	r3, [pc, #16]	; (1044 <system_clock_source_get_hz+0x7c>)
    1034:	68d8      	ldr	r0, [r3, #12]
    1036:	e001      	b.n	103c <system_clock_source_get_hz+0x74>
		return 32768UL;
    1038:	2080      	movs	r0, #128	; 0x80
    103a:	0200      	lsls	r0, r0, #8
	}
}
    103c:	bd10      	pop	{r4, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	00003898 	.word	0x00003898
    1044:	200000d0 	.word	0x200000d0
    1048:	40000800 	.word	0x40000800
    104c:	007a1200 	.word	0x007a1200
    1050:	02dc6c00 	.word	0x02dc6c00
    1054:	000016c1 	.word	0x000016c1

00001058 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1058:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    105a:	490c      	ldr	r1, [pc, #48]	; (108c <system_clock_source_osc8m_set_config+0x34>)
    105c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    105e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1060:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1062:	7840      	ldrb	r0, [r0, #1]
    1064:	2201      	movs	r2, #1
    1066:	4010      	ands	r0, r2
    1068:	0180      	lsls	r0, r0, #6
    106a:	2640      	movs	r6, #64	; 0x40
    106c:	43b3      	bics	r3, r6
    106e:	4303      	orrs	r3, r0
    1070:	402a      	ands	r2, r5
    1072:	01d2      	lsls	r2, r2, #7
    1074:	2080      	movs	r0, #128	; 0x80
    1076:	4383      	bics	r3, r0
    1078:	4313      	orrs	r3, r2
    107a:	2203      	movs	r2, #3
    107c:	4022      	ands	r2, r4
    107e:	0212      	lsls	r2, r2, #8
    1080:	4803      	ldr	r0, [pc, #12]	; (1090 <system_clock_source_osc8m_set_config+0x38>)
    1082:	4003      	ands	r3, r0
    1084:	4313      	orrs	r3, r2
    1086:	620b      	str	r3, [r1, #32]
}
    1088:	bd70      	pop	{r4, r5, r6, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	40000800 	.word	0x40000800
    1090:	fffffcff 	.word	0xfffffcff

00001094 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1094:	b5f0      	push	{r4, r5, r6, r7, lr}
    1096:	46ce      	mov	lr, r9
    1098:	4647      	mov	r7, r8
    109a:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    109c:	4b19      	ldr	r3, [pc, #100]	; (1104 <system_clock_source_osc32k_set_config+0x70>)
    109e:	4699      	mov	r9, r3
    10a0:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    10a2:	7841      	ldrb	r1, [r0, #1]
    10a4:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    10a6:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    10a8:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    10aa:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    10ac:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    10ae:	7880      	ldrb	r0, [r0, #2]
    10b0:	2101      	movs	r1, #1
    10b2:	4008      	ands	r0, r1
    10b4:	0080      	lsls	r0, r0, #2
    10b6:	2204      	movs	r2, #4
    10b8:	4393      	bics	r3, r2
    10ba:	4303      	orrs	r3, r0
    10bc:	4660      	mov	r0, ip
    10be:	4008      	ands	r0, r1
    10c0:	00c0      	lsls	r0, r0, #3
    10c2:	3204      	adds	r2, #4
    10c4:	4393      	bics	r3, r2
    10c6:	4303      	orrs	r3, r0
    10c8:	0038      	movs	r0, r7
    10ca:	4008      	ands	r0, r1
    10cc:	0180      	lsls	r0, r0, #6
    10ce:	2740      	movs	r7, #64	; 0x40
    10d0:	43bb      	bics	r3, r7
    10d2:	4303      	orrs	r3, r0
    10d4:	0030      	movs	r0, r6
    10d6:	4008      	ands	r0, r1
    10d8:	01c0      	lsls	r0, r0, #7
    10da:	2680      	movs	r6, #128	; 0x80
    10dc:	43b3      	bics	r3, r6
    10de:	4303      	orrs	r3, r0
    10e0:	2007      	movs	r0, #7
    10e2:	4005      	ands	r5, r0
    10e4:	022d      	lsls	r5, r5, #8
    10e6:	4808      	ldr	r0, [pc, #32]	; (1108 <system_clock_source_osc32k_set_config+0x74>)
    10e8:	4003      	ands	r3, r0
    10ea:	432b      	orrs	r3, r5
    10ec:	4021      	ands	r1, r4
    10ee:	0309      	lsls	r1, r1, #12
    10f0:	4806      	ldr	r0, [pc, #24]	; (110c <system_clock_source_osc32k_set_config+0x78>)
    10f2:	4003      	ands	r3, r0
    10f4:	430b      	orrs	r3, r1
    10f6:	464a      	mov	r2, r9
    10f8:	6193      	str	r3, [r2, #24]
}
    10fa:	bc0c      	pop	{r2, r3}
    10fc:	4690      	mov	r8, r2
    10fe:	4699      	mov	r9, r3
    1100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	40000800 	.word	0x40000800
    1108:	fffff8ff 	.word	0xfffff8ff
    110c:	ffffefff 	.word	0xffffefff

00001110 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1110:	b5f0      	push	{r4, r5, r6, r7, lr}
    1112:	46de      	mov	lr, fp
    1114:	4657      	mov	r7, sl
    1116:	464e      	mov	r6, r9
    1118:	4645      	mov	r5, r8
    111a:	b5e0      	push	{r5, r6, r7, lr}
    111c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    111e:	4b26      	ldr	r3, [pc, #152]	; (11b8 <system_clock_source_xosc32k_set_config+0xa8>)
    1120:	469b      	mov	fp, r3
    1122:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1124:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1126:	7800      	ldrb	r0, [r0, #0]
    1128:	4242      	negs	r2, r0
    112a:	4142      	adcs	r2, r0
    112c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    112e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1130:	78ca      	ldrb	r2, [r1, #3]
    1132:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1134:	790a      	ldrb	r2, [r1, #4]
    1136:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1138:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    113a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    113c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    113e:	688a      	ldr	r2, [r1, #8]
    1140:	491e      	ldr	r1, [pc, #120]	; (11bc <system_clock_source_xosc32k_set_config+0xac>)
    1142:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1144:	2101      	movs	r1, #1
    1146:	464a      	mov	r2, r9
    1148:	0092      	lsls	r2, r2, #2
    114a:	4691      	mov	r9, r2
    114c:	2204      	movs	r2, #4
    114e:	4393      	bics	r3, r2
    1150:	464a      	mov	r2, r9
    1152:	4313      	orrs	r3, r2
    1154:	4642      	mov	r2, r8
    1156:	400a      	ands	r2, r1
    1158:	00d2      	lsls	r2, r2, #3
    115a:	4690      	mov	r8, r2
    115c:	2208      	movs	r2, #8
    115e:	4393      	bics	r3, r2
    1160:	4642      	mov	r2, r8
    1162:	4313      	orrs	r3, r2
    1164:	4662      	mov	r2, ip
    1166:	400a      	ands	r2, r1
    1168:	0112      	lsls	r2, r2, #4
    116a:	4694      	mov	ip, r2
    116c:	2210      	movs	r2, #16
    116e:	4393      	bics	r3, r2
    1170:	4662      	mov	r2, ip
    1172:	4313      	orrs	r3, r2
    1174:	4008      	ands	r0, r1
    1176:	0140      	lsls	r0, r0, #5
    1178:	2220      	movs	r2, #32
    117a:	4393      	bics	r3, r2
    117c:	4303      	orrs	r3, r0
    117e:	400f      	ands	r7, r1
    1180:	01bf      	lsls	r7, r7, #6
    1182:	2040      	movs	r0, #64	; 0x40
    1184:	4383      	bics	r3, r0
    1186:	433b      	orrs	r3, r7
    1188:	400e      	ands	r6, r1
    118a:	01f6      	lsls	r6, r6, #7
    118c:	3040      	adds	r0, #64	; 0x40
    118e:	4383      	bics	r3, r0
    1190:	4333      	orrs	r3, r6
    1192:	3879      	subs	r0, #121	; 0x79
    1194:	4005      	ands	r5, r0
    1196:	022d      	lsls	r5, r5, #8
    1198:	4809      	ldr	r0, [pc, #36]	; (11c0 <system_clock_source_xosc32k_set_config+0xb0>)
    119a:	4003      	ands	r3, r0
    119c:	432b      	orrs	r3, r5
    119e:	4021      	ands	r1, r4
    11a0:	0309      	lsls	r1, r1, #12
    11a2:	4808      	ldr	r0, [pc, #32]	; (11c4 <system_clock_source_xosc32k_set_config+0xb4>)
    11a4:	4003      	ands	r3, r0
    11a6:	430b      	orrs	r3, r1
    11a8:	465a      	mov	r2, fp
    11aa:	8293      	strh	r3, [r2, #20]
}
    11ac:	bc3c      	pop	{r2, r3, r4, r5}
    11ae:	4690      	mov	r8, r2
    11b0:	4699      	mov	r9, r3
    11b2:	46a2      	mov	sl, r4
    11b4:	46ab      	mov	fp, r5
    11b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11b8:	40000800 	.word	0x40000800
    11bc:	200000d0 	.word	0x200000d0
    11c0:	fffff8ff 	.word	0xfffff8ff
    11c4:	ffffefff 	.word	0xffffefff

000011c8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    11c8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    11ca:	7a03      	ldrb	r3, [r0, #8]
    11cc:	069b      	lsls	r3, r3, #26
    11ce:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    11d0:	8942      	ldrh	r2, [r0, #10]
    11d2:	0592      	lsls	r2, r2, #22
    11d4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    11d6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    11d8:	4918      	ldr	r1, [pc, #96]	; (123c <system_clock_source_dfll_set_config+0x74>)
    11da:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    11dc:	7983      	ldrb	r3, [r0, #6]
    11de:	79c2      	ldrb	r2, [r0, #7]
    11e0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    11e2:	8842      	ldrh	r2, [r0, #2]
    11e4:	8884      	ldrh	r4, [r0, #4]
    11e6:	4322      	orrs	r2, r4
    11e8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    11ea:	7842      	ldrb	r2, [r0, #1]
    11ec:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    11ee:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    11f0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    11f2:	7803      	ldrb	r3, [r0, #0]
    11f4:	2b04      	cmp	r3, #4
    11f6:	d011      	beq.n	121c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    11f8:	2b20      	cmp	r3, #32
    11fa:	d10e      	bne.n	121a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    11fc:	7b03      	ldrb	r3, [r0, #12]
    11fe:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1200:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1202:	4313      	orrs	r3, r2
    1204:	89c2      	ldrh	r2, [r0, #14]
    1206:	0412      	lsls	r2, r2, #16
    1208:	490d      	ldr	r1, [pc, #52]	; (1240 <system_clock_source_dfll_set_config+0x78>)
    120a:	400a      	ands	r2, r1
    120c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    120e:	4a0b      	ldr	r2, [pc, #44]	; (123c <system_clock_source_dfll_set_config+0x74>)
    1210:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1212:	6811      	ldr	r1, [r2, #0]
    1214:	4b0b      	ldr	r3, [pc, #44]	; (1244 <system_clock_source_dfll_set_config+0x7c>)
    1216:	430b      	orrs	r3, r1
    1218:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    121a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    121c:	7b03      	ldrb	r3, [r0, #12]
    121e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1220:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1222:	4313      	orrs	r3, r2
    1224:	89c2      	ldrh	r2, [r0, #14]
    1226:	0412      	lsls	r2, r2, #16
    1228:	4905      	ldr	r1, [pc, #20]	; (1240 <system_clock_source_dfll_set_config+0x78>)
    122a:	400a      	ands	r2, r1
    122c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    122e:	4a03      	ldr	r2, [pc, #12]	; (123c <system_clock_source_dfll_set_config+0x74>)
    1230:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1232:	6813      	ldr	r3, [r2, #0]
    1234:	2104      	movs	r1, #4
    1236:	430b      	orrs	r3, r1
    1238:	6013      	str	r3, [r2, #0]
    123a:	e7ee      	b.n	121a <system_clock_source_dfll_set_config+0x52>
    123c:	200000d0 	.word	0x200000d0
    1240:	03ff0000 	.word	0x03ff0000
    1244:	00000424 	.word	0x00000424

00001248 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1248:	2808      	cmp	r0, #8
    124a:	d803      	bhi.n	1254 <system_clock_source_enable+0xc>
    124c:	0080      	lsls	r0, r0, #2
    124e:	4b25      	ldr	r3, [pc, #148]	; (12e4 <system_clock_source_enable+0x9c>)
    1250:	581b      	ldr	r3, [r3, r0]
    1252:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1254:	2017      	movs	r0, #23
    1256:	e044      	b.n	12e2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1258:	4a23      	ldr	r2, [pc, #140]	; (12e8 <system_clock_source_enable+0xa0>)
    125a:	6a13      	ldr	r3, [r2, #32]
    125c:	2102      	movs	r1, #2
    125e:	430b      	orrs	r3, r1
    1260:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1262:	2000      	movs	r0, #0
    1264:	e03d      	b.n	12e2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1266:	4a20      	ldr	r2, [pc, #128]	; (12e8 <system_clock_source_enable+0xa0>)
    1268:	6993      	ldr	r3, [r2, #24]
    126a:	2102      	movs	r1, #2
    126c:	430b      	orrs	r3, r1
    126e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1270:	2000      	movs	r0, #0
		break;
    1272:	e036      	b.n	12e2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1274:	4a1c      	ldr	r2, [pc, #112]	; (12e8 <system_clock_source_enable+0xa0>)
    1276:	8a13      	ldrh	r3, [r2, #16]
    1278:	2102      	movs	r1, #2
    127a:	430b      	orrs	r3, r1
    127c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    127e:	2000      	movs	r0, #0
		break;
    1280:	e02f      	b.n	12e2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1282:	4a19      	ldr	r2, [pc, #100]	; (12e8 <system_clock_source_enable+0xa0>)
    1284:	8a93      	ldrh	r3, [r2, #20]
    1286:	2102      	movs	r1, #2
    1288:	430b      	orrs	r3, r1
    128a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    128c:	2000      	movs	r0, #0
		break;
    128e:	e028      	b.n	12e2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1290:	4916      	ldr	r1, [pc, #88]	; (12ec <system_clock_source_enable+0xa4>)
    1292:	680b      	ldr	r3, [r1, #0]
    1294:	2202      	movs	r2, #2
    1296:	4313      	orrs	r3, r2
    1298:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    129a:	4b13      	ldr	r3, [pc, #76]	; (12e8 <system_clock_source_enable+0xa0>)
    129c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    129e:	0019      	movs	r1, r3
    12a0:	320e      	adds	r2, #14
    12a2:	68cb      	ldr	r3, [r1, #12]
    12a4:	421a      	tst	r2, r3
    12a6:	d0fc      	beq.n	12a2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    12a8:	4a10      	ldr	r2, [pc, #64]	; (12ec <system_clock_source_enable+0xa4>)
    12aa:	6891      	ldr	r1, [r2, #8]
    12ac:	4b0e      	ldr	r3, [pc, #56]	; (12e8 <system_clock_source_enable+0xa0>)
    12ae:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    12b0:	6852      	ldr	r2, [r2, #4]
    12b2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    12b4:	2200      	movs	r2, #0
    12b6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12b8:	0019      	movs	r1, r3
    12ba:	3210      	adds	r2, #16
    12bc:	68cb      	ldr	r3, [r1, #12]
    12be:	421a      	tst	r2, r3
    12c0:	d0fc      	beq.n	12bc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    12c2:	4b0a      	ldr	r3, [pc, #40]	; (12ec <system_clock_source_enable+0xa4>)
    12c4:	681b      	ldr	r3, [r3, #0]
    12c6:	b29b      	uxth	r3, r3
    12c8:	4a07      	ldr	r2, [pc, #28]	; (12e8 <system_clock_source_enable+0xa0>)
    12ca:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    12cc:	2000      	movs	r0, #0
    12ce:	e008      	b.n	12e2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    12d0:	4905      	ldr	r1, [pc, #20]	; (12e8 <system_clock_source_enable+0xa0>)
    12d2:	2244      	movs	r2, #68	; 0x44
    12d4:	5c8b      	ldrb	r3, [r1, r2]
    12d6:	2002      	movs	r0, #2
    12d8:	4303      	orrs	r3, r0
    12da:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    12dc:	2000      	movs	r0, #0
		break;
    12de:	e000      	b.n	12e2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    12e0:	2000      	movs	r0, #0
}
    12e2:	4770      	bx	lr
    12e4:	000038bc 	.word	0x000038bc
    12e8:	40000800 	.word	0x40000800
    12ec:	200000d0 	.word	0x200000d0

000012f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    12f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12f2:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    12f4:	22c2      	movs	r2, #194	; 0xc2
    12f6:	00d2      	lsls	r2, r2, #3
    12f8:	4b4e      	ldr	r3, [pc, #312]	; (1434 <system_clock_init+0x144>)
    12fa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    12fc:	4a4e      	ldr	r2, [pc, #312]	; (1438 <system_clock_init+0x148>)
    12fe:	6853      	ldr	r3, [r2, #4]
    1300:	211e      	movs	r1, #30
    1302:	438b      	bics	r3, r1
    1304:	391c      	subs	r1, #28
    1306:	430b      	orrs	r3, r1
    1308:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    130a:	2201      	movs	r2, #1
    130c:	ab01      	add	r3, sp, #4
    130e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1310:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1312:	4d4a      	ldr	r5, [pc, #296]	; (143c <system_clock_init+0x14c>)
    1314:	b2e0      	uxtb	r0, r4
    1316:	a901      	add	r1, sp, #4
    1318:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    131a:	3401      	adds	r4, #1
    131c:	2c25      	cmp	r4, #37	; 0x25
    131e:	d1f9      	bne.n	1314 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1320:	a80c      	add	r0, sp, #48	; 0x30
    1322:	2300      	movs	r3, #0
    1324:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1326:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1328:	2280      	movs	r2, #128	; 0x80
    132a:	0212      	lsls	r2, r2, #8
    132c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    132e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1330:	2201      	movs	r2, #1
    1332:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1334:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1336:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1338:	3205      	adds	r2, #5
    133a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    133c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    133e:	4b40      	ldr	r3, [pc, #256]	; (1440 <system_clock_init+0x150>)
    1340:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1342:	2005      	movs	r0, #5
    1344:	4b3f      	ldr	r3, [pc, #252]	; (1444 <system_clock_init+0x154>)
    1346:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1348:	493a      	ldr	r1, [pc, #232]	; (1434 <system_clock_init+0x144>)
    134a:	2202      	movs	r2, #2
    134c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    134e:	421a      	tst	r2, r3
    1350:	d0fc      	beq.n	134c <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1352:	4938      	ldr	r1, [pc, #224]	; (1434 <system_clock_init+0x144>)
    1354:	8a8b      	ldrh	r3, [r1, #20]
    1356:	2280      	movs	r2, #128	; 0x80
    1358:	4313      	orrs	r3, r2
    135a:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    135c:	4d3a      	ldr	r5, [pc, #232]	; (1448 <system_clock_init+0x158>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    135e:	682b      	ldr	r3, [r5, #0]
    1360:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    1362:	698a      	ldr	r2, [r1, #24]
    1364:	0e5b      	lsrs	r3, r3, #25
    1366:	041b      	lsls	r3, r3, #16
    1368:	4838      	ldr	r0, [pc, #224]	; (144c <system_clock_init+0x15c>)
    136a:	4002      	ands	r2, r0
    136c:	4313      	orrs	r3, r2
    136e:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1370:	a80a      	add	r0, sp, #40	; 0x28
    1372:	2301      	movs	r3, #1
    1374:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1376:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    1378:	2400      	movs	r4, #0
    137a:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    137c:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    137e:	3306      	adds	r3, #6
    1380:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    1382:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1384:	4b32      	ldr	r3, [pc, #200]	; (1450 <system_clock_init+0x160>)
    1386:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1388:	2004      	movs	r0, #4
    138a:	4b2e      	ldr	r3, [pc, #184]	; (1444 <system_clock_init+0x154>)
    138c:	4798      	blx	r3
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    138e:	ab05      	add	r3, sp, #20
    1390:	701c      	strb	r4, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1392:	2200      	movs	r2, #0
    1394:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1396:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1398:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    139a:	71da      	strb	r2, [r3, #7]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    139c:	2106      	movs	r1, #6
    139e:	8219      	strh	r1, [r3, #16]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    13a0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    13a2:	682b      	ldr	r3, [r5, #0]
    13a4:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    13a6:	2b3f      	cmp	r3, #63	; 0x3f
    13a8:	d041      	beq.n	142e <system_clock_init+0x13e>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    13aa:	a805      	add	r0, sp, #20
    13ac:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    13ae:	2380      	movs	r3, #128	; 0x80
    13b0:	009b      	lsls	r3, r3, #2
    13b2:	8143      	strh	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    13b4:	2707      	movs	r7, #7
    13b6:	7307      	strb	r7, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    13b8:	3bc2      	subs	r3, #194	; 0xc2
    13ba:	3bff      	subs	r3, #255	; 0xff
    13bc:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    13be:	4b25      	ldr	r3, [pc, #148]	; (1454 <system_clock_init+0x164>)
    13c0:	4798      	blx	r3
	config->run_in_standby  = false;
    13c2:	a804      	add	r0, sp, #16
    13c4:	2400      	movs	r4, #0
    13c6:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    13c8:	2501      	movs	r5, #1
    13ca:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    13cc:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    13ce:	4b22      	ldr	r3, [pc, #136]	; (1458 <system_clock_init+0x168>)
    13d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    13d2:	2006      	movs	r0, #6
    13d4:	4e1b      	ldr	r6, [pc, #108]	; (1444 <system_clock_init+0x154>)
    13d6:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    13d8:	4b20      	ldr	r3, [pc, #128]	; (145c <system_clock_init+0x16c>)
    13da:	4798      	blx	r3
	config->division_factor    = 1;
    13dc:	a901      	add	r1, sp, #4
    13de:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    13e0:	704c      	strb	r4, [r1, #1]
	config->run_in_standby     = false;
    13e2:	720c      	strb	r4, [r1, #8]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    13e4:	700f      	strb	r7, [r1, #0]
    13e6:	724d      	strb	r5, [r1, #9]
    13e8:	2003      	movs	r0, #3
    13ea:	4b1d      	ldr	r3, [pc, #116]	; (1460 <system_clock_init+0x170>)
    13ec:	4798      	blx	r3
    13ee:	2003      	movs	r0, #3
    13f0:	4b1c      	ldr	r3, [pc, #112]	; (1464 <system_clock_init+0x174>)
    13f2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    13f4:	2007      	movs	r0, #7
    13f6:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    13f8:	490e      	ldr	r1, [pc, #56]	; (1434 <system_clock_init+0x144>)
    13fa:	2210      	movs	r2, #16
    13fc:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    13fe:	421a      	tst	r2, r3
    1400:	d0fc      	beq.n	13fc <system_clock_init+0x10c>
	PM->CPUSEL.reg = (uint32_t)divider;
    1402:	4a19      	ldr	r2, [pc, #100]	; (1468 <system_clock_init+0x178>)
    1404:	2300      	movs	r3, #0
    1406:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1408:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    140a:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    140c:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    140e:	a901      	add	r1, sp, #4
    1410:	2201      	movs	r2, #1
    1412:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1414:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1416:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1418:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    141a:	3307      	adds	r3, #7
    141c:	700b      	strb	r3, [r1, #0]
    141e:	2000      	movs	r0, #0
    1420:	4b0f      	ldr	r3, [pc, #60]	; (1460 <system_clock_init+0x170>)
    1422:	4798      	blx	r3
    1424:	2000      	movs	r0, #0
    1426:	4b0f      	ldr	r3, [pc, #60]	; (1464 <system_clock_init+0x174>)
    1428:	4798      	blx	r3
#endif
}
    142a:	b011      	add	sp, #68	; 0x44
    142c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    142e:	3b20      	subs	r3, #32
    1430:	e7bb      	b.n	13aa <system_clock_init+0xba>
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	40000800 	.word	0x40000800
    1438:	41004000 	.word	0x41004000
    143c:	000016a5 	.word	0x000016a5
    1440:	00001111 	.word	0x00001111
    1444:	00001249 	.word	0x00001249
    1448:	00806024 	.word	0x00806024
    144c:	ff80ffff 	.word	0xff80ffff
    1450:	00001095 	.word	0x00001095
    1454:	000011c9 	.word	0x000011c9
    1458:	00001059 	.word	0x00001059
    145c:	0000146d 	.word	0x0000146d
    1460:	00001491 	.word	0x00001491
    1464:	00001549 	.word	0x00001549
    1468:	40000400 	.word	0x40000400

0000146c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    146c:	4a06      	ldr	r2, [pc, #24]	; (1488 <system_gclk_init+0x1c>)
    146e:	6993      	ldr	r3, [r2, #24]
    1470:	2108      	movs	r1, #8
    1472:	430b      	orrs	r3, r1
    1474:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1476:	2201      	movs	r2, #1
    1478:	4b04      	ldr	r3, [pc, #16]	; (148c <system_gclk_init+0x20>)
    147a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    147c:	0019      	movs	r1, r3
    147e:	780b      	ldrb	r3, [r1, #0]
    1480:	4213      	tst	r3, r2
    1482:	d1fc      	bne.n	147e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1484:	4770      	bx	lr
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	40000400 	.word	0x40000400
    148c:	40000c00 	.word	0x40000c00

00001490 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1490:	b570      	push	{r4, r5, r6, lr}
    1492:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1494:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1496:	780d      	ldrb	r5, [r1, #0]
    1498:	022d      	lsls	r5, r5, #8
    149a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    149c:	784b      	ldrb	r3, [r1, #1]
    149e:	2b00      	cmp	r3, #0
    14a0:	d002      	beq.n	14a8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    14a2:	2380      	movs	r3, #128	; 0x80
    14a4:	02db      	lsls	r3, r3, #11
    14a6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    14a8:	7a4b      	ldrb	r3, [r1, #9]
    14aa:	2b00      	cmp	r3, #0
    14ac:	d002      	beq.n	14b4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    14ae:	2380      	movs	r3, #128	; 0x80
    14b0:	031b      	lsls	r3, r3, #12
    14b2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    14b4:	6848      	ldr	r0, [r1, #4]
    14b6:	2801      	cmp	r0, #1
    14b8:	d910      	bls.n	14dc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    14ba:	1e43      	subs	r3, r0, #1
    14bc:	4218      	tst	r0, r3
    14be:	d134      	bne.n	152a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    14c0:	2802      	cmp	r0, #2
    14c2:	d930      	bls.n	1526 <system_gclk_gen_set_config+0x96>
    14c4:	2302      	movs	r3, #2
    14c6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    14c8:	3201      	adds	r2, #1
						mask <<= 1) {
    14ca:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    14cc:	4298      	cmp	r0, r3
    14ce:	d8fb      	bhi.n	14c8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    14d0:	0212      	lsls	r2, r2, #8
    14d2:	4332      	orrs	r2, r6
    14d4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    14d6:	2380      	movs	r3, #128	; 0x80
    14d8:	035b      	lsls	r3, r3, #13
    14da:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    14dc:	7a0b      	ldrb	r3, [r1, #8]
    14de:	2b00      	cmp	r3, #0
    14e0:	d002      	beq.n	14e8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    14e2:	2380      	movs	r3, #128	; 0x80
    14e4:	039b      	lsls	r3, r3, #14
    14e6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14e8:	4a13      	ldr	r2, [pc, #76]	; (1538 <system_gclk_gen_set_config+0xa8>)
    14ea:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    14ec:	b25b      	sxtb	r3, r3
    14ee:	2b00      	cmp	r3, #0
    14f0:	dbfb      	blt.n	14ea <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    14f2:	4b12      	ldr	r3, [pc, #72]	; (153c <system_gclk_gen_set_config+0xac>)
    14f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    14f6:	4b12      	ldr	r3, [pc, #72]	; (1540 <system_gclk_gen_set_config+0xb0>)
    14f8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14fa:	4a0f      	ldr	r2, [pc, #60]	; (1538 <system_gclk_gen_set_config+0xa8>)
    14fc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    14fe:	b25b      	sxtb	r3, r3
    1500:	2b00      	cmp	r3, #0
    1502:	dbfb      	blt.n	14fc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1504:	4b0c      	ldr	r3, [pc, #48]	; (1538 <system_gclk_gen_set_config+0xa8>)
    1506:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1508:	001a      	movs	r2, r3
    150a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    150c:	b25b      	sxtb	r3, r3
    150e:	2b00      	cmp	r3, #0
    1510:	dbfb      	blt.n	150a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1512:	4a09      	ldr	r2, [pc, #36]	; (1538 <system_gclk_gen_set_config+0xa8>)
    1514:	6853      	ldr	r3, [r2, #4]
    1516:	2180      	movs	r1, #128	; 0x80
    1518:	0249      	lsls	r1, r1, #9
    151a:	400b      	ands	r3, r1
    151c:	431d      	orrs	r5, r3
    151e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1520:	4b08      	ldr	r3, [pc, #32]	; (1544 <system_gclk_gen_set_config+0xb4>)
    1522:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1524:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1526:	2200      	movs	r2, #0
    1528:	e7d2      	b.n	14d0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    152a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    152c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    152e:	2380      	movs	r3, #128	; 0x80
    1530:	029b      	lsls	r3, r3, #10
    1532:	431d      	orrs	r5, r3
    1534:	e7d2      	b.n	14dc <system_gclk_gen_set_config+0x4c>
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	40000c00 	.word	0x40000c00
    153c:	00000181 	.word	0x00000181
    1540:	40000c08 	.word	0x40000c08
    1544:	000001c1 	.word	0x000001c1

00001548 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1548:	b510      	push	{r4, lr}
    154a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    154c:	4a0b      	ldr	r2, [pc, #44]	; (157c <system_gclk_gen_enable+0x34>)
    154e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1550:	b25b      	sxtb	r3, r3
    1552:	2b00      	cmp	r3, #0
    1554:	dbfb      	blt.n	154e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1556:	4b0a      	ldr	r3, [pc, #40]	; (1580 <system_gclk_gen_enable+0x38>)
    1558:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    155a:	4b0a      	ldr	r3, [pc, #40]	; (1584 <system_gclk_gen_enable+0x3c>)
    155c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    155e:	4a07      	ldr	r2, [pc, #28]	; (157c <system_gclk_gen_enable+0x34>)
    1560:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1562:	b25b      	sxtb	r3, r3
    1564:	2b00      	cmp	r3, #0
    1566:	dbfb      	blt.n	1560 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1568:	4a04      	ldr	r2, [pc, #16]	; (157c <system_gclk_gen_enable+0x34>)
    156a:	6851      	ldr	r1, [r2, #4]
    156c:	2380      	movs	r3, #128	; 0x80
    156e:	025b      	lsls	r3, r3, #9
    1570:	430b      	orrs	r3, r1
    1572:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1574:	4b04      	ldr	r3, [pc, #16]	; (1588 <system_gclk_gen_enable+0x40>)
    1576:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1578:	bd10      	pop	{r4, pc}
    157a:	46c0      	nop			; (mov r8, r8)
    157c:	40000c00 	.word	0x40000c00
    1580:	00000181 	.word	0x00000181
    1584:	40000c04 	.word	0x40000c04
    1588:	000001c1 	.word	0x000001c1

0000158c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    158c:	b570      	push	{r4, r5, r6, lr}
    158e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1590:	4a1a      	ldr	r2, [pc, #104]	; (15fc <system_gclk_gen_get_hz+0x70>)
    1592:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1594:	b25b      	sxtb	r3, r3
    1596:	2b00      	cmp	r3, #0
    1598:	dbfb      	blt.n	1592 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    159a:	4b19      	ldr	r3, [pc, #100]	; (1600 <system_gclk_gen_get_hz+0x74>)
    159c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    159e:	4b19      	ldr	r3, [pc, #100]	; (1604 <system_gclk_gen_get_hz+0x78>)
    15a0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15a2:	4a16      	ldr	r2, [pc, #88]	; (15fc <system_gclk_gen_get_hz+0x70>)
    15a4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    15a6:	b25b      	sxtb	r3, r3
    15a8:	2b00      	cmp	r3, #0
    15aa:	dbfb      	blt.n	15a4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    15ac:	4e13      	ldr	r6, [pc, #76]	; (15fc <system_gclk_gen_get_hz+0x70>)
    15ae:	6870      	ldr	r0, [r6, #4]
    15b0:	04c0      	lsls	r0, r0, #19
    15b2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    15b4:	4b14      	ldr	r3, [pc, #80]	; (1608 <system_gclk_gen_get_hz+0x7c>)
    15b6:	4798      	blx	r3
    15b8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15ba:	4b12      	ldr	r3, [pc, #72]	; (1604 <system_gclk_gen_get_hz+0x78>)
    15bc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    15be:	6876      	ldr	r6, [r6, #4]
    15c0:	02f6      	lsls	r6, r6, #11
    15c2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15c4:	4b11      	ldr	r3, [pc, #68]	; (160c <system_gclk_gen_get_hz+0x80>)
    15c6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15c8:	4a0c      	ldr	r2, [pc, #48]	; (15fc <system_gclk_gen_get_hz+0x70>)
    15ca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    15cc:	b25b      	sxtb	r3, r3
    15ce:	2b00      	cmp	r3, #0
    15d0:	dbfb      	blt.n	15ca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    15d2:	4b0a      	ldr	r3, [pc, #40]	; (15fc <system_gclk_gen_get_hz+0x70>)
    15d4:	689c      	ldr	r4, [r3, #8]
    15d6:	0224      	lsls	r4, r4, #8
    15d8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    15da:	4b0d      	ldr	r3, [pc, #52]	; (1610 <system_gclk_gen_get_hz+0x84>)
    15dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    15de:	2e00      	cmp	r6, #0
    15e0:	d107      	bne.n	15f2 <system_gclk_gen_get_hz+0x66>
    15e2:	2c01      	cmp	r4, #1
    15e4:	d907      	bls.n	15f6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    15e6:	0021      	movs	r1, r4
    15e8:	0028      	movs	r0, r5
    15ea:	4b0a      	ldr	r3, [pc, #40]	; (1614 <system_gclk_gen_get_hz+0x88>)
    15ec:	4798      	blx	r3
    15ee:	0005      	movs	r5, r0
    15f0:	e001      	b.n	15f6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    15f2:	3401      	adds	r4, #1
    15f4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    15f6:	0028      	movs	r0, r5
    15f8:	bd70      	pop	{r4, r5, r6, pc}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	40000c00 	.word	0x40000c00
    1600:	00000181 	.word	0x00000181
    1604:	40000c04 	.word	0x40000c04
    1608:	00000fc9 	.word	0x00000fc9
    160c:	40000c08 	.word	0x40000c08
    1610:	000001c1 	.word	0x000001c1
    1614:	000020a9 	.word	0x000020a9

00001618 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1618:	b510      	push	{r4, lr}
    161a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    161c:	4b06      	ldr	r3, [pc, #24]	; (1638 <system_gclk_chan_enable+0x20>)
    161e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1620:	4b06      	ldr	r3, [pc, #24]	; (163c <system_gclk_chan_enable+0x24>)
    1622:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1624:	4a06      	ldr	r2, [pc, #24]	; (1640 <system_gclk_chan_enable+0x28>)
    1626:	8853      	ldrh	r3, [r2, #2]
    1628:	2180      	movs	r1, #128	; 0x80
    162a:	01c9      	lsls	r1, r1, #7
    162c:	430b      	orrs	r3, r1
    162e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1630:	4b04      	ldr	r3, [pc, #16]	; (1644 <system_gclk_chan_enable+0x2c>)
    1632:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1634:	bd10      	pop	{r4, pc}
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	00000181 	.word	0x00000181
    163c:	40000c02 	.word	0x40000c02
    1640:	40000c00 	.word	0x40000c00
    1644:	000001c1 	.word	0x000001c1

00001648 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1648:	b510      	push	{r4, lr}
    164a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    164c:	4b0f      	ldr	r3, [pc, #60]	; (168c <system_gclk_chan_disable+0x44>)
    164e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1650:	4b0f      	ldr	r3, [pc, #60]	; (1690 <system_gclk_chan_disable+0x48>)
    1652:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1654:	4a0f      	ldr	r2, [pc, #60]	; (1694 <system_gclk_chan_disable+0x4c>)
    1656:	8853      	ldrh	r3, [r2, #2]
    1658:	051b      	lsls	r3, r3, #20
    165a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    165c:	8853      	ldrh	r3, [r2, #2]
    165e:	490e      	ldr	r1, [pc, #56]	; (1698 <system_gclk_chan_disable+0x50>)
    1660:	400b      	ands	r3, r1
    1662:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1664:	8853      	ldrh	r3, [r2, #2]
    1666:	490d      	ldr	r1, [pc, #52]	; (169c <system_gclk_chan_disable+0x54>)
    1668:	400b      	ands	r3, r1
    166a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    166c:	0011      	movs	r1, r2
    166e:	2280      	movs	r2, #128	; 0x80
    1670:	01d2      	lsls	r2, r2, #7
    1672:	884b      	ldrh	r3, [r1, #2]
    1674:	4213      	tst	r3, r2
    1676:	d1fc      	bne.n	1672 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1678:	4906      	ldr	r1, [pc, #24]	; (1694 <system_gclk_chan_disable+0x4c>)
    167a:	884a      	ldrh	r2, [r1, #2]
    167c:	0203      	lsls	r3, r0, #8
    167e:	4806      	ldr	r0, [pc, #24]	; (1698 <system_gclk_chan_disable+0x50>)
    1680:	4002      	ands	r2, r0
    1682:	4313      	orrs	r3, r2
    1684:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1686:	4b06      	ldr	r3, [pc, #24]	; (16a0 <system_gclk_chan_disable+0x58>)
    1688:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    168a:	bd10      	pop	{r4, pc}
    168c:	00000181 	.word	0x00000181
    1690:	40000c02 	.word	0x40000c02
    1694:	40000c00 	.word	0x40000c00
    1698:	fffff0ff 	.word	0xfffff0ff
    169c:	ffffbfff 	.word	0xffffbfff
    16a0:	000001c1 	.word	0x000001c1

000016a4 <system_gclk_chan_set_config>:
{
    16a4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    16a6:	780c      	ldrb	r4, [r1, #0]
    16a8:	0224      	lsls	r4, r4, #8
    16aa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    16ac:	4b02      	ldr	r3, [pc, #8]	; (16b8 <system_gclk_chan_set_config+0x14>)
    16ae:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    16b0:	b2a4      	uxth	r4, r4
    16b2:	4b02      	ldr	r3, [pc, #8]	; (16bc <system_gclk_chan_set_config+0x18>)
    16b4:	805c      	strh	r4, [r3, #2]
}
    16b6:	bd10      	pop	{r4, pc}
    16b8:	00001649 	.word	0x00001649
    16bc:	40000c00 	.word	0x40000c00

000016c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    16c0:	b510      	push	{r4, lr}
    16c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16c4:	4b06      	ldr	r3, [pc, #24]	; (16e0 <system_gclk_chan_get_hz+0x20>)
    16c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16c8:	4b06      	ldr	r3, [pc, #24]	; (16e4 <system_gclk_chan_get_hz+0x24>)
    16ca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    16cc:	4b06      	ldr	r3, [pc, #24]	; (16e8 <system_gclk_chan_get_hz+0x28>)
    16ce:	885c      	ldrh	r4, [r3, #2]
    16d0:	0524      	lsls	r4, r4, #20
    16d2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    16d4:	4b05      	ldr	r3, [pc, #20]	; (16ec <system_gclk_chan_get_hz+0x2c>)
    16d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    16d8:	0020      	movs	r0, r4
    16da:	4b05      	ldr	r3, [pc, #20]	; (16f0 <system_gclk_chan_get_hz+0x30>)
    16dc:	4798      	blx	r3
}
    16de:	bd10      	pop	{r4, pc}
    16e0:	00000181 	.word	0x00000181
    16e4:	40000c02 	.word	0x40000c02
    16e8:	40000c00 	.word	0x40000c00
    16ec:	000001c1 	.word	0x000001c1
    16f0:	0000158d 	.word	0x0000158d

000016f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    16f4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    16f6:	78d3      	ldrb	r3, [r2, #3]
    16f8:	2b00      	cmp	r3, #0
    16fa:	d135      	bne.n	1768 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    16fc:	7813      	ldrb	r3, [r2, #0]
    16fe:	2b80      	cmp	r3, #128	; 0x80
    1700:	d029      	beq.n	1756 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1702:	061b      	lsls	r3, r3, #24
    1704:	2480      	movs	r4, #128	; 0x80
    1706:	0264      	lsls	r4, r4, #9
    1708:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    170a:	7854      	ldrb	r4, [r2, #1]
    170c:	2502      	movs	r5, #2
    170e:	43ac      	bics	r4, r5
    1710:	d106      	bne.n	1720 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1712:	7894      	ldrb	r4, [r2, #2]
    1714:	2c00      	cmp	r4, #0
    1716:	d120      	bne.n	175a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1718:	2480      	movs	r4, #128	; 0x80
    171a:	02a4      	lsls	r4, r4, #10
    171c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    171e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1720:	7854      	ldrb	r4, [r2, #1]
    1722:	3c01      	subs	r4, #1
    1724:	2c01      	cmp	r4, #1
    1726:	d91c      	bls.n	1762 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1728:	040d      	lsls	r5, r1, #16
    172a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    172c:	24a0      	movs	r4, #160	; 0xa0
    172e:	05e4      	lsls	r4, r4, #23
    1730:	432c      	orrs	r4, r5
    1732:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1734:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1736:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1738:	24d0      	movs	r4, #208	; 0xd0
    173a:	0624      	lsls	r4, r4, #24
    173c:	432c      	orrs	r4, r5
    173e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1740:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1742:	78d4      	ldrb	r4, [r2, #3]
    1744:	2c00      	cmp	r4, #0
    1746:	d122      	bne.n	178e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1748:	035b      	lsls	r3, r3, #13
    174a:	d51c      	bpl.n	1786 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    174c:	7893      	ldrb	r3, [r2, #2]
    174e:	2b01      	cmp	r3, #1
    1750:	d01e      	beq.n	1790 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1752:	6141      	str	r1, [r0, #20]
    1754:	e017      	b.n	1786 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1756:	2300      	movs	r3, #0
    1758:	e7d7      	b.n	170a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    175a:	24c0      	movs	r4, #192	; 0xc0
    175c:	02e4      	lsls	r4, r4, #11
    175e:	4323      	orrs	r3, r4
    1760:	e7dd      	b.n	171e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1762:	4c0d      	ldr	r4, [pc, #52]	; (1798 <_system_pinmux_config+0xa4>)
    1764:	4023      	ands	r3, r4
    1766:	e7df      	b.n	1728 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1768:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    176a:	040c      	lsls	r4, r1, #16
    176c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    176e:	23a0      	movs	r3, #160	; 0xa0
    1770:	05db      	lsls	r3, r3, #23
    1772:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1774:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1776:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1778:	23d0      	movs	r3, #208	; 0xd0
    177a:	061b      	lsls	r3, r3, #24
    177c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    177e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1780:	78d3      	ldrb	r3, [r2, #3]
    1782:	2b00      	cmp	r3, #0
    1784:	d103      	bne.n	178e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1786:	7853      	ldrb	r3, [r2, #1]
    1788:	3b01      	subs	r3, #1
    178a:	2b01      	cmp	r3, #1
    178c:	d902      	bls.n	1794 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    178e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1790:	6181      	str	r1, [r0, #24]
    1792:	e7f8      	b.n	1786 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1794:	6081      	str	r1, [r0, #8]
}
    1796:	e7fa      	b.n	178e <_system_pinmux_config+0x9a>
    1798:	fffbffff 	.word	0xfffbffff

0000179c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    179c:	b510      	push	{r4, lr}
    179e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17a0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    17a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17a4:	2900      	cmp	r1, #0
    17a6:	d104      	bne.n	17b2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    17a8:	0943      	lsrs	r3, r0, #5
    17aa:	01db      	lsls	r3, r3, #7
    17ac:	4905      	ldr	r1, [pc, #20]	; (17c4 <system_pinmux_pin_set_config+0x28>)
    17ae:	468c      	mov	ip, r1
    17b0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    17b2:	241f      	movs	r4, #31
    17b4:	4020      	ands	r0, r4
    17b6:	2101      	movs	r1, #1
    17b8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    17ba:	0018      	movs	r0, r3
    17bc:	4b02      	ldr	r3, [pc, #8]	; (17c8 <system_pinmux_pin_set_config+0x2c>)
    17be:	4798      	blx	r3
}
    17c0:	bd10      	pop	{r4, pc}
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	41004400 	.word	0x41004400
    17c8:	000016f5 	.word	0x000016f5

000017cc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    17cc:	4770      	bx	lr
	...

000017d0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    17d0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    17d2:	4b05      	ldr	r3, [pc, #20]	; (17e8 <system_init+0x18>)
    17d4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    17d6:	4b05      	ldr	r3, [pc, #20]	; (17ec <system_init+0x1c>)
    17d8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    17da:	4b05      	ldr	r3, [pc, #20]	; (17f0 <system_init+0x20>)
    17dc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <system_init+0x24>)
    17e0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    17e2:	4b05      	ldr	r3, [pc, #20]	; (17f8 <system_init+0x28>)
    17e4:	4798      	blx	r3
}
    17e6:	bd10      	pop	{r4, pc}
    17e8:	000012f1 	.word	0x000012f1
    17ec:	000001f1 	.word	0x000001f1
    17f0:	00000265 	.word	0x00000265
    17f4:	000003d9 	.word	0x000003d9
    17f8:	000017cd 	.word	0x000017cd

000017fc <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    17fc:	1c93      	adds	r3, r2, #2
    17fe:	009b      	lsls	r3, r3, #2
    1800:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1802:	2a02      	cmp	r2, #2
    1804:	d009      	beq.n	181a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1806:	2a03      	cmp	r2, #3
    1808:	d00c      	beq.n	1824 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    180a:	2301      	movs	r3, #1
    180c:	4093      	lsls	r3, r2
    180e:	001a      	movs	r2, r3
    1810:	7e03      	ldrb	r3, [r0, #24]
    1812:	4313      	orrs	r3, r2
    1814:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1816:	2000      	movs	r0, #0
    1818:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    181a:	7e03      	ldrb	r3, [r0, #24]
    181c:	2210      	movs	r2, #16
    181e:	4313      	orrs	r3, r2
    1820:	7603      	strb	r3, [r0, #24]
    1822:	e7f8      	b.n	1816 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1824:	7e03      	ldrb	r3, [r0, #24]
    1826:	2220      	movs	r2, #32
    1828:	4313      	orrs	r3, r2
    182a:	7603      	strb	r3, [r0, #24]
    182c:	e7f3      	b.n	1816 <tc_register_callback+0x1a>
	...

00001830 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1830:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1832:	0080      	lsls	r0, r0, #2
    1834:	4b16      	ldr	r3, [pc, #88]	; (1890 <_tc_interrupt_handler+0x60>)
    1836:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1838:	6823      	ldr	r3, [r4, #0]
    183a:	7b9d      	ldrb	r5, [r3, #14]
    183c:	7e22      	ldrb	r2, [r4, #24]
    183e:	7e63      	ldrb	r3, [r4, #25]
    1840:	4013      	ands	r3, r2
    1842:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1844:	07eb      	lsls	r3, r5, #31
    1846:	d406      	bmi.n	1856 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1848:	07ab      	lsls	r3, r5, #30
    184a:	d40b      	bmi.n	1864 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    184c:	06eb      	lsls	r3, r5, #27
    184e:	d410      	bmi.n	1872 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1850:	06ab      	lsls	r3, r5, #26
    1852:	d415      	bmi.n	1880 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1854:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1856:	0020      	movs	r0, r4
    1858:	68a3      	ldr	r3, [r4, #8]
    185a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    185c:	2301      	movs	r3, #1
    185e:	6822      	ldr	r2, [r4, #0]
    1860:	7393      	strb	r3, [r2, #14]
    1862:	e7f1      	b.n	1848 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1864:	0020      	movs	r0, r4
    1866:	68e3      	ldr	r3, [r4, #12]
    1868:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    186a:	2302      	movs	r3, #2
    186c:	6822      	ldr	r2, [r4, #0]
    186e:	7393      	strb	r3, [r2, #14]
    1870:	e7ec      	b.n	184c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1872:	0020      	movs	r0, r4
    1874:	6923      	ldr	r3, [r4, #16]
    1876:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1878:	2310      	movs	r3, #16
    187a:	6822      	ldr	r2, [r4, #0]
    187c:	7393      	strb	r3, [r2, #14]
    187e:	e7e7      	b.n	1850 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1880:	0020      	movs	r0, r4
    1882:	6963      	ldr	r3, [r4, #20]
    1884:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1886:	6823      	ldr	r3, [r4, #0]
    1888:	2220      	movs	r2, #32
    188a:	739a      	strb	r2, [r3, #14]
}
    188c:	e7e2      	b.n	1854 <_tc_interrupt_handler+0x24>
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	20000150 	.word	0x20000150

00001894 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1894:	b510      	push	{r4, lr}
    1896:	2000      	movs	r0, #0
    1898:	4b01      	ldr	r3, [pc, #4]	; (18a0 <TC3_Handler+0xc>)
    189a:	4798      	blx	r3
    189c:	bd10      	pop	{r4, pc}
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	00001831 	.word	0x00001831

000018a4 <TC4_Handler>:
    18a4:	b510      	push	{r4, lr}
    18a6:	2001      	movs	r0, #1
    18a8:	4b01      	ldr	r3, [pc, #4]	; (18b0 <TC4_Handler+0xc>)
    18aa:	4798      	blx	r3
    18ac:	bd10      	pop	{r4, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	00001831 	.word	0x00001831

000018b4 <TC5_Handler>:
    18b4:	b510      	push	{r4, lr}
    18b6:	2002      	movs	r0, #2
    18b8:	4b01      	ldr	r3, [pc, #4]	; (18c0 <TC5_Handler+0xc>)
    18ba:	4798      	blx	r3
    18bc:	bd10      	pop	{r4, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	00001831 	.word	0x00001831

000018c4 <TC6_Handler>:
    18c4:	b510      	push	{r4, lr}
    18c6:	2003      	movs	r0, #3
    18c8:	4b01      	ldr	r3, [pc, #4]	; (18d0 <TC6_Handler+0xc>)
    18ca:	4798      	blx	r3
    18cc:	bd10      	pop	{r4, pc}
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	00001831 	.word	0x00001831

000018d4 <TC7_Handler>:
    18d4:	b510      	push	{r4, lr}
    18d6:	2004      	movs	r0, #4
    18d8:	4b01      	ldr	r3, [pc, #4]	; (18e0 <TC7_Handler+0xc>)
    18da:	4798      	blx	r3
    18dc:	bd10      	pop	{r4, pc}
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	00001831 	.word	0x00001831

000018e4 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    18e4:	b530      	push	{r4, r5, lr}
    18e6:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    18e8:	a901      	add	r1, sp, #4
    18ea:	4b0c      	ldr	r3, [pc, #48]	; (191c <_tc_get_inst_index+0x38>)
    18ec:	000a      	movs	r2, r1
    18ee:	cb32      	ldmia	r3!, {r1, r4, r5}
    18f0:	c232      	stmia	r2!, {r1, r4, r5}
    18f2:	cb12      	ldmia	r3!, {r1, r4}
    18f4:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    18f6:	9b01      	ldr	r3, [sp, #4]
    18f8:	4298      	cmp	r0, r3
    18fa:	d00b      	beq.n	1914 <_tc_get_inst_index+0x30>
    18fc:	2301      	movs	r3, #1
    18fe:	a901      	add	r1, sp, #4
    1900:	009a      	lsls	r2, r3, #2
    1902:	5852      	ldr	r2, [r2, r1]
    1904:	4282      	cmp	r2, r0
    1906:	d006      	beq.n	1916 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1908:	3301      	adds	r3, #1
    190a:	2b05      	cmp	r3, #5
    190c:	d1f8      	bne.n	1900 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    190e:	2000      	movs	r0, #0
}
    1910:	b007      	add	sp, #28
    1912:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1914:	2300      	movs	r3, #0
			return i;
    1916:	b2d8      	uxtb	r0, r3
    1918:	e7fa      	b.n	1910 <_tc_get_inst_index+0x2c>
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	000038e0 	.word	0x000038e0

00001920 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1920:	b5f0      	push	{r4, r5, r6, r7, lr}
    1922:	b089      	sub	sp, #36	; 0x24
    1924:	0004      	movs	r4, r0
    1926:	000d      	movs	r5, r1
    1928:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    192a:	0008      	movs	r0, r1
    192c:	4b85      	ldr	r3, [pc, #532]	; (1b44 <tc_init+0x224>)
    192e:	4798      	blx	r3
    1930:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1932:	ab06      	add	r3, sp, #24
    1934:	221b      	movs	r2, #27
    1936:	701a      	strb	r2, [r3, #0]
    1938:	3201      	adds	r2, #1
    193a:	705a      	strb	r2, [r3, #1]
    193c:	709a      	strb	r2, [r3, #2]
    193e:	3201      	adds	r2, #1
    1940:	70da      	strb	r2, [r3, #3]
    1942:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1944:	aa03      	add	r2, sp, #12
    1946:	4b80      	ldr	r3, [pc, #512]	; (1b48 <tc_init+0x228>)
    1948:	3314      	adds	r3, #20
    194a:	cb03      	ldmia	r3!, {r0, r1}
    194c:	c203      	stmia	r2!, {r0, r1}
    194e:	881b      	ldrh	r3, [r3, #0]
    1950:	8013      	strh	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1952:	2300      	movs	r3, #0
    1954:	60a3      	str	r3, [r4, #8]
    1956:	60e3      	str	r3, [r4, #12]
    1958:	6123      	str	r3, [r4, #16]
    195a:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    195c:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    195e:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1960:	00ba      	lsls	r2, r7, #2
    1962:	4b7a      	ldr	r3, [pc, #488]	; (1b4c <tc_init+0x22c>)
    1964:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1966:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1968:	78b3      	ldrb	r3, [r6, #2]
    196a:	2b08      	cmp	r3, #8
    196c:	d006      	beq.n	197c <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    196e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1970:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1972:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1974:	07db      	lsls	r3, r3, #31
    1976:	d505      	bpl.n	1984 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1978:	b009      	add	sp, #36	; 0x24
    197a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    197c:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    197e:	07fa      	lsls	r2, r7, #31
    1980:	d5fa      	bpl.n	1978 <tc_init+0x58>
    1982:	e7f4      	b.n	196e <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1984:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1986:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1988:	06db      	lsls	r3, r3, #27
    198a:	d4f5      	bmi.n	1978 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    198c:	882b      	ldrh	r3, [r5, #0]
    198e:	079b      	lsls	r3, r3, #30
    1990:	d4f2      	bmi.n	1978 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    1992:	7c33      	ldrb	r3, [r6, #16]
    1994:	2b00      	cmp	r3, #0
    1996:	d179      	bne.n	1a8c <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    1998:	7f33      	ldrb	r3, [r6, #28]
    199a:	2b00      	cmp	r3, #0
    199c:	d000      	beq.n	19a0 <tc_init+0x80>
    199e:	e081      	b.n	1aa4 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    19a0:	496b      	ldr	r1, [pc, #428]	; (1b50 <tc_init+0x230>)
    19a2:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    19a4:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    19a6:	ab03      	add	r3, sp, #12
    19a8:	5ad3      	ldrh	r3, [r2, r3]
    19aa:	4303      	orrs	r3, r0
    19ac:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    19ae:	78b3      	ldrb	r3, [r6, #2]
    19b0:	2b08      	cmp	r3, #8
    19b2:	d100      	bne.n	19b6 <tc_init+0x96>
    19b4:	e086      	b.n	1ac4 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    19b6:	a901      	add	r1, sp, #4
    19b8:	7833      	ldrb	r3, [r6, #0]
    19ba:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    19bc:	ab06      	add	r3, sp, #24
    19be:	5ddf      	ldrb	r7, [r3, r7]
    19c0:	0038      	movs	r0, r7
    19c2:	4b64      	ldr	r3, [pc, #400]	; (1b54 <tc_init+0x234>)
    19c4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    19c6:	0038      	movs	r0, r7
    19c8:	4b63      	ldr	r3, [pc, #396]	; (1b58 <tc_init+0x238>)
    19ca:	4798      	blx	r3
	ctrla_tmp =
    19cc:	8931      	ldrh	r1, [r6, #8]
    19ce:	88b3      	ldrh	r3, [r6, #4]
    19d0:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    19d2:	78b1      	ldrb	r1, [r6, #2]
    19d4:	79b2      	ldrb	r2, [r6, #6]
    19d6:	4311      	orrs	r1, r2
	ctrla_tmp =
    19d8:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    19da:	7873      	ldrb	r3, [r6, #1]
    19dc:	2b00      	cmp	r3, #0
    19de:	d002      	beq.n	19e6 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    19e0:	2380      	movs	r3, #128	; 0x80
    19e2:	011b      	lsls	r3, r3, #4
    19e4:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    19e6:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    19e8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    19ea:	b25b      	sxtb	r3, r3
    19ec:	2b00      	cmp	r3, #0
    19ee:	dbfb      	blt.n	19e8 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    19f0:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    19f2:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    19f4:	1e4b      	subs	r3, r1, #1
    19f6:	4199      	sbcs	r1, r3
    19f8:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    19fa:	7bb3      	ldrb	r3, [r6, #14]
    19fc:	2b00      	cmp	r3, #0
    19fe:	d001      	beq.n	1a04 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1a00:	2301      	movs	r3, #1
    1a02:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a04:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a06:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a08:	b25b      	sxtb	r3, r3
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	dbfb      	blt.n	1a06 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1a0e:	23ff      	movs	r3, #255	; 0xff
    1a10:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1a12:	2900      	cmp	r1, #0
    1a14:	d005      	beq.n	1a22 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a16:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a18:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1a1a:	b25b      	sxtb	r3, r3
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	dbfb      	blt.n	1a18 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1a20:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1a22:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1a24:	7af3      	ldrb	r3, [r6, #11]
    1a26:	2b00      	cmp	r3, #0
    1a28:	d001      	beq.n	1a2e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1a2a:	2310      	movs	r3, #16
    1a2c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1a2e:	7b33      	ldrb	r3, [r6, #12]
    1a30:	2b00      	cmp	r3, #0
    1a32:	d001      	beq.n	1a38 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1a34:	2320      	movs	r3, #32
    1a36:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a38:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a3a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a3c:	b25b      	sxtb	r3, r3
    1a3e:	2b00      	cmp	r3, #0
    1a40:	dbfb      	blt.n	1a3a <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1a42:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a44:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a46:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a48:	b25b      	sxtb	r3, r3
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	dbfb      	blt.n	1a46 <tc_init+0x126>
	switch (module_inst->counter_size) {
    1a4e:	7923      	ldrb	r3, [r4, #4]
    1a50:	2b04      	cmp	r3, #4
    1a52:	d03f      	beq.n	1ad4 <tc_init+0x1b4>
    1a54:	2b08      	cmp	r3, #8
    1a56:	d05e      	beq.n	1b16 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    1a58:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d000      	beq.n	1a60 <tc_init+0x140>
    1a5e:	e78b      	b.n	1978 <tc_init+0x58>
    1a60:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1a62:	b25b      	sxtb	r3, r3
    1a64:	2b00      	cmp	r3, #0
    1a66:	dbfb      	blt.n	1a60 <tc_init+0x140>
				= config->counter_16_bit.value;
    1a68:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1a6a:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a6c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a6e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1a70:	b25b      	sxtb	r3, r3
    1a72:	2b00      	cmp	r3, #0
    1a74:	dbfb      	blt.n	1a6e <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    1a76:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1a78:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a7a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a7c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1a7e:	b25b      	sxtb	r3, r3
    1a80:	2b00      	cmp	r3, #0
    1a82:	dbfb      	blt.n	1a7c <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    1a84:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1a86:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1a88:	2000      	movs	r0, #0
    1a8a:	e775      	b.n	1978 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a8c:	a902      	add	r1, sp, #8
    1a8e:	2301      	movs	r3, #1
    1a90:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1a92:	2200      	movs	r2, #0
    1a94:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1a96:	7e32      	ldrb	r2, [r6, #24]
    1a98:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1a9a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1a9c:	7d30      	ldrb	r0, [r6, #20]
    1a9e:	4b2f      	ldr	r3, [pc, #188]	; (1b5c <tc_init+0x23c>)
    1aa0:	4798      	blx	r3
    1aa2:	e779      	b.n	1998 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1aa4:	a902      	add	r1, sp, #8
    1aa6:	2301      	movs	r3, #1
    1aa8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1aaa:	2200      	movs	r2, #0
    1aac:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1aae:	3224      	adds	r2, #36	; 0x24
    1ab0:	18b2      	adds	r2, r6, r2
    1ab2:	7812      	ldrb	r2, [r2, #0]
    1ab4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1ab6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1ab8:	331f      	adds	r3, #31
    1aba:	18f3      	adds	r3, r6, r3
    1abc:	7818      	ldrb	r0, [r3, #0]
    1abe:	4b27      	ldr	r3, [pc, #156]	; (1b5c <tc_init+0x23c>)
    1ac0:	4798      	blx	r3
    1ac2:	e76d      	b.n	19a0 <tc_init+0x80>
    1ac4:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1ac6:	1c7a      	adds	r2, r7, #1
    1ac8:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1aca:	ab03      	add	r3, sp, #12
    1acc:	5ad3      	ldrh	r3, [r2, r3]
    1ace:	4303      	orrs	r3, r0
    1ad0:	620b      	str	r3, [r1, #32]
    1ad2:	e770      	b.n	19b6 <tc_init+0x96>
    1ad4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ad6:	b25b      	sxtb	r3, r3
    1ad8:	2b00      	cmp	r3, #0
    1ada:	dbfb      	blt.n	1ad4 <tc_init+0x1b4>
					config->counter_8_bit.value;
    1adc:	2328      	movs	r3, #40	; 0x28
    1ade:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1ae0:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ae2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ae4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ae6:	b25b      	sxtb	r3, r3
    1ae8:	2b00      	cmp	r3, #0
    1aea:	dbfb      	blt.n	1ae4 <tc_init+0x1c4>
					config->counter_8_bit.period;
    1aec:	2329      	movs	r3, #41	; 0x29
    1aee:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1af0:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1af2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1af4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1af6:	b25b      	sxtb	r3, r3
    1af8:	2b00      	cmp	r3, #0
    1afa:	dbfb      	blt.n	1af4 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    1afc:	232a      	movs	r3, #42	; 0x2a
    1afe:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1b00:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b02:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b04:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b06:	b25b      	sxtb	r3, r3
    1b08:	2b00      	cmp	r3, #0
    1b0a:	dbfb      	blt.n	1b04 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    1b0c:	232b      	movs	r3, #43	; 0x2b
    1b0e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1b10:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1b12:	2000      	movs	r0, #0
    1b14:	e730      	b.n	1978 <tc_init+0x58>
    1b16:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b18:	b25b      	sxtb	r3, r3
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	dbfb      	blt.n	1b16 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1b1e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b20:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b22:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b24:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b26:	b25b      	sxtb	r3, r3
    1b28:	2b00      	cmp	r3, #0
    1b2a:	dbfb      	blt.n	1b24 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1b2c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1b2e:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b30:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b32:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b34:	b25b      	sxtb	r3, r3
    1b36:	2b00      	cmp	r3, #0
    1b38:	dbfb      	blt.n	1b32 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1b3a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1b3c:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1b3e:	2000      	movs	r0, #0
    1b40:	e71a      	b.n	1978 <tc_init+0x58>
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	000018e5 	.word	0x000018e5
    1b48:	000038e0 	.word	0x000038e0
    1b4c:	20000150 	.word	0x20000150
    1b50:	40000400 	.word	0x40000400
    1b54:	000016a5 	.word	0x000016a5
    1b58:	00001619 	.word	0x00001619
    1b5c:	0000179d 	.word	0x0000179d

00001b60 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b60:	e7fe      	b.n	1b60 <Dummy_Handler>
	...

00001b64 <Reset_Handler>:
{
    1b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1b66:	4a2a      	ldr	r2, [pc, #168]	; (1c10 <Reset_Handler+0xac>)
    1b68:	4b2a      	ldr	r3, [pc, #168]	; (1c14 <Reset_Handler+0xb0>)
    1b6a:	429a      	cmp	r2, r3
    1b6c:	d011      	beq.n	1b92 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1b6e:	001a      	movs	r2, r3
    1b70:	4b29      	ldr	r3, [pc, #164]	; (1c18 <Reset_Handler+0xb4>)
    1b72:	429a      	cmp	r2, r3
    1b74:	d20d      	bcs.n	1b92 <Reset_Handler+0x2e>
    1b76:	4a29      	ldr	r2, [pc, #164]	; (1c1c <Reset_Handler+0xb8>)
    1b78:	3303      	adds	r3, #3
    1b7a:	1a9b      	subs	r3, r3, r2
    1b7c:	089b      	lsrs	r3, r3, #2
    1b7e:	3301      	adds	r3, #1
    1b80:	009b      	lsls	r3, r3, #2
    1b82:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b84:	4823      	ldr	r0, [pc, #140]	; (1c14 <Reset_Handler+0xb0>)
    1b86:	4922      	ldr	r1, [pc, #136]	; (1c10 <Reset_Handler+0xac>)
    1b88:	588c      	ldr	r4, [r1, r2]
    1b8a:	5084      	str	r4, [r0, r2]
    1b8c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1b8e:	429a      	cmp	r2, r3
    1b90:	d1fa      	bne.n	1b88 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1b92:	4a23      	ldr	r2, [pc, #140]	; (1c20 <Reset_Handler+0xbc>)
    1b94:	4b23      	ldr	r3, [pc, #140]	; (1c24 <Reset_Handler+0xc0>)
    1b96:	429a      	cmp	r2, r3
    1b98:	d20a      	bcs.n	1bb0 <Reset_Handler+0x4c>
    1b9a:	43d3      	mvns	r3, r2
    1b9c:	4921      	ldr	r1, [pc, #132]	; (1c24 <Reset_Handler+0xc0>)
    1b9e:	185b      	adds	r3, r3, r1
    1ba0:	2103      	movs	r1, #3
    1ba2:	438b      	bics	r3, r1
    1ba4:	3304      	adds	r3, #4
    1ba6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1ba8:	2100      	movs	r1, #0
    1baa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1bac:	4293      	cmp	r3, r2
    1bae:	d1fc      	bne.n	1baa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1bb0:	4a1d      	ldr	r2, [pc, #116]	; (1c28 <Reset_Handler+0xc4>)
    1bb2:	21ff      	movs	r1, #255	; 0xff
    1bb4:	4b1d      	ldr	r3, [pc, #116]	; (1c2c <Reset_Handler+0xc8>)
    1bb6:	438b      	bics	r3, r1
    1bb8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1bba:	39fd      	subs	r1, #253	; 0xfd
    1bbc:	2390      	movs	r3, #144	; 0x90
    1bbe:	005b      	lsls	r3, r3, #1
    1bc0:	4a1b      	ldr	r2, [pc, #108]	; (1c30 <Reset_Handler+0xcc>)
    1bc2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1bc4:	4a1b      	ldr	r2, [pc, #108]	; (1c34 <Reset_Handler+0xd0>)
    1bc6:	78d3      	ldrb	r3, [r2, #3]
    1bc8:	2503      	movs	r5, #3
    1bca:	43ab      	bics	r3, r5
    1bcc:	2402      	movs	r4, #2
    1bce:	4323      	orrs	r3, r4
    1bd0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1bd2:	78d3      	ldrb	r3, [r2, #3]
    1bd4:	270c      	movs	r7, #12
    1bd6:	43bb      	bics	r3, r7
    1bd8:	2608      	movs	r6, #8
    1bda:	4333      	orrs	r3, r6
    1bdc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1bde:	4b16      	ldr	r3, [pc, #88]	; (1c38 <Reset_Handler+0xd4>)
    1be0:	7b98      	ldrb	r0, [r3, #14]
    1be2:	2230      	movs	r2, #48	; 0x30
    1be4:	4390      	bics	r0, r2
    1be6:	2220      	movs	r2, #32
    1be8:	4310      	orrs	r0, r2
    1bea:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1bec:	7b99      	ldrb	r1, [r3, #14]
    1bee:	43b9      	bics	r1, r7
    1bf0:	4331      	orrs	r1, r6
    1bf2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1bf4:	7b9a      	ldrb	r2, [r3, #14]
    1bf6:	43aa      	bics	r2, r5
    1bf8:	4322      	orrs	r2, r4
    1bfa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1bfc:	4a0f      	ldr	r2, [pc, #60]	; (1c3c <Reset_Handler+0xd8>)
    1bfe:	6853      	ldr	r3, [r2, #4]
    1c00:	2180      	movs	r1, #128	; 0x80
    1c02:	430b      	orrs	r3, r1
    1c04:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1c06:	4b0e      	ldr	r3, [pc, #56]	; (1c40 <Reset_Handler+0xdc>)
    1c08:	4798      	blx	r3
        main();
    1c0a:	4b0e      	ldr	r3, [pc, #56]	; (1c44 <Reset_Handler+0xe0>)
    1c0c:	4798      	blx	r3
    1c0e:	e7fe      	b.n	1c0e <Reset_Handler+0xaa>
    1c10:	000039ac 	.word	0x000039ac
    1c14:	20000000 	.word	0x20000000
    1c18:	20000090 	.word	0x20000090
    1c1c:	20000004 	.word	0x20000004
    1c20:	20000090 	.word	0x20000090
    1c24:	2000020c 	.word	0x2000020c
    1c28:	e000ed00 	.word	0xe000ed00
    1c2c:	00000000 	.word	0x00000000
    1c30:	41007000 	.word	0x41007000
    1c34:	41005000 	.word	0x41005000
    1c38:	41004800 	.word	0x41004800
    1c3c:	41004000 	.word	0x41004000
    1c40:	00002fe5 	.word	0x00002fe5
    1c44:	00001ff9 	.word	0x00001ff9

00001c48 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1c48:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1c4a:	4a06      	ldr	r2, [pc, #24]	; (1c64 <_sbrk+0x1c>)
    1c4c:	6812      	ldr	r2, [r2, #0]
    1c4e:	2a00      	cmp	r2, #0
    1c50:	d004      	beq.n	1c5c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1c52:	4a04      	ldr	r2, [pc, #16]	; (1c64 <_sbrk+0x1c>)
    1c54:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1c56:	18c3      	adds	r3, r0, r3
    1c58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1c5a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1c5c:	4902      	ldr	r1, [pc, #8]	; (1c68 <_sbrk+0x20>)
    1c5e:	4a01      	ldr	r2, [pc, #4]	; (1c64 <_sbrk+0x1c>)
    1c60:	6011      	str	r1, [r2, #0]
    1c62:	e7f6      	b.n	1c52 <_sbrk+0xa>
    1c64:	200000e8 	.word	0x200000e8
    1c68:	20002210 	.word	0x20002210

00001c6c <usart_write_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1c6c:	2280      	movs	r2, #128	; 0x80
    1c6e:	05d2      	lsls	r2, r2, #23
    1c70:	4b01      	ldr	r3, [pc, #4]	; (1c78 <usart_write_callback+0xc>)
    1c72:	61da      	str	r2, [r3, #28]
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
void usart_write_callback(struct usart_module *const usart_module)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
    1c74:	4770      	bx	lr
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	41004480 	.word	0x41004480

00001c7c <usart_read_callback>:
{
    1c7c:	b510      	push	{r4, lr}
	usart_write_buffer_job(&usart_instance,
    1c7e:	2205      	movs	r2, #5
    1c80:	4902      	ldr	r1, [pc, #8]	; (1c8c <usart_read_callback+0x10>)
    1c82:	4803      	ldr	r0, [pc, #12]	; (1c90 <usart_read_callback+0x14>)
    1c84:	4b03      	ldr	r3, [pc, #12]	; (1c94 <usart_read_callback+0x18>)
    1c86:	4798      	blx	r3
}
    1c88:	bd10      	pop	{r4, pc}
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	200001b8 	.word	0x200001b8
    1c90:	20000184 	.word	0x20000184
    1c94:	00000e15 	.word	0x00000e15

00001c98 <capture_event_callback>:
	config_tc.enable_capture_on_channel[1] = 1;
	config_tc.clock_source = GCLK_GENERATOR_3;
	tc_init(&capture_instance, TC4, &config_tc);	
}

void capture_event_callback(void){
    1c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Number = (Captureclock/(TC4->COUNT32.CC[0].bit.CC)) - (Number * 0.00248);
    1c9a:	4b1a      	ldr	r3, [pc, #104]	; (1d04 <capture_event_callback+0x6c>)
    1c9c:	6999      	ldr	r1, [r3, #24]
    1c9e:	481a      	ldr	r0, [pc, #104]	; (1d08 <capture_event_callback+0x70>)
    1ca0:	4b1a      	ldr	r3, [pc, #104]	; (1d0c <capture_event_callback+0x74>)
    1ca2:	4798      	blx	r3
    1ca4:	4b1a      	ldr	r3, [pc, #104]	; (1d10 <capture_event_callback+0x78>)
    1ca6:	4798      	blx	r3
    1ca8:	0006      	movs	r6, r0
    1caa:	000f      	movs	r7, r1
    1cac:	4c19      	ldr	r4, [pc, #100]	; (1d14 <capture_event_callback+0x7c>)
    1cae:	6820      	ldr	r0, [r4, #0]
    1cb0:	4b19      	ldr	r3, [pc, #100]	; (1d18 <capture_event_callback+0x80>)
    1cb2:	4798      	blx	r3
    1cb4:	4a19      	ldr	r2, [pc, #100]	; (1d1c <capture_event_callback+0x84>)
    1cb6:	4b1a      	ldr	r3, [pc, #104]	; (1d20 <capture_event_callback+0x88>)
    1cb8:	4d1a      	ldr	r5, [pc, #104]	; (1d24 <capture_event_callback+0x8c>)
    1cba:	47a8      	blx	r5
    1cbc:	0002      	movs	r2, r0
    1cbe:	000b      	movs	r3, r1
    1cc0:	0030      	movs	r0, r6
    1cc2:	0039      	movs	r1, r7
    1cc4:	4d18      	ldr	r5, [pc, #96]	; (1d28 <capture_event_callback+0x90>)
    1cc6:	47a8      	blx	r5
    1cc8:	4b18      	ldr	r3, [pc, #96]	; (1d2c <capture_event_callback+0x94>)
    1cca:	4798      	blx	r3
    1ccc:	6020      	str	r0, [r4, #0]
	sprintf ( Result, "%d", (int)Number ); // %d makes the result be a decimal integer
    1cce:	4b18      	ldr	r3, [pc, #96]	; (1d30 <capture_event_callback+0x98>)
    1cd0:	4798      	blx	r3
    1cd2:	0002      	movs	r2, r0
    1cd4:	4c17      	ldr	r4, [pc, #92]	; (1d34 <capture_event_callback+0x9c>)
    1cd6:	4918      	ldr	r1, [pc, #96]	; (1d38 <capture_event_callback+0xa0>)
    1cd8:	0020      	movs	r0, r4
    1cda:	4b18      	ldr	r3, [pc, #96]	; (1d3c <capture_event_callback+0xa4>)
    1cdc:	4798      	blx	r3
	strcat(Result,"\n\r");
    1cde:	0020      	movs	r0, r4
    1ce0:	4b17      	ldr	r3, [pc, #92]	; (1d40 <capture_event_callback+0xa8>)
    1ce2:	4798      	blx	r3
    1ce4:	1900      	adds	r0, r0, r4
    1ce6:	2203      	movs	r2, #3
    1ce8:	4916      	ldr	r1, [pc, #88]	; (1d44 <capture_event_callback+0xac>)
    1cea:	4b17      	ldr	r3, [pc, #92]	; (1d48 <capture_event_callback+0xb0>)
    1cec:	4798      	blx	r3
	usart_write_buffer_wait(&usart_instance, clearterm, sizeof(clearterm));
    1cee:	4e17      	ldr	r6, [pc, #92]	; (1d4c <capture_event_callback+0xb4>)
    1cf0:	2205      	movs	r2, #5
    1cf2:	4917      	ldr	r1, [pc, #92]	; (1d50 <capture_event_callback+0xb8>)
    1cf4:	0030      	movs	r0, r6
    1cf6:	4d17      	ldr	r5, [pc, #92]	; (1d54 <capture_event_callback+0xbc>)
    1cf8:	47a8      	blx	r5
	usart_write_buffer_wait(&usart_instance, Result, sizeof(Result));
    1cfa:	2220      	movs	r2, #32
    1cfc:	0021      	movs	r1, r4
    1cfe:	0030      	movs	r0, r6
    1d00:	47a8      	blx	r5
}
    1d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d04:	42003000 	.word	0x42003000
    1d08:	02d0738c 	.word	0x02d0738c
    1d0c:	000020a9 	.word	0x000020a9
    1d10:	00002d81 	.word	0x00002d81
    1d14:	20000020 	.word	0x20000020
    1d18:	00002df1 	.word	0x00002df1
    1d1c:	dc9c4da9 	.word	0xdc9c4da9
    1d20:	3f6450ef 	.word	0x3f6450ef
    1d24:	00002255 	.word	0x00002255
    1d28:	00002755 	.word	0x00002755
    1d2c:	00002e95 	.word	0x00002e95
    1d30:	00002215 	.word	0x00002215
    1d34:	20000164 	.word	0x20000164
    1d38:	00003900 	.word	0x00003900
    1d3c:	00003041 	.word	0x00003041
    1d40:	00003085 	.word	0x00003085
    1d44:	00003904 	.word	0x00003904
    1d48:	0000302d 	.word	0x0000302d
    1d4c:	20000184 	.word	0x20000184
    1d50:	20000024 	.word	0x20000024
    1d54:	00000d01 	.word	0x00000d01

00001d58 <configure_port_pins>:
{
    1d58:	b530      	push	{r4, r5, lr}
    1d5a:	b083      	sub	sp, #12
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d5c:	a901      	add	r1, sp, #4
    1d5e:	2401      	movs	r4, #1
    1d60:	708c      	strb	r4, [r1, #2]
	config->powersave    = false;
    1d62:	2500      	movs	r5, #0
    1d64:	70cd      	strb	r5, [r1, #3]
    config_pinmux.mux_position = PINMUX_PA17H_GCLK_IO3;
    1d66:	2307      	movs	r3, #7
    1d68:	700b      	strb	r3, [r1, #0]
    config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d6a:	704c      	strb	r4, [r1, #1]
    system_pinmux_pin_set_config(PIN_PA17H_GCLK_IO3, &config_pinmux);
    1d6c:	2011      	movs	r0, #17
    1d6e:	4b0a      	ldr	r3, [pc, #40]	; (1d98 <configure_port_pins+0x40>)
    1d70:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    1d72:	466b      	mov	r3, sp
    1d74:	701d      	strb	r5, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1d76:	705c      	strb	r4, [r3, #1]
	config->powersave  = false;
    1d78:	709d      	strb	r5, [r3, #2]
	port_pin_set_config(BUTTON_0_PIN, &config_port_pin);
    1d7a:	4669      	mov	r1, sp
    1d7c:	200f      	movs	r0, #15
    1d7e:	4d07      	ldr	r5, [pc, #28]	; (1d9c <configure_port_pins+0x44>)
    1d80:	47a8      	blx	r5
	port_pin_set_config(PIN_PB00, &config_port_pin);
    1d82:	4669      	mov	r1, sp
    1d84:	2020      	movs	r0, #32
    1d86:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1d88:	466b      	mov	r3, sp
    1d8a:	701c      	strb	r4, [r3, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    1d8c:	4669      	mov	r1, sp
    1d8e:	203e      	movs	r0, #62	; 0x3e
    1d90:	47a8      	blx	r5
}
    1d92:	b003      	add	sp, #12
    1d94:	bd30      	pop	{r4, r5, pc}
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	0000179d 	.word	0x0000179d
    1d9c:	00000529 	.word	0x00000529

00001da0 <configure_usart>:
{
    1da0:	b530      	push	{r4, r5, lr}
    1da2:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1da4:	2380      	movs	r3, #128	; 0x80
    1da6:	05db      	lsls	r3, r3, #23
    1da8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1daa:	2300      	movs	r3, #0
    1dac:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1dae:	22ff      	movs	r2, #255	; 0xff
    1db0:	4669      	mov	r1, sp
    1db2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1db4:	2200      	movs	r2, #0
    1db6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1db8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1dba:	2196      	movs	r1, #150	; 0x96
    1dbc:	0189      	lsls	r1, r1, #6
    1dbe:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1dc0:	2101      	movs	r1, #1
    1dc2:	2024      	movs	r0, #36	; 0x24
    1dc4:	466c      	mov	r4, sp
    1dc6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1dc8:	3001      	adds	r0, #1
    1dca:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1dcc:	3125      	adds	r1, #37	; 0x25
    1dce:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1dd0:	3101      	adds	r1, #1
    1dd2:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1dd4:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1dd6:	3105      	adds	r1, #5
    1dd8:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1dda:	3101      	adds	r1, #1
    1ddc:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1dde:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1de0:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1de2:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1de4:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1de6:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1de8:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1dea:	2313      	movs	r3, #19
    1dec:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1dee:	7762      	strb	r2, [r4, #29]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1df0:	2380      	movs	r3, #128	; 0x80
    1df2:	035b      	lsls	r3, r3, #13
    1df4:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1df6:	4b12      	ldr	r3, [pc, #72]	; (1e40 <configure_usart+0xa0>)
    1df8:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1dfa:	4b12      	ldr	r3, [pc, #72]	; (1e44 <configure_usart+0xa4>)
    1dfc:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1dfe:	2301      	movs	r3, #1
    1e00:	425b      	negs	r3, r3
    1e02:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1e04:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    1e06:	4d10      	ldr	r5, [pc, #64]	; (1e48 <configure_usart+0xa8>)
    1e08:	4c10      	ldr	r4, [pc, #64]	; (1e4c <configure_usart+0xac>)
    1e0a:	466a      	mov	r2, sp
    1e0c:	4910      	ldr	r1, [pc, #64]	; (1e50 <configure_usart+0xb0>)
    1e0e:	0028      	movs	r0, r5
    1e10:	47a0      	blx	r4
    1e12:	2800      	cmp	r0, #0
    1e14:	d1f9      	bne.n	1e0a <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e16:	4d0c      	ldr	r5, [pc, #48]	; (1e48 <configure_usart+0xa8>)
    1e18:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1e1a:	0020      	movs	r0, r4
    1e1c:	4b0d      	ldr	r3, [pc, #52]	; (1e54 <configure_usart+0xb4>)
    1e1e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e20:	231f      	movs	r3, #31
    1e22:	4018      	ands	r0, r3
    1e24:	3b1e      	subs	r3, #30
    1e26:	4083      	lsls	r3, r0
    1e28:	4a0b      	ldr	r2, [pc, #44]	; (1e58 <configure_usart+0xb8>)
    1e2a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e2c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e2e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1e30:	2b00      	cmp	r3, #0
    1e32:	d1fc      	bne.n	1e2e <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1e34:	6823      	ldr	r3, [r4, #0]
    1e36:	2202      	movs	r2, #2
    1e38:	4313      	orrs	r3, r2
    1e3a:	6023      	str	r3, [r4, #0]
}
    1e3c:	b011      	add	sp, #68	; 0x44
    1e3e:	bd30      	pop	{r4, r5, pc}
    1e40:	00160002 	.word	0x00160002
    1e44:	00170002 	.word	0x00170002
    1e48:	20000184 	.word	0x20000184
    1e4c:	00000991 	.word	0x00000991
    1e50:	42001400 	.word	0x42001400
    1e54:	00000901 	.word	0x00000901
    1e58:	e000e100 	.word	0xe000e100

00001e5c <configure_usart_callbacks>:
{
    1e5c:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance,
    1e5e:	4c08      	ldr	r4, [pc, #32]	; (1e80 <configure_usart_callbacks+0x24>)
    1e60:	2200      	movs	r2, #0
    1e62:	4908      	ldr	r1, [pc, #32]	; (1e84 <configure_usart_callbacks+0x28>)
    1e64:	0020      	movs	r0, r4
    1e66:	4d08      	ldr	r5, [pc, #32]	; (1e88 <configure_usart_callbacks+0x2c>)
    1e68:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    1e6a:	2201      	movs	r2, #1
    1e6c:	4907      	ldr	r1, [pc, #28]	; (1e8c <configure_usart_callbacks+0x30>)
    1e6e:	0020      	movs	r0, r4
    1e70:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1e72:	2231      	movs	r2, #49	; 0x31
    1e74:	5ca3      	ldrb	r3, [r4, r2]
    1e76:	2103      	movs	r1, #3
    1e78:	430b      	orrs	r3, r1
    1e7a:	54a3      	strb	r3, [r4, r2]
}
    1e7c:	bd70      	pop	{r4, r5, r6, pc}
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	20000184 	.word	0x20000184
    1e84:	00001c6d 	.word	0x00001c6d
    1e88:	00000dfd 	.word	0x00000dfd
    1e8c:	00001c7d 	.word	0x00001c7d

00001e90 <configure_tc>:
{
    1e90:	b500      	push	{lr}
    1e92:	b08f      	sub	sp, #60	; 0x3c
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    1e94:	aa01      	add	r2, sp, #4
    1e96:	2300      	movs	r3, #0
    1e98:	2100      	movs	r1, #0
    1e9a:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1e9c:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1e9e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1ea0:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1ea2:	7291      	strb	r1, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1ea4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1ea6:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1ea8:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1eaa:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1eac:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1eae:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1eb0:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1eb2:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1eb4:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1eb6:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1eb8:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    1eba:	3308      	adds	r3, #8
    1ebc:	7093      	strb	r3, [r2, #2]
	config_tc.enable_capture_on_channel[0] = 1;
    1ebe:	3b07      	subs	r3, #7
    1ec0:	72d3      	strb	r3, [r2, #11]
	config_tc.enable_capture_on_channel[1] = 1;
    1ec2:	7313      	strb	r3, [r2, #12]
	config_tc.clock_source = GCLK_GENERATOR_3;
    1ec4:	3302      	adds	r3, #2
    1ec6:	7013      	strb	r3, [r2, #0]
	tc_init(&capture_instance, TC4, &config_tc);	
    1ec8:	4902      	ldr	r1, [pc, #8]	; (1ed4 <configure_tc+0x44>)
    1eca:	4803      	ldr	r0, [pc, #12]	; (1ed8 <configure_tc+0x48>)
    1ecc:	4b03      	ldr	r3, [pc, #12]	; (1edc <configure_tc+0x4c>)
    1ece:	4798      	blx	r3
}
    1ed0:	b00f      	add	sp, #60	; 0x3c
    1ed2:	bd00      	pop	{pc}
    1ed4:	42003000 	.word	0x42003000
    1ed8:	200001ec 	.word	0x200001ec
    1edc:	00001921 	.word	0x00001921

00001ee0 <configure_event_controller>:
void configure_event_controller(void){
    1ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ee2:	b087      	sub	sp, #28
	// PPW: T captured in CC0, tp captured in CC1
	// f = 1/T, dutyCycle = tp / T
	events_tc.event_action = TC_EVENT_ACTION_PPW;
    1ee4:	4b37      	ldr	r3, [pc, #220]	; (1fc4 <configure_event_controller+0xe4>)
    1ee6:	2205      	movs	r2, #5
    1ee8:	715a      	strb	r2, [r3, #5]
	// Enable the event action
	events_tc.on_event_perform_action = 1;
    1eea:	3a04      	subs	r2, #4
    1eec:	70da      	strb	r2, [r3, #3]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Tc *const tc_module = module_inst->hw;
    1eee:	4a36      	ldr	r2, [pc, #216]	; (1fc8 <configure_event_controller+0xe8>)
    1ef0:	6811      	ldr	r1, [r2, #0]

	uint32_t event_mask = 0;

	if (events->invert_event_input == true) {
    1ef2:	791b      	ldrb	r3, [r3, #4]
		event_mask |= TC_EVCTRL_TCINV;
    1ef4:	1e5a      	subs	r2, r3, #1
    1ef6:	4193      	sbcs	r3, r2
    1ef8:	011b      	lsls	r3, r3, #4

	if (events->on_event_perform_action == true) {
		event_mask |= TC_EVCTRL_TCEI;
	}

	if (events->generate_event_on_overflow == true) {
    1efa:	4a32      	ldr	r2, [pc, #200]	; (1fc4 <configure_event_controller+0xe4>)
    1efc:	7892      	ldrb	r2, [r2, #2]
    1efe:	2a00      	cmp	r2, #0
    1f00:	d15c      	bne.n	1fbc <configure_event_controller+0xdc>
		event_mask |= TC_EVCTRL_TCEI;
    1f02:	3220      	adds	r2, #32
    1f04:	4313      	orrs	r3, r2
		event_mask |= TC_EVCTRL_OVFEO;
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (events->generate_event_on_compare_channel[i] == true) {
    1f06:	4a2f      	ldr	r2, [pc, #188]	; (1fc4 <configure_event_controller+0xe4>)
    1f08:	7812      	ldrb	r2, [r2, #0]
    1f0a:	2a00      	cmp	r2, #0
    1f0c:	d002      	beq.n	1f14 <configure_event_controller+0x34>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    1f0e:	2280      	movs	r2, #128	; 0x80
    1f10:	0152      	lsls	r2, r2, #5
    1f12:	4313      	orrs	r3, r2
		if (events->generate_event_on_compare_channel[i] == true) {
    1f14:	4a2b      	ldr	r2, [pc, #172]	; (1fc4 <configure_event_controller+0xe4>)
    1f16:	7852      	ldrb	r2, [r2, #1]
    1f18:	2a00      	cmp	r2, #0
    1f1a:	d002      	beq.n	1f22 <configure_event_controller+0x42>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    1f1c:	2280      	movs	r2, #128	; 0x80
    1f1e:	0192      	lsls	r2, r2, #6
    1f20:	4313      	orrs	r3, r2
		}
	}

	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
    1f22:	894a      	ldrh	r2, [r1, #10]
    1f24:	2005      	movs	r0, #5
    1f26:	4302      	orrs	r2, r0
    1f28:	4313      	orrs	r3, r2
    1f2a:	b29b      	uxth	r3, r3
    1f2c:	814b      	strh	r3, [r1, #10]
	tc_enable_events(&capture_instance, &events_tc);
	tc_register_callback(&capture_instance, capture_event_callback, TC_CALLBACK_CC_CHANNEL0);
    1f2e:	4c26      	ldr	r4, [pc, #152]	; (1fc8 <configure_event_controller+0xe8>)
    1f30:	2202      	movs	r2, #2
    1f32:	4926      	ldr	r1, [pc, #152]	; (1fcc <configure_event_controller+0xec>)
    1f34:	0020      	movs	r0, r4
    1f36:	4b26      	ldr	r3, [pc, #152]	; (1fd0 <configure_event_controller+0xf0>)
    1f38:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1f3a:	6820      	ldr	r0, [r4, #0]
    1f3c:	4b25      	ldr	r3, [pc, #148]	; (1fd4 <configure_event_controller+0xf4>)
    1f3e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1f40:	4b25      	ldr	r3, [pc, #148]	; (1fd8 <configure_event_controller+0xf8>)
    1f42:	5c1a      	ldrb	r2, [r3, r0]
    1f44:	231f      	movs	r3, #31
    1f46:	4013      	ands	r3, r2
    1f48:	2701      	movs	r7, #1
    1f4a:	003a      	movs	r2, r7
    1f4c:	409a      	lsls	r2, r3
    1f4e:	4b23      	ldr	r3, [pc, #140]	; (1fdc <configure_event_controller+0xfc>)
    1f50:	601a      	str	r2, [r3, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1f52:	7e63      	ldrb	r3, [r4, #25]
    1f54:	2210      	movs	r2, #16
    1f56:	4313      	orrs	r3, r2
    1f58:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1f5a:	2310      	movs	r3, #16
    1f5c:	6822      	ldr	r2, [r4, #0]
    1f5e:	7353      	strb	r3, [r2, #13]
	tc_enable_callback(&capture_instance, TC_CALLBACK_CC_CHANNEL0);

	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    1f60:	ad03      	add	r5, sp, #12
    1f62:	0028      	movs	r0, r5
    1f64:	4b1e      	ldr	r3, [pc, #120]	; (1fe0 <configure_event_controller+0x100>)
    1f66:	4798      	blx	r3

	config_extint_chan.gpio_pin           = FREQ_PIN;
    1f68:	2312      	movs	r3, #18
    1f6a:	9303      	str	r3, [sp, #12]
	config_extint_chan.gpio_pin_mux       = FREQ_MUX;
    1f6c:	2600      	movs	r6, #0
    1f6e:	606e      	str	r6, [r5, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    1f70:	722e      	strb	r6, [r5, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_HIGH;
    1f72:	3b0e      	subs	r3, #14
    1f74:	72eb      	strb	r3, [r5, #11]
	config_extint_chan.wake_if_sleeping   = 0;
    1f76:	726e      	strb	r6, [r5, #9]
	extint_chan_set_config(2, &config_extint_chan); //change first parameter to number of EXTINT channel
    1f78:	0029      	movs	r1, r5
    1f7a:	2002      	movs	r0, #2
    1f7c:	4b19      	ldr	r3, [pc, #100]	; (1fe4 <configure_event_controller+0x104>)
    1f7e:	4798      	blx	r3
	eic_events.generate_event_on_detect[2] = 1; //change [2] to number of EXTINT channel
    1f80:	4b19      	ldr	r3, [pc, #100]	; (1fe8 <configure_event_controller+0x108>)
    1f82:	709f      	strb	r7, [r3, #2]
	struct events_resource capture_event;
	struct events_config config_evt;
	events_get_config_defaults(&config_evt);
    1f84:	4668      	mov	r0, sp
    1f86:	4b19      	ldr	r3, [pc, #100]	; (1fec <configure_event_controller+0x10c>)
    1f88:	4798      	blx	r3
	config_evt.generator      = BOARD_PHOTODIODE_GEN;
    1f8a:	230e      	movs	r3, #14
    1f8c:	466a      	mov	r2, sp
    1f8e:	7093      	strb	r3, [r2, #2]
	config_evt.edge_detect    = EVENTS_EDGE_DETECT_NONE;
    1f90:	7016      	strb	r6, [r2, #0]
	config_evt.path           = EVENTS_PATH_ASYNCHRONOUS;
    1f92:	2302      	movs	r3, #2
    1f94:	7053      	strb	r3, [r2, #1]
	events_allocate(&capture_event, &config_evt);
    1f96:	4669      	mov	r1, sp
    1f98:	a801      	add	r0, sp, #4
    1f9a:	4b15      	ldr	r3, [pc, #84]	; (1ff0 <configure_event_controller+0x110>)
    1f9c:	4798      	blx	r3
	events_attach_user(&capture_event, EVSYS_ID_USER_TC4_EVU);
    1f9e:	2113      	movs	r1, #19
    1fa0:	a801      	add	r0, sp, #4
    1fa2:	4b14      	ldr	r3, [pc, #80]	; (1ff4 <configure_event_controller+0x114>)
    1fa4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1fa6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1fa8:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1faa:	b25b      	sxtb	r3, r3
    1fac:	2b00      	cmp	r3, #0
    1fae:	dbfb      	blt.n	1fa8 <configure_event_controller+0xc8>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1fb0:	8813      	ldrh	r3, [r2, #0]
    1fb2:	2102      	movs	r1, #2
    1fb4:	430b      	orrs	r3, r1
    1fb6:	8013      	strh	r3, [r2, #0]
	//extint_enable_events(&eic_events);
	tc_enable(&capture_instance);
}
    1fb8:	b007      	add	sp, #28
    1fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		event_mask |= TC_EVCTRL_OVFEO;
    1fbc:	2290      	movs	r2, #144	; 0x90
    1fbe:	0052      	lsls	r2, r2, #1
    1fc0:	4313      	orrs	r3, r2
    1fc2:	e7a0      	b.n	1f06 <configure_event_controller+0x26>
    1fc4:	200001c4 	.word	0x200001c4
    1fc8:	200001ec 	.word	0x200001ec
    1fcc:	00001c99 	.word	0x00001c99
    1fd0:	000017fd 	.word	0x000017fd
    1fd4:	000018e5 	.word	0x000018e5
    1fd8:	00003910 	.word	0x00003910
    1fdc:	e000e100 	.word	0xe000e100
    1fe0:	00000445 	.word	0x00000445
    1fe4:	00000459 	.word	0x00000459
    1fe8:	200001cc 	.word	0x200001cc
    1fec:	00000289 	.word	0x00000289
    1ff0:	00000299 	.word	0x00000299
    1ff4:	00000349 	.word	0x00000349

00001ff8 <main>:


// main
int main (void)
{
    1ff8:	b570      	push	{r4, r5, r6, lr}
	
	
	system_init();
    1ffa:	4b1a      	ldr	r3, [pc, #104]	; (2064 <STACK_SIZE+0x64>)
    1ffc:	4798      	blx	r3
	delay_init();
    1ffe:	4b1a      	ldr	r3, [pc, #104]	; (2068 <STACK_SIZE+0x68>)
    2000:	4798      	blx	r3
	//board_init();
	configure_port_pins();
    2002:	4b1a      	ldr	r3, [pc, #104]	; (206c <STACK_SIZE+0x6c>)
    2004:	4798      	blx	r3
	configure_usart();
    2006:	4b1a      	ldr	r3, [pc, #104]	; (2070 <STACK_SIZE+0x70>)
    2008:	4798      	blx	r3
	configure_usart_callbacks();
    200a:	4b1a      	ldr	r3, [pc, #104]	; (2074 <STACK_SIZE+0x74>)
    200c:	4798      	blx	r3
	configure_tc();
    200e:	4b1a      	ldr	r3, [pc, #104]	; (2078 <STACK_SIZE+0x78>)
    2010:	4798      	blx	r3
	configure_event_controller();
    2012:	4b1a      	ldr	r3, [pc, #104]	; (207c <STACK_SIZE+0x7c>)
    2014:	4798      	blx	r3
	cpu_irq_enable();
    2016:	2201      	movs	r2, #1
    2018:	4b19      	ldr	r3, [pc, #100]	; (2080 <STACK_SIZE+0x80>)
    201a:	701a      	strb	r2, [r3, #0]
    201c:	f3bf 8f5f 	dmb	sy
    2020:	b662      	cpsie	i
	system_interrupt_enable_global();
	usart_write_buffer_wait(&usart_instance, "test", sizeof("test"));
    2022:	3204      	adds	r2, #4
    2024:	4917      	ldr	r1, [pc, #92]	; (2084 <STACK_SIZE+0x84>)
    2026:	4818      	ldr	r0, [pc, #96]	; (2088 <STACK_SIZE+0x88>)
    2028:	4b18      	ldr	r3, [pc, #96]	; (208c <STACK_SIZE+0x8c>)
    202a:	4798      	blx	r3
	
	

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		test = port_pin_get_output_level(BUTTON_0_PIN);
    202c:	4d18      	ldr	r5, [pc, #96]	; (2090 <STACK_SIZE+0x90>)
		if(port_pin_get_input_level(BUTTON_0_PIN) == 0){
			extint_enable_events(&eic_events);
		}
		else{
			extint_disable_events(&eic_events);
    202e:	4c19      	ldr	r4, [pc, #100]	; (2094 <STACK_SIZE+0x94>)
    2030:	4e19      	ldr	r6, [pc, #100]	; (2098 <STACK_SIZE+0x98>)
    2032:	e00a      	b.n	204a <STACK_SIZE+0x4a>
    2034:	0020      	movs	r0, r4
    2036:	47b0      	blx	r6
		}
		delay_s(1);
    2038:	20fa      	movs	r0, #250	; 0xfa
    203a:	0080      	lsls	r0, r0, #2
    203c:	4b17      	ldr	r3, [pc, #92]	; (209c <STACK_SIZE+0x9c>)
    203e:	4798      	blx	r3
		usart_write_buffer_wait(&usart_instance, "test", sizeof("test"));
    2040:	2205      	movs	r2, #5
    2042:	4910      	ldr	r1, [pc, #64]	; (2084 <STACK_SIZE+0x84>)
    2044:	4810      	ldr	r0, [pc, #64]	; (2088 <STACK_SIZE+0x88>)
    2046:	4b11      	ldr	r3, [pc, #68]	; (208c <STACK_SIZE+0x8c>)
    2048:	4798      	blx	r3
	return (port_base->OUT.reg & pin_mask);
    204a:	4a15      	ldr	r2, [pc, #84]	; (20a0 <STACK_SIZE+0xa0>)
    204c:	6913      	ldr	r3, [r2, #16]
    204e:	041b      	lsls	r3, r3, #16
    2050:	0fdb      	lsrs	r3, r3, #31
		test = port_pin_get_output_level(BUTTON_0_PIN);
    2052:	602b      	str	r3, [r5, #0]
	return (port_base->IN.reg & pin_mask);
    2054:	6a13      	ldr	r3, [r2, #32]
		if(port_pin_get_input_level(BUTTON_0_PIN) == 0){
    2056:	041b      	lsls	r3, r3, #16
    2058:	d4ec      	bmi.n	2034 <STACK_SIZE+0x34>
			extint_enable_events(&eic_events);
    205a:	480e      	ldr	r0, [pc, #56]	; (2094 <STACK_SIZE+0x94>)
    205c:	4b11      	ldr	r3, [pc, #68]	; (20a4 <STACK_SIZE+0xa4>)
    205e:	4798      	blx	r3
    2060:	e7ea      	b.n	2038 <STACK_SIZE+0x38>
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	000017d1 	.word	0x000017d1
    2068:	00000115 	.word	0x00000115
    206c:	00001d59 	.word	0x00001d59
    2070:	00001da1 	.word	0x00001da1
    2074:	00001e5d 	.word	0x00001e5d
    2078:	00001e91 	.word	0x00001e91
    207c:	00001ee1 	.word	0x00001ee1
    2080:	20000008 	.word	0x20000008
    2084:	00003908 	.word	0x00003908
    2088:	20000184 	.word	0x20000184
    208c:	00000d01 	.word	0x00000d01
    2090:	200001c0 	.word	0x200001c0
    2094:	200001cc 	.word	0x200001cc
    2098:	000004fd 	.word	0x000004fd
    209c:	00000155 	.word	0x00000155
    20a0:	41004400 	.word	0x41004400
    20a4:	000004d1 	.word	0x000004d1

000020a8 <__udivsi3>:
    20a8:	2200      	movs	r2, #0
    20aa:	0843      	lsrs	r3, r0, #1
    20ac:	428b      	cmp	r3, r1
    20ae:	d374      	bcc.n	219a <__udivsi3+0xf2>
    20b0:	0903      	lsrs	r3, r0, #4
    20b2:	428b      	cmp	r3, r1
    20b4:	d35f      	bcc.n	2176 <__udivsi3+0xce>
    20b6:	0a03      	lsrs	r3, r0, #8
    20b8:	428b      	cmp	r3, r1
    20ba:	d344      	bcc.n	2146 <__udivsi3+0x9e>
    20bc:	0b03      	lsrs	r3, r0, #12
    20be:	428b      	cmp	r3, r1
    20c0:	d328      	bcc.n	2114 <__udivsi3+0x6c>
    20c2:	0c03      	lsrs	r3, r0, #16
    20c4:	428b      	cmp	r3, r1
    20c6:	d30d      	bcc.n	20e4 <__udivsi3+0x3c>
    20c8:	22ff      	movs	r2, #255	; 0xff
    20ca:	0209      	lsls	r1, r1, #8
    20cc:	ba12      	rev	r2, r2
    20ce:	0c03      	lsrs	r3, r0, #16
    20d0:	428b      	cmp	r3, r1
    20d2:	d302      	bcc.n	20da <__udivsi3+0x32>
    20d4:	1212      	asrs	r2, r2, #8
    20d6:	0209      	lsls	r1, r1, #8
    20d8:	d065      	beq.n	21a6 <__udivsi3+0xfe>
    20da:	0b03      	lsrs	r3, r0, #12
    20dc:	428b      	cmp	r3, r1
    20de:	d319      	bcc.n	2114 <__udivsi3+0x6c>
    20e0:	e000      	b.n	20e4 <__udivsi3+0x3c>
    20e2:	0a09      	lsrs	r1, r1, #8
    20e4:	0bc3      	lsrs	r3, r0, #15
    20e6:	428b      	cmp	r3, r1
    20e8:	d301      	bcc.n	20ee <__udivsi3+0x46>
    20ea:	03cb      	lsls	r3, r1, #15
    20ec:	1ac0      	subs	r0, r0, r3
    20ee:	4152      	adcs	r2, r2
    20f0:	0b83      	lsrs	r3, r0, #14
    20f2:	428b      	cmp	r3, r1
    20f4:	d301      	bcc.n	20fa <__udivsi3+0x52>
    20f6:	038b      	lsls	r3, r1, #14
    20f8:	1ac0      	subs	r0, r0, r3
    20fa:	4152      	adcs	r2, r2
    20fc:	0b43      	lsrs	r3, r0, #13
    20fe:	428b      	cmp	r3, r1
    2100:	d301      	bcc.n	2106 <__udivsi3+0x5e>
    2102:	034b      	lsls	r3, r1, #13
    2104:	1ac0      	subs	r0, r0, r3
    2106:	4152      	adcs	r2, r2
    2108:	0b03      	lsrs	r3, r0, #12
    210a:	428b      	cmp	r3, r1
    210c:	d301      	bcc.n	2112 <__udivsi3+0x6a>
    210e:	030b      	lsls	r3, r1, #12
    2110:	1ac0      	subs	r0, r0, r3
    2112:	4152      	adcs	r2, r2
    2114:	0ac3      	lsrs	r3, r0, #11
    2116:	428b      	cmp	r3, r1
    2118:	d301      	bcc.n	211e <__udivsi3+0x76>
    211a:	02cb      	lsls	r3, r1, #11
    211c:	1ac0      	subs	r0, r0, r3
    211e:	4152      	adcs	r2, r2
    2120:	0a83      	lsrs	r3, r0, #10
    2122:	428b      	cmp	r3, r1
    2124:	d301      	bcc.n	212a <__udivsi3+0x82>
    2126:	028b      	lsls	r3, r1, #10
    2128:	1ac0      	subs	r0, r0, r3
    212a:	4152      	adcs	r2, r2
    212c:	0a43      	lsrs	r3, r0, #9
    212e:	428b      	cmp	r3, r1
    2130:	d301      	bcc.n	2136 <__udivsi3+0x8e>
    2132:	024b      	lsls	r3, r1, #9
    2134:	1ac0      	subs	r0, r0, r3
    2136:	4152      	adcs	r2, r2
    2138:	0a03      	lsrs	r3, r0, #8
    213a:	428b      	cmp	r3, r1
    213c:	d301      	bcc.n	2142 <__udivsi3+0x9a>
    213e:	020b      	lsls	r3, r1, #8
    2140:	1ac0      	subs	r0, r0, r3
    2142:	4152      	adcs	r2, r2
    2144:	d2cd      	bcs.n	20e2 <__udivsi3+0x3a>
    2146:	09c3      	lsrs	r3, r0, #7
    2148:	428b      	cmp	r3, r1
    214a:	d301      	bcc.n	2150 <__udivsi3+0xa8>
    214c:	01cb      	lsls	r3, r1, #7
    214e:	1ac0      	subs	r0, r0, r3
    2150:	4152      	adcs	r2, r2
    2152:	0983      	lsrs	r3, r0, #6
    2154:	428b      	cmp	r3, r1
    2156:	d301      	bcc.n	215c <__udivsi3+0xb4>
    2158:	018b      	lsls	r3, r1, #6
    215a:	1ac0      	subs	r0, r0, r3
    215c:	4152      	adcs	r2, r2
    215e:	0943      	lsrs	r3, r0, #5
    2160:	428b      	cmp	r3, r1
    2162:	d301      	bcc.n	2168 <__udivsi3+0xc0>
    2164:	014b      	lsls	r3, r1, #5
    2166:	1ac0      	subs	r0, r0, r3
    2168:	4152      	adcs	r2, r2
    216a:	0903      	lsrs	r3, r0, #4
    216c:	428b      	cmp	r3, r1
    216e:	d301      	bcc.n	2174 <__udivsi3+0xcc>
    2170:	010b      	lsls	r3, r1, #4
    2172:	1ac0      	subs	r0, r0, r3
    2174:	4152      	adcs	r2, r2
    2176:	08c3      	lsrs	r3, r0, #3
    2178:	428b      	cmp	r3, r1
    217a:	d301      	bcc.n	2180 <__udivsi3+0xd8>
    217c:	00cb      	lsls	r3, r1, #3
    217e:	1ac0      	subs	r0, r0, r3
    2180:	4152      	adcs	r2, r2
    2182:	0883      	lsrs	r3, r0, #2
    2184:	428b      	cmp	r3, r1
    2186:	d301      	bcc.n	218c <__udivsi3+0xe4>
    2188:	008b      	lsls	r3, r1, #2
    218a:	1ac0      	subs	r0, r0, r3
    218c:	4152      	adcs	r2, r2
    218e:	0843      	lsrs	r3, r0, #1
    2190:	428b      	cmp	r3, r1
    2192:	d301      	bcc.n	2198 <__udivsi3+0xf0>
    2194:	004b      	lsls	r3, r1, #1
    2196:	1ac0      	subs	r0, r0, r3
    2198:	4152      	adcs	r2, r2
    219a:	1a41      	subs	r1, r0, r1
    219c:	d200      	bcs.n	21a0 <__udivsi3+0xf8>
    219e:	4601      	mov	r1, r0
    21a0:	4152      	adcs	r2, r2
    21a2:	4610      	mov	r0, r2
    21a4:	4770      	bx	lr
    21a6:	e7ff      	b.n	21a8 <__udivsi3+0x100>
    21a8:	b501      	push	{r0, lr}
    21aa:	2000      	movs	r0, #0
    21ac:	f000 f806 	bl	21bc <__aeabi_idiv0>
    21b0:	bd02      	pop	{r1, pc}
    21b2:	46c0      	nop			; (mov r8, r8)

000021b4 <__aeabi_uidivmod>:
    21b4:	2900      	cmp	r1, #0
    21b6:	d0f7      	beq.n	21a8 <__udivsi3+0x100>
    21b8:	e776      	b.n	20a8 <__udivsi3>
    21ba:	4770      	bx	lr

000021bc <__aeabi_idiv0>:
    21bc:	4770      	bx	lr
    21be:	46c0      	nop			; (mov r8, r8)

000021c0 <__aeabi_lmul>:
    21c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21c2:	46ce      	mov	lr, r9
    21c4:	4647      	mov	r7, r8
    21c6:	0415      	lsls	r5, r2, #16
    21c8:	0c2d      	lsrs	r5, r5, #16
    21ca:	002e      	movs	r6, r5
    21cc:	b580      	push	{r7, lr}
    21ce:	0407      	lsls	r7, r0, #16
    21d0:	0c14      	lsrs	r4, r2, #16
    21d2:	0c3f      	lsrs	r7, r7, #16
    21d4:	4699      	mov	r9, r3
    21d6:	0c03      	lsrs	r3, r0, #16
    21d8:	437e      	muls	r6, r7
    21da:	435d      	muls	r5, r3
    21dc:	4367      	muls	r7, r4
    21de:	4363      	muls	r3, r4
    21e0:	197f      	adds	r7, r7, r5
    21e2:	0c34      	lsrs	r4, r6, #16
    21e4:	19e4      	adds	r4, r4, r7
    21e6:	469c      	mov	ip, r3
    21e8:	42a5      	cmp	r5, r4
    21ea:	d903      	bls.n	21f4 <__aeabi_lmul+0x34>
    21ec:	2380      	movs	r3, #128	; 0x80
    21ee:	025b      	lsls	r3, r3, #9
    21f0:	4698      	mov	r8, r3
    21f2:	44c4      	add	ip, r8
    21f4:	464b      	mov	r3, r9
    21f6:	4351      	muls	r1, r2
    21f8:	4343      	muls	r3, r0
    21fa:	0436      	lsls	r6, r6, #16
    21fc:	0c36      	lsrs	r6, r6, #16
    21fe:	0c25      	lsrs	r5, r4, #16
    2200:	0424      	lsls	r4, r4, #16
    2202:	4465      	add	r5, ip
    2204:	19a4      	adds	r4, r4, r6
    2206:	1859      	adds	r1, r3, r1
    2208:	1949      	adds	r1, r1, r5
    220a:	0020      	movs	r0, r4
    220c:	bc0c      	pop	{r2, r3}
    220e:	4690      	mov	r8, r2
    2210:	4699      	mov	r9, r3
    2212:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002214 <__aeabi_f2iz>:
    2214:	0241      	lsls	r1, r0, #9
    2216:	0043      	lsls	r3, r0, #1
    2218:	0fc2      	lsrs	r2, r0, #31
    221a:	0a49      	lsrs	r1, r1, #9
    221c:	0e1b      	lsrs	r3, r3, #24
    221e:	2000      	movs	r0, #0
    2220:	2b7e      	cmp	r3, #126	; 0x7e
    2222:	dd0d      	ble.n	2240 <__aeabi_f2iz+0x2c>
    2224:	2b9d      	cmp	r3, #157	; 0x9d
    2226:	dc0c      	bgt.n	2242 <__aeabi_f2iz+0x2e>
    2228:	2080      	movs	r0, #128	; 0x80
    222a:	0400      	lsls	r0, r0, #16
    222c:	4301      	orrs	r1, r0
    222e:	2b95      	cmp	r3, #149	; 0x95
    2230:	dc0a      	bgt.n	2248 <__aeabi_f2iz+0x34>
    2232:	2096      	movs	r0, #150	; 0x96
    2234:	1ac3      	subs	r3, r0, r3
    2236:	40d9      	lsrs	r1, r3
    2238:	4248      	negs	r0, r1
    223a:	2a00      	cmp	r2, #0
    223c:	d100      	bne.n	2240 <__aeabi_f2iz+0x2c>
    223e:	0008      	movs	r0, r1
    2240:	4770      	bx	lr
    2242:	4b03      	ldr	r3, [pc, #12]	; (2250 <__aeabi_f2iz+0x3c>)
    2244:	18d0      	adds	r0, r2, r3
    2246:	e7fb      	b.n	2240 <__aeabi_f2iz+0x2c>
    2248:	3b96      	subs	r3, #150	; 0x96
    224a:	4099      	lsls	r1, r3
    224c:	e7f4      	b.n	2238 <__aeabi_f2iz+0x24>
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	7fffffff 	.word	0x7fffffff

00002254 <__aeabi_dmul>:
    2254:	b5f0      	push	{r4, r5, r6, r7, lr}
    2256:	4657      	mov	r7, sl
    2258:	4645      	mov	r5, r8
    225a:	46de      	mov	lr, fp
    225c:	464e      	mov	r6, r9
    225e:	b5e0      	push	{r5, r6, r7, lr}
    2260:	030c      	lsls	r4, r1, #12
    2262:	4698      	mov	r8, r3
    2264:	004e      	lsls	r6, r1, #1
    2266:	0b23      	lsrs	r3, r4, #12
    2268:	b087      	sub	sp, #28
    226a:	0007      	movs	r7, r0
    226c:	4692      	mov	sl, r2
    226e:	469b      	mov	fp, r3
    2270:	0d76      	lsrs	r6, r6, #21
    2272:	0fcd      	lsrs	r5, r1, #31
    2274:	2e00      	cmp	r6, #0
    2276:	d06b      	beq.n	2350 <__aeabi_dmul+0xfc>
    2278:	4b6d      	ldr	r3, [pc, #436]	; (2430 <__aeabi_dmul+0x1dc>)
    227a:	429e      	cmp	r6, r3
    227c:	d035      	beq.n	22ea <__aeabi_dmul+0x96>
    227e:	2480      	movs	r4, #128	; 0x80
    2280:	465b      	mov	r3, fp
    2282:	0f42      	lsrs	r2, r0, #29
    2284:	0424      	lsls	r4, r4, #16
    2286:	00db      	lsls	r3, r3, #3
    2288:	4314      	orrs	r4, r2
    228a:	431c      	orrs	r4, r3
    228c:	00c3      	lsls	r3, r0, #3
    228e:	4699      	mov	r9, r3
    2290:	4b68      	ldr	r3, [pc, #416]	; (2434 <__aeabi_dmul+0x1e0>)
    2292:	46a3      	mov	fp, r4
    2294:	469c      	mov	ip, r3
    2296:	2300      	movs	r3, #0
    2298:	2700      	movs	r7, #0
    229a:	4466      	add	r6, ip
    229c:	9302      	str	r3, [sp, #8]
    229e:	4643      	mov	r3, r8
    22a0:	031c      	lsls	r4, r3, #12
    22a2:	005a      	lsls	r2, r3, #1
    22a4:	0fdb      	lsrs	r3, r3, #31
    22a6:	4650      	mov	r0, sl
    22a8:	0b24      	lsrs	r4, r4, #12
    22aa:	0d52      	lsrs	r2, r2, #21
    22ac:	4698      	mov	r8, r3
    22ae:	d100      	bne.n	22b2 <__aeabi_dmul+0x5e>
    22b0:	e076      	b.n	23a0 <__aeabi_dmul+0x14c>
    22b2:	4b5f      	ldr	r3, [pc, #380]	; (2430 <__aeabi_dmul+0x1dc>)
    22b4:	429a      	cmp	r2, r3
    22b6:	d06d      	beq.n	2394 <__aeabi_dmul+0x140>
    22b8:	2380      	movs	r3, #128	; 0x80
    22ba:	0f41      	lsrs	r1, r0, #29
    22bc:	041b      	lsls	r3, r3, #16
    22be:	430b      	orrs	r3, r1
    22c0:	495c      	ldr	r1, [pc, #368]	; (2434 <__aeabi_dmul+0x1e0>)
    22c2:	00e4      	lsls	r4, r4, #3
    22c4:	468c      	mov	ip, r1
    22c6:	431c      	orrs	r4, r3
    22c8:	00c3      	lsls	r3, r0, #3
    22ca:	2000      	movs	r0, #0
    22cc:	4462      	add	r2, ip
    22ce:	4641      	mov	r1, r8
    22d0:	18b6      	adds	r6, r6, r2
    22d2:	4069      	eors	r1, r5
    22d4:	1c72      	adds	r2, r6, #1
    22d6:	9101      	str	r1, [sp, #4]
    22d8:	4694      	mov	ip, r2
    22da:	4307      	orrs	r7, r0
    22dc:	2f0f      	cmp	r7, #15
    22de:	d900      	bls.n	22e2 <__aeabi_dmul+0x8e>
    22e0:	e0b0      	b.n	2444 <__aeabi_dmul+0x1f0>
    22e2:	4a55      	ldr	r2, [pc, #340]	; (2438 <__aeabi_dmul+0x1e4>)
    22e4:	00bf      	lsls	r7, r7, #2
    22e6:	59d2      	ldr	r2, [r2, r7]
    22e8:	4697      	mov	pc, r2
    22ea:	465b      	mov	r3, fp
    22ec:	4303      	orrs	r3, r0
    22ee:	4699      	mov	r9, r3
    22f0:	d000      	beq.n	22f4 <__aeabi_dmul+0xa0>
    22f2:	e087      	b.n	2404 <__aeabi_dmul+0x1b0>
    22f4:	2300      	movs	r3, #0
    22f6:	469b      	mov	fp, r3
    22f8:	3302      	adds	r3, #2
    22fa:	2708      	movs	r7, #8
    22fc:	9302      	str	r3, [sp, #8]
    22fe:	e7ce      	b.n	229e <__aeabi_dmul+0x4a>
    2300:	4642      	mov	r2, r8
    2302:	9201      	str	r2, [sp, #4]
    2304:	2802      	cmp	r0, #2
    2306:	d067      	beq.n	23d8 <__aeabi_dmul+0x184>
    2308:	2803      	cmp	r0, #3
    230a:	d100      	bne.n	230e <__aeabi_dmul+0xba>
    230c:	e20e      	b.n	272c <__aeabi_dmul+0x4d8>
    230e:	2801      	cmp	r0, #1
    2310:	d000      	beq.n	2314 <__aeabi_dmul+0xc0>
    2312:	e162      	b.n	25da <__aeabi_dmul+0x386>
    2314:	2300      	movs	r3, #0
    2316:	2400      	movs	r4, #0
    2318:	2200      	movs	r2, #0
    231a:	4699      	mov	r9, r3
    231c:	9901      	ldr	r1, [sp, #4]
    231e:	4001      	ands	r1, r0
    2320:	b2cd      	uxtb	r5, r1
    2322:	2100      	movs	r1, #0
    2324:	0312      	lsls	r2, r2, #12
    2326:	0d0b      	lsrs	r3, r1, #20
    2328:	0b12      	lsrs	r2, r2, #12
    232a:	051b      	lsls	r3, r3, #20
    232c:	4313      	orrs	r3, r2
    232e:	4a43      	ldr	r2, [pc, #268]	; (243c <__aeabi_dmul+0x1e8>)
    2330:	0524      	lsls	r4, r4, #20
    2332:	4013      	ands	r3, r2
    2334:	431c      	orrs	r4, r3
    2336:	0064      	lsls	r4, r4, #1
    2338:	07ed      	lsls	r5, r5, #31
    233a:	0864      	lsrs	r4, r4, #1
    233c:	432c      	orrs	r4, r5
    233e:	4648      	mov	r0, r9
    2340:	0021      	movs	r1, r4
    2342:	b007      	add	sp, #28
    2344:	bc3c      	pop	{r2, r3, r4, r5}
    2346:	4690      	mov	r8, r2
    2348:	4699      	mov	r9, r3
    234a:	46a2      	mov	sl, r4
    234c:	46ab      	mov	fp, r5
    234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2350:	4303      	orrs	r3, r0
    2352:	4699      	mov	r9, r3
    2354:	d04f      	beq.n	23f6 <__aeabi_dmul+0x1a2>
    2356:	465b      	mov	r3, fp
    2358:	2b00      	cmp	r3, #0
    235a:	d100      	bne.n	235e <__aeabi_dmul+0x10a>
    235c:	e189      	b.n	2672 <__aeabi_dmul+0x41e>
    235e:	4658      	mov	r0, fp
    2360:	f000 fe22 	bl	2fa8 <__clzsi2>
    2364:	0003      	movs	r3, r0
    2366:	3b0b      	subs	r3, #11
    2368:	2b1c      	cmp	r3, #28
    236a:	dd00      	ble.n	236e <__aeabi_dmul+0x11a>
    236c:	e17a      	b.n	2664 <__aeabi_dmul+0x410>
    236e:	221d      	movs	r2, #29
    2370:	1ad3      	subs	r3, r2, r3
    2372:	003a      	movs	r2, r7
    2374:	0001      	movs	r1, r0
    2376:	465c      	mov	r4, fp
    2378:	40da      	lsrs	r2, r3
    237a:	3908      	subs	r1, #8
    237c:	408c      	lsls	r4, r1
    237e:	0013      	movs	r3, r2
    2380:	408f      	lsls	r7, r1
    2382:	4323      	orrs	r3, r4
    2384:	469b      	mov	fp, r3
    2386:	46b9      	mov	r9, r7
    2388:	2300      	movs	r3, #0
    238a:	4e2d      	ldr	r6, [pc, #180]	; (2440 <__aeabi_dmul+0x1ec>)
    238c:	2700      	movs	r7, #0
    238e:	1a36      	subs	r6, r6, r0
    2390:	9302      	str	r3, [sp, #8]
    2392:	e784      	b.n	229e <__aeabi_dmul+0x4a>
    2394:	4653      	mov	r3, sl
    2396:	4323      	orrs	r3, r4
    2398:	d12a      	bne.n	23f0 <__aeabi_dmul+0x19c>
    239a:	2400      	movs	r4, #0
    239c:	2002      	movs	r0, #2
    239e:	e796      	b.n	22ce <__aeabi_dmul+0x7a>
    23a0:	4653      	mov	r3, sl
    23a2:	4323      	orrs	r3, r4
    23a4:	d020      	beq.n	23e8 <__aeabi_dmul+0x194>
    23a6:	2c00      	cmp	r4, #0
    23a8:	d100      	bne.n	23ac <__aeabi_dmul+0x158>
    23aa:	e157      	b.n	265c <__aeabi_dmul+0x408>
    23ac:	0020      	movs	r0, r4
    23ae:	f000 fdfb 	bl	2fa8 <__clzsi2>
    23b2:	0003      	movs	r3, r0
    23b4:	3b0b      	subs	r3, #11
    23b6:	2b1c      	cmp	r3, #28
    23b8:	dd00      	ble.n	23bc <__aeabi_dmul+0x168>
    23ba:	e149      	b.n	2650 <__aeabi_dmul+0x3fc>
    23bc:	211d      	movs	r1, #29
    23be:	1acb      	subs	r3, r1, r3
    23c0:	4651      	mov	r1, sl
    23c2:	0002      	movs	r2, r0
    23c4:	40d9      	lsrs	r1, r3
    23c6:	4653      	mov	r3, sl
    23c8:	3a08      	subs	r2, #8
    23ca:	4094      	lsls	r4, r2
    23cc:	4093      	lsls	r3, r2
    23ce:	430c      	orrs	r4, r1
    23d0:	4a1b      	ldr	r2, [pc, #108]	; (2440 <__aeabi_dmul+0x1ec>)
    23d2:	1a12      	subs	r2, r2, r0
    23d4:	2000      	movs	r0, #0
    23d6:	e77a      	b.n	22ce <__aeabi_dmul+0x7a>
    23d8:	2501      	movs	r5, #1
    23da:	9b01      	ldr	r3, [sp, #4]
    23dc:	4c14      	ldr	r4, [pc, #80]	; (2430 <__aeabi_dmul+0x1dc>)
    23de:	401d      	ands	r5, r3
    23e0:	2300      	movs	r3, #0
    23e2:	2200      	movs	r2, #0
    23e4:	4699      	mov	r9, r3
    23e6:	e79c      	b.n	2322 <__aeabi_dmul+0xce>
    23e8:	2400      	movs	r4, #0
    23ea:	2200      	movs	r2, #0
    23ec:	2001      	movs	r0, #1
    23ee:	e76e      	b.n	22ce <__aeabi_dmul+0x7a>
    23f0:	4653      	mov	r3, sl
    23f2:	2003      	movs	r0, #3
    23f4:	e76b      	b.n	22ce <__aeabi_dmul+0x7a>
    23f6:	2300      	movs	r3, #0
    23f8:	469b      	mov	fp, r3
    23fa:	3301      	adds	r3, #1
    23fc:	2704      	movs	r7, #4
    23fe:	2600      	movs	r6, #0
    2400:	9302      	str	r3, [sp, #8]
    2402:	e74c      	b.n	229e <__aeabi_dmul+0x4a>
    2404:	2303      	movs	r3, #3
    2406:	4681      	mov	r9, r0
    2408:	270c      	movs	r7, #12
    240a:	9302      	str	r3, [sp, #8]
    240c:	e747      	b.n	229e <__aeabi_dmul+0x4a>
    240e:	2280      	movs	r2, #128	; 0x80
    2410:	2300      	movs	r3, #0
    2412:	2500      	movs	r5, #0
    2414:	0312      	lsls	r2, r2, #12
    2416:	4699      	mov	r9, r3
    2418:	4c05      	ldr	r4, [pc, #20]	; (2430 <__aeabi_dmul+0x1dc>)
    241a:	e782      	b.n	2322 <__aeabi_dmul+0xce>
    241c:	465c      	mov	r4, fp
    241e:	464b      	mov	r3, r9
    2420:	9802      	ldr	r0, [sp, #8]
    2422:	e76f      	b.n	2304 <__aeabi_dmul+0xb0>
    2424:	465c      	mov	r4, fp
    2426:	464b      	mov	r3, r9
    2428:	9501      	str	r5, [sp, #4]
    242a:	9802      	ldr	r0, [sp, #8]
    242c:	e76a      	b.n	2304 <__aeabi_dmul+0xb0>
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	000007ff 	.word	0x000007ff
    2434:	fffffc01 	.word	0xfffffc01
    2438:	00003918 	.word	0x00003918
    243c:	800fffff 	.word	0x800fffff
    2440:	fffffc0d 	.word	0xfffffc0d
    2444:	464a      	mov	r2, r9
    2446:	4649      	mov	r1, r9
    2448:	0c17      	lsrs	r7, r2, #16
    244a:	0c1a      	lsrs	r2, r3, #16
    244c:	041b      	lsls	r3, r3, #16
    244e:	0c1b      	lsrs	r3, r3, #16
    2450:	0408      	lsls	r0, r1, #16
    2452:	0019      	movs	r1, r3
    2454:	0c00      	lsrs	r0, r0, #16
    2456:	4341      	muls	r1, r0
    2458:	0015      	movs	r5, r2
    245a:	4688      	mov	r8, r1
    245c:	0019      	movs	r1, r3
    245e:	437d      	muls	r5, r7
    2460:	4379      	muls	r1, r7
    2462:	9503      	str	r5, [sp, #12]
    2464:	4689      	mov	r9, r1
    2466:	0029      	movs	r1, r5
    2468:	0015      	movs	r5, r2
    246a:	4345      	muls	r5, r0
    246c:	444d      	add	r5, r9
    246e:	9502      	str	r5, [sp, #8]
    2470:	4645      	mov	r5, r8
    2472:	0c2d      	lsrs	r5, r5, #16
    2474:	46aa      	mov	sl, r5
    2476:	9d02      	ldr	r5, [sp, #8]
    2478:	4455      	add	r5, sl
    247a:	45a9      	cmp	r9, r5
    247c:	d906      	bls.n	248c <__aeabi_dmul+0x238>
    247e:	468a      	mov	sl, r1
    2480:	2180      	movs	r1, #128	; 0x80
    2482:	0249      	lsls	r1, r1, #9
    2484:	4689      	mov	r9, r1
    2486:	44ca      	add	sl, r9
    2488:	4651      	mov	r1, sl
    248a:	9103      	str	r1, [sp, #12]
    248c:	0c29      	lsrs	r1, r5, #16
    248e:	9104      	str	r1, [sp, #16]
    2490:	4641      	mov	r1, r8
    2492:	0409      	lsls	r1, r1, #16
    2494:	042d      	lsls	r5, r5, #16
    2496:	0c09      	lsrs	r1, r1, #16
    2498:	4688      	mov	r8, r1
    249a:	0029      	movs	r1, r5
    249c:	0c25      	lsrs	r5, r4, #16
    249e:	0424      	lsls	r4, r4, #16
    24a0:	4441      	add	r1, r8
    24a2:	0c24      	lsrs	r4, r4, #16
    24a4:	9105      	str	r1, [sp, #20]
    24a6:	0021      	movs	r1, r4
    24a8:	4341      	muls	r1, r0
    24aa:	4688      	mov	r8, r1
    24ac:	0021      	movs	r1, r4
    24ae:	4379      	muls	r1, r7
    24b0:	468a      	mov	sl, r1
    24b2:	4368      	muls	r0, r5
    24b4:	4641      	mov	r1, r8
    24b6:	4450      	add	r0, sl
    24b8:	4681      	mov	r9, r0
    24ba:	0c08      	lsrs	r0, r1, #16
    24bc:	4448      	add	r0, r9
    24be:	436f      	muls	r7, r5
    24c0:	4582      	cmp	sl, r0
    24c2:	d903      	bls.n	24cc <__aeabi_dmul+0x278>
    24c4:	2180      	movs	r1, #128	; 0x80
    24c6:	0249      	lsls	r1, r1, #9
    24c8:	4689      	mov	r9, r1
    24ca:	444f      	add	r7, r9
    24cc:	0c01      	lsrs	r1, r0, #16
    24ce:	4689      	mov	r9, r1
    24d0:	0039      	movs	r1, r7
    24d2:	4449      	add	r1, r9
    24d4:	9102      	str	r1, [sp, #8]
    24d6:	4641      	mov	r1, r8
    24d8:	040f      	lsls	r7, r1, #16
    24da:	9904      	ldr	r1, [sp, #16]
    24dc:	0c3f      	lsrs	r7, r7, #16
    24de:	4688      	mov	r8, r1
    24e0:	0400      	lsls	r0, r0, #16
    24e2:	19c0      	adds	r0, r0, r7
    24e4:	4480      	add	r8, r0
    24e6:	4641      	mov	r1, r8
    24e8:	9104      	str	r1, [sp, #16]
    24ea:	4659      	mov	r1, fp
    24ec:	0c0f      	lsrs	r7, r1, #16
    24ee:	0409      	lsls	r1, r1, #16
    24f0:	0c09      	lsrs	r1, r1, #16
    24f2:	4688      	mov	r8, r1
    24f4:	4359      	muls	r1, r3
    24f6:	468a      	mov	sl, r1
    24f8:	0039      	movs	r1, r7
    24fa:	4351      	muls	r1, r2
    24fc:	4689      	mov	r9, r1
    24fe:	4641      	mov	r1, r8
    2500:	434a      	muls	r2, r1
    2502:	4651      	mov	r1, sl
    2504:	0c09      	lsrs	r1, r1, #16
    2506:	468b      	mov	fp, r1
    2508:	437b      	muls	r3, r7
    250a:	18d2      	adds	r2, r2, r3
    250c:	445a      	add	r2, fp
    250e:	4293      	cmp	r3, r2
    2510:	d903      	bls.n	251a <__aeabi_dmul+0x2c6>
    2512:	2380      	movs	r3, #128	; 0x80
    2514:	025b      	lsls	r3, r3, #9
    2516:	469b      	mov	fp, r3
    2518:	44d9      	add	r9, fp
    251a:	4651      	mov	r1, sl
    251c:	0409      	lsls	r1, r1, #16
    251e:	0c09      	lsrs	r1, r1, #16
    2520:	468a      	mov	sl, r1
    2522:	4641      	mov	r1, r8
    2524:	4361      	muls	r1, r4
    2526:	437c      	muls	r4, r7
    2528:	0c13      	lsrs	r3, r2, #16
    252a:	0412      	lsls	r2, r2, #16
    252c:	444b      	add	r3, r9
    252e:	4452      	add	r2, sl
    2530:	46a1      	mov	r9, r4
    2532:	468a      	mov	sl, r1
    2534:	003c      	movs	r4, r7
    2536:	4641      	mov	r1, r8
    2538:	436c      	muls	r4, r5
    253a:	434d      	muls	r5, r1
    253c:	4651      	mov	r1, sl
    253e:	444d      	add	r5, r9
    2540:	0c0f      	lsrs	r7, r1, #16
    2542:	197d      	adds	r5, r7, r5
    2544:	45a9      	cmp	r9, r5
    2546:	d903      	bls.n	2550 <__aeabi_dmul+0x2fc>
    2548:	2180      	movs	r1, #128	; 0x80
    254a:	0249      	lsls	r1, r1, #9
    254c:	4688      	mov	r8, r1
    254e:	4444      	add	r4, r8
    2550:	9f04      	ldr	r7, [sp, #16]
    2552:	9903      	ldr	r1, [sp, #12]
    2554:	46b8      	mov	r8, r7
    2556:	4441      	add	r1, r8
    2558:	468b      	mov	fp, r1
    255a:	4583      	cmp	fp, r0
    255c:	4180      	sbcs	r0, r0
    255e:	4241      	negs	r1, r0
    2560:	4688      	mov	r8, r1
    2562:	4651      	mov	r1, sl
    2564:	0408      	lsls	r0, r1, #16
    2566:	042f      	lsls	r7, r5, #16
    2568:	0c00      	lsrs	r0, r0, #16
    256a:	183f      	adds	r7, r7, r0
    256c:	4658      	mov	r0, fp
    256e:	9902      	ldr	r1, [sp, #8]
    2570:	1810      	adds	r0, r2, r0
    2572:	4689      	mov	r9, r1
    2574:	4290      	cmp	r0, r2
    2576:	4192      	sbcs	r2, r2
    2578:	444f      	add	r7, r9
    257a:	46ba      	mov	sl, r7
    257c:	4252      	negs	r2, r2
    257e:	4699      	mov	r9, r3
    2580:	4693      	mov	fp, r2
    2582:	44c2      	add	sl, r8
    2584:	44d1      	add	r9, sl
    2586:	44cb      	add	fp, r9
    2588:	428f      	cmp	r7, r1
    258a:	41bf      	sbcs	r7, r7
    258c:	45c2      	cmp	sl, r8
    258e:	4189      	sbcs	r1, r1
    2590:	4599      	cmp	r9, r3
    2592:	419b      	sbcs	r3, r3
    2594:	4593      	cmp	fp, r2
    2596:	4192      	sbcs	r2, r2
    2598:	427f      	negs	r7, r7
    259a:	4249      	negs	r1, r1
    259c:	0c2d      	lsrs	r5, r5, #16
    259e:	4252      	negs	r2, r2
    25a0:	430f      	orrs	r7, r1
    25a2:	425b      	negs	r3, r3
    25a4:	4313      	orrs	r3, r2
    25a6:	197f      	adds	r7, r7, r5
    25a8:	18ff      	adds	r7, r7, r3
    25aa:	465b      	mov	r3, fp
    25ac:	193c      	adds	r4, r7, r4
    25ae:	0ddb      	lsrs	r3, r3, #23
    25b0:	9a05      	ldr	r2, [sp, #20]
    25b2:	0264      	lsls	r4, r4, #9
    25b4:	431c      	orrs	r4, r3
    25b6:	0243      	lsls	r3, r0, #9
    25b8:	4313      	orrs	r3, r2
    25ba:	1e5d      	subs	r5, r3, #1
    25bc:	41ab      	sbcs	r3, r5
    25be:	465a      	mov	r2, fp
    25c0:	0dc0      	lsrs	r0, r0, #23
    25c2:	4303      	orrs	r3, r0
    25c4:	0252      	lsls	r2, r2, #9
    25c6:	4313      	orrs	r3, r2
    25c8:	01e2      	lsls	r2, r4, #7
    25ca:	d556      	bpl.n	267a <__aeabi_dmul+0x426>
    25cc:	2001      	movs	r0, #1
    25ce:	085a      	lsrs	r2, r3, #1
    25d0:	4003      	ands	r3, r0
    25d2:	4313      	orrs	r3, r2
    25d4:	07e2      	lsls	r2, r4, #31
    25d6:	4313      	orrs	r3, r2
    25d8:	0864      	lsrs	r4, r4, #1
    25da:	485a      	ldr	r0, [pc, #360]	; (2744 <__aeabi_dmul+0x4f0>)
    25dc:	4460      	add	r0, ip
    25de:	2800      	cmp	r0, #0
    25e0:	dd4d      	ble.n	267e <__aeabi_dmul+0x42a>
    25e2:	075a      	lsls	r2, r3, #29
    25e4:	d009      	beq.n	25fa <__aeabi_dmul+0x3a6>
    25e6:	220f      	movs	r2, #15
    25e8:	401a      	ands	r2, r3
    25ea:	2a04      	cmp	r2, #4
    25ec:	d005      	beq.n	25fa <__aeabi_dmul+0x3a6>
    25ee:	1d1a      	adds	r2, r3, #4
    25f0:	429a      	cmp	r2, r3
    25f2:	419b      	sbcs	r3, r3
    25f4:	425b      	negs	r3, r3
    25f6:	18e4      	adds	r4, r4, r3
    25f8:	0013      	movs	r3, r2
    25fa:	01e2      	lsls	r2, r4, #7
    25fc:	d504      	bpl.n	2608 <__aeabi_dmul+0x3b4>
    25fe:	2080      	movs	r0, #128	; 0x80
    2600:	4a51      	ldr	r2, [pc, #324]	; (2748 <__aeabi_dmul+0x4f4>)
    2602:	00c0      	lsls	r0, r0, #3
    2604:	4014      	ands	r4, r2
    2606:	4460      	add	r0, ip
    2608:	4a50      	ldr	r2, [pc, #320]	; (274c <__aeabi_dmul+0x4f8>)
    260a:	4290      	cmp	r0, r2
    260c:	dd00      	ble.n	2610 <__aeabi_dmul+0x3bc>
    260e:	e6e3      	b.n	23d8 <__aeabi_dmul+0x184>
    2610:	2501      	movs	r5, #1
    2612:	08db      	lsrs	r3, r3, #3
    2614:	0762      	lsls	r2, r4, #29
    2616:	431a      	orrs	r2, r3
    2618:	0264      	lsls	r4, r4, #9
    261a:	9b01      	ldr	r3, [sp, #4]
    261c:	4691      	mov	r9, r2
    261e:	0b22      	lsrs	r2, r4, #12
    2620:	0544      	lsls	r4, r0, #21
    2622:	0d64      	lsrs	r4, r4, #21
    2624:	401d      	ands	r5, r3
    2626:	e67c      	b.n	2322 <__aeabi_dmul+0xce>
    2628:	2280      	movs	r2, #128	; 0x80
    262a:	4659      	mov	r1, fp
    262c:	0312      	lsls	r2, r2, #12
    262e:	4211      	tst	r1, r2
    2630:	d008      	beq.n	2644 <__aeabi_dmul+0x3f0>
    2632:	4214      	tst	r4, r2
    2634:	d106      	bne.n	2644 <__aeabi_dmul+0x3f0>
    2636:	4322      	orrs	r2, r4
    2638:	0312      	lsls	r2, r2, #12
    263a:	0b12      	lsrs	r2, r2, #12
    263c:	4645      	mov	r5, r8
    263e:	4699      	mov	r9, r3
    2640:	4c43      	ldr	r4, [pc, #268]	; (2750 <__aeabi_dmul+0x4fc>)
    2642:	e66e      	b.n	2322 <__aeabi_dmul+0xce>
    2644:	465b      	mov	r3, fp
    2646:	431a      	orrs	r2, r3
    2648:	0312      	lsls	r2, r2, #12
    264a:	0b12      	lsrs	r2, r2, #12
    264c:	4c40      	ldr	r4, [pc, #256]	; (2750 <__aeabi_dmul+0x4fc>)
    264e:	e668      	b.n	2322 <__aeabi_dmul+0xce>
    2650:	0003      	movs	r3, r0
    2652:	4654      	mov	r4, sl
    2654:	3b28      	subs	r3, #40	; 0x28
    2656:	409c      	lsls	r4, r3
    2658:	2300      	movs	r3, #0
    265a:	e6b9      	b.n	23d0 <__aeabi_dmul+0x17c>
    265c:	f000 fca4 	bl	2fa8 <__clzsi2>
    2660:	3020      	adds	r0, #32
    2662:	e6a6      	b.n	23b2 <__aeabi_dmul+0x15e>
    2664:	0003      	movs	r3, r0
    2666:	3b28      	subs	r3, #40	; 0x28
    2668:	409f      	lsls	r7, r3
    266a:	2300      	movs	r3, #0
    266c:	46bb      	mov	fp, r7
    266e:	4699      	mov	r9, r3
    2670:	e68a      	b.n	2388 <__aeabi_dmul+0x134>
    2672:	f000 fc99 	bl	2fa8 <__clzsi2>
    2676:	3020      	adds	r0, #32
    2678:	e674      	b.n	2364 <__aeabi_dmul+0x110>
    267a:	46b4      	mov	ip, r6
    267c:	e7ad      	b.n	25da <__aeabi_dmul+0x386>
    267e:	2501      	movs	r5, #1
    2680:	1a2a      	subs	r2, r5, r0
    2682:	2a38      	cmp	r2, #56	; 0x38
    2684:	dd06      	ble.n	2694 <__aeabi_dmul+0x440>
    2686:	9b01      	ldr	r3, [sp, #4]
    2688:	2400      	movs	r4, #0
    268a:	401d      	ands	r5, r3
    268c:	2300      	movs	r3, #0
    268e:	2200      	movs	r2, #0
    2690:	4699      	mov	r9, r3
    2692:	e646      	b.n	2322 <__aeabi_dmul+0xce>
    2694:	2a1f      	cmp	r2, #31
    2696:	dc21      	bgt.n	26dc <__aeabi_dmul+0x488>
    2698:	2520      	movs	r5, #32
    269a:	0020      	movs	r0, r4
    269c:	1aad      	subs	r5, r5, r2
    269e:	001e      	movs	r6, r3
    26a0:	40ab      	lsls	r3, r5
    26a2:	40a8      	lsls	r0, r5
    26a4:	40d6      	lsrs	r6, r2
    26a6:	1e5d      	subs	r5, r3, #1
    26a8:	41ab      	sbcs	r3, r5
    26aa:	4330      	orrs	r0, r6
    26ac:	4318      	orrs	r0, r3
    26ae:	40d4      	lsrs	r4, r2
    26b0:	0743      	lsls	r3, r0, #29
    26b2:	d009      	beq.n	26c8 <__aeabi_dmul+0x474>
    26b4:	230f      	movs	r3, #15
    26b6:	4003      	ands	r3, r0
    26b8:	2b04      	cmp	r3, #4
    26ba:	d005      	beq.n	26c8 <__aeabi_dmul+0x474>
    26bc:	0003      	movs	r3, r0
    26be:	1d18      	adds	r0, r3, #4
    26c0:	4298      	cmp	r0, r3
    26c2:	419b      	sbcs	r3, r3
    26c4:	425b      	negs	r3, r3
    26c6:	18e4      	adds	r4, r4, r3
    26c8:	0223      	lsls	r3, r4, #8
    26ca:	d521      	bpl.n	2710 <__aeabi_dmul+0x4bc>
    26cc:	2501      	movs	r5, #1
    26ce:	9b01      	ldr	r3, [sp, #4]
    26d0:	2401      	movs	r4, #1
    26d2:	401d      	ands	r5, r3
    26d4:	2300      	movs	r3, #0
    26d6:	2200      	movs	r2, #0
    26d8:	4699      	mov	r9, r3
    26da:	e622      	b.n	2322 <__aeabi_dmul+0xce>
    26dc:	251f      	movs	r5, #31
    26de:	0021      	movs	r1, r4
    26e0:	426d      	negs	r5, r5
    26e2:	1a28      	subs	r0, r5, r0
    26e4:	40c1      	lsrs	r1, r0
    26e6:	0008      	movs	r0, r1
    26e8:	2a20      	cmp	r2, #32
    26ea:	d01d      	beq.n	2728 <__aeabi_dmul+0x4d4>
    26ec:	355f      	adds	r5, #95	; 0x5f
    26ee:	1aaa      	subs	r2, r5, r2
    26f0:	4094      	lsls	r4, r2
    26f2:	4323      	orrs	r3, r4
    26f4:	1e5c      	subs	r4, r3, #1
    26f6:	41a3      	sbcs	r3, r4
    26f8:	2507      	movs	r5, #7
    26fa:	4303      	orrs	r3, r0
    26fc:	401d      	ands	r5, r3
    26fe:	2200      	movs	r2, #0
    2700:	2d00      	cmp	r5, #0
    2702:	d009      	beq.n	2718 <__aeabi_dmul+0x4c4>
    2704:	220f      	movs	r2, #15
    2706:	2400      	movs	r4, #0
    2708:	401a      	ands	r2, r3
    270a:	0018      	movs	r0, r3
    270c:	2a04      	cmp	r2, #4
    270e:	d1d6      	bne.n	26be <__aeabi_dmul+0x46a>
    2710:	0003      	movs	r3, r0
    2712:	0765      	lsls	r5, r4, #29
    2714:	0264      	lsls	r4, r4, #9
    2716:	0b22      	lsrs	r2, r4, #12
    2718:	08db      	lsrs	r3, r3, #3
    271a:	432b      	orrs	r3, r5
    271c:	2501      	movs	r5, #1
    271e:	4699      	mov	r9, r3
    2720:	9b01      	ldr	r3, [sp, #4]
    2722:	2400      	movs	r4, #0
    2724:	401d      	ands	r5, r3
    2726:	e5fc      	b.n	2322 <__aeabi_dmul+0xce>
    2728:	2400      	movs	r4, #0
    272a:	e7e2      	b.n	26f2 <__aeabi_dmul+0x49e>
    272c:	2280      	movs	r2, #128	; 0x80
    272e:	2501      	movs	r5, #1
    2730:	0312      	lsls	r2, r2, #12
    2732:	4322      	orrs	r2, r4
    2734:	9901      	ldr	r1, [sp, #4]
    2736:	0312      	lsls	r2, r2, #12
    2738:	0b12      	lsrs	r2, r2, #12
    273a:	400d      	ands	r5, r1
    273c:	4699      	mov	r9, r3
    273e:	4c04      	ldr	r4, [pc, #16]	; (2750 <__aeabi_dmul+0x4fc>)
    2740:	e5ef      	b.n	2322 <__aeabi_dmul+0xce>
    2742:	46c0      	nop			; (mov r8, r8)
    2744:	000003ff 	.word	0x000003ff
    2748:	feffffff 	.word	0xfeffffff
    274c:	000007fe 	.word	0x000007fe
    2750:	000007ff 	.word	0x000007ff

00002754 <__aeabi_dsub>:
    2754:	b5f0      	push	{r4, r5, r6, r7, lr}
    2756:	4646      	mov	r6, r8
    2758:	46d6      	mov	lr, sl
    275a:	464f      	mov	r7, r9
    275c:	030c      	lsls	r4, r1, #12
    275e:	b5c0      	push	{r6, r7, lr}
    2760:	0fcd      	lsrs	r5, r1, #31
    2762:	004e      	lsls	r6, r1, #1
    2764:	0a61      	lsrs	r1, r4, #9
    2766:	0f44      	lsrs	r4, r0, #29
    2768:	430c      	orrs	r4, r1
    276a:	00c1      	lsls	r1, r0, #3
    276c:	0058      	lsls	r0, r3, #1
    276e:	0d40      	lsrs	r0, r0, #21
    2770:	4684      	mov	ip, r0
    2772:	468a      	mov	sl, r1
    2774:	000f      	movs	r7, r1
    2776:	0319      	lsls	r1, r3, #12
    2778:	0f50      	lsrs	r0, r2, #29
    277a:	0a49      	lsrs	r1, r1, #9
    277c:	4301      	orrs	r1, r0
    277e:	48c6      	ldr	r0, [pc, #792]	; (2a98 <__aeabi_dsub+0x344>)
    2780:	0d76      	lsrs	r6, r6, #21
    2782:	46a8      	mov	r8, r5
    2784:	0fdb      	lsrs	r3, r3, #31
    2786:	00d2      	lsls	r2, r2, #3
    2788:	4584      	cmp	ip, r0
    278a:	d100      	bne.n	278e <__aeabi_dsub+0x3a>
    278c:	e0d8      	b.n	2940 <__aeabi_dsub+0x1ec>
    278e:	2001      	movs	r0, #1
    2790:	4043      	eors	r3, r0
    2792:	42ab      	cmp	r3, r5
    2794:	d100      	bne.n	2798 <__aeabi_dsub+0x44>
    2796:	e0a6      	b.n	28e6 <__aeabi_dsub+0x192>
    2798:	4660      	mov	r0, ip
    279a:	1a35      	subs	r5, r6, r0
    279c:	2d00      	cmp	r5, #0
    279e:	dc00      	bgt.n	27a2 <__aeabi_dsub+0x4e>
    27a0:	e105      	b.n	29ae <__aeabi_dsub+0x25a>
    27a2:	2800      	cmp	r0, #0
    27a4:	d110      	bne.n	27c8 <__aeabi_dsub+0x74>
    27a6:	000b      	movs	r3, r1
    27a8:	4313      	orrs	r3, r2
    27aa:	d100      	bne.n	27ae <__aeabi_dsub+0x5a>
    27ac:	e0d7      	b.n	295e <__aeabi_dsub+0x20a>
    27ae:	1e6b      	subs	r3, r5, #1
    27b0:	2b00      	cmp	r3, #0
    27b2:	d000      	beq.n	27b6 <__aeabi_dsub+0x62>
    27b4:	e14b      	b.n	2a4e <__aeabi_dsub+0x2fa>
    27b6:	4653      	mov	r3, sl
    27b8:	1a9f      	subs	r7, r3, r2
    27ba:	45ba      	cmp	sl, r7
    27bc:	4180      	sbcs	r0, r0
    27be:	1a64      	subs	r4, r4, r1
    27c0:	4240      	negs	r0, r0
    27c2:	1a24      	subs	r4, r4, r0
    27c4:	2601      	movs	r6, #1
    27c6:	e01e      	b.n	2806 <__aeabi_dsub+0xb2>
    27c8:	4bb3      	ldr	r3, [pc, #716]	; (2a98 <__aeabi_dsub+0x344>)
    27ca:	429e      	cmp	r6, r3
    27cc:	d048      	beq.n	2860 <__aeabi_dsub+0x10c>
    27ce:	2380      	movs	r3, #128	; 0x80
    27d0:	041b      	lsls	r3, r3, #16
    27d2:	4319      	orrs	r1, r3
    27d4:	2d38      	cmp	r5, #56	; 0x38
    27d6:	dd00      	ble.n	27da <__aeabi_dsub+0x86>
    27d8:	e119      	b.n	2a0e <__aeabi_dsub+0x2ba>
    27da:	2d1f      	cmp	r5, #31
    27dc:	dd00      	ble.n	27e0 <__aeabi_dsub+0x8c>
    27de:	e14c      	b.n	2a7a <__aeabi_dsub+0x326>
    27e0:	2320      	movs	r3, #32
    27e2:	000f      	movs	r7, r1
    27e4:	1b5b      	subs	r3, r3, r5
    27e6:	0010      	movs	r0, r2
    27e8:	409a      	lsls	r2, r3
    27ea:	409f      	lsls	r7, r3
    27ec:	40e8      	lsrs	r0, r5
    27ee:	1e53      	subs	r3, r2, #1
    27f0:	419a      	sbcs	r2, r3
    27f2:	40e9      	lsrs	r1, r5
    27f4:	4307      	orrs	r7, r0
    27f6:	4317      	orrs	r7, r2
    27f8:	4653      	mov	r3, sl
    27fa:	1bdf      	subs	r7, r3, r7
    27fc:	1a61      	subs	r1, r4, r1
    27fe:	45ba      	cmp	sl, r7
    2800:	41a4      	sbcs	r4, r4
    2802:	4264      	negs	r4, r4
    2804:	1b0c      	subs	r4, r1, r4
    2806:	0223      	lsls	r3, r4, #8
    2808:	d400      	bmi.n	280c <__aeabi_dsub+0xb8>
    280a:	e0c5      	b.n	2998 <__aeabi_dsub+0x244>
    280c:	0264      	lsls	r4, r4, #9
    280e:	0a65      	lsrs	r5, r4, #9
    2810:	2d00      	cmp	r5, #0
    2812:	d100      	bne.n	2816 <__aeabi_dsub+0xc2>
    2814:	e0f6      	b.n	2a04 <__aeabi_dsub+0x2b0>
    2816:	0028      	movs	r0, r5
    2818:	f000 fbc6 	bl	2fa8 <__clzsi2>
    281c:	0003      	movs	r3, r0
    281e:	3b08      	subs	r3, #8
    2820:	2b1f      	cmp	r3, #31
    2822:	dd00      	ble.n	2826 <__aeabi_dsub+0xd2>
    2824:	e0e9      	b.n	29fa <__aeabi_dsub+0x2a6>
    2826:	2220      	movs	r2, #32
    2828:	003c      	movs	r4, r7
    282a:	1ad2      	subs	r2, r2, r3
    282c:	409d      	lsls	r5, r3
    282e:	40d4      	lsrs	r4, r2
    2830:	409f      	lsls	r7, r3
    2832:	4325      	orrs	r5, r4
    2834:	429e      	cmp	r6, r3
    2836:	dd00      	ble.n	283a <__aeabi_dsub+0xe6>
    2838:	e0db      	b.n	29f2 <__aeabi_dsub+0x29e>
    283a:	1b9e      	subs	r6, r3, r6
    283c:	1c73      	adds	r3, r6, #1
    283e:	2b1f      	cmp	r3, #31
    2840:	dd00      	ble.n	2844 <__aeabi_dsub+0xf0>
    2842:	e10a      	b.n	2a5a <__aeabi_dsub+0x306>
    2844:	2220      	movs	r2, #32
    2846:	0038      	movs	r0, r7
    2848:	1ad2      	subs	r2, r2, r3
    284a:	0029      	movs	r1, r5
    284c:	4097      	lsls	r7, r2
    284e:	002c      	movs	r4, r5
    2850:	4091      	lsls	r1, r2
    2852:	40d8      	lsrs	r0, r3
    2854:	1e7a      	subs	r2, r7, #1
    2856:	4197      	sbcs	r7, r2
    2858:	40dc      	lsrs	r4, r3
    285a:	2600      	movs	r6, #0
    285c:	4301      	orrs	r1, r0
    285e:	430f      	orrs	r7, r1
    2860:	077b      	lsls	r3, r7, #29
    2862:	d009      	beq.n	2878 <__aeabi_dsub+0x124>
    2864:	230f      	movs	r3, #15
    2866:	403b      	ands	r3, r7
    2868:	2b04      	cmp	r3, #4
    286a:	d005      	beq.n	2878 <__aeabi_dsub+0x124>
    286c:	1d3b      	adds	r3, r7, #4
    286e:	42bb      	cmp	r3, r7
    2870:	41bf      	sbcs	r7, r7
    2872:	427f      	negs	r7, r7
    2874:	19e4      	adds	r4, r4, r7
    2876:	001f      	movs	r7, r3
    2878:	0223      	lsls	r3, r4, #8
    287a:	d525      	bpl.n	28c8 <__aeabi_dsub+0x174>
    287c:	4b86      	ldr	r3, [pc, #536]	; (2a98 <__aeabi_dsub+0x344>)
    287e:	3601      	adds	r6, #1
    2880:	429e      	cmp	r6, r3
    2882:	d100      	bne.n	2886 <__aeabi_dsub+0x132>
    2884:	e0af      	b.n	29e6 <__aeabi_dsub+0x292>
    2886:	4b85      	ldr	r3, [pc, #532]	; (2a9c <__aeabi_dsub+0x348>)
    2888:	2501      	movs	r5, #1
    288a:	401c      	ands	r4, r3
    288c:	4643      	mov	r3, r8
    288e:	0762      	lsls	r2, r4, #29
    2890:	08ff      	lsrs	r7, r7, #3
    2892:	0264      	lsls	r4, r4, #9
    2894:	0576      	lsls	r6, r6, #21
    2896:	4317      	orrs	r7, r2
    2898:	0b24      	lsrs	r4, r4, #12
    289a:	0d76      	lsrs	r6, r6, #21
    289c:	401d      	ands	r5, r3
    289e:	2100      	movs	r1, #0
    28a0:	0324      	lsls	r4, r4, #12
    28a2:	0b23      	lsrs	r3, r4, #12
    28a4:	0d0c      	lsrs	r4, r1, #20
    28a6:	4a7e      	ldr	r2, [pc, #504]	; (2aa0 <__aeabi_dsub+0x34c>)
    28a8:	0524      	lsls	r4, r4, #20
    28aa:	431c      	orrs	r4, r3
    28ac:	4014      	ands	r4, r2
    28ae:	0533      	lsls	r3, r6, #20
    28b0:	4323      	orrs	r3, r4
    28b2:	005b      	lsls	r3, r3, #1
    28b4:	07ed      	lsls	r5, r5, #31
    28b6:	085b      	lsrs	r3, r3, #1
    28b8:	432b      	orrs	r3, r5
    28ba:	0038      	movs	r0, r7
    28bc:	0019      	movs	r1, r3
    28be:	bc1c      	pop	{r2, r3, r4}
    28c0:	4690      	mov	r8, r2
    28c2:	4699      	mov	r9, r3
    28c4:	46a2      	mov	sl, r4
    28c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28c8:	2501      	movs	r5, #1
    28ca:	4643      	mov	r3, r8
    28cc:	0762      	lsls	r2, r4, #29
    28ce:	08ff      	lsrs	r7, r7, #3
    28d0:	4317      	orrs	r7, r2
    28d2:	08e4      	lsrs	r4, r4, #3
    28d4:	401d      	ands	r5, r3
    28d6:	4b70      	ldr	r3, [pc, #448]	; (2a98 <__aeabi_dsub+0x344>)
    28d8:	429e      	cmp	r6, r3
    28da:	d036      	beq.n	294a <__aeabi_dsub+0x1f6>
    28dc:	0324      	lsls	r4, r4, #12
    28de:	0576      	lsls	r6, r6, #21
    28e0:	0b24      	lsrs	r4, r4, #12
    28e2:	0d76      	lsrs	r6, r6, #21
    28e4:	e7db      	b.n	289e <__aeabi_dsub+0x14a>
    28e6:	4663      	mov	r3, ip
    28e8:	1af3      	subs	r3, r6, r3
    28ea:	2b00      	cmp	r3, #0
    28ec:	dc00      	bgt.n	28f0 <__aeabi_dsub+0x19c>
    28ee:	e094      	b.n	2a1a <__aeabi_dsub+0x2c6>
    28f0:	4660      	mov	r0, ip
    28f2:	2800      	cmp	r0, #0
    28f4:	d035      	beq.n	2962 <__aeabi_dsub+0x20e>
    28f6:	4868      	ldr	r0, [pc, #416]	; (2a98 <__aeabi_dsub+0x344>)
    28f8:	4286      	cmp	r6, r0
    28fa:	d0b1      	beq.n	2860 <__aeabi_dsub+0x10c>
    28fc:	2780      	movs	r7, #128	; 0x80
    28fe:	043f      	lsls	r7, r7, #16
    2900:	4339      	orrs	r1, r7
    2902:	2b38      	cmp	r3, #56	; 0x38
    2904:	dc00      	bgt.n	2908 <__aeabi_dsub+0x1b4>
    2906:	e0fd      	b.n	2b04 <__aeabi_dsub+0x3b0>
    2908:	430a      	orrs	r2, r1
    290a:	0017      	movs	r7, r2
    290c:	2100      	movs	r1, #0
    290e:	1e7a      	subs	r2, r7, #1
    2910:	4197      	sbcs	r7, r2
    2912:	4457      	add	r7, sl
    2914:	4557      	cmp	r7, sl
    2916:	4180      	sbcs	r0, r0
    2918:	1909      	adds	r1, r1, r4
    291a:	4244      	negs	r4, r0
    291c:	190c      	adds	r4, r1, r4
    291e:	0223      	lsls	r3, r4, #8
    2920:	d53a      	bpl.n	2998 <__aeabi_dsub+0x244>
    2922:	4b5d      	ldr	r3, [pc, #372]	; (2a98 <__aeabi_dsub+0x344>)
    2924:	3601      	adds	r6, #1
    2926:	429e      	cmp	r6, r3
    2928:	d100      	bne.n	292c <__aeabi_dsub+0x1d8>
    292a:	e14b      	b.n	2bc4 <__aeabi_dsub+0x470>
    292c:	2201      	movs	r2, #1
    292e:	4b5b      	ldr	r3, [pc, #364]	; (2a9c <__aeabi_dsub+0x348>)
    2930:	401c      	ands	r4, r3
    2932:	087b      	lsrs	r3, r7, #1
    2934:	4017      	ands	r7, r2
    2936:	431f      	orrs	r7, r3
    2938:	07e2      	lsls	r2, r4, #31
    293a:	4317      	orrs	r7, r2
    293c:	0864      	lsrs	r4, r4, #1
    293e:	e78f      	b.n	2860 <__aeabi_dsub+0x10c>
    2940:	0008      	movs	r0, r1
    2942:	4310      	orrs	r0, r2
    2944:	d000      	beq.n	2948 <__aeabi_dsub+0x1f4>
    2946:	e724      	b.n	2792 <__aeabi_dsub+0x3e>
    2948:	e721      	b.n	278e <__aeabi_dsub+0x3a>
    294a:	0023      	movs	r3, r4
    294c:	433b      	orrs	r3, r7
    294e:	d100      	bne.n	2952 <__aeabi_dsub+0x1fe>
    2950:	e1b9      	b.n	2cc6 <__aeabi_dsub+0x572>
    2952:	2280      	movs	r2, #128	; 0x80
    2954:	0312      	lsls	r2, r2, #12
    2956:	4314      	orrs	r4, r2
    2958:	0324      	lsls	r4, r4, #12
    295a:	0b24      	lsrs	r4, r4, #12
    295c:	e79f      	b.n	289e <__aeabi_dsub+0x14a>
    295e:	002e      	movs	r6, r5
    2960:	e77e      	b.n	2860 <__aeabi_dsub+0x10c>
    2962:	0008      	movs	r0, r1
    2964:	4310      	orrs	r0, r2
    2966:	d100      	bne.n	296a <__aeabi_dsub+0x216>
    2968:	e0ca      	b.n	2b00 <__aeabi_dsub+0x3ac>
    296a:	1e58      	subs	r0, r3, #1
    296c:	4684      	mov	ip, r0
    296e:	2800      	cmp	r0, #0
    2970:	d000      	beq.n	2974 <__aeabi_dsub+0x220>
    2972:	e0e7      	b.n	2b44 <__aeabi_dsub+0x3f0>
    2974:	4452      	add	r2, sl
    2976:	4552      	cmp	r2, sl
    2978:	4180      	sbcs	r0, r0
    297a:	1864      	adds	r4, r4, r1
    297c:	4240      	negs	r0, r0
    297e:	1824      	adds	r4, r4, r0
    2980:	0017      	movs	r7, r2
    2982:	2601      	movs	r6, #1
    2984:	0223      	lsls	r3, r4, #8
    2986:	d507      	bpl.n	2998 <__aeabi_dsub+0x244>
    2988:	2602      	movs	r6, #2
    298a:	e7cf      	b.n	292c <__aeabi_dsub+0x1d8>
    298c:	4664      	mov	r4, ip
    298e:	432c      	orrs	r4, r5
    2990:	d100      	bne.n	2994 <__aeabi_dsub+0x240>
    2992:	e1b3      	b.n	2cfc <__aeabi_dsub+0x5a8>
    2994:	002c      	movs	r4, r5
    2996:	4667      	mov	r7, ip
    2998:	077b      	lsls	r3, r7, #29
    299a:	d000      	beq.n	299e <__aeabi_dsub+0x24a>
    299c:	e762      	b.n	2864 <__aeabi_dsub+0x110>
    299e:	0763      	lsls	r3, r4, #29
    29a0:	08ff      	lsrs	r7, r7, #3
    29a2:	431f      	orrs	r7, r3
    29a4:	2501      	movs	r5, #1
    29a6:	4643      	mov	r3, r8
    29a8:	08e4      	lsrs	r4, r4, #3
    29aa:	401d      	ands	r5, r3
    29ac:	e793      	b.n	28d6 <__aeabi_dsub+0x182>
    29ae:	2d00      	cmp	r5, #0
    29b0:	d178      	bne.n	2aa4 <__aeabi_dsub+0x350>
    29b2:	1c75      	adds	r5, r6, #1
    29b4:	056d      	lsls	r5, r5, #21
    29b6:	0d6d      	lsrs	r5, r5, #21
    29b8:	2d01      	cmp	r5, #1
    29ba:	dc00      	bgt.n	29be <__aeabi_dsub+0x26a>
    29bc:	e0f2      	b.n	2ba4 <__aeabi_dsub+0x450>
    29be:	4650      	mov	r0, sl
    29c0:	1a80      	subs	r0, r0, r2
    29c2:	4582      	cmp	sl, r0
    29c4:	41bf      	sbcs	r7, r7
    29c6:	1a65      	subs	r5, r4, r1
    29c8:	427f      	negs	r7, r7
    29ca:	1bed      	subs	r5, r5, r7
    29cc:	4684      	mov	ip, r0
    29ce:	0228      	lsls	r0, r5, #8
    29d0:	d400      	bmi.n	29d4 <__aeabi_dsub+0x280>
    29d2:	e08c      	b.n	2aee <__aeabi_dsub+0x39a>
    29d4:	4650      	mov	r0, sl
    29d6:	1a17      	subs	r7, r2, r0
    29d8:	42ba      	cmp	r2, r7
    29da:	4192      	sbcs	r2, r2
    29dc:	1b0c      	subs	r4, r1, r4
    29de:	4255      	negs	r5, r2
    29e0:	1b65      	subs	r5, r4, r5
    29e2:	4698      	mov	r8, r3
    29e4:	e714      	b.n	2810 <__aeabi_dsub+0xbc>
    29e6:	2501      	movs	r5, #1
    29e8:	4643      	mov	r3, r8
    29ea:	2400      	movs	r4, #0
    29ec:	401d      	ands	r5, r3
    29ee:	2700      	movs	r7, #0
    29f0:	e755      	b.n	289e <__aeabi_dsub+0x14a>
    29f2:	4c2a      	ldr	r4, [pc, #168]	; (2a9c <__aeabi_dsub+0x348>)
    29f4:	1af6      	subs	r6, r6, r3
    29f6:	402c      	ands	r4, r5
    29f8:	e732      	b.n	2860 <__aeabi_dsub+0x10c>
    29fa:	003d      	movs	r5, r7
    29fc:	3828      	subs	r0, #40	; 0x28
    29fe:	4085      	lsls	r5, r0
    2a00:	2700      	movs	r7, #0
    2a02:	e717      	b.n	2834 <__aeabi_dsub+0xe0>
    2a04:	0038      	movs	r0, r7
    2a06:	f000 facf 	bl	2fa8 <__clzsi2>
    2a0a:	3020      	adds	r0, #32
    2a0c:	e706      	b.n	281c <__aeabi_dsub+0xc8>
    2a0e:	430a      	orrs	r2, r1
    2a10:	0017      	movs	r7, r2
    2a12:	2100      	movs	r1, #0
    2a14:	1e7a      	subs	r2, r7, #1
    2a16:	4197      	sbcs	r7, r2
    2a18:	e6ee      	b.n	27f8 <__aeabi_dsub+0xa4>
    2a1a:	2b00      	cmp	r3, #0
    2a1c:	d000      	beq.n	2a20 <__aeabi_dsub+0x2cc>
    2a1e:	e0e5      	b.n	2bec <__aeabi_dsub+0x498>
    2a20:	1c73      	adds	r3, r6, #1
    2a22:	469c      	mov	ip, r3
    2a24:	055b      	lsls	r3, r3, #21
    2a26:	0d5b      	lsrs	r3, r3, #21
    2a28:	2b01      	cmp	r3, #1
    2a2a:	dc00      	bgt.n	2a2e <__aeabi_dsub+0x2da>
    2a2c:	e09f      	b.n	2b6e <__aeabi_dsub+0x41a>
    2a2e:	4b1a      	ldr	r3, [pc, #104]	; (2a98 <__aeabi_dsub+0x344>)
    2a30:	459c      	cmp	ip, r3
    2a32:	d100      	bne.n	2a36 <__aeabi_dsub+0x2e2>
    2a34:	e0c5      	b.n	2bc2 <__aeabi_dsub+0x46e>
    2a36:	4452      	add	r2, sl
    2a38:	4552      	cmp	r2, sl
    2a3a:	4180      	sbcs	r0, r0
    2a3c:	1864      	adds	r4, r4, r1
    2a3e:	4240      	negs	r0, r0
    2a40:	1824      	adds	r4, r4, r0
    2a42:	07e7      	lsls	r7, r4, #31
    2a44:	0852      	lsrs	r2, r2, #1
    2a46:	4317      	orrs	r7, r2
    2a48:	0864      	lsrs	r4, r4, #1
    2a4a:	4666      	mov	r6, ip
    2a4c:	e708      	b.n	2860 <__aeabi_dsub+0x10c>
    2a4e:	4812      	ldr	r0, [pc, #72]	; (2a98 <__aeabi_dsub+0x344>)
    2a50:	4285      	cmp	r5, r0
    2a52:	d100      	bne.n	2a56 <__aeabi_dsub+0x302>
    2a54:	e085      	b.n	2b62 <__aeabi_dsub+0x40e>
    2a56:	001d      	movs	r5, r3
    2a58:	e6bc      	b.n	27d4 <__aeabi_dsub+0x80>
    2a5a:	0029      	movs	r1, r5
    2a5c:	3e1f      	subs	r6, #31
    2a5e:	40f1      	lsrs	r1, r6
    2a60:	2b20      	cmp	r3, #32
    2a62:	d100      	bne.n	2a66 <__aeabi_dsub+0x312>
    2a64:	e07f      	b.n	2b66 <__aeabi_dsub+0x412>
    2a66:	2240      	movs	r2, #64	; 0x40
    2a68:	1ad3      	subs	r3, r2, r3
    2a6a:	409d      	lsls	r5, r3
    2a6c:	432f      	orrs	r7, r5
    2a6e:	1e7d      	subs	r5, r7, #1
    2a70:	41af      	sbcs	r7, r5
    2a72:	2400      	movs	r4, #0
    2a74:	430f      	orrs	r7, r1
    2a76:	2600      	movs	r6, #0
    2a78:	e78e      	b.n	2998 <__aeabi_dsub+0x244>
    2a7a:	002b      	movs	r3, r5
    2a7c:	000f      	movs	r7, r1
    2a7e:	3b20      	subs	r3, #32
    2a80:	40df      	lsrs	r7, r3
    2a82:	2d20      	cmp	r5, #32
    2a84:	d071      	beq.n	2b6a <__aeabi_dsub+0x416>
    2a86:	2340      	movs	r3, #64	; 0x40
    2a88:	1b5d      	subs	r5, r3, r5
    2a8a:	40a9      	lsls	r1, r5
    2a8c:	430a      	orrs	r2, r1
    2a8e:	1e51      	subs	r1, r2, #1
    2a90:	418a      	sbcs	r2, r1
    2a92:	2100      	movs	r1, #0
    2a94:	4317      	orrs	r7, r2
    2a96:	e6af      	b.n	27f8 <__aeabi_dsub+0xa4>
    2a98:	000007ff 	.word	0x000007ff
    2a9c:	ff7fffff 	.word	0xff7fffff
    2aa0:	800fffff 	.word	0x800fffff
    2aa4:	2e00      	cmp	r6, #0
    2aa6:	d03e      	beq.n	2b26 <__aeabi_dsub+0x3d2>
    2aa8:	4eb3      	ldr	r6, [pc, #716]	; (2d78 <__aeabi_dsub+0x624>)
    2aaa:	45b4      	cmp	ip, r6
    2aac:	d045      	beq.n	2b3a <__aeabi_dsub+0x3e6>
    2aae:	2680      	movs	r6, #128	; 0x80
    2ab0:	0436      	lsls	r6, r6, #16
    2ab2:	426d      	negs	r5, r5
    2ab4:	4334      	orrs	r4, r6
    2ab6:	2d38      	cmp	r5, #56	; 0x38
    2ab8:	dd00      	ble.n	2abc <__aeabi_dsub+0x368>
    2aba:	e0a8      	b.n	2c0e <__aeabi_dsub+0x4ba>
    2abc:	2d1f      	cmp	r5, #31
    2abe:	dd00      	ble.n	2ac2 <__aeabi_dsub+0x36e>
    2ac0:	e11f      	b.n	2d02 <__aeabi_dsub+0x5ae>
    2ac2:	2620      	movs	r6, #32
    2ac4:	0027      	movs	r7, r4
    2ac6:	4650      	mov	r0, sl
    2ac8:	1b76      	subs	r6, r6, r5
    2aca:	40b7      	lsls	r7, r6
    2acc:	40e8      	lsrs	r0, r5
    2ace:	4307      	orrs	r7, r0
    2ad0:	4650      	mov	r0, sl
    2ad2:	40b0      	lsls	r0, r6
    2ad4:	1e46      	subs	r6, r0, #1
    2ad6:	41b0      	sbcs	r0, r6
    2ad8:	40ec      	lsrs	r4, r5
    2ada:	4338      	orrs	r0, r7
    2adc:	1a17      	subs	r7, r2, r0
    2ade:	42ba      	cmp	r2, r7
    2ae0:	4192      	sbcs	r2, r2
    2ae2:	1b0c      	subs	r4, r1, r4
    2ae4:	4252      	negs	r2, r2
    2ae6:	1aa4      	subs	r4, r4, r2
    2ae8:	4666      	mov	r6, ip
    2aea:	4698      	mov	r8, r3
    2aec:	e68b      	b.n	2806 <__aeabi_dsub+0xb2>
    2aee:	4664      	mov	r4, ip
    2af0:	4667      	mov	r7, ip
    2af2:	432c      	orrs	r4, r5
    2af4:	d000      	beq.n	2af8 <__aeabi_dsub+0x3a4>
    2af6:	e68b      	b.n	2810 <__aeabi_dsub+0xbc>
    2af8:	2500      	movs	r5, #0
    2afa:	2600      	movs	r6, #0
    2afc:	2700      	movs	r7, #0
    2afe:	e6ea      	b.n	28d6 <__aeabi_dsub+0x182>
    2b00:	001e      	movs	r6, r3
    2b02:	e6ad      	b.n	2860 <__aeabi_dsub+0x10c>
    2b04:	2b1f      	cmp	r3, #31
    2b06:	dc60      	bgt.n	2bca <__aeabi_dsub+0x476>
    2b08:	2720      	movs	r7, #32
    2b0a:	1af8      	subs	r0, r7, r3
    2b0c:	000f      	movs	r7, r1
    2b0e:	4684      	mov	ip, r0
    2b10:	4087      	lsls	r7, r0
    2b12:	0010      	movs	r0, r2
    2b14:	40d8      	lsrs	r0, r3
    2b16:	4307      	orrs	r7, r0
    2b18:	4660      	mov	r0, ip
    2b1a:	4082      	lsls	r2, r0
    2b1c:	1e50      	subs	r0, r2, #1
    2b1e:	4182      	sbcs	r2, r0
    2b20:	40d9      	lsrs	r1, r3
    2b22:	4317      	orrs	r7, r2
    2b24:	e6f5      	b.n	2912 <__aeabi_dsub+0x1be>
    2b26:	0026      	movs	r6, r4
    2b28:	4650      	mov	r0, sl
    2b2a:	4306      	orrs	r6, r0
    2b2c:	d005      	beq.n	2b3a <__aeabi_dsub+0x3e6>
    2b2e:	43ed      	mvns	r5, r5
    2b30:	2d00      	cmp	r5, #0
    2b32:	d0d3      	beq.n	2adc <__aeabi_dsub+0x388>
    2b34:	4e90      	ldr	r6, [pc, #576]	; (2d78 <__aeabi_dsub+0x624>)
    2b36:	45b4      	cmp	ip, r6
    2b38:	d1bd      	bne.n	2ab6 <__aeabi_dsub+0x362>
    2b3a:	000c      	movs	r4, r1
    2b3c:	0017      	movs	r7, r2
    2b3e:	4666      	mov	r6, ip
    2b40:	4698      	mov	r8, r3
    2b42:	e68d      	b.n	2860 <__aeabi_dsub+0x10c>
    2b44:	488c      	ldr	r0, [pc, #560]	; (2d78 <__aeabi_dsub+0x624>)
    2b46:	4283      	cmp	r3, r0
    2b48:	d00b      	beq.n	2b62 <__aeabi_dsub+0x40e>
    2b4a:	4663      	mov	r3, ip
    2b4c:	e6d9      	b.n	2902 <__aeabi_dsub+0x1ae>
    2b4e:	2d00      	cmp	r5, #0
    2b50:	d000      	beq.n	2b54 <__aeabi_dsub+0x400>
    2b52:	e096      	b.n	2c82 <__aeabi_dsub+0x52e>
    2b54:	0008      	movs	r0, r1
    2b56:	4310      	orrs	r0, r2
    2b58:	d100      	bne.n	2b5c <__aeabi_dsub+0x408>
    2b5a:	e0e2      	b.n	2d22 <__aeabi_dsub+0x5ce>
    2b5c:	000c      	movs	r4, r1
    2b5e:	0017      	movs	r7, r2
    2b60:	4698      	mov	r8, r3
    2b62:	4e85      	ldr	r6, [pc, #532]	; (2d78 <__aeabi_dsub+0x624>)
    2b64:	e67c      	b.n	2860 <__aeabi_dsub+0x10c>
    2b66:	2500      	movs	r5, #0
    2b68:	e780      	b.n	2a6c <__aeabi_dsub+0x318>
    2b6a:	2100      	movs	r1, #0
    2b6c:	e78e      	b.n	2a8c <__aeabi_dsub+0x338>
    2b6e:	0023      	movs	r3, r4
    2b70:	4650      	mov	r0, sl
    2b72:	4303      	orrs	r3, r0
    2b74:	2e00      	cmp	r6, #0
    2b76:	d000      	beq.n	2b7a <__aeabi_dsub+0x426>
    2b78:	e0a8      	b.n	2ccc <__aeabi_dsub+0x578>
    2b7a:	2b00      	cmp	r3, #0
    2b7c:	d100      	bne.n	2b80 <__aeabi_dsub+0x42c>
    2b7e:	e0de      	b.n	2d3e <__aeabi_dsub+0x5ea>
    2b80:	000b      	movs	r3, r1
    2b82:	4313      	orrs	r3, r2
    2b84:	d100      	bne.n	2b88 <__aeabi_dsub+0x434>
    2b86:	e66b      	b.n	2860 <__aeabi_dsub+0x10c>
    2b88:	4452      	add	r2, sl
    2b8a:	4552      	cmp	r2, sl
    2b8c:	4180      	sbcs	r0, r0
    2b8e:	1864      	adds	r4, r4, r1
    2b90:	4240      	negs	r0, r0
    2b92:	1824      	adds	r4, r4, r0
    2b94:	0017      	movs	r7, r2
    2b96:	0223      	lsls	r3, r4, #8
    2b98:	d400      	bmi.n	2b9c <__aeabi_dsub+0x448>
    2b9a:	e6fd      	b.n	2998 <__aeabi_dsub+0x244>
    2b9c:	4b77      	ldr	r3, [pc, #476]	; (2d7c <__aeabi_dsub+0x628>)
    2b9e:	4666      	mov	r6, ip
    2ba0:	401c      	ands	r4, r3
    2ba2:	e65d      	b.n	2860 <__aeabi_dsub+0x10c>
    2ba4:	0025      	movs	r5, r4
    2ba6:	4650      	mov	r0, sl
    2ba8:	4305      	orrs	r5, r0
    2baa:	2e00      	cmp	r6, #0
    2bac:	d1cf      	bne.n	2b4e <__aeabi_dsub+0x3fa>
    2bae:	2d00      	cmp	r5, #0
    2bb0:	d14f      	bne.n	2c52 <__aeabi_dsub+0x4fe>
    2bb2:	000c      	movs	r4, r1
    2bb4:	4314      	orrs	r4, r2
    2bb6:	d100      	bne.n	2bba <__aeabi_dsub+0x466>
    2bb8:	e0a0      	b.n	2cfc <__aeabi_dsub+0x5a8>
    2bba:	000c      	movs	r4, r1
    2bbc:	0017      	movs	r7, r2
    2bbe:	4698      	mov	r8, r3
    2bc0:	e64e      	b.n	2860 <__aeabi_dsub+0x10c>
    2bc2:	4666      	mov	r6, ip
    2bc4:	2400      	movs	r4, #0
    2bc6:	2700      	movs	r7, #0
    2bc8:	e685      	b.n	28d6 <__aeabi_dsub+0x182>
    2bca:	001f      	movs	r7, r3
    2bcc:	0008      	movs	r0, r1
    2bce:	3f20      	subs	r7, #32
    2bd0:	40f8      	lsrs	r0, r7
    2bd2:	0007      	movs	r7, r0
    2bd4:	2b20      	cmp	r3, #32
    2bd6:	d100      	bne.n	2bda <__aeabi_dsub+0x486>
    2bd8:	e08e      	b.n	2cf8 <__aeabi_dsub+0x5a4>
    2bda:	2040      	movs	r0, #64	; 0x40
    2bdc:	1ac3      	subs	r3, r0, r3
    2bde:	4099      	lsls	r1, r3
    2be0:	430a      	orrs	r2, r1
    2be2:	1e51      	subs	r1, r2, #1
    2be4:	418a      	sbcs	r2, r1
    2be6:	2100      	movs	r1, #0
    2be8:	4317      	orrs	r7, r2
    2bea:	e692      	b.n	2912 <__aeabi_dsub+0x1be>
    2bec:	2e00      	cmp	r6, #0
    2bee:	d114      	bne.n	2c1a <__aeabi_dsub+0x4c6>
    2bf0:	0026      	movs	r6, r4
    2bf2:	4650      	mov	r0, sl
    2bf4:	4306      	orrs	r6, r0
    2bf6:	d062      	beq.n	2cbe <__aeabi_dsub+0x56a>
    2bf8:	43db      	mvns	r3, r3
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d15c      	bne.n	2cb8 <__aeabi_dsub+0x564>
    2bfe:	1887      	adds	r7, r0, r2
    2c00:	4297      	cmp	r7, r2
    2c02:	4192      	sbcs	r2, r2
    2c04:	1864      	adds	r4, r4, r1
    2c06:	4252      	negs	r2, r2
    2c08:	18a4      	adds	r4, r4, r2
    2c0a:	4666      	mov	r6, ip
    2c0c:	e687      	b.n	291e <__aeabi_dsub+0x1ca>
    2c0e:	4650      	mov	r0, sl
    2c10:	4320      	orrs	r0, r4
    2c12:	1e44      	subs	r4, r0, #1
    2c14:	41a0      	sbcs	r0, r4
    2c16:	2400      	movs	r4, #0
    2c18:	e760      	b.n	2adc <__aeabi_dsub+0x388>
    2c1a:	4e57      	ldr	r6, [pc, #348]	; (2d78 <__aeabi_dsub+0x624>)
    2c1c:	45b4      	cmp	ip, r6
    2c1e:	d04e      	beq.n	2cbe <__aeabi_dsub+0x56a>
    2c20:	2680      	movs	r6, #128	; 0x80
    2c22:	0436      	lsls	r6, r6, #16
    2c24:	425b      	negs	r3, r3
    2c26:	4334      	orrs	r4, r6
    2c28:	2b38      	cmp	r3, #56	; 0x38
    2c2a:	dd00      	ble.n	2c2e <__aeabi_dsub+0x4da>
    2c2c:	e07f      	b.n	2d2e <__aeabi_dsub+0x5da>
    2c2e:	2b1f      	cmp	r3, #31
    2c30:	dd00      	ble.n	2c34 <__aeabi_dsub+0x4e0>
    2c32:	e08b      	b.n	2d4c <__aeabi_dsub+0x5f8>
    2c34:	2620      	movs	r6, #32
    2c36:	0027      	movs	r7, r4
    2c38:	4650      	mov	r0, sl
    2c3a:	1af6      	subs	r6, r6, r3
    2c3c:	40b7      	lsls	r7, r6
    2c3e:	40d8      	lsrs	r0, r3
    2c40:	4307      	orrs	r7, r0
    2c42:	4650      	mov	r0, sl
    2c44:	40b0      	lsls	r0, r6
    2c46:	1e46      	subs	r6, r0, #1
    2c48:	41b0      	sbcs	r0, r6
    2c4a:	4307      	orrs	r7, r0
    2c4c:	40dc      	lsrs	r4, r3
    2c4e:	18bf      	adds	r7, r7, r2
    2c50:	e7d6      	b.n	2c00 <__aeabi_dsub+0x4ac>
    2c52:	000d      	movs	r5, r1
    2c54:	4315      	orrs	r5, r2
    2c56:	d100      	bne.n	2c5a <__aeabi_dsub+0x506>
    2c58:	e602      	b.n	2860 <__aeabi_dsub+0x10c>
    2c5a:	4650      	mov	r0, sl
    2c5c:	1a80      	subs	r0, r0, r2
    2c5e:	4582      	cmp	sl, r0
    2c60:	41bf      	sbcs	r7, r7
    2c62:	1a65      	subs	r5, r4, r1
    2c64:	427f      	negs	r7, r7
    2c66:	1bed      	subs	r5, r5, r7
    2c68:	4684      	mov	ip, r0
    2c6a:	0228      	lsls	r0, r5, #8
    2c6c:	d400      	bmi.n	2c70 <__aeabi_dsub+0x51c>
    2c6e:	e68d      	b.n	298c <__aeabi_dsub+0x238>
    2c70:	4650      	mov	r0, sl
    2c72:	1a17      	subs	r7, r2, r0
    2c74:	42ba      	cmp	r2, r7
    2c76:	4192      	sbcs	r2, r2
    2c78:	1b0c      	subs	r4, r1, r4
    2c7a:	4252      	negs	r2, r2
    2c7c:	1aa4      	subs	r4, r4, r2
    2c7e:	4698      	mov	r8, r3
    2c80:	e5ee      	b.n	2860 <__aeabi_dsub+0x10c>
    2c82:	000d      	movs	r5, r1
    2c84:	4315      	orrs	r5, r2
    2c86:	d100      	bne.n	2c8a <__aeabi_dsub+0x536>
    2c88:	e76b      	b.n	2b62 <__aeabi_dsub+0x40e>
    2c8a:	4650      	mov	r0, sl
    2c8c:	0767      	lsls	r7, r4, #29
    2c8e:	08c0      	lsrs	r0, r0, #3
    2c90:	4307      	orrs	r7, r0
    2c92:	2080      	movs	r0, #128	; 0x80
    2c94:	08e4      	lsrs	r4, r4, #3
    2c96:	0300      	lsls	r0, r0, #12
    2c98:	4204      	tst	r4, r0
    2c9a:	d007      	beq.n	2cac <__aeabi_dsub+0x558>
    2c9c:	08cd      	lsrs	r5, r1, #3
    2c9e:	4205      	tst	r5, r0
    2ca0:	d104      	bne.n	2cac <__aeabi_dsub+0x558>
    2ca2:	002c      	movs	r4, r5
    2ca4:	4698      	mov	r8, r3
    2ca6:	08d7      	lsrs	r7, r2, #3
    2ca8:	0749      	lsls	r1, r1, #29
    2caa:	430f      	orrs	r7, r1
    2cac:	0f7b      	lsrs	r3, r7, #29
    2cae:	00e4      	lsls	r4, r4, #3
    2cb0:	431c      	orrs	r4, r3
    2cb2:	00ff      	lsls	r7, r7, #3
    2cb4:	4e30      	ldr	r6, [pc, #192]	; (2d78 <__aeabi_dsub+0x624>)
    2cb6:	e5d3      	b.n	2860 <__aeabi_dsub+0x10c>
    2cb8:	4e2f      	ldr	r6, [pc, #188]	; (2d78 <__aeabi_dsub+0x624>)
    2cba:	45b4      	cmp	ip, r6
    2cbc:	d1b4      	bne.n	2c28 <__aeabi_dsub+0x4d4>
    2cbe:	000c      	movs	r4, r1
    2cc0:	0017      	movs	r7, r2
    2cc2:	4666      	mov	r6, ip
    2cc4:	e5cc      	b.n	2860 <__aeabi_dsub+0x10c>
    2cc6:	2700      	movs	r7, #0
    2cc8:	2400      	movs	r4, #0
    2cca:	e5e8      	b.n	289e <__aeabi_dsub+0x14a>
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d039      	beq.n	2d44 <__aeabi_dsub+0x5f0>
    2cd0:	000b      	movs	r3, r1
    2cd2:	4313      	orrs	r3, r2
    2cd4:	d100      	bne.n	2cd8 <__aeabi_dsub+0x584>
    2cd6:	e744      	b.n	2b62 <__aeabi_dsub+0x40e>
    2cd8:	08c0      	lsrs	r0, r0, #3
    2cda:	0767      	lsls	r7, r4, #29
    2cdc:	4307      	orrs	r7, r0
    2cde:	2080      	movs	r0, #128	; 0x80
    2ce0:	08e4      	lsrs	r4, r4, #3
    2ce2:	0300      	lsls	r0, r0, #12
    2ce4:	4204      	tst	r4, r0
    2ce6:	d0e1      	beq.n	2cac <__aeabi_dsub+0x558>
    2ce8:	08cb      	lsrs	r3, r1, #3
    2cea:	4203      	tst	r3, r0
    2cec:	d1de      	bne.n	2cac <__aeabi_dsub+0x558>
    2cee:	08d7      	lsrs	r7, r2, #3
    2cf0:	0749      	lsls	r1, r1, #29
    2cf2:	430f      	orrs	r7, r1
    2cf4:	001c      	movs	r4, r3
    2cf6:	e7d9      	b.n	2cac <__aeabi_dsub+0x558>
    2cf8:	2100      	movs	r1, #0
    2cfa:	e771      	b.n	2be0 <__aeabi_dsub+0x48c>
    2cfc:	2500      	movs	r5, #0
    2cfe:	2700      	movs	r7, #0
    2d00:	e5e9      	b.n	28d6 <__aeabi_dsub+0x182>
    2d02:	002e      	movs	r6, r5
    2d04:	0027      	movs	r7, r4
    2d06:	3e20      	subs	r6, #32
    2d08:	40f7      	lsrs	r7, r6
    2d0a:	2d20      	cmp	r5, #32
    2d0c:	d02f      	beq.n	2d6e <__aeabi_dsub+0x61a>
    2d0e:	2640      	movs	r6, #64	; 0x40
    2d10:	1b75      	subs	r5, r6, r5
    2d12:	40ac      	lsls	r4, r5
    2d14:	4650      	mov	r0, sl
    2d16:	4320      	orrs	r0, r4
    2d18:	1e44      	subs	r4, r0, #1
    2d1a:	41a0      	sbcs	r0, r4
    2d1c:	2400      	movs	r4, #0
    2d1e:	4338      	orrs	r0, r7
    2d20:	e6dc      	b.n	2adc <__aeabi_dsub+0x388>
    2d22:	2480      	movs	r4, #128	; 0x80
    2d24:	2500      	movs	r5, #0
    2d26:	0324      	lsls	r4, r4, #12
    2d28:	4e13      	ldr	r6, [pc, #76]	; (2d78 <__aeabi_dsub+0x624>)
    2d2a:	2700      	movs	r7, #0
    2d2c:	e5d3      	b.n	28d6 <__aeabi_dsub+0x182>
    2d2e:	4650      	mov	r0, sl
    2d30:	4320      	orrs	r0, r4
    2d32:	0007      	movs	r7, r0
    2d34:	1e78      	subs	r0, r7, #1
    2d36:	4187      	sbcs	r7, r0
    2d38:	2400      	movs	r4, #0
    2d3a:	18bf      	adds	r7, r7, r2
    2d3c:	e760      	b.n	2c00 <__aeabi_dsub+0x4ac>
    2d3e:	000c      	movs	r4, r1
    2d40:	0017      	movs	r7, r2
    2d42:	e58d      	b.n	2860 <__aeabi_dsub+0x10c>
    2d44:	000c      	movs	r4, r1
    2d46:	0017      	movs	r7, r2
    2d48:	4e0b      	ldr	r6, [pc, #44]	; (2d78 <__aeabi_dsub+0x624>)
    2d4a:	e589      	b.n	2860 <__aeabi_dsub+0x10c>
    2d4c:	001e      	movs	r6, r3
    2d4e:	0027      	movs	r7, r4
    2d50:	3e20      	subs	r6, #32
    2d52:	40f7      	lsrs	r7, r6
    2d54:	2b20      	cmp	r3, #32
    2d56:	d00c      	beq.n	2d72 <__aeabi_dsub+0x61e>
    2d58:	2640      	movs	r6, #64	; 0x40
    2d5a:	1af3      	subs	r3, r6, r3
    2d5c:	409c      	lsls	r4, r3
    2d5e:	4650      	mov	r0, sl
    2d60:	4320      	orrs	r0, r4
    2d62:	1e44      	subs	r4, r0, #1
    2d64:	41a0      	sbcs	r0, r4
    2d66:	4307      	orrs	r7, r0
    2d68:	2400      	movs	r4, #0
    2d6a:	18bf      	adds	r7, r7, r2
    2d6c:	e748      	b.n	2c00 <__aeabi_dsub+0x4ac>
    2d6e:	2400      	movs	r4, #0
    2d70:	e7d0      	b.n	2d14 <__aeabi_dsub+0x5c0>
    2d72:	2400      	movs	r4, #0
    2d74:	e7f3      	b.n	2d5e <__aeabi_dsub+0x60a>
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	000007ff 	.word	0x000007ff
    2d7c:	ff7fffff 	.word	0xff7fffff

00002d80 <__aeabi_ui2d>:
    2d80:	b510      	push	{r4, lr}
    2d82:	1e04      	subs	r4, r0, #0
    2d84:	d028      	beq.n	2dd8 <__aeabi_ui2d+0x58>
    2d86:	f000 f90f 	bl	2fa8 <__clzsi2>
    2d8a:	4b15      	ldr	r3, [pc, #84]	; (2de0 <__aeabi_ui2d+0x60>)
    2d8c:	4a15      	ldr	r2, [pc, #84]	; (2de4 <__aeabi_ui2d+0x64>)
    2d8e:	1a1b      	subs	r3, r3, r0
    2d90:	1ad2      	subs	r2, r2, r3
    2d92:	2a1f      	cmp	r2, #31
    2d94:	dd15      	ble.n	2dc2 <__aeabi_ui2d+0x42>
    2d96:	4a14      	ldr	r2, [pc, #80]	; (2de8 <__aeabi_ui2d+0x68>)
    2d98:	1ad2      	subs	r2, r2, r3
    2d9a:	4094      	lsls	r4, r2
    2d9c:	2200      	movs	r2, #0
    2d9e:	0324      	lsls	r4, r4, #12
    2da0:	055b      	lsls	r3, r3, #21
    2da2:	0b24      	lsrs	r4, r4, #12
    2da4:	0d5b      	lsrs	r3, r3, #21
    2da6:	2100      	movs	r1, #0
    2da8:	0010      	movs	r0, r2
    2daa:	0324      	lsls	r4, r4, #12
    2dac:	0d0a      	lsrs	r2, r1, #20
    2dae:	0b24      	lsrs	r4, r4, #12
    2db0:	0512      	lsls	r2, r2, #20
    2db2:	4322      	orrs	r2, r4
    2db4:	4c0d      	ldr	r4, [pc, #52]	; (2dec <__aeabi_ui2d+0x6c>)
    2db6:	051b      	lsls	r3, r3, #20
    2db8:	4022      	ands	r2, r4
    2dba:	4313      	orrs	r3, r2
    2dbc:	005b      	lsls	r3, r3, #1
    2dbe:	0859      	lsrs	r1, r3, #1
    2dc0:	bd10      	pop	{r4, pc}
    2dc2:	0021      	movs	r1, r4
    2dc4:	4091      	lsls	r1, r2
    2dc6:	000a      	movs	r2, r1
    2dc8:	210b      	movs	r1, #11
    2dca:	1a08      	subs	r0, r1, r0
    2dcc:	40c4      	lsrs	r4, r0
    2dce:	055b      	lsls	r3, r3, #21
    2dd0:	0324      	lsls	r4, r4, #12
    2dd2:	0b24      	lsrs	r4, r4, #12
    2dd4:	0d5b      	lsrs	r3, r3, #21
    2dd6:	e7e6      	b.n	2da6 <__aeabi_ui2d+0x26>
    2dd8:	2300      	movs	r3, #0
    2dda:	2400      	movs	r4, #0
    2ddc:	2200      	movs	r2, #0
    2dde:	e7e2      	b.n	2da6 <__aeabi_ui2d+0x26>
    2de0:	0000041e 	.word	0x0000041e
    2de4:	00000433 	.word	0x00000433
    2de8:	00000413 	.word	0x00000413
    2dec:	800fffff 	.word	0x800fffff

00002df0 <__aeabi_f2d>:
    2df0:	0041      	lsls	r1, r0, #1
    2df2:	0e09      	lsrs	r1, r1, #24
    2df4:	1c4b      	adds	r3, r1, #1
    2df6:	b570      	push	{r4, r5, r6, lr}
    2df8:	b2db      	uxtb	r3, r3
    2dfa:	0246      	lsls	r6, r0, #9
    2dfc:	0a75      	lsrs	r5, r6, #9
    2dfe:	0fc4      	lsrs	r4, r0, #31
    2e00:	2b01      	cmp	r3, #1
    2e02:	dd14      	ble.n	2e2e <__aeabi_f2d+0x3e>
    2e04:	23e0      	movs	r3, #224	; 0xe0
    2e06:	009b      	lsls	r3, r3, #2
    2e08:	076d      	lsls	r5, r5, #29
    2e0a:	0b36      	lsrs	r6, r6, #12
    2e0c:	18cb      	adds	r3, r1, r3
    2e0e:	2100      	movs	r1, #0
    2e10:	0d0a      	lsrs	r2, r1, #20
    2e12:	0028      	movs	r0, r5
    2e14:	0512      	lsls	r2, r2, #20
    2e16:	4d1c      	ldr	r5, [pc, #112]	; (2e88 <__aeabi_f2d+0x98>)
    2e18:	4332      	orrs	r2, r6
    2e1a:	055b      	lsls	r3, r3, #21
    2e1c:	402a      	ands	r2, r5
    2e1e:	085b      	lsrs	r3, r3, #1
    2e20:	4313      	orrs	r3, r2
    2e22:	005b      	lsls	r3, r3, #1
    2e24:	07e4      	lsls	r4, r4, #31
    2e26:	085b      	lsrs	r3, r3, #1
    2e28:	4323      	orrs	r3, r4
    2e2a:	0019      	movs	r1, r3
    2e2c:	bd70      	pop	{r4, r5, r6, pc}
    2e2e:	2900      	cmp	r1, #0
    2e30:	d114      	bne.n	2e5c <__aeabi_f2d+0x6c>
    2e32:	2d00      	cmp	r5, #0
    2e34:	d01e      	beq.n	2e74 <__aeabi_f2d+0x84>
    2e36:	0028      	movs	r0, r5
    2e38:	f000 f8b6 	bl	2fa8 <__clzsi2>
    2e3c:	280a      	cmp	r0, #10
    2e3e:	dc1c      	bgt.n	2e7a <__aeabi_f2d+0x8a>
    2e40:	230b      	movs	r3, #11
    2e42:	002a      	movs	r2, r5
    2e44:	1a1b      	subs	r3, r3, r0
    2e46:	40da      	lsrs	r2, r3
    2e48:	0003      	movs	r3, r0
    2e4a:	3315      	adds	r3, #21
    2e4c:	409d      	lsls	r5, r3
    2e4e:	4b0f      	ldr	r3, [pc, #60]	; (2e8c <__aeabi_f2d+0x9c>)
    2e50:	0312      	lsls	r2, r2, #12
    2e52:	1a1b      	subs	r3, r3, r0
    2e54:	055b      	lsls	r3, r3, #21
    2e56:	0b16      	lsrs	r6, r2, #12
    2e58:	0d5b      	lsrs	r3, r3, #21
    2e5a:	e7d8      	b.n	2e0e <__aeabi_f2d+0x1e>
    2e5c:	2d00      	cmp	r5, #0
    2e5e:	d006      	beq.n	2e6e <__aeabi_f2d+0x7e>
    2e60:	0b32      	lsrs	r2, r6, #12
    2e62:	2680      	movs	r6, #128	; 0x80
    2e64:	0336      	lsls	r6, r6, #12
    2e66:	076d      	lsls	r5, r5, #29
    2e68:	4316      	orrs	r6, r2
    2e6a:	4b09      	ldr	r3, [pc, #36]	; (2e90 <__aeabi_f2d+0xa0>)
    2e6c:	e7cf      	b.n	2e0e <__aeabi_f2d+0x1e>
    2e6e:	4b08      	ldr	r3, [pc, #32]	; (2e90 <__aeabi_f2d+0xa0>)
    2e70:	2600      	movs	r6, #0
    2e72:	e7cc      	b.n	2e0e <__aeabi_f2d+0x1e>
    2e74:	2300      	movs	r3, #0
    2e76:	2600      	movs	r6, #0
    2e78:	e7c9      	b.n	2e0e <__aeabi_f2d+0x1e>
    2e7a:	0003      	movs	r3, r0
    2e7c:	002a      	movs	r2, r5
    2e7e:	3b0b      	subs	r3, #11
    2e80:	409a      	lsls	r2, r3
    2e82:	2500      	movs	r5, #0
    2e84:	e7e3      	b.n	2e4e <__aeabi_f2d+0x5e>
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	800fffff 	.word	0x800fffff
    2e8c:	00000389 	.word	0x00000389
    2e90:	000007ff 	.word	0x000007ff

00002e94 <__aeabi_d2f>:
    2e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e96:	004c      	lsls	r4, r1, #1
    2e98:	0d64      	lsrs	r4, r4, #21
    2e9a:	030b      	lsls	r3, r1, #12
    2e9c:	1c62      	adds	r2, r4, #1
    2e9e:	0f45      	lsrs	r5, r0, #29
    2ea0:	0a5b      	lsrs	r3, r3, #9
    2ea2:	0552      	lsls	r2, r2, #21
    2ea4:	432b      	orrs	r3, r5
    2ea6:	0fc9      	lsrs	r1, r1, #31
    2ea8:	00c5      	lsls	r5, r0, #3
    2eaa:	0d52      	lsrs	r2, r2, #21
    2eac:	2a01      	cmp	r2, #1
    2eae:	dd28      	ble.n	2f02 <__aeabi_d2f+0x6e>
    2eb0:	4a3a      	ldr	r2, [pc, #232]	; (2f9c <__aeabi_d2f+0x108>)
    2eb2:	18a6      	adds	r6, r4, r2
    2eb4:	2efe      	cmp	r6, #254	; 0xfe
    2eb6:	dc1b      	bgt.n	2ef0 <__aeabi_d2f+0x5c>
    2eb8:	2e00      	cmp	r6, #0
    2eba:	dd3e      	ble.n	2f3a <__aeabi_d2f+0xa6>
    2ebc:	0180      	lsls	r0, r0, #6
    2ebe:	0002      	movs	r2, r0
    2ec0:	1e50      	subs	r0, r2, #1
    2ec2:	4182      	sbcs	r2, r0
    2ec4:	0f6d      	lsrs	r5, r5, #29
    2ec6:	432a      	orrs	r2, r5
    2ec8:	00db      	lsls	r3, r3, #3
    2eca:	4313      	orrs	r3, r2
    2ecc:	075a      	lsls	r2, r3, #29
    2ece:	d004      	beq.n	2eda <__aeabi_d2f+0x46>
    2ed0:	220f      	movs	r2, #15
    2ed2:	401a      	ands	r2, r3
    2ed4:	2a04      	cmp	r2, #4
    2ed6:	d000      	beq.n	2eda <__aeabi_d2f+0x46>
    2ed8:	3304      	adds	r3, #4
    2eda:	2280      	movs	r2, #128	; 0x80
    2edc:	04d2      	lsls	r2, r2, #19
    2ede:	401a      	ands	r2, r3
    2ee0:	d05a      	beq.n	2f98 <__aeabi_d2f+0x104>
    2ee2:	3601      	adds	r6, #1
    2ee4:	2eff      	cmp	r6, #255	; 0xff
    2ee6:	d003      	beq.n	2ef0 <__aeabi_d2f+0x5c>
    2ee8:	019b      	lsls	r3, r3, #6
    2eea:	0a5b      	lsrs	r3, r3, #9
    2eec:	b2f4      	uxtb	r4, r6
    2eee:	e001      	b.n	2ef4 <__aeabi_d2f+0x60>
    2ef0:	24ff      	movs	r4, #255	; 0xff
    2ef2:	2300      	movs	r3, #0
    2ef4:	0258      	lsls	r0, r3, #9
    2ef6:	05e4      	lsls	r4, r4, #23
    2ef8:	0a40      	lsrs	r0, r0, #9
    2efa:	07c9      	lsls	r1, r1, #31
    2efc:	4320      	orrs	r0, r4
    2efe:	4308      	orrs	r0, r1
    2f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f02:	2c00      	cmp	r4, #0
    2f04:	d007      	beq.n	2f16 <__aeabi_d2f+0x82>
    2f06:	431d      	orrs	r5, r3
    2f08:	d0f2      	beq.n	2ef0 <__aeabi_d2f+0x5c>
    2f0a:	2080      	movs	r0, #128	; 0x80
    2f0c:	00db      	lsls	r3, r3, #3
    2f0e:	0480      	lsls	r0, r0, #18
    2f10:	4303      	orrs	r3, r0
    2f12:	26ff      	movs	r6, #255	; 0xff
    2f14:	e7da      	b.n	2ecc <__aeabi_d2f+0x38>
    2f16:	432b      	orrs	r3, r5
    2f18:	d003      	beq.n	2f22 <__aeabi_d2f+0x8e>
    2f1a:	2305      	movs	r3, #5
    2f1c:	08db      	lsrs	r3, r3, #3
    2f1e:	2cff      	cmp	r4, #255	; 0xff
    2f20:	d003      	beq.n	2f2a <__aeabi_d2f+0x96>
    2f22:	025b      	lsls	r3, r3, #9
    2f24:	0a5b      	lsrs	r3, r3, #9
    2f26:	b2e4      	uxtb	r4, r4
    2f28:	e7e4      	b.n	2ef4 <__aeabi_d2f+0x60>
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d032      	beq.n	2f94 <__aeabi_d2f+0x100>
    2f2e:	2080      	movs	r0, #128	; 0x80
    2f30:	03c0      	lsls	r0, r0, #15
    2f32:	4303      	orrs	r3, r0
    2f34:	025b      	lsls	r3, r3, #9
    2f36:	0a5b      	lsrs	r3, r3, #9
    2f38:	e7dc      	b.n	2ef4 <__aeabi_d2f+0x60>
    2f3a:	0032      	movs	r2, r6
    2f3c:	3217      	adds	r2, #23
    2f3e:	db14      	blt.n	2f6a <__aeabi_d2f+0xd6>
    2f40:	2280      	movs	r2, #128	; 0x80
    2f42:	271e      	movs	r7, #30
    2f44:	0412      	lsls	r2, r2, #16
    2f46:	4313      	orrs	r3, r2
    2f48:	1bbf      	subs	r7, r7, r6
    2f4a:	2f1f      	cmp	r7, #31
    2f4c:	dc0f      	bgt.n	2f6e <__aeabi_d2f+0xda>
    2f4e:	4a14      	ldr	r2, [pc, #80]	; (2fa0 <__aeabi_d2f+0x10c>)
    2f50:	4694      	mov	ip, r2
    2f52:	4464      	add	r4, ip
    2f54:	002a      	movs	r2, r5
    2f56:	40a5      	lsls	r5, r4
    2f58:	002e      	movs	r6, r5
    2f5a:	40a3      	lsls	r3, r4
    2f5c:	1e75      	subs	r5, r6, #1
    2f5e:	41ae      	sbcs	r6, r5
    2f60:	40fa      	lsrs	r2, r7
    2f62:	4333      	orrs	r3, r6
    2f64:	4313      	orrs	r3, r2
    2f66:	2600      	movs	r6, #0
    2f68:	e7b0      	b.n	2ecc <__aeabi_d2f+0x38>
    2f6a:	2400      	movs	r4, #0
    2f6c:	e7d5      	b.n	2f1a <__aeabi_d2f+0x86>
    2f6e:	2202      	movs	r2, #2
    2f70:	4252      	negs	r2, r2
    2f72:	1b96      	subs	r6, r2, r6
    2f74:	001a      	movs	r2, r3
    2f76:	40f2      	lsrs	r2, r6
    2f78:	2f20      	cmp	r7, #32
    2f7a:	d009      	beq.n	2f90 <__aeabi_d2f+0xfc>
    2f7c:	4809      	ldr	r0, [pc, #36]	; (2fa4 <__aeabi_d2f+0x110>)
    2f7e:	4684      	mov	ip, r0
    2f80:	4464      	add	r4, ip
    2f82:	40a3      	lsls	r3, r4
    2f84:	432b      	orrs	r3, r5
    2f86:	1e5d      	subs	r5, r3, #1
    2f88:	41ab      	sbcs	r3, r5
    2f8a:	2600      	movs	r6, #0
    2f8c:	4313      	orrs	r3, r2
    2f8e:	e79d      	b.n	2ecc <__aeabi_d2f+0x38>
    2f90:	2300      	movs	r3, #0
    2f92:	e7f7      	b.n	2f84 <__aeabi_d2f+0xf0>
    2f94:	2300      	movs	r3, #0
    2f96:	e7ad      	b.n	2ef4 <__aeabi_d2f+0x60>
    2f98:	0034      	movs	r4, r6
    2f9a:	e7bf      	b.n	2f1c <__aeabi_d2f+0x88>
    2f9c:	fffffc80 	.word	0xfffffc80
    2fa0:	fffffc82 	.word	0xfffffc82
    2fa4:	fffffca2 	.word	0xfffffca2

00002fa8 <__clzsi2>:
    2fa8:	211c      	movs	r1, #28
    2faa:	2301      	movs	r3, #1
    2fac:	041b      	lsls	r3, r3, #16
    2fae:	4298      	cmp	r0, r3
    2fb0:	d301      	bcc.n	2fb6 <__clzsi2+0xe>
    2fb2:	0c00      	lsrs	r0, r0, #16
    2fb4:	3910      	subs	r1, #16
    2fb6:	0a1b      	lsrs	r3, r3, #8
    2fb8:	4298      	cmp	r0, r3
    2fba:	d301      	bcc.n	2fc0 <__clzsi2+0x18>
    2fbc:	0a00      	lsrs	r0, r0, #8
    2fbe:	3908      	subs	r1, #8
    2fc0:	091b      	lsrs	r3, r3, #4
    2fc2:	4298      	cmp	r0, r3
    2fc4:	d301      	bcc.n	2fca <__clzsi2+0x22>
    2fc6:	0900      	lsrs	r0, r0, #4
    2fc8:	3904      	subs	r1, #4
    2fca:	a202      	add	r2, pc, #8	; (adr r2, 2fd4 <__clzsi2+0x2c>)
    2fcc:	5c10      	ldrb	r0, [r2, r0]
    2fce:	1840      	adds	r0, r0, r1
    2fd0:	4770      	bx	lr
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	02020304 	.word	0x02020304
    2fd8:	01010101 	.word	0x01010101
	...

00002fe4 <__libc_init_array>:
    2fe4:	b570      	push	{r4, r5, r6, lr}
    2fe6:	2600      	movs	r6, #0
    2fe8:	4d0c      	ldr	r5, [pc, #48]	; (301c <__libc_init_array+0x38>)
    2fea:	4c0d      	ldr	r4, [pc, #52]	; (3020 <__libc_init_array+0x3c>)
    2fec:	1b64      	subs	r4, r4, r5
    2fee:	10a4      	asrs	r4, r4, #2
    2ff0:	42a6      	cmp	r6, r4
    2ff2:	d109      	bne.n	3008 <__libc_init_array+0x24>
    2ff4:	2600      	movs	r6, #0
    2ff6:	f000 fcc9 	bl	398c <_init>
    2ffa:	4d0a      	ldr	r5, [pc, #40]	; (3024 <__libc_init_array+0x40>)
    2ffc:	4c0a      	ldr	r4, [pc, #40]	; (3028 <__libc_init_array+0x44>)
    2ffe:	1b64      	subs	r4, r4, r5
    3000:	10a4      	asrs	r4, r4, #2
    3002:	42a6      	cmp	r6, r4
    3004:	d105      	bne.n	3012 <__libc_init_array+0x2e>
    3006:	bd70      	pop	{r4, r5, r6, pc}
    3008:	00b3      	lsls	r3, r6, #2
    300a:	58eb      	ldr	r3, [r5, r3]
    300c:	4798      	blx	r3
    300e:	3601      	adds	r6, #1
    3010:	e7ee      	b.n	2ff0 <__libc_init_array+0xc>
    3012:	00b3      	lsls	r3, r6, #2
    3014:	58eb      	ldr	r3, [r5, r3]
    3016:	4798      	blx	r3
    3018:	3601      	adds	r6, #1
    301a:	e7f2      	b.n	3002 <__libc_init_array+0x1e>
    301c:	00003998 	.word	0x00003998
    3020:	00003998 	.word	0x00003998
    3024:	00003998 	.word	0x00003998
    3028:	0000399c 	.word	0x0000399c

0000302c <memcpy>:
    302c:	2300      	movs	r3, #0
    302e:	b510      	push	{r4, lr}
    3030:	429a      	cmp	r2, r3
    3032:	d100      	bne.n	3036 <memcpy+0xa>
    3034:	bd10      	pop	{r4, pc}
    3036:	5ccc      	ldrb	r4, [r1, r3]
    3038:	54c4      	strb	r4, [r0, r3]
    303a:	3301      	adds	r3, #1
    303c:	e7f8      	b.n	3030 <memcpy+0x4>
	...

00003040 <siprintf>:
    3040:	b40e      	push	{r1, r2, r3}
    3042:	b510      	push	{r4, lr}
    3044:	b09d      	sub	sp, #116	; 0x74
    3046:	a902      	add	r1, sp, #8
    3048:	9002      	str	r0, [sp, #8]
    304a:	6108      	str	r0, [r1, #16]
    304c:	480b      	ldr	r0, [pc, #44]	; (307c <siprintf+0x3c>)
    304e:	2482      	movs	r4, #130	; 0x82
    3050:	6088      	str	r0, [r1, #8]
    3052:	6148      	str	r0, [r1, #20]
    3054:	2001      	movs	r0, #1
    3056:	4240      	negs	r0, r0
    3058:	ab1f      	add	r3, sp, #124	; 0x7c
    305a:	81c8      	strh	r0, [r1, #14]
    305c:	4808      	ldr	r0, [pc, #32]	; (3080 <siprintf+0x40>)
    305e:	cb04      	ldmia	r3!, {r2}
    3060:	00a4      	lsls	r4, r4, #2
    3062:	6800      	ldr	r0, [r0, #0]
    3064:	9301      	str	r3, [sp, #4]
    3066:	818c      	strh	r4, [r1, #12]
    3068:	f000 f876 	bl	3158 <_svfiprintf_r>
    306c:	2300      	movs	r3, #0
    306e:	9a02      	ldr	r2, [sp, #8]
    3070:	7013      	strb	r3, [r2, #0]
    3072:	b01d      	add	sp, #116	; 0x74
    3074:	bc10      	pop	{r4}
    3076:	bc08      	pop	{r3}
    3078:	b003      	add	sp, #12
    307a:	4718      	bx	r3
    307c:	7fffffff 	.word	0x7fffffff
    3080:	2000002c 	.word	0x2000002c

00003084 <strlen>:
    3084:	2300      	movs	r3, #0
    3086:	5cc2      	ldrb	r2, [r0, r3]
    3088:	3301      	adds	r3, #1
    308a:	2a00      	cmp	r2, #0
    308c:	d1fb      	bne.n	3086 <strlen+0x2>
    308e:	1e58      	subs	r0, r3, #1
    3090:	4770      	bx	lr
	...

00003094 <__ssputs_r>:
    3094:	b5f0      	push	{r4, r5, r6, r7, lr}
    3096:	688e      	ldr	r6, [r1, #8]
    3098:	b085      	sub	sp, #20
    309a:	0007      	movs	r7, r0
    309c:	000c      	movs	r4, r1
    309e:	9203      	str	r2, [sp, #12]
    30a0:	9301      	str	r3, [sp, #4]
    30a2:	429e      	cmp	r6, r3
    30a4:	d839      	bhi.n	311a <__ssputs_r+0x86>
    30a6:	2390      	movs	r3, #144	; 0x90
    30a8:	898a      	ldrh	r2, [r1, #12]
    30aa:	00db      	lsls	r3, r3, #3
    30ac:	421a      	tst	r2, r3
    30ae:	d034      	beq.n	311a <__ssputs_r+0x86>
    30b0:	2503      	movs	r5, #3
    30b2:	6909      	ldr	r1, [r1, #16]
    30b4:	6823      	ldr	r3, [r4, #0]
    30b6:	1a5b      	subs	r3, r3, r1
    30b8:	9302      	str	r3, [sp, #8]
    30ba:	6963      	ldr	r3, [r4, #20]
    30bc:	9802      	ldr	r0, [sp, #8]
    30be:	435d      	muls	r5, r3
    30c0:	0feb      	lsrs	r3, r5, #31
    30c2:	195d      	adds	r5, r3, r5
    30c4:	9b01      	ldr	r3, [sp, #4]
    30c6:	106d      	asrs	r5, r5, #1
    30c8:	3301      	adds	r3, #1
    30ca:	181b      	adds	r3, r3, r0
    30cc:	42ab      	cmp	r3, r5
    30ce:	d900      	bls.n	30d2 <__ssputs_r+0x3e>
    30d0:	001d      	movs	r5, r3
    30d2:	0553      	lsls	r3, r2, #21
    30d4:	d532      	bpl.n	313c <__ssputs_r+0xa8>
    30d6:	0029      	movs	r1, r5
    30d8:	0038      	movs	r0, r7
    30da:	f000 fb31 	bl	3740 <_malloc_r>
    30de:	1e06      	subs	r6, r0, #0
    30e0:	d109      	bne.n	30f6 <__ssputs_r+0x62>
    30e2:	230c      	movs	r3, #12
    30e4:	603b      	str	r3, [r7, #0]
    30e6:	2340      	movs	r3, #64	; 0x40
    30e8:	2001      	movs	r0, #1
    30ea:	89a2      	ldrh	r2, [r4, #12]
    30ec:	4240      	negs	r0, r0
    30ee:	4313      	orrs	r3, r2
    30f0:	81a3      	strh	r3, [r4, #12]
    30f2:	b005      	add	sp, #20
    30f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30f6:	9a02      	ldr	r2, [sp, #8]
    30f8:	6921      	ldr	r1, [r4, #16]
    30fa:	f7ff ff97 	bl	302c <memcpy>
    30fe:	89a3      	ldrh	r3, [r4, #12]
    3100:	4a14      	ldr	r2, [pc, #80]	; (3154 <__ssputs_r+0xc0>)
    3102:	401a      	ands	r2, r3
    3104:	2380      	movs	r3, #128	; 0x80
    3106:	4313      	orrs	r3, r2
    3108:	81a3      	strh	r3, [r4, #12]
    310a:	9b02      	ldr	r3, [sp, #8]
    310c:	6126      	str	r6, [r4, #16]
    310e:	18f6      	adds	r6, r6, r3
    3110:	6026      	str	r6, [r4, #0]
    3112:	6165      	str	r5, [r4, #20]
    3114:	9e01      	ldr	r6, [sp, #4]
    3116:	1aed      	subs	r5, r5, r3
    3118:	60a5      	str	r5, [r4, #8]
    311a:	9b01      	ldr	r3, [sp, #4]
    311c:	42b3      	cmp	r3, r6
    311e:	d200      	bcs.n	3122 <__ssputs_r+0x8e>
    3120:	001e      	movs	r6, r3
    3122:	0032      	movs	r2, r6
    3124:	9903      	ldr	r1, [sp, #12]
    3126:	6820      	ldr	r0, [r4, #0]
    3128:	f000 faad 	bl	3686 <memmove>
    312c:	68a3      	ldr	r3, [r4, #8]
    312e:	2000      	movs	r0, #0
    3130:	1b9b      	subs	r3, r3, r6
    3132:	60a3      	str	r3, [r4, #8]
    3134:	6823      	ldr	r3, [r4, #0]
    3136:	199e      	adds	r6, r3, r6
    3138:	6026      	str	r6, [r4, #0]
    313a:	e7da      	b.n	30f2 <__ssputs_r+0x5e>
    313c:	002a      	movs	r2, r5
    313e:	0038      	movs	r0, r7
    3140:	f000 fb5c 	bl	37fc <_realloc_r>
    3144:	1e06      	subs	r6, r0, #0
    3146:	d1e0      	bne.n	310a <__ssputs_r+0x76>
    3148:	6921      	ldr	r1, [r4, #16]
    314a:	0038      	movs	r0, r7
    314c:	f000 faae 	bl	36ac <_free_r>
    3150:	e7c7      	b.n	30e2 <__ssputs_r+0x4e>
    3152:	46c0      	nop			; (mov r8, r8)
    3154:	fffffb7f 	.word	0xfffffb7f

00003158 <_svfiprintf_r>:
    3158:	b5f0      	push	{r4, r5, r6, r7, lr}
    315a:	b09f      	sub	sp, #124	; 0x7c
    315c:	9002      	str	r0, [sp, #8]
    315e:	9305      	str	r3, [sp, #20]
    3160:	898b      	ldrh	r3, [r1, #12]
    3162:	000f      	movs	r7, r1
    3164:	0016      	movs	r6, r2
    3166:	061b      	lsls	r3, r3, #24
    3168:	d511      	bpl.n	318e <_svfiprintf_r+0x36>
    316a:	690b      	ldr	r3, [r1, #16]
    316c:	2b00      	cmp	r3, #0
    316e:	d10e      	bne.n	318e <_svfiprintf_r+0x36>
    3170:	2140      	movs	r1, #64	; 0x40
    3172:	f000 fae5 	bl	3740 <_malloc_r>
    3176:	6038      	str	r0, [r7, #0]
    3178:	6138      	str	r0, [r7, #16]
    317a:	2800      	cmp	r0, #0
    317c:	d105      	bne.n	318a <_svfiprintf_r+0x32>
    317e:	230c      	movs	r3, #12
    3180:	9a02      	ldr	r2, [sp, #8]
    3182:	3801      	subs	r0, #1
    3184:	6013      	str	r3, [r2, #0]
    3186:	b01f      	add	sp, #124	; 0x7c
    3188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    318a:	2340      	movs	r3, #64	; 0x40
    318c:	617b      	str	r3, [r7, #20]
    318e:	2300      	movs	r3, #0
    3190:	ad06      	add	r5, sp, #24
    3192:	616b      	str	r3, [r5, #20]
    3194:	3320      	adds	r3, #32
    3196:	766b      	strb	r3, [r5, #25]
    3198:	3310      	adds	r3, #16
    319a:	76ab      	strb	r3, [r5, #26]
    319c:	0034      	movs	r4, r6
    319e:	7823      	ldrb	r3, [r4, #0]
    31a0:	2b00      	cmp	r3, #0
    31a2:	d147      	bne.n	3234 <_svfiprintf_r+0xdc>
    31a4:	1ba3      	subs	r3, r4, r6
    31a6:	9304      	str	r3, [sp, #16]
    31a8:	d00d      	beq.n	31c6 <_svfiprintf_r+0x6e>
    31aa:	1ba3      	subs	r3, r4, r6
    31ac:	0032      	movs	r2, r6
    31ae:	0039      	movs	r1, r7
    31b0:	9802      	ldr	r0, [sp, #8]
    31b2:	f7ff ff6f 	bl	3094 <__ssputs_r>
    31b6:	1c43      	adds	r3, r0, #1
    31b8:	d100      	bne.n	31bc <_svfiprintf_r+0x64>
    31ba:	e0b5      	b.n	3328 <_svfiprintf_r+0x1d0>
    31bc:	696a      	ldr	r2, [r5, #20]
    31be:	9b04      	ldr	r3, [sp, #16]
    31c0:	4694      	mov	ip, r2
    31c2:	4463      	add	r3, ip
    31c4:	616b      	str	r3, [r5, #20]
    31c6:	7823      	ldrb	r3, [r4, #0]
    31c8:	2b00      	cmp	r3, #0
    31ca:	d100      	bne.n	31ce <_svfiprintf_r+0x76>
    31cc:	e0ac      	b.n	3328 <_svfiprintf_r+0x1d0>
    31ce:	2201      	movs	r2, #1
    31d0:	2300      	movs	r3, #0
    31d2:	4252      	negs	r2, r2
    31d4:	606a      	str	r2, [r5, #4]
    31d6:	a902      	add	r1, sp, #8
    31d8:	3254      	adds	r2, #84	; 0x54
    31da:	1852      	adds	r2, r2, r1
    31dc:	3401      	adds	r4, #1
    31de:	602b      	str	r3, [r5, #0]
    31e0:	60eb      	str	r3, [r5, #12]
    31e2:	60ab      	str	r3, [r5, #8]
    31e4:	7013      	strb	r3, [r2, #0]
    31e6:	65ab      	str	r3, [r5, #88]	; 0x58
    31e8:	4e58      	ldr	r6, [pc, #352]	; (334c <_svfiprintf_r+0x1f4>)
    31ea:	2205      	movs	r2, #5
    31ec:	7821      	ldrb	r1, [r4, #0]
    31ee:	0030      	movs	r0, r6
    31f0:	f000 fa3e 	bl	3670 <memchr>
    31f4:	1c62      	adds	r2, r4, #1
    31f6:	2800      	cmp	r0, #0
    31f8:	d120      	bne.n	323c <_svfiprintf_r+0xe4>
    31fa:	6829      	ldr	r1, [r5, #0]
    31fc:	06cb      	lsls	r3, r1, #27
    31fe:	d504      	bpl.n	320a <_svfiprintf_r+0xb2>
    3200:	2353      	movs	r3, #83	; 0x53
    3202:	ae02      	add	r6, sp, #8
    3204:	3020      	adds	r0, #32
    3206:	199b      	adds	r3, r3, r6
    3208:	7018      	strb	r0, [r3, #0]
    320a:	070b      	lsls	r3, r1, #28
    320c:	d504      	bpl.n	3218 <_svfiprintf_r+0xc0>
    320e:	2353      	movs	r3, #83	; 0x53
    3210:	202b      	movs	r0, #43	; 0x2b
    3212:	ae02      	add	r6, sp, #8
    3214:	199b      	adds	r3, r3, r6
    3216:	7018      	strb	r0, [r3, #0]
    3218:	7823      	ldrb	r3, [r4, #0]
    321a:	2b2a      	cmp	r3, #42	; 0x2a
    321c:	d016      	beq.n	324c <_svfiprintf_r+0xf4>
    321e:	2000      	movs	r0, #0
    3220:	210a      	movs	r1, #10
    3222:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3224:	7822      	ldrb	r2, [r4, #0]
    3226:	3a30      	subs	r2, #48	; 0x30
    3228:	2a09      	cmp	r2, #9
    322a:	d955      	bls.n	32d8 <_svfiprintf_r+0x180>
    322c:	2800      	cmp	r0, #0
    322e:	d015      	beq.n	325c <_svfiprintf_r+0x104>
    3230:	9309      	str	r3, [sp, #36]	; 0x24
    3232:	e013      	b.n	325c <_svfiprintf_r+0x104>
    3234:	2b25      	cmp	r3, #37	; 0x25
    3236:	d0b5      	beq.n	31a4 <_svfiprintf_r+0x4c>
    3238:	3401      	adds	r4, #1
    323a:	e7b0      	b.n	319e <_svfiprintf_r+0x46>
    323c:	2301      	movs	r3, #1
    323e:	1b80      	subs	r0, r0, r6
    3240:	4083      	lsls	r3, r0
    3242:	6829      	ldr	r1, [r5, #0]
    3244:	0014      	movs	r4, r2
    3246:	430b      	orrs	r3, r1
    3248:	602b      	str	r3, [r5, #0]
    324a:	e7cd      	b.n	31e8 <_svfiprintf_r+0x90>
    324c:	9b05      	ldr	r3, [sp, #20]
    324e:	1d18      	adds	r0, r3, #4
    3250:	681b      	ldr	r3, [r3, #0]
    3252:	9005      	str	r0, [sp, #20]
    3254:	2b00      	cmp	r3, #0
    3256:	db39      	blt.n	32cc <_svfiprintf_r+0x174>
    3258:	9309      	str	r3, [sp, #36]	; 0x24
    325a:	0014      	movs	r4, r2
    325c:	7823      	ldrb	r3, [r4, #0]
    325e:	2b2e      	cmp	r3, #46	; 0x2e
    3260:	d10b      	bne.n	327a <_svfiprintf_r+0x122>
    3262:	7863      	ldrb	r3, [r4, #1]
    3264:	1c62      	adds	r2, r4, #1
    3266:	2b2a      	cmp	r3, #42	; 0x2a
    3268:	d13e      	bne.n	32e8 <_svfiprintf_r+0x190>
    326a:	9b05      	ldr	r3, [sp, #20]
    326c:	3402      	adds	r4, #2
    326e:	1d1a      	adds	r2, r3, #4
    3270:	681b      	ldr	r3, [r3, #0]
    3272:	9205      	str	r2, [sp, #20]
    3274:	2b00      	cmp	r3, #0
    3276:	db34      	blt.n	32e2 <_svfiprintf_r+0x18a>
    3278:	9307      	str	r3, [sp, #28]
    327a:	4e35      	ldr	r6, [pc, #212]	; (3350 <_svfiprintf_r+0x1f8>)
    327c:	7821      	ldrb	r1, [r4, #0]
    327e:	2203      	movs	r2, #3
    3280:	0030      	movs	r0, r6
    3282:	f000 f9f5 	bl	3670 <memchr>
    3286:	2800      	cmp	r0, #0
    3288:	d006      	beq.n	3298 <_svfiprintf_r+0x140>
    328a:	2340      	movs	r3, #64	; 0x40
    328c:	1b80      	subs	r0, r0, r6
    328e:	4083      	lsls	r3, r0
    3290:	682a      	ldr	r2, [r5, #0]
    3292:	3401      	adds	r4, #1
    3294:	4313      	orrs	r3, r2
    3296:	602b      	str	r3, [r5, #0]
    3298:	7821      	ldrb	r1, [r4, #0]
    329a:	2206      	movs	r2, #6
    329c:	482d      	ldr	r0, [pc, #180]	; (3354 <_svfiprintf_r+0x1fc>)
    329e:	1c66      	adds	r6, r4, #1
    32a0:	7629      	strb	r1, [r5, #24]
    32a2:	f000 f9e5 	bl	3670 <memchr>
    32a6:	2800      	cmp	r0, #0
    32a8:	d046      	beq.n	3338 <_svfiprintf_r+0x1e0>
    32aa:	4b2b      	ldr	r3, [pc, #172]	; (3358 <_svfiprintf_r+0x200>)
    32ac:	2b00      	cmp	r3, #0
    32ae:	d12f      	bne.n	3310 <_svfiprintf_r+0x1b8>
    32b0:	6829      	ldr	r1, [r5, #0]
    32b2:	9b05      	ldr	r3, [sp, #20]
    32b4:	2207      	movs	r2, #7
    32b6:	05c9      	lsls	r1, r1, #23
    32b8:	d528      	bpl.n	330c <_svfiprintf_r+0x1b4>
    32ba:	189b      	adds	r3, r3, r2
    32bc:	4393      	bics	r3, r2
    32be:	3308      	adds	r3, #8
    32c0:	9305      	str	r3, [sp, #20]
    32c2:	696b      	ldr	r3, [r5, #20]
    32c4:	9a03      	ldr	r2, [sp, #12]
    32c6:	189b      	adds	r3, r3, r2
    32c8:	616b      	str	r3, [r5, #20]
    32ca:	e767      	b.n	319c <_svfiprintf_r+0x44>
    32cc:	425b      	negs	r3, r3
    32ce:	60eb      	str	r3, [r5, #12]
    32d0:	2302      	movs	r3, #2
    32d2:	430b      	orrs	r3, r1
    32d4:	602b      	str	r3, [r5, #0]
    32d6:	e7c0      	b.n	325a <_svfiprintf_r+0x102>
    32d8:	434b      	muls	r3, r1
    32da:	3401      	adds	r4, #1
    32dc:	189b      	adds	r3, r3, r2
    32de:	2001      	movs	r0, #1
    32e0:	e7a0      	b.n	3224 <_svfiprintf_r+0xcc>
    32e2:	2301      	movs	r3, #1
    32e4:	425b      	negs	r3, r3
    32e6:	e7c7      	b.n	3278 <_svfiprintf_r+0x120>
    32e8:	2300      	movs	r3, #0
    32ea:	0014      	movs	r4, r2
    32ec:	200a      	movs	r0, #10
    32ee:	001a      	movs	r2, r3
    32f0:	606b      	str	r3, [r5, #4]
    32f2:	7821      	ldrb	r1, [r4, #0]
    32f4:	3930      	subs	r1, #48	; 0x30
    32f6:	2909      	cmp	r1, #9
    32f8:	d903      	bls.n	3302 <_svfiprintf_r+0x1aa>
    32fa:	2b00      	cmp	r3, #0
    32fc:	d0bd      	beq.n	327a <_svfiprintf_r+0x122>
    32fe:	9207      	str	r2, [sp, #28]
    3300:	e7bb      	b.n	327a <_svfiprintf_r+0x122>
    3302:	4342      	muls	r2, r0
    3304:	3401      	adds	r4, #1
    3306:	1852      	adds	r2, r2, r1
    3308:	2301      	movs	r3, #1
    330a:	e7f2      	b.n	32f2 <_svfiprintf_r+0x19a>
    330c:	3307      	adds	r3, #7
    330e:	e7d5      	b.n	32bc <_svfiprintf_r+0x164>
    3310:	ab05      	add	r3, sp, #20
    3312:	9300      	str	r3, [sp, #0]
    3314:	003a      	movs	r2, r7
    3316:	4b11      	ldr	r3, [pc, #68]	; (335c <_svfiprintf_r+0x204>)
    3318:	0029      	movs	r1, r5
    331a:	9802      	ldr	r0, [sp, #8]
    331c:	e000      	b.n	3320 <_svfiprintf_r+0x1c8>
    331e:	bf00      	nop
    3320:	9003      	str	r0, [sp, #12]
    3322:	9b03      	ldr	r3, [sp, #12]
    3324:	3301      	adds	r3, #1
    3326:	d1cc      	bne.n	32c2 <_svfiprintf_r+0x16a>
    3328:	89bb      	ldrh	r3, [r7, #12]
    332a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    332c:	065b      	lsls	r3, r3, #25
    332e:	d400      	bmi.n	3332 <_svfiprintf_r+0x1da>
    3330:	e729      	b.n	3186 <_svfiprintf_r+0x2e>
    3332:	2001      	movs	r0, #1
    3334:	4240      	negs	r0, r0
    3336:	e726      	b.n	3186 <_svfiprintf_r+0x2e>
    3338:	ab05      	add	r3, sp, #20
    333a:	9300      	str	r3, [sp, #0]
    333c:	003a      	movs	r2, r7
    333e:	4b07      	ldr	r3, [pc, #28]	; (335c <_svfiprintf_r+0x204>)
    3340:	0029      	movs	r1, r5
    3342:	9802      	ldr	r0, [sp, #8]
    3344:	f000 f87a 	bl	343c <_printf_i>
    3348:	e7ea      	b.n	3320 <_svfiprintf_r+0x1c8>
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	00003958 	.word	0x00003958
    3350:	0000395e 	.word	0x0000395e
    3354:	00003962 	.word	0x00003962
    3358:	00000000 	.word	0x00000000
    335c:	00003095 	.word	0x00003095

00003360 <_printf_common>:
    3360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3362:	0015      	movs	r5, r2
    3364:	9301      	str	r3, [sp, #4]
    3366:	688a      	ldr	r2, [r1, #8]
    3368:	690b      	ldr	r3, [r1, #16]
    336a:	9000      	str	r0, [sp, #0]
    336c:	000c      	movs	r4, r1
    336e:	4293      	cmp	r3, r2
    3370:	da00      	bge.n	3374 <_printf_common+0x14>
    3372:	0013      	movs	r3, r2
    3374:	0022      	movs	r2, r4
    3376:	602b      	str	r3, [r5, #0]
    3378:	3243      	adds	r2, #67	; 0x43
    337a:	7812      	ldrb	r2, [r2, #0]
    337c:	2a00      	cmp	r2, #0
    337e:	d001      	beq.n	3384 <_printf_common+0x24>
    3380:	3301      	adds	r3, #1
    3382:	602b      	str	r3, [r5, #0]
    3384:	6823      	ldr	r3, [r4, #0]
    3386:	069b      	lsls	r3, r3, #26
    3388:	d502      	bpl.n	3390 <_printf_common+0x30>
    338a:	682b      	ldr	r3, [r5, #0]
    338c:	3302      	adds	r3, #2
    338e:	602b      	str	r3, [r5, #0]
    3390:	2706      	movs	r7, #6
    3392:	6823      	ldr	r3, [r4, #0]
    3394:	401f      	ands	r7, r3
    3396:	d027      	beq.n	33e8 <_printf_common+0x88>
    3398:	0023      	movs	r3, r4
    339a:	3343      	adds	r3, #67	; 0x43
    339c:	781b      	ldrb	r3, [r3, #0]
    339e:	1e5a      	subs	r2, r3, #1
    33a0:	4193      	sbcs	r3, r2
    33a2:	6822      	ldr	r2, [r4, #0]
    33a4:	0692      	lsls	r2, r2, #26
    33a6:	d430      	bmi.n	340a <_printf_common+0xaa>
    33a8:	0022      	movs	r2, r4
    33aa:	9901      	ldr	r1, [sp, #4]
    33ac:	3243      	adds	r2, #67	; 0x43
    33ae:	9800      	ldr	r0, [sp, #0]
    33b0:	9e08      	ldr	r6, [sp, #32]
    33b2:	47b0      	blx	r6
    33b4:	1c43      	adds	r3, r0, #1
    33b6:	d025      	beq.n	3404 <_printf_common+0xa4>
    33b8:	2306      	movs	r3, #6
    33ba:	6820      	ldr	r0, [r4, #0]
    33bc:	682a      	ldr	r2, [r5, #0]
    33be:	68e1      	ldr	r1, [r4, #12]
    33c0:	4003      	ands	r3, r0
    33c2:	2500      	movs	r5, #0
    33c4:	2b04      	cmp	r3, #4
    33c6:	d103      	bne.n	33d0 <_printf_common+0x70>
    33c8:	1a8d      	subs	r5, r1, r2
    33ca:	43eb      	mvns	r3, r5
    33cc:	17db      	asrs	r3, r3, #31
    33ce:	401d      	ands	r5, r3
    33d0:	68a3      	ldr	r3, [r4, #8]
    33d2:	6922      	ldr	r2, [r4, #16]
    33d4:	4293      	cmp	r3, r2
    33d6:	dd01      	ble.n	33dc <_printf_common+0x7c>
    33d8:	1a9b      	subs	r3, r3, r2
    33da:	18ed      	adds	r5, r5, r3
    33dc:	2700      	movs	r7, #0
    33de:	42bd      	cmp	r5, r7
    33e0:	d120      	bne.n	3424 <_printf_common+0xc4>
    33e2:	2000      	movs	r0, #0
    33e4:	e010      	b.n	3408 <_printf_common+0xa8>
    33e6:	3701      	adds	r7, #1
    33e8:	68e3      	ldr	r3, [r4, #12]
    33ea:	682a      	ldr	r2, [r5, #0]
    33ec:	1a9b      	subs	r3, r3, r2
    33ee:	429f      	cmp	r7, r3
    33f0:	dad2      	bge.n	3398 <_printf_common+0x38>
    33f2:	0022      	movs	r2, r4
    33f4:	2301      	movs	r3, #1
    33f6:	3219      	adds	r2, #25
    33f8:	9901      	ldr	r1, [sp, #4]
    33fa:	9800      	ldr	r0, [sp, #0]
    33fc:	9e08      	ldr	r6, [sp, #32]
    33fe:	47b0      	blx	r6
    3400:	1c43      	adds	r3, r0, #1
    3402:	d1f0      	bne.n	33e6 <_printf_common+0x86>
    3404:	2001      	movs	r0, #1
    3406:	4240      	negs	r0, r0
    3408:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    340a:	2030      	movs	r0, #48	; 0x30
    340c:	18e1      	adds	r1, r4, r3
    340e:	3143      	adds	r1, #67	; 0x43
    3410:	7008      	strb	r0, [r1, #0]
    3412:	0021      	movs	r1, r4
    3414:	1c5a      	adds	r2, r3, #1
    3416:	3145      	adds	r1, #69	; 0x45
    3418:	7809      	ldrb	r1, [r1, #0]
    341a:	18a2      	adds	r2, r4, r2
    341c:	3243      	adds	r2, #67	; 0x43
    341e:	3302      	adds	r3, #2
    3420:	7011      	strb	r1, [r2, #0]
    3422:	e7c1      	b.n	33a8 <_printf_common+0x48>
    3424:	0022      	movs	r2, r4
    3426:	2301      	movs	r3, #1
    3428:	321a      	adds	r2, #26
    342a:	9901      	ldr	r1, [sp, #4]
    342c:	9800      	ldr	r0, [sp, #0]
    342e:	9e08      	ldr	r6, [sp, #32]
    3430:	47b0      	blx	r6
    3432:	1c43      	adds	r3, r0, #1
    3434:	d0e6      	beq.n	3404 <_printf_common+0xa4>
    3436:	3701      	adds	r7, #1
    3438:	e7d1      	b.n	33de <_printf_common+0x7e>
	...

0000343c <_printf_i>:
    343c:	b5f0      	push	{r4, r5, r6, r7, lr}
    343e:	b08b      	sub	sp, #44	; 0x2c
    3440:	9206      	str	r2, [sp, #24]
    3442:	000a      	movs	r2, r1
    3444:	3243      	adds	r2, #67	; 0x43
    3446:	9307      	str	r3, [sp, #28]
    3448:	9005      	str	r0, [sp, #20]
    344a:	9204      	str	r2, [sp, #16]
    344c:	7e0a      	ldrb	r2, [r1, #24]
    344e:	000c      	movs	r4, r1
    3450:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3452:	2a6e      	cmp	r2, #110	; 0x6e
    3454:	d100      	bne.n	3458 <_printf_i+0x1c>
    3456:	e08f      	b.n	3578 <_printf_i+0x13c>
    3458:	d817      	bhi.n	348a <_printf_i+0x4e>
    345a:	2a63      	cmp	r2, #99	; 0x63
    345c:	d02c      	beq.n	34b8 <_printf_i+0x7c>
    345e:	d808      	bhi.n	3472 <_printf_i+0x36>
    3460:	2a00      	cmp	r2, #0
    3462:	d100      	bne.n	3466 <_printf_i+0x2a>
    3464:	e099      	b.n	359a <_printf_i+0x15e>
    3466:	2a58      	cmp	r2, #88	; 0x58
    3468:	d054      	beq.n	3514 <_printf_i+0xd8>
    346a:	0026      	movs	r6, r4
    346c:	3642      	adds	r6, #66	; 0x42
    346e:	7032      	strb	r2, [r6, #0]
    3470:	e029      	b.n	34c6 <_printf_i+0x8a>
    3472:	2a64      	cmp	r2, #100	; 0x64
    3474:	d001      	beq.n	347a <_printf_i+0x3e>
    3476:	2a69      	cmp	r2, #105	; 0x69
    3478:	d1f7      	bne.n	346a <_printf_i+0x2e>
    347a:	6821      	ldr	r1, [r4, #0]
    347c:	681a      	ldr	r2, [r3, #0]
    347e:	0608      	lsls	r0, r1, #24
    3480:	d523      	bpl.n	34ca <_printf_i+0x8e>
    3482:	1d11      	adds	r1, r2, #4
    3484:	6019      	str	r1, [r3, #0]
    3486:	6815      	ldr	r5, [r2, #0]
    3488:	e025      	b.n	34d6 <_printf_i+0x9a>
    348a:	2a73      	cmp	r2, #115	; 0x73
    348c:	d100      	bne.n	3490 <_printf_i+0x54>
    348e:	e088      	b.n	35a2 <_printf_i+0x166>
    3490:	d808      	bhi.n	34a4 <_printf_i+0x68>
    3492:	2a6f      	cmp	r2, #111	; 0x6f
    3494:	d029      	beq.n	34ea <_printf_i+0xae>
    3496:	2a70      	cmp	r2, #112	; 0x70
    3498:	d1e7      	bne.n	346a <_printf_i+0x2e>
    349a:	2220      	movs	r2, #32
    349c:	6809      	ldr	r1, [r1, #0]
    349e:	430a      	orrs	r2, r1
    34a0:	6022      	str	r2, [r4, #0]
    34a2:	e003      	b.n	34ac <_printf_i+0x70>
    34a4:	2a75      	cmp	r2, #117	; 0x75
    34a6:	d020      	beq.n	34ea <_printf_i+0xae>
    34a8:	2a78      	cmp	r2, #120	; 0x78
    34aa:	d1de      	bne.n	346a <_printf_i+0x2e>
    34ac:	0022      	movs	r2, r4
    34ae:	2178      	movs	r1, #120	; 0x78
    34b0:	3245      	adds	r2, #69	; 0x45
    34b2:	7011      	strb	r1, [r2, #0]
    34b4:	4a6c      	ldr	r2, [pc, #432]	; (3668 <_printf_i+0x22c>)
    34b6:	e030      	b.n	351a <_printf_i+0xde>
    34b8:	000e      	movs	r6, r1
    34ba:	681a      	ldr	r2, [r3, #0]
    34bc:	3642      	adds	r6, #66	; 0x42
    34be:	1d11      	adds	r1, r2, #4
    34c0:	6019      	str	r1, [r3, #0]
    34c2:	6813      	ldr	r3, [r2, #0]
    34c4:	7033      	strb	r3, [r6, #0]
    34c6:	2301      	movs	r3, #1
    34c8:	e079      	b.n	35be <_printf_i+0x182>
    34ca:	0649      	lsls	r1, r1, #25
    34cc:	d5d9      	bpl.n	3482 <_printf_i+0x46>
    34ce:	1d11      	adds	r1, r2, #4
    34d0:	6019      	str	r1, [r3, #0]
    34d2:	2300      	movs	r3, #0
    34d4:	5ed5      	ldrsh	r5, [r2, r3]
    34d6:	2d00      	cmp	r5, #0
    34d8:	da03      	bge.n	34e2 <_printf_i+0xa6>
    34da:	232d      	movs	r3, #45	; 0x2d
    34dc:	9a04      	ldr	r2, [sp, #16]
    34de:	426d      	negs	r5, r5
    34e0:	7013      	strb	r3, [r2, #0]
    34e2:	4b62      	ldr	r3, [pc, #392]	; (366c <_printf_i+0x230>)
    34e4:	270a      	movs	r7, #10
    34e6:	9303      	str	r3, [sp, #12]
    34e8:	e02f      	b.n	354a <_printf_i+0x10e>
    34ea:	6820      	ldr	r0, [r4, #0]
    34ec:	6819      	ldr	r1, [r3, #0]
    34ee:	0605      	lsls	r5, r0, #24
    34f0:	d503      	bpl.n	34fa <_printf_i+0xbe>
    34f2:	1d08      	adds	r0, r1, #4
    34f4:	6018      	str	r0, [r3, #0]
    34f6:	680d      	ldr	r5, [r1, #0]
    34f8:	e005      	b.n	3506 <_printf_i+0xca>
    34fa:	0640      	lsls	r0, r0, #25
    34fc:	d5f9      	bpl.n	34f2 <_printf_i+0xb6>
    34fe:	680d      	ldr	r5, [r1, #0]
    3500:	1d08      	adds	r0, r1, #4
    3502:	6018      	str	r0, [r3, #0]
    3504:	b2ad      	uxth	r5, r5
    3506:	4b59      	ldr	r3, [pc, #356]	; (366c <_printf_i+0x230>)
    3508:	2708      	movs	r7, #8
    350a:	9303      	str	r3, [sp, #12]
    350c:	2a6f      	cmp	r2, #111	; 0x6f
    350e:	d018      	beq.n	3542 <_printf_i+0x106>
    3510:	270a      	movs	r7, #10
    3512:	e016      	b.n	3542 <_printf_i+0x106>
    3514:	3145      	adds	r1, #69	; 0x45
    3516:	700a      	strb	r2, [r1, #0]
    3518:	4a54      	ldr	r2, [pc, #336]	; (366c <_printf_i+0x230>)
    351a:	9203      	str	r2, [sp, #12]
    351c:	681a      	ldr	r2, [r3, #0]
    351e:	6821      	ldr	r1, [r4, #0]
    3520:	1d10      	adds	r0, r2, #4
    3522:	6018      	str	r0, [r3, #0]
    3524:	6815      	ldr	r5, [r2, #0]
    3526:	0608      	lsls	r0, r1, #24
    3528:	d522      	bpl.n	3570 <_printf_i+0x134>
    352a:	07cb      	lsls	r3, r1, #31
    352c:	d502      	bpl.n	3534 <_printf_i+0xf8>
    352e:	2320      	movs	r3, #32
    3530:	4319      	orrs	r1, r3
    3532:	6021      	str	r1, [r4, #0]
    3534:	2710      	movs	r7, #16
    3536:	2d00      	cmp	r5, #0
    3538:	d103      	bne.n	3542 <_printf_i+0x106>
    353a:	2320      	movs	r3, #32
    353c:	6822      	ldr	r2, [r4, #0]
    353e:	439a      	bics	r2, r3
    3540:	6022      	str	r2, [r4, #0]
    3542:	0023      	movs	r3, r4
    3544:	2200      	movs	r2, #0
    3546:	3343      	adds	r3, #67	; 0x43
    3548:	701a      	strb	r2, [r3, #0]
    354a:	6863      	ldr	r3, [r4, #4]
    354c:	60a3      	str	r3, [r4, #8]
    354e:	2b00      	cmp	r3, #0
    3550:	db5c      	blt.n	360c <_printf_i+0x1d0>
    3552:	2204      	movs	r2, #4
    3554:	6821      	ldr	r1, [r4, #0]
    3556:	4391      	bics	r1, r2
    3558:	6021      	str	r1, [r4, #0]
    355a:	2d00      	cmp	r5, #0
    355c:	d158      	bne.n	3610 <_printf_i+0x1d4>
    355e:	9e04      	ldr	r6, [sp, #16]
    3560:	2b00      	cmp	r3, #0
    3562:	d064      	beq.n	362e <_printf_i+0x1f2>
    3564:	0026      	movs	r6, r4
    3566:	9b03      	ldr	r3, [sp, #12]
    3568:	3642      	adds	r6, #66	; 0x42
    356a:	781b      	ldrb	r3, [r3, #0]
    356c:	7033      	strb	r3, [r6, #0]
    356e:	e05e      	b.n	362e <_printf_i+0x1f2>
    3570:	0648      	lsls	r0, r1, #25
    3572:	d5da      	bpl.n	352a <_printf_i+0xee>
    3574:	b2ad      	uxth	r5, r5
    3576:	e7d8      	b.n	352a <_printf_i+0xee>
    3578:	6809      	ldr	r1, [r1, #0]
    357a:	681a      	ldr	r2, [r3, #0]
    357c:	0608      	lsls	r0, r1, #24
    357e:	d505      	bpl.n	358c <_printf_i+0x150>
    3580:	1d11      	adds	r1, r2, #4
    3582:	6019      	str	r1, [r3, #0]
    3584:	6813      	ldr	r3, [r2, #0]
    3586:	6962      	ldr	r2, [r4, #20]
    3588:	601a      	str	r2, [r3, #0]
    358a:	e006      	b.n	359a <_printf_i+0x15e>
    358c:	0649      	lsls	r1, r1, #25
    358e:	d5f7      	bpl.n	3580 <_printf_i+0x144>
    3590:	1d11      	adds	r1, r2, #4
    3592:	6019      	str	r1, [r3, #0]
    3594:	6813      	ldr	r3, [r2, #0]
    3596:	8aa2      	ldrh	r2, [r4, #20]
    3598:	801a      	strh	r2, [r3, #0]
    359a:	2300      	movs	r3, #0
    359c:	9e04      	ldr	r6, [sp, #16]
    359e:	6123      	str	r3, [r4, #16]
    35a0:	e054      	b.n	364c <_printf_i+0x210>
    35a2:	681a      	ldr	r2, [r3, #0]
    35a4:	1d11      	adds	r1, r2, #4
    35a6:	6019      	str	r1, [r3, #0]
    35a8:	6816      	ldr	r6, [r2, #0]
    35aa:	2100      	movs	r1, #0
    35ac:	6862      	ldr	r2, [r4, #4]
    35ae:	0030      	movs	r0, r6
    35b0:	f000 f85e 	bl	3670 <memchr>
    35b4:	2800      	cmp	r0, #0
    35b6:	d001      	beq.n	35bc <_printf_i+0x180>
    35b8:	1b80      	subs	r0, r0, r6
    35ba:	6060      	str	r0, [r4, #4]
    35bc:	6863      	ldr	r3, [r4, #4]
    35be:	6123      	str	r3, [r4, #16]
    35c0:	2300      	movs	r3, #0
    35c2:	9a04      	ldr	r2, [sp, #16]
    35c4:	7013      	strb	r3, [r2, #0]
    35c6:	e041      	b.n	364c <_printf_i+0x210>
    35c8:	6923      	ldr	r3, [r4, #16]
    35ca:	0032      	movs	r2, r6
    35cc:	9906      	ldr	r1, [sp, #24]
    35ce:	9805      	ldr	r0, [sp, #20]
    35d0:	9d07      	ldr	r5, [sp, #28]
    35d2:	47a8      	blx	r5
    35d4:	1c43      	adds	r3, r0, #1
    35d6:	d043      	beq.n	3660 <_printf_i+0x224>
    35d8:	6823      	ldr	r3, [r4, #0]
    35da:	2500      	movs	r5, #0
    35dc:	079b      	lsls	r3, r3, #30
    35de:	d40f      	bmi.n	3600 <_printf_i+0x1c4>
    35e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35e2:	68e0      	ldr	r0, [r4, #12]
    35e4:	4298      	cmp	r0, r3
    35e6:	da3d      	bge.n	3664 <_printf_i+0x228>
    35e8:	0018      	movs	r0, r3
    35ea:	e03b      	b.n	3664 <_printf_i+0x228>
    35ec:	0022      	movs	r2, r4
    35ee:	2301      	movs	r3, #1
    35f0:	3219      	adds	r2, #25
    35f2:	9906      	ldr	r1, [sp, #24]
    35f4:	9805      	ldr	r0, [sp, #20]
    35f6:	9e07      	ldr	r6, [sp, #28]
    35f8:	47b0      	blx	r6
    35fa:	1c43      	adds	r3, r0, #1
    35fc:	d030      	beq.n	3660 <_printf_i+0x224>
    35fe:	3501      	adds	r5, #1
    3600:	68e3      	ldr	r3, [r4, #12]
    3602:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3604:	1a9b      	subs	r3, r3, r2
    3606:	429d      	cmp	r5, r3
    3608:	dbf0      	blt.n	35ec <_printf_i+0x1b0>
    360a:	e7e9      	b.n	35e0 <_printf_i+0x1a4>
    360c:	2d00      	cmp	r5, #0
    360e:	d0a9      	beq.n	3564 <_printf_i+0x128>
    3610:	9e04      	ldr	r6, [sp, #16]
    3612:	0028      	movs	r0, r5
    3614:	0039      	movs	r1, r7
    3616:	f7fe fdcd 	bl	21b4 <__aeabi_uidivmod>
    361a:	9b03      	ldr	r3, [sp, #12]
    361c:	3e01      	subs	r6, #1
    361e:	5c5b      	ldrb	r3, [r3, r1]
    3620:	0028      	movs	r0, r5
    3622:	7033      	strb	r3, [r6, #0]
    3624:	0039      	movs	r1, r7
    3626:	f7fe fd3f 	bl	20a8 <__udivsi3>
    362a:	1e05      	subs	r5, r0, #0
    362c:	d1f1      	bne.n	3612 <_printf_i+0x1d6>
    362e:	2f08      	cmp	r7, #8
    3630:	d109      	bne.n	3646 <_printf_i+0x20a>
    3632:	6823      	ldr	r3, [r4, #0]
    3634:	07db      	lsls	r3, r3, #31
    3636:	d506      	bpl.n	3646 <_printf_i+0x20a>
    3638:	6863      	ldr	r3, [r4, #4]
    363a:	6922      	ldr	r2, [r4, #16]
    363c:	4293      	cmp	r3, r2
    363e:	dc02      	bgt.n	3646 <_printf_i+0x20a>
    3640:	2330      	movs	r3, #48	; 0x30
    3642:	3e01      	subs	r6, #1
    3644:	7033      	strb	r3, [r6, #0]
    3646:	9b04      	ldr	r3, [sp, #16]
    3648:	1b9b      	subs	r3, r3, r6
    364a:	6123      	str	r3, [r4, #16]
    364c:	9b07      	ldr	r3, [sp, #28]
    364e:	aa09      	add	r2, sp, #36	; 0x24
    3650:	9300      	str	r3, [sp, #0]
    3652:	0021      	movs	r1, r4
    3654:	9b06      	ldr	r3, [sp, #24]
    3656:	9805      	ldr	r0, [sp, #20]
    3658:	f7ff fe82 	bl	3360 <_printf_common>
    365c:	1c43      	adds	r3, r0, #1
    365e:	d1b3      	bne.n	35c8 <_printf_i+0x18c>
    3660:	2001      	movs	r0, #1
    3662:	4240      	negs	r0, r0
    3664:	b00b      	add	sp, #44	; 0x2c
    3666:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3668:	0000397a 	.word	0x0000397a
    366c:	00003969 	.word	0x00003969

00003670 <memchr>:
    3670:	b2c9      	uxtb	r1, r1
    3672:	1882      	adds	r2, r0, r2
    3674:	4290      	cmp	r0, r2
    3676:	d101      	bne.n	367c <memchr+0xc>
    3678:	2000      	movs	r0, #0
    367a:	4770      	bx	lr
    367c:	7803      	ldrb	r3, [r0, #0]
    367e:	428b      	cmp	r3, r1
    3680:	d0fb      	beq.n	367a <memchr+0xa>
    3682:	3001      	adds	r0, #1
    3684:	e7f6      	b.n	3674 <memchr+0x4>

00003686 <memmove>:
    3686:	b510      	push	{r4, lr}
    3688:	4288      	cmp	r0, r1
    368a:	d902      	bls.n	3692 <memmove+0xc>
    368c:	188b      	adds	r3, r1, r2
    368e:	4298      	cmp	r0, r3
    3690:	d308      	bcc.n	36a4 <memmove+0x1e>
    3692:	2300      	movs	r3, #0
    3694:	429a      	cmp	r2, r3
    3696:	d007      	beq.n	36a8 <memmove+0x22>
    3698:	5ccc      	ldrb	r4, [r1, r3]
    369a:	54c4      	strb	r4, [r0, r3]
    369c:	3301      	adds	r3, #1
    369e:	e7f9      	b.n	3694 <memmove+0xe>
    36a0:	5c8b      	ldrb	r3, [r1, r2]
    36a2:	5483      	strb	r3, [r0, r2]
    36a4:	3a01      	subs	r2, #1
    36a6:	d2fb      	bcs.n	36a0 <memmove+0x1a>
    36a8:	bd10      	pop	{r4, pc}
	...

000036ac <_free_r>:
    36ac:	b570      	push	{r4, r5, r6, lr}
    36ae:	0005      	movs	r5, r0
    36b0:	2900      	cmp	r1, #0
    36b2:	d010      	beq.n	36d6 <_free_r+0x2a>
    36b4:	1f0c      	subs	r4, r1, #4
    36b6:	6823      	ldr	r3, [r4, #0]
    36b8:	2b00      	cmp	r3, #0
    36ba:	da00      	bge.n	36be <_free_r+0x12>
    36bc:	18e4      	adds	r4, r4, r3
    36be:	0028      	movs	r0, r5
    36c0:	f000 f8d4 	bl	386c <__malloc_lock>
    36c4:	4a1d      	ldr	r2, [pc, #116]	; (373c <_free_r+0x90>)
    36c6:	6813      	ldr	r3, [r2, #0]
    36c8:	2b00      	cmp	r3, #0
    36ca:	d105      	bne.n	36d8 <_free_r+0x2c>
    36cc:	6063      	str	r3, [r4, #4]
    36ce:	6014      	str	r4, [r2, #0]
    36d0:	0028      	movs	r0, r5
    36d2:	f000 f8cc 	bl	386e <__malloc_unlock>
    36d6:	bd70      	pop	{r4, r5, r6, pc}
    36d8:	42a3      	cmp	r3, r4
    36da:	d909      	bls.n	36f0 <_free_r+0x44>
    36dc:	6821      	ldr	r1, [r4, #0]
    36de:	1860      	adds	r0, r4, r1
    36e0:	4283      	cmp	r3, r0
    36e2:	d1f3      	bne.n	36cc <_free_r+0x20>
    36e4:	6818      	ldr	r0, [r3, #0]
    36e6:	685b      	ldr	r3, [r3, #4]
    36e8:	1841      	adds	r1, r0, r1
    36ea:	6021      	str	r1, [r4, #0]
    36ec:	e7ee      	b.n	36cc <_free_r+0x20>
    36ee:	0013      	movs	r3, r2
    36f0:	685a      	ldr	r2, [r3, #4]
    36f2:	2a00      	cmp	r2, #0
    36f4:	d001      	beq.n	36fa <_free_r+0x4e>
    36f6:	42a2      	cmp	r2, r4
    36f8:	d9f9      	bls.n	36ee <_free_r+0x42>
    36fa:	6819      	ldr	r1, [r3, #0]
    36fc:	1858      	adds	r0, r3, r1
    36fe:	42a0      	cmp	r0, r4
    3700:	d10b      	bne.n	371a <_free_r+0x6e>
    3702:	6820      	ldr	r0, [r4, #0]
    3704:	1809      	adds	r1, r1, r0
    3706:	1858      	adds	r0, r3, r1
    3708:	6019      	str	r1, [r3, #0]
    370a:	4282      	cmp	r2, r0
    370c:	d1e0      	bne.n	36d0 <_free_r+0x24>
    370e:	6810      	ldr	r0, [r2, #0]
    3710:	6852      	ldr	r2, [r2, #4]
    3712:	1841      	adds	r1, r0, r1
    3714:	6019      	str	r1, [r3, #0]
    3716:	605a      	str	r2, [r3, #4]
    3718:	e7da      	b.n	36d0 <_free_r+0x24>
    371a:	42a0      	cmp	r0, r4
    371c:	d902      	bls.n	3724 <_free_r+0x78>
    371e:	230c      	movs	r3, #12
    3720:	602b      	str	r3, [r5, #0]
    3722:	e7d5      	b.n	36d0 <_free_r+0x24>
    3724:	6821      	ldr	r1, [r4, #0]
    3726:	1860      	adds	r0, r4, r1
    3728:	4282      	cmp	r2, r0
    372a:	d103      	bne.n	3734 <_free_r+0x88>
    372c:	6810      	ldr	r0, [r2, #0]
    372e:	6852      	ldr	r2, [r2, #4]
    3730:	1841      	adds	r1, r0, r1
    3732:	6021      	str	r1, [r4, #0]
    3734:	6062      	str	r2, [r4, #4]
    3736:	605c      	str	r4, [r3, #4]
    3738:	e7ca      	b.n	36d0 <_free_r+0x24>
    373a:	46c0      	nop			; (mov r8, r8)
    373c:	200000ec 	.word	0x200000ec

00003740 <_malloc_r>:
    3740:	2303      	movs	r3, #3
    3742:	b570      	push	{r4, r5, r6, lr}
    3744:	1ccd      	adds	r5, r1, #3
    3746:	439d      	bics	r5, r3
    3748:	3508      	adds	r5, #8
    374a:	0006      	movs	r6, r0
    374c:	2d0c      	cmp	r5, #12
    374e:	d21e      	bcs.n	378e <_malloc_r+0x4e>
    3750:	250c      	movs	r5, #12
    3752:	42a9      	cmp	r1, r5
    3754:	d81d      	bhi.n	3792 <_malloc_r+0x52>
    3756:	0030      	movs	r0, r6
    3758:	f000 f888 	bl	386c <__malloc_lock>
    375c:	4a25      	ldr	r2, [pc, #148]	; (37f4 <_malloc_r+0xb4>)
    375e:	6814      	ldr	r4, [r2, #0]
    3760:	0021      	movs	r1, r4
    3762:	2900      	cmp	r1, #0
    3764:	d119      	bne.n	379a <_malloc_r+0x5a>
    3766:	4c24      	ldr	r4, [pc, #144]	; (37f8 <_malloc_r+0xb8>)
    3768:	6823      	ldr	r3, [r4, #0]
    376a:	2b00      	cmp	r3, #0
    376c:	d103      	bne.n	3776 <_malloc_r+0x36>
    376e:	0030      	movs	r0, r6
    3770:	f000 f86a 	bl	3848 <_sbrk_r>
    3774:	6020      	str	r0, [r4, #0]
    3776:	0029      	movs	r1, r5
    3778:	0030      	movs	r0, r6
    377a:	f000 f865 	bl	3848 <_sbrk_r>
    377e:	1c43      	adds	r3, r0, #1
    3780:	d12c      	bne.n	37dc <_malloc_r+0x9c>
    3782:	230c      	movs	r3, #12
    3784:	0030      	movs	r0, r6
    3786:	6033      	str	r3, [r6, #0]
    3788:	f000 f871 	bl	386e <__malloc_unlock>
    378c:	e003      	b.n	3796 <_malloc_r+0x56>
    378e:	2d00      	cmp	r5, #0
    3790:	dadf      	bge.n	3752 <_malloc_r+0x12>
    3792:	230c      	movs	r3, #12
    3794:	6033      	str	r3, [r6, #0]
    3796:	2000      	movs	r0, #0
    3798:	bd70      	pop	{r4, r5, r6, pc}
    379a:	680b      	ldr	r3, [r1, #0]
    379c:	1b5b      	subs	r3, r3, r5
    379e:	d41a      	bmi.n	37d6 <_malloc_r+0x96>
    37a0:	2b0b      	cmp	r3, #11
    37a2:	d903      	bls.n	37ac <_malloc_r+0x6c>
    37a4:	600b      	str	r3, [r1, #0]
    37a6:	18cc      	adds	r4, r1, r3
    37a8:	6025      	str	r5, [r4, #0]
    37aa:	e003      	b.n	37b4 <_malloc_r+0x74>
    37ac:	428c      	cmp	r4, r1
    37ae:	d10e      	bne.n	37ce <_malloc_r+0x8e>
    37b0:	6863      	ldr	r3, [r4, #4]
    37b2:	6013      	str	r3, [r2, #0]
    37b4:	0030      	movs	r0, r6
    37b6:	f000 f85a 	bl	386e <__malloc_unlock>
    37ba:	0020      	movs	r0, r4
    37bc:	2207      	movs	r2, #7
    37be:	300b      	adds	r0, #11
    37c0:	1d23      	adds	r3, r4, #4
    37c2:	4390      	bics	r0, r2
    37c4:	1ac3      	subs	r3, r0, r3
    37c6:	d0e7      	beq.n	3798 <_malloc_r+0x58>
    37c8:	425a      	negs	r2, r3
    37ca:	50e2      	str	r2, [r4, r3]
    37cc:	e7e4      	b.n	3798 <_malloc_r+0x58>
    37ce:	684b      	ldr	r3, [r1, #4]
    37d0:	6063      	str	r3, [r4, #4]
    37d2:	000c      	movs	r4, r1
    37d4:	e7ee      	b.n	37b4 <_malloc_r+0x74>
    37d6:	000c      	movs	r4, r1
    37d8:	6849      	ldr	r1, [r1, #4]
    37da:	e7c2      	b.n	3762 <_malloc_r+0x22>
    37dc:	2303      	movs	r3, #3
    37de:	1cc4      	adds	r4, r0, #3
    37e0:	439c      	bics	r4, r3
    37e2:	42a0      	cmp	r0, r4
    37e4:	d0e0      	beq.n	37a8 <_malloc_r+0x68>
    37e6:	1a21      	subs	r1, r4, r0
    37e8:	0030      	movs	r0, r6
    37ea:	f000 f82d 	bl	3848 <_sbrk_r>
    37ee:	1c43      	adds	r3, r0, #1
    37f0:	d1da      	bne.n	37a8 <_malloc_r+0x68>
    37f2:	e7c6      	b.n	3782 <_malloc_r+0x42>
    37f4:	200000ec 	.word	0x200000ec
    37f8:	200000f0 	.word	0x200000f0

000037fc <_realloc_r>:
    37fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37fe:	0007      	movs	r7, r0
    3800:	000d      	movs	r5, r1
    3802:	0016      	movs	r6, r2
    3804:	2900      	cmp	r1, #0
    3806:	d105      	bne.n	3814 <_realloc_r+0x18>
    3808:	0011      	movs	r1, r2
    380a:	f7ff ff99 	bl	3740 <_malloc_r>
    380e:	0004      	movs	r4, r0
    3810:	0020      	movs	r0, r4
    3812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3814:	2a00      	cmp	r2, #0
    3816:	d103      	bne.n	3820 <_realloc_r+0x24>
    3818:	f7ff ff48 	bl	36ac <_free_r>
    381c:	0034      	movs	r4, r6
    381e:	e7f7      	b.n	3810 <_realloc_r+0x14>
    3820:	f000 f826 	bl	3870 <_malloc_usable_size_r>
    3824:	002c      	movs	r4, r5
    3826:	4286      	cmp	r6, r0
    3828:	d9f2      	bls.n	3810 <_realloc_r+0x14>
    382a:	0031      	movs	r1, r6
    382c:	0038      	movs	r0, r7
    382e:	f7ff ff87 	bl	3740 <_malloc_r>
    3832:	1e04      	subs	r4, r0, #0
    3834:	d0ec      	beq.n	3810 <_realloc_r+0x14>
    3836:	0029      	movs	r1, r5
    3838:	0032      	movs	r2, r6
    383a:	f7ff fbf7 	bl	302c <memcpy>
    383e:	0029      	movs	r1, r5
    3840:	0038      	movs	r0, r7
    3842:	f7ff ff33 	bl	36ac <_free_r>
    3846:	e7e3      	b.n	3810 <_realloc_r+0x14>

00003848 <_sbrk_r>:
    3848:	2300      	movs	r3, #0
    384a:	b570      	push	{r4, r5, r6, lr}
    384c:	4c06      	ldr	r4, [pc, #24]	; (3868 <_sbrk_r+0x20>)
    384e:	0005      	movs	r5, r0
    3850:	0008      	movs	r0, r1
    3852:	6023      	str	r3, [r4, #0]
    3854:	f7fe f9f8 	bl	1c48 <_sbrk>
    3858:	1c43      	adds	r3, r0, #1
    385a:	d103      	bne.n	3864 <_sbrk_r+0x1c>
    385c:	6823      	ldr	r3, [r4, #0]
    385e:	2b00      	cmp	r3, #0
    3860:	d000      	beq.n	3864 <_sbrk_r+0x1c>
    3862:	602b      	str	r3, [r5, #0]
    3864:	bd70      	pop	{r4, r5, r6, pc}
    3866:	46c0      	nop			; (mov r8, r8)
    3868:	20000208 	.word	0x20000208

0000386c <__malloc_lock>:
    386c:	4770      	bx	lr

0000386e <__malloc_unlock>:
    386e:	4770      	bx	lr

00003870 <_malloc_usable_size_r>:
    3870:	1f0b      	subs	r3, r1, #4
    3872:	681b      	ldr	r3, [r3, #0]
    3874:	1f18      	subs	r0, r3, #4
    3876:	2b00      	cmp	r3, #0
    3878:	da01      	bge.n	387e <_malloc_usable_size_r+0xe>
    387a:	580b      	ldr	r3, [r1, r0]
    387c:	18c0      	adds	r0, r0, r3
    387e:	4770      	bx	lr
    3880:	42000800 	.word	0x42000800
    3884:	42000c00 	.word	0x42000c00
    3888:	42001000 	.word	0x42001000
    388c:	42001400 	.word	0x42001400
    3890:	42001800 	.word	0x42001800
    3894:	42001c00 	.word	0x42001c00
    3898:	00000fda 	.word	0x00000fda
    389c:	00000fd6 	.word	0x00000fd6
    38a0:	00000fd6 	.word	0x00000fd6
    38a4:	00001038 	.word	0x00001038
    38a8:	00001038 	.word	0x00001038
    38ac:	00000fee 	.word	0x00000fee
    38b0:	00000fe0 	.word	0x00000fe0
    38b4:	00000ff4 	.word	0x00000ff4
    38b8:	00001026 	.word	0x00001026
    38bc:	00001274 	.word	0x00001274
    38c0:	00001254 	.word	0x00001254
    38c4:	00001254 	.word	0x00001254
    38c8:	000012e0 	.word	0x000012e0
    38cc:	00001266 	.word	0x00001266
    38d0:	00001282 	.word	0x00001282
    38d4:	00001258 	.word	0x00001258
    38d8:	00001290 	.word	0x00001290
    38dc:	000012d0 	.word	0x000012d0
    38e0:	42002c00 	.word	0x42002c00
    38e4:	42003000 	.word	0x42003000
    38e8:	42003400 	.word	0x42003400
    38ec:	42003800 	.word	0x42003800
    38f0:	42003c00 	.word	0x42003c00
    38f4:	10000800 	.word	0x10000800
    38f8:	40002000 	.word	0x40002000
    38fc:	00008000 	.word	0x00008000
    3900:	00006425 	.word	0x00006425
    3904:	00000d0a 	.word	0x00000d0a
    3908:	74736574 	.word	0x74736574
    390c:	00000000 	.word	0x00000000

00003910 <tc_interrupt_vectors.12796>:
    3910:	15141312 00000016 00002444 00002304     ........D$...#..
    3920:	00002304 00002300 0000241c 0000241c     .#...#...$...$..
    3930:	0000240e 00002300 0000241c 0000240e     .$...#...$...$..
    3940:	0000241c 00002300 00002424 00002424     .$...#..$$..$$..
    3950:	00002424 00002628 2b302d23 6c680020     $$..(&..#-0+ .hl
    3960:	6665004c 47464567 32313000 36353433     L.efgEFG.0123456
    3970:	41393837 45444342 31300046 35343332     789ABCDEF.012345
    3980:	39383736 64636261 00006665              6789abcdef..

0000398c <_init>:
    398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3992:	bc08      	pop	{r3}
    3994:	469e      	mov	lr, r3
    3996:	4770      	bx	lr

00003998 <__init_array_start>:
    3998:	000000dd 	.word	0x000000dd

0000399c <_fini>:
    399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    39a2:	bc08      	pop	{r3}
    39a4:	469e      	mov	lr, r3
    39a6:	4770      	bx	lr

000039a8 <__fini_array_start>:
    39a8:	000000b5 	.word	0x000000b5
